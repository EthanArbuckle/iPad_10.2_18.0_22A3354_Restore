void llvm::orc::ExecutionSession::transferResourceTracker(std::recursive_mutex *this, llvm::orc::ResourceTracker *a2, llvm::orc::ResourceTracker *a3)
{
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;

  if (a2 != a3)
  {
    std::recursive_mutex::lock(this);
    v6 = atomic_load((unint64_t *)a3 + 1);
    atomic_store(v6 | 1, (unint64_t *)a3 + 1);
    v7 = atomic_load((unint64_t *)a2 + 1);
    v8 = v7 & 0xFFFFFFFFFFFFFFFELL;
    llvm::orc::JITDylib::transferTracker((llvm::orc::JITDylib *)(v7 & 0xFFFFFFFFFFFFFFFELL), (void **)a2, a3);
    v10 = *(_QWORD *)&this[1].__m_.__opaque[48];
    for (i = this[2].__m_.__sig; i != v10; i -= 8)
    {
      v11 = *(_QWORD *)(i - 8);
      (*(void (**)(uint64_t, unint64_t, llvm::orc::ResourceTracker *, llvm::orc::ResourceTracker *))(*(_QWORD *)v11 + 24))(v11, v8, a2, a3);
    }
    std::recursive_mutex::unlock(this);
  }
}

uint64_t llvm::orc::ResourceTrackerDefunct::convertToErrorCode(llvm::orc::ResourceTrackerDefunct *this)
{
  return 1;
}

llvm::raw_ostream *llvm::orc::ResourceTrackerDefunct::log(llvm::orc::ResourceTrackerDefunct *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  llvm::raw_ostream *result;
  void *v6;

  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 0x10)
  {
    *(_BYTE *)(v4 + 16) = 32;
    *(_OWORD *)v4 = *(_OWORD *)"Resource tracker ";
    *((_QWORD *)a2 + 4) += 17;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Resource tracker ", 0x11uLL);
  }
  result = llvm::write_hex(a2, *((_QWORD *)this + 1), 3, 0, 0);
  v6 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v6 <= 0xEuLL)
    return llvm::raw_ostream::write(a2, " became defunct", 0xFuLL);
  qmemcpy(v6, " became defunct", 15);
  *((_QWORD *)a2 + 4) += 15;
  return result;
}

uint64_t llvm::orc::FailedToMaterialize::FailedToMaterialize(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *i;
  _QWORD *v8;
  unsigned int *v9;
  unsigned int v10;

  *(_QWORD *)result = &off_251C14588;
  *(_OWORD *)(result + 8) = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(result + 24) = *(_OWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  v3 = *(_QWORD *)(result + 24);
  if (*(_DWORD *)(v3 + 8))
  {
    v4 = *(_QWORD **)v3;
    v5 = *(unsigned int *)(v3 + 16);
    if ((_DWORD)v5)
    {
      v6 = 32 * v5;
      for (i = *(_QWORD **)v3; (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 4)
      {
        v6 -= 32;
        if (!v6)
          return result;
      }
    }
    else
    {
      i = *(_QWORD **)v3;
    }
    v8 = &v4[4 * v5];
    if (i != v8)
    {
      v9 = (unsigned int *)*i;
      do
LABEL_10:
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      while (1)
      {
        i += 4;
        if (i == v8)
          break;
        v9 = (unsigned int *)*i;
        if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (i != v8)
            goto LABEL_10;
          return result;
        }
      }
    }
  }
  return result;
}

void llvm::orc::FailedToMaterialize::~FailedToMaterialize(llvm::orc::FailedToMaterialize *this)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  *(_QWORD *)this = &off_251C14588;
  v2 = *((_QWORD *)this + 3);
  if (*(_DWORD *)(v2 + 8))
  {
    v3 = *(_QWORD **)v2;
    v4 = *(unsigned int *)(v2 + 16);
    if ((_DWORD)v4)
    {
      v5 = 32 * v4;
      v6 = v3;
      while ((*v6 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v6 += 4;
        v5 -= 32;
        if (!v5)
          goto LABEL_14;
      }
    }
    else
    {
      v6 = v3;
    }
    v7 = &v3[4 * v4];
    if (v6 != v7)
    {
      v8 = (unsigned int *)*v6;
LABEL_10:
      llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v8);
      while (1)
      {
        v6 += 4;
        if (v6 == v7)
          break;
        v8 = (unsigned int *)*v6;
        if ((*v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v6 != v7)
            goto LABEL_10;
          break;
        }
      }
    }
  }
LABEL_14:
  v9 = (std::__shared_weak_count *)*((_QWORD *)this + 4);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)this + 8);
}

{
  llvm::orc::FailedToMaterialize::~FailedToMaterialize(this);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::orc::FailedToMaterialize::convertToErrorCode(llvm::orc::FailedToMaterialize *this)
{
  return 1;
}

llvm::raw_ostream *llvm::orc::FailedToMaterialize::log(llvm::orc::FailedToMaterialize *this, llvm::raw_ostream *a2)
{
  void *v4;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0x1EuLL)
  {
    qmemcpy(v4, "Failed to materialize symbols: ", 31);
    *((_QWORD *)a2 + 4) += 31;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Failed to materialize symbols: ", 0x1FuLL);
  }
  return llvm::orc::operator<<(a2, *((_QWORD *)this + 3));
}

uint64_t llvm::orc::UnsatisfiedSymbolDependencies::convertToErrorCode(llvm::orc::UnsatisfiedSymbolDependencies *this)
{
  return 1;
}

llvm::raw_ostream *llvm::orc::UnsatisfiedSymbolDependencies::log(llvm::orc::UnsatisfiedSymbolDependencies *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  const char *v8;
  int v9;
  const char *v10;
  size_t v11;
  void *v12;
  void *v13;
  llvm::raw_ostream *result;
  _WORD *v15;
  int v16;
  const char *v17;
  size_t v18;
  _BYTE *v19;

  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 2)
  {
    *(_BYTE *)(v4 + 2) = 32;
    *(_WORD *)v4 = 28233;
    *((_QWORD *)a2 + 4) += 3;
  }
  else
  {
    llvm::raw_ostream::write(a2, "In ", 3uLL);
  }
  v5 = *((_QWORD *)this + 3);
  v8 = *(const char **)(v5 + 8);
  v6 = v5 + 8;
  v7 = v8;
  v9 = *(char *)(v6 + 23);
  if (v9 >= 0)
    v10 = (const char *)v6;
  else
    v10 = v7;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(v6 + 23);
  else
    v11 = *(_QWORD *)(v6 + 8);
  llvm::raw_ostream::write(a2, v10, v11);
  v12 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v12 > 0x17uLL)
  {
    qmemcpy(v12, ", failed to materialize ", 24);
    *((_QWORD *)a2 + 4) += 24;
  }
  else
  {
    llvm::raw_ostream::write(a2, ", failed to materialize ", 0x18uLL);
  }
  llvm::orc::operator<<(a2, (uint64_t)this + 32);
  v13 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v13 > 0x21uLL)
  {
    qmemcpy(v13, ", due to unsatisfied dependencies ", 34);
    *((_QWORD *)a2 + 4) += 34;
  }
  else
  {
    llvm::raw_ostream::write(a2, ", due to unsatisfied dependencies ", 0x22uLL);
  }
  result = llvm::orc::operator<<(a2, (uint64_t)this + 56);
  if (*((char *)this + 103) < 0)
  {
    if (!*((_QWORD *)this + 11))
      return result;
  }
  else if (!*((_BYTE *)this + 103))
  {
    return result;
  }
  v15 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v15 > 1uLL)
  {
    *v15 = 10272;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, " (", 2uLL);
  }
  v16 = *((char *)this + 103);
  if (v16 >= 0)
    v17 = (char *)this + 80;
  else
    v17 = (const char *)*((_QWORD *)this + 10);
  if (v16 >= 0)
    v18 = *((unsigned __int8 *)this + 103);
  else
    v18 = *((_QWORD *)this + 11);
  result = llvm::raw_ostream::write(a2, v17, v18);
  v19 = (_BYTE *)*((_QWORD *)a2 + 4);
  if (*((_BYTE **)a2 + 3) == v19)
    return llvm::raw_ostream::write(a2, ")", 1uLL);
  *v19 = 41;
  ++*((_QWORD *)a2 + 4);
  return result;
}

_QWORD *llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(uint64_t a1)
{
  int v2;
  _QWORD *result;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a1 + 8);
  result = *(_QWORD **)a1;
  v4 = *(unsigned int *)(a1 + 16);
  v5 = &result[v4];
  if (!v2)
    return v5;
  if ((_DWORD)v4)
  {
    v6 = 8 * v4;
    while ((*result | 8) == 0xFFFFFFFFFFFFFFF8)
    {
      ++result;
      v6 -= 8;
      if (!v6)
        return v5;
    }
  }
  return result;
}

uint64_t llvm::orc::SymbolsNotFound::convertToErrorCode(llvm::orc::SymbolsNotFound *this)
{
  return 1;
}

llvm::raw_ostream *llvm::orc::SymbolsNotFound::log(size_t ***this, llvm::raw_ostream *a2)
{
  uint64_t v4;

  v4 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) > 0x12)
  {
    *(_DWORD *)(v4 + 15) = 540697710;
    *(_OWORD *)v4 = *(_OWORD *)"Symbols not found: ";
    *((_QWORD *)a2 + 4) += 19;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Symbols not found: ", 0x13uLL);
  }
  return llvm::orc::operator<<(a2, this + 3);
}

uint64_t llvm::orc::MissingSymbolDefinitions::convertToErrorCode(llvm::orc::MissingSymbolDefinitions *this)
{
  return 16;
}

llvm::raw_ostream *llvm::orc::MissingSymbolDefinitions::log(llvm::orc::MissingSymbolDefinitions *this, llvm::raw_ostream *a2)
{
  void *v4;
  int v5;
  const char *v6;
  size_t v7;
  _WORD *v8;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0x1DuLL)
  {
    qmemcpy(v4, "Missing definitions in module ", 30);
    *((_QWORD *)a2 + 4) += 30;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Missing definitions in module ", 0x1EuLL);
  }
  v5 = *((char *)this + 47);
  if (v5 >= 0)
    v6 = (char *)this + 24;
  else
    v6 = (const char *)*((_QWORD *)this + 3);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 47);
  else
    v7 = *((_QWORD *)this + 4);
  llvm::raw_ostream::write(a2, v6, v7);
  v8 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 8250;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, ": ", 2uLL);
  }
  return llvm::orc::operator<<(a2, (size_t ***)this + 6);
}

uint64_t llvm::orc::UnexpectedSymbolDefinitions::convertToErrorCode(llvm::orc::UnexpectedSymbolDefinitions *this)
{
  return 17;
}

llvm::raw_ostream *llvm::orc::UnexpectedSymbolDefinitions::log(llvm::orc::UnexpectedSymbolDefinitions *this, llvm::raw_ostream *a2)
{
  void *v4;
  int v5;
  const char *v6;
  size_t v7;
  _WORD *v8;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0x20uLL)
  {
    qmemcpy(v4, "Unexpected definitions in module ", 33);
    *((_QWORD *)a2 + 4) += 33;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Unexpected definitions in module ", 0x21uLL);
  }
  v5 = *((char *)this + 47);
  if (v5 >= 0)
    v6 = (char *)this + 24;
  else
    v6 = (const char *)*((_QWORD *)this + 3);
  if (v5 >= 0)
    v7 = *((unsigned __int8 *)this + 47);
  else
    v7 = *((_QWORD *)this + 4);
  llvm::raw_ostream::write(a2, v6, v7);
  v8 = (_WORD *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 8250;
    *((_QWORD *)a2 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(a2, ": ", 2uLL);
  }
  return llvm::orc::operator<<(a2, (size_t ***)this + 6);
}

uint64_t llvm::orc::AsynchronousSymbolQuery::AsynchronousSymbolQuery(uint64_t a1, uint64_t **a2, char a3, __int128 *a4)
{
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  BOOL v11;
  _QWORD *v12;

  v7 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a1, a4);
  *(_QWORD *)(v7 + 56) = 0;
  v8 = (uint64_t *)(v7 + 56);
  *(_QWORD *)(v7 + 32) = 0;
  *(_QWORD *)(v7 + 40) = 0;
  *(_DWORD *)(v7 + 48) = 0;
  *(_QWORD *)(v7 + 64) = 0;
  *(_DWORD *)(v7 + 72) = 0;
  *(_BYTE *)(v7 + 88) = a3;
  v9 = *a2;
  v10 = a2[1];
  v11 = v10 == *a2;
  *(_QWORD *)(v7 + 80) = ((char *)v10 - (char *)*a2) >> 4;
  if (!v11)
  {
    do
    {
      v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(v8, v9);
      v12[1] = 0;
      *((_WORD *)v12 + 8) = 0;
      v9 += 2;
    }
    while (v9 != v10);
  }
  return a1;
}

uint64_t llvm::orc::AsynchronousSymbolQuery::notifySymbolMetRequiredState(uint64_t a1, _QWORD *a2, uint64_t a3, __int16 a4)
{
  uint64_t result;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;

  v11 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(a1 + 56), a2, &v11);
  v8 = v11;
  if (!(_DWORD)result)
    v8 = *(_QWORD *)(a1 + 56) + 24 * *(unsigned int *)(a1 + 72);
  if ((a4 & 0x4000) != 0)
  {
    if ((unint64_t)(*(_QWORD *)v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v9 = (unint64_t *)(*(_QWORD *)v8 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
    }
    *(_QWORD *)v8 = -16;
    *(int32x2_t *)(a1 + 64) = vadd_s32(*(int32x2_t *)(a1 + 64), (int32x2_t)0x1FFFFFFFFLL);
  }
  else
  {
    *(_QWORD *)(v8 + 8) = a3;
    *(_WORD *)(v8 + 16) = a4;
  }
  --*(_QWORD *)(a1 + 80);
  return result;
}

uint64_t llvm::orc::AsynchronousSymbolQuery::handleComplete(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD v11[2];
  int v12;
  __int128 v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v4 = operator new();
  v5 = *(_QWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 56) = 0;
  v6 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = 0;
  v7 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v13, (__int128 *)a1);
  *(_QWORD *)v4 = &off_251C14890;
  *(_QWORD *)(v4 + 8) = v5;
  v11[0] = 0;
  *(_QWORD *)(v4 + 16) = v7;
  v11[1] = 0;
  *(_DWORD *)(v4 + 24) = v6;
  v12 = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v4 + 32, v13);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v13);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)v11);
  memset(v13, 0, sizeof(v13));
  if (v13 != (__int128 *)a1)
  {
    v8 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)a1);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v8, v13);
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v13);
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 72) + 24);
  *(_QWORD *)&v13[0] = v4;
  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v9 + 16))(v9, v13);
  result = *(_QWORD *)&v13[0];
  *(_QWORD *)&v13[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *llvm::orc::AsynchronousSymbolQuery::handleFailed(__int128 *a1, uint64_t *a2)
{
  __int128 *v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  __int128 v7[2];
  _QWORD v8[3];
  char v9;
  uint64_t v10;

  v2 = a1;
  v10 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  *a2 = 0;
  v9 = -1;
  v8[0] = v3;
  v4 = *((_QWORD *)a1 + 3);
  if ((v4 & 2) == 0)
    a1 = *(__int128 **)a1;
  (*(void (**)(__int128 *, _QWORD *))(v4 & 0xFFFFFFFFFFFFFFF8))(a1, v8);
  llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v8);
  memset(v7, 0, sizeof(v7));
  if (v7 != v2)
  {
    v5 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v2);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v5, v7);
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v7);
}

int32x2_t llvm::orc::AsynchronousSymbolQuery::removeQueryDependence(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  int32x2_t result;
  _QWORD *v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;

  v10 = 0;
  else
    v5 = *(_QWORD *)(a1 + 32) + 32 * *(unsigned int *)(a1 + 48);
  v10 = 0;
  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v5 + 8), a3, &v10) & 1) == 0)
  {
    if (*(_DWORD *)(v5 + 16))
      return result;
    goto LABEL_11;
  }
  v7 = v10;
  if ((unint64_t)(*v10 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v8 = (unint64_t *)(*v10 + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
  }
  *v7 = -16;
  result = vadd_s32(*(int32x2_t *)(v5 + 16), (int32x2_t)0x1FFFFFFFFLL);
  *(int32x2_t *)(v5 + 16) = result;
  if (!result.i32[0])
  {
LABEL_11:
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(v5 + 8);
    *(_QWORD *)v5 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 40), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 40) = result;
  }
  return result;
}

_DWORD *llvm::orc::AsynchronousSymbolQuery::detach(_DWORD *this)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  _DWORD *v26;
  __int128 *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;

  v1 = this;
  v2 = this[16];
  if (*((_QWORD *)this + 8))
  {
    v3 = this[18];
    v4 = (_QWORD *)*((_QWORD *)this + 7);
    v5 = &v4[3 * v3];
    if (v3 <= 4 * v2 || v3 < 0x41)
    {
      if (v3)
      {
        do
        {
          if ((unint64_t)(*v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v12 = (unint64_t *)(*v4 + 8);
            do
              v13 = __ldaxr(v12);
            while (__stlxr(v13 - 1, v12));
          }
          *v4 = -8;
          v4 += 3;
        }
        while (v4 != v5);
      }
      *((_QWORD *)this + 8) = 0;
    }
    else
    {
      do
      {
        if ((unint64_t)(*v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v6 = (unint64_t *)(*v4 + 8);
          do
            v7 = __ldaxr(v6);
          while (__stlxr(v7 - 1, v6));
        }
        v4 += 3;
      }
      while (v4 != v5);
      v8 = 1 << (33 - __clz(v2 - 1));
      if (v8 <= 64)
        v8 = 64;
      if (v2)
        v9 = v8;
      else
        v9 = 0;
      if ((_DWORD)v9 == this[18])
      {
        *((_QWORD *)this + 8) = 0;
        if ((_DWORD)v9)
        {
          v10 = (_QWORD *)*((_QWORD *)this + 7);
          v11 = 24 * v9;
          do
          {
            *v10 = -8;
            v10 += 3;
            v11 -= 24;
          }
          while (v11);
        }
      }
      else
      {
        MEMORY[0x24BD1B398](*((_QWORD *)this + 7), 8);
        this = llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::init(v1 + 14, v9);
      }
    }
  }
  v15 = v1 + 8;
  v14 = (uint64_t *)*((_QWORD *)v1 + 4);
  *((_QWORD *)v1 + 10) = 0;
  if (v1[10])
  {
    v16 = v1[12];
    if ((_DWORD)v16)
    {
      v17 = 32 * v16;
      v18 = v14;
      while ((*v18 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v18 += 4;
        v17 -= 32;
        if (!v17)
          goto LABEL_56;
      }
    }
    else
    {
      v18 = v14;
    }
    v19 = &v14[4 * v16];
    if (v18 != v19)
    {
      v20 = *v18;
      do
      {
        this = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(v18 + 1));
        v22 = v18[1] + 8 * *((unsigned int *)v18 + 6);
        if ((_DWORD *)v22 != this)
        {
          v23 = (uint64_t *)this;
          v24 = v21;
          v25 = (uint64_t *)(v20 + 160);
          do
          {
            this = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct(v25, v23);
            v26 = this;
            v27 = (__int128 *)*((_QWORD *)this + 6);
            v28 = *((_QWORD *)this + 7);
            if (v27 != (__int128 *)v28)
            {
              while (*(_DWORD **)v27 != v1)
              {
                if (++v27 == (__int128 *)v28)
                {
                  v27 = (__int128 *)*((_QWORD *)this + 7);
                  break;
                }
              }
            }
            if (v27 + 1 != (__int128 *)v28)
            {
              do
              {
                v29 = (uint64_t)v27++;
                this = (_DWORD *)std::shared_ptr<llvm::sys::fs::detail::DirIterState>::operator=[abi:nn180100](v29, v27);
              }
              while (this + 8 != (_DWORD *)v28);
              v28 = *((_QWORD *)v26 + 7);
            }
            while ((__int128 *)v28 != v27)
            {
              v28 -= 16;
              this = (_DWORD *)std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](v28);
            }
            *((_QWORD *)v26 + 7) = v27;
            while (++v23 != v24)
            {
              if ((*v23 | 8) != 0xFFFFFFFFFFFFFFF8)
                goto LABEL_50;
            }
            v23 = v24;
LABEL_50:
            ;
          }
          while (v23 != (uint64_t *)v22);
        }
        v18 += 4;
        v15 = v1 + 8;
        if (v18 == v19)
          break;
        while (1)
        {
          v20 = *v18;
          if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
            break;
          v18 += 4;
          if (v18 == v19)
            goto LABEL_56;
        }
      }
      while (v18 != v19);
    }
  }
LABEL_56:
  v30 = v1[10];
  if (v30 || v1[11])
  {
    v31 = v1[12];
    if (v31 > 4 * v30 && v31 >= 0x41)
    {
      this = (_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)v15);
      if (v30)
      {
        v32 = 1 << (33 - __clz(v30 - 1));
        if (v32 <= 64)
          v33 = 64;
        else
          v33 = v32;
        if (v33 == v1[12])
        {
          *((_QWORD *)v1 + 5) = 0;
          v34 = 32 * v33;
          v35 = (_QWORD *)*((_QWORD *)v1 + 4);
          do
          {
            *v35 = -4096;
            v35 += 4;
            v34 -= 32;
          }
          while (v34);
          return this;
        }
LABEL_79:
        MEMORY[0x24BD1B398](*(_QWORD *)v15, 8);
        return llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::init(v15, v33);
      }
      if (v1[12])
      {
        v33 = 0;
        goto LABEL_79;
      }
LABEL_75:
      *((_QWORD *)v1 + 5) = 0;
      return this;
    }
    if (!(_DWORD)v31)
      goto LABEL_75;
    this = (_DWORD *)(*(_QWORD *)v15 + 8);
    v36 = 32 * v31;
    while (1)
    {
      v37 = *((_QWORD *)this - 1);
      if (v37 == -8192)
        goto LABEL_73;
      if (v37 != -4096)
        break;
LABEL_74:
      this += 8;
      v36 -= 32;
      if (!v36)
        goto LABEL_75;
    }
    this = (_DWORD *)llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)this);
LABEL_73:
    *((_QWORD *)this - 1) = -4096;
    goto LABEL_74;
  }
  return this;
}

uint64_t llvm::orc::AbsoluteSymbolsMaterializationUnit::AbsoluteSymbolsMaterializationUnit(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;

  llvm::orc::AbsoluteSymbolsMaterializationUnit::extractFlags((uint64_t *)a2, (uint64_t)&v8);
  v4 = v8;
  *(_QWORD *)a1 = off_251C147C0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_QWORD *)(a1 + 16) = v9;
  v8 = 0;
  v9 = 0;
  *(_DWORD *)(a1 + 24) = v10;
  v10 = 0;
  *(_QWORD *)(a1 + 32) = v11;
  v11 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v8);
  *(_QWORD *)a1 = &off_251C14678;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_DWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 48) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v5 = *(_DWORD *)(a1 + 52);
  *(_DWORD *)(a1 + 52) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v5;
  v6 = *(_DWORD *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v6;
  return a1;
}

uint64_t llvm::orc::AbsoluteSymbolsMaterializationUnit::extractFlags@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v3 = *((_DWORD *)a1 + 2);
  if (!v3)
    goto LABEL_15;
  v4 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v4)
  {
    v5 = 24 * v4;
    v6 = *a1;
    while ((*(_QWORD *)v6 | 8) == 0xFFFFFFFFFFFFFFF8)
    {
      v6 += 24;
      v5 -= 24;
      if (!v5)
        goto LABEL_14;
    }
  }
  else
  {
    v6 = *a1;
  }
  v7 = *a1 + 24 * v4;
  if (v6 == v7)
  {
LABEL_14:
    v3 = 0;
LABEL_15:
    v8 = 0;
    v9 = 0;
    goto LABEL_16;
  }
LABEL_9:
  *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v13, (uint64_t *)v6)+ 4) = *(_WORD *)(v6 + 16);
  while (1)
  {
    v6 += 24;
    if (v6 == v7)
      break;
    if ((*(_QWORD *)v6 | 8) != 0xFFFFFFFFFFFFFFF8)
    {
      if (v6 != v7)
        goto LABEL_9;
      break;
    }
  }
  v8 = v13;
  v9 = v14;
  v3 = v15;
LABEL_16:
  v13 = 0;
  v14 = 0;
  v15 = 0;
  *(_QWORD *)a2 = v8;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(a2 + 8) = v9;
  *(_DWORD *)(a2 + 16) = v3;
  v12 = 0;
  *(_QWORD *)(a2 + 24) = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v11);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v13);
}

const char *llvm::orc::AbsoluteSymbolsMaterializationUnit::getName(llvm::orc::AbsoluteSymbolsMaterializationUnit *this)
{
  return "<Absolute Symbols>";
}

void llvm::orc::AbsoluteSymbolsMaterializationUnit::materialize(uint64_t a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  llvm::orc::JITDylib::resolve(**a2, (uint64_t)*a2, a1 + 40, &v7);
  if (v7)
  {
    v3 = *(_QWORD *)(**a2 + 32);
    v6 = v7;
    v7 = 0;
    llvm::orc::ExecutionSession::reportError(v3, &v6);
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    llvm::orc::ExecutionSession::OL_notifyFailed(*(_QWORD *)(**a2 + 32), (uint64_t)*a2);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  else
  {
    llvm::orc::ExecutionSession::OL_notifyEmitted(*(std::recursive_mutex **)(**a2 + 32), (uint64_t)*a2, 0, 0, &v7);
    if (v7)
    {
      v4 = *(_QWORD *)(**a2 + 32);
      v5 = v7;
      llvm::orc::ExecutionSession::reportError(v4, &v5);
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      llvm::orc::ExecutionSession::OL_notifyFailed(*(_QWORD *)(**a2 + 32), (uint64_t)*a2);
    }
  }
}

int32x2_t llvm::orc::AbsoluteSymbolsMaterializationUnit::discard(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::erase(a1 + 40, a3);
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::erase(uint64_t a1, _QWORD *a2)
{
  int32x2_t result;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;

  v7 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v7))
  {
    v4 = v7;
    if ((unint64_t)(*v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v5 = (unint64_t *)(*v7 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
    }
    *v4 = -16;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::orc::ReExportsMaterializationUnit::ReExportsMaterializationUnit(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;

  llvm::orc::AbsoluteSymbolsMaterializationUnit::extractFlags((uint64_t *)a4, (uint64_t)&v12);
  v8 = v12;
  *(_QWORD *)a1 = off_251C147C0;
  *(_QWORD *)(a1 + 8) = v8;
  *(_QWORD *)(a1 + 16) = v13;
  v12 = 0;
  v13 = 0;
  *(_DWORD *)(a1 + 24) = v14;
  v14 = 0;
  *(_QWORD *)(a1 + 32) = v15;
  v15 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v12);
  *(_QWORD *)a1 = &off_251C146B8;
  *(_QWORD *)(a1 + 40) = a2;
  *(_DWORD *)(a1 + 48) = a3;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_DWORD *)(a1 + 64) = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 8) = 0;
  v9 = *(_DWORD *)(a1 + 68);
  *(_DWORD *)(a1 + 68) = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = v9;
  v10 = *(_DWORD *)(a1 + 72);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = v10;
  return a1;
}

const char *llvm::orc::ReExportsMaterializationUnit::getName(llvm::orc::ReExportsMaterializationUnit *this)
{
  return "<Reexports>";
}

uint64_t llvm::orc::ReExportsMaterializationUnit::materialize(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::orc::ExecutionSession *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  int32x2_t v23;
  __int32 v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  _QWORD *v46;
  char v47;
  _QWORD *v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  __int128 v52;
  void *v53;
  _OWORD *v54;
  char *v55;
  uint64_t v56;
  _OWORD *v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  _QWORD *v71;
  char *v72;
  void **v73;
  __int128 v74;
  std::__shared_weak_count *v75;
  void *v76;
  unint64_t *p_shared_owners;
  unint64_t v78;
  unint64_t v79;
  int v80;
  _DWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  void **v87;
  llvm::orc::ExecutionSession *v89;
  uint64_t v90;
  char v91;
  uint64_t v92;
  uint64_t v93;
  _QWORD v94[3];
  __int128 v95;
  void *v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  unsigned int v102;
  __int128 v103;
  void *v104;
  void *__p;
  void *v106;
  char *v107;
  void *v108;
  char *v109;
  char *v110;
  void *v111;
  _BYTE v112[20];
  _BYTE v113[20];
  uint64_t v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t *v117;
  int v118;
  unsigned int v119;
  void **v120;
  _QWORD v121[3];
  _QWORD *v122;
  __int128 v123;
  char *v124;
  uint64_t v125;
  char v126;
  uint64_t v127;

  v2 = a2;
  v3 = a1;
  v127 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t *)*a2;
  v7 = *v4;
  v5 = (uint64_t)(v4 + 2);
  v6 = v7;
  v8 = *(llvm::orc::ExecutionSession **)(v7 + 32);
  if (*(_QWORD *)(a1 + 40))
    v9 = *(_QWORD *)(a1 + 40);
  else
    v9 = v6;
  llvm::orc::JITDylib::getRequestedSymbols(v6, v5, (uint64_t)&v117);
  v114 = 0;
  v115 = 0;
  v116 = 0;
  v89 = v8;
  v90 = v6;
  if (v118)
  {
    if (v119)
    {
      v10 = 8 * v119;
      v11 = v117;
      while ((*v11 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        ++v11;
        v10 -= 8;
        if (!v10)
          goto LABEL_30;
      }
    }
    else
    {
      v11 = v117;
    }
    v12 = &v117[v119];
    if (v11 != v12)
    {
LABEL_12:
      *(_QWORD *)&v95 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v3 + 56), v11, &v95))v13 = v95;
      else
        v13 = *(_QWORD *)(v3 + 56) + 24 * *(unsigned int *)(v3 + 72);
      v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::FindAndConstruct(&v114, v11);
      v15 = v14[1];
      if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v16 = (unint64_t *)(v15 + 8);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
      }
      v14[1] = 0;
      v14[1] = *(_QWORD *)(v13 + 8);
      *(_QWORD *)(v13 + 8) = 0;
      *((_WORD *)v14 + 8) = *(_WORD *)(v13 + 16);
      v18 = *(_QWORD *)(v13 + 8);
      if ((unint64_t)(v18 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 - 1, v19));
      }
      if ((unint64_t)(*(_QWORD *)v13 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v21 = (unint64_t *)(*(_QWORD *)v13 + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
      }
      *(_QWORD *)v13 = -16;
      v23 = vadd_s32(*(int32x2_t *)(v3 + 64), (int32x2_t)0x1FFFFFFFFLL);
      *(int32x2_t *)(v3 + 64) = v23;
      while (++v11 != v12)
      {
        if ((*v11 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v11 != v12)
            goto LABEL_12;
          break;
        }
      }
      v24 = v23.i32[0];
      if (!v23.i32[0])
        goto LABEL_42;
      goto LABEL_31;
    }
  }
LABEL_30:
  v24 = *(_DWORD *)(v3 + 64);
  if (v24)
  {
LABEL_31:
    v25 = *(_QWORD *)(v3 + 40);
    v26 = (uint64_t *)*v2;
    if (v25)
    {
      *(_QWORD *)v113 = *(_QWORD *)(v3 + 56);
      *(_QWORD *)(v3 + 56) = 0;
      *(_DWORD *)&v113[8] = v24;
      v27 = *(_QWORD *)(v3 + 68);
      *(_QWORD *)(v3 + 64) = 0;
      *(_QWORD *)&v113[12] = v27;
      *(_DWORD *)(v3 + 72) = 0;
      v28 = *(_DWORD *)(v3 + 48);
      v29 = operator new();
      v95 = *(_OWORD *)v113;
      memset(v113, 0, sizeof(v113));
      LODWORD(v96) = *(_DWORD *)&v113[16];
      llvm::orc::ReExportsMaterializationUnit::ReExportsMaterializationUnit(v29, v25, v28, (uint64_t)&v95);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)&v95);
      MEMORY[0x24BD1B398](v95, 8);
      *(_QWORD *)&v95 = v29;
      llvm::orc::ExecutionSession::OL_replace(v26, (uint64_t *)&v95, &v108);
      if ((_QWORD)v95)
        (*(void (**)(_QWORD))(*(_QWORD *)v95 + 8))(v95);
      v30 = v113;
      v6 = v90;
    }
    else
    {
      *(_QWORD *)v112 = *(_QWORD *)(v3 + 56);
      *(_QWORD *)(v3 + 56) = 0;
      *(_DWORD *)&v112[8] = v24;
      v31 = *(_QWORD *)(v3 + 68);
      *(_QWORD *)(v3 + 64) = 0;
      *(_QWORD *)&v112[12] = v31;
      *(_DWORD *)(v3 + 72) = 0;
      v32 = operator new();
      v95 = *(_OWORD *)v112;
      memset(v112, 0, sizeof(v112));
      LODWORD(v96) = *(_DWORD *)&v112[16];
      llvm::orc::ReExportsMaterializationUnit::ReExportsMaterializationUnit(v32, 0, 1, (uint64_t)&v95);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)&v95);
      MEMORY[0x24BD1B398](v95, 8);
      *(_QWORD *)&v95 = v32;
      llvm::orc::ExecutionSession::OL_replace(v26, (uint64_t *)&v95, &v108);
      if ((_QWORD)v95)
        (*(void (**)(_QWORD))(*(_QWORD *)v95 + 8))(v95);
      v30 = v112;
    }
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)v30);
    MEMORY[0x24BD1B398](*(_QWORD *)v30, 8);
    if (v108)
    {
      v111 = v108;
      llvm::orc::ExecutionSession::reportError((uint64_t)v8, (uint64_t *)&v111);
      if (v111)
        (*(void (**)(void *))(*(_QWORD *)v111 + 8))(v111);
      llvm::orc::ExecutionSession::OL_notifyFailed(*(_QWORD *)(*(_QWORD *)*v2 + 32), *v2);
      goto LABEL_129;
    }
  }
LABEL_42:
  v108 = 0;
  v109 = 0;
  v110 = 0;
  v93 = v3;
  v92 = v9;
  do
  {
    if (!(_DWORD)v115)
    {
      v87 = (void **)v108;
      v72 = v109;
      if (v108 == v109)
        goto LABEL_127;
      while (1)
      {
        v95 = 0uLL;
        v96 = 0;
        v74 = *(_OWORD *)(v72 - 40);
        v73 = (void **)(v72 - 40);
        v95 = v74;
        v96 = v73[2];
        *v73 = 0;
        v73[1] = 0;
        v76 = v73[3];
        v75 = (std::__shared_weak_count *)v73[4];
        v73[2] = 0;
        v73[3] = 0;
        v73[4] = 0;
        std::vector<std::pair<llvm::orc::SymbolLookupSet,std::shared_ptr<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo>>>::__base_destruct_at_end[abi:nn180100]((uint64_t)&v108, v73);
        if (v75)
        {
          p_shared_owners = (unint64_t *)&v75->__shared_owners_;
          do
            v78 = __ldxr(p_shared_owners);
          while (__stxr(v78 + 1, p_shared_owners));
          do
            v79 = __ldxr(p_shared_owners);
          while (__stxr(v79 + 1, p_shared_owners));
        }
        v80 = *(_DWORD *)(v3 + 48);
        v81 = operator new(0x10uLL);
        v106 = v81 + 4;
        v107 = (char *)(v81 + 4);
        *(_QWORD *)v81 = v9;
        v81[2] = v80;
        __p = v81;
        memset(v94, 0, sizeof(v94));
        std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*>((char *)v94, (uint64_t *)v95, *((uint64_t **)&v95 + 1), (uint64_t)(*((_QWORD *)&v95 + 1) - v95) >> 4);
        *(_QWORD *)&v123 = v76;
        *((_QWORD *)&v123 + 1) = v75;
        v124 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallbacksHolder<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_1,llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_1,void>::Callbacks
             + 6;
        v82 = operator new(0x20uLL);
        *v82 = &off_251C14910;
        v82[1] = v76;
        v82[2] = v75;
        v82[3] = v9;
        v122 = v82;
        llvm::orc::ExecutionSession::lookup(v8, 0, (__int128 **)&__p, (uint64_t)v94, 3, &v123, v121);
        v83 = v122;
        if (v122 == v121)
          break;
        if (v122)
        {
          v84 = 5;
LABEL_118:
          (*(void (**)(void))(*v83 + 8 * v84))();
        }
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v123);
        *(_QWORD *)&v103 = v94;
        std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v103);
        if (__p)
        {
          v106 = __p;
          operator delete(__p);
        }
        if (v75)
        {
          v85 = (unint64_t *)&v75->__shared_owners_;
          do
            v86 = __ldaxr(v85);
          while (__stlxr(v86 - 1, v85));
          if (!v86)
          {
            ((void (*)(std::__shared_weak_count *))v75->__on_zero_shared)(v75);
            std::__shared_weak_count::__release_weak(v75);
          }
        }
        __p = &v95;
        std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
        v87 = (void **)v108;
        v72 = v109;
        if (v108 == v109)
          goto LABEL_127;
      }
      v83 = v121;
      v84 = 4;
      goto LABEL_118;
    }
    __p = 0;
    v106 = 0;
    LODWORD(v107) = 0;
    v103 = 0uLL;
    v104 = 0;
    v100 = 0;
    v101 = 0;
    v102 = 0;
    if (v116)
    {
      v33 = 24 * v116;
      v34 = v114;
      while ((*(_QWORD *)v34 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v34 += 24;
        v33 -= 24;
        if (!v33)
          goto LABEL_72;
      }
    }
    else
    {
      v34 = v114;
    }
    v35 = v114 + 24 * v116;
    if (v34 != v35)
    {
LABEL_51:
      if (v9 != v6
        || (*(_QWORD *)&v95 = 0,
            (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)&v100, (_QWORD *)(v34 + 8), &v95) & 1) == 0)&& (*(_QWORD *)&v95 = 0, (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(&v114, (_QWORD *)(v34 + 8), &v95) & 1) == 0))
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&__p, (uint64_t *)v34, (uint64_t)&v95);
        v36 = *(_QWORD *)(v34 + 8);
        v99 = v36;
        if ((unint64_t)(v36 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v37 = (unint64_t *)(v36 + 8);
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 + 1, v37));
        }
        llvm::orc::SymbolLookupSet::add((uint64_t *)&v103, &v99, (*(unsigned __int8 *)(v34 + 17) >> 6) & 1);
        if ((unint64_t)(v99 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v39 = (unint64_t *)(v99 + 8);
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
        }
        v41 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::FindAndConstruct((uint64_t *)&v100, (uint64_t *)v34);
        v42 = v41[1];
        if ((unint64_t)(v42 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v43 = (unint64_t *)(v42 + 8);
          do
            v44 = __ldaxr(v43);
          while (__stlxr(v44 - 1, v43));
        }
        v41[1] = 0;
        v41[1] = *(_QWORD *)(v34 + 8);
        *(_QWORD *)(v34 + 8) = 0;
        *((_WORD *)v41 + 8) = *(_WORD *)(v34 + 16);
      }
      while (1)
      {
        v34 += 24;
        if (v34 == v35)
          break;
        if ((*(_QWORD *)v34 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v34 != v35)
            goto LABEL_51;
          break;
        }
      }
      if ((_DWORD)v101)
      {
        if (v102)
        {
          v45 = 24 * v102;
          v46 = v100;
          while ((*v46 | 8) == 0xFFFFFFFFFFFFFFF8)
          {
            v46 += 3;
            v45 -= 24;
            if (!v45)
              goto LABEL_72;
          }
        }
        else
        {
          v46 = v100;
        }
        v71 = &v100[3 * v102];
LABEL_104:
        if (v46 != v71)
        {
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::erase((uint64_t)&v114, v46);
          while (1)
          {
            v46 += 3;
            if (v46 == v71)
              break;
            if ((*v46 | 8) != 0xFFFFFFFFFFFFFFF8)
              goto LABEL_104;
          }
        }
      }
    }
LABEL_72:
    llvm::orc::ExecutionSession::OL_delegate((uint64_t *)*v2, (uint64_t)&__p, (uint64_t)&v125);
    v47 = v126;
    if ((v126 & 1) != 0)
    {
      v56 = v125;
      v125 = 0;
      v98 = v56;
      llvm::orc::ExecutionSession::reportError((uint64_t)v8, &v98);
      if (v98)
        (*(void (**)(uint64_t))(*(_QWORD *)v98 + 8))(v98);
      llvm::orc::ExecutionSession::OL_notifyFailed(*(_QWORD *)(*(_QWORD *)*v2 + 32), *v2);
    }
    else
    {
      v48 = operator new(0x50uLL);
      v48[1] = 0;
      v48[2] = 0;
      *v48 = &off_251C148D8;
      v48[3] = v125;
      v125 = 0;
      v49 = (uint64_t)v100;
      v100 = 0;
      v50 = v102;
      v102 = 0;
      v48[4] = v49;
      *(_QWORD *)&v95 = 0;
      v51 = v101;
      v101 = 0;
      v48[5] = v51;
      *((_QWORD *)&v95 + 1) = 0;
      *((_DWORD *)v48 + 12) = v50;
      LODWORD(v96) = 0;
      v48[8] = 0;
      v48[9] = 0;
      v48[7] = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)&v95);
      MEMORY[0x24BD1B398](v95, 8);
      v52 = v103;
      v95 = v103;
      v53 = v104;
      v104 = 0;
      v103 = 0uLL;
      v96 = v53;
      *(_QWORD *)&v97 = v48 + 3;
      *((_QWORD *)&v97 + 1) = v48;
      v54 = v109;
      if (v109 >= v110)
      {
        v91 = v47;
        v57 = v108;
        v58 = 0xCCCCCCCCCCCCCCCDLL * ((v109 - (_BYTE *)v108) >> 3);
        v59 = v58 + 1;
        if (v58 + 1 > 0x666666666666666)
          abort();
        if (0x999999999999999ALL * ((v110 - (_BYTE *)v108) >> 3) > v59)
          v59 = 0x999999999999999ALL * ((v110 - (_BYTE *)v108) >> 3);
        if (0xCCCCCCCCCCCCCCCDLL * ((v110 - (_BYTE *)v108) >> 3) >= 0x333333333333333)
          v60 = 0x666666666666666;
        else
          v60 = v59;
        if (v60 > 0x666666666666666)
          std::__throw_bad_array_new_length[abi:nn180100]();
        v61 = v2;
        v62 = 5 * v60;
        v63 = (char *)operator new(40 * v60);
        v64 = &v63[40 * v58];
        *(_OWORD *)v64 = v52;
        v96 = 0;
        v95 = 0uLL;
        *((_QWORD *)v64 + 2) = v53;
        *((_QWORD *)v64 + 3) = v48 + 3;
        *((_QWORD *)v64 + 4) = v48;
        v97 = 0uLL;
        v55 = v64 + 40;
        if (v54 == v57)
        {
          v108 = &v63[40 * v58];
          v110 = &v63[8 * v62];
          v8 = v89;
          v9 = v92;
          v3 = v93;
          v2 = v61;
        }
        else
        {
          v65 = 0;
          v8 = v89;
          v9 = v92;
          v3 = v93;
          do
          {
            v66 = &v64[v65];
            v67 = (char *)v54 + v65;
            *(_OWORD *)(v66 - 40) = *(_OWORD *)((char *)v54 + v65 - 40);
            *((_QWORD *)v66 - 3) = *(_QWORD *)((char *)v54 + v65 - 24);
            *((_QWORD *)v67 - 5) = 0;
            *((_QWORD *)v67 - 4) = 0;
            *((_QWORD *)v67 - 3) = 0;
            *((_OWORD *)v66 - 1) = *(_OWORD *)((char *)v54 + v65 - 16);
            *((_QWORD *)v67 - 2) = 0;
            *((_QWORD *)v67 - 1) = 0;
            v65 -= 40;
          }
          while ((_OWORD *)((char *)v54 + v65) != v57);
          v108 = &v64[v65];
          v109 = v64 + 40;
          v110 = &v63[8 * v62];
          v2 = v61;
          do
          {
            std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(v54 - 1));
            v120 = (void **)v54 - 5;
            std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v120);
            v54 = (_OWORD *)((char *)v54 - 40);
          }
          while (v54 != v57);
          v54 = v57;
        }
        v47 = v91;
        v6 = v90;
        if (v54)
          operator delete(v54);
      }
      else
      {
        *(_QWORD *)v109 = 0;
        *((_QWORD *)v54 + 1) = 0;
        *((_QWORD *)v54 + 2) = 0;
        *v54 = v95;
        *((_QWORD *)v54 + 2) = v96;
        v95 = 0uLL;
        v96 = 0;
        *(_OWORD *)((char *)v54 + 24) = v97;
        v3 = v93;
        v97 = 0uLL;
        v55 = (char *)v54 + 40;
        v9 = v92;
      }
      v109 = v55;
      v68 = (std::__shared_weak_count *)*((_QWORD *)&v97 + 1);
      if (*((_QWORD *)&v97 + 1))
      {
        v69 = (unint64_t *)(*((_QWORD *)&v97 + 1) + 8);
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (!v70)
        {
          ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
          std::__shared_weak_count::__release_weak(v68);
        }
      }
      v120 = (void **)&v95;
      std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v120);
    }
    llvm::Expected<std::unique_ptr<llvm::orc::MaterializationResponsibility>>::~Expected((uint64_t)&v125);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)&v100);
    MEMORY[0x24BD1B398](v100, 8);
    *(_QWORD *)&v95 = &v103;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v95);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&__p);
  }
  while ((v47 & 1) == 0);
  v87 = (void **)v108;
LABEL_127:
  if (v87)
  {
    std::vector<std::pair<llvm::orc::SymbolLookupSet,std::shared_ptr<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo>>>::__base_destruct_at_end[abi:nn180100]((uint64_t)&v108, v87);
    operator delete(v108);
  }
LABEL_129:
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)&v114);
  MEMORY[0x24BD1B398](v114, 8);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v117);
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::erase(uint64_t a1, _QWORD *a2)
{
  int32x2_t result;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  _QWORD *v10;

  v10 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v10))
  {
    v4 = v10;
    v5 = v10[1];
    if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
    }
    if ((unint64_t)(*v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v8 = (unint64_t *)(*v4 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
    }
    *v4 = -16;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::orc::ExecutionSession::lookup(llvm::orc::ExecutionSession *a1, int a2, __int128 **a3, uint64_t a4, char a5, __int128 *a6, _QWORD *a7)
{
  _QWORD *v12;
  llvm::orc::InProgressLookupState *v13;
  llvm::orc::InProgressLookupState *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  llvm::orc::InProgressLookupState *v18;
  llvm::orc::InProgressLookupState *v19;
  llvm::orc::InProgressLookupState *v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  int v25;

  v25 = a2;
  v24 = a5;
  llvm::orc::ExecutionSession::dispatchOutstandingMUs(a1);
  v22 = *(_OWORD *)a4;
  v23 = *(_QWORD *)(a4 + 16);
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_QWORD *)a4 = 0;
  v12 = operator new(0x78uLL);
  v12[1] = 0;
  v12[2] = 0;
  *v12 = &off_251C14A30;
  std::allocator<llvm::orc::AsynchronousSymbolQuery>::construct[abi:nn180100]<llvm::orc::AsynchronousSymbolQuery,llvm::orc::SymbolLookupSet &,llvm::orc::SymbolState &,llvm::unique_function<void ()(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)>>((uint64_t)&v21, (uint64_t)(v12 + 3), (uint64_t **)&v22, &v24, a6);
  *(_QWORD *)&v21 = v12 + 3;
  *((_QWORD *)&v21 + 1) = v12;
  std::make_unique[abi:nn180100]<llvm::orc::InProgressFullLookupState,llvm::orc::LookupKind &,std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>> const&,llvm::orc::SymbolLookupSet,llvm::orc::SymbolState &,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::function<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>>(&v25, a3, &v22, &v24, &v21, a7, (uint64_t *)&v20);
  v19 = v20;
  v20 = 0;
  v18 = 0;
  llvm::orc::ExecutionSession::OL_applyQueryPhase1(a1, &v19, &v18);
  if (v18)
    (*(void (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v18 + 8))(v18);
  v13 = v19;
  v19 = 0;
  if (v13)
    (*(void (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v13 + 8))(v13);
  v14 = v20;
  v20 = 0;
  if (v14)
    (*(void (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v14 + 8))(v14);
  v15 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
  if (*((_QWORD *)&v21 + 1))
  {
    v16 = (unint64_t *)(*((_QWORD *)&v21 + 1) + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  *(_QWORD *)&v21 = &v22;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v21);
}

int32x2_t llvm::orc::ReExportsMaterializationUnit::discard(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::erase(a1 + 56, a3);
}

llvm::orc::InProgressLookupState *llvm::orc::LookupState::continueLookup(llvm::orc::InProgressLookupState **a1, llvm::orc::InProgressLookupState **a2)
{
  llvm::orc::InProgressLookupState *v2;
  llvm::orc::ExecutionSession *v3;
  llvm::orc::InProgressLookupState *result;
  llvm::orc::InProgressLookupState *v5;
  llvm::orc::InProgressLookupState *v6;

  v2 = *a1;
  v3 = *(llvm::orc::ExecutionSession **)(**((_QWORD **)*a1 + 2) + 32);
  *a1 = 0;
  v5 = *a2;
  v6 = v2;
  *a2 = 0;
  llvm::orc::ExecutionSession::OL_applyQueryPhase1(v3, &v6, &v5);
  if (v5)
    (*(void (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v5 + 8))(v5);
  result = v6;
  if (v6)
    return (llvm::orc::InProgressLookupState *)(*(uint64_t (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void llvm::orc::ExecutionSession::OL_applyQueryPhase1(llvm::orc::ExecutionSession *this, llvm::orc::InProgressLookupState **a2, llvm::orc::InProgressLookupState **a3)
{
  llvm::orc::ExecutionSession *v5;
  llvm::orc::InProgressLookupState *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  llvm::orc::InProgressLookupState *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  __int128 v22;
  uint64_t v23;
  llvm::orc::InProgressLookupState *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  void **v35;
  void **v36;
  uint64_t v37;
  llvm::orc::InProgressLookupState *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  char *v48;
  __int128 v49;
  int64x2_t v50;
  void **v51;
  __int128 v52;
  __int128 v53;
  llvm::orc::InProgressLookupState *v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  char *v68;
  _QWORD *v69;
  _QWORD *v70;
  char *v71;
  __int128 v72;
  int64x2_t v73;
  void **v74;
  uint64_t *v75;
  llvm::orc::InProgressLookupState *v76;
  uint64_t v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  std::__shared_weak_count *v80;
  uint64_t v81;
  uint64_t v82;
  llvm::orc::InProgressLookupState *v83;
  llvm::orc::InProgressLookupState *v84;
  void **v85;
  llvm::orc::InProgressLookupState *v86;
  llvm::orc::InProgressLookupState *v87;
  uint64_t v88;
  char v89;
  unint64_t *p_shared_owners;
  unint64_t v91;
  std::mutex *v92;
  llvm::orc::InProgressLookupState *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  llvm::orc::ExecutionSession *v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  int64_t v112;
  char *v113;
  uint64_t *v114;
  llvm::orc::InProgressLookupState *v115;
  uint64_t v116;
  char *v117;
  char *v118;
  void *v119;
  void *v120;
  unint64_t v121;
  char *v122;
  uint64_t v123;
  char *v124;
  char *v125;
  void *v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  BOOL v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t v133;
  char *v134;
  uint64_t v135;
  char *v136;
  uint64_t *v137;
  uint64_t v138;
  uint64_t v139;
  char *v140;
  uint64_t v141;
  void *v142;
  void *v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  uint64_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  unint64_t v154;
  unint64_t v155;
  uint64_t v156;
  char *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  void *v165;
  unint64_t v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t *v170;
  char *v171;
  uint64_t v172;
  uint64_t v173;
  char *v174;
  uint64_t v175;
  void *v176;
  char *v177;
  char *v178;
  uint64_t v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  char *v185;
  int64_t v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  char *v190;
  uint64_t v191;
  char *v192;
  uint64_t *v193;
  uint64_t v194;
  uint64_t v195;
  char *v196;
  uint64_t v197;
  void *v198;
  llvm::orc::InProgressLookupState *v199;
  llvm::orc::InProgressLookupState *v200;
  uint64_t v201;
  llvm::orc::ExecutionSession *v202;
  llvm::orc::InProgressLookupState *v203;
  llvm::orc::InProgressLookupState *v204;
  unsigned int v205;
  uint64_t v206;
  __int128 v207;
  llvm::orc::InProgressLookupState **v208;
  uint64_t v209;
  llvm::orc::InProgressLookupState *v210;
  llvm::orc::InProgressLookupState *v211;
  llvm::orc::InProgressLookupState *v212;
  uint64_t v213;
  llvm::orc::InProgressLookupState *v214;
  uint64_t v215;
  __int128 v216;
  __int128 v217[2];
  llvm::orc::InProgressLookupState *v218;
  void ***v219;
  void **v220;
  int64x2_t v221;
  void **v222;
  uint64_t v223;

  v5 = this;
  v6 = *a2;
  if (*((_DWORD *)*a2 + 34) == 2)
  {
    llvm::orc::ExecutionSession::OL_resumeLookupAfterGeneration(this, *a2);
    v6 = *a2;
  }
  v7 = *((_QWORD *)v6 + 9);
  v8 = *((_QWORD *)v6 + 2);
  if (v7 == (*((_QWORD *)v6 + 3) - v8) >> 4)
  {
    v9 = *((_QWORD *)v6 + 11);
    goto LABEL_5;
  }
LABEL_23:
  if (*a3)
  {
    v218 = *a3;
    *a3 = 0;
    (*(void (**)(llvm::orc::InProgressLookupState *, llvm::orc::InProgressLookupState **))(*(_QWORD *)v6 + 24))(v6, &v218);
    v199 = v218;
    if (!v218)
      return;
    goto LABEL_206;
  }
  v20 = v8 + 16 * v7;
  v206 = *(_QWORD *)v20;
  v205 = *(_DWORD *)(v20 + 8);
  if (*((_BYTE *)v6 + 80))
  {
    memset(v217, 0, 24);
    v22 = *((_OWORD *)v6 + 7);
    v21 = (char *)v6 + 112;
    v23 = *((_QWORD *)v21 + 2);
    *(_QWORD *)v21 = 0;
    *((_QWORD *)v21 + 1) = 0;
    *((_QWORD *)v21 + 2) = 0;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vdeallocate((void **)v21);
    *(_OWORD *)v21 = v217[0];
    *((_QWORD *)v21 + 2) = *(_QWORD *)&v217[1];
    memset(v217, 0, 24);
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vdeallocate((void **)v217);
    v217[0] = v22;
    *(_QWORD *)&v217[1] = v23;
    v221 = 0uLL;
    v219 = &v220;
    v220 = 0;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v219);
    v24 = *a2;
    v26 = (uint64_t *)((char *)*a2 + 88);
    v25 = *v26;
    v215 = *(_QWORD *)&v217[0];
    v216 = *(__int128 *)((char *)v217 + 8);
    memset(v217, 0, 24);
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::reserve(v26, ((*((_QWORD *)v24 + 12) - v25) >> 4) + (((uint64_t)v216 - v215) >> 4));
    v27 = v215;
    v28 = v216;
    if (v215 != (_QWORD)v216)
    {
      v29 = (unint64_t *)((char *)v24 + 104);
      v30 = *((_QWORD *)v24 + 12);
      do
      {
        if (v30 >= *v29)
        {
          v31 = (uint64_t)(v30 - *v26) >> 4;
          if ((unint64_t)(v31 + 1) >> 60)
            goto LABEL_213;
          v32 = *v29 - *v26;
          v33 = v32 >> 3;
          if (v32 >> 3 <= (unint64_t)(v31 + 1))
            v33 = v31 + 1;
          if ((unint64_t)v32 >= 0x7FFFFFFFFFFFFFF0)
            v34 = 0xFFFFFFFFFFFFFFFLL;
          else
            v34 = v33;
          v223 = (uint64_t)v24 + 104;
          v35 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)v24 + 104, v34);
          v36 = &v35[2 * v31];
          v220 = v35;
          v221.i64[0] = (uint64_t)v36;
          v222 = &v35[2 * v37];
          *v36 = 0;
          *v36 = *(void **)v27;
          *(_QWORD *)v27 = 0;
          *((_DWORD *)v36 + 2) = *(_DWORD *)(v27 + 8);
          v221.i64[1] = (uint64_t)(v36 + 2);
          std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__swap_out_circular_buffer(v26, &v220);
          v30 = *((_QWORD *)v24 + 12);
          std::__split_buffer<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::~__split_buffer((uint64_t)&v220);
        }
        else
        {
          *(_QWORD *)v30 = 0;
          *(_QWORD *)v30 = *(_QWORD *)v27;
          *(_QWORD *)v27 = 0;
          *(_DWORD *)(v30 + 8) = *(_DWORD *)(v27 + 8);
          v30 += 16;
        }
        *((_QWORD *)v24 + 12) = v30;
        v27 += 16;
      }
      while (v27 != v28);
    }
    v220 = (void **)&v215;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v220);
    std::recursive_mutex::lock((std::recursive_mutex *)v5);
    v38 = *a2;
    v40 = *(_QWORD *)(v206 + 184);
    v39 = *(_QWORD *)(v206 + 192);
    v41 = (v39 - v40) >> 4;
    v42 = *((_QWORD *)*a2 + 18);
    if (v41 <= (*((_QWORD *)*a2 + 20) - v42) >> 4)
      goto LABEL_63;
    if (v39 - v40 < 0)
LABEL_213:
      abort();
    v43 = *((_QWORD *)v38 + 19) - v42;
    v223 = (uint64_t)*a2 + 160;
    v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v41);
    v47 = (_QWORD *)*((_QWORD *)v38 + 18);
    v46 = (_QWORD *)*((_QWORD *)v38 + 19);
    if (v46 == v47)
    {
      v50 = vdupq_n_s64((unint64_t)v46);
      v48 = &v44[v43];
    }
    else
    {
      v48 = &v44[v43];
      do
      {
        v49 = *((_OWORD *)v46 - 1);
        v46 -= 2;
        *((_OWORD *)v48 - 1) = v49;
        v48 -= 16;
        *v46 = 0;
        v46[1] = 0;
      }
      while (v46 != v47);
      v50 = *((int64x2_t *)v38 + 9);
    }
    *((_QWORD *)v38 + 18) = v48;
    *((_QWORD *)v38 + 19) = &v44[v43];
    v221 = v50;
    v51 = (void **)*((_QWORD *)v38 + 20);
    *((_QWORD *)v38 + 20) = &v44[16 * v45];
    v222 = v51;
    v220 = (void **)v50.i64[0];
    std::__split_buffer<std::weak_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v220);
    v40 = *(_QWORD *)(v206 + 184);
    v39 = *(_QWORD *)(v206 + 192);
LABEL_63:
    while (v39 != v40)
    {
      v52 = *(_OWORD *)(v39 - 16);
      v39 -= 16;
      v53 = v52;
      v54 = *a2;
      v55 = *((_QWORD *)&v52 + 1);
      if (*((_QWORD *)&v52 + 1))
      {
        v56 = (unint64_t *)(v55 + 16);
        do
          v57 = __ldxr(v56);
        while (__stxr(v57 + 1, v56));
      }
      v58 = *((_QWORD *)v54 + 20);
      v59 = (_QWORD *)*((_QWORD *)v54 + 19);
      if ((unint64_t)v59 >= v58)
      {
        v207 = v53;
        v61 = *((_QWORD *)v54 + 18);
        v62 = ((uint64_t)v59 - v61) >> 4;
        if ((unint64_t)(v62 + 1) >> 60)
          goto LABEL_213;
        v63 = v58 - v61;
        v64 = v63 >> 3;
        if (v63 >> 3 <= (unint64_t)(v62 + 1))
          v64 = v62 + 1;
        if ((unint64_t)v63 >= 0x7FFFFFFFFFFFFFF0)
          v65 = 0xFFFFFFFFFFFFFFFLL;
        else
          v65 = v64;
        v223 = (uint64_t)v54 + 160;
        v66 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v65);
        v68 = &v66[16 * v62];
        *(_OWORD *)v68 = v207;
        v70 = (_QWORD *)*((_QWORD *)v54 + 18);
        v69 = (_QWORD *)*((_QWORD *)v54 + 19);
        if (v69 == v70)
        {
          v73 = vdupq_n_s64((unint64_t)v69);
          v71 = &v66[16 * v62];
        }
        else
        {
          v71 = &v66[16 * v62];
          do
          {
            v72 = *((_OWORD *)v69 - 1);
            v69 -= 2;
            *((_OWORD *)v71 - 1) = v72;
            v71 -= 16;
            *v69 = 0;
            v69[1] = 0;
          }
          while (v69 != v70);
          v73 = *((int64x2_t *)v54 + 9);
        }
        v60 = v68 + 16;
        *((_QWORD *)v54 + 18) = v71;
        *((_QWORD *)v54 + 19) = v68 + 16;
        v221 = v73;
        v74 = (void **)*((_QWORD *)v54 + 20);
        *((_QWORD *)v54 + 20) = &v66[16 * v67];
        v222 = v74;
        v220 = (void **)v73.i64[0];
        std::__split_buffer<std::weak_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v220);
      }
      else
      {
        *v59 = v53;
        v59[1] = v55;
        v60 = v59 + 2;
      }
      *((_QWORD *)v54 + 19) = v60;
    }
    std::recursive_mutex::unlock((std::recursive_mutex *)v5);
    *((_BYTE *)*a2 + 80) = 0;
    v220 = (void **)v217;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v220);
  }
  std::recursive_mutex::lock((std::recursive_mutex *)v5);
  if (*(_QWORD *)(v206 + 184) == *(_QWORD *)(v206 + 192))
    v75 = 0;
  else
    v75 = (uint64_t *)((char *)*a2 + 112);
  llvm::orc::ExecutionSession::IL_updateCandidatesFor((uint64_t *)&v220, (uint64_t)v5, v206, v205, (uint64_t *)*a2 + 11, v75);
  *a3 = (llvm::orc::InProgressLookupState *)v220;
  v76 = *a2;
  if (*((_DWORD *)*a2 + 34) == 1 && *((_QWORD *)v76 + 11) == *((_QWORD *)v76 + 12))
    llvm::orc::ExecutionSession::OL_resumeLookupAfterGeneration(v5, v76);
  std::recursive_mutex::unlock((std::recursive_mutex *)v5);
  if (*a3)
  {
    v200 = *a2;
    v214 = *a3;
    *a3 = 0;
    (*(void (**)(llvm::orc::InProgressLookupState *, llvm::orc::InProgressLookupState **))(*(_QWORD *)v200 + 24))(v200, &v214);
    v199 = v214;
    if (!v214)
      return;
    goto LABEL_206;
  }
  do
  {
    v6 = *a2;
    v77 = *((_QWORD *)*a2 + 19);
    v9 = *((_QWORD *)*a2 + 11);
    v78 = *((_QWORD *)*a2 + 12);
    if (*((_QWORD *)*a2 + 18) == v77)
    {
      if (v9 == v78)
      {
LABEL_202:
        if (*((_QWORD *)v6 + 14) == *((_QWORD *)v6 + 15))
        {
          *((_QWORD *)v6 + 9) = (uint64_t)(*((_QWORD *)v6 + 3) - *((_QWORD *)v6 + 2)) >> 4;
LABEL_5:
          v10 = *((_QWORD *)v6 + 12);
          if (v10 != v9)
          {
            v11 = 0;
            do
            {
              if (*(_DWORD *)(v9 + 16 * v11 + 8) == 1)
              {
                llvm::orc::SymbolLookupSet::remove((_QWORD *)v6 + 11, v11);
                v9 = *((_QWORD *)v6 + 11);
                v10 = *((_QWORD *)v6 + 12);
              }
              else
              {
                ++v11;
              }
            }
            while (v11 != (v10 - v9) >> 4);
            v6 = *a2;
            if (*((_QWORD *)*a2 + 11) != *((_QWORD *)*a2 + 12))
            {
              v12 = *((_QWORD *)v5 + 9);
              v13 = *(_QWORD *)(v12 + 16);
              *(_QWORD *)&v217[0] = *(_QWORD *)(v12 + 8);
              *((_QWORD *)&v217[0] + 1) = v13;
              v14 = v6;
              if (v13)
              {
                v15 = (unint64_t *)(v13 + 8);
                do
                  v16 = __ldxr(v15);
                while (__stxr(v16 + 1, v15));
                v14 = *a2;
              }
              llvm::orc::SymbolLookupSet::getSymbolNames((llvm::orc::SymbolLookupSet *)&v220, (uint64_t **)v14 + 11);
              llvm::make_error<llvm::orc::SymbolsNotFound,std::shared_ptr<llvm::orc::SymbolStringPool>,std::vector<llvm::orc::SymbolStringPtr>>(&v209, v217, (__int128 *)&v220);
              (*(void (**)(llvm::orc::InProgressLookupState *, uint64_t *))(*(_QWORD *)v6 + 24))(v6, &v209);
              if (v209)
                (*(void (**)(uint64_t))(*(_QWORD *)v209 + 8))(v209);
              v219 = &v220;
              std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&v219);
              v17 = (std::__shared_weak_count *)*((_QWORD *)&v217[0] + 1);
              if (*((_QWORD *)&v217[0] + 1))
              {
                v18 = (unint64_t *)(*((_QWORD *)&v217[0] + 1) + 8);
                do
                  v19 = __ldaxr(v18);
                while (__stlxr(v19 - 1, v18));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }
              }
              return;
            }
          }
          *a2 = 0;
          v210 = v6;
          (*(void (**)(llvm::orc::InProgressLookupState *, llvm::orc::InProgressLookupState **))(*(_QWORD *)v6 + 16))(v6, &v210);
          v199 = v210;
          v210 = 0;
          if (!v199)
            return;
LABEL_206:
          (*(void (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v199 + 8))(v199);
          return;
        }
      }
      v7 = *((_QWORD *)v6 + 9) + 1;
      *((_QWORD *)v6 + 9) = v7;
      *((_BYTE *)v6 + 80) = 1;
      v8 = *((_QWORD *)v6 + 2);
      if (v7 == (*((_QWORD *)v6 + 3) - v8) >> 4)
        goto LABEL_5;
      goto LABEL_23;
    }
    if (v9 == v78)
      goto LABEL_202;
    v79 = *(std::__shared_weak_count **)(v77 - 8);
    if (!v79)
    {
      v80 = 0;
      goto LABEL_88;
    }
    v80 = std::__shared_weak_count::lock(v79);
    if (!v80)
    {
      v6 = *a2;
LABEL_88:
      getErrorErrorCat();
      v88 = operator new();
      v220 = (void **)"DefinitionGenerator removed while lookup in progress";
      LOWORD(v223) = 259;
      *(_QWORD *)v88 = off_251C127D0;
      llvm::Twine::str((llvm::formatv_object_base **)&v220, (std::string *)(v88 + 8));
      *(_QWORD *)(v88 + 32) = 3;
      *(_QWORD *)(v88 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v88 + 48) = 1;
      v213 = v88;
      (*(void (**)(llvm::orc::InProgressLookupState *, uint64_t *))(*(_QWORD *)v6 + 24))(v6, &v213);
      if (v213)
        (*(void (**)(uint64_t))(*(_QWORD *)v213 + 8))(v213);
      if (!v80)
        return;
      goto LABEL_91;
    }
    v81 = *(_QWORD *)(v77 - 16);
    v6 = *a2;
    if (!v81)
      goto LABEL_88;
    if (*((_DWORD *)v6 + 34))
      goto LABEL_78;
    v92 = (std::mutex *)(v81 + 8);
    std::mutex::lock((std::mutex *)(v81 + 8));
    if (!*(_BYTE *)(v81 + 72))
    {
      *(_BYTE *)(v81 + 72) = 1;
      std::mutex::unlock((std::mutex *)(v81 + 8));
      v6 = *a2;
LABEL_78:
      *((_DWORD *)v6 + 34) = 2;
      v82 = *((unsigned int *)v6 + 2);
      *a2 = 0;
      v220 = (void **)v6;
      (*(void (**)(__int128 *__return_ptr, uint64_t, void ***, uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v81 + 16))(v217, v81, &v220, v82, v206, v205, (uint64_t)v6 + 88);
      *a3 = *(llvm::orc::InProgressLookupState **)&v217[0];
      v83 = (llvm::orc::InProgressLookupState *)v220;
      v220 = 0;
      v84 = *a2;
      *a2 = v83;
      if (v84)
      {
        (*(void (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v84 + 8))(v84);
        v85 = v220;
        v220 = 0;
        if (v85)
          (*((void (**)(void **))*v85 + 1))(v85);
        v83 = *a2;
      }
      if (v83)
      {
        llvm::orc::ExecutionSession::OL_resumeLookupAfterGeneration(v5, v83);
        v86 = *a2;
        if (*a3)
        {
          v212 = *a3;
          *a3 = 0;
          (*(void (**)(llvm::orc::InProgressLookupState *, llvm::orc::InProgressLookupState **))(*(_QWORD *)v86 + 24))(v86, &v212);
          v87 = v212;
          if (v212)
            goto LABEL_85;
        }
        else if (v86)
        {
          std::recursive_mutex::lock((std::recursive_mutex *)v5);
          if (*(_QWORD *)(v206 + 184) == *(_QWORD *)(v206 + 192))
            v114 = 0;
          else
            v114 = (uint64_t *)((char *)*a2 + 112);
          llvm::orc::ExecutionSession::IL_updateCandidatesFor((uint64_t *)&v220, (uint64_t)v5, v206, v205, (uint64_t *)*a2 + 11, v114);
          *a3 = (llvm::orc::InProgressLookupState *)v220;
          std::recursive_mutex::unlock((std::recursive_mutex *)v5);
          if (!*a3)
          {
            v89 = 1;
            goto LABEL_92;
          }
          v115 = *a2;
          v211 = *a3;
          *a3 = 0;
          (*(void (**)(llvm::orc::InProgressLookupState *, llvm::orc::InProgressLookupState **))(*(_QWORD *)v115 + 24))(v115, &v211);
          v87 = v211;
          if (v211)
LABEL_85:
            (*(void (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v87 + 8))(v87);
        }
      }
LABEL_91:
      v89 = 0;
      goto LABEL_92;
    }
    v208 = a3;
    v93 = *a2;
    *a2 = 0;
    v94 = *(char **)(v81 + 96);
    v95 = *(char **)(v81 + 88);
    v96 = v94 - v95;
    if (v94 == v95)
      v97 = 0;
    else
      v97 = ((v94 - v95) << 6) - 1;
    v99 = *(_QWORD *)(v81 + 112);
    v98 = *(_QWORD *)(v81 + 120);
    v100 = v98 + v99;
    if (v97 != v98 + v99)
      goto LABEL_200;
    if (v99 >= 0x200)
    {
      *(_QWORD *)(v81 + 112) = v99 - 512;
      v103 = *(_QWORD *)v95;
      v102 = v95 + 8;
      v101 = v103;
      *(_QWORD *)(v81 + 88) = v102;
      if (v94 == *(char **)(v81 + 104))
      {
        v203 = v93;
        v104 = *(_QWORD *)(v81 + 80);
        v105 = (uint64_t)&v102[-v104];
        if ((unint64_t)v102 <= v104)
        {
          v131 = (uint64_t)&v94[-v104];
          v130 = v131 == 0;
          v132 = v131 >> 2;
          if (v130)
            v133 = 1;
          else
            v133 = v132;
          v134 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v133);
          v136 = &v134[8 * (v133 >> 2)];
          v137 = *(uint64_t **)(v81 + 88);
          v94 = v136;
          v138 = *(_QWORD *)(v81 + 96) - (_QWORD)v137;
          v93 = v203;
          if (v138)
          {
            v94 = &v136[v138 & 0xFFFFFFFFFFFFFFF8];
            v139 = 8 * (v138 >> 3);
            v140 = v136;
            do
            {
              v141 = *v137++;
              *(_QWORD *)v140 = v141;
              v140 += 8;
              v139 -= 8;
            }
            while (v139);
          }
          v142 = *(void **)(v81 + 80);
          *(_QWORD *)(v81 + 80) = v134;
          *(_QWORD *)(v81 + 88) = v136;
          *(_QWORD *)(v81 + 96) = v94;
          *(_QWORD *)(v81 + 104) = &v134[8 * v135];
          if (v142)
          {
            operator delete(v142);
            v94 = *(char **)(v81 + 96);
          }
        }
        else
        {
          v106 = v5;
          v107 = v105 >> 3;
          v108 = v105 >> 3 < -1;
          v109 = (v105 >> 3) + 2;
          if (v108)
            v110 = v109;
          else
            v110 = v107 + 1;
          v111 = &v102[-8 * (v110 >> 1)];
          v112 = v94 - v102;
          if (v94 != v102)
          {
            memmove(&v102[-8 * (v110 >> 1)], v102, v94 - v102);
            v94 = *(char **)(v81 + 88);
          }
          v113 = &v94[-8 * (v110 >> 1)];
          v94 = &v111[v112];
          *(_QWORD *)(v81 + 88) = v113;
          *(_QWORD *)(v81 + 96) = &v111[v112];
          v5 = v106;
          v92 = (std::mutex *)(v81 + 8);
          v93 = v203;
        }
      }
      *(_QWORD *)v94 = v101;
      *(_QWORD *)(v81 + 96) += 8;
      goto LABEL_199;
    }
    v204 = v93;
    v202 = v5;
    v116 = v96 >> 3;
    v117 = *(char **)(v81 + 104);
    v118 = *(char **)(v81 + 80);
    if (v96 >> 3 < (unint64_t)((v117 - v118) >> 3))
    {
      v119 = operator new(0x1000uLL);
      v120 = v119;
      v92 = (std::mutex *)(v81 + 8);
      if (v117 == v94)
      {
        if (v95 == v118)
        {
          if (v94 == v95)
            v166 = 1;
          else
            v166 = (v117 - v95) >> 2;
          v167 = 2 * v166;
          v168 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v166);
          v95 = &v168[(v167 + 6) & 0xFFFFFFFFFFFFFFF8];
          v170 = *(uint64_t **)(v81 + 88);
          v171 = v95;
          v172 = *(_QWORD *)(v81 + 96) - (_QWORD)v170;
          v5 = v202;
          if (v172)
          {
            v171 = &v95[v172 & 0xFFFFFFFFFFFFFFF8];
            v173 = 8 * (v172 >> 3);
            v174 = &v168[(v167 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              v175 = *v170++;
              *(_QWORD *)v174 = v175;
              v174 += 8;
              v173 -= 8;
            }
            while (v173);
          }
          v176 = *(void **)(v81 + 80);
          *(_QWORD *)(v81 + 80) = v168;
          *(_QWORD *)(v81 + 88) = v95;
          *(_QWORD *)(v81 + 96) = v171;
          *(_QWORD *)(v81 + 104) = &v168[8 * v169];
          if (v176)
          {
            operator delete(v176);
            v95 = *(char **)(v81 + 88);
          }
        }
        else
        {
          v5 = v202;
        }
        *((_QWORD *)v95 - 1) = v120;
        v177 = *(char **)(v81 + 88);
        v178 = *(char **)(v81 + 96);
        *(_QWORD *)(v81 + 88) = v177 - 8;
        v179 = *((_QWORD *)v177 - 1);
        *(_QWORD *)(v81 + 88) = v177;
        if (v178 == *(char **)(v81 + 104))
        {
          v180 = *(_QWORD *)(v81 + 80);
          v181 = (uint64_t)&v177[-v180];
          if ((unint64_t)v177 <= v180)
          {
            v187 = (uint64_t)&v178[-v180];
            v130 = v187 == 0;
            v188 = v187 >> 2;
            if (v130)
              v189 = 1;
            else
              v189 = v188;
            v190 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v189);
            v192 = &v190[8 * (v189 >> 2)];
            v193 = *(uint64_t **)(v81 + 88);
            v178 = v192;
            v194 = *(_QWORD *)(v81 + 96) - (_QWORD)v193;
            if (v194)
            {
              v178 = &v192[v194 & 0xFFFFFFFFFFFFFFF8];
              v195 = 8 * (v194 >> 3);
              v196 = &v190[8 * (v189 >> 2)];
              do
              {
                v197 = *v193++;
                *(_QWORD *)v196 = v197;
                v196 += 8;
                v195 -= 8;
              }
              while (v195);
            }
            v198 = *(void **)(v81 + 80);
            *(_QWORD *)(v81 + 80) = v190;
            *(_QWORD *)(v81 + 88) = v192;
            *(_QWORD *)(v81 + 96) = v178;
            *(_QWORD *)(v81 + 104) = &v190[8 * v191];
            if (v198)
            {
              operator delete(v198);
              v178 = *(char **)(v81 + 96);
            }
          }
          else
          {
            v182 = v181 >> 3;
            v108 = v181 >> 3 < -1;
            v183 = (v181 >> 3) + 2;
            if (v108)
              v184 = v183;
            else
              v184 = v182 + 1;
            v185 = &v177[-8 * (v184 >> 1)];
            v186 = v178 - v177;
            if (v178 != v177)
            {
              memmove(&v177[-8 * (v184 >> 1)], v177, v178 - v177);
              v177 = *(char **)(v81 + 88);
            }
            v178 = &v185[v186];
            *(_QWORD *)(v81 + 88) = &v177[-8 * (v184 >> 1)];
            *(_QWORD *)(v81 + 96) = &v185[v186];
            v5 = v202;
          }
        }
        *(_QWORD *)v178 = v179;
        *(_QWORD *)(v81 + 96) += 8;
      }
      else
      {
        *(_QWORD *)v94 = v119;
        *(_QWORD *)(v81 + 96) += 8;
        v5 = v202;
      }
      v93 = v204;
      goto LABEL_199;
    }
    if (v117 == v118)
      v121 = 1;
    else
      v121 = (v117 - v118) >> 2;
    v122 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v121);
    v201 = v123;
    v124 = &v122[8 * v116];
    v125 = &v122[8 * v123];
    v126 = operator new(0x1000uLL);
    if (v116 == v201)
    {
      v127 = 8 * v116;
      if (v96 < 1)
      {
        v143 = v126;
        v144 = v127 >> 2;
        if (v94 == v95)
          v145 = 1;
        else
          v145 = v144;
        v146 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v145);
        v124 = &v146[8 * (v145 >> 2)];
        v125 = &v146[8 * v147];
        if (v122)
          operator delete(v122);
        v122 = v146;
        v126 = v143;
      }
      else
      {
        v128 = v127 >> 3;
        if (v128 >= -1)
          v129 = v128 + 1;
        else
          v129 = v128 + 2;
        v124 -= 8 * (v129 >> 1);
      }
    }
    *(_QWORD *)v124 = v126;
    v148 = v124 + 8;
    v149 = *(_QWORD *)(v81 + 88);
    v150 = *(_QWORD *)(v81 + 96);
    while (v150 != v149)
    {
      if (v124 != v122)
      {
        v151 = v148;
        v152 = v124;
LABEL_168:
        v124 = v122;
        goto LABEL_169;
      }
      if (v148 >= v125)
      {
        if (v125 == v124)
          v155 = 1;
        else
          v155 = (v125 - v124) >> 2;
        v156 = 2 * v155;
        v157 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v155);
        v122 = v157;
        v152 = &v157[(v156 + 6) & 0xFFFFFFFFFFFFFFF8];
        v151 = v152;
        v159 = v148 - v124;
        if (v148 != v124)
        {
          v151 = &v152[v159 & 0xFFFFFFFFFFFFFFF8];
          v160 = 8 * (v159 >> 3);
          v161 = &v157[(v156 + 6) & 0xFFFFFFFFFFFFFFF8];
          v162 = v124;
          do
          {
            v163 = *(_QWORD *)v162;
            v162 += 8;
            *(_QWORD *)v161 = v163;
            v161 += 8;
            v160 -= 8;
          }
          while (v160);
        }
        v125 = &v157[8 * v158];
        operator delete(v124);
        goto LABEL_168;
      }
      v153 = (v125 - v148) >> 3;
      if (v153 >= -1)
        v154 = v153 + 1;
      else
        v154 = v153 + 2;
      v151 = &v148[8 * (v154 >> 1)];
      v152 = &v124[8 * (v154 >> 1)];
      if (v148 == v124)
        v124 = v148;
      else
        memmove(&v124[8 * (v154 >> 1)], v124, v148 - v124);
LABEL_169:
      v164 = *(_QWORD *)(v150 - 8);
      v150 -= 8;
      *((_QWORD *)v152 - 1) = v164;
      v149 = *(_QWORD *)(v81 + 88);
      v122 = v124;
      v124 = v152 - 8;
      v148 = v151;
    }
    v165 = *(void **)(v81 + 80);
    *(_QWORD *)(v81 + 80) = v122;
    *(_QWORD *)(v81 + 88) = v124;
    *(_QWORD *)(v81 + 96) = v148;
    *(_QWORD *)(v81 + 104) = v125;
    v5 = v202;
    v92 = (std::mutex *)(v81 + 8);
    v93 = v204;
    if (v165)
      operator delete(v165);
LABEL_199:
    v95 = *(char **)(v81 + 88);
    v98 = *(_QWORD *)(v81 + 120);
    v100 = *(_QWORD *)(v81 + 112) + v98;
LABEL_200:
    *(_QWORD *)(*(_QWORD *)&v95[(v100 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v100 & 0x1FF)) = v93;
    *(_QWORD *)(v81 + 120) = v98 + 1;
    std::mutex::unlock(v92);
    v89 = 0;
    a3 = v208;
LABEL_92:
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    do
      v91 = __ldaxr(p_shared_owners);
    while (__stlxr(v91 - 1, p_shared_owners));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
  while ((v89 & 1) != 0);
}

void llvm::orc::DefinitionGenerator::~DefinitionGenerator(llvm::orc::DefinitionGenerator *this)
{
  std::mutex *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  llvm::orc::InProgressLookupState **v7;
  uint64_t v8;
  llvm::orc::InProgressLookupState **v9;
  __int128 v10;
  uint64_t v11[2];
  llvm::orc::InProgressLookupState *v12;
  _QWORD v13[2];
  __int128 v14;
  unint64_t v15;
  uint64_t v16;

  *(_QWORD *)this = off_251C146F8;
  v2 = (std::mutex *)((char *)this + 8);
  std::mutex::lock((std::mutex *)((char *)this + 8));
  v3 = *((_QWORD *)this + 11);
  v13[0] = *((_QWORD *)this + 10);
  v13[1] = v3;
  v10 = *((_OWORD *)this + 6);
  *((_OWORD *)this + 5) = 0u;
  *((_OWORD *)this + 6) = 0u;
  v14 = v10;
  v4 = *((_QWORD *)this + 14);
  v5 = *((_QWORD *)this + 15);
  *((_OWORD *)this + 7) = 0u;
  v15 = v4;
  v16 = v5;
  *((_BYTE *)this + 72) = 0;
  std::mutex::unlock(v2);
  if ((_QWORD)v10 != v3)
  {
    v6 = (_QWORD *)(v3 + 8 * (v4 >> 9));
    v7 = (llvm::orc::InProgressLookupState **)(*v6 + 8 * (v4 & 0x1FF));
    v8 = *(_QWORD *)(v3 + (((v5 + v4) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v5 + v4) & 0x1FF);
    while (v7 != (llvm::orc::InProgressLookupState **)v8)
    {
      getErrorErrorCat();
      v11[0] = 3;
      v11[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Query waiting on DefinitionGenerator that was destroyed", v11, (uint64_t *)&v12);
      llvm::orc::LookupState::continueLookup(v7, &v12);
      if (v12)
        (*(void (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v12 + 8))(v12);
      if ((llvm::orc::InProgressLookupState **)((char *)++v7 - *v6) == (llvm::orc::InProgressLookupState **)4096)
      {
        v9 = (llvm::orc::InProgressLookupState **)v6[1];
        ++v6;
        v7 = v9;
      }
    }
  }
  std::deque<llvm::orc::LookupState>::~deque[abi:nn180100]((uint64_t)v13);
  std::deque<llvm::orc::LookupState>::~deque[abi:nn180100]((uint64_t)this + 80);
  std::mutex::~mutex(v2);
}

void llvm::orc::JITDylib::~JITDylib(llvm::orc::JITDylib *this)
{
  unsigned int *v2;
  void *v3;
  void **v4;

  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::destroyAll((uint64_t)this + 264);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 33), 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::destroyAll((unsigned int *)this + 60);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 30), 8);
  v2 = (unsigned int *)*((_QWORD *)this + 29);
  if (v2)
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v2);
  v3 = (void *)*((_QWORD *)this + 26);
  if (v3)
  {
    *((_QWORD *)this + 27) = v3;
    operator delete(v3);
  }
  v4 = (void **)((char *)this + 184);
  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v4);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::destroyAll((uint64_t)this + 160);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 20), 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::destroyAll((uint64_t)this + 136);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 17), 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)this + 112);
  std::mutex::~mutex((std::mutex *)((char *)this + 48));
  if (*((char *)this + 31) < 0)
    operator delete(*((void **)this + 1));
}

void llvm::orc::JITDylib::clear(llvm::orc::JITDylib *this@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unsigned int **v9;
  unsigned int *v10;
  unsigned int v11;
  unsigned int **v12;
  uint64_t v13;
  unint64_t v14;
  int64_t v15;
  unint64_t v16;
  uint64_t v17;
  unsigned int **v18;
  unint64_t v19;
  unsigned int *v20;
  __int128 v21;
  unint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  int64_t v25;
  unint64_t v26;
  int64_t v27;
  unint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  void *v32;
  uint64_t v33;
  unsigned int *v34;
  __int128 v35;
  unint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  unsigned int *v44;
  unsigned int *v45;
  char *v46;
  uint64_t v47;
  void *__p[2];
  _QWORD v49[2];
  uint64_t v50;
  __int128 v51;
  unint64_t v52;
  _QWORD *v53;
  unsigned int *v54;

  __p[0] = 0;
  __p[1] = 0;
  v49[0] = 0;
  v4 = (std::recursive_mutex *)*((_QWORD *)this + 4);
  std::recursive_mutex::lock(v4);
  if (*((_DWORD *)this + 62))
  {
    v5 = *((unsigned int *)this + 64);
    if ((_DWORD)v5)
    {
      v6 = 32 * v5;
      v7 = (_QWORD *)*((_QWORD *)this + 30);
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 4;
        v6 -= 32;
        if (!v6)
          goto LABEL_33;
      }
    }
    else
    {
      v7 = (_QWORD *)*((_QWORD *)this + 30);
    }
    v8 = *((_QWORD *)this + 30) + 32 * v5;
    if (v7 != (_QWORD *)v8)
    {
      v9 = 0;
      v10 = (unsigned int *)*v7;
      do
      {
        if (v10)
        {
          do
            v11 = __ldxr(v10);
          while (__stxr(v11 + 1, v10));
          v9 = (unsigned int **)__p[1];
        }
        if ((unint64_t)v9 >= v49[0])
        {
          v12 = (unsigned int **)__p[0];
          v13 = ((char *)v9 - (char *)__p[0]) >> 3;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            goto LABEL_66;
          v15 = v49[0] - (unint64_t)__p[0];
          if ((uint64_t)(v49[0] - (unint64_t)__p[0]) >> 2 > v14)
            v14 = v15 >> 2;
          if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v14;
          v53 = v49;
          if (v16)
          {
            v16 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v16);
            v12 = (unsigned int **)__p[0];
            v9 = (unsigned int **)__p[1];
          }
          else
          {
            v17 = 0;
          }
          v18 = (unsigned int **)(v16 + 8 * v13);
          v19 = v16 + 8 * v17;
          v52 = v19;
          *v18 = v10;
          *((_QWORD *)&v51 + 1) = v18 + 1;
          if (v9 == v12)
          {
            v9 = v18 + 1;
          }
          else
          {
            do
            {
              v20 = *--v9;
              *--v18 = v20;
              *v9 = 0;
            }
            while (v9 != v12);
            v9 = (unsigned int **)*((_QWORD *)&v51 + 1);
            v19 = v52;
          }
          v21 = *(_OWORD *)__p;
          __p[0] = v18;
          __p[1] = v9;
          v51 = v21;
          v22 = v49[0];
          v49[0] = v19;
          v52 = v22;
          v50 = v21;
          std::__split_buffer<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>::~__split_buffer((uint64_t)&v50);
        }
        else
        {
          *v9++ = v10;
        }
        __p[1] = v9;
        do
        {
          v7 += 4;
          if (v7 == (_QWORD *)v8)
            goto LABEL_33;
          v10 = (unsigned int *)*v7;
        }
        while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000);
      }
      while (v7 != (_QWORD *)v8);
    }
  }
LABEL_33:
  llvm::orc::JITDylib::getDefaultResourceTracker(this, &v54);
  v23 = __p[1];
  if (__p[1] >= (void *)v49[0])
  {
    v24 = __p[0];
    v25 = ((char *)__p[1] - (char *)__p[0]) >> 3;
    v26 = v25 + 1;
    if ((unint64_t)(v25 + 1) >> 61)
LABEL_66:
      abort();
    v27 = v49[0] - (unint64_t)__p[0];
    if ((uint64_t)(v49[0] - (unint64_t)__p[0]) >> 2 > v26)
      v26 = v27 >> 2;
    if ((unint64_t)v27 >= 0x7FFFFFFFFFFFFFF8)
      v28 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v28 = v26;
    v53 = v49;
    if (v28)
    {
      v28 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v28);
      v24 = __p[0];
      v23 = __p[1];
    }
    else
    {
      v29 = 0;
    }
    v30 = (_QWORD *)(v28 + 8 * v25);
    v31 = v28 + 8 * v29;
    v52 = v31;
    *v30 = v54;
    v32 = v30 + 1;
    v54 = 0;
    *((_QWORD *)&v51 + 1) = v30 + 1;
    if (v23 == v24)
    {
      v34 = 0;
    }
    else
    {
      do
      {
        v33 = *--v23;
        *--v30 = v33;
        *v23 = 0;
      }
      while (v23 != v24);
      v32 = (void *)*((_QWORD *)&v51 + 1);
      v31 = v52;
      v34 = v54;
    }
    v35 = *(_OWORD *)__p;
    __p[0] = v30;
    v51 = v35;
    v36 = v49[0];
    v49[0] = v31;
    v52 = v36;
    v50 = v35;
    std::__split_buffer<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>::~__split_buffer((uint64_t)&v50);
    __p[1] = v32;
    if (v34)
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v34);
  }
  else
  {
    *(_QWORD *)__p[1] = v54;
    __p[1] = v23 + 1;
  }
  std::recursive_mutex::unlock(v4);
  *a2 = 0;
  v37 = (uint64_t *)__p[0];
  v38 = (uint64_t *)__p[1];
  if (__p[0] != __p[1])
  {
    v39 = 0;
    do
    {
      *a2 = 0;
      v40 = *v37;
      v41 = atomic_load((unint64_t *)(*v37 + 8));
      llvm::orc::ExecutionSession::removeResourceTracker(&v46, *(std::recursive_mutex **)((v41 & 0xFFFFFFFFFFFFFFFELL) + 32), v40);
      v50 = v39;
      v54 = (unsigned int *)v46;
      v46 = 0;
      llvm::ErrorList::join(&v50, (uint64_t *)&v54, &v47);
      if (v54)
        (*(void (**)(unsigned int *))(*(_QWORD *)v54 + 8))(v54);
      if (v50)
        (*(void (**)(uint64_t))(*(_QWORD *)v50 + 8))(v50);
      v39 = v47;
      *a2 = v47;
      ++v37;
    }
    while (v37 != v38);
    v37 = (uint64_t *)__p[0];
  }
  if (v37)
  {
    v42 = (uint64_t *)__p[1];
    v43 = v37;
    if (__p[1] != v37)
    {
      do
      {
        v45 = (unsigned int *)*--v42;
        v44 = v45;
        if (v45)
          llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v44);
      }
      while (v42 != v37);
      v43 = (uint64_t *)__p[0];
    }
    __p[1] = v37;
    operator delete(v43);
  }
}

void llvm::orc::JITDylib::getDefaultResourceTracker(llvm::orc::JITDylib *this@<X0>, unsigned int **a2@<X8>)
{
  std::recursive_mutex *v4;
  unsigned int *v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;

  v4 = (std::recursive_mutex *)*((_QWORD *)this + 4);
  std::recursive_mutex::lock(v4);
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  if (v5)
  {
    *a2 = v5;
    do
LABEL_12:
      v11 = __ldxr(v5);
    while (__stxr(v11 + 1, v5));
    goto LABEL_13;
  }
  v6 = operator new();
  do
    v7 = __ldxr((unsigned int *)this);
  while (__stxr(v7 + 1, (unsigned int *)this));
  *(_DWORD *)v6 = 0;
  do
    v8 = __ldxr((unsigned int *)this);
  while (__stxr(v8 + 1, (unsigned int *)this));
  atomic_store((unint64_t)this, (unint64_t *)(v6 + 8));
  do
    v9 = __ldxr((unsigned int *)v6);
  while (__stxr(v9 + 1, (unsigned int *)v6));
  v10 = *((_QWORD *)this + 29);
  *((_QWORD *)this + 29) = v6;
  if (v10)
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v10);
  llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(this);
  v5 = (unsigned int *)*((_QWORD *)this + 29);
  *a2 = v5;
  if (v5)
    goto LABEL_12;
LABEL_13:
  std::recursive_mutex::unlock(v4);
}

void llvm::orc::JITDylib::defineMaterializing(uint64_t a1@<X0>, uint64_t a2@<X1>, int32x2_t *a3@<X2>, uint64_t a4@<X8>)
{
  std::recursive_mutex *v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  size_t **v12;
  _QWORD *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  int v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  __int16 v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  char v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int32x2_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  int v63;
  int v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  std::recursive_mutex *v75;
  int v76;
  unsigned int v77;
  unint64_t *v78;
  unint64_t v79;
  size_t v80;
  const void *v81;
  uint64_t *p_dst;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  _QWORD *v87;
  std::recursive_mutex *v88;
  std::recursive_mutex *v89;
  unint64_t v90;
  unint64_t v91;
  uint64_t *__p;
  int v93;
  char v94;
  uint64_t __dst;
  __int128 v96;
  _QWORD *v97;

  v8 = *(std::recursive_mutex **)(a1 + 32);
  std::recursive_mutex::lock(v8);
  v9 = atomic_load((unint64_t *)(*(_QWORD *)(a2 + 8) + 8));
  if ((v9 & 1) != 0)
  {
    v13 = (_QWORD *)operator new();
    v14 = *(unsigned int **)(a2 + 8);
    if (v14)
    {
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
    }
    *v13 = &off_251C14538;
    v13[1] = v14;
    *(_BYTE *)(a4 + 24) |= 1u;
    *(_QWORD *)a4 = v13;
    goto LABEL_92;
  }
  if (!a3[1].i32[0])
    goto LABEL_87;
  v10 = a3[2].u32[0];
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    v12 = (size_t **)*a3;
    while (((unint64_t)*v12 | 8) == 0xFFFFFFFFFFFFFFF8)
    {
      v12 += 2;
      v11 -= 16;
      if (!v11)
        goto LABEL_87;
    }
  }
  else
  {
    v12 = (size_t **)*a3;
  }
  v16 = *(_QWORD *)a3 + 16 * v10;
  if (v12 == (size_t **)v16)
  {
LABEL_87:
    v17 = 0;
    __p = 0;
    goto LABEL_88;
  }
  v17 = 0;
  v18 = 0;
  v90 = 0;
  v91 = 0;
  v19 = 0;
  v20 = 0;
  do
  {
    __p = v20;
    __dst = 0;
    v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(a1 + 112), *(_DWORD *)(a1 + 128), (uint64_t)*v12, &__dst);
    v22 = *(_QWORD *)(a1 + 112);
    v23 = *(_DWORD *)(a1 + 128);
    if (v21)
      v24 = __dst == v22 + 24 * v23;
    else
      v24 = 1;
    if (v24)
    {
      v25 = *((_WORD *)v12 + 4);
      v26 = (uint64_t)*v12;
      __dst = v26;
      if ((unint64_t)(v26 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v27 = (unint64_t *)(v26 + 8);
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 + 1, v27));
        v22 = *(_QWORD *)(a1 + 112);
        v23 = *(_DWORD *)(a1 + 128);
        v26 = __dst;
      }
      *(_QWORD *)&v96 = 0;
      WORD4(v96) = v25;
      BYTE10(v96) = 1;
      *(_DWORD *)((char *)&v96 + 11) = v93;
      HIBYTE(v96) = v94;
      v97 = 0;
      v29 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v22, v23, v26, &v97);
      v30 = v97;
      if ((v29 & 1) != 0)
      {
        v20 = __p;
      }
      else
      {
        v32 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1 + 112, &__dst, v97);
        v30 = v32;
        v20 = __p;
        if ((unint64_t)(*v32 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v33 = (unint64_t *)(*v32 + 8);
          do
            v34 = __ldaxr(v33);
          while (__stlxr(v34 - 1, v33));
          v26 = __dst;
        }
        *v32 = v26;
        __dst = 0;
        *(_OWORD *)(v32 + 1) = v96;
        v26 = 0;
      }
      if ((unint64_t)(v26 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v35 = (unint64_t *)(v26 + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
      }
      v37 = (uint64_t)*v12;
      if ((unint64_t)v19 >= v91)
      {
        v88 = v8;
        v39 = v19 - v20;
        v40 = v39 + 1;
        if ((unint64_t)(v39 + 1) >> 61)
          goto LABEL_116;
        v87 = v30;
        if ((uint64_t)(v91 - (_QWORD)v20) >> 2 > v40)
          v40 = (uint64_t)(v91 - (_QWORD)v20) >> 2;
        if (v91 - (unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
          v41 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v41 = v40;
        if (v41)
        {
          v42 = (uint64_t)*v12;
          v41 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v41);
          v37 = v42;
          v20 = __p;
        }
        else
        {
          v43 = 0;
        }
        v49 = (uint64_t *)(v41 + 8 * v39);
        *v49 = v37;
        v38 = v49 + 1;
        if (v19 == v20)
        {
          v20 = (uint64_t *)(v41 + 8 * v39);
          v8 = v88;
        }
        else
        {
          v8 = v88;
          do
          {
            v50 = *--v19;
            *--v49 = v50;
          }
          while (v19 != v20);
          v19 = v20;
          v20 = v49;
        }
        v91 = v41 + 8 * v43;
        if (v19)
        {
          v51 = v19;
          v52 = v20;
          operator delete(v51);
          v20 = v52;
        }
        v30 = v87;
      }
      else
      {
        *v19 = v37;
        v38 = v19 + 1;
      }
      *((_BYTE *)v30 + 18) = *((_BYTE *)v30 + 18) & 0x80 | 2;
      v19 = v38;
      goto LABEL_71;
    }
    if ((*((_BYTE *)v12 + 9) & 2) == 0)
    {
      if (__p != v19)
      {
        v67 = __p;
        while (1)
        {
          v68 = *(_QWORD *)(a1 + 112);
          v69 = *(_DWORD *)(a1 + 128);
          if (!v69)
            goto LABEL_101;
          v70 = *v67;
          v71 = v69 - 1;
          v72 = ((*v67 >> 4) ^ (*v67 >> 9)) & (v69 - 1);
          v73 = (uint64_t *)(v68 + 24 * v72);
          v74 = *v73;
          if (*v73 != *v67)
            break;
LABEL_102:
          if ((unint64_t)(v70 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v78 = (unint64_t *)(v70 + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
          }
          *v73 = -16;
          *(int32x2_t *)(a1 + 120) = vadd_s32(*(int32x2_t *)(a1 + 120), (int32x2_t)0x1FFFFFFFFLL);
          if (++v67 == v19)
            goto LABEL_106;
        }
        v75 = v8;
        v76 = 1;
        while (1)
        {
          v8 = v75;
          if (v74 == -8)
            break;
          v77 = v72 + v76++;
          v72 = v77 & v71;
          v73 = (uint64_t *)(v68 + 24 * (v77 & v71));
          v74 = *v73;
          if (*v73 == v70)
          {
            v8 = v75;
            goto LABEL_102;
          }
        }
LABEL_101:
        v73 = (uint64_t *)(v68 + 24 * v69);
        v70 = *v73;
        goto LABEL_102;
      }
LABEL_106:
      v81 = *v12 + 2;
      v80 = **v12;
      if (v80 < 0x7FFFFFFFFFFFFFF8)
      {
        if (v80 >= 0x17)
        {
          v83 = (v80 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v80 | 7) != 0x17)
            v83 = v80 | 7;
          v84 = v83 + 1;
          p_dst = (uint64_t *)operator new(v83 + 1);
          *(_QWORD *)&v96 = v80;
          *((_QWORD *)&v96 + 1) = v84 | 0x8000000000000000;
          __dst = (uint64_t)p_dst;
        }
        else
        {
          HIBYTE(v96) = **v12;
          p_dst = &__dst;
          if (!v80)
          {
LABEL_114:
            *((_BYTE *)p_dst + v80) = 0;
            v85 = operator new();
            v86 = v96;
            *(_QWORD *)(v85 + 8) = __dst;
            *(_QWORD *)(v85 + 16) = v86;
            *(_QWORD *)(v85 + 23) = *(_QWORD *)((char *)&v96 + 7);
            LOBYTE(v86) = HIBYTE(v96);
            *(_QWORD *)v85 = off_251C167C8;
            *(_BYTE *)(v85 + 31) = v86;
            *(_BYTE *)(a4 + 24) |= 1u;
            *(_QWORD *)a4 = v85;
            if (v17)
              goto LABEL_89;
            goto LABEL_90;
          }
        }
        memmove(p_dst, v81, v80);
        goto LABEL_114;
      }
LABEL_116:
      abort();
    }
    v31 = (uint64_t)*v12;
    v20 = __p;
    if ((unint64_t)v18 < v90)
    {
      *v18++ = v31;
      goto LABEL_71;
    }
    v89 = v8;
    v44 = v18 - v17;
    v45 = v44 + 1;
    if ((unint64_t)(v44 + 1) >> 61)
      goto LABEL_116;
    if ((uint64_t)(v90 - (_QWORD)v17) >> 2 > v45)
      v45 = (uint64_t)(v90 - (_QWORD)v17) >> 2;
    if (v90 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v46 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v46 = v45;
    if (v46)
    {
      v47 = (uint64_t)*v12;
      v46 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v46);
      v31 = v47;
    }
    else
    {
      v48 = 0;
    }
    v53 = (uint64_t *)(v46 + 8 * v44);
    *v53 = v31;
    v54 = v53 + 1;
    while (v18 != v17)
    {
      v55 = *--v18;
      *--v53 = v55;
    }
    v90 = v46 + 8 * v48;
    if (v17)
      operator delete(v17);
    v17 = v53;
    v18 = v54;
    v8 = v89;
    v20 = __p;
    do
    {
LABEL_71:
      v12 += 2;
      if (v12 == (size_t **)v16)
        goto LABEL_74;
    }
    while (((unint64_t)*v12 | 8) == 0xFFFFFFFFFFFFFFF8);
  }
  while (v12 != (size_t **)v16);
LABEL_74:
  if (v17 != v18)
  {
    while (1)
    {
      v57 = *--v18;
      v56 = v57;
      v58 = *a3;
      v59 = a3[2].u32[0];
      if (!(_DWORD)v59)
        goto LABEL_81;
      LODWORD(v60) = ((v56 >> 4) ^ (v56 >> 9)) & (v59 - 1);
      v61 = (uint64_t *)(*(_QWORD *)&v58 + 16 * v60);
      v62 = *v61;
      if (*v61 != v56)
        break;
LABEL_82:
      if ((unint64_t)(v56 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v65 = (unint64_t *)(v56 + 8);
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
      }
      *v61 = -16;
      a3[1] = vadd_s32(a3[1], (int32x2_t)0x1FFFFFFFFLL);
      if (v17 == v18)
        goto LABEL_86;
    }
    v63 = 1;
    while (v62 != -8)
    {
      v64 = v60 + v63++;
      v60 = v64 & (v59 - 1);
      v62 = *(_QWORD *)(*(_QWORD *)&v58 + 16 * v60);
      if (v62 == v56)
      {
        v61 = (uint64_t *)(*(_QWORD *)&v58 + 16 * v60);
        goto LABEL_82;
      }
    }
LABEL_81:
    v61 = (uint64_t *)(*(_QWORD *)&v58 + 16 * v59);
    v56 = *v61;
    goto LABEL_82;
  }
LABEL_86:
  __p = v20;
LABEL_88:
  *(_BYTE *)(a4 + 24) &= ~1u;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::copyFrom(a4, (uint64_t)a3);
  if (v17)
LABEL_89:
    operator delete(v17);
LABEL_90:
  if (__p)
    operator delete(__p);
LABEL_92:
  std::recursive_mutex::unlock(v8);
}

void llvm::orc::JITDylib::replace(uint64_t a1@<X0>, uint64_t a2@<X1>, std::__shared_weak_count_vtbl **a3@<X2>, _QWORD *a4@<X8>)
{
  std::recursive_mutex *v8;
  char v9;
  std::__shared_weak_count_vtbl *v10;
  void (__cdecl *v11)(std::__shared_weak_count *__hidden);
  uint64_t get_deleter_low;
  uint64_t v13;
  void (__cdecl *v14)(std::__shared_weak_count *__hidden);
  _QWORD *v15;
  uint64_t v16;
  void (__cdecl *v17)(std::__shared_weak_count *__hidden);
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  int v27;
  uint64_t v28;
  uint64_t *v29;
  unint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  std::__shared_weak_count_vtbl *v33;
  uint64_t v34;
  std::__shared_weak_count_vtbl *v35;
  uint64_t v36;
  uint64_t *v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count_vtbl *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  void (__cdecl *on_zero_shared_weak)(std::__shared_weak_count *__hidden);
  uint64_t v48[2];
  int get_deleter;
  uint64_t v50;

  v46 = 0;
  v8 = *(std::recursive_mutex **)(a1 + 32);
  std::recursive_mutex::lock(v8);
  v9 = atomic_load((unint64_t *)(*(_QWORD *)(a2 + 8) + 8));
  if ((v9 & 1) != 0)
  {
    v15 = (_QWORD *)operator new();
    v16 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    *v15 = &off_251C14538;
    v15[1] = v16;
    std::recursive_mutex::unlock(v8);
    goto LABEL_38;
  }
  v10 = *a3;
  if (!LODWORD((*a3)->__on_zero_shared))
    goto LABEL_17;
  v11 = v10->~__shared_weak_count_0;
  get_deleter_low = LODWORD(v10->__get_deleter);
  if ((_DWORD)get_deleter_low)
  {
    v13 = 16 * get_deleter_low;
    v14 = v11;
    while ((*(_QWORD *)v14 | 8) == 0xFFFFFFFFFFFFFFF8)
    {
      v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v14 + 16);
      v13 -= 16;
      if (!v13)
        goto LABEL_17;
    }
  }
  else
  {
    v14 = v11;
  }
  v17 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v11 + 16 * get_deleter_low);
  if (v14 == v17)
    goto LABEL_17;
LABEL_11:
  v50 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(a1 + 160), v14, &v50)|| v50 == *(_QWORD *)(a1 + 160) + 72 * *(unsigned int *)(a1 + 176)|| *(_QWORD *)(v50 + 48) == *(_QWORD *)(v50 + 56))
  {
    while (1)
    {
      v14 = (void (__cdecl *)(std::__shared_weak_count *__hidden))((char *)v14 + 16);
      if (v14 == v17)
        break;
      if ((*(_QWORD *)v14 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        if (v14 != v17)
          goto LABEL_11;
        break;
      }
    }
LABEL_17:
    v18 = *(_QWORD *)(a2 + 8);
    v19 = (std::__shared_weak_count *)operator new(0x28uLL);
    v19->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    v19->__shared_weak_owners_ = 0;
    v19->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14958;
    v21 = *a3;
    v19[1].__vftable = *a3;
    *a3 = 0;
    v19[1].__shared_owners_ = v18;
    if (LODWORD(v21->__on_zero_shared))
    {
      v22 = (uint64_t *)v21->~__shared_weak_count_0;
      v23 = LODWORD(v21->__get_deleter);
      if ((_DWORD)v23)
      {
        v24 = 16 * v23;
        v25 = v22;
        while ((*v25 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v25 += 2;
          v24 -= 16;
          if (!v24)
            goto LABEL_33;
        }
      }
      else
      {
        v25 = v22;
      }
      v26 = &v22[2 * v23];
      while (v25 != v26)
      {
        v50 = 0;
        v27 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(a1 + 112), *(_DWORD *)(a1 + 128), *v25, &v50);
        v28 = v50;
        if (!v27)
          v28 = *(_QWORD *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 128);
        *(_BYTE *)(v28 + 18) |= 0x80u;
        v29 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::FindAndConstruct(a1 + 136, v25);
        std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>::operator=[abi:nn180100](v29 + 1, (uint64_t)&v19[1], (uint64_t)v19);
        if (v25 + 2 == v26)
          break;
        v25 += 2;
        while ((*v25 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v25 += 2;
          if (v25 == v26)
            goto LABEL_33;
        }
      }
    }
    do
LABEL_33:
      v30 = __ldaxr(p_shared_owners);
    while (__stlxr(v30 - 1, p_shared_owners));
    if (!v30)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
    std::recursive_mutex::unlock(v8);
    goto LABEL_37;
  }
  v32 = *(_QWORD *)(a2 + 8);
  v33 = *a3;
  v34 = (uint64_t)(*a3)->~__shared_weak_count_0;
  v33->~__shared_weak_count_0 = 0;
  v48[1] = (uint64_t)v33->__on_zero_shared;
  v33->__on_zero_shared = 0;
  get_deleter = (int)v33->__get_deleter;
  LODWORD(v33->__get_deleter) = 0;
  v35 = *a3;
  on_zero_shared_weak = (*a3)->__on_zero_shared_weak;
  v48[0] = v34;
  v35->__on_zero_shared_weak = 0;
  llvm::orc::ExecutionSession::createMaterializationResponsibility(&v50, v32, v48, (uint64_t *)&on_zero_shared_weak);
  v36 = v50;
  v50 = 0;
  v37 = v46;
  v46 = (uint64_t *)v36;
  if (v37)
  {
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v46, v37);
    v50 = 0;
  }
  if ((unint64_t)on_zero_shared_weak - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v38 = (unint64_t *)((char *)on_zero_shared_weak + 8);
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v48);
  v40 = *a3;
  *a3 = 0;
  std::recursive_mutex::unlock(v8);
  if (v40)
  {
    v41 = *(_QWORD *)(a1 + 32);
    v42 = (_QWORD *)operator new();
    v43 = v46;
    v46 = 0;
    *v42 = &off_251C14800;
    v42[1] = v40;
    v42[2] = v43;
    v44 = *(_QWORD *)(*(_QWORD *)(v41 + 72) + 24);
    v48[0] = (uint64_t)v42;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v44 + 16))(v44, v48);
    v45 = v48[0];
    v48[0] = 0;
    if (v45)
      (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  }
LABEL_37:
  v15 = 0;
LABEL_38:
  *a4 = v15;
  v31 = v46;
  v46 = 0;
  if (v31)
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v46, v31);
}

void llvm::orc::JITDylib::getRequestedSymbols(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::recursive_mutex *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;

  v6 = *(std::recursive_mutex **)(a1 + 32);
  std::recursive_mutex::lock(v6);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (*(_DWORD *)(a2 + 8))
  {
    v7 = *(uint64_t **)a2;
    v8 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v8)
    {
      v9 = 16 * v8;
      v10 = *(uint64_t **)a2;
      while ((*v10 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v10 += 2;
        v9 -= 16;
        if (!v9)
          goto LABEL_15;
      }
    }
    else
    {
      v10 = *(uint64_t **)a2;
    }
    v11 = &v7[2 * v8];
    if (v10 != v11)
    {
LABEL_9:
      v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::find(a1 + 160, v10);
      if (*(_QWORD *)(a1 + 160) + 72 * *(unsigned int *)(a1 + 176) != v12
        && *(_QWORD *)(v12 + 48) != *(_QWORD *)(v12 + 56))
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>(a3, v10, (uint64_t)&v13);
      }
      while (1)
      {
        v10 += 2;
        if (v10 == v11)
          break;
        if ((*v10 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v10 != v11)
            goto LABEL_9;
          break;
        }
      }
    }
  }
LABEL_15:
  std::recursive_mutex::unlock(v6);
}

void llvm::orc::JITDylib::resolve(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  std::recursive_mutex *v8;
  char v9;
  std::string *v10;
  std::string::size_type v11;
  _QWORD *v12;
  unsigned int *v13;
  unsigned int v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  char *v23;
  int v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  _WORD *v28;
  __int16 v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  char *v36;
  unint64_t v37;
  __int128 v38;
  uint64_t *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t *v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *i;
  uint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t **v61;
  uint64_t **v62;
  unint64_t v63;
  _OWORD *v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t **v68;
  BOOL v69;
  std::recursive_mutex *v70;
  uint64_t *v71;
  char *v72;
  unint64_t v73;
  char *v74;
  char *v75;
  uint64_t **v76;
  uint64_t *v77;
  uint64_t v78;
  __int128 v79;
  std::string v80;
  void *__p[2];
  std::string::size_type v82;

  v77 = 0;
  v78 = 0;
  v76 = &v77;
  v8 = *(std::recursive_mutex **)(a1 + 32);
  std::recursive_mutex::lock(v8);
  v9 = atomic_load((unint64_t *)(*(_QWORD *)(a2 + 8) + 8));
  if ((v9 & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 40))
    {
      std::operator+<char>();
      v10 = std::string::append(&v80, " is defunct");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v82 = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      getErrorErrorCat();
      *(_QWORD *)&v79 = 3;
      *((_QWORD *)&v79 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)__p, (uint64_t *)&v79, a4);
      if (SHIBYTE(v82) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v80.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v80.__r_.__value_.__l.__data_);
      goto LABEL_92;
    }
    memset(&v80, 0, 20);
    v15 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v15)
    {
      v16 = (char *)operator new(32 * v15);
      v17 = v16;
      v18 = *(uint64_t **)a3;
      v19 = *(unsigned int *)(a3 + 16);
      if ((_DWORD)v19)
      {
        v20 = 24 * v19;
        v21 = *(uint64_t **)a3;
        while ((*v21 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v21 += 3;
          v20 -= 24;
          if (!v20)
            goto LABEL_88;
        }
        v71 = a4;
      }
      else
      {
        v71 = a4;
        v21 = *(uint64_t **)a3;
      }
      v22 = &v18[3 * v19];
      if (v21 == v22)
      {
        a4 = v71;
      }
      else
      {
        v70 = v8;
        v23 = v16;
        v72 = &v16[32 * v15];
        do
        {
          __p[0] = 0;
          v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(a1 + 112), *(_DWORD *)(a1 + 128), *v21, __p);
          v25 = *(_QWORD *)(a1 + 112);
          v26 = *(_DWORD *)(a1 + 128);
          v27 = v25 + 24 * v26;
          if (v24)
            v28 = __p[0];
          else
            v28 = (_WORD *)(v25 + 24 * v26);
          v29 = v28[8];
          if ((v29 & 0x100) != 0)
          {
            llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v80, v21, (uint64_t)__p);
          }
          else
          {
            v74 = v17;
            v30 = v21[1];
            if (v23 >= v72)
            {
              v31 = (v23 - v74) >> 5;
              v32 = v31 + 1;
              if ((unint64_t)(v31 + 1) >> 59)
                abort();
              if ((v72 - v74) >> 4 > v32)
                v32 = (v72 - v74) >> 4;
              v33 = 0x7FFFFFFFFFFFFFFLL;
              if ((unint64_t)(v72 - v74) < 0x7FFFFFFFFFFFFFE0)
                v33 = v32;
              v73 = v33;
              if (v33)
              {
                if (v33 >> 59)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v34 = (char *)operator new(32 * v33);
              }
              else
              {
                v34 = 0;
              }
              v35 = &v34[32 * v31];
              *(_QWORD *)v35 = v28;
              *((_QWORD *)v35 + 1) = v27;
              *((_QWORD *)v35 + 2) = v30;
              *((_WORD *)v35 + 12) = v29;
              if (v23 == v74)
              {
                v17 = &v34[32 * v31];
                v37 = v73;
              }
              else
              {
                v36 = &v34[32 * v31];
                v37 = v73;
                do
                {
                  v38 = *((_OWORD *)v23 - 1);
                  v17 = v36 - 32;
                  *((_OWORD *)v36 - 2) = *((_OWORD *)v23 - 2);
                  *((_OWORD *)v36 - 1) = v38;
                  v23 -= 32;
                  v36 -= 32;
                }
                while (v23 != v74);
              }
              v72 = &v34[32 * v37];
              v23 = v35 + 32;
              if (v74)
                operator delete(v74);
            }
            else
            {
              *(_QWORD *)v23 = v28;
              *((_QWORD *)v23 + 1) = v27;
              *((_QWORD *)v23 + 2) = v30;
              *((_WORD *)v23 + 12) = v29;
              v23 += 32;
              v17 = v74;
            }
          }
          v21 += 3;
          v75 = v17;
          if (v21 == v22)
            break;
          while ((*v21 | 8) == 0xFFFFFFFFFFFFFFF8)
          {
            v21 += 3;
            if (v21 == v22)
              goto LABEL_49;
          }
        }
        while (v21 != v22);
LABEL_49:
        if (LODWORD(v80.__r_.__value_.__r.__words[1]))
        {
          v39 = (uint64_t *)operator new(0x30uLL);
          v39[1] = 0;
          v39[2] = 0;
          *v39 = (uint64_t)&off_251C14990;
          v39[4] = 0;
          *((_DWORD *)v39 + 10) = 0;
          __p[1] = v39;
          v39[3] = 0;
          __p[0] = v39 + 3;
          *(_QWORD *)&v79 = a1;
          v40 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v39 + 3, (uint64_t *)&v79);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::operator=((uint64_t)(v40 + 1), (uint64_t)&v80);
          v41 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 72);
          v43 = *(_QWORD *)(v41 + 8);
          v42 = *(_QWORD *)(v41 + 16);
          *(_QWORD *)&v79 = v43;
          *((_QWORD *)&v79 + 1) = v42;
          if (v42)
          {
            v44 = (unint64_t *)(v42 + 8);
            do
              v45 = __ldxr(v44);
            while (__stxr(v45 + 1, v44));
          }
          a4 = v71;
          llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>>(v71, &v79, (__int128 *)__p);
          v46 = (std::__shared_weak_count *)*((_QWORD *)&v79 + 1);
          v8 = v70;
          if (*((_QWORD *)&v79 + 1))
          {
            v47 = (unint64_t *)(*((_QWORD *)&v79 + 1) + 8);
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          v49 = (std::__shared_weak_count *)__p[1];
          if (__p[1])
          {
            v50 = (unint64_t *)((char *)__p[1] + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          goto LABEL_89;
        }
        if (v17 == v23)
        {
          v17 = v23;
        }
        else
        {
          v52 = (uint64_t *)(a1 + 160);
          do
          {
            v54 = *((_QWORD *)v23 - 4);
            v23 -= 32;
            v53 = (_QWORD *)v54;
            v55 = *((_QWORD *)v23 + 2);
            v56 = *((_QWORD *)v23 + 3);
            *(_QWORD *)(v54 + 8) = v55;
            *(_WORD *)(v54 + 16) = v56;
            *(_BYTE *)(v54 + 18) = *(_BYTE *)(v54 + 18) & 0x80 | 3;
            __p[0] = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v52, (_QWORD *)v54, __p)&& __p[0] != (void *)(*(_QWORD *)(a1 + 160) + 72 * *(unsigned int *)(a1 + 176)))
            {
              llvm::orc::JITDylib::MaterializingInfo::takeQueriesMeeting((char **)&v79, (uint64_t)__p[0] + 8, 3u);
              v58 = (uint64_t *)*((_QWORD *)&v79 + 1);
              for (i = (uint64_t *)v79; i != v58; i += 2)
              {
                llvm::orc::AsynchronousSymbolQuery::notifySymbolMetRequiredState(*i, v53, v55, v56);
                llvm::orc::AsynchronousSymbolQuery::removeQueryDependence(*i, a1, v53);
                v59 = *i;
                if (!*(_QWORD *)(*i + 80))
                {
                  v60 = v77;
                  v61 = &v77;
                  v62 = &v77;
                  if (v77)
                  {
                    while (1)
                    {
                      while (1)
                      {
                        v62 = (uint64_t **)v60;
                        v63 = v60[4];
                        if (v63 <= v59)
                          break;
                        v60 = *v62;
                        v61 = v62;
                        if (!*v62)
                          goto LABEL_78;
                      }
                      if (v63 >= v59)
                        break;
                      v60 = v62[1];
                      if (!v60)
                      {
                        v61 = v62 + 1;
                        goto LABEL_78;
                      }
                    }
                  }
                  else
                  {
LABEL_78:
                    v64 = operator new(0x30uLL);
                    __p[1] = &v77;
                    v64[2] = *(_OWORD *)i;
                    *i = 0;
                    i[1] = 0;
                    LOBYTE(v82) = 1;
                    *(_QWORD *)v64 = 0;
                    *((_QWORD *)v64 + 1) = 0;
                    *((_QWORD *)v64 + 2) = v62;
                    *v61 = (uint64_t *)v64;
                    if (*v76)
                    {
                      v76 = (uint64_t **)*v76;
                      v65 = *v61;
                    }
                    else
                    {
                      v65 = (uint64_t *)v64;
                    }
                    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v77, v65);
                    ++v78;
                    __p[0] = 0;
                    std::unique_ptr<std::__tree_node<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,void *>>>>::reset[abi:nn180100]((uint64_t)__p);
                  }
                }
              }
              __p[0] = &v79;
              std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
              v52 = (uint64_t *)(a1 + 160);
              v17 = v75;
            }
          }
          while (v17 != v23);
        }
        v8 = v70;
        a4 = v71;
      }
    }
    else
    {
      v17 = 0;
    }
LABEL_88:
    *a4 = 0;
LABEL_89:
    if (v17)
      operator delete(v17);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v80);
    goto LABEL_92;
  }
  v12 = (_QWORD *)operator new();
  v13 = *(unsigned int **)(a2 + 8);
  if (v13)
  {
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  *v12 = &off_251C14538;
  v12[1] = v13;
  *a4 = (uint64_t)v12;
LABEL_92:
  std::recursive_mutex::unlock(v8);
  if (!*a4)
  {
    v66 = (uint64_t *)v76;
    if (v76 != &v77)
    {
      do
      {
        llvm::orc::AsynchronousSymbolQuery::handleComplete(v66[4], *(_QWORD *)(a1 + 32));
        v67 = (uint64_t *)v66[1];
        if (v67)
        {
          do
          {
            v68 = (uint64_t **)v67;
            v67 = (uint64_t *)*v67;
          }
          while (v67);
        }
        else
        {
          do
          {
            v68 = (uint64_t **)v66[2];
            v69 = *v68 == v66;
            v66 = (uint64_t *)v68;
          }
          while (!v69);
        }
        v66 = (uint64_t *)v68;
      }
      while (v68 != &v77);
    }
    *a4 = 0;
  }
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v76, v77);
}

void llvm::orc::JITDylib::unlinkMaterializationResponsibility(uint64_t a1, uint64_t a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v4 = *(std::recursive_mutex **)(a1 + 32);
  std::recursive_mutex::lock(v4);
  v5 = a1 + 264;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)(a1 + 264), &v7, &v8))v6 = v8;
  else
    v6 = *(_QWORD *)(a1 + 264) + 32 * *(unsigned int *)(a1 + 280);
  v8 = a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v6 + 8, &v8);
  if (!*(_DWORD *)(v6 + 16))
  {
    v8 = *(_QWORD *)(a2 + 8);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::erase(v5, &v8);
  }
  std::recursive_mutex::unlock(v4);
}

void llvm::orc::JITDylib::addToLinkOrder(_QWORD *a1, uint64_t a2, int a3)
{
  std::recursive_mutex *v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;

  v6 = (std::recursive_mutex *)a1[4];
  std::recursive_mutex::lock(v6);
  v7 = a1[28];
  v8 = a1[27];
  if (v8 >= v7)
  {
    v10 = a1[26];
    v11 = (uint64_t)(v8 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v7 - v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)(a1 + 28), v14);
    else
      v15 = 0;
    v16 = &v15[16 * v11];
    v17 = &v15[16 * v14];
    *(_QWORD *)v16 = a2;
    *((_DWORD *)v16 + 2) = a3;
    v9 = v16 + 16;
    v19 = (char *)a1[26];
    v18 = (char *)a1[27];
    if (v18 != v19)
    {
      do
      {
        *((_OWORD *)v16 - 1) = *((_OWORD *)v18 - 1);
        v16 -= 16;
        v18 -= 16;
      }
      while (v18 != v19);
      v18 = (char *)a1[26];
    }
    a1[26] = v16;
    a1[27] = v9;
    a1[28] = v17;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v8 = a2;
    *(_DWORD *)(v8 + 8) = a3;
    v9 = (char *)(v8 + 16);
  }
  a1[27] = v9;
  std::recursive_mutex::unlock(v6);
}

uint64_t llvm::orc::JITDylib::MaterializingInfo::takeQueriesMeeting(char **a1, uint64_t a2, unsigned int a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  __int128 v22;
  int64x2_t v23;
  char *v24;
  uint64_t v25;
  int64x2_t v26;
  char *v27;
  _QWORD *v28;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  for (result = *(_QWORD *)(a2 + 48); *(_QWORD *)(a2 + 40) != result; *(_QWORD *)(a2 + 48) = result)
  {
    v8 = result - 16;
    v7 = *(_QWORD *)(result - 16);
    if (*(unsigned __int8 *)(v7 + 88) > a3)
      break;
    v9 = a1[1];
    v10 = (unint64_t)a1[2];
    if ((unint64_t)v9 >= v10)
    {
      v12 = (v9 - *a1) >> 4;
      v13 = v12 + 1;
      if ((unint64_t)(v12 + 1) >> 60)
        abort();
      v14 = v10 - (_QWORD)*a1;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      v15 = (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v13;
      v28 = a1 + 2;
      v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v15);
      v18 = &v16[16 * v12];
      *(_OWORD *)v18 = *(_OWORD *)v8;
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(v8 + 8) = 0;
      v20 = *a1;
      v19 = a1[1];
      if (v19 == *a1)
      {
        v23 = vdupq_n_s64((unint64_t)v19);
        v21 = &v16[16 * v12];
      }
      else
      {
        v21 = &v16[16 * v12];
        do
        {
          v22 = *((_OWORD *)v19 - 1);
          v19 -= 16;
          *((_OWORD *)v21 - 1) = v22;
          v21 -= 16;
          *(_QWORD *)v19 = 0;
          *((_QWORD *)v19 + 1) = 0;
        }
        while (v19 != v20);
        v23 = *(int64x2_t *)a1;
      }
      v11 = v18 + 16;
      *a1 = v21;
      a1[1] = v18 + 16;
      v26 = v23;
      v24 = a1[2];
      a1[2] = &v16[16 * v17];
      v27 = v24;
      v25 = v23.i64[0];
      std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v25);
    }
    else
    {
      *(_QWORD *)v9 = v7;
      *((_QWORD *)v9 + 1) = *(_QWORD *)(result - 8);
      *(_QWORD *)v8 = 0;
      *(_QWORD *)(result - 8) = 0;
      v11 = v9 + 16;
    }
    a1[1] = v11;
    result = std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](*(_QWORD *)(a2 + 48) - 16);
  }
  return result;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::erase(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;
  _QWORD *v7;

  v7 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v7))
  {
    v4 = v7;
    std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(v7 + 1));
    if ((unint64_t)(*v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v5 = (unint64_t *)(*v4 + 8);
      do
        v6 = __ldaxr(v5);
      while (__stlxr(v6 - 1, v5));
    }
    *v4 = -16;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::orc::JITDylib::transferTracker(llvm::orc::JITDylib *this, void **a2, llvm::orc::ResourceTracker *a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void **v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  int v29;
  llvm::orc::ResourceTracker *v30;
  uint64_t *v31;
  int64x2_t *v32;
  void **v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  void **v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  unint64_t v67;
  char *v68;
  void **v69;
  uint64_t v70[2];
  int v71;
  __int128 v72;
  unint64_t v73;
  void **v74;
  int64x2_t v75;
  char *v76;
  uint64_t *v77;

  if (*((_DWORD *)this + 36))
  {
    v6 = *((unsigned int *)this + 38);
    if ((_DWORD)v6)
    {
      v7 = 24 * v6;
      v8 = (_QWORD *)*((_QWORD *)this + 17);
      while ((*v8 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v8 += 3;
        v7 -= 24;
        if (!v7)
          goto LABEL_6;
      }
    }
    else
    {
      v8 = (_QWORD *)*((_QWORD *)this + 17);
    }
    v26 = *((_QWORD *)this + 17) + 24 * v6;
LABEL_32:
    if (v8 != (_QWORD *)v26)
    {
      v27 = v8[1];
      if (*(llvm::orc::ResourceTracker **)(v27 + 8) == a3)
        *(_QWORD *)(v27 + 8) = a2;
      while (1)
      {
        v8 += 3;
        if (v8 == (_QWORD *)v26)
          break;
        if ((*v8 | 8) != 0xFFFFFFFFFFFFFFF8)
          goto LABEL_32;
      }
    }
  }
LABEL_6:
  *(_QWORD *)&v72 = a3;
  v74 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)this + 33, &v72, &v74))
  {
    v9 = v74;
    if (v74 != (void **)(*((_QWORD *)this + 33) + 32 * *((unsigned int *)this + 70)))
    {
      v74 = a2;
      v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>,llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::FindAndConstruct((uint64_t)this + 264, &v74);
      v11 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v9 + 1));
      v13 = (uint64_t)v9[1] + 8 * *((unsigned int *)v9 + 6);
      if ((uint64_t *)v13 != v11)
      {
        v14 = v11;
        v15 = v12;
        do
        {
          v16 = *v14;
          do
            v17 = __ldxr((unsigned int *)a2);
          while (__stxr(v17 + 1, (unsigned int *)a2));
          v18 = *(_QWORD *)(v16 + 8);
          *(_QWORD *)(v16 + 8) = a2;
          if (v18)
            llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release();
          while (++v14 != v15)
          {
            if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_18;
          }
          v14 = v15;
LABEL_18:
          ;
        }
        while (v14 != (uint64_t *)v13);
      }
      v19 = v10 + 1;
      if (*((_DWORD *)v10 + 4))
      {
        v20 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v9 + 1));
        v22 = (uint64_t)v9[1] + 8 * *((unsigned int *)v9 + 6);
        if ((_QWORD *)v22 != v20)
        {
          v23 = v20;
          v24 = v21;
          do
          {
            *(_QWORD *)&v72 = 0;
            *(_QWORD *)&v72 = *v23;
            v74 = 0;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v19, &v72, &v74) & 1) == 0)
            {
              v25 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>,llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>::InsertIntoBucketImpl<llvm::orc::MaterializationResponsibility *>((uint64_t)v19, &v72, v74);
              *v25 = v72;
            }
            while (++v23 != v24)
            {
              if ((*v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_28;
            }
            v23 = v24;
LABEL_28:
            ;
          }
          while (v23 != (_QWORD *)v22);
        }
      }
      else
      {
        MEMORY[0x24BD1B398](v10[1], 8);
        *v19 = 0;
        v10[2] = 0;
        *((_DWORD *)v10 + 6) = 0;
        v10[1] = v9[1];
        v9[1] = 0;
        *((_DWORD *)v10 + 4) = *((_DWORD *)v9 + 4);
        *((_DWORD *)v9 + 4) = 0;
        v28 = *((_DWORD *)v10 + 5);
        *((_DWORD *)v10 + 5) = *((_DWORD *)v9 + 5);
        *((_DWORD *)v9 + 5) = v28;
        v29 = *((_DWORD *)v10 + 6);
        *((_DWORD *)v10 + 6) = *((_DWORD *)v9 + 6);
        *((_DWORD *)v9 + 6) = v29;
      }
      v74 = (void **)a3;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::erase((uint64_t)this + 264, &v74);
    }
  }
  v30 = (llvm::orc::ResourceTracker *)*((_QWORD *)this + 29);
  if (v30 == (llvm::orc::ResourceTracker *)a2)
  {
    v74 = 0;
    {
      v50 = v74++;
      std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v74);
      *v50 = (void *)-8192;
LABEL_66:
      *((int32x2_t *)this + 31) = vadd_s32(*(int32x2_t *)((char *)this + 248), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  else if (v30 == a3)
  {
    v72 = 0uLL;
    v73 = 0;
    v70[0] = 0;
    v70[1] = 0;
    v71 = 0;
    v51 = (char *)this + 240;
    if (*((_DWORD *)this + 62))
    {
      v52 = *((unsigned int *)this + 64);
      if ((_DWORD)v52)
      {
        v53 = 32 * v52;
        v54 = (_QWORD *)*((_QWORD *)this + 30);
        while ((*v54 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v54 += 4;
          v53 -= 32;
          if (!v53)
            goto LABEL_72;
        }
      }
      else
      {
        v54 = (_QWORD *)*((_QWORD *)this + 30);
      }
      v60 = *((_QWORD *)this + 30) + 32 * v52;
LABEL_81:
      if (v54 != (_QWORD *)v60)
      {
        v61 = (uint64_t *)v54[1];
        v62 = (uint64_t *)v54[2];
        while (v61 != v62)
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v70, v61++, (uint64_t)&v74);
        while (1)
        {
          v54 += 4;
          if (v54 == (_QWORD *)v60)
            break;
          if ((*v54 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_81;
        }
      }
    }
LABEL_72:
    if (*((_DWORD *)this + 30))
    {
      v55 = *((_QWORD *)this + 14);
      v56 = *((unsigned int *)this + 32);
      if ((_DWORD)v56)
      {
        v57 = 24 * v56;
        v58 = (uint64_t *)*((_QWORD *)this + 14);
        while ((*v58 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v58 += 3;
          v57 -= 24;
          if (!v57)
            goto LABEL_77;
        }
      }
      else
      {
        v58 = (uint64_t *)*((_QWORD *)this + 14);
      }
      v63 = (uint64_t *)(v55 + 24 * v56);
LABEL_90:
      if (v58 != v63)
      {
        v74 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v70, v58, &v74) & 1) == 0)
        {
          v64 = *((_QWORD *)&v72 + 1);
          if (*((_QWORD *)&v72 + 1) >= v73)
          {
            v68 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)&v72, v58);
          }
          else
          {
            v65 = *v58;
            **((_QWORD **)&v72 + 1) = *v58;
            if ((unint64_t)(v65 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v66 = (unint64_t *)(v65 + 8);
              do
                v67 = __ldaxr(v66);
              while (__stlxr(v67 + 1, v66));
            }
            v68 = (char *)(v64 + 8);
          }
          *((_QWORD *)&v72 + 1) = v68;
        }
        while (1)
        {
          v58 += 3;
          if (v58 == v63)
            break;
          if ((*v58 | 8) != 0xFFFFFFFFFFFFFFF8)
            goto LABEL_90;
        }
      }
    }
LABEL_77:
    v74 = a2;
    v59 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::FindAndConstruct((uint64_t)v51, (uint64_t *)&v74);
    std::vector<llvm::orc::SymbolStringPtr>::__vdeallocate((void **)v59 + 1);
    *(_OWORD *)(v59 + 1) = v72;
    v59[3] = v73;
    v72 = 0uLL;
    v73 = 0;
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)v70);
    v74 = (void **)&v72;
    std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v74);
  }
  else
  {
    v74 = a2;
    v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::FindAndConstruct((uint64_t)this + 240, (uint64_t *)&v74);
    v74 = 0;
    {
      v32 = (int64x2_t *)(v31 + 1);
      v69 = v74;
      v33 = v74 + 1;
      std::vector<llvm::orc::SymbolStringPtr>::reserve((char **)v31 + 1, (((_BYTE *)v74[2] - (_BYTE *)v74[1]) >> 3) + ((v31[2] - v31[1]) >> 3));
      v34 = *v33;
      v35 = v33[1];
      if (*v33 != v35)
      {
        v36 = v31 + 3;
        v37 = (_QWORD *)v31[2];
        do
        {
          if ((unint64_t)v37 >= *v36)
          {
            v38 = ((uint64_t)v37 - v32->i64[0]) >> 3;
            if ((unint64_t)(v38 + 1) >> 61)
              abort();
            v39 = *v36 - v32->i64[0];
            v40 = v39 >> 2;
            if (v39 >> 2 <= (unint64_t)(v38 + 1))
              v40 = v38 + 1;
            if ((unint64_t)v39 >= 0x7FFFFFFFFFFFFFF8)
              v41 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v41 = v40;
            v77 = v31 + 3;
            if (v41)
              v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(v31 + 3), v41);
            else
              v42 = 0;
            v43 = &v42[8 * v38];
            v44 = &v42[8 * v41];
            v76 = v44;
            *(_QWORD *)v43 = 0;
            *(_QWORD *)v43 = *v34;
            v37 = v43 + 8;
            *v34 = 0;
            v75.i64[1] = (uint64_t)(v43 + 8);
            v46 = (_QWORD *)v31[1];
            v45 = (_QWORD *)v31[2];
            if (v45 == v46)
            {
              v48 = vdupq_n_s64((unint64_t)v45);
            }
            else
            {
              do
              {
                *((_QWORD *)v43 - 1) = 0;
                v43 -= 8;
                v47 = *--v45;
                *(_QWORD *)v43 = v47;
                *v45 = 0;
              }
              while (v45 != v46);
              v48 = *v32;
              v37 = (_QWORD *)v75.i64[1];
              v44 = v76;
            }
            v31[1] = (uint64_t)v43;
            v31[2] = (uint64_t)v37;
            v75 = v48;
            v49 = v31[3];
            v31[3] = (uint64_t)v44;
            v76 = (char *)v49;
            v74 = (void **)v48.i64[0];
            std::__split_buffer<llvm::orc::SymbolStringPtr>::~__split_buffer((uint64_t)&v74);
          }
          else
          {
            *v37 = 0;
            *v37++ = *v34;
            *v34 = 0;
          }
          v31[2] = (uint64_t)v37;
          ++v34;
        }
        while (v34 != v35);
      }
      v74 = v33;
      std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v74);
      *v69 = (void *)-8192;
      goto LABEL_66;
    }
  }
}

uint64_t std::vector<llvm::orc::SymbolStringPtr>::reserve(char **a1, unint64_t a2)
{
  uint64_t result;
  char *v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  int64x2_t v12;
  char *v13;
  uint64_t v14;
  int64x2_t v15;
  char *v16;
  uint64_t v17;

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 3)
  {
    if (a2 >> 61)
      abort();
    v5 = a1[1] - *a1;
    v17 = result;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(result, a2);
    v9 = *a1;
    v8 = a1[1];
    if (v8 == *a1)
    {
      v12 = vdupq_n_s64((unint64_t)v8);
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    }
    else
    {
      v10 = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
      do
      {
        *((_QWORD *)v10 - 1) = 0;
        v10 -= 8;
        v11 = *((_QWORD *)v8 - 1);
        v8 -= 8;
        *(_QWORD *)v10 = v11;
        *(_QWORD *)v8 = 0;
      }
      while (v8 != v9);
      v12 = *(int64x2_t *)a1;
    }
    *a1 = v10;
    a1[1] = &v6[v5 & 0xFFFFFFFFFFFFFFF8];
    v15 = v12;
    v13 = a1[2];
    a1[2] = &v6[8 * v7];
    v16 = v13;
    v14 = v12.i64[0];
    return std::__split_buffer<llvm::orc::SymbolStringPtr>::~__split_buffer((uint64_t)&v14);
  }
  return result;
}

uint64_t llvm::orc::JITDylib::defineImpl@<X0>(llvm::orc::JITDylib *this@<X0>, llvm::orc::MaterializationUnit *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  char *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  char *v20;
  size_t **v21;
  uint64_t v22;
  size_t v23;
  const void *v24;
  void **p_dst;
  char *v26;
  char *v27;
  char *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  void **v40;
  void **v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  unint64_t v57;
  size_t **v58;
  uint64_t v59;
  unsigned int v60;
  char **__dst;
  __int128 v62;

  v58 = 0;
  v59 = 0;
  v60 = 0;
  v55 = 0;
  v56 = 0;
  v57 = 0;
  v52 = 0;
  v53 = 0;
  v54 = 0;
  if (*((_DWORD *)a2 + 4))
  {
    v6 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v6)
    {
      v7 = 16 * v6;
      v8 = *((_QWORD *)a2 + 1);
      while ((*(_QWORD *)v8 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v8 += 16;
        v7 -= 16;
        if (!v7)
          goto LABEL_48;
      }
    }
    else
    {
      v8 = *((_QWORD *)a2 + 1);
    }
    v9 = *((_QWORD *)a2 + 1) + 16 * v6;
    if (v8 != v9)
    {
LABEL_9:
      __dst = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*((_QWORD *)this + 14), *((_DWORD *)this + 32), *(_QWORD *)v8, &__dst))v10 = __dst == (char **)(*((_QWORD *)this + 14) + 24 * *((unsigned int *)this + 32));
      else
        v10 = 1;
      if (!v10)
      {
        if ((*(_BYTE *)(v8 + 9) & 6) != 0)
        {
          v11 = v53;
          if ((unint64_t)v53 >= v54)
          {
            v15 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>(&v52, (uint64_t *)v8);
          }
          else
          {
            v12 = *(_QWORD *)v8;
            *(_QWORD *)v53 = *(_QWORD *)v8;
            if ((unint64_t)(v12 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v13 = (unint64_t *)(v12 + 8);
              do
                v14 = __ldaxr(v13);
              while (__stlxr(v14 + 1, v13));
            }
            v15 = v11 + 8;
          }
          v53 = v15;
        }
        else if (((_WORD)__dst[2] & 0x600) != 0 && (*((_BYTE *)__dst + 18) & 0x7E) == 0)
        {
          v16 = v56;
          if ((unint64_t)v56 >= v57)
          {
            v20 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>(&v55, (uint64_t *)v8);
          }
          else
          {
            v17 = *(_QWORD *)v8;
            *(_QWORD *)v56 = *(_QWORD *)v8;
            if ((unint64_t)(v17 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v18 = (unint64_t *)(v17 + 8);
              do
                v19 = __ldaxr(v18);
              while (__stlxr(v19 + 1, v18));
            }
            v20 = v16 + 8;
          }
          v56 = v20;
        }
        else
        {
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v58, (uint64_t *)v8, (uint64_t)&__dst);
        }
      }
      while (1)
      {
        v8 += 16;
        if (v8 == v9)
          break;
        if ((*(_QWORD *)v8 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v8 != v9)
            goto LABEL_9;
          break;
        }
      }
      if ((_DWORD)v59)
      {
        v21 = v58;
        if (v60)
        {
          v22 = 8 * v60;
          while (((unint64_t)*v21 | 8) == 0xFFFFFFFFFFFFFFF8)
          {
            ++v21;
            v22 -= 8;
            if (!v22)
            {
              v21 = &v58[v60];
              break;
            }
          }
        }
        v24 = *v21 + 2;
        v23 = **v21;
        if (v23 >= 0x7FFFFFFFFFFFFFF8)
          abort();
        if (v23 >= 0x17)
        {
          v48 = (v23 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v23 | 7) != 0x17)
            v48 = v23 | 7;
          v49 = v48 + 1;
          p_dst = (void **)operator new(v48 + 1);
          *(_QWORD *)&v62 = v23;
          *((_QWORD *)&v62 + 1) = v49 | 0x8000000000000000;
          __dst = (char **)p_dst;
        }
        else
        {
          HIBYTE(v62) = **v21;
          p_dst = (void **)&__dst;
          if (!v23)
            goto LABEL_79;
        }
        memmove(p_dst, v24, v23);
LABEL_79:
        *((_BYTE *)p_dst + v23) = 0;
        v50 = operator new();
        v51 = v62;
        *(_QWORD *)(v50 + 8) = __dst;
        *(_QWORD *)(v50 + 16) = v51;
        *(_QWORD *)(v50 + 23) = *(_QWORD *)((char *)&v62 + 7);
        LOBYTE(v51) = HIBYTE(v62);
        *(_QWORD *)v50 = off_251C167C8;
        *(_BYTE *)(v50 + 31) = v51;
        *a3 = v50;
        goto LABEL_74;
      }
      v26 = v52;
      v27 = v53;
      while (v26 != v27)
      {
        llvm::orc::MaterializationUnit::doDiscard(a2, (uint64_t)this, v26);
        v26 += 8;
      }
    }
  }
LABEL_48:
  v28 = v55;
  v29 = (uint64_t *)v56;
  if (v55 != v56)
  {
    v30 = (uint64_t *)v55;
    do
    {
      __dst = 0;
      v31 = *v30++;
      v32 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*((_QWORD *)this + 17), *((_DWORD *)this + 38), v31, &__dst);
      v33 = (void **)__dst;
      if (!v32)
        v33 = (void **)(*((_QWORD *)this + 17) + 24 * *((unsigned int *)this + 38));
      llvm::orc::MaterializationUnit::doDiscard(*(_QWORD **)v33[1], (uint64_t)this, v28);
      v28 = (char *)v30;
    }
    while (v30 != v29);
  }
  if (*((_DWORD *)a2 + 4))
  {
    v34 = *((_QWORD *)a2 + 1);
    v35 = *((unsigned int *)a2 + 6);
    if ((_DWORD)v35)
    {
      v36 = 16 * v35;
      v37 = *((_QWORD *)a2 + 1);
      while ((*(_QWORD *)v37 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v37 += 16;
        v36 -= 16;
        if (!v36)
          goto LABEL_73;
      }
    }
    else
    {
      v37 = *((_QWORD *)a2 + 1);
    }
    v38 = v34 + 16 * v35;
    if (v37 != v38)
    {
LABEL_61:
      __dst = 0;
      v39 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*((_QWORD *)this + 14), *((_DWORD *)this + 32), *(_QWORD *)v37, &__dst);
      v40 = (void **)__dst;
      if ((v39 & 1) == 0)
      {
        v41 = (void **)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>((uint64_t)this + 112, (uint64_t *)v37, __dst);
        v40 = v41;
        if ((char *)*v41 - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL)
        {
          v42 = (unint64_t *)((char *)*v41 + 8);
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
        }
        v44 = *(_QWORD *)v37;
        *v41 = *(void **)v37;
        if ((unint64_t)(v44 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v45 = (unint64_t *)(v44 + 8);
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 + 1, v45));
        }
        v41[1] = 0;
        v41[2] = 0;
      }
      *((_WORD *)v40 + 8) = *(_WORD *)(v37 + 8);
      *((_BYTE *)v40 + 18) = -127;
      while (1)
      {
        v37 += 16;
        if (v37 == v38)
          break;
        if ((*(_QWORD *)v37 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v37 != v38)
            goto LABEL_61;
          break;
        }
      }
    }
  }
LABEL_73:
  *a3 = 0;
LABEL_74:
  __dst = &v52;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&__dst);
  __dst = &v55;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&__dst);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v58);
}

uint64_t llvm::orc::MaterializationUnit::doDiscard(_QWORD *a1, uint64_t a2, _QWORD *a3)
{
  __n128 v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  v6.n128_u64[0] = (unint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::erase((uint64_t)(a1 + 1), a3);
  v7 = a1[4];
  if (v7 == *a3)
  {
    if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v8 = (unint64_t *)(v7 + 8);
      do
        v9 = __ldaxr(v8);
      while (__stlxr(v9 - 1, v8));
    }
    a1[4] = 0;
  }
  return (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD *, __n128))(*a1 + 40))(a1, a2, a3, v6);
}

void llvm::orc::JITDylib::installMaterializationUnit(uint64_t a1, std::__shared_weak_count_vtbl **a2, uint64_t a3)
{
  uint64_t *v6;
  std::__shared_weak_count_vtbl *v7;
  uint64_t *v8;
  uint64_t get_deleter_low;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  char *v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  std::__shared_weak_count_vtbl *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t v28;

  if (*(_QWORD *)(a1 + 232) != a3)
  {
    v28 = a3;
    v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::FindAndConstruct(a1 + 240, &v28);
    std::vector<llvm::orc::SymbolStringPtr>::reserve((char **)v6 + 1, LODWORD((*a2)->__on_zero_shared) + ((v6[2] - v6[1]) >> 3));
    v7 = *a2;
    if (LODWORD((*a2)->__on_zero_shared))
    {
      v8 = (uint64_t *)v7->~__shared_weak_count_0;
      get_deleter_low = LODWORD(v7->__get_deleter);
      if ((_DWORD)get_deleter_low)
      {
        v10 = 16 * get_deleter_low;
        v11 = v8;
        while ((*v11 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v11 += 2;
          v10 -= 16;
          if (!v10)
            goto LABEL_21;
        }
      }
      else
      {
        v11 = v8;
      }
      v12 = &v8[2 * get_deleter_low];
      if (v11 != v12)
      {
        v13 = (char *)v6[2];
LABEL_11:
        if ((unint64_t)v13 >= v6[3])
        {
          v13 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)v6 + 1, v11);
        }
        else
        {
          v14 = *v11;
          *(_QWORD *)v13 = *v11;
          if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v15 = (unint64_t *)(v14 + 8);
            do
              v16 = __ldaxr(v15);
            while (__stlxr(v16 + 1, v15));
          }
          v13 += 8;
        }
        v6[2] = (uint64_t)v13;
        while (1)
        {
          v11 += 2;
          if (v11 == v12)
            break;
          if ((*v11 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (v11 != v12)
              goto LABEL_11;
            break;
          }
        }
      }
    }
  }
LABEL_21:
  v17 = (std::__shared_weak_count *)operator new(0x28uLL);
  v17->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  v17->__shared_weak_owners_ = 0;
  v17->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14958;
  v19 = *a2;
  v17[1].__vftable = *a2;
  *a2 = 0;
  v17[1].__shared_owners_ = a3;
  if (LODWORD(v19->__on_zero_shared))
  {
    v20 = (uint64_t *)v19->~__shared_weak_count_0;
    v21 = LODWORD(v19->__get_deleter);
    if ((_DWORD)v21)
    {
      v22 = 16 * v21;
      v23 = v20;
      while ((*v23 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v23 += 2;
        v22 -= 16;
        if (!v22)
          goto LABEL_34;
      }
    }
    else
    {
      v23 = v20;
    }
    v24 = &v20[2 * v21];
    if (v23 != v24)
    {
      v25 = a1 + 136;
LABEL_30:
      v26 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::FindAndConstruct(v25, v23);
      std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>::operator=[abi:nn180100](v26 + 1, (uint64_t)&v17[1], (uint64_t)v17);
      while (1)
      {
        v23 += 2;
        if (v23 == v24)
          break;
        if ((*v23 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v23 != v24)
            goto LABEL_30;
          goto LABEL_34;
        }
      }
    }
  }
  do
LABEL_34:
    v27 = __ldaxr(p_shared_owners);
  while (__stlxr(v27 - 1, p_shared_owners));
  if (!v27)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
}

_QWORD *std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>::operator=[abi:nn180100](_QWORD *a1, uint64_t a2, uint64_t a3)
{
  unint64_t *v4;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  if (a3)
  {
    v4 = (unint64_t *)(a3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  v6 = (std::__shared_weak_count *)a1[1];
  *a1 = a2;
  a1[1] = a3;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  return a1;
}

void llvm::orc::Platform::lookupInitSymbolsAsync(__int128 *a1, llvm::orc::ExecutionSession *a2, uint64_t **a3)
{
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20;
  uint64_t v21;
  void *__p;
  void *v23;
  char *v24;
  void **v25;
  _QWORD v26[3];
  _QWORD *v27;
  __int128 v28;
  char *v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v6 = (std::__shared_weak_count *)operator new(0x80uLL);
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_251C149C8;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v30, a1);
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)850045863;
  *(_OWORD *)&v6[1].__shared_owners_ = 0u;
  v6[2].std::__shared_count = 0u;
  *(_OWORD *)&v6[2].__shared_weak_owners_ = 0u;
  *(_OWORD *)&v6[3].__shared_owners_ = 0u;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v6[4], &v30);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v30);
  if (*((_DWORD *)a3 + 2))
  {
    v8 = *((unsigned int *)a3 + 4);
    if ((_DWORD)v8)
    {
      v9 = 32 * v8;
      v10 = *a3;
      while ((*v10 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v10 += 4;
        v9 -= 32;
        if (!v9)
          goto LABEL_23;
      }
    }
    else
    {
      v10 = *a3;
    }
    v11 = (uint64_t)&(*a3)[4 * v8];
    if (v10 != (uint64_t *)v11)
    {
      v12 = *v10;
LABEL_10:
      v31 = 0;
      v30 = 0uLL;
      std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*>((char *)&v30, (uint64_t *)v10[1], (uint64_t *)v10[2], (v10[2] - v10[1]) >> 4);
      v13 = operator new(0x10uLL);
      v23 = v13 + 4;
      v24 = (char *)(v13 + 4);
      *(_QWORD *)v13 = v12;
      v13[2] = 1;
      __p = v13;
      v20 = v30;
      v21 = v31;
      v30 = 0uLL;
      v31 = 0;
      do
        v14 = __ldxr(p_shared_owners);
      while (__stxr(v14 + 1, p_shared_owners));
      *(_QWORD *)&v28 = v6 + 1;
      *((_QWORD *)&v28 + 1) = v6;
      v29 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallbacksHolder<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::$_0,llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::$_0,void>::Callbacks
          + 6;
      std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v26, (uint64_t)&llvm::orc::NoDependenciesToRegister);
      llvm::orc::ExecutionSession::lookup(a2, 0, (__int128 **)&__p, (uint64_t)&v20, 63, &v28, v26);
      v17 = v27;
      if (v27 == v26)
      {
        v17 = v26;
        v18 = 4;
      }
      else
      {
        if (!v27)
          goto LABEL_17;
        v18 = 5;
      }
      (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v17 + 8 * v18))(v17, v15, v16);
LABEL_17:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v28);
      v25 = (void **)&v20;
      std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v25);
      if (__p)
      {
        v23 = __p;
        operator delete(__p);
      }
      __p = &v30;
      std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&__p);
      while (1)
      {
        v10 += 4;
        if (v10 == (uint64_t *)v11)
          goto LABEL_23;
        v12 = *v10;
        if ((*v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v10 != (uint64_t *)v11)
            goto LABEL_10;
          goto LABEL_23;
        }
      }
    }
  }
  do
LABEL_23:
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
}

llvm::raw_ostream *llvm::orc::MaterializationTask::printDescription(llvm::orc::MaterializationTask *this, llvm::raw_ostream *a2)
{
  void *v4;
  const void *v5;
  size_t v6;
  llvm::raw_ostream *v7;
  _DWORD *v8;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  const char *v12;
  int v13;
  const char *v14;
  size_t v15;

  v4 = (void *)*((_QWORD *)a2 + 4);
  if (*((_QWORD *)a2 + 3) - (_QWORD)v4 > 0x15uLL)
  {
    qmemcpy(v4, "Materialization task: ", 22);
    *((_QWORD *)a2 + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(a2, "Materialization task: ", 0x16uLL);
  }
  v5 = (const void *)(*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 16))(*((_QWORD *)this + 1));
  v7 = llvm::raw_ostream::operator<<(a2, v5, v6);
  v8 = (_DWORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 3uLL)
  {
    *v8 = 544106784;
    *((_QWORD *)v7 + 4) += 4;
  }
  else
  {
    v7 = llvm::raw_ostream::write(v7, " in ", 4uLL);
  }
  v9 = **((_QWORD **)this + 2);
  v12 = *(const char **)(v9 + 8);
  v10 = v9 + 8;
  v11 = v12;
  v13 = *(char *)(v10 + 23);
  if (v13 >= 0)
    v14 = (const char *)v10;
  else
    v14 = v11;
  if (v13 >= 0)
    v15 = *(unsigned __int8 *)(v10 + 23);
  else
    v15 = *(_QWORD *)(v10 + 8);
  return llvm::raw_ostream::write(v7, v14, v15);
}

void llvm::orc::MaterializationTask::run(llvm::orc::MaterializationTask *this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;

  v1 = *((_QWORD *)this + 1);
  v2 = (uint64_t *)*((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  v4 = v2;
  (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v1 + 24))(v1, &v4);
  v3 = v4;
  v4 = 0;
  if (v3)
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v4, v3);
}

llvm::raw_ostream *llvm::orc::LookupTask::printDescription(llvm::orc::LookupTask *this, llvm::raw_ostream *a2)
{
  uint64_t v2;
  llvm::raw_ostream *result;

  v2 = *((_QWORD *)a2 + 4);
  if ((unint64_t)(*((_QWORD *)a2 + 3) - v2) <= 0xA)
    return llvm::raw_ostream::write(a2, "Lookup task", 0xBuLL);
  *(_DWORD *)(v2 + 7) = 1802723700;
  *(_QWORD *)v2 = *(_QWORD *)"Lookup task";
  *((_QWORD *)a2 + 4) += 11;
  return result;
}

llvm::orc::InProgressLookupState *llvm::orc::LookupTask::run(llvm::orc::InProgressLookupState **this)
{
  llvm::orc::InProgressLookupState *result;
  llvm::orc::InProgressLookupState *v2;

  v2 = 0;
  llvm::orc::LookupState::continueLookup(this + 1, &v2);
  result = v2;
  if (v2)
    return (llvm::orc::InProgressLookupState *)(*(uint64_t (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v2 + 8))(v2);
  return result;
}

uint64_t llvm::orc::ExecutionSession::ExecutionSession(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = MEMORY[0x24BD1B224]();
  *(_BYTE *)(v4 + 64) = 1;
  v5 = *a2;
  *a2 = 0;
  *(_QWORD *)(v4 + 72) = v5;
  *(_QWORD *)(v4 + 80) = 0;
  *(_QWORD *)(v4 + 88) = llvm::orc::ExecutionSession::logErrorsToStdErr;
  *(_QWORD *)(v4 + 112) = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<void (*)(llvm::Error),void (*)(llvm::Error),void>::Callbacks
                        + 2;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  MEMORY[0x24BD1B224](v4 + 168);
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = 0;
  *(_QWORD *)(a1 + 256) = 850045863;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_QWORD *)(*(_QWORD *)(a1 + 72) + 32) = a1;
  return a1;
}

_QWORD *llvm::orc::ExecutionSession::logErrorsToStdErr(llvm *a1)
{
  llvm::raw_ostream *v1;
  _QWORD *result;
  const char *v3;
  __int16 v4;
  _QWORD *v5;

  v5 = *(_QWORD **)a1;
  *(_QWORD *)a1 = 0;
  v1 = (llvm::raw_ostream *)llvm::errs(a1);
  v3 = "JIT session error: ";
  v4 = 259;
  llvm::logAllUnhandledErrors(&v5, v1, (llvm::Twine *)&v3);
  result = v5;
  if (v5)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  return result;
}

void llvm::orc::ExecutionSession::~ExecutionSession(llvm::orc::ExecutionSession *this)
{
  void *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::destroyAll((uint64_t)this + 320);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 40), 8);
  std::mutex::~mutex((std::mutex *)this + 4);
  v5 = (void **)((char *)this + 232);
  std::vector<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>>::__destroy_vector::operator()[abi:nn180100](&v5);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)((char *)this + 168));
  v5 = (void **)((char *)this + 144);
  std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__destroy_vector::operator()[abi:nn180100](&v5);
  v2 = (void *)*((_QWORD *)this + 15);
  if (v2)
  {
    *((_QWORD *)this + 16) = v2;
    operator delete(v2);
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)this + 11);
  v3 = *((_QWORD *)this + 10);
  *((_QWORD *)this + 10) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 9);
  *((_QWORD *)this + 9) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)this);
}

void llvm::orc::ExecutionSession::endSession(llvm::orc::ExecutionSession *this@<X0>, void ***a2@<X8>)
{
  void **v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  __int128 v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;

  std::recursive_mutex::lock((std::recursive_mutex *)this);
  *((_BYTE *)this + 64) = 0;
  v11 = 0;
  v10 = 0uLL;
  std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__init_with_size[abi:nn180100]<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>*,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>*>((char *)&v10, *((unsigned int ***)this + 18), *((unsigned int ***)this + 19), (uint64_t)(*((_QWORD *)this + 19) - *((_QWORD *)this + 18)) >> 3);
  std::recursive_mutex::unlock((std::recursive_mutex *)this);
  std::__reverse[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib> *>,std::__wrap_iter<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib> *>>((unsigned int *)v10, *((unsigned int **)&v10 + 1));
  v8 = v10;
  v9 = v11;
  v11 = 0;
  v10 = 0uLL;
  llvm::orc::ExecutionSession::removeJITDylibs((uint64_t)this, (unsigned int ***)&v8, a2);
  v13 = (void **)&v8;
  std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__destroy_vector::operator()[abi:nn180100](&v13);
  v4 = *a2;
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 9) + 64))(&v6);
  v12 = v6;
  v13 = v4;
  v6 = 0;
  llvm::ErrorList::join((uint64_t *)&v13, &v12, (uint64_t *)&v7);
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  if (v13)
    (*((void (**)(void **))*v13 + 1))(v13);
  v5 = v6;
  *a2 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v13 = (void **)&v10;
  std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__destroy_vector::operator()[abi:nn180100](&v13);
}

void llvm::orc::ExecutionSession::removeJITDylibs(uint64_t a1@<X0>, unsigned int ***a2@<X1>, _QWORD *a3@<X8>)
{
  unsigned int **v6;
  unsigned int **v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned int *v10;
  _QWORD *v11;
  unsigned int *v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int **v15;
  unsigned int **v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int v19;
  uint64_t v20;
  unsigned int **i;
  unsigned int **v22;
  unsigned int *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  v6 = *a2;
  v7 = a2[1];
  if (*a2 != v7)
  {
    v8 = *(_QWORD **)(a1 + 152);
    v9 = v8;
    do
    {
      v10 = *v6;
      (*v6)[10] = 1;
      if (*(_QWORD **)(a1 + 144) != v8)
      {
        v9 = *(_QWORD **)(a1 + 144);
        while ((unsigned int *)*v9 != v10)
        {
          if (++v9 == v8)
          {
            v9 = v8;
            break;
          }
        }
      }
      v11 = v9 + 1;
      if (v9 + 1 != v8)
      {
        do
        {
          v12 = (unsigned int *)*(v11 - 1);
          *(v11 - 1) = *v11;
          *v11 = 0;
          if (v12)
            llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v12);
          ++v11;
        }
        while (v11 != v8);
        v8 = *(_QWORD **)(a1 + 152);
        v9 = v11 - 1;
      }
      while (v8 != v9)
      {
        v14 = (unsigned int *)*--v8;
        v13 = v14;
        if (v14)
          llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v13);
      }
      *(_QWORD *)(a1 + 152) = v9;
      ++v6;
      v8 = v9;
    }
    while (v6 != v7);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  *a3 = 0;
  v15 = *a2;
  v16 = a2[1];
  if (*a2 != v16)
  {
    v17 = 0;
    do
    {
      v18 = *v15;
      if (*v15)
      {
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      llvm::orc::JITDylib::clear((llvm::orc::JITDylib *)v18, &v28);
      v30 = v28;
      v31 = v17;
      v28 = 0;
      llvm::ErrorList::join(&v31, &v30, &v29);
      if (v30)
        (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      v17 = v29;
      *a3 = v29;
      v20 = *(_QWORD *)(a1 + 80);
      if (v20)
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, unsigned int *))(*(_QWORD *)v20 + 24))(&v27, v20, v18);
        v30 = v27;
        v31 = v17;
        v27 = 0;
        llvm::ErrorList::join(&v31, &v30, &v29);
        if (v30)
          (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
        v17 = v29;
        *a3 = v29;
        v29 = 0;
        if (v27)
          (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
      }
      if (v18)
        llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v18);
      ++v15;
    }
    while (v15 != v16);
  }
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  v22 = *a2;
  for (i = a2[1]; v22 != i; ++v22)
  {
    v23 = *v22;
    v23[10] = 2;
    v25 = *((_QWORD *)v23 + 23);
    v24 = *((_QWORD *)v23 + 24);
    v26 = v23;
    if (v24 != v25)
    {
      do
        v24 = std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](v24 - 16);
      while (v24 != v25);
      v26 = *v22;
    }
    *((_QWORD *)v23 + 24) = v25;
    *((_QWORD *)v26 + 27) = *((_QWORD *)v26 + 26);
  }
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
}

void llvm::orc::ExecutionSession::registerResourceManager(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;

  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  v4 = *(_QWORD *)(a1 + 136);
  v5 = *(_QWORD **)(a1 + 128);
  if ((unint64_t)v5 >= v4)
  {
    v7 = *(_QWORD *)(a1 + 120);
    v8 = ((uint64_t)v5 - v7) >> 3;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v9 = v4 - v7;
    v10 = v9 >> 2;
    if (v9 >> 2 <= (unint64_t)(v8 + 1))
      v10 = v8 + 1;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v10;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(a1 + 136, v11);
    else
      v12 = 0;
    v13 = &v12[8 * v8];
    v14 = &v12[8 * v11];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    v16 = *(char **)(a1 + 120);
    v15 = *(char **)(a1 + 128);
    if (v15 != v16)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        *((_QWORD *)v13 - 1) = v17;
        v13 -= 8;
      }
      while (v15 != v16);
      v15 = *(char **)(a1 + 120);
    }
    *(_QWORD *)(a1 + 120) = v13;
    *(_QWORD *)(a1 + 128) = v6;
    *(_QWORD *)(a1 + 136) = v14;
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  *(_QWORD *)(a1 + 128) = v6;
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
}

void llvm::orc::ExecutionSession::deregisterResourceManager(uint64_t a1, uint64_t a2)
{
  char *v4;
  char *v5;
  char *i;
  int64_t v7;

  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  v4 = *(char **)(a1 + 128);
  v5 = v4 - 8;
  if (*((_QWORD *)v4 - 1) != a2)
  {
    for (i = *(char **)(a1 + 120); i != v4; i += 8)
    {
      if (*(_QWORD *)i == a2)
        goto LABEL_7;
    }
    i = *(char **)(a1 + 128);
LABEL_7:
    v7 = v4 - (i + 8);
    if (v4 != i + 8)
      memmove(i, i + 8, v4 - (i + 8));
    v5 = &i[v7];
  }
  *(_QWORD *)(a1 + 128) = v5;
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
}

uint64_t llvm::orc::ExecutionSession::createBareJITDylib(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  unint64_t v11;
  uint64_t *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  uint64_t v22;
  __int128 v23;
  char *v24;
  uint64_t v25;
  uint64_t v27;
  __int128 v28;
  char *v29;
  uint64_t v30;
  _QWORD v31[3];

  v31[2] = *MEMORY[0x24BDAC8D0];
  std::recursive_mutex::lock((std::recursive_mutex *)a1);
  v4 = operator new();
  *(_QWORD *)((char *)v31 + 7) = *(uint64_t *)((char *)a2 + 15);
  v5 = *a2;
  v31[0] = a2[1];
  v6 = *((_BYTE *)a2 + 23);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  *(_DWORD *)v4 = 0;
  v7 = v31[0];
  v8 = *(_QWORD *)((char *)v31 + 7);
  *(_QWORD *)(v4 + 8) = v5;
  *(_QWORD *)(v4 + 16) = v7;
  *(_QWORD *)(v4 + 23) = v8;
  memset(v31, 0, 15);
  *(_BYTE *)(v4 + 31) = v6;
  *(_QWORD *)(v4 + 32) = a1;
  *(_DWORD *)(v4 + 40) = 0;
  *(_QWORD *)(v4 + 48) = 850045863;
  *(_QWORD *)(v4 + 136) = 0;
  *(_QWORD *)(v4 + 144) = 0;
  *(_DWORD *)(v4 + 152) = 0;
  *(_QWORD *)(v4 + 160) = 0;
  *(_QWORD *)(v4 + 168) = 0;
  *(_DWORD *)(v4 + 176) = 0;
  *(_QWORD *)(v4 + 264) = 0;
  *(_QWORD *)(v4 + 272) = 0;
  *(_DWORD *)(v4 + 280) = 0;
  *(_OWORD *)(v4 + 116) = 0u;
  *(_OWORD *)(v4 + 104) = 0u;
  *(_OWORD *)(v4 + 88) = 0u;
  *(_OWORD *)(v4 + 72) = 0u;
  *(_OWORD *)(v4 + 56) = 0u;
  *(_OWORD *)(v4 + 244) = 0u;
  *(_OWORD *)(v4 + 232) = 0u;
  *(_OWORD *)(v4 + 216) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  v9 = operator new(0x10uLL);
  *(_QWORD *)v9 = v4;
  v9[2] = 1;
  *(_QWORD *)(v4 + 216) = v9 + 4;
  *(_QWORD *)(v4 + 224) = v9 + 4;
  *(_QWORD *)(v4 + 208) = v9;
  do
    v10 = __ldxr((unsigned int *)v4);
  while (__stxr(v10 + 1, (unsigned int *)v4));
  v11 = *(_QWORD *)(a1 + 160);
  v12 = *(uint64_t **)(a1 + 152);
  if ((unint64_t)v12 >= v11)
  {
    v14 = *(_QWORD **)(a1 + 144);
    v15 = v12 - v14;
    v16 = v15 + 1;
    if ((unint64_t)(v15 + 1) >> 61)
      abort();
    v17 = v11 - (_QWORD)v14;
    if (v17 >> 2 > v16)
      v16 = v17 >> 2;
    if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      v18 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v18 = v16;
    v30 = a1 + 160;
    if (v18)
    {
      v19 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(a1 + 160, v18);
      v14 = *(_QWORD **)(a1 + 144);
      v12 = *(uint64_t **)(a1 + 152);
    }
    else
    {
      v19 = 0;
    }
    v20 = (uint64_t *)&v19[8 * v15];
    v21 = &v19[8 * v18];
    v29 = v21;
    *v20 = v4;
    *((_QWORD *)&v28 + 1) = v20 + 1;
    if (v12 == v14)
    {
      v13 = v20 + 1;
    }
    else
    {
      do
      {
        v22 = *--v12;
        *--v20 = v22;
        *v12 = 0;
      }
      while (v12 != v14);
      v13 = (_QWORD *)*((_QWORD *)&v28 + 1);
      v21 = v29;
    }
    v23 = *(_OWORD *)(a1 + 144);
    *(_QWORD *)(a1 + 144) = v20;
    *(_QWORD *)(a1 + 152) = v13;
    v28 = v23;
    v24 = *(char **)(a1 + 160);
    *(_QWORD *)(a1 + 160) = v21;
    v29 = v24;
    v27 = v23;
    std::__split_buffer<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::~__split_buffer((uint64_t)&v27);
  }
  else
  {
    *v12 = v4;
    v13 = v12 + 1;
  }
  *(_QWORD *)(a1 + 152) = v13;
  v25 = *(v13 - 1);
  std::recursive_mutex::unlock((std::recursive_mutex *)a1);
  return v25;
}

_QWORD *llvm::orc::ExecutionSession::createJITDylib@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t BareJITDylib;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  std::string v9;

  if (*(char *)(a2 + 23) < 0)
    std::string::__init_copy_ctor_external(&v9, *(const std::string::value_type **)a2, *(_QWORD *)(a2 + 8));
  else
    v9 = *(std::string *)a2;
  BareJITDylib = llvm::orc::ExecutionSession::createBareJITDylib(a1, (uint64_t *)&v9);
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v9.__r_.__value_.__l.__data_);
  result = *(_QWORD **)(a1 + 80);
  if (result
    && (result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD *, uint64_t))(*result + 16))(&v8, result, BareJITDylib), (v7 = v8) != 0))
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = BareJITDylib;
  }
  return result;
}

uint64_t *llvm::orc::ExecutionSession::dispatchOutstandingMUs(llvm::orc::ExecutionSession *this)
{
  std::recursive_mutex *v2;
  char *v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v15;
  char v16;
  uint64_t v17;

  v2 = (std::recursive_mutex *)((char *)this + 168);
  v3 = (char *)this + 248;
  while (1)
  {
    LOBYTE(v15) = 0;
    v16 = 0;
    std::recursive_mutex::lock(v2);
    v4 = *((_QWORD *)this + 30);
    if (*((_QWORD *)this + 29) != v4)
    {
      if (v16)
      {
        v5 = (uint64_t *)*((_QWORD *)&v15 + 1);
        *((_QWORD *)&v15 + 1) = 0;
        if (v5)
          std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v15 + 8, v5);
        v6 = v15;
        *(_QWORD *)&v15 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
      v7 = *(_QWORD *)(v4 - 16);
      *(_QWORD *)(v4 - 16) = 0;
      *(_QWORD *)&v15 = v7;
      v8 = *(_QWORD *)(v4 - 8);
      *(_QWORD *)(v4 - 8) = 0;
      *((_QWORD *)&v15 + 1) = v8;
      v16 = 1;
      v9 = (uint64_t *)(*((_QWORD *)this + 30) - 16);
      std::allocator<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>>::destroy[abi:nn180100]((uint64_t)v3, v9);
      *((_QWORD *)this + 30) = v9;
    }
    std::recursive_mutex::unlock(v2);
    if (!v16)
      break;
    v10 = operator new();
    *(_QWORD *)v10 = &off_251C14800;
    v11 = v15;
    v15 = 0uLL;
    *(_OWORD *)(v10 + 8) = v11;
    v12 = *(_QWORD *)(*((_QWORD *)this + 9) + 24);
    v17 = v10;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v12 + 16))(v12, &v17);
    v13 = v17;
    v17 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    std::__optional_destruct_base<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t *)&v15);
  }
  return std::__optional_destruct_base<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>,false>::~__optional_destruct_base[abi:nn180100]((uint64_t *)&v15);
}

void std::make_unique[abi:nn180100]<llvm::orc::InProgressFullLookupState,llvm::orc::LookupKind &,std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>> const&,llvm::orc::SymbolLookupSet,llvm::orc::SymbolState &,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::function<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>>(int *a1@<X0>, __int128 **a2@<X1>, __int128 *a3@<X2>, char *a4@<X3>, __int128 *a5@<X4>, _QWORD *a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v14;
  int v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  _QWORD *v19;
  _QWORD *v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  void *v24[3];
  void *v25[2];
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  void *__p[2];
  uint64_t v30;
  void **v31;
  _QWORD v32[3];
  _QWORD *v33;
  uint64_t v34;

  v34 = *MEMORY[0x24BDAC8D0];
  v14 = operator new();
  v15 = *a1;
  v25[1] = 0;
  v26 = 0;
  v25[0] = 0;
  std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*,std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*>((char *)v25, *a2, a2[1], a2[1] - *a2);
  v16 = *a3;
  v17 = *((_QWORD *)a3 + 2);
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  v18 = *a4;
  v23 = *a5;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  v19 = (_QWORD *)a6[3];
  if (v19)
  {
    if (v19 == a6)
    {
      v33 = v32;
      v22 = v16;
      (*(void (**)(_QWORD *, _QWORD *))(*a6 + 24))(a6, v32);
      v16 = v22;
    }
    else
    {
      v33 = (_QWORD *)a6[3];
      a6[3] = 0;
    }
  }
  else
  {
    v33 = 0;
  }
  *(_OWORD *)__p = *(_OWORD *)v25;
  v30 = v26;
  v25[0] = 0;
  v25[1] = 0;
  v26 = 0;
  v27 = v16;
  v28 = v17;
  memset(v24, 0, sizeof(v24));
  llvm::orc::InProgressLookupState::InProgressLookupState(v14, v15, (uint64_t)__p, (uint64_t)&v27, v18);
  v31 = (void **)&v27;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v31);
  if (__p[0])
    operator delete(__p[0]);
  *(_QWORD *)v14 = &off_251C14A68;
  *(_OWORD *)(v14 + 168) = v23;
  if (!v33)
  {
    *(_QWORD *)(v14 + 208) = 0;
    goto LABEL_12;
  }
  if (v33 != v32)
  {
    *(_QWORD *)(v14 + 208) = v33;
    v33 = 0;
LABEL_12:
    *a7 = v14;
    goto LABEL_13;
  }
  *(_QWORD *)(v14 + 208) = v14 + 184;
  (*(void (**)(_QWORD *))(v32[0] + 24))(v32);
  v20 = v33;
  *a7 = v14;
  if (v20 == v32)
  {
    v21 = 4;
    v20 = v32;
  }
  else
  {
    if (!v20)
      goto LABEL_13;
    v21 = 5;
  }
  (*(void (**)(void))(*v20 + 8 * v21))();
LABEL_13:
  __p[0] = v24;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)__p);
  if (v25[0])
  {
    v25[1] = v25[0];
    operator delete(v25[0]);
  }
}

uint64_t llvm::orc::ExecutionSession::lookup@<X0>(llvm::orc::ExecutionSession *a1@<X0>, __int128 **a2@<X1>, __int128 *a3@<X2>, const std::exception_ptr *a4@<X3>, char a5@<W4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  void *ptr;
  uint64_t result;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::exception_ptr v28;
  const std::error_category *v29;
  __int128 v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  std::unique_lock<std::mutex> __lk;
  std::exception_ptr v35;
  uint64_t v36;
  int v37;
  _QWORD v38[3];
  _QWORD *v39;
  __int128 v40;
  char *v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v14 = operator new();
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = 850045863;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_QWORD *)(v14 + 80) = 0;
  *(_QWORD *)(v14 + 88) = 1018212795;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 124) = 0u;
  *(_QWORD *)v14 = &off_251C14A98;
  *(_QWORD *)(v14 + 8) = 0;
  v32 = 0;
  v33 = v14;
  v30 = *a3;
  v31 = *((_QWORD *)a3 + 2);
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)&v40 = &v33;
  *((_QWORD *)&v40 + 1) = &v32;
  v41 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallbacksHolder<llvm::orc::ExecutionSession::lookup(std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>> const&,llvm::orc::SymbolLookupSet,llvm::orc::LookupKind,llvm::orc::SymbolState,std::function<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>)::$_0,llvm::orc::ExecutionSession::lookup(std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>> const&,llvm::orc::SymbolLookupSet,llvm::orc::LookupKind,llvm::orc::SymbolState,std::function<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>)::$_0,void>::Callbacks
      + 2;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v38, a6);
  llvm::orc::ExecutionSession::lookup(a1, (int)a4, a2, (uint64_t)&v30, a5, &v40, v38);
  v17 = v39;
  if (v39 == v38)
  {
    v18 = 4;
    v17 = v38;
  }
  else
  {
    if (!v39)
      goto LABEL_6;
    v18 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v17 + 8 * v18))(v17, v15, v16);
LABEL_6:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v40);
  v35.__ptr_ = &v30;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v35);
  v19 = v33;
  if (!v33)
  {
    std::__throw_future_error[abi:nn180100]();
LABEL_29:
    std::exception_ptr::exception_ptr(&v35, a4);
    v28.__ptr_ = &v35;
    std::rethrow_exception(v28);
  }
  std::__assoc_sub_state::__attach_future[abi:nn180100](v33);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v19 + 24);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v19 + 24));
  std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v19, &__lk);
  a4 = (const std::exception_ptr *)(v19 + 16);
  v20 = *(_QWORD *)(v19 + 16);
  v35.__ptr_ = 0;
  std::exception_ptr::~exception_ptr(&v35);
  if (v20)
    goto LABEL_29;
  v35.__ptr_ = *(void **)(v19 + 144);
  v36 = *(_QWORD *)(v19 + 152);
  *(_QWORD *)(v19 + 144) = 0;
  *(_QWORD *)(v19 + 152) = 0;
  v37 = *(_DWORD *)(v19 + 160);
  *(_DWORD *)(v19 + 160) = 0;
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  v21 = (unint64_t *)(v19 + 8);
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 16))(v19);
  ptr = v32;
  if (v32)
  {
    v32 = 0;
    *(_BYTE *)(a7 + 24) |= 1u;
  }
  else
  {
    *(_BYTE *)(a7 + 24) &= ~1u;
    ptr = v35.__ptr_;
    *(_QWORD *)(a7 + 8) = v36;
    v35.__ptr_ = 0;
    v36 = 0;
    *(_DWORD *)(a7 + 16) = v37;
    v37 = 0;
  }
  *(_QWORD *)a7 = ptr;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)&v35);
  if (v32)
    (*(void (**)(void *))(*(_QWORD *)v32 + 8))(v32);
  result = v33;
  if (v33)
  {
    if ((*(_BYTE *)(v33 + 136) & 1) == 0)
    {
      v35.__ptr_ = 0;
      v25 = *(_QWORD *)(v33 + 16);
      std::exception_ptr::~exception_ptr(&v35);
      result = v33;
      if (!v25 && *(uint64_t *)(v33 + 8) >= 1)
      {
        v29 = std::future_category();
        MEMORY[0x24BD1B17C](&v35, 4, v29);
        abort();
      }
    }
    v26 = (unint64_t *)(result + 8);
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  }
  return result;
}

void llvm::orc::ExecutionSession::lookup(llvm::orc::ExecutionSession *a1@<X0>, __int128 **a2@<X1>, uint64_t *a3@<X2>, char a4@<W3>, uint64_t a5@<X8>)
{
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void ***v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  void **v25;
  _BYTE v26[24];
  _BYTE *v27;
  __int128 *v28;
  int v29;
  unsigned int v30;
  char v31;
  uint64_t v32;

  v32 = *MEMORY[0x24BDAC8D0];
  v28 = (__int128 *)*a3;
  if ((unint64_t)v28 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v9 = (unint64_t *)v28 + 1;
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 + 1, v9));
  }
  llvm::orc::SymbolLookupSet::SymbolLookupSet((uint64_t *)&v23, (uint64_t *)&v28, 1uLL, 0);
  if ((unint64_t)v28 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v11 = (unint64_t *)v28 + 1;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
  }
  v21 = v23;
  v22 = v24;
  v23 = 0uLL;
  v24 = 0;
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v26, (uint64_t)&llvm::orc::NoDependenciesToRegister);
  llvm::orc::ExecutionSession::lookup(a1, a2, &v21, 0, a4, (uint64_t)v26, (uint64_t)&v28);
  v15 = v27;
  if (v27 == v26)
  {
    v16 = 4;
    v15 = v26;
  }
  else
  {
    if (!v27)
      goto LABEL_12;
    v16 = 5;
  }
  (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v15 + 8 * v16))(v15, v13, v14);
LABEL_12:
  v25 = (void **)&v21;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v25);
  if ((v31 & 1) != 0)
  {
    v19 = (uint64_t)v28;
    v28 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v19;
  }
  else
  {
    v17 = (uint64_t)v28;
    if (v29)
    {
      if (v30)
      {
        v18 = 24 * v30;
        while ((*(_QWORD *)v17 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v17 += 24;
          v18 -= 24;
          if (!v18)
            goto LABEL_18;
        }
      }
    }
    else
    {
LABEL_18:
      v17 = (uint64_t)v28 + 24 * v30;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_OWORD *)a5 = *(_OWORD *)(v17 + 8);
  }
  v20 = (void ***)llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v28);
  v28 = &v23;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](v20);
}

void llvm::orc::ExecutionSession::lookup(llvm::orc::ExecutionSession *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  void *__p;
  char *v32;
  char *v33;

  __p = 0;
  v32 = 0;
  v33 = 0;
  std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::reserve(&__p, a3);
  if (a3)
  {
    v11 = v32;
    v12 = &a2[a3];
    do
    {
      v13 = *a2;
      if (v11 >= v33)
      {
        v14 = (v11 - (_BYTE *)__p) >> 4;
        if ((unint64_t)(v14 + 1) >> 60)
          abort();
        v15 = (v33 - (_BYTE *)__p) >> 3;
        if (v15 <= v14 + 1)
          v15 = v14 + 1;
        if ((unint64_t)(v33 - (_BYTE *)__p) >= 0x7FFFFFFFFFFFFFF0)
          v16 = 0xFFFFFFFFFFFFFFFLL;
        else
          v16 = v15;
        if (v16)
          v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)&v33, v16);
        else
          v17 = 0;
        v18 = &v17[16 * v14];
        *(_QWORD *)v18 = v13;
        *((_QWORD *)v18 + 1) = 0;
        v20 = (char *)__p;
        v19 = v32;
        v21 = v18;
        if (v32 != __p)
        {
          do
          {
            *((_OWORD *)v21 - 1) = *((_OWORD *)v19 - 1);
            v21 -= 16;
            v19 -= 16;
          }
          while (v19 != v20);
          v19 = (char *)__p;
        }
        v11 = v18 + 16;
        __p = v21;
        v32 = v18 + 16;
        v33 = &v17[16 * v16];
        if (v19)
          operator delete(v19);
      }
      else
      {
        *(_QWORD *)v11 = v13;
        *((_QWORD *)v11 + 1) = 0;
        v11 += 16;
      }
      v32 = v11;
      ++a2;
    }
    while (a2 != v12);
  }
  v22 = *a4;
  v30 = v22;
  if ((unint64_t)(v22 - 1) >= 0xFFFFFFFFFFFFFFE0)
  {
    llvm::orc::ExecutionSession::lookup(a1, (__int128 **)&__p, &v30, a5, a6);
  }
  else
  {
    v23 = (unint64_t *)(v22 + 8);
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 + 1, v23));
    v25 = v30;
    v26 = v30 - 1;
    llvm::orc::ExecutionSession::lookup(a1, (__int128 **)&__p, &v30, a5, a6);
    if (v26 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v27 = (unint64_t *)(v25 + 8);
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
    }
  }
  if (__p)
  {
    v32 = (char *)__p;
    operator delete(__p);
  }
}

void llvm::orc::ExecutionSession::lookup(uint64_t *a1@<X0>, uint64_t *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X3>, unint64_t a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;

  llvm::orc::ExecutorProcessControl::intern(a1[9], a4, a5, &v14);
  llvm::orc::ExecutionSession::lookup((llvm::orc::ExecutionSession *)a1, a2, a3, (uint64_t *)&v14, a6, a7);
  if ((unint64_t)v14 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v12 = v14 + 1;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
  }
}

uint64_t llvm::orc::ExecutionSession::registerJITDispatchHandlers@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  void **v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  int v24;
  char *v25;
  __int128 *v26;
  _QWORD *v27;
  char v28;
  _QWORD *v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  void *__p;
  uint64_t v41;
  _QWORD **v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD *v45;
  _QWORD v46[4];
  __int16 v47;
  _QWORD v48[4];
  __int16 v49;
  _QWORD v50[4];
  __int16 v51;
  void **v52[4];
  __int16 v53;
  uint64_t v54;
  __int128 v55;
  uint64_t v56;
  _BYTE v57[24];
  _BYTE *v58;
  _QWORD *v59;
  int v60;
  unsigned int v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  v8 = (char *)operator new(0x10uLL);
  v41 = (uint64_t)(v8 + 16);
  v42 = (_QWORD **)(v8 + 16);
  *(_QWORD *)v8 = a2;
  *((_DWORD *)v8 + 2) = 1;
  __p = v8;
  v56 = 0;
  v55 = 0uLL;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::reserve((uint64_t *)&v55, *(unsigned int *)(a3 + 8));
  if (*(_DWORD *)(a3 + 8))
  {
    v9 = *(unsigned int *)(a3 + 16);
    if ((_DWORD)v9)
    {
      v10 = 40 * v9;
      v11 = *(_QWORD **)a3;
      while ((*v11 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v11 += 5;
        v10 -= 40;
        if (!v10)
          goto LABEL_19;
      }
    }
    else
    {
      v11 = *(_QWORD **)a3;
    }
    v12 = *(_QWORD *)a3 + 40 * v9;
    if (v11 != (_QWORD *)v12)
    {
      v13 = (void **)*v11;
LABEL_10:
      v52[0] = v13;
      if ((unint64_t)v13 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v14 = (unint64_t *)(v13 + 1);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 + 1, v14));
      }
      llvm::orc::SymbolLookupSet::add((uint64_t *)&v55, (uint64_t *)v52, 1);
      if ((unint64_t)v52[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v16 = (unint64_t *)(v52[0] + 1);
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
      }
      while (1)
      {
        v11 += 5;
        if (v11 == (_QWORD *)v12)
          break;
        v13 = (void **)*v11;
        if ((*v11 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v11 != (_QWORD *)v12)
            goto LABEL_10;
          break;
        }
      }
    }
  }
LABEL_19:
  std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v57, (uint64_t)&llvm::orc::NoDependenciesToRegister);
  llvm::orc::ExecutionSession::lookup((llvm::orc::ExecutionSession *)a1, (__int128 **)&__p, &v55, 0, 63, (uint64_t)v57, (uint64_t)&v59);
  v18 = v58;
  if (v58 == v57)
  {
    v19 = 4;
    v18 = v57;
  }
  else
  {
    if (!v58)
      goto LABEL_24;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_24:
  v52[0] = (void **)&v55;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](v52);
  if (__p)
  {
    v41 = (uint64_t)__p;
    operator delete(__p);
  }
  if ((v62 & 1) == 0)
  {
    std::mutex::lock((std::mutex *)(a1 + 256));
    if (!v60)
      goto LABEL_56;
    if (v61)
    {
      v20 = 24 * v61;
      v21 = v59;
      while ((*v21 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v21 += 3;
        v20 -= 24;
        if (!v20)
          goto LABEL_56;
      }
    }
    else
    {
      v21 = v59;
    }
    v23 = &v59[3 * v61];
    if (v21 == v23)
      goto LABEL_56;
LABEL_36:
    v54 = v21[1];
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)(a1 + 320), *(_DWORD *)(a1 + 336), v54, &__p) & 1) != 0)
    {
      __p = "{0:x16}";
      v41 = 7;
      v42 = &v45;
      v43 = 1;
      v44[0] = &off_251C144D8;
      v44[1] = &v54;
      v45 = v44;
      v46[0] = "Tag ";
      v46[2] = &__p;
      v47 = 1539;
      v48[0] = v46;
      v48[2] = " (for ";
      v49 = 770;
      v37 = *v21 + 16;
      v38 = *(_QWORD *)*v21;
      v50[0] = v48;
      v50[2] = v37;
      v50[3] = v38;
      v51 = 1282;
      v52[0] = (void **)v50;
      v52[2] = (void **)") already registered";
      v53 = 770;
      getErrorErrorCat();
      v39 = operator new();
      *(_QWORD *)v39 = off_251C127D0;
      llvm::Twine::str((llvm::formatv_object_base **)v52, (std::string *)(v39 + 8));
      *(_QWORD *)(v39 + 32) = 3;
      *(_QWORD *)(v39 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v39 + 48) = 1;
      *a4 = v39;
      goto LABEL_57;
    }
    __p = 0;
    v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a3, v21, &__p);
    v25 = (char *)__p;
    if (!v24)
      v25 = (char *)(*(_QWORD *)a3 + 40 * *(unsigned int *)(a3 + 16));
    v26 = (__int128 *)(v25 + 8);
    v27 = operator new(0x38uLL);
    v27[1] = 0;
    v27[2] = 0;
    *v27 = &off_251C14AC8;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v27 + 3), v26);
    __p = 0;
    v28 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)(a1 + 320), *(_DWORD *)(a1 + 336), v21[1], &__p);
    v29 = __p;
    if ((v28 & 1) != 0)
    {
LABEL_45:
      v33 = (std::__shared_weak_count *)v29[2];
      v29[1] = v27 + 3;
      v29[2] = v27;
      if (v33)
      {
        p_shared_owners = (unint64_t *)&v33->__shared_owners_;
        do
          v35 = __ldaxr(p_shared_owners);
        while (__stlxr(v35 - 1, p_shared_owners));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      while (1)
      {
        v21 += 3;
        if (v21 == v23)
          break;
        if ((*v21 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v21 != v23)
            goto LABEL_36;
          break;
        }
      }
LABEL_56:
      *a4 = 0;
LABEL_57:
      std::mutex::unlock((std::mutex *)(a1 + 256));
      return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v59);
    }
    v30 = *(_DWORD *)(a1 + 328);
    v31 = *(_DWORD *)(a1 + 336);
    if (4 * v30 + 4 >= 3 * v31)
    {
      v31 *= 2;
    }
    else if (v31 + ~v30 - *(_DWORD *)(a1 + 332) > v31 >> 3)
    {
LABEL_42:
      ++*(_DWORD *)(a1 + 328);
      if (*v29 != -1)
        --*(_DWORD *)(a1 + 332);
      v32 = v21[1];
      v29[1] = 0;
      v29[2] = 0;
      *v29 = v32;
      goto LABEL_45;
    }
    llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::grow(a1 + 320, v31);
    __p = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)(a1 + 320), *(_DWORD *)(a1 + 336), v21[1], &__p);
    v29 = __p;
    goto LABEL_42;
  }
  v22 = v59;
  v59 = 0;
  *a4 = (uint64_t)v22;
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v59);
}

void llvm::orc::ExecutionSession::runJITDispatchHandler(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  std::mutex *v10;
  BOOL v11;
  std::__shared_weak_count *v12;
  _QWORD *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  llvm::orc::shared::WrapperFunctionResult *p_p;
  uint64_t v18;
  void *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v22[4];
  _QWORD v23[2];
  _QWORD *v24;
  llvm::formatv_object_base *v25[4];
  __int16 v26;
  std::string __p;
  void *v28;
  unint64_t v29;
  uint64_t v30;
  _QWORD v31[5];

  v31[4] = *MEMORY[0x24BDAC8D0];
  v30 = a3;
  v10 = (std::mutex *)(a1 + 256);
  std::mutex::lock((std::mutex *)(a1 + 256));
  v22[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)(a1 + 320), *(_DWORD *)(a1 + 336), a3, v22))v11 = v22[0] == *(_QWORD *)(a1 + 320) + 24 * *(unsigned int *)(a1 + 336);
  else
    v11 = 1;
  if (v11)
  {
    std::mutex::unlock(v10);
    v12 = 0;
  }
  else
  {
    v13 = *(_QWORD **)(v22[0] + 8);
    v12 = *(std::__shared_weak_count **)(v22[0] + 16);
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v15 = __ldxr(p_shared_owners);
      while (__stxr(v15 + 1, p_shared_owners));
    }
    std::mutex::unlock(v10);
    if (v13)
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v31, a2);
      v16 = v13[3];
      if ((v16 & 2) == 0)
        v13 = (_QWORD *)*v13;
      (*(void (**)(_QWORD *, _QWORD *, uint64_t, uint64_t))(v16 & 0xFFFFFFFFFFFFFFF8))(v13, v31, a4, a5);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v31);
      goto LABEL_26;
    }
  }
  v22[0] = "{0:x16}";
  v22[1] = 7;
  v22[2] = &v24;
  v22[3] = 1;
  v23[0] = &off_251C144D8;
  v23[1] = &v30;
  v24 = v23;
  v25[0] = (llvm::formatv_object_base *)"No function registered for tag ";
  v25[2] = (llvm::formatv_object_base *)v22;
  v26 = 1539;
  llvm::Twine::str(v25, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = (llvm::orc::shared::WrapperFunctionResult *)&__p;
  else
    p_p = (llvm::orc::shared::WrapperFunctionResult *)__p.__r_.__value_.__r.__words[0];
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError(p_p, (char **)&v28);
  v18 = *((_QWORD *)a2 + 3);
  if ((v18 & 2) == 0)
    a2 = *(__int128 **)a2;
  (*(void (**)(__int128 *, void **))(v18 & 0xFFFFFFFFFFFFFFF8))(a2, &v28);
  if (v29 >= 9)
  {
    v19 = v28;
LABEL_23:
    free(v19);
    goto LABEL_24;
  }
  if (!v29)
  {
    v19 = v28;
    if (v28)
      goto LABEL_23;
  }
LABEL_24:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_26:
  if (v12)
  {
    v20 = (unint64_t *)&v12->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>> &>(uint64_t *a1, __int128 *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  __int128 v19;

  v6 = operator new();
  v7 = v6;
  v19 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v8 = (std::__shared_weak_count *)a3[1];
  v17 = *a3;
  v18 = v8;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  llvm::orc::FailedToMaterialize::FailedToMaterialize(v6, (uint64_t)&v19, (uint64_t)&v17);
  v11 = v18;
  if (v18)
  {
    v12 = (unint64_t *)&v18->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = (std::__shared_weak_count *)*((_QWORD *)&v19 + 1);
  if (*((_QWORD *)&v19 + 1))
  {
    v15 = (unint64_t *)(*((_QWORD *)&v19 + 1) + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *a1 = v7;
}

void llvm::orc::ExecutionSession::runSessionLocked<llvm::orc::ExecutionSession::destroyResourceTracker(llvm::orc::ResourceTracker &)::$_0>(std::recursive_mutex *a1, llvm::orc::ResourceTracker **a2)
{
  std::recursive_mutex *v4;
  char v5;
  unint64_t v6;
  llvm::orc::ResourceTracker *v7;
  llvm::orc::ResourceTracker *v8;

  std::recursive_mutex::lock(a1);
  v4 = (std::recursive_mutex *)a2[1];
  v5 = atomic_load((unint64_t *)*a2 + 1);
  if ((v5 & 1) == 0)
  {
    v6 = atomic_load((unint64_t *)*a2 + 1);
    llvm::orc::JITDylib::getDefaultResourceTracker((llvm::orc::JITDylib *)(v6 & 0xFFFFFFFFFFFFFFFELL), (unsigned int **)&v8);
    v7 = v8;
    llvm::orc::ExecutionSession::transferResourceTracker(v4, v8, *a2);
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v7);
  }
  std::recursive_mutex::unlock(a1);
}

void llvm::orc::ExecutionSession::IL_updateCandidatesFor(uint64_t *a1, uint64_t a2, uint64_t a3, int a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v7;
  uint64_t v13;
  uint64_t v14;
  int v15;
  char v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  _QWORD *v43;
  uint64_t *v44;
  void **v45;
  unint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  __int128 v62;
  _QWORD *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  void **v67[2];

  v67[1] = *(void ***)MEMORY[0x24BDAC8D0];
  v7 = *a5;
  if (a5[1] == *a5)
  {
LABEL_26:
    v24 = 0;
    goto LABEL_27;
  }
  v13 = 0;
  while (1)
  {
    v14 = v7 + 16 * v13;
    v15 = *(_DWORD *)(v14 + 8);
    *(_QWORD *)&v62 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(a3 + 112), *(_DWORD *)(a3 + 128), *(_QWORD *)v14, &v62)&& (_QWORD)v62 != *(_QWORD *)(a3 + 112) + 24 * *(unsigned int *)(a3 + 128))
    {
      break;
    }
    ++v13;
LABEL_25:
    v7 = *a5;
    if (v13 == (a5[1] - *a5) >> 4)
      goto LABEL_26;
  }
  v17 = *(_BYTE *)(v62 + 17);
  if (!(a4 | v17 & 0x10))
  {
    if (a6)
    {
      v18 = *(_QWORD *)v14;
      v66 = v18;
      if ((unint64_t)(v18 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v19 = (unint64_t *)(v18 + 8);
        do
          v20 = __ldaxr(v19);
        while (__stlxr(v20 + 1, v19));
      }
      llvm::orc::SymbolLookupSet::add(a6, &v66, v15);
      if ((unint64_t)(v66 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v21 = (unint64_t *)(v66 + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
      }
    }
LABEL_24:
    llvm::orc::SymbolLookupSet::remove(a5, v13);
    goto LABEL_25;
  }
  if (v15 != 1 && (v17 & 0x40) != 0)
  {
    v25 = *(_QWORD *)(a2 + 72);
    v27 = *(_QWORD *)(v25 + 8);
    v26 = *(_QWORD *)(v25 + 16);
    *(_QWORD *)&v64 = v27;
    *((_QWORD *)&v64 + 1) = v26;
    if (v26)
    {
      v28 = (unint64_t *)(v26 + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
    }
    v30 = *(_QWORD *)v14;
    v31 = *(_QWORD *)v14 - 1;
    if (v31 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v32 = (unint64_t *)(v30 + 8);
      do
        v33 = __ldaxr(v32);
      while (__stlxr(v33 + 1, v32));
    }
    v34 = operator new(8uLL);
    *(_QWORD *)&v62 = v34;
    *((_QWORD *)&v62 + 1) = v34;
    *v34 = v30;
    v35 = v34 + 1;
    v63 = v35;
    if (v31 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v36 = (unint64_t *)(v30 + 8);
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 + 1, v36));
    }
    *((_QWORD *)&v62 + 1) = v35;
    llvm::make_error<llvm::orc::SymbolsNotFound,std::shared_ptr<llvm::orc::SymbolStringPool>,std::vector<llvm::orc::SymbolStringPtr>>(&v65, &v64, &v62);
    v24 = v65;
    v65 = 0;
    v67[0] = (void **)&v62;
    std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](v67);
    if (v31 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v38 = (unint64_t *)(v30 + 8);
      do
        v39 = __ldaxr(v38);
      while (__stlxr(v39 - 1, v38));
    }
    v40 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
    if (*((_QWORD *)&v64 + 1))
    {
      v41 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
      do
        v42 = __ldaxr(v41);
      while (__stlxr(v42 - 1, v41));
      goto LABEL_62;
    }
    goto LABEL_27;
  }
  if ((*(_BYTE *)(v62 + 17) & 1) == 0)
    goto LABEL_24;
  v43 = operator new(0x30uLL);
  v43[1] = 0;
  v43[2] = 0;
  *v43 = &off_251C14990;
  v43[4] = 0;
  *((_DWORD *)v43 + 10) = 0;
  v43[3] = 0;
  v44 = v43 + 3;
  *(_QWORD *)&v64 = v43 + 3;
  *((_QWORD *)&v64 + 1) = v43;
  v45 = *(void ***)v14;
  v67[0] = v45;
  if ((unint64_t)v45 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v46 = (unint64_t *)(v45 + 1);
    do
      v47 = __ldaxr(v46);
    while (__stlxr(v47 + 1, v46));
    v44 = (uint64_t *)v64;
  }
  llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::DenseSetImpl((uint64_t)&v62, (uint64_t *)v67, 1);
  v61 = a3;
  v48 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v44, &v61);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::operator=((uint64_t)(v48 + 1), (uint64_t)&v62);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v62);
  if ((unint64_t)v67[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v49 = (unint64_t *)(v67[0] + 1);
    do
      v50 = __ldaxr(v49);
    while (__stlxr(v50 - 1, v49));
  }
  v51 = *(_QWORD *)(a2 + 72);
  v53 = *(_QWORD *)(v51 + 8);
  v52 = *(_QWORD *)(v51 + 16);
  *(_QWORD *)&v62 = v53;
  *((_QWORD *)&v62 + 1) = v52;
  if (v52)
  {
    v54 = (unint64_t *)(v52 + 8);
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
  }
  llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>>(&v60, &v62, &v64);
  v24 = v60;
  v60 = 0;
  v56 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v57 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v58 = __ldaxr(v57);
    while (__stlxr(v58 - 1, v57));
    if (!v58)
    {
      ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
      std::__shared_weak_count::__release_weak(v56);
    }
  }
  v40 = (std::__shared_weak_count *)*((_QWORD *)&v64 + 1);
  if (*((_QWORD *)&v64 + 1))
  {
    v59 = (unint64_t *)(*((_QWORD *)&v64 + 1) + 8);
    do
      v42 = __ldaxr(v59);
    while (__stlxr(v42 - 1, v59));
LABEL_62:
    if (!v42)
    {
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
    }
  }
LABEL_27:
  *a1 = v24;
}

void llvm::orc::ExecutionSession::OL_resumeLookupAfterGeneration(llvm::orc::ExecutionSession *this, llvm::orc::InProgressLookupState *a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  unint64_t *v24;
  unint64_t v25;
  _QWORD *v26;

  *((_DWORD *)a2 + 34) = 0;
  v3 = *((_QWORD *)a2 + 19);
  v4 = *(std::__shared_weak_count **)(v3 - 8);
  if (!v4)
    return;
  v6 = std::__shared_weak_count::lock(v4);
  if (!v6)
    return;
  v7 = v6;
  v8 = *(_QWORD *)(v3 - 16);
  if (!v8)
  {
    v15 = 0;
LABEL_13:
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v20 = __ldaxr(p_shared_owners);
    while (__stlxr(v20 - 1, p_shared_owners));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
    if (v15)
    {
      *(_DWORD *)(v15 + 136) = 1;
      v21 = (_QWORD *)operator new();
      *v21 = &off_251C14848;
      v21[1] = v15;
      v22 = *(_QWORD *)(*((_QWORD *)this + 9) + 24);
      v26 = v21;
      (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v22 + 16))(v22, &v26);
      v23 = v26;
      v26 = 0;
      if (v23)
        (*(void (**)(_QWORD *))(*v23 + 8))(v23);
    }
    return;
  }
  v9 = *((_QWORD *)a2 + 19);
  v10 = *(std::__shared_weak_count **)(v9 - 8);
  if (v10)
    std::__shared_weak_count::__release_weak(v10);
  *((_QWORD *)a2 + 19) = v9 - 16;
  std::mutex::lock((std::mutex *)(v8 + 8));
  v11 = *(_QWORD *)(v8 + 120);
  if (v11)
  {
    v12 = *(_QWORD *)(v8 + 112);
    v13 = (v12 >> 6) & 0x3FFFFFFFFFFFFF8;
    v14 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + v13);
    v15 = *(_QWORD *)(v14 + 8 * (v12 & 0x1FF));
    *(_QWORD *)(v14 + 8 * (v12 & 0x1FF)) = 0;
    v16 = *(_QWORD *)(*(_QWORD *)(v8 + 88) + v13);
    v17 = *(_QWORD *)(v16 + 8 * (v12 & 0x1FF));
    *(_QWORD *)(v16 + 8 * (v12 & 0x1FF)) = 0;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
      v12 = *(_QWORD *)(v8 + 112);
      v11 = *(_QWORD *)(v8 + 120);
    }
    v18 = v12 + 1;
    *(_QWORD *)(v8 + 112) = v18;
    *(_QWORD *)(v8 + 120) = v11 - 1;
    if (v18 >= 0x400)
    {
      operator delete(**(void ***)(v8 + 88));
      *(_QWORD *)(v8 + 88) += 8;
      *(_QWORD *)(v8 + 112) -= 512;
    }
    std::mutex::unlock((std::mutex *)(v8 + 8));
    goto LABEL_13;
  }
  *(_BYTE *)(v8 + 72) = 0;
  std::mutex::unlock((std::mutex *)(v8 + 8));
  v24 = (unint64_t *)&v7->__shared_owners_;
  do
    v25 = __ldaxr(v24);
  while (__stlxr(v25 - 1, v24));
  if (!v25)
  {
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
  }
}

void llvm::make_error<llvm::orc::SymbolsNotFound,std::shared_ptr<llvm::orc::SymbolStringPool>,std::vector<llvm::orc::SymbolStringPtr>>(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[3];
  void **v11;

  v6 = operator new();
  v7 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v8 = *((_QWORD *)a3 + 2);
  v9 = *a3;
  *((_QWORD *)a3 + 1) = 0;
  *((_QWORD *)a3 + 2) = 0;
  *(_QWORD *)a3 = 0;
  *(_QWORD *)v6 = off_251C14628;
  *(_OWORD *)(v6 + 8) = v7;
  *(_OWORD *)(v6 + 24) = v9;
  *(_QWORD *)(v6 + 40) = v8;
  memset(v10, 0, sizeof(v10));
  v11 = (void **)v10;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v11);
  *a1 = v6;
}

_QWORD *llvm::orc::SymbolLookupSet::getSymbolNames(llvm::orc::SymbolLookupSet *this, uint64_t **a2)
{
  _QWORD *result;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = 0;
  result = (_QWORD *)std::vector<llvm::orc::SymbolStringPtr>::reserve((char **)this, ((char *)a2[1] - (char *)*a2) >> 4);
  v5 = *a2;
  v6 = a2[1];
  if (v5 != v6)
  {
    result = (_QWORD *)*((_QWORD *)this + 1);
    do
    {
      if ((unint64_t)result >= *((_QWORD *)this + 2))
      {
        result = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)this, v5);
      }
      else
      {
        v7 = *v5;
        *result = *v5;
        if ((unint64_t)(v7 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v8 = (unint64_t *)(v7 + 8);
          do
            v9 = __ldaxr(v8);
          while (__stlxr(v9 + 1, v8));
        }
        ++result;
      }
      *((_QWORD *)this + 1) = result;
      v5 += 2;
    }
    while (v5 != v6);
  }
  return result;
}

uint64_t llvm::orc::ExecutionSession::simplifyDepGroups@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  char v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  char v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  std::__shared_weak_count *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  BOOL v79;
  _QWORD *v80;
  int v81;
  _QWORD *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t i;
  uint64_t v94;
  _QWORD *v95;
  uint64_t *v96;
  uint64_t *v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t *v111;
  uint64_t *v112;
  uint64_t v113;
  uint64_t *v114;
  uint64_t *v115;
  _QWORD *v116;
  uint64_t v117;
  BOOL v118;
  uint64_t *v120;
  uint64_t v121;
  uint64_t *v122;
  _QWORD *v123;
  uint64_t v125;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  void **v132;
  unint64_t v133;
  uint64_t v134;
  __int128 v135[3];
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  uint64_t v139;
  _QWORD *v140;
  __int128 v141[2];

  v5 = a2;
  v6 = a4;
  v7 = *a1;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_DWORD *)(a4 + 16) = 0;
  v129 = v7;
  if ((_DWORD)a3)
  {
    v8 = (4 * (int)a3 / 3u + 1) | ((unint64_t)(4 * (int)a3 / 3u + 1) >> 1);
    v9 = v8 | (v8 >> 2) | ((v8 | (v8 >> 2)) >> 4);
    llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::grow(v6, (((v9 | (v9 >> 8)) >> 16) | v9 | (v9 >> 8)) + 1);
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v10 = v5 + 48 * a3;
  }
  else
  {
    v136 = 0;
    v137 = 0;
    v138 = 0;
    v10 = a2 + 48 * a3;
    if (!a3)
    {
      v30 = 1;
      goto LABEL_24;
    }
  }
  v125 = v5;
  v11 = v5;
  do
  {
    if (*(_DWORD *)(v11 + 32))
    {
      v12 = v10;
      v13 = operator new(0x50uLL);
      v13[1] = 0;
      v13[2] = 0;
      *v13 = &off_251C14B00;
      v13[4] = 0;
      v13[5] = 0;
      *((_DWORD *)v13 + 12) = 0;
      v13[7] = 0;
      v13[8] = 0;
      *((_DWORD *)v13 + 18) = 0;
      *((_QWORD *)&v135[0] + 1) = v13;
      v13[3] = v7;
      *(_QWORD *)&v135[0] = v13 + 3;
      *(_QWORD *)&v141[0] = v13 + 3;
      v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(v6, (uint64_t *)v141)+ 1;
      std::shared_ptr<llvm::sys::fs::detail::DirIterState>::operator=[abi:nn180100]((uint64_t)v14, v135);
      v15 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v11);
      v17 = *(_QWORD *)v11 + 8 * *(unsigned int *)(v11 + 16);
      if ((uint64_t *)v17 != v15)
      {
        v18 = v15;
        v19 = v16;
        do
        {
          v140 = (_QWORD *)*v18;
          v20 = (uint64_t)v140;
          v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::find((uint64_t)(a1 + 2), v18);
          v23 = *v14 + 8;
          v22 = *(_QWORD *)v23;
          *(_QWORD *)&v141[0] = 0;
          v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v22, *(_DWORD *)(v23 + 16), v20, v141);
          v25 = *(_QWORD **)&v141[0];
          if ((v24 & 1) == 0)
          {
            v25 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>(v23, (uint64_t *)&v140, *(_QWORD **)&v141[0]);
            *v25 = v20;
            *((_WORD *)v25 + 4) = 0;
          }
          *((_WORD *)v25 + 4) = *(_WORD *)(v21 + 8);
          v26 = *v14;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::FindAndConstruct((uint64_t)&v136, (uint64_t *)&v140)[1] = v26;
          while (++v18 != v19)
          {
            if ((*v18 | 8) != 0xFFFFFFFFFFFFFFF8)
              goto LABEL_15;
          }
          v18 = v19;
LABEL_15:
          ;
        }
        while (v18 != (uint64_t *)v17);
      }
      v27 = (std::__shared_weak_count *)*((_QWORD *)&v135[0] + 1);
      v6 = a4;
      v7 = v129;
      if (*((_QWORD *)&v135[0] + 1))
      {
        v28 = (unint64_t *)(*((_QWORD *)&v135[0] + 1) + 8);
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
          std::__shared_weak_count::__release_weak(v27);
        }
      }
      v10 = v12;
    }
    v11 += 48;
  }
  while (v11 != v10);
  v30 = 0;
  v5 = v125;
LABEL_24:
  memset(v135, 0, 20);
  v31 = a1[2];
  v127 = a1 + 2;
  if (*((_DWORD *)v127 + 2))
  {
    v32 = *((unsigned int *)v127 + 4);
    if ((_DWORD)v32)
    {
      v33 = 16 * v32;
      v34 = v31;
      while ((*(_QWORD *)v34 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v34 += 16;
        v33 -= 16;
        if (!v33)
          goto LABEL_59;
      }
    }
    else
    {
      v34 = v31;
    }
    v35 = v31 + 16 * v32;
    if (v34 != v35)
    {
      v36 = v5;
      v37 = v136;
      v38 = v138;
      v39 = *(_QWORD *)v34;
LABEL_33:
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v37, v38, v39, v141) & 1) == 0)
      {
        v40 = v10;
        v140 = *(_QWORD **)v34;
        v41 = (uint64_t)v140;
        *(_QWORD *)&v141[0] = 0;
        v42 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(uint64_t *)&v135[0], v135[1], (uint64_t)v140, v141);
        v43 = *(_QWORD **)&v141[0];
        if ((v42 & 1) == 0)
        {
          v43 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>((uint64_t)v135, (uint64_t *)&v140, *(_QWORD **)&v141[0]);
          *v43 = v41;
          *((_WORD *)v43 + 4) = 0;
        }
        v10 = v40;
        *((_WORD *)v43 + 4) = *(_WORD *)(v34 + 8);
      }
      while (1)
      {
        v34 += 16;
        if (v34 == v35)
          break;
        v39 = *(_QWORD *)v34;
        if ((*(_QWORD *)v34 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v34 != v35)
            goto LABEL_33;
          break;
        }
      }
      v44 = DWORD2(v135[0]);
      v5 = v36;
      if (DWORD2(v135[0]))
      {
        v45 = operator new(0x50uLL);
        v45[1] = 0;
        v45[2] = 0;
        *v45 = &off_251C14B00;
        v45[3] = v7;
        v45[4] = 0;
        v45[5] = 0;
        *((_DWORD *)v45 + 12) = 0;
        v45[7] = 0;
        v45[8] = 0;
        *((_DWORD *)v45 + 18) = 0;
        *(_QWORD *)&v141[0] = v45 + 3;
        *((_QWORD *)&v141[0] + 1) = v45;
        MEMORY[0x24BD1B398](0, 8);
        v45[4] = *(_QWORD *)&v135[0];
        *((_DWORD *)v45 + 10) = v44;
        v46 = *(_QWORD *)((char *)v135 + 12);
        v135[0] = 0uLL;
        *(_QWORD *)((char *)v45 + 44) = v46;
        LODWORD(v135[1]) = 0;
        v140 = v45 + 3;
        v47 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a4, (uint64_t *)&v140)+ 1;
        std::shared_ptr<llvm::sys::fs::detail::DirIterState>::operator=[abi:nn180100]((uint64_t)v47, v141);
        if (*(_DWORD *)(a4 + 8) == 1)
        {
          v48 = (std::__shared_weak_count *)*((_QWORD *)&v141[0] + 1);
          if (*((_QWORD *)&v141[0] + 1))
          {
            v49 = (unint64_t *)(*((_QWORD *)&v141[0] + 1) + 8);
            do
              v50 = __ldaxr(v49);
            while (__stlxr(v50 - 1, v49));
            if (!v50)
            {
              ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
              std::__shared_weak_count::__release_weak(v48);
            }
          }
          MEMORY[0x24BD1B398](*(_QWORD *)&v135[0], 8);
          return MEMORY[0x24BD1B398](v136, 8);
        }
        v51 = *v47;
        if (*(_DWORD *)(*v47 + 16))
        {
          v52 = *(uint64_t **)(v51 + 8);
          v53 = *(unsigned int *)(v51 + 24);
          if ((_DWORD)v53)
          {
            v54 = 16 * v53;
            v55 = v52;
            while ((*v55 | 8) == 0xFFFFFFFFFFFFFFF8)
            {
              v55 += 2;
              v54 -= 16;
              if (!v54)
                goto LABEL_54;
            }
          }
          else
          {
            v55 = v52;
          }
          v120 = &v52[2 * v53];
LABEL_171:
          if (v55 != v120)
          {
            v121 = *v47;
            llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::FindAndConstruct((uint64_t)&v136, v55)[1] = v121;
            while (1)
            {
              v55 += 2;
              if (v55 == v120)
                break;
              if ((*v55 | 8) != 0xFFFFFFFFFFFFFFF8)
                goto LABEL_171;
            }
          }
        }
LABEL_54:
        v56 = (std::__shared_weak_count *)*((_QWORD *)&v141[0] + 1);
        v5 = v36;
        if (*((_QWORD *)&v141[0] + 1))
        {
          v57 = (unint64_t *)(*((_QWORD *)&v141[0] + 1) + 8);
          do
            v58 = __ldaxr(v57);
          while (__stlxr(v58 - 1, v57));
          if (!v58)
          {
            ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
            std::__shared_weak_count::__release_weak(v56);
          }
        }
      }
    }
  }
LABEL_59:
  MEMORY[0x24BD1B398](*(_QWORD *)&v135[0], 8);
  if ((v30 & 1) == 0)
  {
    do
    {
      if (*(_DWORD *)(v5 + 32))
      {
        v59 = *llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v5);
        *(_QWORD *)&v135[0] = 0;
        v60 = v136;
        v61 = v138;
        v62 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v136, v138, v59, v135);
        v63 = *(_QWORD *)&v135[0];
        if (!v62)
          v63 = v60 + 16 * v61;
        if (*(_DWORD *)(v5 + 32))
        {
          v64 = *(_QWORD *)(v63 + 8);
          v65 = *(unsigned int *)(v5 + 40);
          if ((_DWORD)v65)
          {
            v66 = 32 * v65;
            v67 = *(uint64_t **)(v5 + 24);
            while ((*v67 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v67 += 4;
              v66 -= 32;
              if (!v66)
                goto LABEL_103;
            }
          }
          else
          {
            v67 = *(uint64_t **)(v5 + 24);
          }
          v68 = *(_QWORD *)(v5 + 24) + 32 * v65;
          if (v67 != (uint64_t *)v68)
          {
LABEL_71:
            v69 = v10;
            memset(v141, 0, 20);
            v70 = *v67;
            v71 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(v67 + 1));
            v72 = v71;
            v74 = v73;
            v75 = v67[1] + 8 * *((unsigned int *)v67 + 6);
            if (v70 == v7)
            {
              if ((uint64_t *)v75 != v71)
              {
                do
                {
                  v140 = (_QWORD *)*v72;
                  *(_QWORD *)&v135[0] = 0;
                  v77 = v136;
                  v78 = v138;
                  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v136, v138, (uint64_t)v140, v135))v79 = *(_QWORD *)&v135[0] == v77 + 16 * v78;
                  else
                    v79 = 1;
                  if (v79)
                  {
                    *(_QWORD *)&v135[0] = 0;
                    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v127, v72, v135) & 1) == 0)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v135, (uint64_t)v141, (uint64_t *)&v140);
                  }
                  else if (*(_QWORD *)(*(_QWORD *)&v135[0] + 8) != v64)
                  {
                    v80 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a4, (uint64_t *)(*(_QWORD *)&v135[0] + 8));
                    v139 = v64;
                    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v135, (uint64_t)(v80 + 3), &v139);
                  }
                  while (++v72 != v74)
                  {
                    if ((*v72 | 8) != 0xFFFFFFFFFFFFFFF8)
                      goto LABEL_95;
                  }
                  v72 = v74;
LABEL_95:
                  ;
                }
                while (v72 != (uint64_t *)v75);
              }
            }
            else if ((uint64_t *)v75 != v71)
            {
              do
              {
                v140 = (_QWORD *)*v72;
                v76 = (uint64_t)v140;
                *(_QWORD *)&v135[0] = 0;
                if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(*(uint64_t *)&v141[0], v141[1], (uint64_t)v140, v135) & 1) == 0)*llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>((uint64_t)v141, (uint64_t *)&v140, *(_QWORD **)&v135[0]) = v76;
                while (++v72 != v74)
                {
                  if ((*v72 | 8) != 0xFFFFFFFFFFFFFFF8)
                    goto LABEL_79;
                }
                v72 = v74;
LABEL_79:
                ;
              }
              while (v72 != (uint64_t *)v75);
            }
            v81 = DWORD2(v141[0]);
            if (DWORD2(v141[0]))
            {
              v82 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v64 + 32, v67);
              MEMORY[0x24BD1B398](v82[1], 8);
              v83 = 0;
              v82[1] = *(_QWORD *)&v141[0];
              *((_DWORD *)v82 + 4) = v81;
              v84 = *(_QWORD *)((char *)v141 + 12);
              v141[0] = 0uLL;
              *(_QWORD *)((char *)v82 + 20) = v84;
            }
            else
            {
              v83 = *(_QWORD *)&v141[0];
            }
            v7 = v129;
            v10 = v69;
            MEMORY[0x24BD1B398](v83, 8);
            while (1)
            {
              v67 += 4;
              if (v67 == (uint64_t *)v68)
                break;
              if ((*v67 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                if (v67 != (uint64_t *)v68)
                  goto LABEL_71;
                break;
              }
            }
          }
        }
      }
LABEL_103:
      v5 += 48;
    }
    while (v5 != v10);
  }
  memset(v135, 0, sizeof(v135));
  v85 = a4;
  if (*(_DWORD *)(a4 + 8))
  {
    v86 = *(_QWORD *)a4;
    v87 = *(unsigned int *)(a4 + 16);
    v88 = *(uint64_t **)a4;
    if ((_DWORD)v87)
    {
      v89 = 72 * v87;
      v88 = *(uint64_t **)a4;
      while ((*v88 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v88 += 9;
        v89 -= 72;
        if (!v89)
          goto LABEL_122;
      }
    }
    v90 = (uint64_t *)(v86 + 72 * v87);
    if (v88 != v90)
    {
      v91 = *v88;
LABEL_112:
      if (*(_DWORD *)(v91 + 40))
      {
        *(_QWORD *)&v141[0] = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(v86, v87, v91, v141))
        {
          if (*(uint64_t **)&v141[0] != v90 && *(_DWORD *)(*(_QWORD *)&v141[0] + 32))
          {
            v92 = *v88 + 32;
            if (v92 != *(_QWORD *)&v141[0] + 48)
              llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::copyFrom(*(_QWORD *)&v141[0] + 48, v92);
            std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(v135, v88);
          }
        }
      }
      while (1)
      {
        v88 += 9;
        if (v88 == v90)
          break;
        v91 = *v88;
        if ((*v88 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v88 != v90)
            goto LABEL_112;
          break;
        }
      }
    }
  }
LABEL_122:
  std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::deque((uint64_t)&v131, v135);
  for (i = v134; v134; i = v134)
  {
    v94 = (*(_QWORD **)((char *)v132 + ((v133 >> 6) & 0x3FFFFFFFFFFFFF8)))[v133 & 0x1FF];
    ++v133;
    v134 = i - 1;
    if (v133 >= 0x400)
    {
      operator delete(*v132++);
      v133 -= 512;
    }
    *(_QWORD *)&v141[0] = v94;
    v95 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(v85, (uint64_t *)v141);
    v96 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v95 + 3));
    v98 = v95[3];
    v99 = (uint64_t *)(v98 + 8 * *((unsigned int *)v95 + 10));
    if (v99 != v96)
    {
      v100 = v96;
      v101 = v97;
      v122 = (uint64_t *)(v98 + 8 * *((unsigned int *)v95 + 10));
      v123 = v95;
      do
      {
        v140 = 0;
        v140 = (_QWORD *)*v100;
        *(_QWORD *)&v141[0] = 0;
        v102 = *(_QWORD *)v85;
        v103 = *(_DWORD *)(v85 + 16);
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)v85, v103, (uint64_t)v140, v141))v104 = *(_QWORD *)&v141[0];
        else
          v104 = v102 + 72 * v103;
        v105 = v104 + 8;
        if (v104 == v102 + 72 * v103)
          v105 = 0;
        v128 = v105;
        v130 = v102 + 72 * v103;
        if (*((_DWORD *)v95 + 14))
        {
          v106 = *((unsigned int *)v95 + 16);
          if ((_DWORD)v106)
          {
            v107 = 32 * v106;
            v108 = v95[6];
            while ((*(_QWORD *)v108 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v108 += 32;
              v107 -= 32;
              if (!v107)
                goto LABEL_161;
            }
          }
          else
          {
            v108 = v95[6];
          }
          v109 = v95[6] + 32 * v106;
          if (v108 == v109)
            goto LABEL_161;
          do
          {
            v110 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct((uint64_t)(v140 + 4), (uint64_t *)v108);
            v111 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v108 + 8);
            v113 = *(_QWORD *)(v108 + 8) + 8 * *(unsigned int *)(v108 + 24);
            if ((uint64_t *)v113 != v111)
            {
              v114 = v111;
              v115 = v112;
              v116 = 0;
              v117 = (uint64_t)(v110 + 1);
              do
              {
                v139 = *v114;
                llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v141, v117, &v139);
                if (LOBYTE(v141[1]))
                  v118 = v104 == v130;
                else
                  v118 = 1;
                if (!v118)
                {
                  if (!v116)
                  {
                    if (!*(_DWORD *)(v128 + 48))
                      std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(&v131, &v140);
                    v116 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v128 + 40, (uint64_t *)v108)+ 1;
                  }
                  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v141, (uint64_t)v116, &v139);
                }
                while (++v114 != v115)
                {
                  if ((*v114 | 8) != 0xFFFFFFFFFFFFFFF8)
                    goto LABEL_155;
                }
                v114 = v115;
LABEL_155:
                ;
              }
              while (v114 != (uint64_t *)v113);
            }
            v108 += 32;
            v95 = v123;
            v85 = a4;
            v99 = v122;
            if (v108 == v109)
              break;
            while ((*(_QWORD *)v108 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v108 += 32;
              if (v108 == v109)
                goto LABEL_161;
            }
          }
          while (v108 != v109);
        }
LABEL_161:
        while (++v100 != v101)
        {
          if ((*v100 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_165;
        }
        v100 = v101;
LABEL_165:
        ;
      }
      while (v100 != v99);
    }
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::clear((uint64_t)(v95 + 6));
  }
  std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::~deque[abi:nn180100]((uint64_t)&v131);
  std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::~deque[abi:nn180100]((uint64_t)v135);
  return MEMORY[0x24BD1B398](v136, 8);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::find(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v4))return v4;
  else
    return *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
}

void std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  int64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  uint64_t v27;
  void *v28;
  void *v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *i;
  char *v34;
  __int128 v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  char *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  uint64_t *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  char *v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char *v66;
  int64_t v67;
  unint64_t v68;
  char *v69;
  uint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  char *v77;
  void *v78;
  __int128 v79;
  __int128 v80;
  _QWORD *v81;

  v4 = (char *)a1[1];
  v5 = (char *)a1[2];
  v6 = v5 - v4;
  if (v5 == v4)
    v7 = 0;
  else
    v7 = ((v5 - v4) << 6) - 1;
  v9 = a1[4];
  v8 = a1[5];
  v10 = v8 + v9;
  if (v7 == v8 + v9)
  {
    if (v9 < 0x200)
    {
      v24 = v6 >> 3;
      v25 = (char *)a1[3];
      v26 = (char *)*a1;
      v27 = (uint64_t)&v25[-*a1];
      if (v6 >> 3 >= (unint64_t)(v27 >> 3))
      {
        v30 = v27 >> 2;
        if (v25 == v26)
          v31 = 1;
        else
          v31 = v30;
        v81 = a1 + 3;
        *(_QWORD *)&v79 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v31);
        *((_QWORD *)&v79 + 1) = v79 + 8 * v24;
        *(_QWORD *)&v80 = *((_QWORD *)&v79 + 1);
        *((_QWORD *)&v80 + 1) = v79 + 8 * v32;
        v78 = operator new(0x1000uLL);
        std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_back(&v79, &v78);
        for (i = (_QWORD *)a1[2];
              i != (_QWORD *)a1[1];
              std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_front((uint64_t)&v79, i))
        {
          --i;
        }
        v34 = (char *)*a1;
        v35 = v80;
        *(_OWORD *)a1 = v79;
        *((_OWORD *)a1 + 1) = v35;
        if (v34)
          operator delete(v34);
        goto LABEL_35;
      }
      v28 = operator new(0x1000uLL);
      v29 = v28;
      if (v25 == v5)
      {
        if (v4 == v26)
        {
          if (v5 == v4)
            v46 = 1;
          else
            v46 = (v25 - v4) >> 2;
          v47 = 2 * v46;
          v48 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v46);
          v4 = &v48[(v47 + 6) & 0xFFFFFFFFFFFFFFF8];
          v50 = (uint64_t *)a1[1];
          v51 = v4;
          v52 = a1[2] - (_QWORD)v50;
          if (v52)
          {
            v51 = &v4[v52 & 0xFFFFFFFFFFFFFFF8];
            v53 = 8 * (v52 >> 3);
            v54 = v4;
            do
            {
              v55 = *v50++;
              *(_QWORD *)v54 = v55;
              v54 += 8;
              v53 -= 8;
            }
            while (v53);
          }
          v56 = (char *)*a1;
          *a1 = v48;
          a1[1] = v4;
          a1[2] = v51;
          a1[3] = &v48[8 * v49];
          if (v56)
          {
            operator delete(v56);
            v4 = (char *)a1[1];
          }
        }
        *((_QWORD *)v4 - 1) = v29;
        v57 = (char *)a1[1];
        v58 = (char *)a1[2];
        a1[1] = v57 - 8;
        v59 = *((_QWORD *)v57 - 1);
        a1[1] = v57;
        if (v58 == (char *)a1[3])
        {
          v60 = (uint64_t)&v57[-*a1];
          if ((unint64_t)v57 <= *a1)
          {
            if (v58 == (char *)*a1)
              v68 = 1;
            else
              v68 = (uint64_t)&v58[-*a1] >> 2;
            v69 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v68);
            v71 = &v69[8 * (v68 >> 2)];
            v72 = (uint64_t *)a1[1];
            v58 = v71;
            v73 = a1[2] - (_QWORD)v72;
            if (v73)
            {
              v58 = &v71[v73 & 0xFFFFFFFFFFFFFFF8];
              v74 = 8 * (v73 >> 3);
              v75 = &v69[8 * (v68 >> 2)];
              do
              {
                v76 = *v72++;
                *(_QWORD *)v75 = v76;
                v75 += 8;
                v74 -= 8;
              }
              while (v74);
            }
            v77 = (char *)*a1;
            *a1 = v69;
            a1[1] = v71;
            a1[2] = v58;
            a1[3] = &v69[8 * v70];
            if (v77)
            {
              operator delete(v77);
              v58 = (char *)a1[2];
            }
          }
          else
          {
            v61 = v60 >> 3;
            v16 = v60 >> 3 < -1;
            v62 = (v60 >> 3) + 2;
            if (v16)
              v63 = v62;
            else
              v63 = v61 + 1;
            v64 = -(v63 >> 1);
            v65 = v63 >> 1;
            v66 = &v57[-8 * v65];
            v67 = v58 - v57;
            if (v58 != v57)
            {
              memmove(&v57[-8 * v65], v57, v58 - v57);
              v57 = (char *)a1[1];
            }
            v58 = &v66[v67];
            a1[1] = &v57[8 * v64];
            a1[2] = &v66[v67];
          }
        }
        *(_QWORD *)v58 = v59;
      }
      else
      {
        *(_QWORD *)v5 = v28;
      }
    }
    else
    {
      a1[4] = v9 - 512;
      v13 = *(_QWORD *)v4;
      v11 = v4 + 8;
      v12 = v13;
      a1[1] = v11;
      if (v5 == (char *)a1[3])
      {
        v14 = (uint64_t)&v11[-*a1];
        if ((unint64_t)v11 <= *a1)
        {
          if (v5 == (char *)*a1)
            v36 = 1;
          else
            v36 = (uint64_t)&v5[-*a1] >> 2;
          v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v36);
          v39 = &v37[8 * (v36 >> 2)];
          v40 = (uint64_t *)a1[1];
          v5 = v39;
          v41 = a1[2] - (_QWORD)v40;
          if (v41)
          {
            v5 = &v39[v41 & 0xFFFFFFFFFFFFFFF8];
            v42 = 8 * (v41 >> 3);
            v43 = &v37[8 * (v36 >> 2)];
            do
            {
              v44 = *v40++;
              *(_QWORD *)v43 = v44;
              v43 += 8;
              v42 -= 8;
            }
            while (v42);
          }
          v45 = (char *)*a1;
          *a1 = v37;
          a1[1] = v39;
          a1[2] = v5;
          a1[3] = &v37[8 * v38];
          if (v45)
          {
            operator delete(v45);
            v5 = (char *)a1[2];
          }
        }
        else
        {
          v15 = v14 >> 3;
          v16 = v14 >> 3 < -1;
          v17 = (v14 >> 3) + 2;
          if (v16)
            v18 = v17;
          else
            v18 = v15 + 1;
          v19 = -(v18 >> 1);
          v20 = v18 >> 1;
          v21 = &v11[-8 * v20];
          v22 = v5 - v11;
          if (v5 != v11)
          {
            memmove(&v11[-8 * v20], v11, v5 - v11);
            v5 = (char *)a1[1];
          }
          v23 = &v5[8 * v19];
          v5 = &v21[v22];
          a1[1] = v23;
          a1[2] = &v21[v22];
        }
      }
      *(_QWORD *)v5 = v12;
    }
    a1[2] += 8;
LABEL_35:
    v4 = (char *)a1[1];
    v8 = a1[5];
    v10 = a1[4] + v8;
  }
  *(_QWORD *)(*(_QWORD *)&v4[(v10 >> 6) & 0x3FFFFFFFFFFFFF8] + 8 * (v10 & 0x1FF)) = *a2;
  a1[5] = v8 + 1;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::erase(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;
  _QWORD *v5;

  v5 = 0;
  {
    v4 = v5;
    MEMORY[0x24BD1B398](v5[1], 8);
    *v4 = -8192;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

uint64_t llvm::orc::ExecutionSession::makeJDClosedError(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  void **v16;
  void **v17;
  uint64_t v18;
  void **v19;
  void **v20;
  _QWORD *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  size_t v32;
  void *p_p;
  char *v34;
  char *v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  int v45;
  void *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  void *__p;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59[2];
  int v60;
  uint64_t v61[2];
  int v62;

  v56 = 0;
  v57 = 0;
  v58 = 0;
  if (*(_DWORD *)(a2 + 16))
  {
    v6 = *(unsigned int *)(a2 + 24);
    if ((_DWORD)v6)
    {
      v7 = 16 * v6;
      v8 = *(uint64_t **)(a2 + 8);
      while ((*v8 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v8 += 2;
        v7 -= 16;
        if (!v7)
          goto LABEL_19;
      }
    }
    else
    {
      v8 = *(uint64_t **)(a2 + 8);
    }
    v9 = *(_QWORD *)(a2 + 8) + 16 * v6;
    if (v8 != (uint64_t *)v9)
    {
      v10 = *v8;
LABEL_10:
      v59[0] = v10;
      if ((unint64_t)(v10 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v11 = (unint64_t *)(v10 + 8);
        do
          v12 = __ldaxr(v11);
        while (__stlxr(v12 + 1, v11));
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v56, v59, (uint64_t)v61);
      if ((unint64_t)(v59[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v13 = (unint64_t *)(v59[0] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
      }
      while (1)
      {
        v8 += 2;
        if (v8 == (uint64_t *)v9)
          break;
        v10 = *v8;
        if ((*v8 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v8 != (uint64_t *)v9)
            goto LABEL_10;
          break;
        }
      }
    }
  }
LABEL_19:
  v53 = 0;
  v54 = 0;
  v55 = 0;
  v61[0] = a3;
  v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(a2 + 32, v61);
  v16 = (void **)llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(v15 + 1));
  v18 = v15[1] + 8 * *((unsigned int *)v15 + 6);
  if ((void **)v18 != v16)
  {
    v19 = v16;
    v20 = v17;
    do
    {
      v59[0] = a3;
      v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(&v53, v59);
      v22 = (unint64_t *)*v19;
      __p = v22;
      if ((unint64_t)v22 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v23 = v22 + 1;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 + 1, v23));
      }
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v21 + 1), &__p, (uint64_t)v61);
      if ((char *)__p - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL)
      {
        v25 = (unint64_t *)((char *)__p + 8);
        do
          v26 = __ldaxr(v25);
        while (__stlxr(v26 - 1, v25));
      }
      while (++v19 != v20)
      {
        if (((unint64_t)*v19 | 8) != 0xFFFFFFFFFFFFFFF8)
          goto LABEL_31;
      }
      v19 = v20;
LABEL_31:
      ;
    }
    while (v19 != (void **)v18);
  }
  v27 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 72);
  v29 = *(_QWORD *)(v27 + 8);
  v28 = *(_QWORD *)(v27 + 16);
  if (v28)
  {
    v30 = (unint64_t *)(v28 + 8);
    do
      v31 = __ldxr(v30);
    while (__stxr(v31 + 1, v30));
  }
  if (*(char *)(a3 + 31) >= 0)
    v32 = *(unsigned __int8 *)(a3 + 31);
  else
    v32 = *(_QWORD *)(a3 + 16);
  p_p = &__p;
  std::string::basic_string[abi:nn180100]((uint64_t)&__p, v32 + 10);
  if (v52 < 0)
    p_p = __p;
  if (v32)
  {
    v36 = *(char **)(a3 + 8);
    v35 = (char *)(a3 + 8);
    v34 = v36;
    if (v35[23] >= 0)
      v37 = v35;
    else
      v37 = v34;
    memmove(p_p, v37, v32);
  }
  strcpy((char *)p_p + v32, " is closed");
  v38 = operator new();
  v39 = v38;
  v40 = *(unsigned int **)a2;
  if (*(_QWORD *)a2)
  {
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = v56;
  v56 = 0;
  v43 = v58;
  v58 = 0;
  v44 = v53;
  v45 = v55;
  v55 = 0;
  v46 = __p;
  *(_QWORD *)(v38 + 88) = v52;
  *(_QWORD *)(v38 + 95) = *(_QWORD *)((char *)&v52 + 7);
  v47 = HIBYTE(v52);
  v53 = 0;
  __p = 0;
  v52 = 0uLL;
  *(_QWORD *)v38 = off_251C145D8;
  *(_QWORD *)(v38 + 8) = v29;
  *(_QWORD *)(v38 + 16) = v28;
  *(_QWORD *)(v38 + 24) = v40;
  *(_QWORD *)(v38 + 32) = v42;
  v61[0] = 0;
  v48 = v57;
  v57 = 0;
  *(_QWORD *)(v38 + 40) = v48;
  v61[1] = 0;
  *(_DWORD *)(v38 + 48) = v43;
  v62 = 0;
  *(_QWORD *)(v38 + 56) = v44;
  v59[0] = 0;
  v49 = v54;
  v54 = 0;
  *(_QWORD *)(v38 + 64) = v49;
  v59[1] = 0;
  *(_DWORD *)(v38 + 72) = v45;
  v60 = 0;
  *(_QWORD *)(v38 + 80) = v46;
  *(_BYTE *)(v38 + 103) = v47;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)v59);
  MEMORY[0x24BD1B398](v59[0], 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)v61);
  *a1 = v39;
  if (SHIBYTE(v52) < 0)
    operator delete(__p);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)&v53);
  MEMORY[0x24BD1B398](v53, 8);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v56);
}

void llvm::orc::ExecutionSession::IL_emit(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  char v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  void **v17;
  void **v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  void **v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void **v43;
  unint64_t *v44;
  unint64_t v45;
  void ***v46;
  void ***v47;
  unint64_t *v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t *v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t *v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  char v73;
  unint64_t *v74;
  unint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  unint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  unint64_t *v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  void **v114;
  unint64_t *v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  unsigned int v119;
  _DWORD *v120;
  unint64_t *v121;
  unint64_t v122;
  uint64_t *v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t *v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  void **v139;
  unint64_t *v140;
  unint64_t v141;
  int v142;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t i;
  char *v153;
  _QWORD *v154;
  uint64_t *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t *v160;
  char *v161;
  char *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t *v172;
  _QWORD *v173;
  uint64_t v174;
  uint64_t v175;
  void **v176;
  uint64_t v177;
  unint64_t *v178;
  unint64_t v179;
  _QWORD *v180;
  unint64_t *v181;
  unint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v189;
  uint64_t v190;
  int v191;
  uint64_t v192;
  std::__shared_weak_count *v193;
  int v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  uint64_t v200;
  char *v201;
  unint64_t *v202;
  unint64_t v203;
  _QWORD *v204;
  _QWORD *v205;
  unint64_t *v206;
  unint64_t v207;
  char v208;
  unint64_t *v209;
  unint64_t v210;
  _QWORD *v211;
  unint64_t *v212;
  unint64_t v213;
  uint64_t v214;
  uint64_t *v215;
  uint64_t *v216;
  uint64_t v217;
  void **v218;
  unint64_t *v219;
  unint64_t v220;
  unint64_t *v221;
  unint64_t v222;
  unint64_t v223;
  void **v224;
  unint64_t *v225;
  unint64_t v226;
  unint64_t *v227;
  unint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  std::__shared_weak_count *v233;
  void ***v234;
  void ***v235;
  uint64_t v236;
  void ***v237;
  void ***v238;
  uint64_t v239;
  void **v240;
  unint64_t *v241;
  unint64_t v242;
  _QWORD *v243;
  unint64_t *v244;
  unint64_t v245;
  unint64_t *p_shared_owners;
  unint64_t v247;
  uint64_t v248;
  uint64_t *v249;
  char *v250;
  unint64_t *v251;
  unint64_t v252;
  _QWORD *v253;
  _QWORD *v254;
  unint64_t *v255;
  unint64_t v256;
  void **v257;
  unint64_t *v258;
  unint64_t v259;
  int v260;
  uint64_t v261;
  unsigned int v262;
  char *v263;
  unint64_t *v264;
  unint64_t v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t v268;
  void **v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t *v272;
  unint64_t v273;
  unint64_t v274;
  void **v275;
  unint64_t *v276;
  unint64_t v277;
  unint64_t *v278;
  unint64_t v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  _QWORD *v283;
  char *v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  uint64_t *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v293;
  _DWORD *v294;
  uint64_t *v295;
  uint64_t *v296;
  _QWORD *v297;
  uint64_t v298;
  _QWORD *v299;
  _QWORD *v300;
  uint64_t v301;
  char *v302;
  uint64_t *v303;
  uint64_t *v304;
  char *v305;
  uint64_t v306;
  _QWORD *v307;
  uint64_t v308;
  std::__shared_weak_count *v309;
  std::__shared_weak_count *v310;
  uint64_t v311;
  void **v312;
  unint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  uint64_t v317;
  uint64_t v318;
  _QWORD v319[2];
  uint64_t v320;
  uint64_t v321;
  _BYTE v322[32];
  __int128 v323;
  uint64_t v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  uint64_t v328;
  int v329;
  __int128 v330;
  uint64_t v331;
  uint64_t v332[2];
  int v333;
  void **v334[2];
  int v335;
  __int128 v336;
  _QWORD v337[6];
  char *v338;
  uint64_t v339;
  _BYTE v340[16];
  __int16 v341;
  uint64_t v342;

  v342 = *MEMORY[0x24BDAC8D0];
  v4 = atomic_load((unint64_t *)(a1[1] + 8));
  if ((v4 & 1) != 0)
  {
    v9 = (_QWORD *)operator new();
    v10 = (unsigned int *)a1[1];
    if (v10)
    {
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
    }
    *v9 = &off_251C14538;
    v9[1] = v10;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v9;
    return;
  }
  v5 = *a1;
  if (*(_DWORD *)(*a1 + 40))
  {
    std::operator+<char>();
    v6 = std::string::append((std::string *)v322, " is defunct");
    v7 = v6->__r_.__value_.__r.__words[2];
    v336 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v337[0] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    getErrorErrorCat();
    v8 = operator new();
    v341 = 260;
    v338 = (char *)&v336;
    *(_QWORD *)v8 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)&v338, (std::string *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v8 + 48) = 1;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v8;
    if (SHIBYTE(v337[0]) < 0)
      operator delete((void *)v336);
    if ((v322[23] & 0x80000000) != 0)
      operator delete(*(void **)v322);
    return;
  }
  v12 = a2;
  v323 = 0u;
  memset(v322, 0, sizeof(v322));
  if (!*(_DWORD *)(a2 + 8))
    goto LABEL_204;
  v13 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v13)
  {
    v14 = 72 * v13;
    v15 = *(_QWORD **)a2;
    while ((*v15 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v15 += 9;
      v14 -= 72;
      if (!v14)
        goto LABEL_204;
    }
  }
  else
  {
    v15 = *(_QWORD **)a2;
  }
  v16 = *(_QWORD *)a2 + 72 * v13;
  if (v15 == (_QWORD *)v16)
  {
LABEL_204:
    v17 = 0;
LABEL_205:
    v18 = v17;
LABEL_206:
    *((_QWORD *)&v323 + 1) = 0;
    v147 = (char *)v18 - (char *)v17;
    if (v147 >= 0x11)
    {
      do
      {
        operator delete(*v17);
        v17 = (void **)(*(_QWORD *)&v322[8] + 8);
        *(_QWORD *)&v322[8] = v17;
        v147 = *(_QWORD *)&v322[16] - (_QWORD)v17;
      }
      while (*(_QWORD *)&v322[16] - (_QWORD)v17 > 0x10uLL);
    }
    if (v147 >> 3 == 1)
    {
      v148 = 256;
    }
    else
    {
      if (v147 >> 3 != 2)
      {
LABEL_213:
        if (*(_DWORD *)(v12 + 8))
        {
          v149 = *(unsigned int *)(v12 + 16);
          if ((_DWORD)v149)
          {
            v150 = 72 * v149;
            v151 = *(_QWORD *)v12;
            while ((*(_QWORD *)v151 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v151 += 72;
              v150 -= 72;
              if (!v150)
                goto LABEL_218;
            }
          }
          else
          {
            v151 = *(_QWORD *)v12;
          }
          v186 = *(_QWORD *)v12 + 72 * v149;
LABEL_276:
          if (v151 != v186)
          {
            if (*(_DWORD *)(v151 + 32))
            {
              v187 = *(_QWORD *)v151;
              if (*(_DWORD *)(*(_QWORD *)v151 + 40))
              {
                if (v187 + 32 != v151 + 48 && *(_DWORD *)(v151 + 56) == 0)
                  llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::copyFrom(v151 + 48, v187 + 32);
                std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(v322, (_QWORD *)v151);
              }
            }
            while (1)
            {
              v151 += 72;
              if (v151 == v186)
                break;
              if ((*(_QWORD *)v151 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_276;
            }
          }
        }
LABEL_218:
        std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::deque((uint64_t)&v311, v322);
        for (i = v314; v314; i = v314)
        {
          v153 = (char *)(*(_QWORD **)((char *)v312 + ((v313 >> 6) & 0x3FFFFFFFFFFFFF8)))[v313 & 0x1FF];
          ++v313;
          v314 = i - 1;
          if (v313 >= 0x400)
          {
            operator delete(*v312++);
            v313 -= 512;
          }
          v338 = v153;
          v154 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(v12, (uint64_t *)&v338);
          v155 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v154 + 3));
          v157 = v154[3];
          v158 = (uint64_t *)(v157 + 8 * *((unsigned int *)v154 + 10));
          if (v158 != v155)
          {
            v159 = v155;
            v160 = v156;
            v295 = (uint64_t *)(v157 + 8 * *((unsigned int *)v154 + 10));
            v297 = v154;
            do
            {
              v332[0] = 0;
              v332[0] = *v159;
              v338 = 0;
              if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)v12, *(_DWORD *)(v12 + 16), v332[0], &v338))v161 = v338;
              else
                v161 = (char *)(*(_QWORD *)v12 + 72 * *(unsigned int *)(v12 + 16));
              v162 = v161 + 8;
              v305 = v161;
              v308 = *(_QWORD *)v12 + 72 * *(unsigned int *)(v12 + 16);
              if (v161 == (char *)v308)
                v162 = 0;
              v302 = v162;
              if (*((_DWORD *)v154 + 14))
              {
                v163 = *((unsigned int *)v154 + 16);
                if ((_DWORD)v163)
                {
                  v164 = 32 * v163;
                  v165 = v154[6];
                  while ((*(_QWORD *)v165 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v165 += 32;
                    v164 -= 32;
                    if (!v164)
                      goto LABEL_262;
                  }
                }
                else
                {
                  v165 = v154[6];
                }
                v166 = v154[6] + 32 * v163;
                if (v165 == v166)
                  goto LABEL_262;
                v298 = v166;
                do
                {
                  v167 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v332[0] + 32, (uint64_t *)v165);
                  v168 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v165 + 8);
                  v170 = *(_QWORD *)(v165 + 8) + 8 * *(unsigned int *)(v165 + 24);
                  if ((uint64_t *)v170 != v168)
                  {
                    v171 = v168;
                    v172 = v169;
                    v173 = 0;
                    v174 = (uint64_t)(v167 + 1);
                    do
                    {
                      v175 = *v171;
                      *(_QWORD *)&v330 = *v171;
                      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v338, v174, (uint64_t *)&v330);
                      if (v340[0])
                      {
                        v176 = (void **)v332[0];
                        v177 = *(_QWORD *)v165;
                        *(_QWORD *)&v336 = v175;
                        if ((unint64_t)(v175 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                        {
                          v178 = (unint64_t *)(v175 + 8);
                          do
                            v179 = __ldaxr(v178);
                          while (__stlxr(v179 + 1, v178));
                        }
                        v180 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct((uint64_t *)(v177 + 160), &v336);
                        v334[0] = v176;
                        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v338, (uint64_t)(v180 + 3), (uint64_t *)v334);
                        if ((unint64_t)(v336 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                        {
                          v181 = (unint64_t *)(v336 + 8);
                          do
                            v182 = __ldaxr(v181);
                          while (__stlxr(v182 - 1, v181));
                        }
                        if (v305 != (char *)v308)
                        {
                          if (!v173)
                          {
                            if (!*((_DWORD *)v302 + 12))
                              std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(&v311, v332);
                            v173 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct((uint64_t)(v302 + 40), (uint64_t *)v165)+ 1;
                          }
                          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v338, (uint64_t)v173, (uint64_t *)&v330);
                        }
                      }
                      while (++v171 != v172)
                      {
                        if ((*v171 | 8) != 0xFFFFFFFFFFFFFFF8)
                          goto LABEL_256;
                      }
                      v171 = v172;
LABEL_256:
                      ;
                    }
                    while (v171 != (uint64_t *)v170);
                  }
                  v165 += 32;
                  v154 = v297;
                  v12 = a2;
                  v158 = v295;
                  if (v165 == v298)
                    break;
                  while ((*(_QWORD *)v165 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v165 += 32;
                    if (v165 == v298)
                      goto LABEL_262;
                  }
                }
                while (v165 != v298);
              }
LABEL_262:
              while (++v159 != v160)
              {
                if ((*v159 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_266;
              }
              v159 = v160;
LABEL_266:
              ;
            }
            while (v159 != v158);
          }
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::clear((uint64_t)(v154 + 6));
        }
        std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::~deque[abi:nn180100]((uint64_t)&v311);
        *((_QWORD *)&v336 + 1) = 0;
        v337[0] = 0;
        *(_QWORD *)&v336 = (char *)&v336 + 8;
        if (!*(_DWORD *)(v12 + 8))
          goto LABEL_425;
        v183 = *(unsigned int *)(v12 + 16);
        if ((_DWORD)v183)
        {
          v184 = 72 * v183;
          v185 = *(uint64_t **)v12;
          while ((*v185 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v185 += 9;
            v184 -= 72;
            if (!v184)
              goto LABEL_425;
          }
        }
        else
        {
          v185 = *(uint64_t **)v12;
        }
        v189 = *(_QWORD *)v12 + 72 * v183;
        if (v185 == (uint64_t *)v189)
        {
LABEL_425:
          v283 = 0;
          v285 = 0;
          v284 = (char *)&v336 + 8;
        }
        else
        {
          v190 = *v185;
LABEL_292:
          v191 = *(_DWORD *)(v190 + 40);
          v192 = v185[1];
          v193 = (std::__shared_weak_count *)v185[2];
          v185[1] = 0;
          v185[2] = 0;
          v194 = *(_DWORD *)(v192 + 16);
          v195 = *(_QWORD *)v192;
          v196 = *(_QWORD **)(v192 + 8);
          v197 = *(unsigned int *)(v192 + 24);
          v198 = &v196[2 * v197];
          if (v191)
          {
            if (v194)
            {
              if ((_DWORD)v197)
              {
                v199 = 16 * v197;
                while ((*v196 | 8) == 0xFFFFFFFFFFFFFFF8)
                {
                  v196 += 2;
                  v199 -= 16;
                  if (!v199)
                    goto LABEL_342;
                }
              }
              if (v196 != v198)
              {
                v201 = (char *)*v196;
                v309 = v193;
                do
                {
                  v338 = v201;
                  if ((unint64_t)(v201 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                  {
                    v202 = (unint64_t *)(v201 + 8);
                    do
                      v203 = __ldaxr(v202);
                    while (__stlxr(v203 + 1, v202));
                  }
                  v204 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::FindAndConstruct(v195 + 112, (uint64_t *)&v338);
                  v205 = v204;
                  if ((unint64_t)(v338 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                  {
                    v206 = (unint64_t *)(v338 + 8);
                    do
                      v207 = __ldaxr(v206);
                    while (__stlxr(v207 - 1, v206));
                  }
                  v208 = *((_BYTE *)v204 + 18);
                  if ((v208 & 0x7F) == 4)
                    break;
                  *((_BYTE *)v204 + 18) = v208 & 0x80 | 4;
                  v338 = (char *)*v196;
                  if ((unint64_t)(v338 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                  {
                    v209 = (unint64_t *)(v338 + 8);
                    do
                      v210 = __ldaxr(v209);
                    while (__stlxr(v210 + 1, v209));
                  }
                  v211 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct((uint64_t *)(v195 + 160), &v338);
                  if ((unint64_t)(v338 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                  {
                    v212 = (unint64_t *)(v338 + 8);
                    do
                      v213 = __ldaxr(v212);
                    while (__stlxr(v213 - 1, v212));
                  }
                  v214 = (uint64_t)(v211 + 1);
                  std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>::operator=[abi:nn180100](v211 + 1, v192, (uint64_t)v193);
                  llvm::orc::JITDylib::MaterializingInfo::takeQueriesMeeting(&v338, v214, 4u);
                  v215 = (uint64_t *)v338;
                  v216 = (uint64_t *)v339;
                  while (v215 != v216)
                  {
                    v217 = *v215;
                    v218 = (void **)*v196;
                    v334[0] = v218;
                    if ((unint64_t)v218 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                    {
                      v219 = (unint64_t *)(v218 + 1);
                      do
                        v220 = __ldaxr(v219);
                      while (__stlxr(v220 + 1, v219));
                    }
                    llvm::orc::AsynchronousSymbolQuery::notifySymbolMetRequiredState(v217, v334, v205[1], *((_WORD *)v205 + 8));
                    if ((unint64_t)v334[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                    {
                      v221 = (unint64_t *)(v334[0] + 1);
                      do
                        v222 = __ldaxr(v221);
                      while (__stlxr(v222 - 1, v221));
                    }
                    v223 = *v215;
                    if (!*(_QWORD *)(*v215 + 80))
                    {
                      std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::__emplace_unique_key_args<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> const&>((uint64_t **)&v336, v223, *v215, v215[1]);
                      v223 = *v215;
                    }
                    v224 = (void **)*v196;
                    v334[0] = v224;
                    if ((unint64_t)v224 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                    {
                      v225 = (unint64_t *)(v224 + 1);
                      do
                        v226 = __ldaxr(v225);
                      while (__stlxr(v226 + 1, v225));
                    }
                    llvm::orc::AsynchronousSymbolQuery::removeQueryDependence(v223, v195, v334);
                    if ((unint64_t)v334[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                    {
                      v227 = (unint64_t *)(v334[0] + 1);
                      do
                        v228 = __ldaxr(v227);
                      while (__stlxr(v228 - 1, v227));
                    }
                    v215 += 2;
                  }
                  v334[0] = (void **)&v338;
                  std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](v334);
                  v196 += 2;
                  v193 = v309;
                  if (v196 == v198)
                    break;
                  while (1)
                  {
                    v201 = (char *)*v196;
                    if ((*v196 | 8) != 0xFFFFFFFFFFFFFFF8)
                      break;
                    v196 += 2;
                    if (v196 == v198)
                      goto LABEL_342;
                  }
                }
                while (v196 != v198);
              }
            }
LABEL_342:
            if (*(_DWORD *)(v192 + 40))
            {
              v229 = *(unsigned int *)(v192 + 48);
              if ((_DWORD)v229)
              {
                v230 = 32 * v229;
                v231 = *(uint64_t **)(v192 + 32);
                while ((*v231 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v231 += 4;
                  v230 -= 32;
                  if (!v230)
                    goto LABEL_367;
                }
              }
              else
              {
                v231 = *(uint64_t **)(v192 + 32);
              }
              v232 = *(_QWORD *)(v192 + 32) + 32 * v229;
              while (v231 != (uint64_t *)v232)
              {
                v233 = v193;
                v234 = (void ***)llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(v231 + 1));
                v236 = v231[1] + 8 * *((unsigned int *)v231 + 6);
                if ((void ***)v236 != v234)
                {
                  v237 = v234;
                  v238 = v235;
                  do
                  {
                    v239 = *v231;
                    v240 = *v237;
                    v334[0] = v240;
                    if ((unint64_t)v240 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                    {
                      v241 = (unint64_t *)(v240 + 1);
                      do
                        v242 = __ldaxr(v241);
                      while (__stlxr(v242 + 1, v241));
                    }
                    v243 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct((uint64_t *)(v239 + 160), v334);
                    v332[0] = v192;
                    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v338, (uint64_t)(v243 + 3), v332);
                    if ((unint64_t)v334[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                    {
                      v244 = (unint64_t *)(v334[0] + 1);
                      do
                        v245 = __ldaxr(v244);
                      while (__stlxr(v245 - 1, v244));
                    }
                    while (++v237 != v238)
                    {
                      if (((unint64_t)*v237 | 8) != 0xFFFFFFFFFFFFFFF8)
                        goto LABEL_363;
                    }
                    v237 = v238;
LABEL_363:
                    ;
                  }
                  while (v237 != (void ***)v236);
                }
                v231 += 4;
                v193 = v233;
                if (v231 == (uint64_t *)v232)
                  break;
                while ((*v231 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v231 += 4;
                  if (v231 == (uint64_t *)v232)
                    goto LABEL_367;
                }
              }
            }
LABEL_367:
            if (!v193)
              goto LABEL_421;
            p_shared_owners = (unint64_t *)&v193->__shared_owners_;
            do
              v247 = __ldaxr(p_shared_owners);
            while (__stlxr(v247 - 1, p_shared_owners));
          }
          else
          {
            if (v194)
            {
              if ((_DWORD)v197)
              {
                v200 = 16 * v197;
                while ((*v196 | 8) == 0xFFFFFFFFFFFFFFF8)
                {
                  v196 += 2;
                  v200 -= 16;
                  if (!v200)
                    goto LABEL_416;
                }
              }
              if (v196 != v198)
              {
                v248 = v195 + 112;
                v249 = (uint64_t *)(v195 + 160);
                v250 = (char *)*v196;
                v310 = v193;
                do
                {
                  v338 = v250;
                  if ((unint64_t)(v250 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                  {
                    v251 = (unint64_t *)(v250 + 8);
                    do
                      v252 = __ldaxr(v251);
                    while (__stlxr(v252 + 1, v251));
                  }
                  v253 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::FindAndConstruct(v248, (uint64_t *)&v338);
                  v254 = v253;
                  if ((unint64_t)(v338 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                  {
                    v255 = (unint64_t *)(v338 + 8);
                    do
                      v256 = __ldaxr(v255);
                    while (__stlxr(v256 - 1, v255));
                  }
                  *((_BYTE *)v253 + 18) = *((_BYTE *)v253 + 18) & 0x80 | 0x3F;
                  v257 = (void **)*v196;
                  v334[0] = v257;
                  if ((unint64_t)v257 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                  {
                    v258 = (unint64_t *)(v257 + 1);
                    do
                      v259 = __ldaxr(v258);
                    while (__stlxr(v259 + 1, v258));
                  }
                  v338 = 0;
                  v260 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v249, v334, &v338);
                  v261 = *(_QWORD *)(v195 + 160);
                  v262 = *(_DWORD *)(v195 + 176);
                  if (v260)
                    v263 = v338;
                  else
                    v263 = (char *)(v261 + 72 * v262);
                  if ((unint64_t)v334[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                  {
                    v264 = (unint64_t *)(v334[0] + 1);
                    do
                      v265 = __ldaxr(v264);
                    while (__stlxr(v265 - 1, v264));
                    v261 = *(_QWORD *)(v195 + 160);
                    v262 = *(_DWORD *)(v195 + 176);
                  }
                  if ((char *)(v261 + 72 * v262) != v263)
                  {
                    v303 = v249;
                    v306 = v248;
                    llvm::orc::JITDylib::MaterializingInfo::takeQueriesMeeting(&v338, (uint64_t)(v263 + 8), 0x3Fu);
                    v266 = (uint64_t *)v338;
                    v267 = (uint64_t *)v339;
                    while (v266 != v267)
                    {
                      v268 = *v266;
                      v269 = (void **)*v196;
                      v334[0] = v269;
                      if ((unint64_t)v269 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v270 = (unint64_t *)(v269 + 1);
                        do
                          v271 = __ldaxr(v270);
                        while (__stlxr(v271 + 1, v270));
                      }
                      llvm::orc::AsynchronousSymbolQuery::notifySymbolMetRequiredState(v268, v334, v254[1], *((_WORD *)v254 + 8));
                      if ((unint64_t)v334[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v272 = (unint64_t *)(v334[0] + 1);
                        do
                          v273 = __ldaxr(v272);
                        while (__stlxr(v273 - 1, v272));
                      }
                      v274 = *v266;
                      if (!*(_QWORD *)(*v266 + 80))
                      {
                        std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::__emplace_unique_key_args<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> const&>((uint64_t **)&v336, v274, *v266, v266[1]);
                        v274 = *v266;
                      }
                      v275 = (void **)*v196;
                      v334[0] = v275;
                      if ((unint64_t)v275 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v276 = (unint64_t *)(v275 + 1);
                        do
                          v277 = __ldaxr(v276);
                        while (__stlxr(v277 + 1, v276));
                      }
                      llvm::orc::AsynchronousSymbolQuery::removeQueryDependence(v274, v195, v334);
                      if ((unint64_t)v334[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v278 = (unint64_t *)(v334[0] + 1);
                        do
                          v279 = __ldaxr(v278);
                        while (__stlxr(v279 - 1, v278));
                      }
                      v266 += 2;
                    }
                    v334[0] = (void **)&v338;
                    std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](v334);
                    v338 = v263 + 48;
                    std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v338);
                    MEMORY[0x24BD1B398](*((_QWORD *)v263 + 3), 8);
                    std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(v263 + 8));
                    if ((unint64_t)(*(_QWORD *)v263 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                    {
                      v280 = (unint64_t *)(*(_QWORD *)v263 + 8);
                      do
                        v281 = __ldaxr(v280);
                      while (__stlxr(v281 - 1, v280));
                    }
                    *(_QWORD *)v263 = -16;
                    *(int32x2_t *)(v195 + 168) = vadd_s32(*(int32x2_t *)(v195 + 168), (int32x2_t)0x1FFFFFFFFLL);
                    v249 = v303;
                    v248 = v306;
                  }
                  v196 += 2;
                  v193 = v310;
                  if (v196 == v198)
                    break;
                  while (1)
                  {
                    v250 = (char *)*v196;
                    if ((*v196 | 8) != 0xFFFFFFFFFFFFFFF8)
                      break;
                    v196 += 2;
                    if (v196 == v198)
                      goto LABEL_416;
                  }
                }
                while (v196 != v198);
              }
            }
LABEL_416:
            if (!v193)
              goto LABEL_421;
            v282 = (unint64_t *)&v193->__shared_owners_;
            do
              v247 = __ldaxr(v282);
            while (__stlxr(v247 - 1, v282));
          }
          if (!v247)
          {
            ((void (*)(std::__shared_weak_count *))v193->__on_zero_shared)(v193);
            std::__shared_weak_count::__release_weak(v193);
          }
LABEL_421:
          while (1)
          {
            v185 += 9;
            if (v185 == (uint64_t *)v189)
              break;
            v190 = *v185;
            if ((*v185 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              if (v185 != (uint64_t *)v189)
                goto LABEL_292;
              break;
            }
          }
          v283 = (_QWORD *)*((_QWORD *)&v336 + 1);
          v284 = (char *)v336;
          v285 = v337[0];
        }
        *(_BYTE *)(a3 + 24) &= ~1u;
        *(_QWORD *)a3 = v284;
        *(_QWORD *)(a3 + 8) = v283;
        v286 = a3 + 8;
        *(_QWORD *)(a3 + 16) = v285;
        if (v285)
        {
          v283[2] = v286;
          *(_QWORD *)&v336 = (char *)&v336 + 8;
          *((_QWORD *)&v336 + 1) = 0;
          v337[0] = 0;
          v283 = 0;
        }
        else
        {
          *(_QWORD *)a3 = v286;
        }
        std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v336, v283);
        goto LABEL_430;
      }
      v148 = 512;
    }
    *(_QWORD *)&v323 = v148;
    goto LABEL_213;
  }
LABEL_18:
  std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::push_back(v322, v15);
  while (1)
  {
    v15 += 9;
    if (v15 == (_QWORD *)v16)
      break;
    if ((*v15 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if (v15 != (_QWORD *)v16)
        goto LABEL_18;
      break;
    }
  }
  v18 = *(void ***)&v322[16];
  v17 = *(void ***)&v322[8];
  if (*(_QWORD *)&v322[16] == *(_QWORD *)&v322[8])
    goto LABEL_205;
  v19 = (_QWORD *)(*(_QWORD *)&v322[8] + 8 * ((unint64_t)v323 >> 9));
  v20 = (uint64_t *)(*v19 + 8 * (v323 & 0x1FF));
  v301 = *(_QWORD *)(*(_QWORD *)&v322[8] + (((*((_QWORD *)&v323 + 1) + (_QWORD)v323) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*((_QWORD *)&v323 + 1) + v323) & 0x1FF);
  if (v20 == (uint64_t *)v301)
    goto LABEL_206;
  v296 = a1 + 2;
  v288 = (uint64_t *)(v5 + 160);
  v290 = v5;
  while (1)
  {
    v321 = 0;
    v304 = v20;
    v321 = *v20;
    v21 = v321;
    v307 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(v12, &v321)+ 1;
    v338 = v340;
    v339 = 0x600000000;
    if (!*(_DWORD *)(v21 + 40))
      goto LABEL_143;
    v22 = *(unsigned int *)(v21 + 48);
    if ((_DWORD)v22)
    {
      v23 = 32 * v22;
      v24 = *(_QWORD *)(v21 + 32);
      while ((*(_QWORD *)v24 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v24 += 32;
        v23 -= 32;
        if (!v23)
          goto LABEL_143;
      }
    }
    else
    {
      v24 = *(_QWORD *)(v21 + 32);
    }
    v25 = *(_QWORD *)(v21 + 32) + 32 * v22;
    if (v24 == v25)
      goto LABEL_143;
    v26 = *(_QWORD *)v24;
    v299 = v19;
LABEL_34:
    if (*(_DWORD *)(v26 + 40))
      break;
    v318 = 0;
    memset(v319, 0, 12);
    *(_QWORD *)&v336 = v337;
    *((_QWORD *)&v336 + 1) = 0x600000000;
    v27 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v24 + 8);
    v29 = *(_QWORD *)(v24 + 8) + 8 * *(unsigned int *)(v24 + 24);
    if ((uint64_t *)v29 == v27)
      goto LABEL_113;
    v30 = v27;
    v31 = v28;
    do
    {
      v32 = *(_QWORD *)v24;
      v33 = *v30;
      v34 = *v30 - 1;
      if (v34 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v35 = (unint64_t *)(v33 + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 + 1, v35));
      }
      v334[0] = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v32 + 112), *(_DWORD *)(v32 + 128), v33, v334))v37 = v334[0];
      else
        v37 = (void **)(*(_QWORD *)(v32 + 112) + 24 * *(unsigned int *)(v32 + 128));
      if (v34 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v38 = (unint64_t *)(v33 + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
      }
      if (v37 == (void **)(*(_QWORD *)(*(_QWORD *)v24 + 112) + 24 * *(unsigned int *)(*(_QWORD *)v24 + 128))
        || ((_WORD)v37[2] & 0x100) != 0)
      {
        v52 = *v30;
        v332[0] = v52;
        if ((unint64_t)(v52 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v53 = (unint64_t *)(v52 + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 + 1, v53));
        }
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v318, v332, (uint64_t)v334);
        if ((unint64_t)(v332[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v55 = (unint64_t *)(v332[0] + 8);
          do
            v56 = __ldaxr(v55);
          while (__stlxr(v56 - 1, v55));
        }
      }
      else if ((*((_BYTE *)v37 + 18) & 0x7C) != 0)
      {
        v40 = *v30;
        v41 = DWORD2(v336);
        if (DWORD2(v336) >= (unint64_t)HIDWORD(v336))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v336, v337, DWORD2(v336) + 1, 8);
          v41 = DWORD2(v336);
        }
        *(_QWORD *)(v336 + 8 * v41) = v40;
        ++DWORD2(v336);
        if ((*((_BYTE *)v37 + 18) & 0x7F) != 0x3F)
        {
          v42 = *(_QWORD *)v24;
          v43 = (void **)*v30;
          v334[0] = v43;
          if ((unint64_t)v43 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v44 = (unint64_t *)(v43 + 1);
            do
              v45 = __ldaxr(v44);
            while (__stlxr(v45 + 1, v44));
          }
          v46 = (void ***)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct((uint64_t *)(v42 + 160), v334);
          v47 = v46;
          if ((unint64_t)v334[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v48 = (unint64_t *)(v334[0] + 1);
            do
              v49 = __ldaxr(v48);
            while (__stlxr(v49 - 1, v48));
          }
          v334[0] = v46[1];
          v50 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a2, (uint64_t *)v334);
          v51 = v50 + 1;
          if (v50[1])
            goto LABEL_59;
          v307 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a2, &v321)+ 1;
          std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>::operator=[abi:nn180100](v51, (uint64_t)v47[1], (uint64_t)v47[2]);
          v58 = *v51;
          if (!*(_DWORD *)(*v51 + 40))
            goto LABEL_59;
          v59 = *(_QWORD *)(v58 + 32);
          v60 = *(unsigned int *)(v58 + 48);
          if ((_DWORD)v60)
          {
            v61 = 32 * v60;
            v62 = v59;
            while ((*(_QWORD *)v62 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v62 += 32;
              v61 -= 32;
              if (!v61)
              {
                v5 = v290;
                goto LABEL_59;
              }
            }
            v287 = v50;
          }
          else
          {
            v287 = v50;
            v62 = v59;
          }
          v63 = v59 + 32 * v60;
          if (v62 != v63)
          {
            v289 = (uint64_t)(v287 + 6);
            v64 = *(_QWORD *)v62;
            do
            {
              if (v64 == v290)
              {
                v66 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v62 + 8);
                v293 = *(_QWORD *)(v62 + 8) + 8 * *(unsigned int *)(v62 + 24);
                if ((uint64_t *)v293 == v66)
                  goto LABEL_102;
                v68 = v66;
                v69 = v67;
                while (1)
                {
                  v70 = *v68;
                  v332[0] = v70;
                  if ((unint64_t)(v70 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                  {
                    v71 = (unint64_t *)(v70 + 8);
                    do
                      v72 = __ldaxr(v71);
                    while (__stlxr(v72 + 1, v71));
                  }
                  v334[0] = 0;
                  v73 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v296, v332, v334);
                  if ((unint64_t)(v332[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                  {
                    v74 = (unint64_t *)(v332[0] + 8);
                    do
                      v75 = __ldaxr(v74);
                    while (__stlxr(v75 - 1, v74));
                  }
                  if ((v73 & 1) == 0)
                  {
                    v76 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v289, (uint64_t *)v62);
                    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v334, (uint64_t)(v76 + 1), v68);
                  }
                  while (++v68 != v69)
                  {
                    if ((*v68 | 8) != 0xFFFFFFFFFFFFFFF8)
                      goto LABEL_101;
                  }
                  v68 = v69;
LABEL_101:
                  if (v68 == (uint64_t *)v293)
                    goto LABEL_102;
                }
              }
              v65 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v289, (uint64_t *)v62);
              if ((_QWORD *)v62 != v65)
                llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::copyFrom((uint64_t)(v65 + 1), v62 + 8);
              do
              {
LABEL_102:
                v62 += 32;
                if (v62 == v63)
                  goto LABEL_105;
                v64 = *(_QWORD *)v62;
              }
              while ((*(_QWORD *)v62 | 0x1000) == 0xFFFFFFFFFFFFF000);
            }
            while (v62 != v63);
          }
LABEL_105:
          v5 = v290;
          v50 = v287;
LABEL_59:
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v334, (uint64_t)(v50 + 3), &v321);
        }
      }
      else
      {
        v57 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct((uint64_t)(v307 + 5), (uint64_t *)v24);
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v334, (uint64_t)(v57 + 1), v30);
      }
      while (++v30 != v31)
      {
        if ((*v30 | 8) != 0xFFFFFFFFFFFFFFF8)
          goto LABEL_72;
      }
      v30 = v31;
LABEL_72:
      ;
    }
    while (v30 != (uint64_t *)v29);
    if (!LODWORD(v319[0]))
    {
LABEL_113:
      v19 = v299;
      if (DWORD2(v336))
      {
        v82 = (uint64_t *)v336;
        v83 = 8 * DWORD2(v336);
        do
        {
          v84 = *v82++;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::erase(v24 + 8, v84);
          v83 -= 8;
        }
        while (v83);
      }
      if (!*(_DWORD *)(v24 + 16))
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v338, *(_QWORD *)v24);
      v85 = 1;
    }
    else
    {
      v77 = *(_QWORD *)v24;
      v315 = v318;
      v316 = v319[0];
      v78 = *(_QWORD *)((char *)v319 + 4);
      v318 = 0;
      memset(v319, 0, 12);
      v317 = v78;
      v329 = 0;
      v327 = 0;
      v328 = 0;
      if (*(_DWORD *)(v321 + 16))
      {
        v79 = *(unsigned int *)(v321 + 24);
        if ((_DWORD)v79)
        {
          v80 = 16 * v79;
          v81 = *(uint64_t **)(v321 + 8);
          while ((*v81 | 8) == 0xFFFFFFFFFFFFFFF8)
          {
            v81 += 2;
            v80 -= 16;
            if (!v80)
              goto LABEL_131;
          }
        }
        else
        {
          v81 = *(uint64_t **)(v321 + 8);
        }
        v86 = *(_QWORD *)(v321 + 8) + 16 * v79;
        if (v81 != (uint64_t *)v86)
        {
          v87 = *v81;
LABEL_122:
          v332[0] = v87;
          if ((unint64_t)(v87 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v88 = (unint64_t *)(v87 + 8);
            do
              v89 = __ldaxr(v88);
            while (__stlxr(v89 + 1, v88));
          }
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v327, v332, (uint64_t)v334);
          if ((unint64_t)(v332[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v90 = (unint64_t *)(v332[0] + 8);
            do
              v91 = __ldaxr(v90);
            while (__stlxr(v91 - 1, v90));
          }
          while (1)
          {
            v81 += 2;
            if (v81 == (uint64_t *)v86)
              break;
            v87 = *v81;
            if ((*v81 | 8) != 0xFFFFFFFFFFFFFFF8)
            {
              if (v81 != (uint64_t *)v86)
                goto LABEL_122;
              break;
            }
          }
        }
      }
LABEL_131:
      v324 = 0;
      v325 = 0;
      v326 = 0;
      v334[0] = (void **)v77;
      v92 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(&v324, (uint64_t *)v334);
      llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::operator=((uint64_t)(v92 + 1), (uint64_t)&v315);
      v93 = *(_QWORD *)(*(_QWORD *)(v77 + 32) + 72);
      v94 = *(_QWORD *)(v93 + 8);
      v95 = *(_QWORD *)(v93 + 16);
      if (v95)
      {
        v96 = (unint64_t *)(v95 + 8);
        do
          v97 = __ldxr(v96);
        while (__stxr(v97 + 1, v96));
      }
      v98 = operator new();
      do
        v99 = __ldxr((unsigned int *)v77);
      while (__stxr(v99 + 1, (unsigned int *)v77));
      v100 = v327;
      v327 = 0;
      v101 = v329;
      v329 = 0;
      v102 = v324;
      v324 = 0;
      v103 = v326;
      v326 = 0;
      v104 = v328;
      v328 = 0;
      v105 = v325;
      v325 = 0;
      std::string::basic_string[abi:nn180100]<0>(&v330, "dependencies removed or in error state");
      *(_QWORD *)v98 = off_251C145D8;
      *(_QWORD *)(v98 + 8) = v94;
      *(_QWORD *)(v98 + 16) = v95;
      *(_QWORD *)(v98 + 24) = v77;
      *(_QWORD *)(v98 + 32) = v100;
      v334[0] = 0;
      *(_QWORD *)(v98 + 40) = v104;
      v334[1] = 0;
      *(_DWORD *)(v98 + 48) = v101;
      v335 = 0;
      *(_QWORD *)(v98 + 56) = v102;
      *(_QWORD *)(v98 + 64) = v105;
      v332[1] = 0;
      *(_DWORD *)(v98 + 72) = v103;
      v333 = 0;
      *(_OWORD *)(v98 + 80) = v330;
      *(_QWORD *)(v98 + 96) = v331;
      v331 = 0;
      v332[0] = 0;
      v330 = 0uLL;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)v332);
      MEMORY[0x24BD1B398](v332[0], 8);
      llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)v334);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)&v324);
      MEMORY[0x24BD1B398](v324, 8);
      llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v327);
      *(_BYTE *)(a3 + 24) |= 1u;
      *(_QWORD *)a3 = v98;
      llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v315);
      v85 = 0;
      v5 = v290;
      v19 = v299;
    }
    if ((_QWORD *)v336 != v337)
      free((void *)v336);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v318);
    if (!v85)
      goto LABEL_433;
    while (1)
    {
      v24 += 32;
      if (v24 == v25)
        break;
      v26 = *(_QWORD *)v24;
      if ((*(_QWORD *)v24 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (v24 != v25)
          goto LABEL_34;
        break;
      }
    }
LABEL_143:
    v106 = v321;
    if ((_DWORD)v339)
    {
      v107 = (uint64_t *)v338;
      v108 = 8 * v339;
      do
      {
        v109 = *v107++;
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::erase(v106 + 32, v109);
        v108 -= 8;
      }
      while (v108);
    }
    if (*(_DWORD *)(v106 + 16))
    {
      v110 = *(unsigned int *)(v106 + 24);
      if ((_DWORD)v110)
      {
        v111 = 16 * v110;
        v112 = *(_QWORD **)(v106 + 8);
        while ((*v112 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v112 += 2;
          v111 -= 16;
          if (!v111)
            goto LABEL_198;
        }
      }
      else
      {
        v112 = *(_QWORD **)(v106 + 8);
      }
      v113 = *(_QWORD *)(v106 + 8) + 16 * v110;
      if (v112 != (_QWORD *)v113)
      {
        v114 = (void **)*v112;
LABEL_155:
        v334[0] = v114;
        if ((unint64_t)v114 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v115 = (unint64_t *)(v114 + 1);
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 + 1, v115));
        }
        *(_QWORD *)&v336 = 0;
        v117 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v288, v334, &v336);
        v118 = *(_QWORD *)(v5 + 160);
        v119 = *(_DWORD *)(v5 + 176);
        if (v117)
          v120 = (_DWORD *)v336;
        else
          v120 = (_DWORD *)(v118 + 72 * v119);
        if ((unint64_t)v334[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v121 = (unint64_t *)(v334[0] + 1);
          do
            v122 = __ldaxr(v121);
          while (__stlxr(v122 - 1, v121));
          v118 = *(_QWORD *)(v5 + 160);
          v119 = *(_DWORD *)(v5 + 176);
        }
        if (v120 != (_DWORD *)(v118 + 72 * v119) && v120[8])
        {
          v300 = v19;
          v294 = v120 + 6;
          v123 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v120 + 6));
          v125 = *((_QWORD *)v120 + 3) + 8 * v120[10];
          if ((uint64_t *)v125 != v123)
          {
            v126 = v123;
            v127 = v124;
            do
            {
              v128 = *v126;
              v129 = *v112;
              v130 = *v126 + 32;
              *(_QWORD *)&v336 = v5;
              v131 = v5;
              v132 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(v130, (uint64_t *)&v336);
              llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::erase((uint64_t)(v132 + 1), v129);
              if (*((_DWORD *)v132 + 4))
              {
                v5 = v131;
              }
              else
              {
                llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::erase(v130, v131);
                v5 = v131;
                if (!*(_DWORD *)(v128 + 40))
                {
                  *(_QWORD *)&v336 = v128;
                  v133 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a2, (uint64_t *)&v336)+ 1;
                  if (!*v133)
                  {
                    v134 = *(_QWORD **)(v128 + 8);
                    v135 = *(unsigned int *)(v128 + 24);
                    v136 = &v134[2 * v135];
                    if (*(_DWORD *)(v128 + 16))
                    {
                      if ((_DWORD)v135)
                      {
                        v137 = 16 * v135;
                        while ((*v134 | 8) == 0xFFFFFFFFFFFFFFF8)
                        {
                          v134 += 2;
                          v137 -= 16;
                          if (!v137)
                            goto LABEL_178;
                        }
                      }
                    }
                    else
                    {
LABEL_178:
                      v134 = v136;
                    }
                    v138 = *(_QWORD *)v128;
                    v139 = (void **)*v134;
                    v334[0] = v139;
                    if ((unint64_t)v139 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                    {
                      v140 = (unint64_t *)(v139 + 1);
                      do
                        v141 = __ldaxr(v140);
                      while (__stlxr(v141 + 1, v140));
                    }
                    *(_QWORD *)&v336 = 0;
                    v142 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v138 + 160), v334, &v336);
                    v143 = v336;
                    if (!v142)
                      v143 = *(_QWORD *)(v138 + 160) + 72 * *(unsigned int *)(v138 + 176);
                    if ((unint64_t)v334[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                    {
                      v144 = (unint64_t *)(v334[0] + 1);
                      do
                        v145 = __ldaxr(v144);
                      while (__stlxr(v145 - 1, v144));
                    }
                    std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>::operator=[abi:nn180100](v133, *(_QWORD *)(v143 + 8), *(_QWORD *)(v143 + 16));
                    v307 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(a2, &v321)+ 1;
                  }
                }
              }
              llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v336, (uint64_t)(v307 + 2), v126);
              while (++v126 != v127)
              {
                if ((*v126 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_193;
              }
              v126 = v127;
LABEL_193:
              ;
            }
            while (v126 != (uint64_t *)v125);
          }
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::clear(v294);
          v19 = v300;
        }
        while (1)
        {
          v112 += 2;
          if (v112 == (_QWORD *)v113)
            break;
          v114 = (void **)*v112;
          if ((*v112 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (v112 != (_QWORD *)v113)
              goto LABEL_155;
            break;
          }
        }
      }
    }
LABEL_198:
    if (v338 != v340)
      free(v338);
    v20 = v304 + 1;
    v12 = a2;
    if ((uint64_t *)((char *)v304 - *v19 + 8) == (uint64_t *)4096)
    {
      v146 = (uint64_t *)v19[1];
      ++v19;
      v20 = v146;
    }
    if (v20 == (uint64_t *)v301)
    {
      v18 = *(void ***)&v322[16];
      v17 = *(void ***)&v322[8];
      goto LABEL_206;
    }
  }
  llvm::orc::ExecutionSession::makeJDClosedError(&v320, v321, v26);
  *(_BYTE *)(a3 + 24) |= 1u;
  *(_QWORD *)a3 = v320;
LABEL_433:
  if (v338 != v340)
    free(v338);
LABEL_430:
  std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::~deque[abi:nn180100]((uint64_t)v322);
}

uint64_t llvm::orc::ExecutionSession::OL_notifyEmitted@<X0>(std::recursive_mutex *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X8>)
{
  _QWORD *v8;
  _QWORD *v9;
  _BYTE *v10;
  BOOL v11;
  _BYTE *v12;
  _QWORD v14[3];
  void *v15[2];
  int v16;
  _BYTE *v17;
  _BYTE v18[24];
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  llvm::orc::ExecutionSession::simplifyDepGroups((uint64_t *)a2, a3, a4, (uint64_t)v14);
  std::recursive_mutex::lock(a1);
  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::copyFrom(v15, (uint64_t)v14);
  llvm::orc::ExecutionSession::IL_emit((uint64_t *)a2, (uint64_t)v15, (uint64_t)&v17);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::destroyAll((uint64_t)v15);
  MEMORY[0x24BD1B398](v15[0], 8);
  std::recursive_mutex::unlock(a1);
  if ((v18[16] & 1) != 0)
  {
    v12 = v17;
    v17 = 0;
  }
  else
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::clear((_DWORD *)(a2 + 16));
    v8 = v17;
    if (v17 != v18)
    {
      do
      {
        llvm::orc::AsynchronousSymbolQuery::handleComplete(v8[4], (uint64_t)a1);
        v9 = (_QWORD *)v8[1];
        if (v9)
        {
          do
          {
            v10 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v10 = (_BYTE *)v8[2];
            v11 = *(_QWORD *)v10 == (_QWORD)v8;
            v8 = v10;
          }
          while (!v11);
        }
        v8 = v10;
      }
      while (v10 != v18);
    }
    v12 = 0;
  }
  *a5 = v12;
  llvm::Expected<std::set<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>>::~Expected((uint64_t)&v17);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::destroyAll((uint64_t)v14);
  return MEMORY[0x24BD1B398](v14[0], 8);
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::clear(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = *(_QWORD *)result + 16 * v1;
        do
        {
          if ((unint64_t)(*v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v4 = (unint64_t *)(*v2 + 8);
            do
              v5 = __ldaxr(v4);
            while (__stlxr(v5 - 1, v4));
          }
          *v2 = -8;
          v2 += 2;
        }
        while (v2 != (_QWORD *)v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::shrink_and_clear(result);
    }
  }
  return result;
}

uint64_t llvm::orc::ExecutionSession::OL_defineMaterializing@<X0>(uint64_t *a1@<X1>, int32x2_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE v12[24];
  int32x2_t v13[2];
  __int32 v14;
  uint64_t v15;
  int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v13[0] = *a2;
  v13[1] = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v14 = a2[2].i32[0];
  a2[2].i32[0] = 0;
  llvm::orc::JITDylib::defineMaterializing(v5, (uint64_t)a1, v13, (uint64_t)&v15);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v13);
  if ((v18 & 1) != 0)
  {
    v8 = v15;
    v15 = 0;
  }
  else
  {
    if (v16)
    {
      if (v17)
      {
        v6 = 16 * v17;
        v7 = v15;
        while ((*(_QWORD *)v7 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v7 += 16;
          v6 -= 16;
          if (!v6)
            goto LABEL_17;
        }
      }
      else
      {
        v7 = v15;
      }
      v9 = v15 + 16 * v17;
      if (v7 != v9)
      {
        v10 = (uint64_t)(a1 + 2);
LABEL_12:
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::try_emplace<llvm::JITSymbolFlags const&>(v10, (uint64_t *)v7, (_WORD *)(v7 + 8), (uint64_t)v12);
        while (1)
        {
          v7 += 16;
          if (v7 == v9)
            break;
          if ((*(_QWORD *)v7 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            v8 = 0;
            if (v7 != v9)
              goto LABEL_12;
            goto LABEL_18;
          }
        }
      }
    }
LABEL_17:
    v8 = 0;
  }
LABEL_18:
  *a3 = v8;
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>>::~Expected((uint64_t)&v15);
}

void llvm::orc::ExecutionSession::IL_failSymbols(_QWORD *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  _QWORD *v8;
  uint64_t *v9;
  uint64_t *v10;
  _QWORD *v11;
  BOOL v12;
  void **v13;
  char *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _DWORD **v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  char *v27;
  __int128 v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _QWORD *v32;
  char *v33;
  __int128 v34;
  int64x2_t v35;
  uint64_t v36;
  _DWORD **i;
  _DWORD *v38;
  char *v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  void **v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t v61;
  int32x2_t *v62;
  int32x2_t *v63;
  unint64_t *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  int v78;
  void **v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  int v91;
  void **v92;
  unint64_t *v93;
  unint64_t v94;
  char *v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  unint64_t *v99;
  unint64_t v100;
  _DWORD **v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  char *v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  unint64_t *v110;
  unint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  char *v114;
  __int128 v115;
  int64x2_t v116;
  uint64_t v117;
  _DWORD **j;
  _DWORD *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  uint64_t *v129;
  _DWORD *v130;
  uint64_t *v131;
  uint64_t *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t *v135;
  _QWORD *v136;
  uint64_t v137;
  int64x2_t v138;
  _QWORD v139[2];
  void **v140;
  int64x2_t v141;
  uint64_t v142;
  _QWORD *v143;

  v136 = 0;
  v137 = 0;
  v135 = (uint64_t *)&v136;
  v8 = operator new(0x30uLL);
  v8[1] = 0;
  v8[2] = 0;
  *v8 = &off_251C14990;
  v8[3] = 0;
  v9 = v8 + 3;
  v8[4] = 0;
  *((_DWORD *)v8 + 10) = 0;
  if (a3 == a4)
  {
    v124 = 0;
    a1[1] = 0;
    a1[2] = 0;
    v126 = a1 + 1;
LABEL_153:
    *a1 = v126;
    goto LABEL_154;
  }
  v127 = v8;
  v128 = a1;
  v10 = (uint64_t *)(a2 + 160);
  v131 = v8 + 3;
  v129 = a4;
  do
  {
    v138.i64[0] = a2;
    v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v9, v138.i64);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v11 + 1), a3, (uint64_t)&v140);
    v140 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(a2 + 112), *(_DWORD *)(a2 + 128), *a3, &v140))v12 = v140 == (void **)(*(_QWORD *)(a2 + 112) + 24 * *(unsigned int *)(a2 + 128));
    else
      v12 = 1;
    if (!v12 && ((unsigned __int16)v140[2] & 0x100) == 0)
    {
      *((_WORD *)v140 + 8) = *((_WORD *)v140 + 8) | (HIBYTE(*((_WORD *)v140 + 8)) << 8) | 0x100;
      v140 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v10, a3, &v140))
      {
        v13 = v140;
        if (v140 != (void **)(*(_QWORD *)(a2 + 160) + 72 * *(unsigned int *)(a2 + 176)))
        {
          v138 = 0uLL;
          v139[0] = 0;
          v14 = (char *)v140[6];
          v15 = (char *)v140[7];
          if (v14 != v15)
          {
            do
            {
              std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::__emplace_unique_key_args<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> const&>(&v135, *(_QWORD *)v14, *(_QWORD *)v14, *((_QWORD *)v14 + 1));
              v16 = v138.i64[1];
              if (v138.i64[1] >= v139[0])
              {
                v21 = (v138.i64[1] - v138.i64[0]) >> 4;
                v22 = v21 + 1;
                if ((unint64_t)(v21 + 1) >> 60)
LABEL_155:
                  abort();
                v23 = v139[0] - v138.i64[0];
                if ((v139[0] - v138.i64[0]) >> 3 > v22)
                  v22 = v23 >> 3;
                if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF0)
                  v24 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v24 = v22;
                v143 = v139;
                v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v24);
                v27 = &v25[16 * v21];
                v28 = *(_OWORD *)v14;
                *(_OWORD *)v27 = *(_OWORD *)v14;
                if (*((_QWORD *)&v28 + 1))
                {
                  v29 = (unint64_t *)(*((_QWORD *)&v28 + 1) + 8);
                  do
                    v30 = __ldxr(v29);
                  while (__stxr(v30 + 1, v29));
                }
                v31 = (_QWORD *)v138.i64[1];
                v32 = (_QWORD *)v138.i64[0];
                if (v138.i64[1] == v138.i64[0])
                {
                  v35 = vdupq_n_s64(v138.u64[1]);
                  v33 = &v25[16 * v21];
                }
                else
                {
                  v33 = &v25[16 * v21];
                  do
                  {
                    v34 = *((_OWORD *)v31 - 1);
                    v31 -= 2;
                    *((_OWORD *)v33 - 1) = v34;
                    v33 -= 16;
                    *v31 = 0;
                    v31[1] = 0;
                  }
                  while (v31 != v32);
                  v35 = v138;
                }
                v20 = (_DWORD **)(v27 + 16);
                v138.i64[0] = (uint64_t)v33;
                v138.i64[1] = (uint64_t)(v27 + 16);
                v141 = v35;
                v36 = v139[0];
                v139[0] = &v25[16 * v26];
                v142 = v36;
                v140 = (void **)v35.i64[0];
                std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v140);
              }
              else
              {
                *(_QWORD *)v138.i64[1] = *(_QWORD *)v14;
                v17 = *((_QWORD *)v14 + 1);
                *(_QWORD *)(v16 + 8) = v17;
                if (v17)
                {
                  v18 = (unint64_t *)(v17 + 8);
                  do
                    v19 = __ldxr(v18);
                  while (__stxr(v19 + 1, v18));
                }
                v20 = (_DWORD **)(v16 + 16);
              }
              v138.i64[1] = (uint64_t)v20;
              v14 += 16;
            }
            while (v14 != v15);
            for (i = (_DWORD **)v138.i64[0]; i != v20; i += 2)
            {
              v38 = *i;
              llvm::orc::AsynchronousSymbolQuery::detach(v38);
            }
          }
          v140 = (void **)&v138;
          std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v140);
          v39 = (char *)v13[1];
          if (v39)
          {
            v40 = *a3;
            v140 = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*((_QWORD *)v39 + 1), *((_DWORD *)v39 + 6), v40, &v140))
            {
              *v140 = (void *)-16;
              *((int32x2_t *)v39 + 2) = vadd_s32(*(int32x2_t *)(v39 + 16), (int32x2_t)0x1FFFFFFFFLL);
            }
            v140 = 0;
            v141.i64[0] = 0;
            std::shared_ptr<llvm::sys::fs::detail::DirIterState>::operator=[abi:nn180100]((uint64_t)(v13 + 1), (__int128 *)&v140);
            v41 = (std::__shared_weak_count *)v141.i64[0];
            if (v141.i64[0])
            {
              v42 = (unint64_t *)(v141.i64[0] + 8);
              do
                v43 = __ldaxr(v42);
              while (__stlxr(v43 - 1, v42));
              if (!v43)
              {
                ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
                std::__shared_weak_count::__release_weak(v41);
              }
            }
          }
          else
          {
            v130 = v13 + 3;
            v44 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v13 + 3));
            v133 = (uint64_t)v13[3] + 8 * *((unsigned int *)v13 + 10);
            if ((uint64_t *)v133 != v44)
            {
              v46 = v44;
              v47 = v45;
              do
              {
                v48 = *v46;
                if (*(_DWORD *)(*v46 + 40))
                {
                  v49 = *(unsigned int *)(v48 + 48);
                  if ((_DWORD)v49)
                  {
                    v50 = 32 * v49;
                    v51 = *(uint64_t **)(v48 + 32);
                    while ((*v51 | 0x1000) == 0xFFFFFFFFFFFFF000)
                    {
                      v51 += 4;
                      v50 -= 32;
                      if (!v50)
                        goto LABEL_74;
                    }
                  }
                  else
                  {
                    v51 = *(uint64_t **)(v48 + 32);
                  }
                  v52 = *(_QWORD *)(v48 + 32) + 32 * v49;
                  if (v51 != (uint64_t *)v52)
                  {
LABEL_53:
                    v53 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(v51 + 1));
                    v55 = v51[1] + 8 * *((unsigned int *)v51 + 6);
                    if ((_QWORD *)v55 == v53)
                      goto LABEL_70;
                    v56 = v53;
                    v57 = v54;
                    do
                    {
                      v58 = (void **)*v56;
                      v59 = *v51;
                      if (*v51 != a2 || v58 != (void **)*a3)
                      {
                        v140 = (void **)*v56;
                        if ((unint64_t)v58 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                        {
                          v60 = (unint64_t *)(v58 + 1);
                          do
                            v61 = __ldaxr(v60);
                          while (__stlxr(v61 + 1, v60));
                        }
                        v62 = (int32x2_t *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct((uint64_t *)(v59 + 160), &v140);
                        v63 = v62;
                        if ((unint64_t)v140 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                        {
                          v64 = (unint64_t *)(v140 + 1);
                          do
                            v65 = __ldaxr(v64);
                          while (__stlxr(v65 - 1, v64));
                        }
                        v66 = *v46;
                        v140 = 0;
                        if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)&v62[3], v62[5].i32[0], v66, &v140))
                        {
                          *v140 = (void *)-8192;
                          v63[4] = vadd_s32(v63[4], (int32x2_t)0x1FFFFFFFFLL);
                        }
                      }
                      while (++v56 != v57)
                      {
                        if ((*v56 | 8) != 0xFFFFFFFFFFFFFFF8)
                          goto LABEL_69;
                      }
                      v56 = v57;
LABEL_69:
                      ;
                    }
                    while (v56 != (_QWORD *)v55);
LABEL_70:
                    while (1)
                    {
                      v51 += 4;
                      if (v51 == (uint64_t *)v52)
                        break;
                      if ((*v51 | 0x1000) != 0xFFFFFFFFFFFFF000)
                      {
                        if (v51 != (uint64_t *)v52)
                          goto LABEL_53;
                        break;
                      }
                    }
                    v48 = *v46;
                  }
                }
LABEL_74:
                v68 = *(_QWORD *)v48;
                v67 = *(uint64_t **)(v48 + 8);
                v69 = *(_DWORD *)(v48 + 16);
                *(_QWORD *)(v48 + 8) = 0;
                *(_QWORD *)(v48 + 16) = 0;
                v70 = *(unsigned int *)(v48 + 24);
                *(_DWORD *)(v48 + 24) = 0;
                if (v69)
                {
                  v71 = v67;
                  if ((_DWORD)v70)
                  {
                    v72 = 16 * v70;
                    v71 = v67;
                    while ((*v71 | 8) == 0xFFFFFFFFFFFFFFF8)
                    {
                      v71 += 2;
                      v72 -= 16;
                      if (!v72)
                        goto LABEL_140;
                    }
                  }
                  v73 = &v67[2 * v70];
                  if (v71 != v73)
                  {
                    v74 = (uint64_t *)(v68 + 160);
                    v75 = *v71;
                    v132 = v67;
                    do
                    {
                      if ((unint64_t)(v75 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v76 = (unint64_t *)(v75 + 8);
                        do
                          v77 = __ldaxr(v76);
                        while (__stlxr(v77 + 1, v76));
                      }
                      v140 = 0;
                      v78 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v68 + 112), *(_DWORD *)(v68 + 128), v75, &v140);
                      v79 = v140;
                      if (!v78)
                        v79 = (void **)(*(_QWORD *)(v68 + 112) + 24 * *(unsigned int *)(v68 + 128));
                      if ((unint64_t)(v75 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v80 = (unint64_t *)(v75 + 8);
                        do
                          v81 = __ldaxr(v80);
                        while (__stlxr(v81 - 1, v80));
                      }
                      *((_BYTE *)v79 + 17) |= 1u;
                      v138.i64[0] = v68;
                      v82 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v131, v138.i64);
                      v83 = *v71;
                      v134 = v83;
                      if ((unint64_t)(v83 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v84 = (unint64_t *)(v83 + 8);
                        do
                          v85 = __ldaxr(v84);
                        while (__stlxr(v85 + 1, v84));
                      }
                      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v82 + 1), &v134, (uint64_t)&v140);
                      if ((unint64_t)(v134 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v86 = (unint64_t *)(v134 + 8);
                        do
                          v87 = __ldaxr(v86);
                        while (__stlxr(v87 - 1, v86));
                      }
                      v88 = *v71;
                      v138.i64[0] = v88;
                      if ((unint64_t)(v88 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v89 = (unint64_t *)(v88 + 8);
                        do
                          v90 = __ldaxr(v89);
                        while (__stlxr(v90 + 1, v89));
                      }
                      v140 = 0;
                      v91 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v74, &v138, &v140);
                      v92 = v140;
                      if (!v91)
                        v92 = (void **)(*(_QWORD *)(v68 + 160) + 72 * *(unsigned int *)(v68 + 176));
                      if ((unint64_t)(v138.i64[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v93 = (unint64_t *)(v138.i64[0] + 8);
                        do
                          v94 = __ldaxr(v93);
                        while (__stlxr(v94 - 1, v93));
                      }
                      v138 = 0uLL;
                      v139[0] = 0;
                      v95 = (char *)v92[6];
                      v96 = (char *)v92[7];
                      if (v95 != v96)
                      {
                        do
                        {
                          std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::__emplace_unique_key_args<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> const&>(&v135, *(_QWORD *)v95, *(_QWORD *)v95, *((_QWORD *)v95 + 1));
                          v97 = v138.i64[1];
                          if (v138.i64[1] >= v139[0])
                          {
                            v102 = (v138.i64[1] - v138.i64[0]) >> 4;
                            v103 = v102 + 1;
                            if ((unint64_t)(v102 + 1) >> 60)
                              goto LABEL_155;
                            v104 = v139[0] - v138.i64[0];
                            if ((v139[0] - v138.i64[0]) >> 3 > v103)
                              v103 = v104 >> 3;
                            if ((unint64_t)v104 >= 0x7FFFFFFFFFFFFFF0)
                              v105 = 0xFFFFFFFFFFFFFFFLL;
                            else
                              v105 = v103;
                            v143 = v139;
                            v106 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v105);
                            v108 = &v106[16 * v102];
                            v109 = *(_OWORD *)v95;
                            *(_OWORD *)v108 = *(_OWORD *)v95;
                            if (*((_QWORD *)&v109 + 1))
                            {
                              v110 = (unint64_t *)(*((_QWORD *)&v109 + 1) + 8);
                              do
                                v111 = __ldxr(v110);
                              while (__stxr(v111 + 1, v110));
                            }
                            v112 = (_QWORD *)v138.i64[1];
                            v113 = (_QWORD *)v138.i64[0];
                            if (v138.i64[1] == v138.i64[0])
                            {
                              v116 = vdupq_n_s64(v138.u64[1]);
                              v114 = &v106[16 * v102];
                            }
                            else
                            {
                              v114 = &v106[16 * v102];
                              do
                              {
                                v115 = *((_OWORD *)v112 - 1);
                                v112 -= 2;
                                *((_OWORD *)v114 - 1) = v115;
                                v114 -= 16;
                                *v112 = 0;
                                v112[1] = 0;
                              }
                              while (v112 != v113);
                              v116 = v138;
                            }
                            v101 = (_DWORD **)(v108 + 16);
                            v138.i64[0] = (uint64_t)v114;
                            v138.i64[1] = (uint64_t)(v108 + 16);
                            v141 = v116;
                            v117 = v139[0];
                            v139[0] = &v106[16 * v107];
                            v142 = v117;
                            v140 = (void **)v116.i64[0];
                            std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v140);
                          }
                          else
                          {
                            *(_QWORD *)v138.i64[1] = *(_QWORD *)v95;
                            v98 = *((_QWORD *)v95 + 1);
                            *(_QWORD *)(v97 + 8) = v98;
                            if (v98)
                            {
                              v99 = (unint64_t *)(v98 + 8);
                              do
                                v100 = __ldxr(v99);
                              while (__stxr(v100 + 1, v99));
                            }
                            v101 = (_DWORD **)(v97 + 16);
                          }
                          v138.i64[1] = (uint64_t)v101;
                          v95 += 16;
                        }
                        while (v95 != v96);
                        for (j = (_DWORD **)v138.i64[0]; j != v101; j += 2)
                        {
                          v119 = *j;
                          llvm::orc::AsynchronousSymbolQuery::detach(v119);
                        }
                      }
                      v140 = (void **)&v138;
                      std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v140);
                      v140 = (void **)*v71;
                      if ((unint64_t)v140 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v120 = (unint64_t *)(v140 + 1);
                        do
                          v121 = __ldaxr(v120);
                        while (__stlxr(v121 + 1, v120));
                      }
                      v74 = (uint64_t *)(v68 + 160);
                      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::erase(v68 + 160, &v140);
                      if ((unint64_t)v140 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
                      {
                        v122 = (unint64_t *)(v140 + 1);
                        do
                          v123 = __ldaxr(v122);
                        while (__stlxr(v123 - 1, v122));
                      }
                      v71 += 2;
                      v67 = v132;
                      if (v71 == v73)
                        break;
                      while (1)
                      {
                        v75 = *v71;
                        if ((*v71 | 8) != 0xFFFFFFFFFFFFFFF8)
                          break;
                        v71 += 2;
                        if (v71 == v73)
                          goto LABEL_140;
                      }
                    }
                    while (v71 != v73);
                  }
                }
LABEL_140:
                MEMORY[0x24BD1B398](v67, 8);
                while (++v46 != v47)
                {
                  if ((*v46 | 0x1000) != 0xFFFFFFFFFFFFF000)
                    goto LABEL_145;
                }
                v46 = v47;
LABEL_145:
                ;
              }
              while (v46 != (uint64_t *)v133);
            }
            llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::clear(v130);
            v9 = v131;
            v10 = (uint64_t *)(a2 + 160);
            a4 = v129;
          }
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::erase((uint64_t)v10, a3);
        }
      }
    }
    ++a3;
  }
  while (a3 != a4);
  v124 = v136;
  v125 = v137;
  a1 = v128;
  *v128 = v135;
  v128[1] = v124;
  v126 = v128 + 1;
  v128[2] = v125;
  if (!v125)
  {
    v8 = v127;
    goto LABEL_153;
  }
  v124[2] = v126;
  v8 = v127;
  v135 = (uint64_t *)&v136;
  v136 = 0;
  v137 = 0;
  v124 = 0;
LABEL_154:
  a1[3] = v9;
  a1[4] = v8;
  std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v135, v124);
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::erase(uint64_t a1, _QWORD *a2)
{
  int32x2_t result;
  void **v4;
  void **v5;
  unint64_t *v6;
  unint64_t v7;
  void **v8;

  v8 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v8))
  {
    v4 = v8;
    v5 = v8 + 1;
    v8 += 6;
    std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v8);
    MEMORY[0x24BD1B398](v4[3], 8);
    std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)v5);
    if ((char *)*v4 - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL)
    {
      v6 = (unint64_t *)((char *)*v4 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
    }
    *v4 = (void *)-16;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

void llvm::orc::ExecutionSession::OL_notifyFailed(uint64_t a1, uint64_t a2)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  char v13;
  __int128 v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  _QWORD *v21;
  __int128 *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  _QWORD *v31;
  _OWORD *v32;
  BOOL v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  char *v44;
  uint64_t *v45;
  unint64_t v46;

  if (*(_DWORD *)(a2 + 24))
  {
    v4 = (_DWORD *)(a2 + 16);
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v5 = *(unsigned int *)(a2 + 32);
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      v7 = *(uint64_t **)(a2 + 16);
      while ((*v7 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v7 += 2;
        v6 -= 16;
        if (!v6)
          goto LABEL_20;
      }
    }
    else
    {
      v7 = *(uint64_t **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 16) + 16 * v5;
    if (v7 != (uint64_t *)v8)
    {
      v9 = 0;
LABEL_10:
      if ((unint64_t)v9 >= v46)
      {
        v9 = (uint64_t *)std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>(&v44, v7);
      }
      else
      {
        v10 = *v7;
        *v9 = *v7;
        if ((unint64_t)(v10 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v11 = (unint64_t *)(v10 + 8);
          do
            v12 = __ldaxr(v11);
          while (__stlxr(v12 + 1, v11));
        }
        ++v9;
      }
      v45 = v9;
      while (1)
      {
        v7 += 2;
        if (v7 == (uint64_t *)v8)
          break;
        if ((*v7 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v7 != (uint64_t *)v8)
            goto LABEL_10;
          break;
        }
      }
    }
LABEL_20:
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::clear(v4);
    *((_QWORD *)&v42 + 1) = 0;
    v43 = 0;
    *(_QWORD *)&v42 = (char *)&v42 + 8;
    v41 = 0uLL;
    std::recursive_mutex::lock((std::recursive_mutex *)a1);
    v13 = atomic_load((unint64_t *)(*(_QWORD *)(a2 + 8) + 8));
    if ((v13 & 1) != 0)
    {
      *(_QWORD *)&v38 = (char *)&v38 + 8;
      *((_QWORD *)&v38 + 1) = 0;
      v40 = 0uLL;
      v39 = 0;
    }
    else
    {
      llvm::orc::ExecutionSession::IL_failSymbols(&v38, *(_QWORD *)a2, (uint64_t *)v44, v45);
    }
    std::recursive_mutex::unlock((std::recursive_mutex *)a1);
    std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v42, *((_QWORD **)&v42 + 1));
    v42 = v38;
    v43 = v39;
    if (v39)
    {
      *(_QWORD *)(*((_QWORD *)&v38 + 1) + 16) = (char *)&v42 + 8;
      *(_QWORD *)&v38 = (char *)&v38 + 8;
      *((_QWORD *)&v38 + 1) = 0;
      v39 = 0;
    }
    else
    {
      *(_QWORD *)&v42 = (char *)&v42 + 8;
    }
    v14 = v40;
    v40 = 0uLL;
    v15 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    v41 = v14;
    if (v15)
    {
      p_shared_owners = (unint64_t *)&v15->__shared_owners_;
      do
        v17 = __ldaxr(p_shared_owners);
      while (__stlxr(v17 - 1, p_shared_owners));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&v40 + 1);
    if (*((_QWORD *)&v40 + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&v40 + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v38, *((_QWORD **)&v38 + 1));
    v21 = (_QWORD *)v42;
    if ((__int128 *)v42 != (__int128 *)((char *)&v42 + 8))
    {
      do
      {
        v22 = (__int128 *)v21[4];
        v23 = *(_QWORD *)(a1 + 72);
        v25 = *(_QWORD *)(v23 + 8);
        v24 = *(_QWORD *)(v23 + 16);
        *(_QWORD *)&v38 = v25;
        *((_QWORD *)&v38 + 1) = v24;
        if (v24)
        {
          v26 = (unint64_t *)(v24 + 8);
          do
            v27 = __ldxr(v26);
          while (__stxr(v27 + 1, v26));
        }
        llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>> &>(&v37, &v38, (uint64_t *)&v41);
        llvm::orc::AsynchronousSymbolQuery::handleFailed(v22, &v37);
        if (v37)
          (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
        v28 = (std::__shared_weak_count *)*((_QWORD *)&v38 + 1);
        if (*((_QWORD *)&v38 + 1))
        {
          v29 = (unint64_t *)(*((_QWORD *)&v38 + 1) + 8);
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v31 = (_QWORD *)v21[1];
        if (v31)
        {
          do
          {
            v32 = v31;
            v31 = (_QWORD *)*v31;
          }
          while (v31);
        }
        else
        {
          do
          {
            v32 = (_OWORD *)v21[2];
            v33 = *(_QWORD *)v32 == (_QWORD)v21;
            v21 = v32;
          }
          while (!v33);
        }
        v21 = v32;
      }
      while (v32 != (__int128 *)((char *)&v42 + 8));
    }
    v34 = (std::__shared_weak_count *)*((_QWORD *)&v41 + 1);
    if (*((_QWORD *)&v41 + 1))
    {
      v35 = (unint64_t *)(*((_QWORD *)&v41 + 1) + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      if (!v36)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy((uint64_t)&v42, *((_QWORD **)&v42 + 1));
    *(_QWORD *)&v38 = &v44;
    std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&v38);
  }
}

std::__shared_weak_count_vtbl *llvm::orc::ExecutionSession::OL_replace@<X0>(uint64_t *a1@<X1>, uint64_t *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count_vtbl *result;
  std::__shared_weak_count_vtbl *v16;

  v6 = *a2;
  if (*(_DWORD *)(*a2 + 16))
  {
    v7 = *(unsigned int *)(v6 + 24);
    if ((_DWORD)v7)
    {
      v8 = 16 * v7;
      v9 = *(_QWORD **)(v6 + 8);
      while ((*v9 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v9 += 2;
        v8 -= 16;
        if (!v8)
          goto LABEL_14;
      }
    }
    else
    {
      v9 = *(_QWORD **)(v6 + 8);
    }
    v10 = *(_QWORD *)(v6 + 8) + 16 * v7;
    if (v9 != (_QWORD *)v10)
    {
LABEL_9:
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::erase((uint64_t)(a1 + 2), v9);
      while (1)
      {
        v9 += 2;
        if (v9 == (_QWORD *)v10)
          break;
        if ((*v9 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v9 != (_QWORD *)v10)
            goto LABEL_9;
          break;
        }
      }
      v6 = *a2;
    }
  }
LABEL_14:
  v11 = *(_QWORD *)(v6 + 32);
  if (v11 == a1[5])
  {
    if ((unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v12 = (unint64_t *)(v11 + 8);
      do
        v13 = __ldaxr(v12);
      while (__stlxr(v13 - 1, v12));
    }
    a1[5] = 0;
    v6 = *a2;
  }
  v14 = *a1;
  *a2 = 0;
  v16 = (std::__shared_weak_count_vtbl *)v6;
  llvm::orc::JITDylib::replace(v14, (uint64_t)a1, &v16, a3);
  result = v16;
  if (v16)
    return (std::__shared_weak_count_vtbl *)(*((uint64_t (**)(std::__shared_weak_count_vtbl *))v16->~__shared_weak_count
                                             + 1))(v16);
  return result;
}

uint64_t llvm::orc::ExecutionSession::OL_delegate@<X0>(uint64_t *a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::recursive_mutex *v20;
  char v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37[2];
  int v38;
  uint64_t v39;

  v33 = 0;
  v34 = 0;
  v35 = 0;
  v6 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(a2);
  v8 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  if ((uint64_t *)v8 == v6)
  {
    v18 = 0;
    v16 = 0;
    v11 = 0;
    v17 = 0;
  }
  else
  {
    v9 = v6;
    v10 = v7;
    v11 = 0;
    do
    {
      v37[0] = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1 + 2, v9, v37))v12 = v37[0];
      else
        v12 = a1[2] + 16 * *((unsigned int *)a1 + 8);
      *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v33, v9)+ 4) = *(_WORD *)(v12 + 8);
      v13 = *v9;
      if (*v9 == a1[5])
      {
        a1[5] = v11;
        v11 = v13;
      }
      if ((unint64_t)(*(_QWORD *)v12 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v14 = (unint64_t *)(*(_QWORD *)v12 + 8);
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
      }
      *(_QWORD *)v12 = -16;
      a1[3] = (uint64_t)vadd_s32((int32x2_t)a1[3], (int32x2_t)0x1FFFFFFFFLL);
      while (++v9 != v10)
      {
        if ((*v9 | 8) != 0xFFFFFFFFFFFFFFF8)
          goto LABEL_16;
      }
      v9 = v10;
LABEL_16:
      ;
    }
    while (v9 != (uint64_t *)v8);
    v16 = v33;
    v17 = v34;
    v18 = v35;
  }
  v19 = *a1;
  v30 = v16;
  v33 = 0;
  v34 = 0;
  v31 = v17;
  v32 = v18;
  v35 = 0;
  v20 = *(std::recursive_mutex **)(v19 + 32);
  std::recursive_mutex::lock(v20);
  v21 = atomic_load((unint64_t *)(a1[1] + 8));
  if ((v21 & 1) != 0)
  {
    v25 = (_QWORD *)operator new();
    v26 = a1[1];
    a1[1] = 0;
    *v25 = &off_251C14538;
    v25[1] = v26;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v25;
  }
  else
  {
    v22 = a1[1];
    v36 = v11;
    v37[0] = v30;
    v37[1] = v31;
    v30 = 0;
    v31 = 0;
    v38 = v32;
    v32 = 0;
    llvm::orc::ExecutionSession::createMaterializationResponsibility(&v39, v22, v37, &v36);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v39;
    v39 = 0;
    if ((unint64_t)(v36 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v23 = (unint64_t *)(v36 + 8);
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
    }
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v37);
    v11 = 0;
  }
  std::recursive_mutex::unlock(v20);
  if ((unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v27 = (unint64_t *)(v11 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v30);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v33);
}

void llvm::orc::MissingSymbolDefinitions::~MissingSymbolDefinitions(void **this)
{
  void **v2;

  *this = off_251C14720;
  v2 = this + 6;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(this + 1));
}

{
  void **v2;

  *this = off_251C14720;
  v2 = this + 6;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(this + 1));
  MEMORY[0x24BD1B3A4](this, 0x10B3C40D2FB38E6);
}

void *llvm::ErrorInfo<llvm::orc::MissingSymbolDefinitions,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::MissingSymbolDefinitions::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::MissingSymbolDefinitions,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::MissingSymbolDefinitions::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::orc::UnexpectedSymbolDefinitions::~UnexpectedSymbolDefinitions(void **this)
{
  void **v2;

  *this = off_251C14770;
  v2 = this + 6;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(this + 1));
}

{
  void **v2;

  *this = off_251C14770;
  v2 = this + 6;
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v2);
  if (*((char *)this + 47) < 0)
    operator delete(this[3]);
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(this + 1));
  MEMORY[0x24BD1B3A4](this, 0x10B3C40D2FB38E6);
}

void *llvm::ErrorInfo<llvm::orc::UnexpectedSymbolDefinitions,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::UnexpectedSymbolDefinitions::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::UnexpectedSymbolDefinitions,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::UnexpectedSymbolDefinitions::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::orc::MaterializationTask::~MaterializationTask(llvm::orc::MaterializationTask *this)
{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_251C14800;
  v4 = (uint64_t *)*((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
}

{
  _QWORD *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;

  *(_QWORD *)this = &off_251C14800;
  v4 = (uint64_t *)*((_QWORD *)this + 2);
  v2 = (_QWORD *)((char *)this + 16);
  v3 = v4;
  *v2 = 0;
  if (v4)
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)v2, v3);
  v5 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::RTTIExtends<llvm::orc::MaterializationTask,llvm::orc::Task>::dynamicClassID()
{
  return &llvm::orc::MaterializationTask::ID;
}

uint64_t llvm::RTTIExtends<llvm::orc::MaterializationTask,llvm::orc::Task>::isA(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::orc::Task::ID || a2 == &llvm::RTTIRoot::ID;
  return a2 == &llvm::orc::MaterializationTask::ID || v3;
}

void llvm::orc::LookupTask::~LookupTask(llvm::orc::LookupTask *this)
{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251C14848;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

{
  uint64_t v2;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &off_251C14848;
  *((_QWORD *)this + 1) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::RTTIExtends<llvm::orc::LookupTask,llvm::orc::Task>::dynamicClassID()
{
  return &llvm::orc::LookupTask::ID;
}

uint64_t llvm::RTTIExtends<llvm::orc::LookupTask,llvm::orc::Task>::isA(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::orc::Task::ID || a2 == &llvm::RTTIRoot::ID;
  return a2 == &llvm::orc::LookupTask::ID || v3;
}

void llvm::orc::ResourceTrackerDefunct::~ResourceTrackerDefunct(llvm::orc::ResourceTrackerDefunct *this)
{
  unsigned int *v1;

  *(_QWORD *)this = &off_251C14538;
  v1 = (unsigned int *)*((_QWORD *)this + 1);
  if (v1)
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v1);
}

{
  unsigned int *v1;

  *(_QWORD *)this = &off_251C14538;
  v1 = (unsigned int *)*((_QWORD *)this + 1);
  if (v1)
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v1);
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::ErrorInfo<llvm::orc::ResourceTrackerDefunct,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::ResourceTrackerDefunct::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::ResourceTrackerDefunct,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::ResourceTrackerDefunct::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void *llvm::ErrorInfo<llvm::orc::FailedToMaterialize,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::FailedToMaterialize::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::FailedToMaterialize,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::FailedToMaterialize::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::orc::UnsatisfiedSymbolDependencies::~UnsatisfiedSymbolDependencies(void **this)
{
  unsigned int *v2;

  *this = off_251C145D8;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)(this + 7));
  MEMORY[0x24BD1B398](this[7], 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)(this + 4));
  v2 = (unsigned int *)this[3];
  if (v2)
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v2);
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(this + 1));
}

{
  unsigned int *v2;

  *this = off_251C145D8;
  if (*((char *)this + 103) < 0)
    operator delete(this[10]);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)(this + 7));
  MEMORY[0x24BD1B398](this[7], 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)(this + 4));
  v2 = (unsigned int *)this[3];
  if (v2)
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v2);
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(this + 1));
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::ErrorInfo<llvm::orc::UnsatisfiedSymbolDependencies,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::UnsatisfiedSymbolDependencies::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::UnsatisfiedSymbolDependencies,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::UnsatisfiedSymbolDependencies::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::orc::SymbolsNotFound::~SymbolsNotFound(llvm::orc::SymbolsNotFound *this)
{
  char *v1;
  void **v2;

  *(_QWORD *)this = off_251C14628;
  v1 = (char *)this + 8;
  v2 = (void **)((char *)this + 24);
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v2);
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)v1);
}

{
  char *v2;
  void **v3;

  *(_QWORD *)this = off_251C14628;
  v2 = (char *)this + 8;
  v3 = (void **)((char *)this + 24);
  std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v3);
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)v2);
  MEMORY[0x24BD1B3A4](this, 0xA1C4084DA3AFDLL);
}

void *llvm::ErrorInfo<llvm::orc::SymbolsNotFound,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::orc::SymbolsNotFound::ID;
}

BOOL llvm::ErrorInfo<llvm::orc::SymbolsNotFound,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::SymbolsNotFound::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void llvm::orc::AbsoluteSymbolsMaterializationUnit::~AbsoluteSymbolsMaterializationUnit(llvm::orc::AbsoluteSymbolsMaterializationUnit *this)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)this = &off_251C14678;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)this + 40);
  *(_QWORD *)this = off_251C147C0;
  v2 = *((_QWORD *)this + 4);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)this + 8);
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)this = &off_251C14678;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)this + 40);
  *(_QWORD *)this = off_251C147C0;
  v2 = *((_QWORD *)this + 4);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)this + 8);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::orc::ReExportsMaterializationUnit::~ReExportsMaterializationUnit(llvm::orc::ReExportsMaterializationUnit *this)
{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)this = &off_251C146B8;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)this + 56);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 7), 8);
  *(_QWORD *)this = off_251C147C0;
  v2 = *((_QWORD *)this + 4);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)this + 8);
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;

  *(_QWORD *)this = &off_251C146B8;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)this + 56);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 7), 8);
  *(_QWORD *)this = off_251C147C0;
  v2 = *((_QWORD *)this + 4);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)this + 8);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::reserve(uint64_t *a1, unint64_t a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[5];

  v4 = a1[2];
  result = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = a1[1] - *a1;
    v7[4] = result;
    v7[0] = std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(result, a2);
    v7[1] = v7[0] + v5;
    v7[2] = v7[0] + v5;
    v7[3] = v7[0] + 16 * v6;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__swap_out_circular_buffer(a1, v7);
    return std::__split_buffer<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::~__split_buffer((uint64_t)v7);
  }
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(unint64_t a1)
{
  if (a1 >> 61)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(8 * a1);
}

uint64_t std::__split_buffer<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(unsigned int **)(v2 - 8);
    v2 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -16;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -8;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = v4 + 24 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          v22 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          v15 = v22;
          if ((unint64_t)(*v22 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v16 = (unint64_t *)(*v22 + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
          }
          *v15 = 0;
          *v15 = *(_QWORD *)v13;
          *(_QWORD *)v13 = 0;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
          v14 = *(_QWORD *)v13;
        }
        if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v18 = (unint64_t *)(v14 + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
        }
        v13 += 24;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = 24 * v20;
    do
    {
      *result = -8;
      result += 3;
      v21 -= 24;
    }
    while (v21);
  }
  return result;
}

_DWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::init(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(16 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 16 * v5;
      do
      {
        *(_QWORD *)result = -8;
        result += 4;
        v6 -= 16;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t llvm::orc::ExecutionSession::createMaterializationResponsibility(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t result;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  _QWORD *v22;

  v8 = atomic_load((unint64_t *)(a2 + 8));
  v9 = v8 & 0xFFFFFFFFFFFFFFFELL;
  v10 = operator new();
  v11 = v10;
  do
    v12 = __ldxr((unsigned int *)a2);
  while (__stxr(v12 + 1, (unsigned int *)a2));
  v19 = *a3;
  *a3 = 0;
  v20 = a3[1];
  a3[1] = 0;
  v21 = *((_DWORD *)a3 + 4);
  *((_DWORD *)a3 + 4) = 0;
  v13 = *a4;
  *a4 = 0;
  v14 = atomic_load((unint64_t *)(a2 + 8));
  *(_QWORD *)v10 = v14 & 0xFFFFFFFFFFFFFFFELL;
  *(_QWORD *)(v10 + 8) = a2;
  *(_QWORD *)(v10 + 16) = v19;
  v19 = 0;
  *(_QWORD *)(v10 + 24) = v20;
  v20 = 0;
  *(_DWORD *)(v10 + 32) = v21;
  v21 = 0;
  *(_QWORD *)(v10 + 40) = v13;
  *a1 = v10;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v19);
  v18 = a2;
  v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>,llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::FindAndConstruct(v9 + 264, &v18)+ 1;
  v17 = v11;
  v22 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v15, &v17, &v22);
  if ((result & 1) == 0)
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>,llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>::InsertIntoBucketImpl<llvm::orc::MaterializationResponsibility *>((uint64_t)v15, &v17, v22);
    *(_QWORD *)result = v17;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>,llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>::InsertIntoBucketImpl<llvm::orc::MaterializationResponsibility *>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseSetPair<llvm::orc::MaterializationResponsibility *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 8 * v3;
      v13 = (_QWORD *)v4;
      do
      {
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v16 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)a1, v13, &v16);
          *v16 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v14 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v14)
  {
    v15 = 8 * v14;
    do
    {
      *result++ = -4096;
      v15 -= 8;
    }
    while (v15);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::find(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;

  v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v4))return v4;
  else
    return *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 16);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 72 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -16;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 72 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>>(uint64_t *a1, __int128 *a2, __int128 *a3)
{
  uint64_t v6;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  __int128 v15;

  v6 = operator new();
  v7 = *a2;
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  v14 = *a3;
  v15 = v7;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  llvm::orc::FailedToMaterialize::FailedToMaterialize(v6, (uint64_t)&v15, (uint64_t)&v14);
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  v11 = (std::__shared_weak_count *)*((_QWORD *)&v15 + 1);
  if (*((_QWORD *)&v15 + 1))
  {
    v12 = (unint64_t *)(*((_QWORD *)&v15 + 1) + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  *a1 = v6;
}

void std::unique_ptr<std::__tree_node<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,void *>>>>::reset[abi:nn180100](uint64_t a1)
{
  void *v1;

  v1 = *(void **)a1;
  *(_QWORD *)a1 = 0;
  if (v1)
  {
    if (*(_BYTE *)(a1 + 16))
      std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)v1 + 32);
    operator delete(v1);
  }
}

char *std::vector<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::__init_with_size[abi:nn180100]<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>*,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>*>(char *result, unsigned int **a2, unsigned int **a3, unint64_t a4)
{
  char *v6;
  unsigned int **v7;
  unsigned int *v8;
  unsigned int v9;

  if (a4)
  {
    v6 = result;
    result = std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](result, a4);
    v7 = (unsigned int **)*((_QWORD *)v6 + 1);
    while (a2 != a3)
    {
      v8 = *a2;
      *v7 = *a2;
      if (v8)
      {
        do
          v9 = __ldxr(v8);
        while (__stxr(v9 + 1, v8));
      }
      ++a2;
      ++v7;
    }
    *((_QWORD *)v6 + 1) = v7;
  }
  return result;
}

uint64_t std::__split_buffer<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;
  unsigned int *v5;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    v5 = *(unsigned int **)(v2 - 8);
    v2 -= 8;
    v4 = v5;
    *(_QWORD *)(a1 + 16) = v2;
    if (v5)
    {
      llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>>::~Expected(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap(a1);
  }
  return a1;
}

uint64_t *llvm::orc::SymbolLookupSet::SymbolLookupSet(uint64_t *a1, uint64_t *a2, unint64_t a3, int a4)
{
  uint64_t *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v15;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::reserve(a1, a3);
  if (a3)
  {
    v8 = &a2[a3];
    do
    {
      v9 = *a2;
      v15 = v9;
      if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldaxr(v10);
        while (__stlxr(v11 + 1, v10));
      }
      llvm::orc::SymbolLookupSet::add(a1, &v15, a4);
      if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v12 = (unint64_t *)(v15 + 8);
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
      }
      ++a2;
    }
    while (a2 != v8);
  }
  return a1;
}

uint64_t *std::__optional_destruct_base<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>,false>::~__optional_destruct_base[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;

  if (*((_BYTE *)a1 + 16))
  {
    v2 = (uint64_t)(a1 + 1);
    v3 = (uint64_t *)a1[1];
    a1[1] = 0;
    if (v3)
      std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100](v2, v3);
    v4 = *a1;
    *a1 = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
  return a1;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(unint64_t a1)
{
  if (a1 >> 60)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(16 * a1);
}

uint64_t std::__split_buffer<std::weak_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 16;
    v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

_QWORD *llvm::orc::SymbolLookupSet::remove(_QWORD *this, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = this[1];
  v3 = *this + 16 * a2;
  v4 = *(_QWORD *)v3;
  *(_QWORD *)v3 = 0;
  *(_QWORD *)v3 = *(_QWORD *)(v2 - 16);
  *(_QWORD *)(v2 - 16) = v4;
  LODWORD(v4) = *(_DWORD *)(v3 + 8);
  *(_DWORD *)(v3 + 8) = *(_DWORD *)(v2 - 8);
  *(_DWORD *)(v2 - 8) = v4;
  v5 = this[1];
  v8 = *(_QWORD *)(v5 - 16);
  v6 = v5 - 16;
  v7 = v8;
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v9 = (unint64_t *)(v7 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  this[1] = v6;
  return this;
}

uint64_t llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::DenseSetImpl(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  if (a3)
  {
    v6 = (a3 - 1) | ((unint64_t)(a3 - 1) >> 1) | (((a3 - 1) | ((unint64_t)(a3 - 1) >> 1)) >> 2);
    v7 = v6 | (v6 >> 4) | ((v6 | (v6 >> 4)) >> 8);
    LODWORD(v7) = ((v7 | (v7 >> 16)) >> 32) | v7 | (v7 >> 16);
    v8 = __CFADD__((_DWORD)v7, 1);
    v9 = v7 + 1;
    if (v8)
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
    }
    else
    {
      v10 = (4 * v9 / 3u + 1) | ((unint64_t)(4 * v9 / 3u + 1) >> 1);
      v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
      LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
      *(_DWORD *)(a1 + 16) = v11;
      v12 = operator new(8 * v11, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v12;
      *(_QWORD *)(a1 + 8) = 0;
      v13 = *(unsigned int *)(a1 + 16);
      if ((_DWORD)v13)
      {
        v14 = 8 * v13;
        do
        {
          *v12++ = -8;
          v14 -= 8;
        }
        while (v14);
      }
    }
    v15 = 8 * a3;
    do
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1, a2++, (uint64_t)&v17);
      v15 -= 8;
    }
    while (v15);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 16) = 0;
  }
  return a1;
}

_QWORD *llvm::DenseMap<llvm::orc::JITDylib *,std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = v4;
      do
      {
        v14 = *(void **)v13;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          v15 = v18;
          *v18 = *(void **)v13;
          v15[1] = 0;
          v15[2] = 0;
          v15[3] = 0;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          v15[3] = *(void **)(v13 + 24);
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 24) = 0;
          ++*(_DWORD *)(a1 + 8);
          v18 = (void **)(v13 + 8);
          std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v18);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 32 * v16;
    do
    {
      *result = -4096;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

void std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        v4 = std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](v4 - 16);
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>>::destroy[abi:nn180100](uint64_t a1, uint64_t *a2)
{
  _QWORD *v3;
  uint64_t *v4;
  uint64_t result;

  v3 = a2 + 1;
  v4 = (uint64_t *)a2[1];
  *v3 = 0;
  if (v4)
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)v3, v4);
  result = *a2;
  *a2 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::operator=(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  int v9;
  int v10;

  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_QWORD **)a1;
  if ((_DWORD)v4)
  {
    v6 = &v5[v4];
    do
    {
      if ((unint64_t)(*v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v7 = (unint64_t *)(*v5 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
      }
      ++v5;
    }
    while (v5 != v6);
    v5 = *(_QWORD **)a1;
  }
  MEMORY[0x24BD1B398](v5, 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v9 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v9;
  v10 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v10;
  return a1;
}

void *llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::copyFrom(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  void *v6;

  result = (void *)MEMORY[0x24BD1B398](*(_QWORD *)a1, 8);
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    v6 = operator new(8 * v5, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = v6;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    return memcpy(v6, *(const void **)a2, 8 * *(unsigned int *)(a1 + 16));
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

_QWORD *llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::copyFrom(void **a1, uint64_t a2)
{
  _QWORD *result;
  uint64_t v5;

  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::destroyAll((uint64_t)a1);
  result = (_QWORD *)MEMORY[0x24BD1B398](*a1, 8);
  v5 = *(unsigned int *)(a2 + 16);
  *((_DWORD *)a1 + 4) = v5;
  if ((_DWORD)v5)
  {
    *a1 = operator new(72 * v5, (std::align_val_t)8uLL);
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::copyFrom<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>>(a1, (uint64_t *)a2);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::destroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 72 * v1;
    v3 = (_QWORD *)(*(_QWORD *)result + 48);
    do
    {
      if ((*(v3 - 6) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::destroyAll((uint64_t)v3);
        MEMORY[0x24BD1B398](*v3, 8);
        MEMORY[0x24BD1B398](*(v3 - 3), 8);
        result = std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(v3 - 5));
      }
      v3 += 9;
      v2 -= 72;
    }
    while (v2);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::copyFrom<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>>(_QWORD *result, uint64_t *a2)
{
  unint64_t v2;
  _QWORD *v4;
  unint64_t i;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;

  result[1] = a2[1];
  v2 = *((unsigned int *)result + 4);
  if ((_DWORD)v2)
  {
    v4 = result;
    for (i = 0; i < v2; ++i)
    {
      *(_QWORD *)(*v4 + 72 * i) = *(_QWORD *)(*a2 + 72 * i);
      v6 = *v4 + 72 * i;
      if ((*(_QWORD *)v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v7 = *a2;
        v8 = *a2 + 72 * i;
        v10 = *(_QWORD *)(v8 + 8);
        v9 = *(_QWORD *)(v8 + 16);
        *(_QWORD *)(v6 + 8) = v10;
        *(_QWORD *)(v6 + 16) = v9;
        if (v9)
        {
          v11 = (unint64_t *)(v9 + 8);
          do
            v12 = __ldxr(v11);
          while (__stxr(v12 + 1, v11));
        }
        *(_QWORD *)(v6 + 24) = 0;
        *(_QWORD *)(v6 + 32) = 0;
        v13 = v7 + 72 * i;
        *(_DWORD *)(v6 + 40) = 0;
        MEMORY[0x24BD1B398](0, 8);
        v14 = *(unsigned int *)(v13 + 40);
        *(_DWORD *)(v6 + 40) = v14;
        if ((_DWORD)v14)
        {
          v15 = operator new(8 * v14, (std::align_val_t)8uLL);
          *(_QWORD *)(v6 + 24) = v15;
          *(_QWORD *)(v6 + 32) = *(_QWORD *)(v13 + 32);
          memcpy(v15, *(const void **)(v13 + 24), 8 * *(unsigned int *)(v6 + 40));
        }
        else
        {
          *(_QWORD *)(v6 + 24) = 0;
          *(_QWORD *)(v6 + 32) = 0;
        }
        *(_QWORD *)(v6 + 48) = 0;
        *(_QWORD *)(v6 + 56) = 0;
        v16 = v6 + 48;
        *(_DWORD *)(v16 + 16) = 0;
        result = llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::copyFrom(v16, v7 + 72 * i + 48);
        v2 = *((unsigned int *)v4 + 4);
      }
    }
  }
  return result;
}

void *llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::copyFrom(uint64_t a1, uint64_t a2)
{
  void *result;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::destroyAll(a1);
  result = (void *)MEMORY[0x24BD1B398](*(_QWORD *)a1, 8);
  v5 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v5;
  if ((_DWORD)v5)
  {
    result = operator new(32 * v5, (std::align_val_t)8uLL);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
    v6 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v6)
    {
      v7 = 0;
      for (i = 0; i < v6; ++i)
      {
        *(_QWORD *)(*(_QWORD *)a1 + v7) = *(_QWORD *)(*(_QWORD *)a2 + v7);
        v9 = *(_QWORD *)a1;
        if ((*(_QWORD *)(*(_QWORD *)a1 + v7) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v10 = v9 + v7;
          v11 = *(_QWORD *)a2 + v7;
          *(_QWORD *)(v10 + 8) = 0;
          *(_QWORD *)(v10 + 16) = 0;
          v12 = v9 + v7 + 8;
          *(_DWORD *)(v12 + 16) = 0;
          result = llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::copyFrom(v12, v11 + 8);
          v6 = *(unsigned int *)(a1 + 16);
        }
        v7 += 32;
      }
    }
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

char *std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>(char **a1, uint64_t *a2)
{
  char *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  char *v24;
  int64x2_t v25;
  char *v26;
  uint64_t v27;

  v2 = *a1;
  v3 = (a1[1] - *a1) >> 3;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 61)
    abort();
  v8 = a1[2];
  v7 = (uint64_t)(a1 + 2);
  v9 = v8 - v2;
  if (v9 >> 2 > v4)
    v4 = v9 >> 2;
  if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8)
    v10 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v10 = v4;
  v27 = v7;
  if (v10)
    v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>(v7, v10);
  else
    v11 = 0;
  v12 = &v11[8 * v3];
  v24 = v11;
  v25.i64[0] = (uint64_t)v12;
  v25.i64[1] = (uint64_t)v12;
  v26 = &v11[8 * v10];
  v13 = *a2;
  *(_QWORD *)v12 = *a2;
  v14 = v12;
  if ((unint64_t)(v13 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v15 = (unint64_t *)(v13 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v14 = (char *)v25.i64[1];
    v12 = (char *)v25.i64[0];
  }
  v17 = v14 + 8;
  v25.i64[1] = (uint64_t)(v14 + 8);
  v19 = *a1;
  v18 = a1[1];
  if (v18 == *a1)
  {
    v21 = vdupq_n_s64((unint64_t)v18);
  }
  else
  {
    do
    {
      *((_QWORD *)v12 - 1) = 0;
      v12 -= 8;
      v20 = *((_QWORD *)v18 - 1);
      v18 -= 8;
      *(_QWORD *)v12 = v20;
      *(_QWORD *)v18 = 0;
    }
    while (v18 != v19);
    v21 = *(int64x2_t *)a1;
    v17 = (char *)v25.i64[1];
  }
  *a1 = v12;
  a1[1] = v17;
  v25 = v21;
  v22 = a1[2];
  a1[2] = v26;
  v26 = v22;
  v24 = (char *)v21.i64[0];
  std::__split_buffer<llvm::orc::SymbolStringPtr>::~__split_buffer((uint64_t)&v24);
  return v17;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>,llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::FindAndConstruct(uint64_t a1, _QWORD *a2)
{
  char v4;
  _QWORD *result;
  int v6;
  unsigned int v7;
  _QWORD *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::grow(a1, v7);
    v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *llvm::DenseMap<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,llvm::DenseSet<llvm::orc::MaterializationResponsibility *,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = v4;
      do
      {
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, (_QWORD *)v13, &v18);
          v14 = v18;
          v15 = *(_QWORD *)v13;
          *(_DWORD *)(v18 + 24) = 0;
          *(_QWORD *)(v14 + 8) = 0;
          *(_QWORD *)(v14 + 16) = 0;
          *(_QWORD *)v14 = v15;
          *(_QWORD *)(v14 + 8) = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          *(_DWORD *)(v14 + 16) = *(_DWORD *)(v13 + 16);
          *(_DWORD *)(v13 + 16) = 0;
          LODWORD(v15) = *(_DWORD *)(v14 + 20);
          *(_DWORD *)(v14 + 20) = *(_DWORD *)(v13 + 20);
          *(_DWORD *)(v13 + 20) = v15;
          LODWORD(v15) = *(_DWORD *)(v14 + 24);
          *(_DWORD *)(v14 + 24) = *(_DWORD *)(v13 + 24);
          *(_DWORD *)(v13 + 24) = v15;
          ++*(_DWORD *)(a1 + 8);
          MEMORY[0x24BD1B398](0, 8);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 32 * v16;
    do
    {
      *result = -4096;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

uint64_t llvm::Expected<std::unique_ptr<llvm::orc::MaterializationResponsibility>>::~Expected(uint64_t a1)
{
  char v2;
  uint64_t *v3;

  v2 = *(_BYTE *)(a1 + 8);
  v3 = *(uint64_t **)a1;
  *(_QWORD *)a1 = 0;
  if ((v2 & 1) != 0)
  {
    if (v3)
      (*(void (**)(uint64_t *))(*v3 + 8))(v3);
  }
  else if (v3)
  {
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100](a1, v3);
  }
  return a1;
}

_DWORD *llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::init(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(32 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 32 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 8;
        v6 -= 32;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      if ((*(_QWORD *)(result - 8) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(result);
      result += 32;
      v2 -= 32;
    }
    while (v2);
  }
  return result;
}

_QWORD *llvm::orc::AsynchronousSymbolQuery::handleComplete(llvm::orc::ExecutionSession &)::RunQueryCompleteTask::~RunQueryCompleteTask(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &off_251C14890;
  v2 = (uint64_t)(a1 + 1);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(a1 + 4);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(v2);
  return a1;
}

void llvm::orc::AsynchronousSymbolQuery::handleComplete(llvm::orc::ExecutionSession &)::RunQueryCompleteTask::~RunQueryCompleteTask(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &off_251C14890;
  v1 = (uint64_t)(a1 + 1);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(a1 + 4);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(v1);
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::RTTIExtends<llvm::orc::Task,llvm::RTTIRoot>::dynamicClassID()
{
  return &llvm::orc::Task::ID;
}

BOOL llvm::RTTIExtends<llvm::orc::Task,llvm::RTTIRoot>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::orc::Task::ID || a2 == &llvm::RTTIRoot::ID;
}

llvm::raw_ostream *llvm::orc::AsynchronousSymbolQuery::handleComplete(llvm::orc::ExecutionSession &)::RunQueryCompleteTask::printDescription(uint64_t a1, llvm::raw_ostream *this)
{
  void *v4;

  v4 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v4 > 0x23uLL)
  {
    qmemcpy(v4, "Execute query complete callback for ", 36);
    *((_QWORD *)this + 4) += 36;
  }
  else
  {
    llvm::raw_ostream::write(this, "Execute query complete callback for ", 0x24uLL);
  }
  return llvm::orc::operator<<(this, a1 + 8);
}

uint64_t llvm::orc::AsynchronousSymbolQuery::handleComplete(llvm::orc::ExecutionSession &)::RunQueryCompleteTask::run(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  _QWORD v5[2];
  int v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)(a1 + 32);
  v7 = 0;
  v5[0] = *(_QWORD *)(a1 + 8);
  v5[1] = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  v6 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a1 + 24) = 0;
  v3 = *(_QWORD *)(a1 + 56);
  if ((v3 & 2) == 0)
    v2 = (_QWORD *)*v2;
  (*(void (**)(_QWORD *, _QWORD *))(v3 & 0xFFFFFFFFFFFFFFF8))(v2, v5);
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v5);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>((uint64_t)a1, (uint64_t)a2, a2, v8);
    v6 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::moveFromOldBuckets(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)v5, a2, &v11);
      v9 = v11;
      v10 = *a2;
      *(_DWORD *)(v11 + 24) = 0;
      *(_QWORD *)(v9 + 8) = 0;
      *(_QWORD *)(v9 + 16) = 0;
      *(_QWORD *)v9 = v10;
      *(_QWORD *)(v9 + 8) = a2[1];
      a2[1] = 0;
      *(_DWORD *)(v9 + 16) = *((_DWORD *)a2 + 4);
      *((_DWORD *)a2 + 4) = 0;
      LODWORD(v10) = *(_DWORD *)(v9 + 20);
      *(_DWORD *)(v9 + 20) = *((_DWORD *)a2 + 5);
      *((_DWORD *)a2 + 5) = v10;
      LODWORD(v10) = *(_DWORD *)(v9 + 24);
      *(_DWORD *)(v9 + 24) = *((_DWORD *)a2 + 6);
      *((_DWORD *)a2 + 6) = v10;
      ++*(_DWORD *)(v5 + 8);
      result = llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)(a2 + 1));
    }
    a2 += 4;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v12);
  v7 = v12;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a2, a2, v12);
    v7 = (_QWORD *)result;
    if ((unint64_t)(*(_QWORD *)result - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v9 = (unint64_t *)(*(_QWORD *)result + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
    }
    *(_QWORD *)result = 0;
    *(_QWORD *)result = *a2;
    *a2 = 0;
    v8 = 1;
  }
  v11 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v11;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

void std::vector<std::pair<llvm::orc::SymbolLookupSet,std::shared_ptr<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo>>>::__base_destruct_at_end[abi:nn180100](uint64_t a1, void **a2)
{
  void **v4;
  void **v5;
  void **v6;

  v4 = *(void ***)(a1 + 8);
  if (v4 != a2)
  {
    do
    {
      v5 = v4 - 5;
      std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(v4 - 2));
      v6 = v5;
      std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v6);
      v4 = v5;
    }
    while (v5 != a2);
  }
  *(_QWORD *)(a1 + 8) = a2;
}

void std::__shared_ptr_emplace<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C148D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C148D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

void std::__shared_ptr_emplace<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::OnResolveInfo>>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v2;
  _QWORD *v3;
  uint64_t *v4;
  void **v5;

  v5 = (void **)(a1 + 56);
  std::vector<llvm::orc::SymbolDependenceGroup>::__destroy_vector::operator()[abi:nn180100](&v5);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll(a1 + 32);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 32), 8);
  v4 = *(uint64_t **)(a1 + 24);
  v3 = (_QWORD *)(a1 + 24);
  v2 = v4;
  *v3 = 0;
  if (v4)
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)v3, v2);
}

void std::vector<llvm::orc::SymbolDependenceGroup>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  void *v2;
  uint64_t v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = (uint64_t)v1[1];
    v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        std::allocator<llvm::orc::SymbolDependenceGroup>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while ((void *)v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::allocator<llvm::orc::SymbolDependenceGroup>::destroy[abi:nn180100](uint64_t a1, uint64_t a2)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll(a2 + 24);
  MEMORY[0x24BD1B398](*(_QWORD *)(a2 + 24), 8);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_1>(uint64_t **a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  _QWORD *v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22[2];
  int v23;
  uint64_t v24[2];
  int v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v26 = *(_BYTE *)(a2 + 24) & 1;
  v3 = *(_QWORD *)a2;
  if (v26)
  {
    *(_QWORD *)a2 = 0;
    v24[0] = v3;
    v12 = *(_QWORD *)(*(_QWORD *)**a1 + 32);
    v24[0] = 0;
    v18 = v3;
    llvm::orc::ExecutionSession::reportError(v12, &v18);
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    llvm::orc::ExecutionSession::OL_notifyFailed(*(_QWORD *)(*(_QWORD *)**a1 + 32), **a1);
  }
  else
  {
    v24[0] = *(_QWORD *)a2;
    v24[1] = *(_QWORD *)(a2 + 8);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v25 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v4 = *a1;
    v5 = **a1;
    v6 = *(_QWORD *)v5;
    v7 = *(_QWORD *)(*(_QWORD *)v5 + 32);
    v23 = 0;
    v22[0] = 0;
    v22[1] = 0;
    if (*((_DWORD *)v4 + 4))
    {
      v8 = v4[1];
      v9 = *((unsigned int *)v4 + 6);
      if ((_DWORD)v9)
      {
        v10 = 24 * v9;
        v11 = v8;
        while ((*(_QWORD *)v11 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v11 += 24;
          v10 -= 24;
          if (!v10)
            goto LABEL_19;
        }
      }
      else
      {
        v11 = v8;
      }
      v13 = v8 + 24 * v9;
      if (v11 != v13)
      {
LABEL_13:
        if ((*(_BYTE *)(v11 + 17) & 0x40) == 0)
        {
          v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(v24, (uint64_t *)(v11 + 8))[1];
          v15 = *(_WORD *)(v11 + 16);
          v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct(v22, (uint64_t *)v11);
          v16[1] = v14;
          *((_WORD *)v16 + 8) = v15;
        }
        while (1)
        {
          v11 += 24;
          if (v11 == v13)
            break;
          if ((*(_QWORD *)v11 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (v11 != v13)
              goto LABEL_13;
            break;
          }
        }
        v5 = **a1;
        v6 = *(_QWORD *)v5;
      }
    }
LABEL_19:
    llvm::orc::JITDylib::resolve(v6, v5, (uint64_t)v22, &v21);
    if (v21)
    {
      v20 = v21;
      v21 = 0;
      llvm::orc::ExecutionSession::reportError(v7, &v20);
      if (v20)
        (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
      llvm::orc::ExecutionSession::OL_notifyFailed(*(_QWORD *)(*(_QWORD *)**a1 + 32), **a1);
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    else
    {
      llvm::orc::ExecutionSession::OL_notifyEmitted(*(std::recursive_mutex **)(*(_QWORD *)**a1 + 32), **a1, (*a1)[4], 0xAAAAAAAAAAAAAAABLL * (((*a1)[5] - (*a1)[4]) >> 4), &v21);
      if (v21)
      {
        v19 = v21;
        llvm::orc::ExecutionSession::reportError(v7, &v19);
        if (v19)
          (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
        llvm::orc::ExecutionSession::OL_notifyFailed(*(_QWORD *)(*(_QWORD *)**a1 + 32), **a1);
      }
    }
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)v22);
  }
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v24);
}

__n128 llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::MoveImpl<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_1>(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

_QWORD *std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_251C14910;
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(a1 + 1));
  return a1;
}

void std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~__func(_QWORD *a1)
{
  *a1 = &off_251C14910;
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(a1 + 1));
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__clone(_QWORD *a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x20uLL);
  v4 = a1[1];
  v3 = a1[2];
  *result = &off_251C14910;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result[3] = a1[3];
  return result;
}

_QWORD *std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__clone(_QWORD *result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = result[1];
  v2 = result[2];
  *a2 = &off_251C14910;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  a2[3] = result[3];
  return result;
}

uint64_t std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::destroy(uint64_t a1)
{
  return std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](a1 + 8);
}

void std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::destroy_deallocate(void *a1)
{
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)a1 + 8);
  operator delete(a1);
}

uint64_t std::__function::__func<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0,std::allocator<llvm::orc::ReExportsMaterializationUnit::materialize(std::unique_ptr<llvm::orc::MaterializationResponsibility>)::$_0>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *i;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _BYTE v27[24];
  _QWORD v28[3];
  uint64_t v29[2];
  unsigned int v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[2];
  int v35;
  uint64_t v36[2];

  v36[1] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 8))
  {
    v3 = result;
    v4 = *(_QWORD *)(result + 24);
    v28[0] = 0;
    v5 = v28[0];
    if (!(_DWORD)result)
      v5 = *(_QWORD *)a2 + 32 * *(unsigned int *)(a2 + 16);
    v6 = *(_QWORD *)(v3 + 8);
    if (*(_DWORD *)(v6 + 16))
    {
      v7 = *(uint64_t **)(v6 + 8);
      v8 = *(unsigned int *)(v6 + 24);
      if ((_DWORD)v8)
      {
        v9 = 24 * v8;
        for (i = v7; (*i | 8) == 0xFFFFFFFFFFFFFFF8; i += 3)
        {
          v9 -= 24;
          if (!v9)
            return result;
        }
      }
      else
      {
        i = v7;
      }
      v11 = &v7[3 * v8];
      if (i != v11)
      {
        v12 = (uint64_t *)(v5 + 8);
LABEL_13:
        v28[0] = 0;
        result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v12, i + 1, v28);
        if ((_DWORD)result)
        {
          v13 = *(_QWORD *)(v3 + 8);
          v36[0] = *i;
          if ((unint64_t)(v36[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v14 = (unint64_t *)(v36[0] + 8);
            do
              v15 = __ldaxr(v14);
            while (__stlxr(v15 + 1, v14));
          }
          llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::DenseSetImpl((uint64_t)v28, v36, 1);
          v16 = *(_QWORD *)(v3 + 24);
          v17 = i[1];
          v32 = v17;
          if ((unint64_t)(v17 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v18 = (unint64_t *)(v17 + 8);
            do
              v19 = __ldaxr(v18);
            while (__stlxr(v19 + 1, v18));
          }
          llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::DenseSetImpl((uint64_t)v27, &v32, 1);
          v33 = v16;
          v34[0] = 0;
          v34[1] = 0;
          v35 = 0;
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::copyFrom((uint64_t)v34, (uint64_t)v27);
          v30 = 4;
          v20 = operator new(0x80uLL, (std::align_val_t)8uLL);
          v29[0] = (uint64_t)v20;
          v29[1] = 0;
          if (v30)
          {
            v21 = 32 * v30;
            do
            {
              *v20 = -4096;
              v20 += 4;
              v21 -= 32;
            }
            while (v21);
          }
          v31 = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>(v29, &v33, &v31) & 1) == 0)
          {
            v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>((uint64_t)v29, (uint64_t)&v33, &v33, v31);
            *v22 = v33;
            v22[2] = 0;
            *((_DWORD *)v22 + 6) = 0;
            v22[1] = 0;
            llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::copyFrom((uint64_t)(v22 + 1), (uint64_t)v34);
          }
          std::vector<llvm::orc::SymbolDependenceGroup>::push_back[abi:nn180100]((uint64_t *)(v13 + 32), (uint64_t)v28);
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)v29);
          MEMORY[0x24BD1B398](v29[0], 8);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)v28);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)v34);
          result = llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)v27);
          if ((unint64_t)(v32 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v23 = (unint64_t *)(v32 + 8);
            do
              v24 = __ldaxr(v23);
            while (__stlxr(v24 - 1, v23));
          }
          if ((unint64_t)(v36[0] - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v25 = (unint64_t *)(v36[0] + 8);
            do
              v26 = __ldaxr(v25);
            while (__stlxr(v26 - 1, v25));
          }
        }
        while (1)
        {
          i += 3;
          if (i == v11)
            break;
          if ((*i | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (i != v11)
              goto LABEL_13;
            return result;
          }
        }
      }
    }
  }
  return result;
}

void std::vector<llvm::orc::SymbolDependenceGroup>::push_back[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t *v17;

  v5 = (uint64_t)(a1 + 2);
  v4 = a1[2];
  v6 = a1[1];
  if (v6 >= v4)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *a1) >> 4);
    if (v8 + 1 > 0x555555555555555)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v4 - *a1) >> 4);
    v10 = 2 * v9;
    if (2 * v9 <= v8 + 1)
      v10 = v8 + 1;
    if (v9 >= 0x2AAAAAAAAAAAAAALL)
      v11 = 0x555555555555555;
    else
      v11 = v10;
    v17 = a1 + 2;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>((uint64_t)(a1 + 2), v11);
    else
      v12 = 0;
    v13 = v12;
    v14 = &v12[48 * v8];
    v16 = &v12[48 * v11];
    std::allocator<llvm::orc::SymbolDependenceGroup>::construct[abi:nn180100]<llvm::orc::SymbolDependenceGroup,llvm::orc::SymbolDependenceGroup>(v5, (uint64_t)v14, a2);
    v15 = v14 + 48;
    std::vector<llvm::orc::SymbolDependenceGroup>::__swap_out_circular_buffer(a1, &v13);
    v7 = a1[1];
    std::__split_buffer<llvm::orc::SymbolDependenceGroup>::~__split_buffer(&v13);
  }
  else
  {
    std::allocator<llvm::orc::SymbolDependenceGroup>::construct[abi:nn180100]<llvm::orc::SymbolDependenceGroup,llvm::orc::SymbolDependenceGroup>((uint64_t)(a1 + 2), v6, a2);
    v7 = v6 + 48;
  }
  a1[1] = v7;
}

void std::allocator<llvm::orc::SymbolDependenceGroup>::construct[abi:nn180100]<llvm::orc::SymbolDependenceGroup,llvm::orc::SymbolDependenceGroup>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  int v6;

  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = *(_QWORD *)a3;
  *(_QWORD *)a3 = 0;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a3 + 8) = 0;
  v3 = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = *(_DWORD *)(a3 + 12);
  *(_DWORD *)(a3 + 12) = v3;
  v4 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a3 + 16);
  *(_DWORD *)(a3 + 16) = v4;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_DWORD *)(a2 + 40) = 0;
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 24) = 0;
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_DWORD *)(a3 + 32) = 0;
  v5 = *(_DWORD *)(a2 + 36);
  *(_DWORD *)(a2 + 36) = *(_DWORD *)(a3 + 36);
  *(_DWORD *)(a3 + 36) = v5;
  v6 = *(_DWORD *)(a2 + 40);
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(a3 + 40);
  *(_DWORD *)(a3 + 40) = v6;
}

void std::vector<llvm::orc::SymbolDependenceGroup>::__swap_out_circular_buffer(uint64_t *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v5 = *a1;
  v4 = a1[1];
  v6 = a2[1];
  if (v4 != *a1)
  {
    do
    {
      v6 -= 48;
      v4 -= 48;
      std::allocator<llvm::orc::SymbolDependenceGroup>::construct[abi:nn180100]<llvm::orc::SymbolDependenceGroup,llvm::orc::SymbolDependenceGroup>((uint64_t)(a1 + 2), v6, v4);
    }
    while (v4 != v5);
  }
  a2[1] = v6;
  v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::SymbolDependenceGroup>>(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(48 * a2);
}

void **std::__split_buffer<llvm::orc::SymbolDependenceGroup>::~__split_buffer(void **a1)
{
  std::__split_buffer<llvm::orc::SymbolDependenceGroup>::clear[abi:nn180100]((uint64_t)a1);
  if (*a1)
    operator delete(*a1);
  return a1;
}

uint64_t std::__split_buffer<llvm::orc::SymbolDependenceGroup>::clear[abi:nn180100](uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *(_QWORD *)(result + 8);
  v1 = *(_QWORD *)(result + 16);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(_QWORD *)(v3 + 32);
      *(_QWORD *)(v3 + 16) = v1 - 48;
      result = std::allocator<llvm::orc::SymbolDependenceGroup>::destroy[abi:nn180100](v4, v1 - 48);
      v1 = *(_QWORD *)(v3 + 16);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::copyFrom(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;

  v4 = *(unsigned int *)(a1 + 16);
  v5 = *(_QWORD **)a1;
  if ((_DWORD)v4)
  {
    v6 = &v5[v4];
    do
    {
      if ((unint64_t)(*v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v7 = (unint64_t *)(*v5 + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
      }
      ++v5;
    }
    while (v5 != v6);
    v5 = *(_QWORD **)a1;
  }
  result = MEMORY[0x24BD1B398](v5, 8);
  v10 = *(unsigned int *)(a2 + 16);
  *(_DWORD *)(a1 + 16) = v10;
  if ((_DWORD)v10)
  {
    *(_QWORD *)a1 = operator new(8 * v10, (std::align_val_t)8uLL);
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::copyFrom<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>>(a1, (_QWORD *)a2);
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::copyFrom<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>>(uint64_t result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t i;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  *(_QWORD *)(result + 8) = a2[1];
  v2 = *(unsigned int *)(result + 16);
  if ((_DWORD)v2)
  {
    for (i = 0; i < v2; ++i)
    {
      v4 = *(_QWORD *)(*a2 + 8 * i);
      *(_QWORD *)(*(_QWORD *)result + 8 * i) = v4;
      if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 + 1, v5));
        v2 = *(unsigned int *)(result + 16);
      }
    }
  }
  return result;
}

uint64_t std::deque<llvm::orc::LookupState>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 >> 9];
    v7 = (uint64_t *)((char *)*v6 + 8 * (v5 & 0x1FF));
    v8 = *(uint64_t *)((char *)v2 + (((*(_QWORD *)(a1 + 40) + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(_QWORD *)(a1 + 40) + v5) & 0x1FF);
    if (v7 != (uint64_t *)v8)
    {
      do
      {
        v9 = *v7;
        *v7 = 0;
        if (v9)
          (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
        if ((char *)++v7 - (_BYTE *)*v6 == 4096)
        {
          v10 = (uint64_t *)v6[1];
          ++v6;
          v7 = v10;
        }
      }
      while (v7 != (uint64_t *)v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v11 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v11 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v12 = v11 >> 3;
  if (v12 == 1)
  {
    v13 = 256;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    v13 = 512;
LABEL_16:
    *(_QWORD *)(a1 + 32) = v13;
  }
  if (v2 != v3)
  {
    do
    {
      v14 = *v2++;
      operator delete(v14);
    }
    while (v2 != v3);
    v16 = *(_QWORD *)(a1 + 8);
    v15 = *(_QWORD *)(a1 + 16);
    if (v15 != v16)
      *(_QWORD *)(a1 + 16) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::destroyAll(uint64_t result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(uint64_t **)result;
    v3 = *(_QWORD *)result + 24 * v1;
    do
    {
      v4 = *v2;
      if ((*v2 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        result = std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(v2 + 1));
        v4 = *v2;
      }
      if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
      }
      v2 += 3;
    }
    while (v2 != (uint64_t *)v3);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::destroyAll(uint64_t result)
{
  unsigned int v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  void **v7;

  v1 = *(_DWORD *)(result + 16);
  if (v1)
  {
    v2 = *(uint64_t **)result;
    v3 = *(_QWORD *)result + 72 * v1;
    do
    {
      v4 = *v2;
      if ((*v2 | 8) != 0xFFFFFFFFFFFFFFF8)
      {
        v7 = (void **)(v2 + 6);
        std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v7);
        MEMORY[0x24BD1B398](v2[3], 8);
        result = std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(v2 + 1));
        v4 = *v2;
      }
      if ((unint64_t)(v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v5 = (unint64_t *)(v4 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
      }
      v2 += 9;
    }
    while (v2 != (uint64_t *)v3);
  }
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::destroyAll(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  void **v3;
  void **v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (void **)(*(_QWORD *)a1 + 8);
    do
    {
      if (((unint64_t)*(v3 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v4 = v3;
        std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v4);
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

void std::__shared_ptr_emplace<llvm::orc::JITDylib::UnmaterializedInfo>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::JITDylib::UnmaterializedInfo>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14958;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__shared_ptr_emplace<llvm::orc::JITDylib::UnmaterializedInfo>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t *v14;

  v14 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v14);
  result = v14;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_15;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_15:
    llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::grow(a1, v7);
    v14 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v14);
    result = v14;
  }
  ++*(_DWORD *)(a1 + 8);
  v8 = *result;
  if (*result != -8)
    --*(_DWORD *)(a1 + 12);
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  v11 = *a2;
  *result = *a2;
  if ((unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  result[1] = 0;
  result[2] = 0;
  return result;
}

_QWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -8;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = v4 + 24 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          v22 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          v15 = v22;
          if ((unint64_t)(*v22 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v16 = (unint64_t *)(*v22 + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
          }
          *v15 = 0;
          *v15 = *(_QWORD *)v13;
          *(_QWORD *)v13 = 0;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 8) = 0;
          ++*(_DWORD *)(a1 + 8);
          std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](v13 + 8);
          v14 = *(_QWORD *)v13;
        }
        if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v18 = (unint64_t *)(v14 + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
        }
        v13 += 24;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = 24 * v20;
    do
    {
      *result = -8;
      result += 3;
      v21 -= 24;
    }
    while (v21);
  }
  return result;
}

void std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy(a1, *a2);
    std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy(a1, a2[1]);
    std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void std::__shared_ptr_emplace<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14990;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14990;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

void std::__shared_ptr_emplace<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>::__on_zero_shared(uint64_t a1)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll(a1 + 24);
  JUMPOUT(0x24BD1B398);
}

void std::vector<llvm::orc::SymbolStringPtr>::__vdeallocate(void **a1)
{
  char *v1;
  char *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;

  v1 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v1)
    {
      do
      {
        v6 = *((_QWORD *)v3 - 1);
        v3 -= 8;
        v5 = v6;
        if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v7 = (unint64_t *)(v5 + 8);
          do
            v8 = __ldaxr(v7);
          while (__stlxr(v8 - 1, v7));
        }
      }
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>,llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::grow(a1, v7);
    v8 = 0;
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

_QWORD *llvm::DenseMap<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>,llvm::DenseMapInfo<llvm::orc::ResourceTracker *,void>,llvm::detail::DenseMapPair<llvm::orc::ResourceTracker *,std::vector<llvm::orc::SymbolStringPtr>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = v4;
      do
      {
        v14 = *(void **)v13;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          v15 = v18;
          *v18 = *(void **)v13;
          v15[1] = 0;
          v15[2] = 0;
          v15[3] = 0;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          v15[3] = *(void **)(v13 + 24);
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 24) = 0;
          ++*(_DWORD *)(a1 + 8);
          v18 = (void **)(v13 + 8);
          std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v18);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 32 * v16;
    do
    {
      *result = -4096;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct(uint64_t *a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *v13;

  v13 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v13);
  v5 = v13;
  if ((v4 & 1) == 0)
  {
    v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>((uint64_t)a1, a2, v13);
    v5 = v6;
    if ((unint64_t)(*v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v7 = (unint64_t *)(*v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
    }
    v9 = *a2;
    *v6 = *a2;
    if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v10 = (unint64_t *)(v9 + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 + 1, v10));
    }
    *(_OWORD *)(v6 + 7) = 0u;
    *(_OWORD *)(v6 + 5) = 0u;
    *(_OWORD *)(v6 + 3) = 0u;
    *(_OWORD *)(v6 + 1) = 0u;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  void **v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 72 * v10;
      do
      {
        *result = -8;
        result += 9;
        v11 -= 72;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = v4 + 72 * v3;
      v13 = v4;
      do
      {
        v14 = *(char **)v13;
        if ((*(_QWORD *)v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          v24 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, (_QWORD *)v13, &v24);
          v15 = v24;
          if ((char *)*v24 - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL)
          {
            v16 = (unint64_t *)((char *)*v24 + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
          }
          *v15 = 0;
          *v15 = *(void **)v13;
          *(_QWORD *)v13 = 0;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 8) = 0;
          v15[3] = 0;
          v15[4] = 0;
          *((_DWORD *)v15 + 10) = 0;
          v15[3] = *(void **)(v13 + 24);
          *(_QWORD *)(v13 + 24) = 0;
          *((_DWORD *)v15 + 8) = *(_DWORD *)(v13 + 32);
          *(_DWORD *)(v13 + 32) = 0;
          v18 = *((_DWORD *)v15 + 9);
          *((_DWORD *)v15 + 9) = *(_DWORD *)(v13 + 36);
          *(_DWORD *)(v13 + 36) = v18;
          v19 = *((_DWORD *)v15 + 10);
          *((_DWORD *)v15 + 10) = *(_DWORD *)(v13 + 40);
          *(_DWORD *)(v13 + 40) = v19;
          v15[6] = 0;
          v15[7] = 0;
          v15[8] = 0;
          *((_OWORD *)v15 + 3) = *(_OWORD *)(v13 + 48);
          v15[8] = *(void **)(v13 + 64);
          *(_QWORD *)(v13 + 48) = 0;
          *(_QWORD *)(v13 + 56) = 0;
          *(_QWORD *)(v13 + 64) = 0;
          ++*(_DWORD *)(a1 + 8);
          v24 = (void **)(v13 + 48);
          std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100](&v24);
          MEMORY[0x24BD1B398](*(_QWORD *)(v13 + 24), 8);
          std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](v13 + 8);
          v14 = *(char **)v13;
        }
        if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v20 = (unint64_t *)(v14 + 8);
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
        }
        v13 += 72;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v22 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v22)
  {
    v23 = 72 * v22;
    do
    {
      *result = -8;
      result += 9;
      v23 -= 72;
    }
    while (v23);
  }
  return result;
}

void std::__shared_ptr_emplace<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete,std::allocator<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C149C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete,std::allocator<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C149C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

void std::__shared_ptr_emplace<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete,std::allocator<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::TriggerOnComplete>>::__on_zero_shared(uint64_t a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = (uint64_t *)(a1 + 96);
  v6 = *(_QWORD *)(a1 + 88);
  *(_QWORD *)(a1 + 88) = 0;
  v3 = *(_QWORD *)(a1 + 120);
  v4 = a1 + 96;
  if ((v3 & 2) == 0)
    v4 = *v2;
  (*(void (**)(uint64_t, uint64_t *))(v3 & 0xFFFFFFFFFFFFFFF8))(v4, &v6);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v2);
  v5 = *(_QWORD *)(a1 + 88);
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  std::mutex::~mutex((std::mutex *)(a1 + 24));
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::$_0>(std::mutex **a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  std::mutex *v5;
  uint64_t sig;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v2 = *(_BYTE *)(a2 + 24);
  v13 = v2 & 1;
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if ((v2 & 1) != 0)
  {
    v4 = 0;
  }
  else
  {
    v11[1] = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v12 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v4 = v3;
    v3 = 0;
  }
  v5 = *a1;
  v11[0] = v4;
  std::mutex::lock(v5);
  sig = v5[1].__m_.__sig;
  v5[1].__m_.__sig = 0;
  v9 = v3;
  v10 = sig;
  llvm::ErrorList::join(&v10, &v9, &v8);
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  v5[1].__m_.__sig = v8;
  std::mutex::unlock(v5);
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v11);
}

__n128 llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::MoveImpl<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::$_0>(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::DestroyImpl<llvm::orc::Platform::lookupInitSymbolsAsync(llvm::unique_function<void ()(llvm::Error)>,llvm::orc::ExecutionSession &,llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>> const&)::$_0>(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<void (*)(llvm::Error)>(void (**a1)(uint64_t *), uint64_t *a2)
{
  void (*v2)(uint64_t *);
  uint64_t result;
  uint64_t v4;

  v2 = *a1;
  v4 = *a2;
  *a2 = 0;
  v2(&v4);
  result = v4;
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void std::vector<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  uint64_t *v2;
  uint64_t *v4;
  void *v5;

  v1 = *a1;
  v2 = (uint64_t *)**a1;
  if (v2)
  {
    v4 = (uint64_t *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 2;
        std::allocator<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>>::destroy[abi:nn180100]((uint64_t)(v1 + 2), v4);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::destroyAll(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(unsigned int *)(result + 16);
  if ((_DWORD)v1)
  {
    v2 = 24 * v1;
    result = *(_QWORD *)result + 8;
    do
    {
      if (*(_QWORD *)(result - 8) <= 0xFFFFFFFFFFFFFFFDLL)
        result = std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](result);
      result += 24;
      v2 -= 24;
    }
    while (v2);
  }
  return result;
}

unsigned int *std::__reverse[abi:nn180100]<std::_ClassicAlgPolicy,std::__wrap_iter<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib> *>,std::__wrap_iter<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib> *>>(unsigned int *result, unsigned int *a2)
{
  unsigned int **v2;
  unsigned int **v3;

  v3 = (unsigned int **)result;
  if (result != a2)
  {
    v2 = (unsigned int **)(a2 - 2);
    if (a2 - 2 > result)
    {
      do
      {
        result = std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib> *> &,std::__wrap_iter<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib> *> &>(&v3, &v2);
        --v2;
        ++v3;
      }
      while (v3 < v2);
    }
  }
  return result;
}

unsigned int *std::_IterOps<std::_ClassicAlgPolicy>::iter_swap[abi:nn180100]<std::__wrap_iter<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib> *> &,std::__wrap_iter<llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib> *> &>(unsigned int ***a1, unsigned int ***a2)
{
  unsigned int **v2;
  unsigned int **v3;
  unsigned int *v4;
  unsigned int *v5;
  unsigned int *v6;
  unsigned int *result;

  v2 = *a1;
  v3 = *a2;
  v4 = **a1;
  *v2 = 0;
  v5 = *v3;
  *v3 = 0;
  v6 = *v2;
  *v2 = v5;
  if (v6)
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v6);
  result = *v3;
  *v3 = v4;
  if (result)
    return llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(result);
  return result;
}

uint64_t llvm::orc::InProgressLookupState::InProgressLookupState(uint64_t a1, int a2, uint64_t a3, uint64_t a4, char a5)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _DWORD *v17;
  _DWORD *i;
  uint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;

  *(_DWORD *)(a1 + 8) = a2;
  *(_QWORD *)a1 = off_251C14A00;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_OWORD *)(a1 + 40) = *(_OWORD *)a4;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  *(_OWORD *)(a1 + 88) = 0u;
  v6 = (_QWORD *)(a1 + 88);
  *(_BYTE *)(a1 + 64) = a5;
  *(_QWORD *)(a1 + 72) = 0;
  *(_BYTE *)(a1 + 80) = 1;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_DWORD *)(a1 + 136) = 0;
  v7 = *(_QWORD *)(a1 + 40);
  v8 = *(uint64_t **)(a1 + 48);
  v9 = (uint64_t)v8 - v7;
  if (v8 == (uint64_t *)v7)
  {
    v17 = std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,0>(*(uint64_t **)(a1 + 40), v8, 0);
    for (i = *(_DWORD **)(a1 + 96); i != v17; i -= 4)
    {
      v20 = *((_QWORD *)i - 2);
      v19 = v20;
      if ((unint64_t)(v20 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v21 = (unint64_t *)(v19 + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
      }
    }
    *(_QWORD *)(a1 + 96) = v17;
  }
  else
  {
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vdeallocate((void **)(a1 + 88));
    if (v9 < 0)
      abort();
    v10 = v9 >> 4;
    v11 = *(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 88);
    if (v11 >> 3 > (unint64_t)(v9 >> 4))
      v10 = v11 >> 3;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
      v12 = 0xFFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vallocate[abi:nn180100](v6, v12);
    v13 = *(_QWORD *)(a1 + 96);
    do
    {
      v14 = *(_QWORD *)v7;
      *(_QWORD *)v13 = *(_QWORD *)v7;
      if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v15 = (unint64_t *)(v14 + 8);
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 + 1, v15));
      }
      *(_DWORD *)(v13 + 8) = *(_DWORD *)(v7 + 8);
      v7 += 16;
      v13 += 16;
    }
    while ((uint64_t *)v7 != v8);
    *(_QWORD *)(a1 + 96) = v13;
  }
  return a1;
}

_DWORD *std::__unwrap_and_dispatch[abi:nn180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags> *,0>(uint64_t *a1, uint64_t *a2, _DWORD *a3)
{
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;

  while (a1 != a2)
  {
    if ((unint64_t)(*(_QWORD *)a3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v3 = (unint64_t *)(*(_QWORD *)a3 + 8);
      do
        v4 = __ldaxr(v3);
      while (__stlxr(v4 - 1, v3));
    }
    v5 = *a1;
    *(_QWORD *)a3 = *a1;
    if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v6 = (unint64_t *)(v5 + 8);
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 + 1, v6));
    }
    a3[2] = *((_DWORD *)a1 + 2);
    a1 += 2;
    a3 += 4;
  }
  return a3;
}

void llvm::orc::InProgressLookupState::~InProgressLookupState(llvm::orc::InProgressLookupState *this)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  void *v6;
  void **v7;

  *(_QWORD *)this = off_251C14A00;
  v2 = *((_QWORD *)this + 18);
  if (v2)
  {
    v3 = *((_QWORD *)this + 19);
    v4 = (void *)*((_QWORD *)this + 18);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
          std::__shared_weak_count::__release_weak(v5);
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = (void *)*((_QWORD *)this + 18);
    }
    *((_QWORD *)this + 19) = v2;
    operator delete(v4);
  }
  v7 = (void **)((char *)this + 112);
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v7);
  v7 = (void **)((char *)this + 88);
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v7);
  v7 = (void **)((char *)this + 40);
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v7);
  v6 = (void *)*((_QWORD *)this + 2);
  if (v6)
  {
    *((_QWORD *)this + 3) = v6;
    operator delete(v6);
  }
}

void std::__shared_ptr_emplace<llvm::orc::AsynchronousSymbolQuery>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14A30;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::AsynchronousSymbolQuery>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14A30;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__shared_ptr_emplace<llvm::orc::AsynchronousSymbolQuery>::__on_zero_shared(uint64_t a1)
{
  _QWORD *v2;

  v2 = (_QWORD *)(a1 + 24);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap(a1 + 80);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll(a1 + 56);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 56), 8);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v2);
}

_QWORD *std::allocator<llvm::orc::AsynchronousSymbolQuery>::construct[abi:nn180100]<llvm::orc::AsynchronousSymbolQuery,llvm::orc::SymbolLookupSet &,llvm::orc::SymbolState &,llvm::unique_function<void ()(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)>>(uint64_t a1, uint64_t a2, uint64_t **a3, char *a4, __int128 *a5)
{
  char v7;
  __int128 v9[2];
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  v7 = *a4;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v9, a5);
  llvm::orc::AsynchronousSymbolQuery::AsynchronousSymbolQuery(a2, a3, v7, v9);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v9);
}

void llvm::orc::InProgressFullLookupState::~InProgressFullLookupState(llvm::orc::InProgressFullLookupState *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251C14A68;
  v2 = (char *)this + 184;
  v3 = (char *)*((_QWORD *)this + 26);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)this + 168);
  llvm::orc::InProgressLookupState::~InProgressLookupState(this);
}

{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_251C14A68;
  v2 = (char *)this + 184;
  v3 = (char *)*((_QWORD *)this + 26);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)this + 168);
      llvm::orc::InProgressLookupState::~InProgressLookupState(this);
      JUMPOUT(0x24BD1B3A4);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void llvm::orc::InProgressFullLookupState::complete(uint64_t a1, _QWORD **a2)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  int v12;
  unsigned int v14;
  int v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  unsigned int v28;
  char v29;
  uint64_t *v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  __int128 v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  unint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  _OWORD *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  _QWORD *v78;
  char *v79;
  char *v80;
  uint64_t v81;
  _QWORD *v82;
  uint64_t *v83;
  _QWORD *v84;
  __int128 v85;
  _OWORD *v86;
  uint64_t v87;
  uint64_t v88;
  char *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t *v99;
  int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unint64_t *v107;
  unint64_t v108;
  uint64_t v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  _QWORD *v113;
  uint64_t *v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  std::__shared_weak_count *v120;
  unint64_t *v121;
  unint64_t v122;
  _QWORD *v123;
  uint64_t *v124;
  unint64_t *v125;
  unint64_t v126;
  _QWORD *v127;
  unint64_t *v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t **v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  _QWORD *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t *v151;
  unint64_t v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  llvm::orc::ExecutionSession *v156;
  uint64_t v157;
  std::recursive_mutex *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t **v161;
  uint64_t **v162;
  std::recursive_mutex *i;
  uint64_t v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unint64_t *v168;
  unint64_t v169;
  uint64_t v170;
  uint64_t v171;
  unint64_t v172;
  uint64_t *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t *v176;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t *v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t *v200;
  uint64_t *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t *v209;
  int v210;
  uint64_t v211;
  uint64_t *v212;
  std::recursive_mutex *v213;
  uint64_t v214;
  __int128 v215;
  _QWORD *v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t *v219;
  _QWORD *v220;
  int v221;
  _QWORD *v222;
  uint64_t *v223;
  std::__shared_weak_count *v224;
  uint64_t v225;
  uint64_t v226;
  llvm::orc::SymbolLookupSet *v227;
  uint64_t v228;
  uint64_t v229;
  _QWORD *v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  int v236;
  uint64_t v237;
  __int128 v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  __int128 v242;
  uint64_t v243;
  char *v244;
  _QWORD *v245;
  __int128 v246;
  uint64_t *v247;
  unint64_t v248;
  _QWORD *v249;
  _BYTE v250[24];
  _BYTE *v251;
  void **v252[3];

  v252[1] = *(void ***)MEMORY[0x24BDAC8D0];
  v213 = *(std::recursive_mutex **)(**(_QWORD **)(a1 + 16) + 32);
  v2 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 168);
  v3 = *(std::__shared_weak_count **)(a1 + 176);
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 176) = 0;
  v5 = *(_QWORD *)(a1 + 208);
  if (v5)
  {
    if (v5 == a1 + 184)
    {
      v251 = v250;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v5 + 24))(v5, v250);
    }
    else
    {
      v251 = *(_BYTE **)(a1 + 208);
      *(_QWORD *)(a1 + 208) = 0;
    }
  }
  else
  {
    v251 = 0;
  }
  v230 = 0;
  v231 = 0;
  v232 = 0;
  std::recursive_mutex::lock(v213);
  v224 = v3;
  v225 = v2[2];
  v218 = v2[3];
  v220 = v2;
  v228 = v4;
  if (v225 == v218)
    goto LABEL_173;
  v227 = (llvm::orc::SymbolLookupSet *)(v2 + 5);
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v219 = (uint64_t *)(v4 + 32);
  while (2)
  {
    v7 = v2[5];
    if (v2[6] == v7)
    {
LABEL_134:
      v229 = 0;
      goto LABEL_172;
    }
    v8 = 0;
    v9 = *(_QWORD *)v225;
    v10 = *(_DWORD *)(v225 + 8);
    v214 = *(_QWORD *)v225 + 136;
    v223 = (uint64_t *)(*(_QWORD *)v225 + 160);
    v221 = v10;
    while (1)
    {
      v11 = v7 + 16 * v8;
      v12 = *(_DWORD *)(v11 + 8);
      *(_QWORD *)&v246 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v9 + 112), *(_DWORD *)(v9 + 128), *(_QWORD *)v11, &v246)&& (_QWORD)v246 != *(_QWORD *)(v9 + 112) + 24 * *(unsigned int *)(v9 + 128))
      {
        v14 = *(unsigned __int16 *)(v246 + 16);
        if ((v14 >> 8) & 0x10 | v10)
          break;
      }
      ++v8;
LABEL_117:
      v7 = v2[5];
      if (v8 == (v2[6] - v7) >> 4)
        goto LABEL_134;
    }
    if (v12 != 1 && (v14 & 0x4000) != 0)
    {
      v104 = *(_QWORD *)v213[1].__m_.__opaque;
      v106 = *(_QWORD *)(v104 + 8);
      v105 = *(_QWORD *)(v104 + 16);
      *(_QWORD *)&v242 = v106;
      *((_QWORD *)&v242 + 1) = v105;
      if (v105)
      {
        v107 = (unint64_t *)(v105 + 8);
        do
          v108 = __ldxr(v107);
        while (__stxr(v108 + 1, v107));
      }
      v109 = *(_QWORD *)v11;
      v110 = *(_QWORD *)v11 - 1;
      if (v110 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v111 = (unint64_t *)(v109 + 8);
        do
          v112 = __ldaxr(v111);
        while (__stlxr(v112 + 1, v111));
      }
      v113 = operator new(8uLL);
      *(_QWORD *)&v246 = v113;
      *((_QWORD *)&v246 + 1) = v113;
      *v113 = v109;
      v114 = v113 + 1;
      v247 = v114;
      if (v110 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v115 = (unint64_t *)(v109 + 8);
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 + 1, v115));
      }
      *((_QWORD *)&v246 + 1) = v114;
      llvm::make_error<llvm::orc::SymbolsNotFound,std::shared_ptr<llvm::orc::SymbolStringPool>,std::vector<llvm::orc::SymbolStringPtr>>(&v241, &v242, &v246);
      v117 = v241;
      v241 = 0;
      v252[0] = (void **)&v246;
      std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](v252);
      if (v110 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v118 = (unint64_t *)(v109 + 8);
        do
          v119 = __ldaxr(v118);
        while (__stlxr(v119 - 1, v118));
      }
      v120 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
      if (*((_QWORD *)&v242 + 1))
      {
        v121 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
        do
          v122 = __ldaxr(v121);
        while (__stlxr(v122 - 1, v121));
        goto LABEL_169;
      }
      goto LABEL_171;
    }
    if ((v14 & 0x100) == 0)
    {
      if ((*(_BYTE *)(v246 + 18) & 0x7Fu) >= *(unsigned __int8 *)(v4 + 88))
      {
        llvm::orc::AsynchronousSymbolQuery::notifySymbolMetRequiredState(v4, (_QWORD *)v11, *(_QWORD *)(v246 + 8), v14);
LABEL_116:
        llvm::orc::SymbolLookupSet::remove(v227, v8);
        goto LABEL_117;
      }
      if ((*(_BYTE *)(v246 + 18) & 0x80) == 0)
      {
LABEL_59:
        v46 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct(v223, (uint64_t *)v11);
        v47 = v46;
        *(_QWORD *)&v238 = v4;
        *((_QWORD *)&v238 + 1) = v3;
        if (v3)
        {
          do
            v48 = __ldxr(p_shared_owners);
          while (__stxr(v48 + 1, p_shared_owners));
        }
        v50 = (char *)v46[6];
        v49 = (char *)v46[7];
        v51 = v49 - v50;
        if (v49 == v50)
        {
          v53 = (char *)v46[7];
        }
        else
        {
          v52 = v51 >> 4;
          v53 = (char *)v46[7];
          do
          {
            v54 = v52 >> 1;
            v55 = &v53[-16 * (v52 >> 1)];
            v57 = *((_QWORD *)v55 - 2);
            v56 = v55 - 16;
            v52 += ~(v52 >> 1);
            if (*(unsigned __int8 *)(v57 + 88) <= *(unsigned __int8 *)(v228 + 88))
              v53 = v56;
            else
              v52 = v54;
          }
          while (v52);
        }
        v58 = v53 - v50;
        v59 = (v53 - v50) >> 4;
        v60 = (uint64_t)&v50[(v53 - v50) & 0xFFFFFFFFFFFFFFF0];
        v62 = v46 + 8;
        v61 = v46[8];
        if ((unint64_t)v49 >= v61)
        {
          v68 = (v51 >> 4) + 1;
          if (v68 >> 60)
LABEL_299:
            abort();
          v69 = v61 - (_QWORD)v50;
          v70 = (uint64_t)(v61 - (_QWORD)v50) >> 3;
          if (v70 > v68)
            v68 = v70;
          if (v69 >= 0x7FFFFFFFFFFFFFF0)
            v71 = 0xFFFFFFFFFFFFFFFLL;
          else
            v71 = v68;
          v245 = v47 + 8;
          if (v71)
          {
            v216 = v47;
            v71 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v71);
            v59 = (v53 - v50) >> 4;
            v47 = v216;
          }
          else
          {
            v72 = 0;
          }
          v74 = (uint64_t *)(v71 + 16 * v59);
          v244 = (char *)(v71 + 16 * v72);
          if (v59 == v72)
          {
            if (v58 < 1)
            {
              v217 = v71 + 16 * v72;
              if (v53 == v50)
                v76 = 1;
              else
                v76 = v58 >> 3;
              v249 = v62;
              v77 = v71;
              v78 = v47;
              v79 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::weak_ptr<llvm::orc::DefinitionGenerator>>>(v76);
              v80 = &v79[16 * (v76 >> 2)];
              *(_QWORD *)&v242 = v79;
              *((_QWORD *)&v242 + 1) = v80;
              *(_QWORD *)&v246 = v77;
              *((_QWORD *)&v246 + 1) = v74;
              v243 = (uint64_t)v80;
              v244 = &v79[16 * v81];
              v247 = v74;
              v248 = v217;
              std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v246);
              v47 = v78;
              v74 = (uint64_t *)v80;
            }
            else
            {
              v75 = v59 + 2;
              if (v59 >= -1)
                v75 = v59 + 1;
              v74 -= 2 * (v75 >> 1);
            }
          }
          v4 = v228;
          v3 = v224;
          *v74 = v228;
          v74[1] = (uint64_t)v224;
          v238 = 0uLL;
          v82 = (_QWORD *)v47[6];
          v83 = v74;
          if (v82 != (_QWORD *)v60)
          {
            v84 = (_QWORD *)v60;
            v83 = v74;
            do
            {
              v85 = *((_OWORD *)v84 - 1);
              v84 -= 2;
              *((_OWORD *)v83 - 1) = v85;
              v83 -= 2;
              *v84 = 0;
              v84[1] = 0;
            }
            while (v84 != v82);
          }
          v86 = v74 + 2;
          *((_QWORD *)&v242 + 1) = v83;
          v87 = v47[7];
          if (v87 == v60)
          {
            v2 = v220;
          }
          else
          {
            v2 = v220;
            do
            {
              *v86++ = *(_OWORD *)v60;
              *(_QWORD *)v60 = 0;
              *(_QWORD *)(v60 + 8) = 0;
              v60 += 16;
            }
            while (v60 != v87);
            v83 = (uint64_t *)*((_QWORD *)&v242 + 1);
            v60 = v47[7];
          }
          v88 = v47[6];
          v47[6] = v83;
          v47[7] = v86;
          v89 = (char *)v47[8];
          v47[8] = v244;
          v243 = v60;
          v244 = v89;
          *(_QWORD *)&v242 = v88;
          *((_QWORD *)&v242 + 1) = v88;
          std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v242);
        }
        else if ((char *)v60 == v49)
        {
          *(_QWORD *)v49 = v228;
          v73 = &v50[16 * v59];
          v4 = v228;
          v3 = v224;
          *((_QWORD *)v73 + 1) = v224;
          v238 = 0uLL;
          v46[7] = v49 + 16;
        }
        else
        {
          v63 = (uint64_t)(v49 - 16);
          v64 = (_OWORD *)v47[7];
          v65 = v49 - 16;
          if ((unint64_t)v49 >= 0x10)
          {
            do
            {
              *v64++ = *(_OWORD *)v65;
              *(_QWORD *)v65 = 0;
              *((_QWORD *)v65 + 1) = 0;
              v65 += 16;
            }
            while (v65 < v49);
          }
          v47[7] = v64;
          if (v49 != (char *)(v60 + 16))
          {
            v66 = 16 * ((uint64_t)&v49[-v60 - 16] >> 4);
            v67 = (uint64_t)&v50[16 * v59 - 16];
            do
            {
              v63 = std::shared_ptr<llvm::sys::fs::detail::DirIterState>::operator=[abi:nn180100](v63, (__int128 *)(v67 + v66))- 16;
              v66 -= 16;
            }
            while (v66);
          }
          std::shared_ptr<llvm::sys::fs::detail::DirIterState>::operator=[abi:nn180100](v60, &v238);
          v3 = v224;
          v4 = v228;
        }
        v90 = (std::__shared_weak_count *)*((_QWORD *)&v238 + 1);
        v10 = v221;
        if (*((_QWORD *)&v238 + 1))
        {
          v91 = (unint64_t *)(*((_QWORD *)&v238 + 1) + 8);
          do
            v92 = __ldaxr(v91);
          while (__stlxr(v92 - 1, v91));
          if (!v92)
          {
            ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
            std::__shared_weak_count::__release_weak(v90);
          }
        }
        v93 = *(_QWORD *)v11;
        v237 = v93;
        if ((unint64_t)(v93 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v94 = (unint64_t *)(v93 + 8);
          do
            v95 = __ldaxr(v94);
          while (__stlxr(v95 + 1, v94));
        }
        *(_QWORD *)&v242 = v9;
        v96 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v219, (uint64_t *)&v242);
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v96 + 1), &v237, (uint64_t)&v246);
        if ((unint64_t)(v237 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v97 = (unint64_t *)(v237 + 8);
          do
            v98 = __ldaxr(v97);
          while (__stlxr(v98 - 1, v97));
        }
        goto LABEL_116;
      }
      *(_QWORD *)&v246 = 0;
      v16 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v9 + 136), *(_DWORD *)(v9 + 152), *(_QWORD *)v11, &v246);
      v17 = v246;
      if (!v16)
        v17 = *(_QWORD *)(v9 + 136) + 24 * *(unsigned int *)(v9 + 152);
      v18 = *(_OWORD *)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 16);
      if (v19)
      {
        v20 = (unint64_t *)(v19 + 8);
        do
          v21 = __ldxr(v20);
        while (__stxr(v21 + 1, v20));
      }
      v22 = v18;
      v23 = *(_QWORD *)v18;
      v215 = v18;
      if (*(_DWORD *)(*(_QWORD *)v18 + 16))
      {
        v24 = *(uint64_t **)(v23 + 8);
        v25 = *(unsigned int *)(v23 + 24);
        if ((_DWORD)v25)
        {
          v26 = 16 * v25;
          v27 = v24;
          while ((*v27 | 8) == 0xFFFFFFFFFFFFFFF8)
          {
            v27 += 2;
            v26 -= 16;
            if (!v26)
              goto LABEL_34;
          }
        }
        else
        {
          v27 = v24;
        }
        v99 = &v24[2 * v25];
LABEL_121:
        if (v27 != v99)
        {
          *(_QWORD *)&v246 = 0;
          v100 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v9 + 112), *(_DWORD *)(v9 + 128), *v27, &v246);
          v101 = v246;
          if (!v100)
            v101 = *(_QWORD *)(v9 + 112) + 24 * *(unsigned int *)(v9 + 128);
          *(_BYTE *)(v101 + 18) = 2;
          v102 = *v27;
          v27 += 2;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::erase(v214, v102);
          while (v27 != v99)
          {
            if ((*v27 | 8) != 0xFFFFFFFFFFFFFFF8)
              goto LABEL_121;
            v27 += 2;
          }
        }
      }
LABEL_34:
      *(_QWORD *)&v246 = 0;
      v28 = v232;
      v30 = (uint64_t *)v246;
      if ((v29 & 1) != 0)
      {
LABEL_40:
        v32 = (_QWORD *)v30[2];
        v31 = v30[3];
        if ((unint64_t)v32 < v31)
        {
          *v32 = v22;
          v32[1] = v19;
          v33 = v32 + 2;
LABEL_58:
          v30[2] = (uint64_t)v33;
          v3 = v224;
          v4 = v228;
          goto LABEL_59;
        }
        v34 = v30[1];
        v35 = ((uint64_t)v32 - v34) >> 4;
        v36 = v35 + 1;
        if ((unint64_t)(v35 + 1) >> 60)
          goto LABEL_299;
        v37 = v31 - v34;
        if (v37 >> 3 > v36)
          v36 = v37 >> 3;
        if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFFF0)
          v38 = 0xFFFFFFFFFFFFFFFLL;
        else
          v38 = v36;
        if (v38 >> 60)
LABEL_300:
          std::__throw_bad_array_new_length[abi:nn180100]();
        v39 = (char *)operator new(16 * v38);
        v40 = &v39[16 * v35];
        *(_OWORD *)v40 = v215;
        v41 = (_QWORD *)v30[1];
        v42 = (_QWORD *)v30[2];
        if (v42 == v41)
        {
          v33 = v40 + 16;
          v30[1] = (uint64_t)v40;
          v30[2] = (uint64_t)(v40 + 16);
          v30[3] = (uint64_t)&v39[16 * v38];
        }
        else
        {
          v43 = &v39[16 * v35];
          do
          {
            v44 = *((_OWORD *)v42 - 1);
            v42 -= 2;
            *((_OWORD *)v43 - 1) = v44;
            v43 -= 16;
            *v42 = 0;
            v42[1] = 0;
          }
          while (v42 != v41);
          v42 = (_QWORD *)v30[1];
          v45 = v30[2];
          v33 = v40 + 16;
          v30[1] = (uint64_t)v43;
          v30[2] = (uint64_t)(v40 + 16);
          v30[3] = (uint64_t)&v39[16 * v38];
          if ((_QWORD *)v45 != v42)
          {
            v2 = v220;
            do
            {
              v45 -= 16;
              std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](v45);
            }
            while ((_QWORD *)v45 != v42);
            if (!v42)
              goto LABEL_58;
LABEL_57:
            operator delete(v42);
            goto LABEL_58;
          }
        }
        v2 = v220;
        if (!v42)
          goto LABEL_58;
        goto LABEL_57;
      }
      if (4 * (int)v231 + 4 >= 3 * v28)
      {
        v103 = 2 * v28;
      }
      else
      {
        if (v28 + ~(_DWORD)v231 - HIDWORD(v231) > v28 >> 3)
        {
LABEL_37:
          LODWORD(v231) = v231 + 1;
          if (*v30 != -4096)
            --HIDWORD(v231);
          *v30 = v9;
          v30[1] = 0;
          v30[2] = 0;
          v30[3] = 0;
          goto LABEL_40;
        }
        v103 = v28;
      }
      llvm::DenseMap<llvm::orc::JITDylib *,std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>>::grow((uint64_t)&v230, v103);
      *(_QWORD *)&v246 = 0;
      v30 = (uint64_t *)v246;
      goto LABEL_37;
    }
    v123 = operator new(0x30uLL);
    v123[1] = 0;
    v123[2] = 0;
    *v123 = &off_251C14990;
    v123[4] = 0;
    *((_DWORD *)v123 + 10) = 0;
    v123[3] = 0;
    v124 = v123 + 3;
    *(_QWORD *)&v242 = v123 + 3;
    *((_QWORD *)&v242 + 1) = v123;
    v252[0] = *(void ***)v11;
    if ((unint64_t)v252[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v125 = (unint64_t *)(v252[0] + 1);
      do
        v126 = __ldaxr(v125);
      while (__stlxr(v126 + 1, v125));
      v124 = (uint64_t *)v242;
    }
    llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::DenseSetImpl((uint64_t)&v246, (uint64_t *)v252, 1);
    v240 = v9;
    v127 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v124, &v240);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::operator=((uint64_t)(v127 + 1), (uint64_t)&v246);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v246);
    if ((unint64_t)v252[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v128 = (unint64_t *)(v252[0] + 1);
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 - 1, v128));
    }
    v130 = *(_QWORD *)v213[1].__m_.__opaque;
    v132 = *(_QWORD *)(v130 + 8);
    v131 = *(_QWORD *)(v130 + 16);
    *(_QWORD *)&v246 = v132;
    *((_QWORD *)&v246 + 1) = v131;
    if (v131)
    {
      v133 = (unint64_t *)(v131 + 8);
      do
        v134 = __ldxr(v133);
      while (__stxr(v134 + 1, v133));
    }
    llvm::make_error<llvm::orc::FailedToMaterialize,std::shared_ptr<llvm::orc::SymbolStringPool>,std::shared_ptr<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>>>(&v239, &v246, &v242);
    v117 = v239;
    v239 = 0;
    v135 = (std::__shared_weak_count *)*((_QWORD *)&v246 + 1);
    if (*((_QWORD *)&v246 + 1))
    {
      v136 = (unint64_t *)(*((_QWORD *)&v246 + 1) + 8);
      do
        v137 = __ldaxr(v136);
      while (__stlxr(v137 - 1, v136));
      if (!v137)
      {
        ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
        std::__shared_weak_count::__release_weak(v135);
      }
    }
    v120 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
    if (*((_QWORD *)&v242 + 1))
    {
      v138 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
      do
        v122 = __ldaxr(v138);
      while (__stlxr(v122 - 1, v138));
LABEL_169:
      if (!v122)
      {
        ((void (*)(std::__shared_weak_count *))v120->__on_zero_shared)(v120);
        std::__shared_weak_count::__release_weak(v120);
      }
    }
LABEL_171:
    v229 = v117;
    if (!v117)
    {
LABEL_172:
      v225 += 16;
      if (v225 == v218)
      {
LABEL_173:
        v140 = v2[5];
        v139 = v2[6];
        v141 = (uint64_t **)(v2 + 5);
        if (v139 != v140)
        {
          v142 = 0;
          do
          {
            v143 = v140 + 16 * v142;
            if (*(_DWORD *)(v143 + 8) == 1)
            {
              *(_QWORD *)&v246 = 0;
              v144 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)(v4 + 56), (_QWORD *)v143, &v246);
              v145 = (_QWORD *)v246;
              if (!v144)
                v145 = (_QWORD *)(*(_QWORD *)(v4 + 56) + 24 * *(unsigned int *)(v4 + 72));
              if ((unint64_t)(*v145 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
              {
                v146 = (unint64_t *)(*v145 + 8);
                do
                  v147 = __ldaxr(v146);
                while (__stlxr(v147 - 1, v146));
              }
              *v145 = -16;
              *(int32x2_t *)(v4 + 64) = vadd_s32(*(int32x2_t *)(v4 + 64), (int32x2_t)0x1FFFFFFFFLL);
              --*(_QWORD *)(v4 + 80);
              llvm::orc::SymbolLookupSet::remove(v141, v142);
              v140 = v220[5];
              v139 = v220[6];
            }
            else
            {
              ++v142;
            }
          }
          while (v142 != (v139 - v140) >> 4);
          v2 = v220;
          if (v140 != v139)
          {
            v148 = *(_QWORD *)v213[1].__m_.__opaque;
            v150 = *(_QWORD *)(v148 + 8);
            v149 = *(_QWORD *)(v148 + 16);
            *(_QWORD *)&v242 = v150;
            *((_QWORD *)&v242 + 1) = v149;
            if (v149)
            {
              v151 = (unint64_t *)(v149 + 8);
              do
                v152 = __ldxr(v151);
              while (__stxr(v152 + 1, v151));
            }
            llvm::orc::SymbolLookupSet::getSymbolNames((llvm::orc::SymbolLookupSet *)&v246, v141);
            llvm::make_error<llvm::orc::SymbolsNotFound,std::shared_ptr<llvm::orc::SymbolStringPool>,std::vector<llvm::orc::SymbolStringPtr>>(&v229, &v242, &v246);
            *(_QWORD *)&v238 = &v246;
            std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&v238);
            v153 = (std::__shared_weak_count *)*((_QWORD *)&v242 + 1);
            if (*((_QWORD *)&v242 + 1))
            {
              v154 = (unint64_t *)(*((_QWORD *)&v242 + 1) + 8);
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
            v117 = v229;
            goto LABEL_194;
          }
        }
        v157 = *(_QWORD *)(v4 + 80);
        if ((_DWORD)v231)
        {
          v158 = (std::recursive_mutex *)((char *)v213 + 168);
          std::recursive_mutex::lock((std::recursive_mutex *)((char *)v213 + 168));
          if (v232)
          {
            v159 = 32 * v232;
            v160 = v230;
            while ((*v160 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v160 += 4;
              v159 -= 32;
              if (!v159)
                goto LABEL_240;
            }
          }
          else
          {
            v160 = v230;
          }
          if (v160 != &v230[4 * v232])
          {
            v226 = v157;
            v222 = &v230[4 * v232];
            do
            {
              v161 = (uint64_t **)v160[1];
              v162 = (uint64_t **)v160[2];
              for (i = v213; v161 != v162; v161 += 2)
              {
                v165 = **v161;
                v164 = (*v161)[1];
                v236 = 0;
                v235 = 0;
                v234 = *(_QWORD *)(v165 + 8);
                *(_QWORD *)(v165 + 8) = 0;
                v235 = *(_QWORD *)(v165 + 16);
                *(_QWORD *)(v165 + 16) = 0;
                v166 = v236;
                v236 = *(_DWORD *)(v165 + 24);
                *(_DWORD *)(v165 + 24) = v166;
                v167 = **v161;
                v233 = *(_QWORD *)(v167 + 32);
                *(_QWORD *)(v167 + 32) = 0;
                llvm::orc::ExecutionSession::createMaterializationResponsibility((uint64_t *)&v242, v164, &v234, &v233);
                if ((unint64_t)(v233 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
                {
                  v168 = (unint64_t *)(v233 + 8);
                  do
                    v169 = __ldaxr(v168);
                  while (__stlxr(v169 - 1, v168));
                }
                llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v234);
                v170 = **v161;
                **v161 = 0;
                v171 = v242;
                *(_QWORD *)&v242 = 0;
                *(_QWORD *)&v246 = v170;
                *((_QWORD *)&v246 + 1) = v171;
                v173 = *(uint64_t **)&i[3].__m_.__opaque[40];
                v172 = *(_QWORD *)&i[3].__m_.__opaque[48];
                if ((unint64_t)v173 >= v172)
                {
                  v176 = *(uint64_t **)&i[3].__m_.__opaque[32];
                  v177 = ((char *)v173 - (char *)v176) >> 4;
                  v178 = v177 + 1;
                  if ((unint64_t)(v177 + 1) >> 60)
                    goto LABEL_299;
                  v179 = v172 - (_QWORD)v176;
                  if (v179 >> 3 > v178)
                    v178 = v179 >> 3;
                  if ((unint64_t)v179 >= 0x7FFFFFFFFFFFFFF0)
                    v180 = 0xFFFFFFFFFFFFFFFLL;
                  else
                    v180 = v178;
                  if (v180 >> 60)
                    goto LABEL_300;
                  v181 = (char *)operator new(16 * v180);
                  v182 = &v181[16 * v177];
                  v246 = 0uLL;
                  v183 = &v181[16 * v180];
                  *(_QWORD *)v182 = v170;
                  *((_QWORD *)v182 + 1) = v171;
                  v175 = v182 + 16;
                  if (v173 == v176)
                  {
                    i = v213;
                    *(_QWORD *)&v213[3].__m_.__opaque[32] = v182;
                    *(_QWORD *)&v213[3].__m_.__opaque[40] = v175;
                    *(_QWORD *)&v213[3].__m_.__opaque[48] = v183;
                    v2 = v220;
                  }
                  else
                  {
                    v2 = v220;
                    i = v213;
                    do
                    {
                      v184 = *(v173 - 2);
                      v173 -= 2;
                      *v173 = 0;
                      *((_QWORD *)v182 - 2) = v184;
                      v182 -= 16;
                      v185 = v173[1];
                      v173[1] = 0;
                      *((_QWORD *)v182 + 1) = v185;
                    }
                    while (v173 != v176);
                    v173 = *(uint64_t **)&v213[3].__m_.__opaque[32];
                    v186 = *(uint64_t **)&v213[3].__m_.__opaque[40];
                    *(_QWORD *)&v213[3].__m_.__opaque[32] = v182;
                    *(_QWORD *)&v213[3].__m_.__opaque[40] = v175;
                    *(_QWORD *)&v213[3].__m_.__opaque[48] = v183;
                    while (v186 != v173)
                    {
                      v186 -= 2;
                      std::allocator<std::pair<std::unique_ptr<llvm::orc::MaterializationUnit>,std::unique_ptr<llvm::orc::MaterializationResponsibility>>>::destroy[abi:nn180100]((uint64_t)&v213[3].__m_.__opaque[48], v186);
                    }
                  }
                  if (v173)
                    operator delete(v173);
                }
                else
                {
                  *(_QWORD *)&v246 = 0;
                  *v173 = v170;
                  v174 = *((_QWORD *)&v246 + 1);
                  *((_QWORD *)&v246 + 1) = 0;
                  v173[1] = v174;
                  v175 = v173 + 2;
                }
                *(_QWORD *)&i[3].__m_.__opaque[40] = v175;
                v187 = (uint64_t *)*((_QWORD *)&v246 + 1);
                *((_QWORD *)&v246 + 1) = 0;
                if (v187)
                  std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v246 + 8, v187);
                v188 = v246;
                *(_QWORD *)&v246 = 0;
                if (v188)
                  (*(void (**)(uint64_t))(*(_QWORD *)v188 + 8))(v188);
                v189 = (uint64_t *)v242;
                *(_QWORD *)&v242 = 0;
                if (v189)
                  std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v242, v189);
              }
              v160 += 4;
              v158 = (std::recursive_mutex *)((char *)v213 + 168);
              v3 = v224;
              v157 = v226;
              v4 = v228;
              if (v160 == v222)
                break;
              while ((*v160 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v160 += 4;
                if (v160 == v222)
                  goto LABEL_240;
              }
            }
            while (v160 != v222);
          }
LABEL_240:
          std::recursive_mutex::unlock(v158);
        }
        if (v251 && *(_DWORD *)(v4 + 40))
          (*(void (**)(void))(*(_QWORD *)v251 + 48))();
        v156 = (llvm::orc::ExecutionSession *)v213;
        std::recursive_mutex::unlock(v213);
        if (!v157)
          llvm::orc::AsynchronousSymbolQuery::handleComplete(v4, (uint64_t)v213);
LABEL_246:
        llvm::orc::ExecutionSession::dispatchOutstandingMUs(v156);
        goto LABEL_247;
      }
      continue;
    }
    break;
  }
  llvm::orc::AsynchronousSymbolQuery::detach((_DWORD *)v4);
  if ((_DWORD)v231)
  {
    if (v232)
    {
      v197 = 32 * v232;
      v198 = v230;
      while ((*v198 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v198 += 4;
        v197 -= 32;
        if (!v197)
          goto LABEL_194;
      }
    }
    else
    {
      v198 = v230;
    }
    v199 = &v230[4 * v232];
    while (v198 != v199)
    {
      v200 = (uint64_t *)v198[1];
      v201 = (uint64_t *)v198[2];
      if (v200 != v201)
      {
        v202 = *v198;
        v203 = *v198 + 136;
        do
        {
          v204 = *(_QWORD *)*v200;
          if (*(_DWORD *)(v204 + 16))
          {
            v205 = *(uint64_t **)(v204 + 8);
            v206 = *(unsigned int *)(v204 + 24);
            if ((_DWORD)v206)
            {
              v207 = 16 * v206;
              v208 = v205;
              while ((*v208 | 8) == 0xFFFFFFFFFFFFFFF8)
              {
                v208 += 2;
                v207 -= 16;
                if (!v207)
                  goto LABEL_292;
              }
            }
            else
            {
              v208 = v205;
            }
            v209 = &v205[2 * v206];
            while (v208 != v209)
            {
              *(_QWORD *)&v246 = 0;
              v210 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v202 + 112), *(_DWORD *)(v202 + 128), *v208, &v246);
              v211 = v246;
              if (!v210)
                v211 = *(_QWORD *)(v202 + 112) + 24 * *(unsigned int *)(v202 + 128);
              *(_BYTE *)(v211 + 18) |= 0x80u;
              v212 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>,llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>>::FindAndConstruct(v203, v208);
              std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>::operator=[abi:nn180100](v212 + 1, *v200, v200[1]);
              if (v208 + 2 == v209)
                break;
              v208 += 2;
              while ((*v208 | 8) == 0xFFFFFFFFFFFFFFF8)
              {
                v208 += 2;
                if (v208 == v209)
                  goto LABEL_292;
              }
            }
          }
LABEL_292:
          v200 += 2;
        }
        while (v200 != v201);
      }
      v198 += 4;
      if (v198 == v199)
      {
        v2 = v220;
        v3 = v224;
        v4 = v228;
        break;
      }
      v2 = v220;
      v3 = v224;
      v4 = v228;
      while ((*v198 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v198 += 4;
        if (v198 == v199)
          goto LABEL_194;
      }
    }
LABEL_194:
    v156 = (llvm::orc::ExecutionSession *)v213;
    std::recursive_mutex::unlock(v213);
    if (!v117)
      goto LABEL_246;
  }
  else
  {
    std::recursive_mutex::unlock(v213);
  }
  llvm::orc::AsynchronousSymbolQuery::detach((_DWORD *)v4);
  *(_QWORD *)&v242 = v117;
  llvm::orc::AsynchronousSymbolQuery::handleFailed((__int128 *)v4, (uint64_t *)&v242);
  if ((_QWORD)v242)
    (*(void (**)(_QWORD))(*(_QWORD *)v242 + 8))(v242);
LABEL_247:
  v190 = (uint64_t)v230;
  if (v232)
  {
    v191 = v230 + 1;
    v192 = 32 * v232;
    do
    {
      if ((*(v191 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        *(_QWORD *)&v246 = v191;
        std::vector<std::shared_ptr<llvm::orc::JITDylib::UnmaterializedInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v246);
      }
      v191 += 4;
      v192 -= 32;
    }
    while (v192);
  }
  MEMORY[0x24BD1B398](v190, 8);
  v193 = v251;
  if (v251 == v250)
  {
    v194 = 4;
    v193 = v250;
LABEL_256:
    (*(void (**)(void))(*v193 + 8 * v194))();
  }
  else if (v251)
  {
    v194 = 5;
    goto LABEL_256;
  }
  if (v3)
  {
    v195 = (unint64_t *)&v3->__shared_owners_;
    do
      v196 = __ldaxr(v195);
    while (__stlxr(v196 - 1, v195));
    if (!v196)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  if (v2)
    (*(void (**)(_QWORD *))(*v2 + 8))(v2);
}

uint64_t llvm::orc::InProgressFullLookupState::fail(uint64_t a1, uint64_t *a2)
{
  __int128 *v4;
  uint64_t result;
  uint64_t v6;

  llvm::orc::AsynchronousSymbolQuery::detach(*(_DWORD **)(a1 + 168));
  v4 = *(__int128 **)(a1 + 168);
  v6 = *a2;
  *a2 = 0;
  llvm::orc::AsynchronousSymbolQuery::handleFailed(v4, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

void std::__assoc_state<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~__assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__assoc_state<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::__on_zero_shared(_BYTE *a1)
{
  if ((a1[136] & 1) != 0)
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)(a1 + 144));
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::ExecutionSession::lookup(std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>> const&,llvm::orc::SymbolLookupSet,llvm::orc::LookupKind,llvm::orc::SymbolState,std::function<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>)::$_0>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  _QWORD v6[2];
  int v7;
  _QWORD v8[2];
  int v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v10 = a2[3] & 1;
  v2 = *a2;
  if (v10)
  {
    *a2 = 0;
    v3 = *(_QWORD **)(a1 + 8);
    v8[0] = 0;
    *v3 = v2;
    v4 = *(uint64_t **)a1;
    v6[0] = 0;
    v6[1] = 0;
    v7 = 0;
    std::promise<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::set_value(*v4, (uint64_t)v6);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)v6);
    if (!*v3)
      *v3 = 0;
  }
  else
  {
    v8[0] = *a2;
    v8[1] = a2[1];
    *a2 = 0;
    a2[1] = 0;
    v9 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    std::promise<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::set_value(**(_QWORD **)a1, (uint64_t)v8);
  }
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v8);
}

void std::promise<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::set_value(uint64_t a1, uint64_t a2)
{
  std::mutex *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  _QWORD *v11;
  std::exception_ptr v12;

  if (a1)
  {
    v4 = (std::mutex *)(a1 + 24);
    std::mutex::lock((std::mutex *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    {
      v12.__ptr_ = 0;
      v5 = *(_QWORD *)(a1 + 16);
      std::exception_ptr::~exception_ptr(&v12);
      if (!v5)
      {
        *(_QWORD *)(a1 + 144) = 0;
        *(_QWORD *)(a1 + 152) = 0;
        *(_DWORD *)(a1 + 160) = 0;
        *(_QWORD *)(a1 + 144) = *(_QWORD *)a2;
        *(_QWORD *)a2 = 0;
        *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 8);
        *(_DWORD *)(a2 + 8) = 0;
        v6 = *(_DWORD *)(a1 + 156);
        *(_DWORD *)(a1 + 156) = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a2 + 12) = v6;
        v7 = *(_DWORD *)(a1 + 160);
        *(_DWORD *)(a1 + 160) = *(_DWORD *)(a2 + 16);
        *(_DWORD *)(a2 + 16) = v7;
        *(_DWORD *)(a1 + 136) |= 5u;
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
        std::mutex::unlock(v4);
        return;
      }
    }
    std::__throw_future_error[abi:nn180100]();
  }
  v8 = std::__throw_future_error[abi:nn180100]();
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(v8, v9, v10, v11);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -1;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4 + 8;
      do
      {
        v14 = *(_QWORD *)(v13 - 8);
        if (v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_QWORD *)(v13 - 8);
          *(_OWORD *)(v15 + 1) = *(_OWORD *)v13;
          *(_QWORD *)v13 = 0;
          *(_QWORD *)(v13 + 8) = 0;
          ++*(_DWORD *)(a1 + 8);
          std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](v13);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 24 * v16;
    do
    {
      *result = -1;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

void std::__shared_ptr_emplace<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14AC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14AC8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__shared_ptr_emplace<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>::__on_zero_shared(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 24));
}

_QWORD *llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 72 * v10;
      do
      {
        *result = -4096;
        result += 9;
        v11 -= 72;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 72 * v3;
      v13 = v4 + 32;
      do
      {
        v14 = *(_QWORD *)(v13 - 32);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v22 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          v15 = v22;
          *v22 = *(_QWORD *)(v13 - 32);
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 - 24);
          *(_QWORD *)(v13 - 16) = 0;
          *(_QWORD *)(v13 - 24) = 0;
          v15[3] = 0;
          v15[4] = 0;
          *((_DWORD *)v15 + 10) = 0;
          v15[3] = *(_QWORD *)(v13 - 8);
          *(_QWORD *)(v13 - 8) = 0;
          *((_DWORD *)v15 + 8) = *(_DWORD *)v13;
          *(_DWORD *)v13 = 0;
          v16 = *((_DWORD *)v15 + 9);
          *((_DWORD *)v15 + 9) = *(_DWORD *)(v13 + 4);
          *(_DWORD *)(v13 + 4) = v16;
          v17 = *((_DWORD *)v15 + 10);
          *((_DWORD *)v15 + 10) = *(_DWORD *)(v13 + 8);
          *(_DWORD *)(v13 + 8) = v17;
          v15[6] = 0;
          v15[7] = 0;
          *((_DWORD *)v15 + 16) = 0;
          v15[6] = *(_QWORD *)(v13 + 16);
          *(_QWORD *)(v13 + 16) = 0;
          *((_DWORD *)v15 + 14) = *(_DWORD *)(v13 + 24);
          *(_DWORD *)(v13 + 24) = 0;
          v18 = *((_DWORD *)v15 + 15);
          *((_DWORD *)v15 + 15) = *(_DWORD *)(v13 + 28);
          *(_DWORD *)(v13 + 28) = v18;
          v19 = *((_DWORD *)v15 + 16);
          *((_DWORD *)v15 + 16) = *(_DWORD *)(v13 + 32);
          *(_DWORD *)(v13 + 32) = v19;
          ++*(_DWORD *)(a1 + 8);
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::destroyAll(v13 + 16);
          MEMORY[0x24BD1B398](*(_QWORD *)(v13 + 16), 8);
          MEMORY[0x24BD1B398](*(_QWORD *)(v13 - 8), 8);
          std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](v13 - 24);
        }
        v13 += 72;
        v12 -= 72;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = 72 * v20;
    do
    {
      *result = -4096;
      result += 9;
      v21 -= 72;
    }
    while (v21);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 72 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 72 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void std::__shared_ptr_emplace<llvm::orc::JITDylib::EmissionDepUnit>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14B00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::orc::JITDylib::EmissionDepUnit>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14B00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

void std::__shared_ptr_emplace<llvm::orc::JITDylib::EmissionDepUnit>::__on_zero_shared(uint64_t a1)
{
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::destroyAll(a1 + 56);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 56), 8);
  JUMPOUT(0x24BD1B398);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::InsertIntoBucketImpl<llvm::orc::JITDylib::EmissionDepUnit *>(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::InsertIntoBucketImpl<llvm::orc::JITDylib::EmissionDepUnit *>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib::EmissionDepUnit *,llvm::orc::JITDylib::EmissionDepUnitInfo>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::JITSymbolFlags>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -8;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_QWORD *)v13;
          *((_WORD *)v15 + 4) = *(_WORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -8;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::grow(a1, v7);
    v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -8)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -8;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *v13;
          v15[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -8;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -16;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -8;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 8 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v17);
          *v17 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    do
    {
      *result++ = -8;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::InsertIntoBucketImpl<llvm::orc::NonOwningSymbolStringPtr>(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::try_emplace<llvm::detail::DenseSetEmpty&>(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::InsertIntoBucketImpl<llvm::orc::JITDylib::EmissionDepUnit *>(a2, a3, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a3;
    v8 = 1;
  }
  v9 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v9;
  *(_BYTE *)(a1 + 16) = v8;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 8 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 8 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::InsertIntoBucketImpl<llvm::orc::JITDylib::EmissionDepUnit *>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 8 * v10;
      do
      {
        *result++ = -4096;
        v11 -= 8;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 8 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::LookupBucketFor<llvm::orc::JITDylib::EmissionDepUnit *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v17);
          *v17 = *v13;
          ++*(_DWORD *)(a1 + 8);
        }
        ++v13;
        v12 -= 8;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 8 * v15;
    do
    {
      *result++ = -4096;
      v16 -= 8;
    }
    while (v16);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(a1, a2, v8);
    v6 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v6;
    v5[1] = 0;
  }
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::InsertIntoBucketImpl<llvm::orc::JITDylib *>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::grow(a1, v6);
  v8 = 0;
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -4096;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (_DWORD *)(v4 + 24);
      v13 = 32 * v3;
      do
      {
        v14 = *((_QWORD *)v12 - 3);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          v15 = v19;
          v16 = *((_QWORD *)v12 - 3);
          *(_DWORD *)(v19 + 24) = 0;
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)v15 = v16;
          *(_QWORD *)(v15 + 8) = *((_QWORD *)v12 - 2);
          *((_QWORD *)v12 - 2) = 0;
          *(_DWORD *)(v15 + 16) = *(v12 - 2);
          *(v12 - 2) = 0;
          LODWORD(v16) = *(_DWORD *)(v15 + 20);
          *(_DWORD *)(v15 + 20) = *(v12 - 1);
          *(v12 - 1) = v16;
          LODWORD(v16) = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v15 + 24) = *v12;
          *v12 = v16;
          ++*(_DWORD *)(a1 + 8);
          MEMORY[0x24BD1B398](0, 8);
        }
        v12 += 8;
        v13 -= 32;
      }
      while (v13);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 32 * v17;
    do
    {
      *result = -4096;
      result += 4;
      v18 -= 32;
    }
    while (v18);
  }
  return result;
}

uint64_t std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::~deque[abi:nn180100](uint64_t a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  *(_QWORD *)(a1 + 40) = 0;
  v4 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v4 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v5 = v4 >> 3;
  if (v5 == 1)
  {
    v6 = 256;
    goto LABEL_7;
  }
  if (v5 == 2)
  {
    v6 = 512;
LABEL_7:
    *(_QWORD *)(a1 + 32) = v6;
  }
  if (v2 != v3)
  {
    do
    {
      v7 = *v2++;
      operator delete(v7);
    }
    while (v2 != v3);
    v9 = *(_QWORD *)(a1 + 8);
    v8 = *(_QWORD *)(a1 + 16);
    if (v8 != v9)
      *(_QWORD *)(a1 + 16) = v8 + ((v9 - v8 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_back(_QWORD *a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  int64_t v14;
  char *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;

  v4 = (char *)a1[2];
  if (v4 == (char *)a1[3])
  {
    v5 = (char *)a1[1];
    v6 = (uint64_t)&v5[-*a1];
    if ((unint64_t)v5 <= *a1)
    {
      if (v4 == (char *)*a1)
        v16 = 1;
      else
        v16 = (uint64_t)&v4[-*a1] >> 2;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v16);
      v19 = &v17[8 * (v16 >> 2)];
      v20 = (uint64_t *)a1[1];
      v4 = v19;
      v21 = a1[2] - (_QWORD)v20;
      if (v21)
      {
        v4 = &v19[v21 & 0xFFFFFFFFFFFFFFF8];
        v22 = 8 * (v21 >> 3);
        v23 = &v17[8 * (v16 >> 2)];
        do
        {
          v24 = *v20++;
          *(_QWORD *)v23 = v24;
          v23 += 8;
          v22 -= 8;
        }
        while (v22);
      }
      v25 = (char *)*a1;
      *a1 = v17;
      a1[1] = v19;
      a1[2] = v4;
      a1[3] = &v17[8 * v18];
      if (v25)
      {
        operator delete(v25);
        v4 = (char *)a1[2];
      }
    }
    else
    {
      v7 = v6 >> 3;
      v8 = v6 >> 3 < -1;
      v9 = (v6 >> 3) + 2;
      if (v8)
        v10 = v9;
      else
        v10 = v7 + 1;
      v11 = -(v10 >> 1);
      v12 = v10 >> 1;
      v13 = &v5[-8 * v12];
      v14 = v4 - v5;
      if (v4 != v5)
      {
        memmove(&v5[-8 * v12], v5, v4 - v5);
        v4 = (char *)a1[1];
      }
      v15 = &v4[8 * v11];
      v4 = &v13[v14];
      a1[1] = v15;
      a1[2] = &v13[v14];
    }
  }
  *(_QWORD *)v4 = *a2;
  a1[2] += 8;
}

void std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_front(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  _BYTE *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  char *v21;

  v4 = *(char **)(a1 + 8);
  if (v4 == *(char **)a1)
  {
    v6 = *(_BYTE **)(a1 + 16);
    v7 = *(_BYTE **)(a1 + 24);
    if (v6 >= v7)
    {
      if (v7 == v4)
        v11 = 1;
      else
        v11 = (v7 - v4) >> 2;
      v12 = 2 * v11;
      v13 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v11);
      v5 = &v13[(v12 + 6) & 0xFFFFFFFFFFFFFFF8];
      v15 = *(uint64_t **)(a1 + 8);
      v16 = v5;
      v17 = *(_QWORD *)(a1 + 16) - (_QWORD)v15;
      if (v17)
      {
        v16 = &v5[v17 & 0xFFFFFFFFFFFFFFF8];
        v18 = 8 * (v17 >> 3);
        v19 = v5;
        do
        {
          v20 = *v15++;
          *(_QWORD *)v19 = v20;
          v19 += 8;
          v18 -= 8;
        }
        while (v18);
      }
      v21 = *(char **)a1;
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = v16;
      *(_QWORD *)(a1 + 24) = &v13[8 * v14];
      if (v21)
      {
        operator delete(v21);
        v5 = *(char **)(a1 + 8);
      }
    }
    else
    {
      v8 = (v7 - v6) >> 3;
      if (v8 >= -1)
        v9 = v8 + 1;
      else
        v9 = v8 + 2;
      v10 = v9 >> 1;
      v5 = &v4[8 * (v9 >> 1)];
      if (v6 != v4)
      {
        memmove(&v4[8 * (v9 >> 1)], v4, v6 - v4);
        v4 = *(char **)(a1 + 16);
      }
      *(_QWORD *)(a1 + 8) = v5;
      *(_QWORD *)(a1 + 16) = &v4[8 * v10];
    }
  }
  else
  {
    v5 = *(char **)(a1 + 8);
  }
  *((_QWORD *)v5 - 1) = *a2;
  *(_QWORD *)(a1 + 8) -= 8;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::clear(uint64_t result)
{
  uint64_t v1;
  int v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = *(_DWORD *)(result + 8);
  if (!v2 && !*(_DWORD *)(result + 12))
    return result;
  v3 = *(unsigned int *)(result + 16);
  if (v3 <= 4 * v2 || v3 < 0x41)
  {
    if (!(_DWORD)v3)
    {
LABEL_20:
      *(_QWORD *)(v1 + 8) = 0;
      return result;
    }
    v8 = *(_QWORD **)result;
    v9 = 32 * v3;
    while (1)
    {
      if (*v8 == -8192)
        goto LABEL_18;
      if (*v8 != -4096)
        break;
LABEL_19:
      v8 += 4;
      v9 -= 32;
      if (!v9)
        goto LABEL_20;
    }
    result = MEMORY[0x24BD1B398](v8[1], 8);
LABEL_18:
    *v8 = -4096;
    goto LABEL_19;
  }
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::destroyAll(result);
  if (!v2)
  {
    if (*(_DWORD *)(v1 + 16))
    {
      result = MEMORY[0x24BD1B398](*(_QWORD *)v1, 8);
      *(_QWORD *)v1 = 0;
      *(_QWORD *)(v1 + 8) = 0;
      *(_DWORD *)(v1 + 16) = 0;
      return result;
    }
    goto LABEL_20;
  }
  v4 = 1 << (33 - __clz(v2 - 1));
  if (v4 <= 64)
    v5 = 64;
  else
    v5 = v4;
  if (v5 == *(_DWORD *)(v1 + 16))
  {
    *(_QWORD *)(v1 + 8) = 0;
    v6 = 32 * v5;
    v7 = *(_QWORD **)v1;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v6 -= 32;
    }
    while (v6);
  }
  else
  {
    MEMORY[0x24BD1B398](*(_QWORD *)v1, 8);
    v10 = (4 * v5 / 3 + 1) | ((unint64_t)(4 * v5 / 3 + 1) >> 1);
    v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
    LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
    *(_DWORD *)(v1 + 16) = v11;
    result = (uint64_t)operator new(32 * v11, (std::align_val_t)8uLL);
    *(_QWORD *)v1 = result;
    *(_QWORD *)(v1 + 8) = 0;
    v12 = *(unsigned int *)(v1 + 16);
    if ((_DWORD)v12)
    {
      v13 = 32 * v12;
      do
      {
        *(_QWORD *)result = -4096;
        result += 32;
        v13 -= 32;
      }
      while (v13);
    }
  }
  return result;
}

uint64_t std::deque<llvm::orc::JITDylib::EmissionDepUnit *>::deque(uint64_t a1, _QWORD *a2)
{
  unint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  char *v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  void *v37;
  char *v38;
  char *v39;
  __int128 v40;
  uint64_t v41;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  v3 = a2[4];
  v4 = a2[1];
  v5 = (char *)(v4 + 8 * (v3 >> 9));
  if (a2[2] == v4)
  {
    v6 = 0;
    v9 = 0;
    v8 = (char *)(v4 + 8 * ((a2[5] + v3) >> 9));
  }
  else
  {
    v6 = (uint64_t *)(*(_QWORD *)v5 + 8 * (a2[4] & 0x1FFLL));
    v7 = a2[5] + v3;
    v8 = (char *)(v4 + 8 * (v7 >> 9));
    v9 = *(_QWORD *)v8 + 8 * (v7 & 0x1FF);
  }
  if ((uint64_t *)v9 != v6)
  {
    v10 = ((v9 - *(_QWORD *)v8) >> 3) + ((v8 - v5) << 6);
    v11 = (uint64_t)v6 - *(_QWORD *)v5;
    v12 = v10 - (v11 >> 3);
    if (v10 != v11 >> 3)
    {
      v13 = ((v12 + 1) & 0x1FF) != 0 ? ((unint64_t)(v12 + 1) >> 9) + 1 : (unint64_t)(v12 + 1) >> 9;
      if (v13)
      {
        v41 = a1 + 24;
        v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v13);
        v39 = v38;
        *(_QWORD *)&v40 = v38;
        *((_QWORD *)&v40 + 1) = &v38[8 * v14];
        v15 = -(uint64_t)v13;
        do
        {
          v37 = operator new(0x1000uLL);
          std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_back(&v38, &v37);
        }
        while (!__CFADD__(v15++, 1));
        v17 = *(_QWORD **)(a1 + 8);
        v18 = *(_QWORD **)(a1 + 16);
        while (v18 != v17)
        {
          std::__split_buffer<llvm::orc::JITDylib::EmissionDepUnit **>::push_front((uint64_t)&v38, --v18);
          v17 = *(_QWORD **)(a1 + 8);
        }
        v19 = *(void **)a1;
        v20 = v39;
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v20;
        v21 = (char *)v40;
        *(_OWORD *)(a1 + 16) = v40;
        if (v19)
        {
          operator delete(v19);
          v20 = *(char **)(a1 + 8);
          v22 = *(char **)(a1 + 16);
        }
        else
        {
          v22 = v21;
        }
        v24 = *(_QWORD *)(a1 + 40);
        v26 = *(_QWORD *)(a1 + 32) + v24;
        v25 = &v20[8 * (v26 >> 9)];
        v23 = v22 == v20 ? 0 : *(_QWORD *)v25 + 8 * (v26 & 0x1FF);
      }
      else
      {
        v23 = 0;
        v24 = 0;
        v25 = 0;
      }
      v27 = v12 + ((v23 - *(_QWORD *)v25) >> 3);
      if (v27 < 1)
      {
        v29 = 511 - v27;
        LOWORD(v27) = ~(511 - v27);
        v28 = &v25[-8 * (v29 >> 9)];
      }
      else
      {
        v28 = &v25[8 * ((unint64_t)v27 >> 9)];
      }
      v30 = *(_QWORD *)v28 + 8 * (v27 & 0x1FF);
      if (v23 != v30)
      {
        do
        {
          v31 = v30;
          if (v25 != v28)
            v31 = *(_QWORD *)v25 + 4096;
          if (v23 == v31)
          {
            v31 = v23;
          }
          else
          {
            v32 = (_QWORD *)v23;
            do
            {
              v33 = *v6++;
              *v32++ = v33;
              if ((uint64_t *)((char *)v6 - *(_QWORD *)v5) == (uint64_t *)4096)
              {
                v34 = (uint64_t *)*((_QWORD *)v5 + 1);
                v5 += 8;
                v6 = v34;
              }
            }
            while (v32 != (_QWORD *)v31);
          }
          v24 += (v31 - v23) >> 3;
          if (v25 == v28)
            break;
          v35 = *((_QWORD *)v25 + 1);
          v25 += 8;
          v23 = v35;
        }
        while (v35 != v30);
        *(_QWORD *)(a1 + 40) = v24;
      }
    }
  }
  return a1;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v10;

  v10 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
  v5 = v10;
  if ((v4 & 1) == 0)
  {
    v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::SymbolTableEntry>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, a2, v10);
    v5 = v6;
    if ((unint64_t)(*v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v7 = (unint64_t *)(*v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
    }
    *v6 = 0;
    *v6 = *a2;
    *a2 = 0;
    v6[1] = 0;
    v6[2] = 0;
  }
  return v5;
}

void std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::__emplace_unique_key_args<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,std::shared_ptr<llvm::orc::AsynchronousSymbolQuery> const&>(uint64_t **a1, unint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t *v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t **v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v15[2];
  char v16;

  v8 = a1 + 1;
  v7 = a1[1];
  v9 = a1 + 1;
  v10 = a1 + 1;
  if (v7)
  {
    while (1)
    {
      while (1)
      {
        v10 = (uint64_t **)v7;
        v11 = v7[4];
        if (v11 <= a2)
          break;
        v7 = *v10;
        v9 = v10;
        if (!*v10)
          goto LABEL_8;
      }
      if (v11 >= a2)
        break;
      v7 = v10[1];
      if (!v7)
      {
        v9 = v10 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v12 = (uint64_t *)operator new(0x30uLL);
    v15[1] = v8;
    v12[4] = a3;
    v12[5] = a4;
    if (a4)
    {
      v13 = (unint64_t *)(a4 + 8);
      do
        v14 = __ldxr(v13);
      while (__stxr(v14 + 1, v13));
    }
    v16 = 1;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, (uint64_t)v10, v9, v12);
    v15[0] = 0;
    std::unique_ptr<std::__tree_node<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>,void *>>>>::reset[abi:nn180100]((uint64_t)v15);
  }
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v6;
  unint64_t *v7;
  unint64_t v8;
  _QWORD *v10;

  v10 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v10);
  v5 = v10;
  if ((v4 & 1) == 0)
  {
    v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>,llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::JITDylib::MaterializingInfo>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>((uint64_t)a1, a2, v10);
    v5 = v6;
    if ((unint64_t)(*v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v7 = (unint64_t *)(*v6 + 8);
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
    }
    *v6 = 0;
    *v6 = *a2;
    *a2 = 0;
    *(_OWORD *)(v6 + 7) = 0u;
    *(_OWORD *)(v6 + 5) = 0u;
    *(_OWORD *)(v6 + 3) = 0u;
    *(_OWORD *)(v6 + 1) = 0u;
  }
  return v5;
}

int32x2_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::erase(uint64_t a1, uint64_t a2)
{
  int32x2_t result;
  _QWORD *v4;

  v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>,llvm::orc::NonOwningSymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::NonOwningSymbolStringPtr>>::LookupBucketFor<llvm::orc::NonOwningSymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
  {
    *v4 = -16;
    result = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 8) = result;
  }
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::JITDylib::EmissionDepUnit *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::JITDylib::EmissionDepUnit *,void>,llvm::detail::DenseSetPair<llvm::orc::JITDylib::EmissionDepUnit *>>::clear(_DWORD *result)
{
  _DWORD *v1;
  int v2;
  unsigned int v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v1 = result;
  v2 = result[2];
  if (v2)
  {
    v3 = result[4];
    if (v3 > 4 * v2 && v3 >= 0x41)
    {
      v4 = 1 << (33 - __clz(v2 - 1));
      if (v4 <= 64)
        v5 = 64;
      else
        v5 = v4;
LABEL_10:
      if (v5 == v3)
      {
        *((_QWORD *)result + 1) = 0;
        v6 = 8 * v3;
        v7 = *(_QWORD **)result;
        do
        {
          *v7++ = -4096;
          v6 -= 8;
        }
        while (v6);
      }
      else
      {
        result = (_DWORD *)MEMORY[0x24BD1B398](*(_QWORD *)result, 8);
        if (v5)
        {
          v10 = (4 * v5 / 3u + 1) | ((unint64_t)(4 * v5 / 3u + 1) >> 1);
          v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
          LODWORD(v11) = (((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8)) + 1;
          v1[4] = v11;
          result = operator new(8 * v11, (std::align_val_t)8uLL);
          *(_QWORD *)v1 = result;
          *((_QWORD *)v1 + 1) = 0;
          v12 = v1[4];
          if ((_DWORD)v12)
          {
            v13 = 8 * v12;
            do
            {
              *(_QWORD *)result = -4096;
              result += 2;
              v13 -= 8;
            }
            while (v13);
          }
        }
        else
        {
          *(_QWORD *)v1 = 0;
          *((_QWORD *)v1 + 1) = 0;
          v1[4] = 0;
        }
      }
      return result;
    }
  }
  else
  {
    if (!result[3])
      return result;
    v3 = result[4];
    if (v3 > 0x40)
    {
      v5 = 0;
      goto LABEL_10;
    }
  }
  if (v3)
  {
    v8 = *(_QWORD **)result;
    v9 = 8 * v3;
    do
    {
      *v8++ = -4096;
      v9 -= 8;
    }
    while (v9);
  }
  *((_QWORD *)result + 1) = 0;
  return result;
}

uint64_t llvm::Expected<std::set<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>>::~Expected(uint64_t a1)
{
  uint64_t v2;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = *(_QWORD *)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    std::__tree<std::shared_ptr<llvm::orc::AsynchronousSymbolQuery>>::destroy(a1, *(_QWORD **)(a1 + 8));
  }
  return a1;
}

_DWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::shrink_and_clear(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  uint64_t v11;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD **)result;
    v5 = *(_QWORD *)result + 16 * v2;
    do
    {
      if ((unint64_t)(*v4 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v6 = (unint64_t *)(*v4 + 8);
        do
          v7 = __ldaxr(v6);
        while (__stlxr(v7 - 1, v6));
      }
      v4 += 2;
    }
    while (v4 != (_QWORD *)v5);
  }
  if (!v3)
  {
    if (!result[4])
    {
      *((_QWORD *)result + 1) = 0;
      return result;
    }
    v9 = 0;
    result = *(_DWORD **)result;
LABEL_17:
    MEMORY[0x24BD1B398](result, 8);
    return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::init(v1, v9);
  }
  v8 = 1 << (33 - __clz(v3 - 1));
  if (v8 <= 64)
    v9 = 64;
  else
    v9 = v8;
  v10 = result[4];
  result = *(_DWORD **)result;
  if (v9 != v10)
    goto LABEL_17;
  *((_QWORD *)v1 + 1) = 0;
  v11 = 16 * v9;
  do
  {
    *(_QWORD *)result = -8;
    result += 4;
    v11 -= 16;
  }
  while (v11);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::try_emplace<llvm::JITSymbolFlags const&>@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, _WORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::JITSymbolFlags const&>(a1, v12, a2, a3);
    v9 = (_QWORD *)result;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr const&,llvm::JITSymbolFlags const&>(uint64_t a1, _QWORD *a2, uint64_t *a3, _WORD *a4)
{
  _QWORD *result;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;

  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v7 = (unint64_t *)(*result + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
  }
  v9 = *a3;
  *result = *a3;
  if ((unint64_t)(v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v10 = (unint64_t *)(v9 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 + 1, v10));
  }
  *((_WORD *)result + 4) = *a4;
  return result;
}

uint64_t _GLOBAL__sub_I_Core_cpp()
{
  qword_257965800 = 0;
  return __cxa_atexit((void (*)(void *))std::function<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~function, &llvm::orc::NoDependenciesToRegister, &dword_24A800000);
}

void llvm::orc::GDBJITDebugInfoRegistrationPlugin::Create(llvm::orc::GDBJITDebugInfoRegistrationPlugin *this@<X0>, llvm::orc::ExecutionSession *a2@<X1>, llvm::orc::JITDylib *a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  char *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  llvm::orc::ExecutionSession *v24;
  uint64_t v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v8 = *((_DWORD *)a3 + 11);
  v9 = *((_QWORD *)this + 9);
  if (v8 == 5)
    v10 = "_llvm_orc_registerJITLoaderGDBAllocAction";
  else
    v10 = "llvm_orc_registerJITLoaderGDBAllocAction";
  if (v8 == 5)
    v11 = 41;
  else
    v11 = 40;
  llvm::orc::ExecutorProcessControl::intern(v9, (uint64_t *)v10, v11, &v23);
  v24 = a2;
  v22 = v23;
  if ((unint64_t)v23 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v12 = v23 + 1;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 + 1, v12));
  }
  llvm::orc::ExecutionSession::lookup(this, (uint64_t *)&v24, 1uLL, (uint64_t *)&v22, 63, (uint64_t)&v25);
  if ((unint64_t)v22 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v14 = v22 + 1;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
  }
  if ((v26 & 1) != 0)
  {
    v19 = v25;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v19;
  }
  else
  {
    v16 = (_QWORD *)operator new();
    v17 = v25;
    *v16 = &off_251C14B38;
    v16[1] = v17;
    *(_BYTE *)(a4 + 8) &= ~1u;
    v18 = v26;
    *(_QWORD *)a4 = v16;
    if ((v18 & 1) != 0)
    {
      v25 = 0;
      if (v17)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    }
  }
  if ((unint64_t)v23 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v20 = v23 + 1;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
  }
}

void llvm::orc::GDBJITDebugInfoRegistrationPlugin::notifyFailed(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void llvm::orc::GDBJITDebugInfoRegistrationPlugin::notifyRemovingResources(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfig(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  int v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  _QWORD *i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  char *v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  _QWORD *v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  unint64_t v51;
  char *v52;
  char *v53;
  uint64_t v54;
  char *v55;
  uint64_t *v56;
  __int128 v57;
  char *v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a3 + 164) == 5)
  {
    v5 = *(_DWORD *)(a3 + 144);
    v6 = v5 == 38 || v5 == 3;
    if (v6 && *(_DWORD *)(a3 + 192))
    {
      v9 = *(unsigned int *)(a3 + 200);
      if ((_DWORD)v9)
      {
        v10 = 24 * v9;
        for (i = *(_QWORD **)(a3 + 184); *i >= 0xFFFFFFFFFFFFFFFELL; i += 3)
        {
          v10 -= 24;
          if (!v10)
            return;
        }
      }
      else
      {
        i = *(_QWORD **)(a3 + 184);
      }
      v12 = *(_QWORD *)(a3 + 184) + 24 * v9;
      if (i != (_QWORD *)v12)
      {
        while (1)
        {
          v13 = i[2];
          if (*(_QWORD *)(v13 + 8) >= 8uLL && **(_QWORD **)v13 == 0x2C46524157445F5FLL)
            break;
          do
          {
            i += 3;
            if (i == (_QWORD *)v12)
              return;
          }
          while (*i >= 0xFFFFFFFFFFFFFFFELL);
          if (i == (_QWORD *)v12)
            return;
        }
        v14 = *(_QWORD *)(*(_QWORD *)a2 + 32);
        v15 = (char *)operator new(0x320uLL);
        v16 = (std::__shared_weak_count *)v15;
        *((_QWORD *)v15 + 1) = 0;
        v17 = (unint64_t *)(v15 + 8);
        *((_QWORD *)v15 + 2) = 0;
        *(_QWORD *)v15 = &off_251C14B98;
        *((_QWORD *)v15 + 3) = &off_251C14BD0;
        v18 = v15 + 24;
        v19 = *(_QWORD *)(a1 + 8);
        *((_QWORD *)v15 + 4) = a3;
        *((_QWORD *)v15 + 5) = v19;
        *((_QWORD *)v15 + 6) = 0;
        *((_QWORD *)v15 + 11) = *(unsigned int *)(*(_QWORD *)(v14 + 72) + 88);
        *((_QWORD *)v15 + 12) = v15 + 96;
        *((_QWORD *)v15 + 13) = v15 + 96;
        *((_QWORD *)v15 + 24) = 0;
        *((_QWORD *)v15 + 25) = 0;
        *((_QWORD *)v15 + 23) = 0;
        *((_OWORD *)v15 + 7) = 0u;
        *((_OWORD *)v15 + 8) = 0u;
        *((_OWORD *)v15 + 9) = 0u;
        *((_OWORD *)v15 + 10) = 0u;
        *((_QWORD *)v15 + 22) = v15 + 184;
        *((_QWORD *)v15 + 26) = 0;
        *((_QWORD *)v15 + 27) = 0;
        *(_OWORD *)(v15 + 56) = 0u;
        *(_OWORD *)(v15 + 72) = 0u;
        *((_DWORD *)v15 + 14) = -17958193;
        *((_OWORD *)v15 + 14) = 0u;
        *((_OWORD *)v15 + 15) = 0u;
        *((_QWORD *)v15 + 32) = v15 + 272;
        *((_QWORD *)v15 + 33) = 0x1000000000;
        *((_QWORD *)v15 + 66) = v15 + 544;
        *((_QWORD *)v15 + 67) = 0x1000000000;
        do
          v20 = __ldxr(v17);
        while (__stxr(v20 + 1, v17));
        *(_QWORD *)&v57 = v15 + 24;
        *((_QWORD *)&v57 + 1) = v15;
        v58 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0,llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0,void>::Callbacks
            + 6;
        v21 = a4[2];
        v22 = a4[1];
        if (v22 >= v21)
        {
          v24 = (uint64_t)(v22 - *a4) >> 5;
          if ((unint64_t)(v24 + 1) >> 59)
            goto LABEL_68;
          v25 = v21 - *a4;
          v26 = v25 >> 4;
          if (v25 >> 4 <= (unint64_t)(v24 + 1))
            v26 = v24 + 1;
          if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFE0)
            v27 = 0x7FFFFFFFFFFFFFFLL;
          else
            v27 = v26;
          v56 = a4 + 2;
          if (v27)
            v28 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 2), v27);
          else
            v28 = 0;
          v52 = v28;
          v53 = &v28[32 * v24];
          v55 = &v28[32 * v27];
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v53, &v57);
          v54 = (uint64_t)(v53 + 32);
          std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4, &v52);
          v23 = a4[1];
          std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v52);
        }
        else
        {
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[1], &v57);
          v23 = v22 + 32;
        }
        a4[1] = v23;
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v57);
        v29 = a4 + 3;
        do
          v30 = __ldxr(v17);
        while (__stxr(v30 + 1, v17));
        *(_QWORD *)&v57 = v18;
        *((_QWORD *)&v57 + 1) = v16;
        v58 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1,llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1,void>::Callbacks
            + 6;
        v31 = a4[5];
        v32 = a4[4];
        if (v32 >= v31)
        {
          v34 = (uint64_t)(v32 - *v29) >> 5;
          if ((unint64_t)(v34 + 1) >> 59)
            goto LABEL_68;
          v35 = v31 - *v29;
          v36 = v35 >> 4;
          if (v35 >> 4 <= (unint64_t)(v34 + 1))
            v36 = v34 + 1;
          if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFE0)
            v37 = 0x7FFFFFFFFFFFFFFLL;
          else
            v37 = v36;
          v56 = a4 + 5;
          if (v37)
            v38 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 5), v37);
          else
            v38 = 0;
          v39 = (uint64_t)&v38[32 * v34];
          v52 = v38;
          v53 = (char *)v39;
          v55 = &v38[32 * v37];
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v39, &v57);
          v54 = v39 + 32;
          std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 3, &v52);
          v33 = a4[4];
          std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v52);
        }
        else
        {
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[4], &v57);
          v33 = v32 + 32;
        }
        a4[4] = v33;
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v57);
        v40 = a4 + 12;
        do
          v41 = __ldxr(v17);
        while (__stxr(v41 + 1, v17));
        *(_QWORD *)&v57 = v18;
        *((_QWORD *)&v57 + 1) = v16;
        v58 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2,llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2,void>::Callbacks
            + 6;
        v42 = a4[14];
        v43 = a4[13];
        if (v43 < v42)
        {
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[13], &v57);
          v44 = v43 + 32;
LABEL_63:
          a4[13] = v44;
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v57);
          do
            v51 = __ldaxr(v17);
          while (__stlxr(v51 - 1, v17));
          if (!v51)
          {
            ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
            std::__shared_weak_count::__release_weak(v16);
          }
          return;
        }
        v45 = (uint64_t)(v43 - *v40) >> 5;
        if (!((unint64_t)(v45 + 1) >> 59))
        {
          v46 = v42 - *v40;
          v47 = v46 >> 4;
          if (v46 >> 4 <= (unint64_t)(v45 + 1))
            v47 = v45 + 1;
          if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFE0)
            v48 = 0x7FFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          v56 = a4 + 14;
          if (v48)
            v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 14), v48);
          else
            v49 = 0;
          v50 = (uint64_t)&v49[32 * v45];
          v52 = v49;
          v53 = (char *)v50;
          v55 = &v49[32 * v48];
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v50, &v57);
          v54 = v50 + 32;
          std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 12, &v52);
          v44 = a4[13];
          std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v52);
          goto LABEL_63;
        }
LABEL_68:
        abort();
      }
    }
  }
}

void llvm::orc::GDBJITDebugInfoRegistrationPlugin::~GDBJITDebugInfoRegistrationPlugin(llvm::orc::GDBJITDebugInfoRegistrationPlugin *this)
{
  JUMPOUT(0x24BD1B3A4);
}

void std::__shared_ptr_emplace<`anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14B98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<`anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C14B98;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__shared_ptr_emplace<`anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>>::__on_zero_shared(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t `anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>::~MachODebugObjectSynthesizer(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  void *v6;
  void **v8;

  *(_QWORD *)a1 = &off_251C14BD0;
  v2 = *(void **)(a1 + 504);
  if (v2 != (void *)(a1 + 520))
    free(v2);
  v3 = *(void **)(a1 + 232);
  if (v3 != (void *)(a1 + 248))
    free(v3);
  v4 = *(void **)(a1 + 208);
  if (v4)
  {
    *(_QWORD *)(a1 + 216) = v4;
    operator delete(v4);
  }
  v5 = *(void **)(a1 + 176);
  if (v5)
  {
    *(_QWORD *)(a1 + 184) = v5;
    operator delete(v5);
  }
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(a1 + 152, *(_QWORD **)(a1 + 160));
  v6 = *(void **)(a1 + 128);
  if (v6)
  {
    *(_QWORD *)(a1 + 136) = v6;
    operator delete(v6);
  }
  v8 = (void **)(a1 + 96);
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v8);
  std::__list_imp<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment>>::clear((uint64_t *)(a1 + 72));
  return a1;
}

void `anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>::~MachODebugObjectSynthesizer(uint64_t a1)
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *`anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>::startSynthesis@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t Section;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  _BYTE *v13;
  uint64_t v15;
  unint64_t v16;
  _QWORD *v17;
  int64x2_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t **v31;
  uint64_t **v32;
  uint64_t **v33;
  uint64_t **v34;
  uint64_t *v35;
  uint64_t v36;
  char v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t **v45;
  _QWORD *v46;
  uint64_t *v47;
  _QWORD *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  char *v54;
  uint64_t **v55;
  uint64_t **v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  uint64_t v60;
  _QWORD *result;
  uint64_t v62;
  _QWORD *v63;
  uint64_t *v64;
  uint64_t *v65;
  int64x2_t *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t (**v73)();
  _BYTE v74[72];
  uint64_t v75;
  _QWORD v76[5];

  v2 = a1;
  v76[3] = *MEMORY[0x24BDAC8D0];
  Section = llvm::jitlink::LinkGraph::createSection(*(_QWORD *)(a1 + 8), (uint64_t)"__jitlink_synth_debug_object", 28, 1);
  v5 = *(_QWORD *)(v2 + 8);
  v67 = v2;
  v62 = Section;
  v63 = a2;
  if (*(_DWORD *)(v5 + 192))
  {
    v6 = *(unsigned int *)(v5 + 200);
    if ((_DWORD)v6)
    {
      v7 = 24 * v6;
      v8 = *(_QWORD **)(v5 + 184);
      while (*v8 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v8 += 3;
        v7 -= 24;
        if (!v7)
          goto LABEL_25;
      }
    }
    else
    {
      v8 = *(_QWORD **)(v5 + 184);
    }
    v9 = *(_QWORD *)(v5 + 184) + 24 * v6;
    if (v8 != (_QWORD *)v9)
    {
LABEL_9:
      v10 = v8[2];
      if ((_QWORD *)(*(_QWORD *)(v10 + 32) + 8 * *(unsigned int *)(v10 + 48)) != llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v10 + 32))
      {
        v11 = *(_QWORD *)(v10 + 8);
        if (v11 - 34 >= 0xFFFFFFFFFFFFFFDFLL)
        {
          v12 = *(_QWORD **)v10;
          v13 = memchr(*(void **)v10, 44, *(_QWORD *)(v10 + 8));
          if (v13 && (unint64_t)(v13 - (_BYTE *)v12) <= 0x10)
          {
            if (v11 >= 8 && (v15 = v2 + 232, *v12 == 0x2C46524157445F5FLL)
              || (v15 = v2 + 504, *(_DWORD *)(v10 + 20) != 2))
            {
              v16 = *(unsigned int *)(v15 + 8);
              if (v16 >= *(unsigned int *)(v15 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v15, (void *)(v15 + 16), v16 + 1, 16);
                v16 = *(unsigned int *)(v15 + 8);
              }
              v17 = (_QWORD *)(*(_QWORD *)v15 + 16 * v16);
              *v17 = v10;
              v17[1] = 0;
              ++*(_DWORD *)(v15 + 8);
            }
          }
        }
      }
      while (1)
      {
        v8 += 3;
        if (v8 == (_QWORD *)v9)
          break;
        if (*v8 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v8 != (_QWORD *)v9)
            goto LABEL_9;
          break;
        }
      }
      v5 = *(_QWORD *)(v2 + 8);
    }
  }
LABEL_25:
  v18 = (int64x2_t *)(v2 + 32);
  *(_DWORD *)(v2 + 44) = 1;
  *(int8x8_t *)(v2 + 36) = vbsl_s8((int8x8_t)vcltz_s32(vshl_n_s32(vdup_n_s32(*(_DWORD *)(v5 + 144) == 38), 0x1FuLL)), (int8x8_t)0x301000007, (int8x8_t)16777228);
  memset(&v74[8], 0, 48);
  *(_QWORD *)v74 = 0x4800000019;
  v75 = v2 + 32;
  *(_OWORD *)&v74[56] = 0x700000007uLL;
  v19 = (char *)operator new(0x80uLL);
  *(_OWORD *)(v19 + 40) = *(_OWORD *)&v74[16];
  *(_OWORD *)(v19 + 56) = *(_OWORD *)&v74[32];
  *(_OWORD *)(v19 + 72) = *(_OWORD *)&v74[48];
  v20 = *(_QWORD *)&v74[64];
  *(_OWORD *)(v19 + 24) = *(_OWORD *)v74;
  *((_QWORD *)v19 + 11) = v20;
  *((_QWORD *)v19 + 12) = v2 + 32;
  *((_QWORD *)v19 + 14) = 0;
  *((_QWORD *)v19 + 15) = 0;
  *((_QWORD *)v19 + 13) = 0;
  v76[1] = 0;
  v76[2] = 0;
  v21 = *(_QWORD *)(v2 + 72);
  *((_QWORD *)v19 + 1) = v2 + 72;
  *((_QWORD *)v19 + 2) = &off_251C14C00;
  *(_QWORD *)v19 = v21;
  v76[0] = 0;
  *(_QWORD *)(v21 + 8) = v19;
  *(_QWORD *)(v2 + 72) = v19;
  ++*(_QWORD *)(v2 + 88);
  v73 = &off_251C14C00;
  *(_QWORD *)&v70 = v76;
  std::vector<std::unique_ptr<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section,std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v70);
  *(_QWORD *)(v2 + 200) = *(_QWORD *)(v2 + 72) + 16;
  v22 = *(unsigned int *)(v2 + 240);
  if ((_DWORD)v22)
  {
    v23 = 16 * v22;
    v24 = *(_QWORD *)(v2 + 232) + 8;
    do
    {
      v70 = *(_OWORD *)*(_QWORD *)(v24 - 8);
      LOBYTE(v72) = 44;
      llvm::StringRef::split((uint64_t *)&v70, (char *)&v72, 1uLL, (uint64_t)&v73);
      *(_QWORD *)v24 = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment::addSection(*(_QWORD **)(v2 + 200), *(const void **)&v74[8], *(size_t *)&v74[16], v73, *(size_t *)v74);
      llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v70, *(_QWORD *)(v24 - 8));
      v25 = *((_QWORD *)&v70 + 1);
      if (*((_QWORD *)&v70 + 1))
        v25 = *(_QWORD *)(*((_QWORD *)&v70 + 1) + 32) + **((_QWORD **)&v70 + 1);
      v26 = v70;
      if ((_QWORD)v70)
      {
        v27 = *(_QWORD *)v24;
        *(_QWORD *)(v27 + 112) = v25 - *(_QWORD *)v70;
        *(_DWORD *)(v27 + 52) = __clz(1 << (*(_QWORD *)(v26 + 8) >> 3)) ^ 0x3F;
      }
      else
      {
        *(_QWORD *)(*(_QWORD *)v24 + 112) = v25;
      }
      v24 += 16;
      v23 -= 16;
    }
    while (v23);
  }
  v28 = *(unsigned int *)(v2 + 512);
  if ((_DWORD)v28)
  {
    v29 = *(uint64_t **)(v2 + 504);
    v64 = &v29[2 * v28];
    v66 = (int64x2_t *)(v2 + 32);
    do
    {
      v70 = *(_OWORD *)*v29;
      LOBYTE(v72) = 44;
      llvm::StringRef::split((uint64_t *)&v70, (char *)&v72, 1uLL, (uint64_t)&v73);
      v29[1] = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment::addSection(*(_QWORD **)(v2 + 200), *(const void **)&v74[8], *(size_t *)&v74[16], v73, *(size_t *)v74);
      llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v70, *v29);
      if ((_QWORD)v70)
        *(_DWORD *)(v29[1] + 52) = __clz(1 << (*(_QWORD *)(v70 + 8) >> 3)) ^ 0x3F;
      v65 = v29;
      v30 = *v29;
      v31 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v30 + 56);
      v69 = *(_QWORD *)(v30 + 56) + 8 * *(unsigned int *)(v30 + 72);
      if ((uint64_t **)v69 != v31)
      {
        v33 = v31;
        v34 = v32;
        do
        {
          v35 = *v33;
          if ((*v33)[1])
          {
            v36 = v35[3];
            llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::addSymbol((uint64_t)v18, (uint64_t)"", 0, 46, 1);
            if ((v36 & 0x2000000000000000) != 0)
              v37 = 36;
            else
              v37 = 32;
            v38 = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::addSymbol((uint64_t)v18, *v35, v35[1], v37, 1);
            v40 = v39;
            v41 = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::addSymbol((uint64_t)v18, *v35, v35[1], v37, 0);
            v43 = v41;
            v45 = *(uint64_t ***)(v2 + 216);
            v44 = *(_QWORD *)(v2 + 224);
            if ((unint64_t)v45 >= v44)
            {
              v47 = v40;
              v48 = *(_QWORD **)(v2 + 208);
              v49 = 0xCCCCCCCCCCCCCCCDLL * (v45 - (uint64_t **)v48) + 1;
              if (v49 > 0x666666666666666)
                abort();
              v50 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - (_QWORD)v48) >> 3);
              if (2 * v50 > v49)
                v49 = 2 * v50;
              if (v50 >= 0x333333333333333)
                v51 = 0x666666666666666;
              else
                v51 = v49;
              v68 = v51;
              if (v51)
              {
                if (v51 > 0x666666666666666)
                  std::__throw_bad_array_new_length[abi:nn180100]();
                v52 = v41;
                v53 = v42;
                v54 = (char *)operator new(40 * v51);
                v42 = v53;
                v43 = v52;
              }
              else
              {
                v54 = 0;
              }
              v55 = (uint64_t **)&v54[8 * (v45 - (uint64_t **)v48)];
              *v55 = v35;
              v55[1] = (uint64_t *)v38;
              v55[2] = v47;
              v55[3] = (uint64_t *)v43;
              v55[4] = v42;
              v56 = v55;
              if (v45 == v48)
              {
                v2 = v67;
              }
              else
              {
                v2 = v67;
                do
                {
                  v57 = *(_OWORD *)(v45 - 5);
                  v58 = *(_OWORD *)(v45 - 3);
                  *(v56 - 1) = *(v45 - 1);
                  *(_OWORD *)(v56 - 3) = v58;
                  *(_OWORD *)(v56 - 5) = v57;
                  v56 -= 5;
                  v45 -= 5;
                }
                while (v45 != v48);
                v45 = *(uint64_t ***)(v67 + 208);
              }
              v46 = v55 + 5;
              *(_QWORD *)(v2 + 208) = v56;
              *(_QWORD *)(v2 + 216) = v55 + 5;
              *(_QWORD *)(v2 + 224) = &v54[40 * v68];
              if (v45)
                operator delete(v45);
              v18 = v66;
            }
            else
            {
              *v45 = v35;
              v45[1] = (uint64_t *)v38;
              v45[2] = v40;
              v45[3] = (uint64_t *)v41;
              v46 = v45 + 5;
              v45[4] = v42;
            }
            *(_QWORD *)(v2 + 216) = v46;
            llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::addSymbol((uint64_t)v18, (uint64_t)"", 0, 78, 1);
          }
          while (++v33 != v34)
          {
            if (((unint64_t)*v33 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_68;
          }
          v33 = v34;
LABEL_68:
          ;
        }
        while (v33 != (uint64_t **)v69);
      }
      v29 = v65 + 2;
    }
    while (v65 + 2 != v64);
  }
  v59 = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::layout(v18);
  v60 = *(_QWORD *)(v2 + 8);
  v73 = (uint64_t (**)())llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v60, v59, 0);
  *(_QWORD *)v74 = v59;
  *(_QWORD *)&v70 = 0;
  v71 = 0;
  v72 = 8;
  result = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v60, v62, (uint64_t *)&v73, (uint64_t *)&v70, &v72, &v71);
  *(_QWORD *)(v2 + 24) = result;
  *v63 = 0;
  return result;
}

void `anonymous namespace'::MachODebugObjectSynthesizer<llvm::orc::MachO64LE>::completeSynthesisAndRegister(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  _BYTE *v26;
  unint64_t *v27;
  _QWORD *v28;
  unint64_t *v29;
  const void *v30[6];
  char v31;
  uint64_t v32;
  void *v33;
  __int128 v34;
  _WORD v35[12];
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  unint64_t *v42;
  __int128 v43;
  _BYTE v44[24];
  _QWORD *v45;
  __int128 v46;
  _QWORD v47[4];

  v47[3] = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a1 + 24))
  {
LABEL_40:
    *a2 = 0;
    return;
  }
  v4 = *(unsigned int *)(a1 + 512);
  if ((_DWORD)v4)
  {
    v5 = *(uint64_t **)(a1 + 504);
    v6 = &v5[2 * v4];
    do
    {
      llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v32, *v5);
      v7 = (unint64_t *)v32;
      if (v32)
        v8 = *(_QWORD *)v32;
      else
        v8 = 0;
      v9 = v5[1];
      *(_QWORD *)(v9 + 32) = v8;
      v10 = (char *)v33;
      if (v33)
        v10 = (char *)(*((_QWORD *)v33 + 4) + *(_QWORD *)v33);
      if (v7)
      {
        *(_QWORD *)(v9 + 40) = &v10[-*v7];
        v7 = (unint64_t *)*v7;
      }
      else
      {
        *(_QWORD *)(v9 + 40) = v10;
      }
      *(_DWORD *)(v9 + 48) = (_DWORD)v7;
      v5 += 2;
    }
    while (v5 != v6);
  }
  v11 = *(unsigned int *)(a1 + 240);
  if (!(_DWORD)v11)
  {
LABEL_17:
    v17 = *(_QWORD **)(a1 + 208);
    v18 = *(_QWORD **)(a1 + 216);
    while (v17 != v18)
    {
      v19 = *v17;
      *(_QWORD *)(*(_QWORD *)(v17[1] + 8) + 16 * v17[2] + 8) = (*(_QWORD *)(*v17 + 24) & 0x1FFFFFFFFFFFFFFLL)
                                                                 + **(_QWORD **)(*v17 + 16);
      *(_QWORD *)(*(_QWORD *)(v17[3] + 8) + 16 * v17[4] + 8) = *(_QWORD *)(v19 + 32);
      v17 += 5;
    }
    llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::write(a1 + 32, *(_OWORD **)(*(_QWORD *)(a1 + 24) + 24), *(_QWORD *)(*(_QWORD *)(a1 + 24) + 32));
    llvm::jitlink::SectionRange::SectionRange(&v27, *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16));
    if (v27)
      v20 = *v27;
    else
      v20 = 0;
    if (v28)
      v22 = v28[4] + *v28;
    else
      v22 = 0;
    v23 = *(_QWORD *)(a1 + 8);
    v24 = *(unint64_t **)(a1 + 16);
    v45 = v47;
    v46 = xmmword_24AA2ACE0;
    llvm::SmallVectorImpl<char>::resizeImpl<false>(&v45, 0x11uLL);
    v25 = v46;
    if ((unint64_t)v46 < 8
      || (v26 = v45, *v45 = v20, (v25 & 0xFFFFFFFFFFFFFFF8) == 8)
      || (*((_QWORD *)v26 + 1) = v22, v25 == 16))
    {
      getErrorErrorCat();
      v32 = 3;
      v33 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Cannot serialize arguments for AllocActionCall", &v32, (uint64_t *)&v42);
      v31 = -1;
      v29 = v42;
      v42 = 0;
    }
    else
    {
      v26[16] = 1;
      v42 = (unint64_t *)v44;
      v43 = xmmword_24AA2ACE0;
      if ((_QWORD)v46)
      {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v42, (const void **)&v45);
        v32 = (uint64_t)v24;
        v33 = v35;
        v34 = xmmword_24AA2ACE0;
        if ((_QWORD)v43)
          llvm::SmallVectorImpl<char>::operator=((uint64_t)&v33, (const void **)&v42);
      }
      else
      {
        v32 = (uint64_t)v24;
        v33 = v35;
        v34 = xmmword_24AA2ACE0;
      }
      llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>((uint64_t)&v29, (uint64_t)&v32);
      if (v33 != v35)
        free(v33);
      if (v42 != (unint64_t *)v44)
        free(v42);
    }
    if (v45 != v47)
      free(v45);
    v32 = (uint64_t)v29;
    v33 = v35;
    v34 = xmmword_24AA2ACE0;
    if (v30[1])
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v33, v30);
    v36 = 0;
    v38 = 0;
    v41 = 0;
    v40 = 0u;
    v37 = &v40;
    v39 = 24;
    std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100]((uint64_t *)(v23 + 256), (uint64_t)&v32);
    if (v37 != &v40)
      free(v37);
    if (v33 != v35)
      free(v33);
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)&v29);
    goto LABEL_40;
  }
  v12 = *(_QWORD **)(a1 + 232);
  v13 = &v12[2 * v11];
  while (*(_DWORD *)(*v12 + 40) == 1)
  {
    v14 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(*v12 + 32);
    v15 = *(_QWORD *)(*v14 + 32);
    v16 = v12[1];
    *(_QWORD *)(v16 + 104) = *(_QWORD *)(*v14 + 24);
    *(_QWORD *)(v16 + 112) = v15;
    *(_DWORD *)(v16 + 64) |= 0x2000000u;
    v12 += 2;
    if (v12 == v13)
      goto LABEL_17;
  }
  getErrorErrorCat();
  v21 = operator new();
  v32 = (uint64_t)"Unexpected number of blocks in debug info section";
  v35[0] = 259;
  *(_QWORD *)v21 = off_251C127D0;
  llvm::Twine::str((llvm::formatv_object_base **)&v32, (std::string *)(v21 + 8));
  *(_QWORD *)(v21 + 32) = 3;
  *(_QWORD *)(v21 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
  *(_BYTE *)(v21 + 48) = 1;
  *a2 = v21;
}

void std::__list_imp<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment>>::clear(uint64_t *a1)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t *v5;

  if (a1[2])
  {
    v2 = *a1;
    v3 = (uint64_t *)a1[1];
    v4 = *v3;
    *(_QWORD *)(v4 + 8) = *(_QWORD *)(*a1 + 8);
    **(_QWORD **)(v2 + 8) = v4;
    a1[2] = 0;
    if (v3 != a1)
    {
      do
      {
        v5 = (uint64_t *)v3[1];
        (*(void (**)(uint64_t *))v3[2])(v3 + 2);
        operator delete(v3);
        v3 = v5;
      }
      while (v5 != a1);
    }
  }
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment::addSection(_QWORD *a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  uint64_t *v21;
  char *v22;
  uint64_t v23;
  uint64_t *v24;
  _QWORD *v25;
  _QWORD *v26;

  v10 = a1[10];
  v11 = operator new();
  *(_QWORD *)(v11 + 80) = v11;
  *(_QWORD *)(v11 + 88) = 0xFFFFFFFFLL;
  *(_QWORD *)(v11 + 96) = v10;
  *(_OWORD *)v11 = 0u;
  *(_OWORD *)(v11 + 32) = 0u;
  *(_OWORD *)(v11 + 48) = 0u;
  *(_OWORD *)(v11 + 16) = 0u;
  *(_OWORD *)(v11 + 64) = 0u;
  *(_OWORD *)(v11 + 104) = 0u;
  *(_OWORD *)(v11 + 120) = 0u;
  *(_OWORD *)(v11 + 136) = 0u;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  memcpy((void *)v11, a2, a3);
  memcpy((void *)(v11 + 16), a4, a5);
  v13 = (uint64_t *)a1[12];
  v12 = a1[13];
  if ((unint64_t)v13 >= v12)
  {
    v15 = (_QWORD *)a1[11];
    v16 = v13 - v15;
    v17 = v16 + 1;
    if ((unint64_t)(v16 + 1) >> 61)
      abort();
    v18 = v12 - (_QWORD)v15;
    if (v18 >> 2 > v17)
      v17 = v18 >> 2;
    if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF8)
      v19 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v19 = v17;
    if (v19)
    {
      if (v19 >> 61)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v20 = (char *)operator new(8 * v19);
    }
    else
    {
      v20 = 0;
    }
    v21 = (uint64_t *)&v20[8 * v16];
    v22 = &v20[8 * v19];
    *v21 = v11;
    v14 = v21 + 1;
    if (v13 == v15)
    {
      a1[11] = v21;
      a1[12] = v14;
      a1[13] = v22;
    }
    else
    {
      do
      {
        v23 = *--v13;
        *v13 = 0;
        *--v21 = v23;
      }
      while (v13 != v15);
      v13 = (uint64_t *)a1[11];
      v24 = (uint64_t *)a1[12];
      a1[11] = v21;
      a1[12] = v14;
      a1[13] = v22;
      while (v24 != v13)
      {
        v26 = (_QWORD *)*--v24;
        v25 = v26;
        *v24 = 0;
        if (v26)
          std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>::operator()[abi:nn180100](v25);
      }
    }
    if (v13)
      operator delete(v13);
  }
  else
  {
    *v13 = v11;
    v14 = v13 + 1;
  }
  a1[12] = v14;
  return *(v14 - 1);
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::addSymbol(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v10;
  BOOL v11;
  int v12;
  unint64_t v13;
  char *v14;
  _DWORD *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t result;
  __int128 v24;
  uint64_t v25;

  v10 = *(_QWORD *)(a1 + 136);
  if (v10)
    v11 = 1;
  else
    v11 = a3 == 0;
  if (!v11)
  {
    *((_QWORD *)&v24 + 1) = 0;
    v25 = 0;
    *(_QWORD *)&v24 = "";
    std::__tree<std::__value_type<llvm::StringRef,unsigned long>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,unsigned long>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,unsigned long>>>::__emplace_unique_key_args<llvm::StringRef,std::pair<llvm::StringRef,unsigned long>>((uint64_t **)(a1 + 120), &v24, (uint64_t)&v24);
    v10 = *(_QWORD *)(a1 + 136);
  }
  *(_QWORD *)&v24 = a2;
  *((_QWORD *)&v24 + 1) = a3;
  v25 = v10;
  v12 = *((_DWORD *)std::__tree<std::__value_type<llvm::StringRef,unsigned long>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,unsigned long>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,unsigned long>>>::__emplace_unique_key_args<llvm::StringRef,std::pair<llvm::StringRef,unsigned long>>((uint64_t **)(a1 + 120), &v24, (uint64_t)&v24)+ 12);
  v14 = *(char **)(a1 + 104);
  v13 = *(_QWORD *)(a1 + 112);
  if ((unint64_t)v14 >= v13)
  {
    v16 = *(char **)(a1 + 96);
    v17 = (v14 - v16) >> 4;
    v18 = v17 + 1;
    if ((unint64_t)(v17 + 1) >> 60)
      abort();
    v19 = v13 - (_QWORD)v16;
    if (v19 >> 3 > v18)
      v18 = v19 >> 3;
    if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
      v20 = 0xFFFFFFFFFFFFFFFLL;
    else
      v20 = v18;
    if (v20)
    {
      if (v20 >> 60)
        std::__throw_bad_array_new_length[abi:nn180100]();
      v21 = (char *)operator new(16 * v20);
    }
    else
    {
      v21 = 0;
    }
    v22 = &v21[16 * v17];
    *(_DWORD *)v22 = v12;
    v22[4] = a4;
    v22[5] = a5;
    *((_WORD *)v22 + 3) = 0;
    *((_QWORD *)v22 + 1) = 0;
    v15 = v22 + 16;
    if (v14 != v16)
    {
      do
      {
        *((_OWORD *)v22 - 1) = *((_OWORD *)v14 - 1);
        v22 -= 16;
        v14 -= 16;
      }
      while (v14 != v16);
      v14 = *(char **)(a1 + 96);
    }
    *(_QWORD *)(a1 + 96) = v22;
    *(_QWORD *)(a1 + 104) = v15;
    *(_QWORD *)(a1 + 112) = &v21[16 * v20];
    if (v14)
      operator delete(v14);
  }
  else
  {
    *(_DWORD *)v14 = v12;
    v14[4] = a4;
    v14[5] = a5;
    *((_WORD *)v14 + 3) = 0;
    v15 = v14 + 16;
    *((_QWORD *)v14 + 1) = 0;
  }
  result = a1 + 88;
  *(_QWORD *)(a1 + 104) = v15;
  return result;
}

unint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::layout(int64x2_t *a1)
{
  _DWORD *Command;
  int64x2_t *v3;
  int64x2_t *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int64x2_t *v11;
  uint64_t v12;
  __int32 v13;
  int64x2_t *v14;
  unint64_t result;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  uint64_t v26;
  _DWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int64x2_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  unsigned int *v34;
  unsigned int *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;

  llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::makeStringTable(a1);
  if (a1[9].i64[0] == a1[9].i64[1])
    Command = 0;
  else
    Command = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::addLoadCommand<(llvm::MachO::LoadCommandType)2>(a1);
  v3 = (int64x2_t *)((char *)a1 + 40);
  v4 = (int64x2_t *)a1[3].i64[0];
  v5 = 32;
  if (v4 != (int64x2_t *)&a1[2].u64[1])
  {
    do
    {
      v6 = (unint64_t)(v4[7].i64[0] - v4[6].i64[1]) >> 3;
      v7 = (v4[1].i32[3] + 80 * v6);
      v4[1].i32[3] = v7;
      v4[5].i32[2] = v6;
      v5 += v7;
      v4 = (int64x2_t *)v4->i64[1];
    }
    while (v4 != v3);
  }
  v8 = (uint64_t *)a1[4].i64[0];
  v9 = (uint64_t *)a1[4].i64[1];
  while (v8 != v9)
  {
    v10 = *v8++;
    v5 += (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  }
  a1[1].i32[1] = v5 - 32;
  v11 = (int64x2_t *)a1[3].i64[0];
  if (v11 == v3)
  {
    result = v5;
  }
  else
  {
    v12 = 0;
    v13 = a1->i32[3];
    v14 = (int64x2_t *)a1[3].i64[0];
    result = v5;
    do
    {
      v14[3].i64[0] = v12;
      v14[4].i64[0] = v5;
      v16 = (uint64_t *)v14[6].i64[1];
      v17 = v14[7].i64[0];
      if (v16 != (uint64_t *)v17)
      {
        result = v5;
        do
        {
          v18 = *v16;
          v19 = 1 << *(_DWORD *)(*v16 + 52);
          v20 = (result + v19 - 1) & -v19;
          v21 = *(_QWORD *)(*v16 + 112);
          if (v21)
          {
            v22 = v20;
            *(_DWORD *)(v18 + 48) = v20;
          }
          else
          {
            v22 = *(unsigned int *)(v18 + 48);
          }
          *(_QWORD *)(v18 + 32) = v12 - v5 + v22;
          *(_QWORD *)(v18 + 40) = v21;
          result = v20 + v21;
          ++v16;
        }
        while (v16 != (uint64_t *)v17);
      }
      v23 = result - v5;
      v14[4].i64[1] = result - v5;
      if (v13 != 1)
        v23 = (v23 + a1[2].i64[0] - 1) / a1[2].i64[0] * a1[2].i64[0];
      v14[3].i64[1] = v23;
      v12 += v23;
      v14 = (int64x2_t *)v14->i64[1];
      v5 = result;
    }
    while (v14 != v3);
  }
  v24 = a1[6].i64[0];
  v25 = (_DWORD *)a1[6].i64[1];
  if ((_DWORD *)v24 != v25)
  {
    v26 = a1[9].i64[0];
    v27 = (_DWORD *)a1[6].i64[0];
    do
    {
      *v27 = *(_QWORD *)(v26 + 24 * *v27 + 16);
      v27 += 4;
    }
    while (v27 != v25);
  }
  v28 = ((uint64_t)v25 - v24) >> 4;
  if (v11 != v3)
  {
    v29 = 0;
    v30 = v11;
    do
    {
      v31 = (_QWORD *)v30[6].i64[1];
      v32 = (_QWORD *)v30[7].i64[0];
      while (v31 != v32)
      {
        ++v29;
        v33 = (_QWORD *)*v31;
        v33[15] = v29;
        v33[16] = v28;
        v35 = (unsigned int *)v33[17];
        v34 = (unsigned int *)v33[18];
        v36 = (char *)v34 - (char *)v35;
        if (v34 != v35)
        {
          v37 = a1[9].i64[0];
          v38 = v33[4];
          do
          {
            *((_BYTE *)v35 + 5) = v29;
            *v35 = *(_QWORD *)(v37 + 24 * *v35 + 16);
            *((_QWORD *)v35 + 1) += v38;
            v35 += 4;
          }
          while (v35 != v34);
        }
        v28 += v36 >> 4;
        ++v31;
      }
      v30 = (int64x2_t *)v30->i64[1];
    }
    while (v30 != v3);
    v39 = 0;
    do
    {
      v40 = (uint64_t *)v11[6].i64[1];
      v41 = v11[7].i64[0];
      while (v40 != (uint64_t *)v41)
      {
        v42 = *v40;
        v43 = *(_QWORD *)(*v40 + 160);
        v44 = *(_QWORD *)(*v40 + 168);
        if (v43 != v44)
        {
          if ((v39 & 1) != 0)
            v45 = result;
          else
            v45 = (result + 7) & 0xFFFFFFFFFFFFFFF8;
          v46 = 0xAAAAAAAAAAAAAAABLL * ((v44 - v43) >> 3);
          *(_DWORD *)(v42 + 56) = v45;
          *(_DWORD *)(v42 + 60) = v46;
          do
          {
            v48 = *(_QWORD **)(v43 + 8);
            v47 = *(_QWORD *)(v43 + 16);
            if (v47 == 0xFFFFFFFFLL)
              v49 = v48[15];
            else
              v49 = *v48 + v47;
            *(_DWORD *)(v43 + 4) = v49 & 0xFFFFFF | (*(unsigned __int8 *)(v43 + 7) << 24);
            v43 += 24;
          }
          while (v43 != v44);
          result = v45 + 8 * v46;
          v39 = 1;
        }
        ++v40;
      }
      v11 = (int64x2_t *)v11->i64[1];
    }
    while (v11 != v3);
  }
  if (v28)
  {
    result = (result + 15) & 0xFFFFFFFFFFFFFFF0;
    Command[4] = result;
    Command[5] = v28;
    v50 = a1[9].i64[1];
    if (a1[9].i64[0] != v50)
    {
      v51 = result + 16 * v28;
      v52 = *(_QWORD *)(v50 - 8) + *(_QWORD *)(v50 - 16) + 1;
      Command[6] = v51;
      Command[7] = v52;
      return v52 + v51;
    }
  }
  return result;
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment::~Segment(uint64_t a1)
{
  void **v3;

  *(_QWORD *)a1 = &off_251C14C00;
  v3 = (void **)(a1 + 88);
  std::vector<std::unique_ptr<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section,std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>>>::__destroy_vector::operator()[abi:nn180100](&v3);
  return a1;
}

void llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment::~Segment(uint64_t a1)
{
  void **v1;

  *(_QWORD *)a1 = &off_251C14C00;
  v1 = (void **)(a1 + 88);
  std::vector<std::unique_ptr<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section,std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>>>::__destroy_vector::operator()[abi:nn180100](&v1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)25>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int8x8_t v5;
  int8x16_t v6;
  int8x16_t v7;
  int8x16_t v8;
  uint64_t v9;
  int8x16_t **v10;
  int8x16_t **v11;
  int8x16_t *v12;
  int8x16_t v13;
  int8x16_t v14;
  int8x8_t v15;
  unsigned int v16;
  __int32 v17;
  uint64_t v18;
  int8x16_t v19;
  __int128 v21;

  v5 = *(int8x8_t *)(a1 + 8);
  v6 = *(int8x16_t *)(a1 + 32);
  v21 = *(_OWORD *)(a1 + 16);
  v7 = *(int8x16_t *)(a1 + 48);
  v8 = *(int8x16_t *)(a1 + 64);
  if (a5)
  {
    v5 = vrev32_s8(v5);
    v6 = vrev64q_s8(v6);
    v7 = vrev64q_s8(v7);
    v8 = vrev32q_s8(v8);
  }
  v9 = a2 + a4;
  *(int8x8_t *)v9 = v5;
  *(_OWORD *)(v9 + 8) = v21;
  *(int8x16_t *)(v9 + 24) = v6;
  *(int8x16_t *)(v9 + 40) = v7;
  *(int8x16_t *)(v9 + 56) = v8;
  v10 = *(int8x16_t ***)(a1 + 88);
  v11 = *(int8x16_t ***)(a1 + 96);
  while (v10 != v11)
  {
    v12 = *v10;
    v14 = (*v10)[2];
    v13 = (*v10)[3];
    v15 = *(int8x8_t *)(*v10)[4].i8;
    v16 = (*v10)[4].u32[2];
    if (a5)
    {
      v14 = vrev64q_s8(v14);
      v13 = vrev32q_s8(v13);
      v15 = vrev32_s8(v15);
      v16 = bswap32(v16);
    }
    v17 = v12[4].i32[3];
    v18 = a2 + a4;
    v19 = *v12;
    *(int8x16_t *)(v18 + 88) = v12[1];
    *(int8x16_t *)(v18 + 72) = v19;
    *(int8x16_t *)(v18 + 104) = v14;
    *(int8x16_t *)(v18 + 120) = v13;
    *(int8x8_t *)(v18 + 136) = v15;
    *(_DWORD *)(v18 + 144) = v16;
    *(_DWORD *)(v18 + 148) = v17;
    ++v10;
    a4 += 80;
  }
  return a4 + 72;
}

void std::vector<std::unique_ptr<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section,std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = (_QWORD *)*--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>::operator()[abi:nn180100](v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void std::default_delete<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Section>::operator()[abi:nn180100](_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[20];
  if (v2)
  {
    a1[21] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[17];
  if (v3)
  {
    a1[18] = v3;
    operator delete(v3);
  }
  JUMPOUT(0x24BD1B3A4);
}

uint64_t *std::__tree<std::__value_type<llvm::StringRef,unsigned long>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,unsigned long>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,unsigned long>>>::__emplace_unique_key_args<llvm::StringRef,std::pair<llvm::StringRef,unsigned long>>(uint64_t **a1, __int128 *a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t v8;
  const void *v9;
  size_t v10;
  const void *v11;
  size_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v17;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v8 = (uint64_t)(a1 + 1);
LABEL_9:
    v13 = (uint64_t *)operator new(0x38uLL);
    *((_OWORD *)v13 + 2) = *(_OWORD *)a3;
    v13[6] = *(_QWORD *)(a3 + 16);
    *v13 = 0;
    v13[1] = 0;
    v13[2] = v8;
    *v6 = v13;
    v14 = (uint64_t *)**a1;
    v15 = v13;
    if (v14)
    {
      *a1 = v14;
      v15 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v13;
  }
  while (1)
  {
    while (1)
    {
      v8 = (uint64_t)v5;
      v9 = (const void *)v5[4];
      v10 = v5[5];
      v17 = *a2;
      if ((llvm::StringRef::compare((uint64_t)&v17, v9, v10) & 0x80000000) == 0)
        break;
      v5 = *(uint64_t **)v8;
      v6 = (uint64_t **)v8;
      if (!*(_QWORD *)v8)
        goto LABEL_9;
    }
    v11 = *(const void **)a2;
    v12 = *((_QWORD *)a2 + 1);
    v17 = *(_OWORD *)(v8 + 32);
    if ((llvm::StringRef::compare((uint64_t)&v17, v11, v12) & 0x80000000) == 0)
      break;
    v6 = (uint64_t **)(v8 + 8);
    v5 = *(uint64_t **)(v8 + 8);
    if (!v5)
      goto LABEL_9;
  }
  v13 = *v6;
  if (!*v6)
    goto LABEL_9;
  return v13;
}

void llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::makeStringTable(_QWORD *a1)
{
  unint64_t v1;
  _QWORD *v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1[17];
  if (v1)
  {
    v3 = a1 + 18;
    std::vector<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry>>::resize((uint64_t)(a1 + 18), v1);
    v4 = (_QWORD *)a1[15];
    if (v4 != a1 + 16)
    {
      do
      {
        v5 = *v3 + 24 * v4[6];
        *(_OWORD *)v5 = *((_OWORD *)v4 + 2);
        *(_QWORD *)(v5 + 16) = 0;
        v6 = (_QWORD *)v4[1];
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = (_QWORD *)*v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v4[2];
            v8 = *v7 == (_QWORD)v4;
            v4 = v7;
          }
          while (!v8);
        }
        v4 = v7;
      }
      while (v7 != a1 + 16);
    }
    v9 = a1[18];
    v10 = a1[19];
    if (v9 != v10)
    {
      v11 = 0;
      do
      {
        *(_QWORD *)(v9 + 16) = v11;
        v11 += *(_QWORD *)(v9 + 8) + 1;
        v9 += 24;
      }
      while (v9 != v10);
    }
  }
}

_QWORD *llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::addLoadCommand<(llvm::MachO::LoadCommandType)2>(int64x2_t *a1)
{
  _QWORD *v2;
  unint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  uint64_t v20;
  int64x2_t v21;
  char *v22;
  int64x2_t *v23;

  v2 = (_QWORD *)operator new();
  v2[2] = 0;
  v2[3] = 0;
  v2[1] = 0x1800000002;
  *v2 = &off_251C14C30;
  v3 = a1[5].u64[0];
  v4 = (_QWORD *)a1[4].i64[1];
  if ((unint64_t)v4 >= v3)
  {
    v6 = a1[4].i64[0];
    v7 = ((uint64_t)v4 - v6) >> 3;
    if ((unint64_t)(v7 + 1) >> 61)
      abort();
    v8 = v3 - v6;
    v9 = v8 >> 2;
    if (v8 >> 2 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8)
      v10 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    v23 = a1 + 5;
    if (v10)
      v11 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)a1[5].i64, v10);
    else
      v11 = 0;
    v12 = &v11[8 * v7];
    v13 = &v11[8 * v10];
    v22 = v13;
    *(_QWORD *)v12 = v2;
    v5 = v12 + 8;
    v21.i64[1] = (uint64_t)(v12 + 8);
    v15 = (_QWORD *)a1[4].i64[0];
    v14 = (_QWORD *)a1[4].i64[1];
    if (v14 == v15)
    {
      v17 = vdupq_n_s64((unint64_t)v14);
    }
    else
    {
      do
      {
        v16 = *--v14;
        *v14 = 0;
        *((_QWORD *)v12 - 1) = v16;
        v12 -= 8;
      }
      while (v14 != v15);
      v17 = a1[4];
      v5 = (_QWORD *)v21.i64[1];
      v13 = v22;
    }
    a1[4].i64[0] = (uint64_t)v12;
    a1[4].i64[1] = (uint64_t)v5;
    v21 = v17;
    v18 = a1[5].i64[0];
    a1[5].i64[0] = (uint64_t)v13;
    v22 = (char *)v18;
    v20 = v17.i64[0];
    std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v20);
  }
  else
  {
    *v4 = v2;
    v5 = v4 + 1;
  }
  a1[4].i64[1] = (uint64_t)v5;
  return v2;
}

void std::vector<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry>>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - *(_QWORD *)a1) >> 3);
  v3 = a2 >= v2;
  v4 = a2 - v2;
  if (v4 != 0 && v3)
  {
    std::vector<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry>>::__append((void **)a1, v4);
  }
  else if (!v3)
  {
    *(_QWORD *)(a1 + 8) = *(_QWORD *)a1 + 24 * a2;
  }
}

void std::vector<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::StringTableEntry>>::__append(void **a1, unint64_t a2)
{
  uint64_t v4;
  _BYTE *v5;
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  size_t v13;
  char *v14;
  char *v15;
  size_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;

  v6 = a1[2];
  v4 = (uint64_t)(a1 + 2);
  v5 = v6;
  v7 = *(char **)(v4 - 8);
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(v4 - 8), v13);
      v7 += v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
      v12 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v4, v11);
    else
      v12 = 0;
    v14 = &v12[24 * v8];
    v15 = &v12[24 * v11];
    v16 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v14, v16);
    v17 = &v14[v16];
    v19 = (char *)*a1;
    v18 = (char *)a1[1];
    if (v18 != *a1)
    {
      do
      {
        v20 = *(_OWORD *)(v18 - 24);
        *((_QWORD *)v14 - 1) = *((_QWORD *)v18 - 1);
        *(_OWORD *)(v14 - 24) = v20;
        v14 -= 24;
        v18 -= 24;
      }
      while (v18 != v19);
      v18 = (char *)*a1;
    }
    *a1 = v14;
    a1[1] = v17;
    a1[2] = v15;
    if (v18)
      operator delete(v18);
  }
}

void llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)2>::~MachOBuilderLoadCommand()
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)2>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)2>::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int8x16_t v5;
  int8x8_t v6;
  int8x16_t v7;
  int8x8_t v8;
  unsigned int v9;
  int8x16_t v10;
  uint64_t v11;

  v5 = *(int8x16_t *)(a1 + 8);
  v6 = *(int8x8_t *)(a1 + 24);
  v7 = vrev32q_s8(v5);
  v8 = vrev32_s8(v6);
  if (a5)
    v9 = -1;
  else
    v9 = 0;
  v10 = (int8x16_t)vdupq_n_s32(v9);
  v11 = a2 + a4;
  *(int8x16_t *)v11 = vbslq_s8(v10, v7, v5);
  *(int8x8_t *)(v11 + 16) = vbsl_s8(*(int8x8_t *)v10.i8, v8, v6);
  return a4 + 24;
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::write(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v6 = a1 + 40;
  *(_DWORD *)(a1 + 16) = ((*(_QWORD *)(a1 + 72) - *(_QWORD *)(a1 + 64)) >> 3) + *(_DWORD *)(a1 + 56);
  v7 = *(_OWORD *)(a1 + 16);
  *a2 = *(_OWORD *)a1;
  a2[1] = v7;
  v8 = *(_QWORD *)(a1 + 48);
  v9 = 32;
  while (v8 != v6)
  {
    v11 = *(_QWORD *)(v8 + 16);
    v10 = v8 + 16;
    v9 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(v11 + 24))(v10, a2, a3, v9, 0);
    v8 = *(_QWORD *)(v10 - 8);
  }
  v12 = *(uint64_t **)(a1 + 64);
  v13 = *(uint64_t **)(a1 + 72);
  while (v12 != v13)
  {
    v14 = *v12++;
    v9 = (*(uint64_t (**)(uint64_t, _OWORD *, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v14 + 24))(v14, a2, a3, v9, 0);
  }
  v15 = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeSectionContent(a1, (uint64_t)a2, a3, v9);
  v16 = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeRelocations(a1, (uint64_t)a2, a3, v15);
  result = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeSymbols((_QWORD *)a1, (uint64_t)a2, a3, v16);
  v19 = *(_QWORD *)(a1 + 144);
  v18 = *(_QWORD *)(a1 + 152);
  if (v19 != v18)
  {
    v20 = result;
    do
    {
      result = (uint64_t)memcpy((char *)a2 + v20, *(const void **)v19, *(_QWORD *)(v19 + 8));
      v21 = *(_QWORD *)(v19 + 8) + v20;
      v20 = v21 + 1;
      *((_BYTE *)a2 + v21) = 0;
      v19 += 24;
    }
    while (v19 != v18);
  }
  return result;
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeSectionContent(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  const void *v11;

  v5 = (_QWORD *)(a1 + 40);
  v6 = *(_QWORD **)(a1 + 48);
  if (v6 != (_QWORD *)(a1 + 40))
  {
    do
    {
      v8 = (uint64_t *)v6[13];
      v9 = (uint64_t *)v6[14];
      while (v8 != v9)
      {
        v10 = *v8;
        v11 = *(const void **)(*v8 + 104);
        if (v11)
        {
          if (a4 != *(_DWORD *)(v10 + 48))
          {
            do
            {
              *(_BYTE *)(a2 + a4++) = 0;
              v10 = *v8;
            }
            while (a4 != *(_DWORD *)(*v8 + 48));
            v11 = *(const void **)(v10 + 104);
          }
          memcpy((void *)(a2 + a4), v11, *(_QWORD *)(v10 + 112));
          a4 += *(_QWORD *)(*v8 + 112);
        }
        ++v8;
      }
      v6 = (_QWORD *)v6[1];
    }
    while (v6 != v5);
  }
  return a4;
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeRelocations(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v14;

  v5 = (_QWORD *)(a1 + 40);
  v6 = *(_QWORD **)(a1 + 48);
  if (v6 != (_QWORD *)(a1 + 40))
  {
    do
    {
      v8 = v6[13];
      v9 = v6[14];
      while (v8 != v9)
      {
        v10 = *(uint64_t **)(*(_QWORD *)v8 + 160);
        v11 = *(uint64_t **)(*(_QWORD *)v8 + 168);
        v12 = a4 & 7;
        if (v10 != v11 && v12 != 0)
        {
          bzero((void *)(a2 + a4), 8 - v12);
          a4 -= a4 | 0xFFFFFFFFFFFFFFF8;
          v10 = *(uint64_t **)(*(_QWORD *)v8 + 160);
          v11 = *(uint64_t **)(*(_QWORD *)v8 + 168);
        }
        while (v10 != v11)
        {
          v14 = *v10;
          v10 += 3;
          *(_QWORD *)(a2 + a4) = v14;
          a4 += 8;
        }
        v8 += 8;
      }
      v6 = (_QWORD *)v6[1];
    }
    while (v6 != v5);
  }
  return a4;
}

uint64_t llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::writeSymbols(_QWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  __int128 *v7;
  __int128 *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *i;
  uint64_t *j;
  uint64_t v13;
  __int128 v14;
  _QWORD *k;
  uint64_t v16;
  uint64_t v17;
  __int128 *v18;
  __int128 *v19;
  __int128 v20;

  v4 = a4;
  v7 = (__int128 *)a1[12];
  v8 = (__int128 *)a1[13];
  v9 = v8 - v7;
  v10 = a1 + 5;
  for (i = (_QWORD *)a1[6]; i != v10; i = (_QWORD *)i[1])
  {
    for (j = (uint64_t *)i[13]; j != (uint64_t *)i[14]; ++j)
    {
      v13 = *j;
      v9 += (uint64_t)(*(_QWORD *)(v13 + 144) - *(_QWORD *)(v13 + 136)) >> 4;
    }
  }
  if (v9)
  {
    if ((a4 & 0xF) != 0)
    {
      bzero((void *)(a2 + a4), 16 - (a4 & 0xF));
      v4 = (v4 | 0xF) + 1;
      v7 = (__int128 *)a1[12];
      v8 = (__int128 *)a1[13];
    }
    while (v7 != v8)
    {
      v14 = *v7++;
      *(_OWORD *)(a2 + v4) = v14;
      v4 += 16;
    }
    for (k = (_QWORD *)a1[6]; k != v10; k = (_QWORD *)k[1])
    {
      v16 = k[13];
      v17 = k[14];
      while (v16 != v17)
      {
        v18 = *(__int128 **)(*(_QWORD *)v16 + 136);
        v19 = *(__int128 **)(*(_QWORD *)v16 + 144);
        while (v18 != v19)
        {
          v20 = *v18++;
          *(_OWORD *)(a2 + v4) = v20;
          v4 += 16;
        }
        v16 += 8;
      }
    }
  }
  return v4;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0>(uint64_t *a1@<X0>, unint64_t *a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  char v19;
  const void **v20;
  const void **v21;
  uint64_t v22;
  const void **v23;
  const void **v24;
  const void *v25;
  const void **imp;
  uint64_t *v27;
  uint64_t *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;

  v4 = *a1;
  if (!llvm::jitlink::LinkGraph::findSectionByName(*(_QWORD *)(*a1 + 8), (uint64_t)"__jitlink_synth_debug_object", 28, a2))
  {
    v5 = *(_QWORD *)(v4 + 8);
    if (*(_DWORD *)(v5 + 192))
    {
      v6 = *(_QWORD **)(v5 + 184);
      v7 = *(unsigned int *)(v5 + 200);
      if ((_DWORD)v7)
      {
        v8 = 24 * v7;
        v9 = v6;
        while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v9 += 3;
          v8 -= 24;
          if (!v8)
            goto LABEL_2;
        }
      }
      else
      {
        v9 = v6;
      }
      v10 = &v6[3 * v7];
      if (v9 != v10)
      {
        v11 = &v33;
LABEL_12:
        v12 = v9[2];
        if (*(_QWORD *)(v12 + 8) < 8uLL || **(_QWORD **)v12 != 0x2C46524157445F5FLL)
          goto LABEL_38;
        v28 = v11;
        v29 = (char *)v11;
        v30 = (char *)v11;
        v31 = 8;
        v32 = 0;
        v13 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v12 + 56);
        v15 = *(_QWORD *)(v12 + 56) + 8 * *(unsigned int *)(v12 + 72);
        if ((_QWORD *)v15 != v13)
        {
          v16 = v13;
          v17 = v14;
          do
          {
            v18 = *v16;
            llvm::SmallPtrSetImplBase::insert_imp((llvm::SmallPtrSetImplBase *)&v29, *(const void **)(*v16 + 16));
            if (v19)
              *(_QWORD *)(v18 + 24) |= 0x1000000000000000uLL;
            while (++v16 != v17)
            {
              if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_22;
            }
            v16 = v17;
LABEL_22:
            ;
          }
          while (v16 != (_QWORD *)v15);
        }
        v20 = (const void **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v12 + 32);
        v22 = *(_QWORD *)(v12 + 32) + 8 * *(unsigned int *)(v12 + 48);
        if ((const void **)v22 != v20)
        {
          v23 = v20;
          v24 = v21;
          do
          {
            v25 = *v23;
            imp = llvm::SmallPtrSetImplBase::find_imp((llvm::SmallPtrSetImplBase *)&v29, *v23);
            if (v30 == v29)
              v27 = (uint64_t *)((char *)&v31 + 4);
            else
              v27 = &v31;
            if (imp == (const void **)&v30[8 * *(unsigned int *)v27])
              llvm::jitlink::LinkGraph::addAnonymousSymbol(*(_QWORD *)(v4 + 8), (uint64_t)v25, 0, 0, 0, 1);
            while (++v23 != v24)
            {
              if (((unint64_t)*v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
                goto LABEL_34;
            }
            v23 = v24;
LABEL_34:
            ;
          }
          while (v23 != (const void **)v22);
        }
        if (v30 != v29)
          free(v30);
        v11 = v28;
LABEL_38:
        while (1)
        {
          v9 += 3;
          if (v9 == v10)
            break;
          if (*v9 < 0xFFFFFFFFFFFFFFFELL)
          {
            if (v9 != v10)
              goto LABEL_12;
            break;
          }
        }
      }
    }
  }
LABEL_2:
  *a3 = 0;
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0>(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1>(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 16))(*a1);
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1>(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2>(_QWORD *a1)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 24))(*a1);
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::orc::GDBJITDebugInfoRegistrationPlugin::modifyPassConfigForMachO(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2>(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a2->n128_u64[0] = 0;
  a2->n128_u64[1] = 0;
  return result;
}

llvm::raw_ostream *llvm::orc::operator<<(llvm::raw_ostream *this, uint64_t a2)
{
  _BYTE *v4;
  size_t **v5;
  size_t **v6;
  uint64_t v7;
  size_t **v8;
  size_t **v9;
  char v10;
  _BYTE *v11;
  _BYTE *v12;
  size_t *v13;
  _BYTE *v14;
  _BYTE *v15;

  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 123);
  }
  else
  {
    *((_QWORD *)this + 4) = v4 + 1;
    *v4 = 123;
  }
  v5 = (size_t **)llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(a2);
  v7 = *(_QWORD *)a2 + 8 * *(unsigned int *)(a2 + 16);
  if ((size_t **)v7 != v5)
  {
    v8 = v5;
    v9 = v6;
    v10 = 0;
    do
    {
      if ((v10 & 1) != 0)
      {
        v11 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v11 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 44);
        }
        else
        {
          *((_QWORD *)this + 4) = v11 + 1;
          *v11 = 44;
        }
      }
      v12 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v12 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 32);
      }
      else
      {
        *((_QWORD *)this + 4) = v12 + 1;
        *v12 = 32;
      }
      v13 = *v8++;
      llvm::raw_ostream::operator<<(this, v13 + 2, *v13);
      while (v8 != v9)
      {
        if (((unint64_t)*v8 | 8) != 0xFFFFFFFFFFFFFFF8)
          goto LABEL_18;
        ++v8;
      }
      v8 = v9;
LABEL_18:
      v10 = 1;
    }
    while (v8 != (size_t **)v7);
  }
  v14 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v14 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 32);
  }
  else
  {
    *((_QWORD *)this + 4) = v14 + 1;
    *v14 = 32;
  }
  v15 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v15 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 125);
  }
  else
  {
    *((_QWORD *)this + 4) = v15 + 1;
    *v15 = 125;
  }
  return this;
}

llvm::raw_ostream *llvm::orc::operator<<(llvm::raw_ostream *this, size_t ***a2)
{
  _BYTE *v4;
  size_t **v5;
  size_t **v6;
  char v7;
  _BYTE *v8;
  _BYTE *v9;
  size_t *v10;
  _BYTE *v11;
  _BYTE *v12;

  v4 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v4 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 91);
  }
  else
  {
    *((_QWORD *)this + 4) = v4 + 1;
    *v4 = 91;
  }
  v6 = *a2;
  v5 = a2[1];
  if (v6 != v5)
  {
    v7 = 0;
    do
    {
      if ((v7 & 1) != 0)
      {
        v8 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v8 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 44);
        }
        else
        {
          *((_QWORD *)this + 4) = v8 + 1;
          *v8 = 44;
        }
      }
      v9 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v9 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 32);
      }
      else
      {
        *((_QWORD *)this + 4) = v9 + 1;
        *v9 = 32;
      }
      v10 = *v6++;
      llvm::raw_ostream::operator<<(this, v10 + 2, *v10);
      v7 = 1;
    }
    while (v6 != v5);
  }
  v11 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v11 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 32);
  }
  else
  {
    *((_QWORD *)this + 4) = v11 + 1;
    *v11 = 32;
  }
  v12 = (_BYTE *)*((_QWORD *)this + 4);
  if ((unint64_t)v12 >= *((_QWORD *)this + 3))
  {
    llvm::raw_ostream::write(this, 93);
  }
  else
  {
    *((_QWORD *)this + 4) = v12 + 1;
    *v12 = 93;
  }
  return this;
}

llvm::raw_ostream *llvm::orc::operator<<(llvm::raw_ostream *result, uint64_t a2)
{
  _BYTE *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _BYTE *v7;
  _BYTE *v8;
  uint64_t v9;

  v3 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v3 >= *((_QWORD *)result + 3))
  {
    result = llvm::raw_ostream::write(result, 123);
  }
  else
  {
    *((_QWORD *)result + 4) = v3 + 1;
    *v3 = 123;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    v4 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v4)
    {
      v5 = 24 * v4;
      v6 = *(_QWORD **)a2;
      while ((*v6 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5)
          goto LABEL_9;
      }
    }
    else
    {
      v6 = *(_QWORD **)a2;
    }
    v9 = *(_QWORD *)a2 + 24 * v4;
LABEL_17:
    if (v6 != (_QWORD *)v9)
    {
      while (1)
      {
        v6 += 3;
        if (v6 == (_QWORD *)v9)
          break;
        if ((*v6 | 8) != 0xFFFFFFFFFFFFFFF8)
          goto LABEL_17;
      }
    }
  }
LABEL_9:
  v7 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v7 >= *((_QWORD *)result + 3))
  {
    result = llvm::raw_ostream::write(result, 32);
  }
  else
  {
    *((_QWORD *)result + 4) = v7 + 1;
    *v7 = 32;
  }
  v8 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v8 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 125);
  *((_QWORD *)result + 4) = v8 + 1;
  *v8 = 125;
  return result;
}

{
  _BYTE *v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char v9;
  _BYTE *v10;
  _BYTE *v11;
  _BYTE *v12;
  _BYTE *v13;

  v3 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v3 >= *((_QWORD *)result + 3))
  {
    result = llvm::raw_ostream::write(result, 123);
  }
  else
  {
    *((_QWORD *)result + 4) = v3 + 1;
    *v3 = 123;
  }
  if (*(_DWORD *)(a2 + 8))
  {
    v4 = *(_QWORD **)a2;
    v5 = *(unsigned int *)(a2 + 16);
    if ((_DWORD)v5)
    {
      v6 = 32 * v5;
      v7 = *(_QWORD **)a2;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 4;
        v6 -= 32;
        if (!v6)
          goto LABEL_24;
      }
    }
    else
    {
      v7 = *(_QWORD **)a2;
    }
    v8 = &v4[4 * v5];
    if (v7 != v8)
    {
      v9 = 0;
LABEL_13:
      if ((v9 & 1) != 0)
      {
        v10 = (_BYTE *)*((_QWORD *)result + 4);
        if ((unint64_t)v10 >= *((_QWORD *)result + 3))
        {
          result = llvm::raw_ostream::write(result, 44);
        }
        else
        {
          *((_QWORD *)result + 4) = v10 + 1;
          *v10 = 44;
        }
      }
      v11 = (_BYTE *)*((_QWORD *)result + 4);
      if ((unint64_t)v11 >= *((_QWORD *)result + 3))
      {
        result = llvm::raw_ostream::write(result, 32);
      }
      else
      {
        *((_QWORD *)result + 4) = v11 + 1;
        *v11 = 32;
      }
      result = llvm::orc::operator<<(result, (uint64_t)v7);
      while (1)
      {
        v7 += 4;
        if (v7 == v8)
          break;
        if ((*v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v9 = 1;
          if (v7 != v8)
            goto LABEL_13;
          break;
        }
      }
    }
  }
LABEL_24:
  v12 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v12 >= *((_QWORD *)result + 3))
  {
    result = llvm::raw_ostream::write(result, 32);
  }
  else
  {
    *((_QWORD *)result + 4) = v12 + 1;
    *v12 = 32;
  }
  v13 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v13 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 125);
  *((_QWORD *)result + 4) = v13 + 1;
  *v13 = 125;
  return result;
}

llvm::raw_ostream *llvm::orc::operator<<(llvm::raw_ostream *a1, uint64_t a2)
{
  _BYTE *v3;
  int v4;
  const char *v5;
  size_t v6;
  llvm::raw_ostream *v7;
  _WORD *v8;
  llvm::raw_ostream *result;
  _BYTE *v10;

  v3 = (_BYTE *)*((_QWORD *)a1 + 4);
  if (*((_BYTE **)a1 + 3) == v3)
  {
    a1 = llvm::raw_ostream::write(a1, "(", 1uLL);
  }
  else
  {
    *v3 = 40;
    ++*((_QWORD *)a1 + 4);
  }
  v4 = *(char *)(*(_QWORD *)a2 + 31);
  if (v4 >= 0)
    v5 = (const char *)(*(_QWORD *)a2 + 8);
  else
    v5 = *(const char **)(*(_QWORD *)a2 + 8);
  if (v4 >= 0)
    v6 = *(unsigned __int8 *)(*(_QWORD *)a2 + 31);
  else
    v6 = *(_QWORD *)(*(_QWORD *)a2 + 16);
  v7 = llvm::raw_ostream::write(a1, v5, v6);
  v8 = (_WORD *)*((_QWORD *)v7 + 4);
  if (*((_QWORD *)v7 + 3) - (_QWORD)v8 > 1uLL)
  {
    *v8 = 8236;
    *((_QWORD *)v7 + 4) += 2;
  }
  else
  {
    v7 = llvm::raw_ostream::write(v7, ", ", 2uLL);
  }
  result = llvm::orc::operator<<(v7, a2 + 8);
  v10 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v10)
    return llvm::raw_ostream::write(result, ")", 1uLL);
  *v10 = 41;
  ++*((_QWORD *)result + 4);
  return result;
}

_QWORD *llvm::orc::EPCDynamicLibrarySearchGenerator::Load@<X0>(uint64_t a1@<X0>, __int128 *a2@<X2>, __int128 *a3@<X3>, uint64_t a4@<X8>)
{
  _QWORD *result;
  uint64_t v9;
  _QWORD *v10;
  char v11;
  _QWORD *v12;
  _QWORD *v13;
  char v14;
  __int128 v15[2];
  __int128 v16[2];
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  result = (*(_QWORD *(**)(_QWORD **__return_ptr))(**(_QWORD **)(a1 + 72) + 16))(&v13);
  if ((v14 & 1) != 0)
  {
    v12 = v13;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v12;
  }
  else
  {
    v9 = operator new();
    v10 = v13;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v16, a2);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v15, a3);
    *(_OWORD *)(v9 + 80) = 0u;
    *(_OWORD *)(v9 + 96) = 0u;
    *(_OWORD *)(v9 + 112) = 0u;
    *(_OWORD *)(v9 + 16) = 0u;
    *(_OWORD *)(v9 + 32) = 0u;
    *(_OWORD *)(v9 + 48) = 0u;
    *(_OWORD *)(v9 + 57) = 0u;
    *(_QWORD *)v9 = &off_251C14C60;
    *(_QWORD *)(v9 + 8) = 850045863;
    *(_QWORD *)(v9 + 128) = *(_QWORD *)(a1 + 72);
    *(_QWORD *)(v9 + 136) = v10;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v9 + 144, v16);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v9 + 176, v15);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v15);
    result = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v16);
    *(_BYTE *)(a4 + 8) &= ~1u;
    v11 = v14;
    *(_QWORD *)a4 = v9;
    if ((v11 & 1) != 0)
    {
      result = v13;
      v13 = 0;
      if (result)
        return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
  }
  return result;
}

void llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(_QWORD *a1@<X0>, unint64_t *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t **a5@<X5>, _QWORD *a6@<X8>)
{
  uint64_t *v7;
  uint64_t *v8;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  __int128 v27;
  __int128 v28;
  _QWORD v29[2];
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  _QWORD v36[3];
  void **v37;
  _OWORD *v38;
  __int128 v39;
  char *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (a3 == 1 || (v7 = *a5, v8 = a5[1], *a5 == v8))
  {
    *a6 = 0;
  }
  else
  {
    v31 = 0;
    v32 = 0;
    v12 = a1 + 18;
    v33 = 0;
    do
    {
      v13 = a1[21];
      if (v13 < 8)
        goto LABEL_8;
      v14 = v12;
      if ((v13 & 2) == 0)
        v14 = (_QWORD *)*v12;
      if ((*(unsigned int (**)(_QWORD *, uint64_t *))(v13 & 0xFFFFFFFFFFFFFFF8))(v14, v7))
      {
LABEL_8:
        v15 = *v7;
        v30 = v15;
        if ((unint64_t)(v15 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v16 = (unint64_t *)(v15 + 8);
          do
            v17 = __ldaxr(v16);
          while (__stlxr(v17 + 1, v16));
        }
        llvm::orc::SymbolLookupSet::add((uint64_t *)&v31, &v30, 1);
        if ((unint64_t)(v30 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v18 = (unint64_t *)(v30 + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
        }
      }
      v7 += 2;
    }
    while (v7 != v8);
    v20 = a1[16];
    v29[0] = a1[17];
    v29[1] = &v31;
    *(_QWORD *)&v26 = a1;
    *((_QWORD *)&v26 + 1) = a4;
    v21 = *a2;
    *a2 = 0;
    v27 = v21;
    v28 = 0uLL;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__init_with_size[abi:nn180100]<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*,std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>*>((char *)&v27 + 8, v31, v32, ((char *)v32 - (char *)v31) >> 4);
    v34 = v26;
    v24 = v28;
    v25 = v27;
    v27 = 0uLL;
    v28 = 0uLL;
    v22 = operator new(0x30uLL, (std::align_val_t)8uLL);
    v37 = (void **)v36;
    v38 = v22;
    v39 = xmmword_24AA2DB60;
    v35 = 0;
    v36[0] = 0;
    *v22 = v34;
    v22[1] = v25;
    v22[2] = v24;
    v36[1] = 0;
    v36[2] = 0;
    v40 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>>::CallbacksHolder<llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(llvm::orc::LookupState &,llvm::orc::LookupKind,llvm::orc::JITDylib &,llvm::orc::JITDylibLookupFlags,llvm::orc::SymbolLookupSet const&)::$_0,llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(llvm::orc::LookupState &,llvm::orc::LookupKind,llvm::orc::JITDylib &,llvm::orc::JITDylibLookupFlags,llvm::orc::SymbolLookupSet const&)::$_0,void>::Callbacks
        + 4;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v37);
    v23 = v35;
    v35 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    (*(void (**)(uint64_t, _QWORD *, uint64_t, _OWORD **))(*(_QWORD *)v20 + 24))(v20, v29, 1, &v38);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v38);
    *(_QWORD *)&v34 = (char *)&v27 + 8;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v34);
    if ((_QWORD)v27)
      (*(void (**)(_QWORD))(*(_QWORD *)v27 + 8))(v27);
    *a6 = 0;
    *(_QWORD *)&v34 = &v31;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v34);
  }
}

void llvm::orc::EPCDynamicLibrarySearchGenerator::~EPCDynamicLibrarySearchGenerator(llvm::orc::EPCDynamicLibrarySearchGenerator *this)
{
  _QWORD *v2;

  *(_QWORD *)this = &off_251C14C60;
  v2 = (_QWORD *)((char *)this + 144);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)this + 22);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v2);
  llvm::orc::DefinitionGenerator::~DefinitionGenerator(this);
}

{
  _QWORD *v2;

  *(_QWORD *)this = &off_251C14C60;
  v2 = (_QWORD *)((char *)this + 144);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)this + 22);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v2);
  llvm::orc::DefinitionGenerator::~DefinitionGenerator(this);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(llvm::orc::LookupState &,llvm::orc::LookupKind,llvm::orc::JITDylib &,llvm::orc::JITDylibLookupFlags,llvm::orc::SymbolLookupSet const&)::$_0>(llvm::orc::InProgressLookupState **a1, __int128 *a2)
{
  __int128 v3;
  llvm::orc::InProgressLookupState *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  _QWORD *v8;
  __int16 v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  llvm::orc::InProgressLookupState *v16;
  llvm::orc::InProgressLookupState *v17;
  llvm::orc::InProgressLookupState *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::orc::InProgressLookupState *v23;
  unsigned int *v24;
  _QWORD v25[2];
  int v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  llvm::orc::InProgressLookupState *v31;
  llvm::orc::InProgressLookupState *v32;
  _QWORD v33[2];
  llvm::orc::InProgressLookupState *v34;
  llvm::orc::InProgressLookupState *v35;
  int v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  if (!(*((_BYTE *)a2 + 24) & 1))
  {
    v3 = *a2;
    v38 = *a2;
    v39 = *((_QWORD *)a2 + 2);
    *((_QWORD *)a2 + 1) = 0;
    *((_QWORD *)a2 + 2) = 0;
    *(_QWORD *)a2 = 0;
    v4 = *a1;
    v32 = 0;
    memset(v33, 0, 12);
    v5 = (uint64_t *)a1[3];
    v6 = (uint64_t *)a1[4];
    if (v5 == v6)
      goto LABEL_14;
    v7 = *(_QWORD *)v3;
    do
    {
      if (*(_QWORD *)v7)
      {
        v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct((uint64_t *)&v32, v5);
        v9 = *(_WORD *)(v7 + 8);
        v8[1] = *(_QWORD *)v7;
        *((_WORD *)v8 + 8) = v9;
      }
      v7 += 16;
      v5 += 2;
    }
    while (v5 != v6);
    v10 = v33[0];
    if (!LODWORD(v33[0]))
    {
LABEL_14:
      v31 = 0;
      llvm::orc::LookupState::continueLookup(a1 + 2, &v31);
      v17 = v31;
      if (!v31)
      {
LABEL_16:
        llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)&v32);
        return llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v38);
      }
    }
    else
    {
      v11 = *((_QWORD *)v4 + 25);
      v12 = (uint64_t)a1[1];
      if (v11 < 8)
      {
        v19 = v32;
        v32 = 0;
        v20 = *(_QWORD *)((char *)v33 + 4);
        memset(v33, 0, 12);
        v21 = operator new();
        v35 = v19;
        v25[0] = 0;
        v36 = v10;
        v25[1] = 0;
        v37 = v20;
        v26 = 0;
        v27 = llvm::orc::AbsoluteSymbolsMaterializationUnit::AbsoluteSymbolsMaterializationUnit(v21, (uint64_t)&v35);
        llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)&v35);
        v24 = 0;
        llvm::orc::JITDylib::define<llvm::orc::BasicObjectLayerMaterializationUnit>(v12, (uint64_t)&v27, (uint64_t)&v24, (uint64_t *)&v35);
        if (v24)
          llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v24);
        v22 = v27;
        v27 = 0;
        if (v22)
          (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
        v15 = v25;
      }
      else
      {
        v13 = (_QWORD *)((char *)v4 + 176);
        v28 = (uint64_t)v32;
        v29 = v33[0];
        v14 = *(_QWORD *)((char *)v33 + 4);
        v32 = 0;
        memset(v33, 0, 12);
        v30 = v14;
        if ((v11 & 2) == 0)
          v13 = (_QWORD *)*v13;
        (*(void (**)(llvm::orc::InProgressLookupState **__return_ptr, _QWORD *, uint64_t, uint64_t *))(v11 & 0xFFFFFFFFFFFFFFF8))(&v35, v13, v12, &v28);
        v15 = &v28;
      }
      llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)v15);
      v23 = v35;
      v35 = 0;
      llvm::orc::LookupState::continueLookup(a1 + 2, &v23);
      if (v23)
        (*(void (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v23 + 8))(v23);
      v17 = v35;
      if (!v35)
        goto LABEL_16;
    }
    (*(void (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v17 + 8))(v17);
    goto LABEL_16;
  }
  v16 = *(llvm::orc::InProgressLookupState **)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)&v38 = 0;
  v34 = v16;
  llvm::orc::LookupState::continueLookup(a1 + 2, &v34);
  if (v34)
    (*(void (**)(llvm::orc::InProgressLookupState *))(*(_QWORD *)v34 + 8))(v34);
  return llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v38);
}

__n128 llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>>::MoveImpl<llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(llvm::orc::LookupState &,llvm::orc::LookupKind,llvm::orc::JITDylib &,llvm::orc::JITDylibLookupFlags,llvm::orc::SymbolLookupSet const&)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v2 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a1 + 16) = v2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  result = *(__n128 *)(a2 + 24);
  *(__n128 *)(a1 + 24) = result;
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>>::DestroyImpl<llvm::orc::EPCDynamicLibrarySearchGenerator::tryToGenerate(llvm::orc::LookupState &,llvm::orc::LookupKind,llvm::orc::JITDylib &,llvm::orc::JITDylibLookupFlags,llvm::orc::SymbolLookupSet const&)::$_0>(uint64_t a1)
{
  uint64_t result;
  void **v3;

  v3 = (void **)(a1 + 24);
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v3);
  result = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected(uint64_t a1)
{
  void *v2;
  void **v4;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v4 = (void **)a1;
    std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](&v4);
  }
  return a1;
}

void std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__clear[abi:nn180100]((uint64_t *)v2);
    operator delete(**a1);
  }
}

void std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__clear[abi:nn180100](uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  void *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = a1[1];
    do
    {
      v6 = *(void **)(v4 - 24);
      v4 -= 24;
      v5 = v6;
      if (v6)
      {
        *(_QWORD *)(v2 - 16) = v5;
        operator delete(v5);
      }
      v2 = v4;
    }
    while (v4 != v3);
  }
  a1[1] = v3;
}

void llvm::orc::EPCGenericDylibManager::CreateWithDefaultBootstrapSymbols(llvm::orc::EPCGenericDylibManager *this@<X0>, uint64_t a2@<X8>)
{
  size_t v5;
  size_t v6;
  size_t v7;
  llvm::orc::EPCGenericDylibManager *v8;
  llvm::orc::EPCGenericDylibManager *v9;
  __int128 v10;
  uint64_t v11;
  _QWORD v12[10];

  v12[9] = *MEMORY[0x24BDAC8D0];
  v10 = 0uLL;
  v5 = llvm::orc::rt::SimpleExecutorDylibManagerInstanceName;
  v11 = 0;
  v12[0] = &v10;
  v12[1] = llvm::orc::rt::SimpleExecutorDylibManagerInstanceName;
  if (llvm::orc::rt::SimpleExecutorDylibManagerInstanceName)
    v5 = strlen((const char *)llvm::orc::rt::SimpleExecutorDylibManagerInstanceName);
  v12[2] = v5;
  v12[3] = (char *)&v10 + 8;
  v6 = llvm::orc::rt::SimpleExecutorDylibManagerOpenWrapperName;
  v12[4] = llvm::orc::rt::SimpleExecutorDylibManagerOpenWrapperName;
  if (llvm::orc::rt::SimpleExecutorDylibManagerOpenWrapperName)
    v6 = strlen((const char *)llvm::orc::rt::SimpleExecutorDylibManagerOpenWrapperName);
  v12[5] = v6;
  v12[6] = &v11;
  v7 = llvm::orc::rt::SimpleExecutorDylibManagerLookupWrapperName;
  v12[7] = llvm::orc::rt::SimpleExecutorDylibManagerLookupWrapperName;
  if (llvm::orc::rt::SimpleExecutorDylibManagerLookupWrapperName)
    v7 = strlen((const char *)llvm::orc::rt::SimpleExecutorDylibManagerLookupWrapperName);
  v12[8] = v7;
  llvm::orc::ExecutorProcessControl::getBootstrapSymbols((uint64_t)this, (uint64_t)v12, 3, (uint64_t *)&v9);
  v8 = v9;
  if (v9)
  {
    *(_BYTE *)(a2 + 32) |= 1u;
    this = v8;
  }
  else
  {
    *(_OWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 24) = v11;
    *(_BYTE *)(a2 + 32) &= ~1u;
  }
  *(_QWORD *)a2 = this;
}

void llvm::orc::EPCGenericDylibManager::open(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[2];
  uint64_t v15[2];
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v14[0] = a2;
  v14[1] = a3;
  v13 = a4;
  v17 = 0;
  v16 = 0;
  v6 = a1[2];
  v15[0] = *a1;
  v15[1] = v6;
  llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,unsigned long long)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,unsigned long long),llvm::Expected<llvm::orc::ExecutorAddr> &,llvm::orc::ExecutorAddr&,llvm::StringRef &,unsigned long long &>(llvm::orc::ExecutorAddr,llvm::Expected<llvm::orc::ExecutorAddr> &,llvm::orc::ExecutorAddr&,llvm::StringRef &,unsigned long long &)::{lambda(char const*,unsigned long)#1},llvm::Expected<llvm::orc::ExecutorAddr>,llvm::orc::ExecutorAddr,llvm::StringRef,unsigned long long>(v15, &v16, a1 + 1, (uint64_t)v14, &v13, &v12);
  v7 = v12;
  if (v12)
  {
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v7;
    if ((v17 & 1) == 0)
      return;
    goto LABEL_8;
  }
  v8 = v17;
  v9 = v17 & 1;
  *(_BYTE *)(a5 + 8) = *(_BYTE *)(a5 + 8) & 0xFE | v17 & 1;
  if ((v8 & 1) != 0)
  {
    v10 = v16;
    v16 = 0;
  }
  else
  {
    v10 = v16;
  }
  *(_QWORD *)a5 = v10;
  if (v9)
  {
LABEL_8:
    v11 = v16;
    v16 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  }
}

_QWORD *llvm::orc::EPCGenericDylibManager::lookupAsync(uint64_t a1, uint64_t a2, size_t ***a3, __int128 *a4)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  size_t **v10;
  size_t **v11;
  uint64_t v12;
  size_t *v13;
  __int128 *v14;
  size_t v15;
  __int128 *v16;
  __int128 *v17;
  void *v18;
  void *v19;
  void **v20;
  llvm::formatv_object_base *v21;
  void *v22;
  uint64_t v24;
  __int128 *v25;
  size_t **v26;
  size_t **v27;
  unint64_t v28;
  size_t *v29;
  size_t v30;
  const void *v31;
  size_t v32;
  int v33;
  BOOL *v34;
  BOOL v35;
  __int128 *v36;
  void *v37[2];
  __int128 v38;
  uint64_t v39;
  __int128 v40[2];
  llvm::formatv_object_base *v41;
  __int128 v42;
  char *v43;
  uint64_t v44;
  __int128 v45[2];
  uint64_t v46;
  __int128 v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v7 = *(_QWORD **)a1;
  v8 = *(_QWORD *)(a1 + 24);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v38, a4);
  v9 = v7[3];
  v11 = *a3;
  v10 = a3[1];
  if (*a3 == v10)
  {
    v15 = 24;
    *((_QWORD *)&v49 + 1) = 24;
LABEL_7:
    v14 = (__int128 *)malloc_type_malloc(v15, 0xBCDE199DuLL);
    *(_QWORD *)&v49 = v14;
    v15 = *((_QWORD *)&v49 + 1);
    goto LABEL_8;
  }
  v12 = 8;
  do
  {
    v13 = *v11;
    v11 += 2;
    v12 += *v13 + 9;
  }
  while (v11 != v10);
  v14 = 0;
  v15 = v12 + 16;
  *(_QWORD *)&v49 = 0;
  *((_QWORD *)&v49 + 1) = v12 + 16;
  if ((unint64_t)(v12 + 16) >= 9)
    goto LABEL_7;
LABEL_8:
  if (v15 < 8)
    goto LABEL_16;
  v16 = &v49;
  v17 = v15 == 8 ? &v49 : v14;
  *(_QWORD *)v17 = *(_QWORD *)(a1 + 8);
  if ((v15 & 0xFFFFFFFFFFFFFFF8) == 8)
    goto LABEL_16;
  if (v15 != 8)
    v16 = v14;
  *((_QWORD *)v16 + 1) = a2;
  if ((v15 & 0xFFFFFFFFFFFFFFF8) == 0x10)
  {
LABEL_16:
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v37);
    goto LABEL_17;
  }
  if (v15 == 8)
    v25 = &v49;
  else
    v25 = v14;
  *((_QWORD *)v25 + 2) = ((char *)a3[1] - (char *)*a3) >> 4;
  v26 = *a3;
  v27 = a3[1];
  if (*a3 != v27)
  {
    v28 = v15 - 24;
    if (v15 == 8)
      v14 = &v49;
    v29 = (size_t *)v14 + 3;
    do
    {
      v30 = v28 - 8;
      if (v28 < 8)
        goto LABEL_16;
      v31 = *v26 + 2;
      v32 = **v26;
      v33 = *((_DWORD *)v26 + 2);
      *v29 = v32;
      v34 = (BOOL *)(v29 + 1);
      if (v32)
      {
        v35 = v30 >= v32;
        v30 -= v32;
        if (!v35)
          goto LABEL_16;
        memcpy(v34, v31, v32);
        v34 += v32;
      }
      if (!v30)
        goto LABEL_16;
      *v34 = v33 == 0;
      v29 = (size_t *)(v34 + 1);
      v28 = v30 - 1;
      v26 += 2;
    }
    while (v26 != v27);
  }
  *(_OWORD *)v37 = v49;
  v49 = 0uLL;
LABEL_17:
  if (*((_QWORD *)&v49 + 1) >= 9uLL)
  {
    v18 = (void *)v49;
LABEL_21:
    free(v18);
    goto LABEL_22;
  }
  if (!*((_QWORD *)&v49 + 1))
  {
    v18 = (void *)v49;
    if ((_QWORD)v49)
      goto LABEL_21;
  }
LABEL_22:
  if (v37[1] || (v41 = (llvm::formatv_object_base *)v37[0]) == 0)
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v40, &v38);
    v19 = v37[1];
    if (v37[1] <= (void *)8)
      v20 = v37;
    else
      v20 = (void **)v37[0];
    v44 = v9;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v45, v40);
    v46 = v44;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v47, v45);
    *(_QWORD *)&v49 = v46;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v49 + 8, &v47);
    v21 = (llvm::formatv_object_base *)operator new(0x28uLL, (std::align_val_t)8uLL);
    v41 = v21;
    v42 = xmmword_24AA2ACA0;
    *(_QWORD *)v21 = v49;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v21 + 8, (__int128 *)((char *)&v49 + 8));
    v43 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSD_IJhhEEEEEEEEEESE_SE_NSC_INSD_IJNSC_IcEEbEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISM_S8_ZNS2_22EPCGenericDylibManager11lookupAsyncENS2_12ExecutorAddrERKNS2_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS2_17ExecutorSymbolDefENSX_9allocatorISZ_EEEEEEEEEE3__0JSR_SR_SS_EEEvOT0_SR_OT1_DpRKT2_EUlOT_PKcmE_S16_JSR_SR_SS_EEEvS1G_S18_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1G_EUlS4_E_S1Q_vE9CallbacksE
        + 4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)&v49 + 1);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v47);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v45);
    (*(void (**)(_QWORD *, uint64_t, llvm::formatv_object_base **, void **, void *))(*v7 + 56))(v7, v8, &v41, v20, v19);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v41);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v40);
  }
  else
  {
    getErrorErrorCat();
    v44 = 3;
    *(_QWORD *)&v45[0] = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v41, &v44, (uint64_t *)v40);
    v46 = 0;
    v47 = 0uLL;
    v48 = 0;
    v24 = *(_QWORD *)&v40[0];
    if (*(_QWORD *)&v40[0])
    {
      *(_QWORD *)&v40[0] = 0;
      v51 = -1;
      *(_QWORD *)&v49 = v24;
    }
    else
    {
      v51 = 0;
      v50 = 0;
      v47 = 0uLL;
      v46 = 0;
      v49 = 0uLL;
    }
    if ((v39 & 2) != 0)
      v36 = &v38;
    else
      v36 = (__int128 *)v38;
    (*(void (**)(__int128 *, __int128 *))(v39 & 0xFFFFFFFFFFFFFFF8))(v36, &v49);
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v49);
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v46);
    if (*(_QWORD *)&v40[0])
      (*(void (**)(_QWORD))(**(_QWORD **)&v40[0] + 8))(*(_QWORD *)&v40[0]);
  }
  if (v37[1] >= (void *)9)
  {
    v22 = v37[0];
LABEL_31:
    free(v22);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v38);
  }
  if (!v37[1])
  {
    v22 = v37[0];
    if (v37[0])
      goto LABEL_31;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v38);
}

void llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,unsigned long long)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,unsigned long long),llvm::Expected<llvm::orc::ExecutorAddr> &,llvm::orc::ExecutorAddr&,llvm::StringRef &,unsigned long long &>(llvm::orc::ExecutorAddr,llvm::Expected<llvm::orc::ExecutorAddr> &,llvm::orc::ExecutorAddr&,llvm::StringRef &,unsigned long long &)::{lambda(char const*,unsigned long)#1},llvm::Expected<llvm::orc::ExecutorAddr>,llvm::orc::ExecutorAddr,llvm::StringRef,unsigned long long>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, _QWORD *a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  void *v15;
  const void *v16;
  size_t v17;
  _QWORD *v18;
  unint64_t v19;
  BOOL v20;
  void *v21;
  __int128 *v22;
  void *v23;
  void *v24;
  llvm::formatv_object_base *v25[2];
  llvm::formatv_object_base *v26;
  __int128 v27;
  void *v28;
  unint64_t v29;

  if ((a2[8] & 1) != 0)
    *(_QWORD *)a2 = 0;
  v12 = *(_QWORD *)(a4 + 8);
  v13 = v12 + 24;
  if ((unint64_t)(v12 + 24) < 9)
  {
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v28);
    goto LABEL_13;
  }
  v14 = malloc_type_malloc(v12 + 24, 0xBCDE199DuLL);
  v15 = v14;
  *v14 = *a3;
  if ((v12 & 0xFFFFFFFFFFFFFFF8) != 0xFFFFFFFFFFFFFFF0)
  {
    v16 = *(const void **)a4;
    v17 = *(_QWORD *)(a4 + 8);
    v14[1] = v17;
    v18 = v14 + 2;
    v19 = v12 + 8;
    if (v17)
    {
      v20 = v19 >= v17;
      v19 -= v17;
      if (!v20)
        goto LABEL_12;
      memcpy(v14 + 2, v16, v17);
      v18 = (_QWORD *)((char *)v18 + v17);
    }
    if (v19 >= 8)
    {
      *v18 = *a5;
      v28 = v15;
      v29 = v13;
      goto LABEL_13;
    }
  }
LABEL_12:
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v28);
  free(v15);
LABEL_13:
  if (v29)
  {
    if (v29 <= 8)
      v21 = &v28;
    else
      v21 = v28;
  }
  else
  {
    v25[0] = (llvm::formatv_object_base *)v28;
    if (v28)
    {
      getErrorErrorCat();
      *(_QWORD *)&v27 = 3;
      *((_QWORD *)&v27 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(v25, (uint64_t *)&v27, a6);
      goto LABEL_31;
    }
    v21 = &v28;
  }
  llvm::orc::ExecutorProcessControl::callWrapper(*a1, a1[1], (uint64_t)v21, v29, &v27);
  if (*((_QWORD *)&v27 + 1))
  {
    if (*((_QWORD *)&v27 + 1) <= 8uLL)
      v22 = &v27;
    else
      v22 = (__int128 *)v27;
    goto LABEL_21;
  }
  v26 = (llvm::formatv_object_base *)v27;
  if (!(_QWORD)v27)
  {
    v22 = &v27;
LABEL_21:
    llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::Expected<llvm::orc::ExecutorAddr>>::deserialize(a2, (uint64_t)v22, *((uint64_t *)&v27 + 1), a6);
    goto LABEL_26;
  }
  getErrorErrorCat();
  v25[0] = (llvm::formatv_object_base *)3;
  v25[1] = (llvm::formatv_object_base *)&getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v26, (uint64_t *)v25, a6);
LABEL_26:
  if (*((_QWORD *)&v27 + 1) >= 9uLL)
  {
    v23 = (void *)v27;
LABEL_30:
    free(v23);
    goto LABEL_31;
  }
  if (!*((_QWORD *)&v27 + 1))
  {
    v23 = (void *)v27;
    if ((_QWORD)v27)
      goto LABEL_30;
  }
LABEL_31:
  if (v29 >= 9)
  {
    v24 = v28;
LABEL_35:
    free(v24);
    return;
  }
  if (!v29)
  {
    v24 = v28;
    if (v28)
      goto LABEL_35;
  }
}

uint64_t llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected(uint64_t a1)
{
  char v2;
  void *v3;

  v2 = *(_BYTE *)(a1 + 24);
  v3 = *(void **)a1;
  if ((v2 & 1) != 0)
  {
    *(_QWORD *)a1 = 0;
    if (v3)
      (*(void (**)(void *))(*(_QWORD *)v3 + 8))(v3);
  }
  else if (v3)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSD_IJhhEEEEEEEEEESE_SE_NSC_INSD_IJNSC_IcEEbEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISM_S8_ZNS2_22EPCGenericDylibManager11lookupAsyncENS2_12ExecutorAddrERKNS2_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS2_17ExecutorSymbolDefENSX_9allocatorISZ_EEEEEEEEEE3__0JSR_SR_SS_EEEvOT0_SR_OT1_DpRKT2_EUlOT_PKcmE_S16_JSR_SR_SS_EEEvS1G_S18_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1G_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  __int128 v10[2];
  void *v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *a1;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, (__int128 *)(a1 + 1));
  v11[0] = v2;
  v11[1] = v3;
  v5 = operator new();
  *(_QWORD *)v5 = off_251C14C88;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v5 + 8, v10);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)v11;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(v5 + 56) = "WFR handler task";
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  v9 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v9);
  v6 = v9;
  v9 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11[1] >= (void *)9)
  {
    v7 = v11[0];
LABEL_7:
    free(v7);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
  }
  if (!v11[1])
  {
    v7 = v11[0];
    if (v11[0])
      goto LABEL_7;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSD_IJhhEEEEEEEEEESE_SE_NSC_INSD_IJNSC_IcEEbEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISM_S8_ZNS2_22EPCGenericDylibManager11lookupAsyncENS2_12ExecutorAddrERKNS2_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS2_17ExecutorSymbolDefENSX_9allocatorISZ_EEEEEEEEEE3__0JSR_SR_SS_EEEvOT0_SR_OT1_DpRKT2_EUlOT_PKcmE_S16_JSR_SR_SS_EEEvS1G_S18_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1G_EUlS4_E_EEvPvS1R_(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_11SPSSequenceINS3_8SPSTupleIJNS3_15SPSExecutorAddrENSD_IJhhEEEEEEEEEESE_SE_NSC_INSD_IJNSC_IcEEbEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISM_S8_ZNS2_22EPCGenericDylibManager11lookupAsyncENS2_12ExecutorAddrERKNS2_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS2_17ExecutorSymbolDefENSX_9allocatorISZ_EEEEEEEEEE3__0JSR_SR_SS_EEEvOT0_SR_OT1_DpRKT2_EUlOT_PKcmE_S16_JSR_SR_SS_EEEvS1G_S18_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1G_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS9_IJhhEEEEEEEEEESA_SA_NS8_INS9_IJNS8_IcEEbEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISI_S3_ZNS0_22EPCGenericDylibManager11lookupAsyncENS0_12ExecutorAddrERKNS0_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS0_17ExecutorSymbolDefENST_9allocatorISV_EEEEEEEEEE3__0JSN_SN_SO_EEEvOT0_SN_OT1_DpRKT2_EUlOT_PKcmE_S12_JSN_SN_SO_EEEvS1C_S14_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1C_ENUlS1K_E_clES1K_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C14C88;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 40);
    if (v3)
      goto LABEL_5;
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS9_IJhhEEEEEEEEEESA_SA_NS8_INS9_IJNS8_IcEEbEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISI_S3_ZNS0_22EPCGenericDylibManager11lookupAsyncENS0_12ExecutorAddrERKNS0_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS0_17ExecutorSymbolDefENST_9allocatorISV_EEEEEEEEEE3__0JSN_SN_SO_EEEvOT0_SN_OT1_DpRKT2_EUlOT_PKcmE_S12_JSN_SN_SO_EEEvS1C_S14_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1C_ENUlS1K_E_clES1K_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C14C88;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2 || (v3 = *(void **)(a1 + 40)) == 0)
    {
LABEL_8:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
      JUMPOUT(0x24BD1B3A4);
    }
  }
  else
  {
    v3 = *(void **)(a1 + 40);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS9_IJhhEEEEEEEEEESA_SA_NS8_INS9_IJNS8_IcEEbEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISI_S3_ZNS0_22EPCGenericDylibManager11lookupAsyncENS0_12ExecutorAddrERKNS0_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS0_17ExecutorSymbolDefENST_9allocatorISV_EEEEEEEEEE3__0JSN_SN_SO_EEEvOT0_SN_OT1_DpRKT2_EUlOT_PKcmE_S12_JSN_SN_SO_EEEvS1C_S14_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1C_ENUlS1K_E_clES1K_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_11SPSSequenceINS5_8SPSTupleIJNS5_15SPSExecutorAddrENS9_IJhhEEEEEEEEEESA_SA_NS8_INS9_IJNS8_IcEEbEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISI_S3_ZNS0_22EPCGenericDylibManager11lookupAsyncENS0_12ExecutorAddrERKNS0_15SymbolLookupSetENS_15unique_functionIFvNS_8ExpectedINSt3__16vectorINS0_17ExecutorSymbolDefENST_9allocatorISV_EEEEEEEEEE3__0JSN_SN_SO_EEEvOT0_SN_OT1_DpRKT2_EUlOT_PKcmE_S12_JSN_SN_SO_EEEvS1C_S14_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1C_ENUlS1K_E_clES1K_EUlvE_E3runEv(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void (*v16)(_QWORD *, uint64_t *);
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  void *v20;
  void *v21[2];
  uint64_t v22[2];
  uint64_t v23;
  llvm::formatv_object_base *v24;
  uint64_t v25;
  __int128 v26;
  char v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  uint64_t v31;
  __int128 v32;
  char v33;
  uint64_t v34;
  __int128 v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)(a1 + 8);
  *(_OWORD *)v21 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v28 = 0;
  v29 = 0uLL;
  v30 = 0;
  if (!v21[1])
  {
    v24 = (llvm::formatv_object_base *)v21[0];
    if (!v21[0])
    {
      v3 = (unsigned __int8 *)v21;
      goto LABEL_5;
    }
    getErrorErrorCat();
    v22[0] = 3;
    v22[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v24, v22, &v23);
    v27 = v30 & 1;
    if ((v30 & 1) != 0)
    {
      v6 = v28;
      v28 = 0;
      v9 = v23;
      if (!v23)
      {
        v33 = 1;
        goto LABEL_30;
      }
      v25 = 0;
    }
    else
    {
      v6 = v28;
      v7 = v29;
      v25 = v28;
      v8 = *((_QWORD *)&v29 + 1);
      v26 = v29;
      v28 = 0;
      v29 = 0uLL;
      v9 = v23;
      if (!v23)
      {
        v33 = 0;
        *(_QWORD *)&v32 = v7;
        *((_QWORD *)&v32 + 1) = v8;
        v26 = 0uLL;
LABEL_30:
        v25 = 0;
        v31 = v6;
        v19 = *(_QWORD *)(a1 + 32);
        v16 = *(void (**)(_QWORD *, uint64_t *))(v19 & 0xFFFFFFFFFFFFFFF8);
        if ((v19 & 2) == 0)
          v2 = (_QWORD *)*v2;
        v17 = &v31;
        v18 = &v31;
        goto LABEL_33;
      }
    }
    v23 = 0;
    v36 = -1;
    v34 = v9;
    v15 = *(_QWORD *)(a1 + 32);
    v16 = *(void (**)(_QWORD *, uint64_t *))(v15 & 0xFFFFFFFFFFFFFFF8);
    if ((v15 & 2) == 0)
      v2 = (_QWORD *)*v2;
    v17 = &v34;
    v18 = &v34;
LABEL_33:
    v16(v2, v18);
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)v17);
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v25);
    v13 = v23;
    if (!v23)
      goto LABEL_35;
    goto LABEL_34;
  }
  if (v21[1] <= (void *)8)
    v3 = (unsigned __int8 *)v21;
  else
    v3 = (unsigned __int8 *)v21[0];
LABEL_5:
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSTuple<unsigned char,unsigned char>>>>,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::deserialize(&v25, (uint64_t)&v28, v3, (unint64_t)v21[1]);
  v4 = v25;
  if (v25)
  {
    v25 = 0;
    v33 = v30 & 1;
    if ((v30 & 1) != 0)
    {
      v5 = 0;
    }
    else
    {
      v5 = v28;
      v32 = v29;
      v29 = 0uLL;
    }
    v28 = 0;
    v31 = v5;
    v36 = -1;
    v34 = v4;
    v12 = *(_QWORD *)(a1 + 32);
    if ((v12 & 2) == 0)
      v2 = (_QWORD *)*v2;
    (*(void (**)(_QWORD *, uint64_t *))(v12 & 0xFFFFFFFFFFFFFFF8))(v2, &v34);
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v34);
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v31);
    v13 = v25;
    if (!v25)
      goto LABEL_35;
LABEL_34:
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    goto LABEL_35;
  }
  v33 = v30 & 1;
  v10 = v28;
  if ((v30 & 1) != 0)
  {
    v28 = 0;
  }
  else
  {
    v11 = v29;
    v28 = 0;
    v29 = 0uLL;
    v35 = v11;
    v32 = 0uLL;
  }
  v31 = 0;
  v36 = v30 & 1;
  v34 = v10;
  v14 = *(_QWORD *)(a1 + 32);
  if ((v14 & 2) == 0)
    v2 = (_QWORD *)*v2;
  (*(void (**)(_QWORD *, uint64_t *))(v14 & 0xFFFFFFFFFFFFFFF8))(v2, &v34);
  llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v34);
  llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v31);
LABEL_35:
  llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v28);
  if (v21[1] >= (void *)9)
  {
    v20 = v21[0];
LABEL_39:
    free(v20);
    return;
  }
  if (!v21[1])
  {
    v20 = v21[0];
    if (v21[0])
      goto LABEL_39;
  }
}

void llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSTuple<unsigned char,unsigned char>>>>,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::deserialize(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, unint64_t a4)
{
  unint64_t v4;
  int v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  int64_t v17;
  unint64_t v18;
  int64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  _WORD *v23;
  _WORD *v24;
  char *v25;
  uint64_t v26;
  __int16 v27;
  void *v28;
  char *v29;
  void *v30;
  char v31;
  uint64_t v32;
  void *v33;
  void *__p[2];
  void *v35;
  char v36;
  void *v37[2];
  void *v38[4];
  uint64_t *v39;
  unint64_t v40;
  __int128 v41;
  void *v42;
  char v43;
  __int16 v44;
  uint64_t v45;

  v45 = *MEMORY[0x24BDAC8D0];
  v39 = (uint64_t *)a3;
  v40 = a4;
  v36 = 0;
  *(_OWORD *)v37 = 0u;
  memset(v38, 0, sizeof(v38));
  if (!a4)
    goto LABEL_30;
  v7 = *a3;
  v39 = (uint64_t *)(a3 + 1);
  v40 = a4 - 1;
  v36 = v7;
  if (!v7)
  {
    if (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::deserialize((uint64_t)&v39, (std::string *)&v38[1]))
    {
      goto LABEL_28;
    }
LABEL_30:
    getErrorErrorCat();
    *(_QWORD *)&v41 = 3;
    *((_QWORD *)&v41 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Error deserializing return value from blob in call", (uint64_t *)&v41, a1);
    goto LABEL_41;
  }
  if (a4 - 1 < 8)
    goto LABEL_30;
  v8 = *(_QWORD *)(a3 + 1);
  v39 = (uint64_t *)(a3 + 9);
  v40 = a4 - 9;
  std::vector<llvm::orc::ExecutorSymbolDef>::reserve((char **)v37, v8);
  if (v8)
  {
    v9 = 0;
    do
    {
      v10 = v40;
      if (v40 < 8)
        goto LABEL_30;
      v11 = v39;
      v12 = *v39++;
      v40 -= 8;
      if (v10 == 8)
        goto LABEL_30;
      v13 = *((unsigned __int8 *)v11 + 8);
      v39 = (uint64_t *)((char *)v11 + 9);
      v40 = v10 - 9;
      if (v10 == 9)
        goto LABEL_30;
      v14 = *((unsigned __int8 *)v11 + 9);
      v39 = (uint64_t *)((char *)v11 + 10);
      v40 = v10 - 10;
      v4 = v4 & 0xFFFFFFFFFFFF0000 | (v13 << 8) | v14;
      v15 = v37[1];
      if (v37[1] >= v38[0])
      {
        v17 = ((char *)v37[1] - (char *)v37[0]) >> 4;
        v18 = v17 + 1;
        if ((unint64_t)(v17 + 1) >> 60)
          abort();
        v19 = (char *)v38[0] - (char *)v37[0];
        if (((char *)v38[0] - (char *)v37[0]) >> 3 > v18)
          v18 = v19 >> 3;
        if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF0)
          v20 = 0xFFFFFFFFFFFFFFFLL;
        else
          v20 = v18;
        if (v20)
          v21 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)v38, v20);
        else
          v21 = 0;
        v22 = &v21[16 * v17];
        *(_QWORD *)v22 = v12;
        *((_QWORD *)v22 + 1) = v4;
        v24 = v37[0];
        v23 = v37[1];
        v25 = v22;
        if (v37[1] != v37[0])
        {
          do
          {
            v26 = *((_QWORD *)v23 - 2);
            v23 -= 8;
            v27 = v23[4];
            *((_QWORD *)v25 - 2) = v26;
            v25 -= 16;
            *((_WORD *)v25 + 4) = v27;
          }
          while (v23 != v24);
          v23 = v37[0];
        }
        v16 = v22 + 16;
        v37[0] = v25;
        v37[1] = v22 + 16;
        v38[0] = &v21[16 * v20];
        if (v23)
          operator delete(v23);
      }
      else
      {
        *(_QWORD *)v37[1] = v12;
        v15[1] = v4;
        v16 = v15 + 2;
      }
      v37[1] = v16;
    }
    while (++v9 != v8);
  }
LABEL_28:
  v29 = (char *)v37[0];
  v28 = v37[1];
  v33 = v37[0];
  v30 = v38[0];
  v37[1] = 0;
  memset(v38, 0, sizeof(v38));
  v37[0] = 0;
  *(_OWORD *)__p = *(_OWORD *)&v38[1];
  v35 = v38[3];
  if (v36)
  {
    v43 &= ~1u;
    *((_QWORD *)&v41 + 1) = v28;
    v42 = v30;
    v33 = 0;
  }
  else
  {
    getErrorErrorCat();
    v29 = (char *)operator new();
    v44 = 260;
    *(_QWORD *)&v41 = __p;
    *(_QWORD *)v29 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)&v41, (std::string *)(v29 + 8));
    *((_QWORD *)v29 + 4) = 3;
    *((_QWORD *)v29 + 5) = &getErrorErrorCat(void)::ErrorErrorCat;
    v29[48] = 1;
    v43 |= 1u;
  }
  *(_QWORD *)&v41 = v29;
  if (&v41 != (__int128 *)a2)
  {
    llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected(a2);
    v31 = v43;
    *(_BYTE *)(a2 + 24) = *(_BYTE *)(a2 + 24) & 0xFE | v43 & 1;
    if ((v31 & 1) != 0)
    {
      v32 = v41;
      *(_QWORD *)&v41 = 0;
      *(_QWORD *)a2 = v32;
    }
    else
    {
      *(_OWORD *)a2 = v41;
      *(_QWORD *)(a2 + 16) = v42;
      v42 = 0;
      v41 = 0uLL;
    }
  }
  llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v41);
  if (SHIBYTE(v35) < 0)
    operator delete(__p[0]);
  if (v33)
    operator delete(v33);
  *a1 = 0;
LABEL_41:
  if (SHIBYTE(v38[3]) < 0)
    operator delete(v38[1]);
  if (v37[0])
  {
    v37[1] = v37[0];
    operator delete(v37[0]);
  }
}

void std::vector<llvm::orc::ExecutorSymbolDef>::reserve(char **a1, unint64_t a2)
{
  uint64_t v3;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  __int16 v14;

  v4 = a1[2];
  v3 = (uint64_t)(a1 + 2);
  if (a2 > (v4 - *a1) >> 4)
  {
    if (a2 >> 60)
      abort();
    v5 = a1[1] - *a1;
    v6 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v3, a2);
    v7 = &v6[v5];
    v9 = &v6[16 * v8];
    v11 = *a1;
    v10 = a1[1];
    v12 = v7;
    if (v10 != *a1)
    {
      do
      {
        v13 = *((_QWORD *)v10 - 2);
        v10 -= 16;
        v14 = *((_WORD *)v10 + 4);
        *((_QWORD *)v12 - 2) = v13;
        v12 -= 16;
        *((_WORD *)v12 + 4) = v14;
      }
      while (v10 != v11);
      v10 = *a1;
    }
    *a1 = v12;
    a1[1] = v7;
    a1[2] = v9;
    if (v10)
      operator delete(v10);
  }
}

uint64_t llvm::orc::EPCGenericJITLinkMemoryManager::allocate(_QWORD *a1, uint64_t a2, llvm::jitlink::LinkGraph *a3, __int128 *a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20[2];
  uint64_t v21;
  char v22;
  _QWORD v23[2];
  char v24;
  uint64_t v25;
  _DWORD v26[108];
  __int128 v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31[2];
  _QWORD *v32;
  __int128 v33;
  char *v34;
  _BYTE v35[24];
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39[2];
  __int128 v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45[2];
  __int128 v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  __int128 v51[2];
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  llvm::jitlink::BasicLayout::BasicLayout((llvm::jitlink::BasicLayout *)&v25, a3);
  llvm::jitlink::BasicLayout::getContiguousPageBasedLayoutSizes((llvm::jitlink::BasicLayout *)&v25, *(unsigned int *)(a1[1] + 88), (uint64_t)v23);
  if ((v24 & 1) != 0)
  {
    v22 = -1;
    v21 = v23[0];
    v11 = *((_QWORD *)a4 + 3);
    if ((v11 & 2) == 0)
      a4 = *(__int128 **)a4;
    (*(void (**)(__int128 *, uint64_t *))(v11 & 0xFFFFFFFFFFFFFFF8))(a4, &v21);
    v12 = v21;
    v21 = 0;
    if (v12)
      (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  }
  else
  {
    v6 = a1[1];
    v14 = a1[3];
    *(_QWORD *)&v16 = a1;
    *((_QWORD *)&v16 + 1) = v25;
    v17 = &v19;
    v18 = 0x400000000;
    if (v26[2])
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v17, (uint64_t)v26);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v20, a4);
    v7 = v23[1] + v23[0];
    v15 = v6;
    v8 = *(_QWORD *)(v6 + 24);
    v9 = malloc_type_malloc(0x10uLL, 0xBCDE199DuLL);
    *v9 = a1[2];
    v9[1] = v7;
    v27 = v16;
    v28 = &v30;
    v29 = 0x400000000;
    if ((_DWORD)v18)
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v28, (uint64_t)&v17);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v31, v20);
    *(_OWORD *)&v35[8] = v27;
    *(_QWORD *)v35 = v8;
    v36 = &v38;
    v37 = 0x400000000;
    if ((_DWORD)v29)
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v36, (uint64_t)&v28);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v39, v31);
    v40 = *(_OWORD *)v35;
    v41 = *(_QWORD *)&v35[16];
    v42 = &v44;
    v43 = 0x400000000;
    if ((_DWORD)v37)
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v42, (uint64_t)&v36);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v45, v39);
    v46 = v40;
    v47 = v41;
    v48 = &v50;
    v49 = 0x400000000;
    if ((_DWORD)v43)
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v48, (uint64_t)&v42);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v51, v45);
    v10 = operator new(0x1E8uLL, (std::align_val_t)8uLL);
    v32 = v10;
    v33 = xmmword_24AA2DBA0;
    *(_OWORD *)v10 = v46;
    v10[2] = v47;
    v10[3] = v10 + 5;
    v10[4] = 0x400000000;
    if ((_DWORD)v49)
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)(v10 + 3), (uint64_t)&v48);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v10 + 57), v51);
    v34 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZNS2_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSJ_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSJ_20JITLinkMemoryManager13InFlightAllocENSR_14default_deleteISU_EEEEEEEEEE3__0JNS2_12ExecutorAddrEyEEEvOT0_S12_OT1_DpRKT2_EUlOT_PKcmE_S11_JS12_yEEEvS1C_S14_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1C_EUlS4_E_S1M_vE9CallbacksE
        + 4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v51);
    llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v48);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v45);
    llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v42);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v39);
    llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v36);
    (*(void (**)(uint64_t, uint64_t, _QWORD **, _QWORD *, uint64_t))(*(_QWORD *)v15 + 56))(v15, v14, &v32, v9, 16);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v32);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v31);
    llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v28);
    free(v9);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v20);
    llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v17);
  }
  return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)v26);
}

void *llvm::orc::EPCGenericJITLinkMemoryManager::deallocate(_QWORD *a1, void **a2, __int128 *a3)
{
  _QWORD *v5;
  uint64_t v6;
  llvm::formatv_object_base *v7;
  _BYTE *v8;
  unint64_t v9;
  size_t v10;
  _QWORD *v11;
  char *v12;
  char *v13;
  BOOL v14;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  BOOL v19;
  void *v20;
  void **v21;
  llvm::formatv_object_base *v22;
  void *v23;
  void *result;
  _BYTE *v25;
  __int128 *v26;
  void *v27[2];
  __int128 v28;
  uint64_t v29;
  __int128 v30[2];
  llvm::formatv_object_base *v31;
  __int128 v32;
  char *v33;
  llvm::formatv_object_base *v34;
  __int128 v35[2];
  llvm::formatv_object_base *v36;
  __int128 v37[2];
  _OWORD v38[2];
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)a1[1];
  v6 = a1[5];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v28, a3);
  v7 = (llvm::formatv_object_base *)v5[3];
  v8 = a2[1];
  v9 = ((v8 - (_BYTE *)*a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 24;
  if (*a2 == v8)
    v10 = 16;
  else
    v10 = ((v8 - (_BYTE *)*a2 - 8) & 0xFFFFFFFFFFFFFFF8) + 24;
  *(_QWORD *)&v38[0] = 0;
  *((_QWORD *)&v38[0] + 1) = v10;
  if (v10 < 9)
  {
    if (!v9)
    {
      llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v27);
      goto LABEL_24;
    }
    v11 = v38;
  }
  else
  {
    v11 = malloc_type_malloc(v10, 0xBCDE199DuLL);
    *(_QWORD *)&v38[0] = v11;
    v9 = v10;
  }
  *v11 = a1[2];
  if ((v9 & 0xFFFFFFFFFFFFFFF8) != 8)
  {
    v11[1] = ((_BYTE *)a2[1] - (_BYTE *)*a2) >> 3;
    v13 = (char *)*a2;
    v12 = (char *)a2[1];
    v14 = *a2 == v12;
    if (v9 - 16 >= 8 && v13 != v12)
    {
      v16 = v11 + 2;
      v17 = v9 - 24;
      v18 = v13 + 8;
      do
      {
        *v16++ = *((_QWORD *)v18 - 1);
        v14 = v18 == v12;
        if (v18 == v12)
          break;
        v18 += 8;
        v19 = v17 > 7;
        v17 -= 8;
      }
      while (v19);
    }
    if (v14)
    {
      *(_OWORD *)v27 = v38[0];
      goto LABEL_24;
    }
    v10 = *((_QWORD *)&v38[0] + 1);
  }
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v27);
  if (v10 > 8 || !v10 && *(_QWORD *)&v38[0])
    free(*(void **)&v38[0]);
LABEL_24:
  if (v27[1] || (v34 = (llvm::formatv_object_base *)v27[0]) == 0)
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v30, &v28);
    v20 = v27[1];
    if (v27[1] <= (void *)8)
      v21 = v27;
    else
      v21 = (void **)v27[0];
    v34 = v7;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v35, v30);
    v36 = v34;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v37, v35);
    *(_QWORD *)&v38[0] = v36;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v38 + 8, v37);
    v22 = (llvm::formatv_object_base *)operator new(0x28uLL, (std::align_val_t)8uLL);
    v31 = v22;
    v32 = xmmword_24AA2ACA0;
    *(_QWORD *)v22 = *(_QWORD *)&v38[0];
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v22 + 8, (_OWORD *)((char *)v38 + 8));
    v33 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSK_9allocatorISO_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrESR_EEEvOT0_SX_OT1_DpRKT2_EUlOT_PKcmE_SW_JSX_SR_EEEvS17_SZ_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES17_EUlS4_E_S1H_vE9CallbacksE
        + 4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)v38 + 1);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v37);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v35);
    (*(void (**)(_QWORD *, uint64_t, llvm::formatv_object_base **, void **, void *))(*v5 + 56))(v5, v6, &v31, v21, v20);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v31);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v30);
  }
  else
  {
    getErrorErrorCat();
    *(_QWORD *)&v38[0] = 3;
    *((_QWORD *)&v38[0] + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v34, (uint64_t *)v38, (uint64_t *)&v31);
    if (v31)
    {
      v36 = v31;
      v31 = 0;
    }
    else
    {
      v36 = 0;
    }
    if ((v29 & 2) != 0)
      v26 = &v28;
    else
      v26 = (__int128 *)v28;
    (*(void (**)(__int128 *, llvm::formatv_object_base **))(v29 & 0xFFFFFFFFFFFFFFF8))(v26, &v36);
    if (v36)
      (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v36 + 8))(v36);
    if (v31)
      (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v31 + 8))(v31);
  }
  if (v27[1] < (void *)9)
  {
    if (v27[1])
      goto LABEL_34;
    v23 = v27[0];
    if (!v27[0])
      goto LABEL_34;
  }
  else
  {
    v23 = v27[0];
  }
  free(v23);
LABEL_34:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v28);
  result = *a2;
  v25 = a2[1];
  if (*a2 != v25)
    return memset(result, 255, (v25 - (_BYTE *)result) & 0xFFFFFFFFFFFFFFF8);
  return result;
}

void llvm::orc::EPCGenericJITLinkMemoryManager::~EPCGenericJITLinkMemoryManager(llvm::orc::EPCGenericJITLinkMemoryManager *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::orc::EPCGenericJITLinkMemoryManager::allocate(llvm::jitlink::JITLinkDylib const*,llvm::jitlink::LinkGraph &,llvm::unique_function<void ()(llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)>)::$_0::operator()(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  unsigned __int8 *v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  __int128 v29;
  char *v30;
  int v31;
  char *v32;
  char *v33;
  char v34;
  __int128 v35;
  char *v36;
  _BOOL4 v38;
  unint64_t v39;
  __int128 v40;
  char *v41;
  unint64_t v42;
  char *v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  void *v47;
  _QWORD *v48;
  void *v49;
  void *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  BOOL v56;
  _QWORD *v57;
  uint64_t v58;
  uint64_t v59;
  void *v60;
  _QWORD v61[3];
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  char v68;
  uint64_t v69;
  char v70;
  void *v71;
  uint64_t v72;
  _BYTE v73[160];
  void *v74;
  __int128 v75;
  __int128 v76;
  uint64_t v77;

  v77 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  if (*a2)
  {
    if ((*(_BYTE *)(a3 + 8) & 1) != 0)
    {
      *(_QWORD *)a3 = 0;
      v4 = *a2;
    }
    v5 = a1 + 56;
    *a2 = 0;
    v70 = -1;
    v69 = v4;
    v6 = a1[59];
    if ((v6 & 2) == 0)
      v5 = (_QWORD *)*v5;
    (*(void (**)(_QWORD *, uint64_t *))(v6 & 0xFFFFFFFFFFFFFFF8))(v5, &v69);
    result = v69;
    v69 = 0;
    if (!result)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  if ((*(_BYTE *)(a3 + 8) & 1) != 0)
  {
    v51 = a1 + 56;
    v52 = *(_QWORD *)a3;
    *(_QWORD *)a3 = 0;
    v68 = -1;
    v67 = v52;
    v53 = a1[59];
    if ((v53 & 2) == 0)
      v51 = (_QWORD *)*v51;
    (*(void (**)(_QWORD *, uint64_t *))(v53 & 0xFFFFFFFFFFFFFFF8))(v51, &v67);
    result = v67;
    v67 = 0;
    if (result)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  else
  {
    v58 = *(_QWORD *)a3;
    v8 = *a1;
    v63 = a1[1];
    v64 = &v66;
    v65 = 0x400000000;
    if (*((_DWORD *)a1 + 6))
      llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v64, (uint64_t)(a1 + 2));
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v61, (__int128 *)a1 + 28);
    v71 = v73;
    v72 = 0x400000000;
    if ((_DWORD)v65)
    {
      v9 = v64;
      v10 = &v64[13 * v65];
      v11 = v58;
      v59 = v8;
      while (1)
      {
        v9[4] = v11;
        v12 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v63, v9[2], 0);
        v9[5] = v12;
        v13 = v9[2];
        v14 = v9[3];
        v15 = *(unsigned int *)(*(_QWORD *)(v8 + 8) + 88);
        v16 = *(unsigned __int8 *)v9;
        v17 = v72;
        if (!(_DWORD)v72)
          break;
        v18 = v9[2];
        v19 = v9[3];
        v20 = (char *)v71;
        do
        {
          v21 = v17 >> 1;
          v22 = &v20[40 * (v17 >> 1)];
          v24 = *v22;
          v23 = (unsigned __int8 *)(v22 + 40);
          v17 += ~(v17 >> 1);
          if (v24 < v16)
            v20 = (char *)v23;
          else
            v17 = v21;
        }
        while (v17);
        if (v20 == (char *)v71 + 40 * v72)
          break;
        if (*v20 != v16)
        {
          v75 = 0u;
          v76 = 0u;
          v25 = v20 - (_BYTE *)v71;
          LOBYTE(v74) = v16;
          v26 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,true>>((uint64_t)&v71, (unint64_t)&v74);
          v27 = (char *)v71;
          v20 = (char *)v71 + v25;
          v28 = (char *)v71 + 40 * v72;
          *((_QWORD *)v28 + 4) = *((_QWORD *)v28 - 1);
          v29 = *(_OWORD *)(v28 - 24);
          *(_OWORD *)v28 = *(_OWORD *)(v28 - 40);
          *((_OWORD *)v28 + 1) = v29;
          v30 = (char *)v71;
          v31 = v72;
          v32 = (char *)v71 + 40 * v72 - 40;
          if (v32 != v20)
          {
            v33 = (char *)v71 + 40 * v72 - 40;
            do
            {
              v34 = *(v33 - 40);
              v33 -= 40;
              *v32 = v34;
              v35 = *((_OWORD *)v32 - 1);
              *(_OWORD *)(v32 + 8) = *((_OWORD *)v32 - 2);
              *(_OWORD *)(v32 + 24) = v35;
              v32 = v33;
            }
            while (v33 != v20);
            v31 = v72;
            v30 = (char *)v71;
          }
          LODWORD(v72) = v31 + 1;
          v36 = &v30[40 * (v31 + 1)];
          v38 = v26 >= (unint64_t)v20 && v26 < (unint64_t)v36;
          v39 = v26 + 40 * v38;
          *v20 = *(_BYTE *)v39;
          v40 = *(_OWORD *)(v39 + 8);
          v41 = &v27[8 * (v25 >> 3)];
          *(_OWORD *)(v41 + 24) = *(_OWORD *)(v39 + 24);
          *(_OWORD *)(v41 + 8) = v40;
          v8 = v59;
          goto LABEL_33;
        }
LABEL_34:
        v11 += (v13 + v14 + v15 - 1) / v15 * v15;
        *((_QWORD *)v20 + 3) = v18;
        *((_QWORD *)v20 + 4) = v19;
        v46 = v9[4];
        *((_QWORD *)v20 + 1) = v12;
        *((_QWORD *)v20 + 2) = v46;
        v9 += 13;
        if (v9 == v10)
          goto LABEL_35;
      }
      v75 = 0u;
      v76 = 0u;
      LOBYTE(v74) = v16;
      v42 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,true>>((uint64_t)&v71, (unint64_t)&v74);
      v43 = (char *)v71 + 40 * v72;
      v44 = *(_QWORD *)(v42 + 32);
      v45 = *(_OWORD *)(v42 + 16);
      *(_OWORD *)v43 = *(_OWORD *)v42;
      *((_OWORD *)v43 + 1) = v45;
      *((_QWORD *)v43 + 4) = v44;
      LODWORD(v72) = v72 + 1;
      v20 = (char *)v71 + 40 * v72 - 40;
LABEL_33:
      v18 = v9[2];
      v19 = v9[3];
      v12 = v9[5];
      goto LABEL_34;
    }
LABEL_35:
    llvm::jitlink::BasicLayout::apply(&v63, &v60);
    v47 = v60;
    if (v60)
    {
      v60 = 0;
      LOBYTE(v75) = -1;
      v74 = v47;
      if ((v62 & 2) != 0)
        v48 = v61;
      else
        v48 = (_QWORD *)v61[0];
      (*(void (**)(_QWORD *, void **))(v62 & 0xFFFFFFFFFFFFFFF8))(v48, &v74);
      v49 = v74;
      v74 = 0;
      if (v49)
        (*(void (**)(void *))(*(_QWORD *)v49 + 8))(v49);
      v50 = v60;
    }
    else
    {
      v54 = v63;
      v55 = (_QWORD *)operator new();
      v74 = (char *)&v75 + 8;
      *(_QWORD *)&v75 = 0x400000000;
      if ((_DWORD)v72)
      {
        llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>>::operator=((uint64_t)&v74, (char **)&v71);
        v56 = (_DWORD)v75 == 0;
      }
      else
      {
        v56 = 1;
      }
      *v55 = &off_251C14D90;
      v55[1] = v8;
      v55[2] = v54;
      v55[3] = v58;
      v55[4] = v55 + 6;
      v55[5] = 0x400000000;
      if (!v56)
        llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>>::operator=((uint64_t)(v55 + 4), (char **)&v74);
      if (v74 != (char *)&v75 + 8)
        free(v74);
      LOBYTE(v75) = 0;
      v74 = v55;
      if ((v62 & 2) != 0)
        v57 = v61;
      else
        v57 = (_QWORD *)v61[0];
      (*(void (**)(_QWORD *, void **))(v62 & 0xFFFFFFFFFFFFFFF8))(v57, &v74);
      v50 = v74;
      v74 = 0;
    }
    if (v50)
      (*(void (**)(void *))(*(_QWORD *)v50 + 8))(v50);
    if (v71 != v73)
      free(v71);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v61);
    return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v64);
  }
  return result;
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZNS2_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSJ_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSJ_20JITLinkMemoryManager13InFlightAllocENSR_14default_deleteISU_EEEEEEEEEE3__0JNS2_12ExecutorAddrEyEEEvOT0_S12_OT1_DpRKT2_EUlOT_PKcmE_S11_JS12_yEEEvS1C_S14_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1C_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  __int128 v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15[2];
  __int128 v16;
  uint64_t v17;

  v17 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  v4 = a2[1];
  *a2 = 0;
  a2[1] = 0;
  v5 = *a1;
  v11 = *(_OWORD *)(a1 + 1);
  v12 = &v14;
  v13 = 0x400000000;
  if (*((_DWORD *)a1 + 8))
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v12, (uint64_t)(a1 + 3));
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v15, (__int128 *)(a1 + 57));
  *(_QWORD *)&v16 = v3;
  *((_QWORD *)&v16 + 1) = v4;
  v6 = operator new();
  *(_QWORD *)v6 = off_251C14D00;
  *(_OWORD *)(v6 + 8) = v11;
  *(_QWORD *)(v6 + 24) = v6 + 40;
  *(_QWORD *)(v6 + 32) = 0x400000000;
  if ((_DWORD)v13)
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=(v6 + 24, (uint64_t)&v12);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v6 + 456, v15);
  *(_OWORD *)(v6 + 488) = v16;
  v16 = 0uLL;
  *(_QWORD *)(v6 + 504) = "WFR handler task";
  *(_QWORD *)(v6 + 512) = 0;
  *(_QWORD *)(v6 + 528) = 0;
  *(_QWORD *)(v6 + 520) = 0;
  v10 = v6;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v10);
  v7 = v10;
  v10 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (*((_QWORD *)&v16 + 1) >= 9uLL)
  {
    v8 = (void *)v16;
LABEL_11:
    free(v8);
    goto LABEL_12;
  }
  if (!*((_QWORD *)&v16 + 1))
  {
    v8 = (void *)v16;
    if ((_QWORD)v16)
      goto LABEL_11;
  }
LABEL_12:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v15);
  return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v12);
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZNS2_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSJ_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSJ_20JITLinkMemoryManager13InFlightAllocENSR_14default_deleteISU_EEEEEEEEEE3__0JNS2_12ExecutorAddrEyEEEvOT0_S12_OT1_DpRKT2_EUlOT_PKcmE_S11_JS12_yEEEvS1C_S14_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1C_EUlS4_E_EEvPvS1N_(_QWORD *a1, uint64_t a2)
{
  __int128 v4;
  uint64_t v5;

  *a1 = *(_QWORD *)a2;
  v4 = *(_OWORD *)(a2 + 8);
  a1[3] = a1 + 5;
  v5 = (uint64_t)(a1 + 3);
  *(_OWORD *)(v5 - 16) = v4;
  *(_QWORD *)(v5 + 8) = 0x400000000;
  if (*(_DWORD *)(a2 + 32))
    llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=(v5, a2 + 24);
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 57), (__int128 *)(a2 + 456));
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_11SPSExpectedINS3_15SPSExecutorAddrEEESC_yEE9callAsyncIZNS7_19callSPSWrapperAsyncISE_S8_ZNS2_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSJ_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSJ_20JITLinkMemoryManager13InFlightAllocENSR_14default_deleteISU_EEEEEEEEEE3__0JNS2_12ExecutorAddrEyEEEvOT0_S12_OT1_DpRKT2_EUlOT_PKcmE_S11_JS12_yEEEvS1C_S14_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1C_EUlS4_E_EEvPv(uint64_t a1)
{
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 456));
  return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector(a1 + 24);
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZNS0_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSF_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSF_20JITLinkMemoryManager13InFlightAllocENSN_14default_deleteISQ_EEEEEEEEEE3__0JNS0_12ExecutorAddrEyEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_yEEEvS18_S10_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES18_ENUlS1G_E_clES1G_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C14D00;
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  v2 = *(_QWORD *)(a1 + 496);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 488);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 488);
    if (v3)
      goto LABEL_5;
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 456));
  llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector(a1 + 24);
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZNS0_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSF_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSF_20JITLinkMemoryManager13InFlightAllocENSN_14default_deleteISQ_EEEEEEEEEE3__0JNS0_12ExecutorAddrEyEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_yEEEvS18_S10_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES18_ENUlS1G_E_clES1G_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C14D00;
  if (*(char *)(a1 + 535) < 0)
    operator delete(*(void **)(a1 + 512));
  v2 = *(_QWORD *)(a1 + 496);
  if (v2 < 9)
  {
    if (v2 || (v3 = *(void **)(a1 + 488)) == 0)
    {
LABEL_8:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 456));
      llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector(a1 + 24);
      JUMPOUT(0x24BD1B3A4);
    }
  }
  else
  {
    v3 = *(void **)(a1 + 488);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZNS0_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSF_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSF_20JITLinkMemoryManager13InFlightAllocENSN_14default_deleteISQ_EEEEEEEEEE3__0JNS0_12ExecutorAddrEyEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_yEEEvS18_S10_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES18_ENUlS1G_E_clES1G_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 504));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_11SPSExpectedINS5_15SPSExecutorAddrEEES8_yEE9callAsyncIZNS2_19callSPSWrapperAsyncISA_S3_ZNS0_30EPCGenericJITLinkMemoryManager8allocateEPKNS_7jitlink12JITLinkDylibERNSF_9LinkGraphENS_15unique_functionIFvNS_8ExpectedINSt3__110unique_ptrINSF_20JITLinkMemoryManager13InFlightAllocENSN_14default_deleteISQ_EEEEEEEEEE3__0JNS0_12ExecutorAddrEyEEEvOT0_SY_OT1_DpRKT2_EUlOT_PKcmE_SX_JSY_yEEEvS18_S10_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES18_ENUlS1G_E_clES1G_EUlvE_E3runEv(uint64_t a1)
{
  uint64_t *v1;
  void **v2;
  uint64_t v3;
  llvm::formatv_object_base *v4;
  uint64_t v5;
  llvm::formatv_object_base *v6;
  uint64_t v7;
  void *v8;
  void *v9[2];
  llvm::formatv_object_base *v10;
  llvm::formatv_object_base *v11;
  llvm::formatv_object_base *v12;
  char v13;
  uint64_t v14;
  _UNKNOWN **v15;
  uint64_t v16;
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  v1 = (uint64_t *)(a1 + 8);
  *(_OWORD *)v9 = *(_OWORD *)(a1 + 488);
  *(_QWORD *)(a1 + 496) = 0;
  *(_QWORD *)(a1 + 488) = 0;
  v17 = 0;
  v16 = 0;
  if (v9[1])
  {
    if (v9[1] <= (void *)8)
      v2 = v9;
    else
      v2 = (void **)v9[0];
  }
  else
  {
    v11 = (llvm::formatv_object_base *)v9[0];
    if (v9[0])
    {
      getErrorErrorCat();
      v14 = 3;
      v15 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v11, &v14, (uint64_t *)&v10);
      v13 = 0;
      v12 = 0;
      llvm::orc::EPCGenericJITLinkMemoryManager::allocate(llvm::jitlink::JITLinkDylib const*,llvm::jitlink::LinkGraph &,llvm::unique_function<void ()(llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)>)::$_0::operator()(v1, (uint64_t *)&v10, (uint64_t)&v12);
      if ((v13 & 1) != 0 && v12)
        (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v12 + 8))(v12);
      v4 = v10;
      if (v10)
        goto LABEL_27;
      goto LABEL_28;
    }
    v2 = v9;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::Expected<llvm::orc::ExecutorAddr>>::deserialize(&v16, (uint64_t)v2, (uint64_t)v9[1], (uint64_t *)&v12);
  if (v12)
  {
    v11 = v12;
    v12 = 0;
    LOBYTE(v15) = v17 & 1;
    v3 = v16;
    if ((v17 & 1) != 0)
      v16 = 0;
    v14 = v3;
    llvm::orc::EPCGenericJITLinkMemoryManager::allocate(llvm::jitlink::JITLinkDylib const*,llvm::jitlink::LinkGraph &,llvm::unique_function<void ()(llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)>)::$_0::operator()(v1, (uint64_t *)&v11, (uint64_t)&v14);
    if ((v15 & 1) != 0 && v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
    v6 = v11;
    if (!v11)
      goto LABEL_26;
LABEL_25:
    (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v6 + 8))(v6);
    goto LABEL_26;
  }
  v12 = 0;
  LOBYTE(v15) = v17 & 1;
  v5 = v16;
  if ((v17 & 1) != 0)
    v16 = 0;
  v14 = v5;
  llvm::orc::EPCGenericJITLinkMemoryManager::allocate(llvm::jitlink::JITLinkDylib const*,llvm::jitlink::LinkGraph &,llvm::unique_function<void ()(llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)>)::$_0::operator()(v1, (uint64_t *)&v12, (uint64_t)&v14);
  if ((v15 & 1) != 0)
  {
    v6 = (llvm::formatv_object_base *)v14;
    if (v14)
      goto LABEL_25;
  }
LABEL_26:
  v4 = v12;
  if (v12)
LABEL_27:
    (*(void (**)(llvm::formatv_object_base *))(*(_QWORD *)v4 + 8))(v4);
LABEL_28:
  if ((v17 & 1) != 0)
  {
    v7 = v16;
    v16 = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
  if (v9[1] >= (void *)9)
  {
    v8 = v9[0];
LABEL_35:
    free(v8);
    return;
  }
  if (!v9[1])
  {
    v8 = v9[0];
    if (v9[0])
      goto LABEL_35;
  }
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSK_9allocatorISO_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrESR_EEEvOT0_SX_OT1_DpRKT2_EUlOT_PKcmE_SW_JSX_SR_EEEvS17_SZ_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES17_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  __int128 v10[2];
  void *v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *a1;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, (__int128 *)(a1 + 1));
  v11[0] = v2;
  v11[1] = v3;
  v5 = operator new();
  *(_QWORD *)v5 = off_251C14D48;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v5 + 8, v10);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)v11;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(v5 + 56) = "WFR handler task";
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  v9 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v9);
  v6 = v9;
  v9 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11[1] >= (void *)9)
  {
    v7 = v11[0];
LABEL_7:
    free(v7);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
  }
  if (!v11[1])
  {
    v7 = v11[0];
    if (v11[0])
      goto LABEL_7;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSK_9allocatorISO_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrESR_EEEvOT0_SX_OT1_DpRKT2_EUlOT_PKcmE_SW_JSX_SR_EEEvS17_SZ_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES17_EUlS4_E_EEvPvS1I_(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSK_9allocatorISO_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS2_12ExecutorAddrESR_EEEvOT0_SX_OT1_DpRKT2_EUlOT_PKcmE_SW_JSX_SR_EEEvS17_SZ_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES17_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSG_9allocatorISK_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrESN_EEEvOT0_ST_OT1_DpRKT2_EUlOT_PKcmE_SS_JST_SN_EEEvS13_SV_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES13_ENUlS1B_E_clES1B_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C14D48;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 40);
    if (v3)
      goto LABEL_5;
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSG_9allocatorISK_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrESN_EEEvOT0_ST_OT1_DpRKT2_EUlOT_PKcmE_SS_JST_SN_EEEvS13_SV_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES13_ENUlS1B_E_clES1B_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C14D48;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2 || (v3 = *(void **)(a1 + 40)) == 0)
    {
LABEL_8:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
      JUMPOUT(0x24BD1B3A4);
    }
  }
  else
  {
    v3 = *(void **)(a1 + 40);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSG_9allocatorISK_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrESN_EEEvOT0_ST_OT1_DpRKT2_EUlOT_PKcmE_SS_JST_SN_EEEvS13_SV_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES13_ENUlS1B_E_clES1B_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager10deallocateENSt3__16vectorINS_7jitlink20JITLinkMemoryManager14FinalizedAllocENSG_9allocatorISK_EEEENS_15unique_functionIFvNS_5ErrorEEEEE3__0JNS0_12ExecutorAddrESN_EEEvOT0_ST_OT1_DpRKT2_EUlOT_PKcmE_SS_JST_SN_EEEvS13_SV_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES13_ENUlS1B_E_clES1B_EUlvE_E3runEv(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12[2];
  uint64_t v13;
  llvm::formatv_object_base *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (_QWORD *)(a1 + 8);
  *(_OWORD *)v11 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v15 = 0;
  if (v11[1])
  {
    if (v11[1] <= (void *)8)
      v3 = v11;
    else
      v3 = (void **)v11[0];
  }
  else
  {
    v14 = (llvm::formatv_object_base *)v11[0];
    if (v11[0])
    {
      getErrorErrorCat();
      v12[0] = 3;
      v12[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v14, v12, &v13);
      v15 = 0;
      if (v13)
      {
        v16 = v13;
        v13 = 0;
      }
      else
      {
        v16 = 0;
      }
      v10 = *(_QWORD *)(a1 + 32);
      if ((v10 & 2) == 0)
        v2 = (_QWORD *)*v2;
      (*(void (**)(_QWORD *, uint64_t *))(v10 & 0xFFFFFFFFFFFFFFF8))(v2, &v16);
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v6 = v13;
      if (v13)
        goto LABEL_11;
      goto LABEL_12;
    }
    v3 = v11;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(&v15, (uint64_t)v3, (uint64_t)v11[1], &v16);
  v4 = v16;
  if (v16)
  {
    v15 = 0;
    v16 = 0;
    v12[0] = v4;
    v5 = *(_QWORD *)(a1 + 32);
    if ((v5 & 2) == 0)
      v2 = (_QWORD *)*v2;
    (*(void (**)(_QWORD *, uint64_t *))(v5 & 0xFFFFFFFFFFFFFFF8))(v2, v12);
    if (v12[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v12[0] + 8))(v12[0]);
    v6 = v16;
    if (v16)
LABEL_11:
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    v8 = v15;
    v15 = 0;
    v12[0] = v8;
    v9 = *(_QWORD *)(a1 + 32);
    if ((v9 & 2) == 0)
      v2 = (_QWORD *)*v2;
    (*(void (**)(_QWORD *, uint64_t *))(v9 & 0xFFFFFFFFFFFFFFF8))(v2, v12);
    v6 = v12[0];
    if (v12[0])
      goto LABEL_11;
  }
LABEL_12:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v11[1] >= (void *)9)
  {
    v7 = v11[0];
LABEL_18:
    free(v7);
    return;
  }
  if (!v11[1])
  {
    v7 = v11[0];
    if (v11[0])
      goto LABEL_18;
  }
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>,true>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 40 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 40);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 40);
    }
  }
  return v2;
}

uint64_t llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::SegInfo>>::operator=(uint64_t a1, char **a2)
{
  char *v4;
  char **v5;
  char *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  char *v10;
  char *v11;
  __int128 v12;
  char *v13;
  char *v14;
  __int128 v15;
  uint64_t v16;

  if ((char **)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if (*a2 != (char *)(a2 + 2))
    {
      v6 = *(char **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (char *)v5;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_21;
    }
    v7 = a2 + 1;
    v8 = *((unsigned int *)a2 + 2);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
      {
        v10 = *(char **)a1;
        v11 = &v4[40 * v8];
        do
        {
          *v10 = *v4;
          v12 = *(_OWORD *)(v4 + 8);
          *(_OWORD *)(v10 + 24) = *(_OWORD *)(v4 + 24);
          *(_OWORD *)(v10 + 8) = v12;
          v4 += 40;
          v10 += 40;
        }
        while (v4 != v11);
      }
      goto LABEL_20;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        v13 = &v4[40 * v9];
        v14 = *(char **)a1;
        do
        {
          *v14 = *v4;
          v15 = *(_OWORD *)(v4 + 8);
          *(_OWORD *)(v14 + 24) = *(_OWORD *)(v4 + 24);
          *(_OWORD *)(v14 + 8) = v15;
          v4 += 40;
          v14 += 40;
        }
        while (v4 != v13);
LABEL_18:
        v16 = *v7;
        if (v9 != v16)
          memcpy((void *)(*(_QWORD *)a1 + 40 * v9), &(*a2)[40 * v9], &(*a2)[40 * v16] - &(*a2)[40 * v9]);
LABEL_20:
        *(_DWORD *)(a1 + 8) = v8;
LABEL_21:
        *v7 = 0;
        return a1;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 40);
    }
    v9 = 0;
    goto LABEL_18;
  }
  return a1;
}

void llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::~InFlightAlloc(llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc *this)
{
  char *v2;

  *(_QWORD *)this = &off_251C14D90;
  v2 = (char *)*((_QWORD *)this + 4);
  if (v2 != (char *)this + 48)
    free(v2);
}

{
  char *v2;

  *(_QWORD *)this = &off_251C14D90;
  v2 = (char *)*((_QWORD *)this + 4);
  if (v2 != (char *)this + 48)
    free(v2);
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::abandon(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  void *v9;
  _QWORD *v10;
  void *v11;
  void *v13;
  unint64_t v14;
  __int128 v15[2];
  __int128 v16[2];
  _QWORD *v17;
  __int128 v18;
  char *v19;
  uint64_t v20;
  __int128 v21[2];
  uint64_t v22;
  __int128 v23[2];
  uint64_t v24;
  __int128 v25[2];
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD **)(v3 + 8);
  v5 = *(_QWORD *)(v3 + 40);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v15, a2);
  v6 = *(_QWORD *)(a1 + 8);
  v7 = v4[3];
  v8 = malloc_type_malloc(0x18uLL, 0xBCDE199DuLL);
  *v8 = *(_QWORD *)(v6 + 16);
  v8[1] = 1;
  v8[2] = *(_QWORD *)(a1 + 24);
  v13 = v8;
  v14 = 24;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v16, v15);
  v9 = v13;
  v20 = v7;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v21, v16);
  v22 = v20;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v23, v21);
  v24 = v22;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v25, v23);
  v10 = operator new(0x28uLL, (std::align_val_t)8uLL);
  v17 = v10;
  v18 = xmmword_24AA2ACA0;
  *v10 = v24;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v10 + 1), v25);
  v19 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSM_SM_E_JNS2_12ExecutorAddrENS_8ArrayRefISQ_EEEEEvOT0_SQ_OT1_DpRKT2_EUlOT_PKcmE_SP_JSQ_SS_EEEvS12_SU_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES12_EUlS4_E_S1C_vE9CallbacksE
      + 4;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v25);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v23);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v21);
  (*(void (**)(_QWORD *, uint64_t, _QWORD **, void *, uint64_t))(*v4 + 56))(v4, v5, &v17, v9, 24);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v17);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v16);
  if (v14 >= 9)
  {
    v11 = v13;
LABEL_5:
    free(v11);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v15);
  }
  if (!v14)
  {
    v11 = v13;
    if (v13)
      goto LABEL_5;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v15);
}

void llvm::orc::EPCGenericJITLinkMemoryManager::InFlightAlloc::finalize(uint64_t a1, __int128 *a2)
{
  _QWORD *v2;
  __int128 v3;
  unsigned int v4;
  int *v5;
  int *v6;
  int *v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int v11;
  BOOL v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  char *v25;
  char *v26;
  char *v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::formatv_object_base *v40;
  unint64_t v41;
  size_t v42;
  _QWORD *v43;
  unint64_t v44;
  char *v45;
  _BYTE *v46;
  char v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  void *v52;
  void **v53;
  _QWORD *v54;
  void *v55;
  uint64_t v56;
  __int128 *v57;
  uint64_t v58;
  __int128 *v59;
  uint64_t v61;
  unint64_t v62;
  void *__p[2];
  _OWORD v64[2];
  void *v65[2];
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69[2];
  uint64_t v70;
  _QWORD *v71;
  __int128 v72;
  char *v73;
  llvm::formatv_object_base *v74;
  __int128 v75[2];
  uint64_t v76;
  uint64_t v77;
  __int128 v78[2];
  uint64_t v79;
  _OWORD v80[2];
  uint64_t v81;
  uint64_t v82;

  v2 = (_QWORD *)a1;
  v82 = *MEMORY[0x24BDAC8D0];
  v3 = 0uLL;
  memset(v64, 0, sizeof(v64));
  *(_OWORD *)__p = 0u;
  v4 = *(_DWORD *)(a1 + 40);
  if (v4)
  {
    v59 = a2;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    v8 = *(_QWORD *)(a1 + 32);
    v9 = v8 + 40 * v4;
    v10 = 0;
    v61 = v9;
    do
    {
      v11 = *(_BYTE *)v8 & 7;
      v12 = (*(_BYTE *)v8 & 0xF8) == 8;
      v13 = *(_QWORD *)(v8 + 24);
      v14 = *(unsigned int *)(*(_QWORD *)(v2[1] + 8) + 88);
      v15 = (v13 + *(_QWORD *)(v8 + 32) + v14 - 1) / v14 * v14;
      v16 = *(_QWORD *)(v8 + 8);
      v17 = *(_QWORD *)(v8 + 16);
      if (v7 >= v6)
      {
        v19 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v7 - (char *)v5) >> 3);
        v20 = v19 + 1;
        if (v19 + 1 > 0x666666666666666)
          abort();
        v21 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v6 - (char *)v5) >> 3);
        if (2 * v21 > v20)
          v20 = 2 * v21;
        if (v21 >= 0x333333333333333)
          v22 = 0x666666666666666;
        else
          v22 = v20;
        if (v22)
        {
          if (v22 > 0x666666666666666)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v23 = (v13 + *(_QWORD *)(v8 + 32) + v14 - 1) / v14 * v14;
          v24 = *(_BYTE *)v8 & 7;
          v62 = v22;
          v25 = (char *)operator new(40 * v22);
          v22 = v62;
          v11 = v24;
          v15 = v23;
        }
        else
        {
          v25 = 0;
        }
        v26 = &v25[40 * v19];
        *(_DWORD *)v26 = v11;
        v26[4] = v12;
        *((_QWORD *)v26 + 1) = v17;
        *((_QWORD *)v26 + 2) = v15;
        *((_QWORD *)v26 + 3) = v16;
        *((_QWORD *)v26 + 4) = v13;
        if (v7 == v10)
        {
          v10 = (int *)&v25[40 * v19];
          v2 = (_QWORD *)a1;
        }
        else
        {
          v27 = &v25[40 * v19];
          v2 = (_QWORD *)a1;
          do
          {
            v28 = *(_OWORD *)(v7 - 10);
            v29 = *(_OWORD *)(v7 - 6);
            *((_QWORD *)v27 - 1) = *((_QWORD *)v7 - 1);
            *(_OWORD *)(v27 - 24) = v29;
            *(_OWORD *)(v27 - 40) = v28;
            v27 -= 40;
            v7 -= 10;
          }
          while (v7 != v10);
          v7 = v10;
          v10 = (int *)v27;
        }
        v6 = (int *)&v25[40 * v22];
        v18 = (int *)(v26 + 40);
        if (v7)
          operator delete(v7);
        v5 = v10;
        v9 = v61;
      }
      else
      {
        *v7 = v11;
        *((_BYTE *)v7 + 4) = v12;
        *((_QWORD *)v7 + 1) = v17;
        *((_QWORD *)v7 + 2) = v15;
        v18 = v7 + 10;
        *((_QWORD *)v7 + 3) = v16;
        *((_QWORD *)v7 + 4) = v13;
      }
      v8 += 40;
      v7 = v18;
    }
    while (v8 != v9);
    __p[0] = v10;
    __p[1] = v18;
    v3 = *(_OWORD *)((char *)v64 + 8);
    v30 = *((_QWORD *)&v64[1] + 1);
    a2 = v59;
  }
  else
  {
    v30 = 0;
  }
  v31 = v2[2];
  *(_OWORD *)((char *)v64 + 8) = *(_OWORD *)(v31 + 256);
  *(_OWORD *)(v31 + 256) = v3;
  *((_QWORD *)&v64[1] + 1) = *(_QWORD *)(v31 + 272);
  *(_QWORD *)(v31 + 272) = v30;
  v32 = v2[1];
  v33 = *(_QWORD **)(v32 + 8);
  v34 = *(_QWORD *)(v32 + 32);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v66, a2);
  v68 = v2[3];
  v35 = __p[0];
  v36 = *((_QWORD *)&v64[0] + 1);
  v37 = 8;
  while (v35 != __p[1])
  {
    v37 += v35[4] + 25;
    v35 += 5;
  }
  v38 = v2[1];
  v39 = 8;
  while (v36 != *(_QWORD *)&v64[1])
  {
    v39 += *(_QWORD *)(v36 + 16) + *(_QWORD *)(v36 + 72) + 32;
    v36 += 112;
  }
  v40 = (llvm::formatv_object_base *)v33[3];
  v41 = v39 + v37;
  v42 = v39 + v37 + 8;
  *(_QWORD *)&v80[0] = 0;
  *((_QWORD *)&v80[0] + 1) = v42;
  if (v42 != 8 && (unint64_t)(v39 + v37) < 0xFFFFFFFFFFFFFFF8)
  {
    v43 = malloc_type_malloc(v42, 0xBCDE199DuLL);
    *(_QWORD *)&v80[0] = v43;
    *v43 = *(_QWORD *)(v38 + 16);
    v77 = (uint64_t)(v43 + 1);
    *(_QWORD *)&v78[0] = v41;
    v44 = v41 - 8;
    if (v41 >= 8)
    {
      v45 = (char *)__p[0];
      v43[1] = 0xCCCCCCCCCCCCCCCDLL * (((char *)__p[1] - (char *)__p[0]) >> 3);
      v46 = v43 + 2;
      v77 = (uint64_t)(v43 + 2);
      *(_QWORD *)&v78[0] = v41 - 8;
      while (v45 != __p[1])
      {
        if (!v44)
          goto LABEL_53;
        v47 = v45[4] ? *v45 & 7 | 8 : *v45 & 7;
        *v46 = v47;
        v48 = v77;
        v49 = *(_QWORD *)&v78[0];
        ++v77;
        --*(_QWORD *)&v78[0];
        if ((unint64_t)(v49 - 1) < 8)
          goto LABEL_53;
        *(_QWORD *)(v48 + 1) = *((_QWORD *)v45 + 1);
        v77 = v48 + 9;
        *(_QWORD *)&v78[0] = v49 - 9;
        if ((unint64_t)(v49 - 9) < 8)
          goto LABEL_53;
        *(_QWORD *)(v48 + 9) = *((_QWORD *)v45 + 2);
        v77 = v48 + 17;
        *(_QWORD *)&v78[0] = v49 - 17;
        if ((unint64_t)(v49 - 17) < 8)
          goto LABEL_53;
        *(_QWORD *)(v48 + 17) = *((_QWORD *)v45 + 4);
        v46 = (_BYTE *)(v48 + 25);
        v44 = v49 - 25;
        v77 = v48 + 25;
        *(_QWORD *)&v78[0] = v49 - 25;
        v50 = *((_QWORD *)v45 + 4);
        if (v50)
        {
          v51 = v44 >= v50;
          v44 -= v50;
          if (!v51)
            goto LABEL_53;
          memcpy((void *)(v48 + 25), *((const void **)v45 + 3), *((_QWORD *)v45 + 4));
          v46 += v50;
          v77 = (uint64_t)v46;
          *(_QWORD *)&v78[0] = v44;
        }
        v45 += 40;
      }
      if (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>>>>,std::vector<llvm::orc::shared::AllocActionCallPair>,void>::serialize(&v77, (_QWORD *)v64 + 1))
      {
        *(_OWORD *)v65 = v80[0];
        goto LABEL_57;
      }
    }
  }
  else
  {
    v77 = (uint64_t)v80;
    *(_QWORD *)&v78[0] = v39 + v37 + 8;
    if (!v41)
    {
      *(_QWORD *)&v80[0] = *(_QWORD *)(v38 + 16);
      v77 = (uint64_t)v80 + 8;
      *(_QWORD *)&v78[0] = 0;
    }
  }
LABEL_53:
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v65);
  if (*((_QWORD *)&v80[0] + 1) > 8uLL || !*((_QWORD *)&v80[0] + 1) && *(_QWORD *)&v80[0])
    free(*(void **)&v80[0]);
LABEL_57:
  if (v65[1] || (v74 = (llvm::formatv_object_base *)v65[0]) == 0)
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v69, &v66);
    v70 = v68;
    v52 = v65[1];
    if (v65[1] <= (void *)8)
      v53 = v65;
    else
      v53 = (void **)v65[0];
    v74 = v40;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v75, v69);
    v76 = v70;
    v77 = (uint64_t)v74;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v78, v75);
    v79 = v76;
    *(_QWORD *)&v80[0] = v77;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v80 + 8, v78);
    v81 = v79;
    v54 = operator new(0x30uLL, (std::align_val_t)8uLL);
    v71 = v54;
    v72 = xmmword_24AA2DB60;
    *v54 = *(_QWORD *)&v80[0];
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v54 + 1), (_OWORD *)((char *)v80 + 8));
    v54[5] = v81;
    v73 = (char *)_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE15CallbacksHolderIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_8SPSTupleIJNS3_11SPSSequenceINSD_IJNS3_19SPSRemoteAllocGroupESC_yNSE_IcEEEEEEENSE_INSD_IJNSD_IJSC_SG_EEESJ_EEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISN_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorES11_E_JNS2_12ExecutorAddrENS2_8tpctypes15FinalizeRequestEEEEvOT0_S13_OT1_DpRKT2_EUlOT_PKcmE_S12_JS13_S15_EEEvS1F_S17_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1F_EUlS4_E_S1P_vE9CallbacksE
        + 4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)v80 + 1);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v78);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v75);
    (*(void (**)(_QWORD *, uint64_t, _QWORD **, void **, void *))(*v33 + 56))(v33, v34, &v71, v53, v52);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v71);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v69);
  }
  else
  {
    getErrorErrorCat();
    v77 = 3;
    *(_QWORD *)&v78[0] = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v74, &v77, (uint64_t *)v69);
    v56 = *(_QWORD *)&v69[0];
    if (*(_QWORD *)&v69[0])
    {
      *(_QWORD *)&v69[0] = 0;
      BYTE8(v80[0]) = -1;
    }
    else
    {
      v56 = v68;
      BYTE8(v80[0]) = 0;
    }
    *(_QWORD *)&v80[0] = v56;
    if ((v67 & 2) != 0)
      v57 = &v66;
    else
      v57 = (__int128 *)v66;
    (*(void (**)(__int128 *, _OWORD *))(v67 & 0xFFFFFFFFFFFFFFF8))(v57, v80);
    if ((BYTE8(v80[0]) & 1) != 0)
    {
      v58 = *(_QWORD *)&v80[0];
      *(_QWORD *)&v80[0] = 0;
      if (v58)
        (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    }
    if (*(_QWORD *)&v69[0])
      (*(void (**)(_QWORD))(**(_QWORD **)&v69[0] + 8))(*(_QWORD *)&v69[0]);
  }
  if (v65[1] < (void *)9)
  {
    if (v65[1])
      goto LABEL_67;
    v55 = v65[0];
    if (!v65[0])
      goto LABEL_67;
  }
  else
  {
    v55 = v65[0];
  }
  free(v55);
LABEL_67:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v66);
  *(_QWORD *)&v80[0] = (char *)v64 + 8;
  std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100]((void ***)v80);
  if (__p[0])
    operator delete(__p[0]);
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSM_SM_E_JNS2_12ExecutorAddrENS_8ArrayRefISQ_EEEEEvOT0_SQ_OT1_DpRKT2_EUlOT_PKcmE_SP_JSQ_SS_EEEvS12_SU_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES12_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t a2)
{
  void *v2;
  void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v9;
  __int128 v10[2];
  void *v11[2];
  uint64_t v12;

  v12 = *MEMORY[0x24BDAC8D0];
  v2 = *(void **)a2;
  v3 = *(void **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v4 = *a1;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, (__int128 *)(a1 + 1));
  v11[0] = v2;
  v11[1] = v3;
  v5 = operator new();
  *(_QWORD *)v5 = off_251C14DC0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v5 + 8, v10);
  *(_OWORD *)(v5 + 40) = *(_OWORD *)v11;
  v11[0] = 0;
  v11[1] = 0;
  *(_QWORD *)(v5 + 56) = "WFR handler task";
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = 0;
  *(_QWORD *)(v5 + 80) = 0;
  v9 = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 16))(v4, &v9);
  v6 = v9;
  v9 = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  if (v11[1] >= (void *)9)
  {
    v7 = v11[0];
LABEL_7:
    free(v7);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
  }
  if (!v11[1])
  {
    v7 = v11[0];
    if (v11[0])
      goto LABEL_7;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSM_SM_E_JNS2_12ExecutorAddrENS_8ArrayRefISQ_EEEEEvOT0_SQ_OT1_DpRKT2_EUlOT_PKcmE_SP_JSQ_SS_EEEvS12_SU_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES12_EUlS4_E_EEvPvS1D_(_QWORD *a1, uint64_t a2)
{
  *a1 = *(_QWORD *)a2;
  return llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_11SPSSequenceISC_EEEE9callAsyncIZNS7_19callSPSWrapperAsyncISF_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSM_SM_E_JNS2_12ExecutorAddrENS_8ArrayRefISQ_EEEEEvOT0_SQ_OT1_DpRKT2_EUlOT_PKcmE_SP_JSQ_SS_EEEvS12_SU_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES12_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSI_SI_E_JNS0_12ExecutorAddrENS_8ArrayRefISM_EEEEEvOT0_SM_OT1_DpRKT2_EUlOT_PKcmE_SL_JSM_SO_EEEvSY_SQ_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESY_ENUlS16_E_clES16_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C14DC0;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 40);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 40);
    if (v3)
      goto LABEL_5;
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSI_SI_E_JNS0_12ExecutorAddrENS_8ArrayRefISM_EEEEEvOT0_SM_OT1_DpRKT2_EUlOT_PKcmE_SL_JSM_SO_EEEvSY_SQ_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESY_ENUlS16_E_clES16_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C14DC0;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  v2 = *(_QWORD *)(a1 + 48);
  if (v2 < 9)
  {
    if (v2 || (v3 = *(void **)(a1 + 40)) == 0)
    {
LABEL_8:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
      JUMPOUT(0x24BD1B3A4);
    }
  }
  else
  {
    v3 = *(void **)(a1 + 40);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSI_SI_E_JNS0_12ExecutorAddrENS_8ArrayRefISM_EEEEEvOT0_SM_OT1_DpRKT2_EUlOT_PKcmE_SL_JSM_SO_EEEvSY_SQ_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESY_ENUlS16_E_clES16_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 56));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_11SPSSequenceIS8_EEEE9callAsyncIZNS2_19callSPSWrapperAsyncISB_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc7abandonENS_15unique_functionIFvNS_5ErrorEEEEEUlSI_SI_E_JNS0_12ExecutorAddrENS_8ArrayRefISM_EEEEEvOT0_SM_OT1_DpRKT2_EUlOT_PKcmE_SL_JSM_SO_EEEvSY_SQ_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerESY_ENUlS16_E_clES16_EUlvE_E3runEv(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11[2];
  uint64_t v12[2];
  uint64_t v13;
  llvm::formatv_object_base *v14;
  uint64_t v15;
  uint64_t v16;

  v2 = (_QWORD *)(a1 + 8);
  *(_OWORD *)v11 = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v15 = 0;
  if (v11[1])
  {
    if (v11[1] <= (void *)8)
      v3 = v11;
    else
      v3 = (void **)v11[0];
  }
  else
  {
    v14 = (llvm::formatv_object_base *)v11[0];
    if (v11[0])
    {
      getErrorErrorCat();
      v12[0] = 3;
      v12[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v14, v12, &v13);
      v15 = 0;
      if (v13)
      {
        v16 = v13;
        v13 = 0;
      }
      else
      {
        v16 = 0;
      }
      v10 = *(_QWORD *)(a1 + 32);
      if ((v10 & 2) == 0)
        v2 = (_QWORD *)*v2;
      (*(void (**)(_QWORD *, uint64_t *))(v10 & 0xFFFFFFFFFFFFFFF8))(v2, &v16);
      if (v16)
        (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
      v6 = v13;
      if (v13)
        goto LABEL_11;
      goto LABEL_12;
    }
    v3 = v11;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(&v15, (uint64_t)v3, (uint64_t)v11[1], &v16);
  v4 = v16;
  if (v16)
  {
    v15 = 0;
    v16 = 0;
    v12[0] = v4;
    v5 = *(_QWORD *)(a1 + 32);
    if ((v5 & 2) == 0)
      v2 = (_QWORD *)*v2;
    (*(void (**)(_QWORD *, uint64_t *))(v5 & 0xFFFFFFFFFFFFFFF8))(v2, v12);
    if (v12[0])
      (*(void (**)(uint64_t))(*(_QWORD *)v12[0] + 8))(v12[0]);
    v6 = v16;
    if (v16)
LABEL_11:
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
  else
  {
    v8 = v15;
    v15 = 0;
    v12[0] = v8;
    v9 = *(_QWORD *)(a1 + 32);
    if ((v9 & 2) == 0)
      v2 = (_QWORD *)*v2;
    (*(void (**)(_QWORD *, uint64_t *))(v9 & 0xFFFFFFFFFFFFFFF8))(v2, v12);
    v6 = v12[0];
    if (v12[0])
      goto LABEL_11;
  }
LABEL_12:
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  if (v11[1] >= (void *)9)
  {
    v7 = v11[0];
LABEL_18:
    free(v7);
    return;
  }
  if (!v11[1])
  {
    v7 = v11[0];
    if (v11[0])
      goto LABEL_18;
  }
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8CallImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_8SPSTupleIJNS3_11SPSSequenceINSD_IJNS3_19SPSRemoteAllocGroupESC_yNSE_IcEEEEEEENSE_INSD_IJNSD_IJSC_SG_EEESJ_EEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISN_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorES11_E_JNS2_12ExecutorAddrENS2_8tpctypes15FinalizeRequestEEEEvOT0_S13_OT1_DpRKT2_EUlOT_PKcmE_S12_JS13_S15_EEEvS1F_S17_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1F_EUlS4_E_EEvPvRS4_(uint64_t *a1, uint64_t a2)
{
  void *v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v10;
  __int128 v11[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = *(void **)a2;
  v4 = *(void **)(a2 + 8);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v5 = *a1;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v11, (__int128 *)(a1 + 1));
  v12 = a1[5];
  v13[0] = v3;
  v13[1] = v4;
  v6 = operator new();
  *(_QWORD *)v6 = off_251C14E08;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v6 + 8, v11);
  *(_QWORD *)(v6 + 40) = v12;
  *(_OWORD *)(v6 + 48) = *(_OWORD *)v13;
  v13[0] = 0;
  v13[1] = 0;
  *(_QWORD *)(v6 + 64) = "WFR handler task";
  *(_QWORD *)(v6 + 72) = 0;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  v10 = v6;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v5 + 16))(v5, &v10);
  v7 = v10;
  v10 = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v13[1] >= (void *)9)
  {
    v8 = v13[0];
LABEL_7:
    free(v8);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v11);
  }
  if (!v13[1])
  {
    v8 = v13[0];
    if (v13[0])
      goto LABEL_7;
  }
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v11);
}

uint64_t _ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE8MoveImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_8SPSTupleIJNS3_11SPSSequenceINSD_IJNS3_19SPSRemoteAllocGroupESC_yNSE_IcEEEEEEENSE_INSD_IJNSD_IJSC_SG_EEESJ_EEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISN_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorES11_E_JNS2_12ExecutorAddrENS2_8tpctypes15FinalizeRequestEEEEvOT0_S13_OT1_DpRKT2_EUlOT_PKcmE_S12_JS13_S15_EEEvS1F_S17_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1F_EUlS4_E_EEvPvS1Q_(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  *a1 = *(_QWORD *)a2;
  result = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
  a1[5] = *(_QWORD *)(a2 + 40);
  return result;
}

_QWORD *_ZN4llvm6detail18UniqueFunctionBaseIvJNS_3orc6shared21WrapperFunctionResultEEE11DestroyImplIZNS2_22ExecutorProcessControl9RunAsTaskclIZNS3_15WrapperFunctionIFNS3_8SPSErrorENS3_15SPSExecutorAddrENS3_8SPSTupleIJNS3_11SPSSequenceINSD_IJNS3_19SPSRemoteAllocGroupESC_yNSE_IcEEEEEEENSE_INSD_IJNSD_IJSC_SG_EEESJ_EEEEEEEEEE9callAsyncIZNS7_19callSPSWrapperAsyncISN_S8_ZNS2_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorES11_E_JNS2_12ExecutorAddrENS2_8tpctypes15FinalizeRequestEEEEvOT0_S13_OT1_DpRKT2_EUlOT_PKcmE_S12_JS13_S15_EEEvS1F_S17_DpRKT1_EUlS4_E_EENS7_18IncomingWFRHandlerES1F_EUlS4_E_EEvPv(uint64_t a1)
{
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
}

uint64_t _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_8SPSTupleIJNS5_11SPSSequenceINS9_IJNS5_19SPSRemoteAllocGroupES8_yNSA_IcEEEEEEENSA_INS9_IJNS9_IJS8_SC_EEESF_EEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISJ_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorESX_E_JNS0_12ExecutorAddrENS0_8tpctypes15FinalizeRequestEEEEvOT0_SZ_OT1_DpRKT2_EUlOT_PKcmE_SY_JSZ_S11_EEEvS1B_S13_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1B_ENUlS1J_E_clES1J_EUlvE_ED1Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C14E08;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 >= 9)
  {
    v3 = *(void **)(a1 + 48);
LABEL_5:
    free(v3);
    goto LABEL_8;
  }
  if (!v2)
  {
    v3 = *(void **)(a1 + 48);
    if (v3)
      goto LABEL_5;
  }
LABEL_8:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
  return a1;
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_8SPSTupleIJNS5_11SPSSequenceINS9_IJNS5_19SPSRemoteAllocGroupES8_yNSA_IcEEEEEEENSA_INS9_IJNS9_IJS8_SC_EEESF_EEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISJ_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorESX_E_JNS0_12ExecutorAddrENS0_8tpctypes15FinalizeRequestEEEEvOT0_SZ_OT1_DpRKT2_EUlOT_PKcmE_SY_JSZ_S11_EEEvS1B_S13_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1B_ENUlS1J_E_clES1J_EUlvE_ED0Ev(uint64_t a1)
{
  unint64_t v2;
  void *v3;

  *(_QWORD *)a1 = off_251C14E08;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  v2 = *(_QWORD *)(a1 + 56);
  if (v2 < 9)
  {
    if (v2 || (v3 = *(void **)(a1 + 48)) == 0)
    {
LABEL_8:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
      JUMPOUT(0x24BD1B3A4);
    }
  }
  else
  {
    v3 = *(void **)(a1 + 48);
  }
  free(v3);
  goto LABEL_8;
}

llvm::raw_ostream *_ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_8SPSTupleIJNS5_11SPSSequenceINS9_IJNS5_19SPSRemoteAllocGroupES8_yNSA_IcEEEEEEENSA_INS9_IJNS9_IJS8_SC_EEESF_EEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISJ_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorESX_E_JNS0_12ExecutorAddrENS0_8tpctypes15FinalizeRequestEEEEvOT0_SZ_OT1_DpRKT2_EUlOT_PKcmE_SY_JSZ_S11_EEEvS1B_S13_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1B_ENUlS1J_E_clES1J_EUlvE_E16printDescriptionERNS_11raw_ostreamE(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 64));
}

void _ZN4llvm3orc20GenericNamedTaskImplIZZNS0_22ExecutorProcessControl9RunAsTaskclIZNS0_6shared15WrapperFunctionIFNS5_8SPSErrorENS5_15SPSExecutorAddrENS5_8SPSTupleIJNS5_11SPSSequenceINS9_IJNS5_19SPSRemoteAllocGroupES8_yNSA_IcEEEEEEENSA_INS9_IJNS9_IJS8_SC_EEESF_EEEEEEEEEE9callAsyncIZNS2_19callSPSWrapperAsyncISJ_S3_ZNS0_30EPCGenericJITLinkMemoryManager13InFlightAlloc8finalizeENS_15unique_functionIFvNS_8ExpectedINS_7jitlink20JITLinkMemoryManager14FinalizedAllocEEEEEEEUlNS_5ErrorESX_E_JNS0_12ExecutorAddrENS0_8tpctypes15FinalizeRequestEEEEvOT0_SZ_OT1_DpRKT2_EUlOT_PKcmE_SY_JSZ_S11_EEEvS1B_S13_DpRKT1_EUlNS5_21WrapperFunctionResultEE_EENS2_18IncomingWFRHandlerES1B_ENUlS1J_E_clES1J_EUlvE_E3runEv(uint64_t a1)
{
  _QWORD *v2;
  void **v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  uint64_t v15[2];
  uint64_t v16;
  llvm::formatv_object_base *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v2 = (_QWORD *)(a1 + 8);
  *(_OWORD *)v14 = *(_OWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  v18 = 0;
  if (v14[1])
  {
    if (v14[1] <= (void *)8)
      v3 = v14;
    else
      v3 = (void **)v14[0];
  }
  else
  {
    v17 = (llvm::formatv_object_base *)v14[0];
    if (v14[0])
    {
      getErrorErrorCat();
      v15[0] = 3;
      v15[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v17, v15, &v16);
      v18 = 0;
      v8 = v16;
      if (v16)
      {
        v16 = 0;
        v20 = -1;
        v19 = v8;
        v9 = *(_QWORD *)(a1 + 32);
      }
      else
      {
        v20 = 0;
        v9 = *(_QWORD *)(a1 + 32);
        v19 = *(_QWORD *)(a1 + 40);
      }
      if ((v9 & 2) == 0)
        v2 = (_QWORD *)*v2;
      (*(void (**)(_QWORD *, uint64_t *))(v9 & 0xFFFFFFFFFFFFFFF8))(v2, &v19);
      if ((v20 & 1) != 0)
      {
        v12 = v19;
        v19 = 0;
        if (v12)
          (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
      }
      v7 = v16;
      if (v16)
        goto LABEL_32;
      goto LABEL_33;
    }
    v3 = v14;
  }
  llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(&v18, (uint64_t)v3, (uint64_t)v14[1], v15);
  v4 = v15[0];
  if (v15[0])
  {
    v15[0] = 0;
    v18 = 0;
    v20 = -1;
    v19 = v4;
    v5 = *(_QWORD *)(a1 + 32);
    if ((v5 & 2) == 0)
      v2 = (_QWORD *)*v2;
    (*(void (**)(_QWORD *, uint64_t *))(v5 & 0xFFFFFFFFFFFFFFF8))(v2, &v19);
    if ((v20 & 1) != 0)
    {
      v6 = v19;
      v19 = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
    v7 = v15[0];
    if (!v15[0])
      goto LABEL_33;
LABEL_32:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    goto LABEL_33;
  }
  v10 = v18;
  v18 = 0;
  if (v10)
  {
    v20 = -1;
    v19 = v10;
    v11 = *(_QWORD *)(a1 + 32);
  }
  else
  {
    v20 = 0;
    v11 = *(_QWORD *)(a1 + 32);
    v19 = *(_QWORD *)(a1 + 40);
  }
  if ((v11 & 2) == 0)
    v2 = (_QWORD *)*v2;
  (*(void (**)(_QWORD *, uint64_t *))(v11 & 0xFFFFFFFFFFFFFFF8))(v2, &v19);
  if ((v20 & 1) != 0)
  {
    v7 = v19;
    v19 = 0;
    if (v7)
      goto LABEL_32;
  }
LABEL_33:
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  if (v14[1] >= (void *)9)
  {
    v13 = v14[0];
LABEL_39:
    free(v13);
    return;
  }
  if (!v14[1])
  {
    v13 = v14[0];
    if (v14[0])
      goto LABEL_39;
  }
}

uint64_t llvm::GlobalValue::setVisibility(uint64_t result, char a2)
{
  uint64_t v2;
  int v3;
  unsigned int v4;

  v2 = result;
  v3 = *(_DWORD *)(result + 32) & 0xF;
  v4 = *(_DWORD *)(result + 32) & 0xFFFFFFCF | (16 * (a2 & 3));
  *(_DWORD *)(result + 32) = v4;
  if ((v3 - 7) < 2)
    goto LABEL_5;
  if (16 * (a2 & 3))
  {
    result = llvm::GlobalValue::hasExternalWeakLinkage((llvm::GlobalValue *)result);
    if ((result & 1) == 0)
    {
      v4 = *(_DWORD *)(v2 + 32);
LABEL_5:
      *(_DWORD *)(v2 + 32) = v4 | 0x4000;
    }
  }
  return result;
}

uint64_t llvm::orc::StaticLibraryDefinitionGenerator::Create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, __int128 *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  unint64_t v14;
  char v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int128 v20[2];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v19 = 0;
  v10 = operator new();
  v11 = *a2;
  *a2 = 0;
  v12 = *a3;
  *a3 = 0;
  v17 = v12;
  v18 = v11;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v20, a4);
  llvm::orc::StaticLibraryDefinitionGenerator::StaticLibraryDefinitionGenerator(v10, a1, &v18, &v17, v20, &v19);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v20);
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
  result = v18;
  if (v18)
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v14 = v19;
  v15 = *(_BYTE *)(a5 + 8);
  if (v19)
  {
    v16 = v15 | 1;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v10 = v14;
  }
  else
  {
    v16 = v15 & 0xFE;
  }
  *(_BYTE *)(a5 + 8) = v16;
  *(_QWORD *)a5 = v10;
  return result;
}

void llvm::orc::StaticLibraryDefinitionGenerator::getSliceRangeForArch(llvm::orc::StaticLibraryDefinitionGenerator *this, llvm::object::MachOUniversalBinary *a2, const llvm::Triple *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  int8x16_t v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  int v16;
  std::string *v17;
  int v18;
  int v19;
  uint64_t v20;
  unsigned int v21;
  int64x2_t v22;
  int8x16_t v23;
  int32x2_t v24;
  int8x16_t v25;
  const char *v26;
  __int128 v27;
  __int16 v28;
  __int128 v29;
  __int128 v30;
  _BYTE v31[32];
  uint64_t v32;
  int v33;
  __int128 v34;
  __int128 v35;
  _BYTE v36[32];

  llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v34, (uint64_t)a2, 0);
  llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v32, 0, 0);
  v29 = v34;
  v30 = v35;
  *(_OWORD *)v31 = *(_OWORD *)v36;
  *(_OWORD *)&v31[16] = *(_OWORD *)&v36[16];
  v6 = v34;
  v7 = DWORD2(v34);
  v8 = v32;
  v9 = v33;
  if ((_QWORD)v34 == v32 && DWORD2(v34) == v33)
  {
LABEL_17:
    v26 = "Universal binary ";
    v27 = *((_OWORD *)a2 + 2);
    v28 = 1283;
    *(_QWORD *)&v34 = &v26;
    *(_QWORD *)&v35 = " does not contain a slice for ";
    *(_WORD *)v36 = 770;
    *(_QWORD *)&v29 = &v34;
    *(_QWORD *)&v30 = a3;
    *(_WORD *)v31 = 1026;
    getErrorErrorCat();
    v20 = operator new();
    *(_QWORD *)v20 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)&v29, (std::string *)(v20 + 8));
    *(_QWORD *)(v20 + 32) = 3;
    *(_QWORD *)(v20 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v20 + 48) = 1;
    *((_BYTE *)this + 16) |= 1u;
    *(_QWORD *)this = v20;
  }
  else
  {
    v11 = *(_DWORD *)v31;
    v10 = *(_DWORD *)&v31[4];
    v12 = *(int8x16_t *)&v31[8];
    v13 = *(_QWORD *)((char *)&v30 + 4);
    v15 = HIDWORD(v29);
    v14 = v30;
    while (1)
    {
      v25 = v12;
      v16 = *(_DWORD *)(v6 + 48);
      v17 = v16 == -889275714 ? (std::string *)v15 : (std::string *)v11;
      v18 = v16 == -889275714 ? v14 : v10;
      llvm::object::MachOObjectFile::getArchTriple(v17, 0, v18, 0, (uint64_t)&v34);
      if (*((_QWORD *)&v35 + 1) == *((_QWORD *)a3 + 3))
      {
        v19 = *((_DWORD *)a3 + 8);
        if (!v19 || *(_DWORD *)v36 == v19)
          break;
      }
      if (SBYTE7(v35) < 0)
        operator delete((void *)v34);
      llvm::object::MachOUniversalBinary::ObjectForArch::ObjectForArch((uint64_t)&v34, v6, v7 + 1);
      v6 = v34;
      v7 = DWORD2(v34);
      v15 = HIDWORD(v34);
      v14 = v35;
      v11 = *(_DWORD *)v36;
      v10 = *(_DWORD *)&v36[4];
      v13 = *(_QWORD *)((char *)&v35 + 4);
      v12 = *(int8x16_t *)&v36[8];
      if ((_QWORD)v34 == v8 && DWORD2(v34) == v9)
        goto LABEL_17;
    }
    v21 = *(_DWORD *)(v6 + 48) == -889275714;
    v22.i64[0] = v13;
    v22.i64[1] = HIDWORD(v13);
    v23 = (int8x16_t)v22;
    *((_BYTE *)this + 16) &= ~1u;
    v24 = vdup_n_s32(v21);
    v22.i64[0] = v24.u32[0];
    v22.i64[1] = v24.u32[1];
    *(int8x16_t *)this = vbslq_s8((int8x16_t)vcltzq_s64(vshlq_n_s64(v22, 0x3FuLL)), v23, v25);
    if (SBYTE7(v35) < 0)
      operator delete((void *)v34);
  }
}

llvm::object::MachOUniversalBinary *llvm::orc::StaticLibraryDefinitionGenerator::Create@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, __int128 *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::object::MachOUniversalBinary *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  llvm::formatv_object_base *v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::formatv_object_base *v24;
  llvm::object::MachOUniversalBinary *result;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  llvm::object::MachOUniversalBinary *v29;
  uint64_t v30;
  _QWORD v31[4];
  llvm::formatv_object_base *v32[2];
  uint64_t v33;
  uint64_t v34;
  __int16 v35;
  __int128 v36[2];
  uint64_t v37;
  char v38;
  __int128 v39[2];
  llvm::object::MachOUniversalBinary *v40;
  char v41;
  uint64_t v42;

  v42 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(*a2 + 8);
  v9 = *(_QWORD *)(*a2 + 16) - v8;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
  v31[0] = v8;
  v31[1] = v9;
  v31[2] = v10;
  v31[3] = v11;
  llvm::object::createBinary((uint64_t)v31);
  v12 = v40;
  if ((v41 & 1) != 0)
  {
    v40 = 0;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v12;
    goto LABEL_19;
  }
  v13 = *((_DWORD *)v40 + 2);
  if (v13 == 1)
  {
    llvm::orc::StaticLibraryDefinitionGenerator::getSliceRangeForArch((llvm::orc::StaticLibraryDefinitionGenerator *)v32, v40, (const llvm::Triple *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72) + 40));
    if ((v33 & 1) != 0)
    {
      v24 = v32[0];
    }
    else
    {
      v16 = v32[1];
      v17 = (char *)v32[0] + *(_QWORD *)(*a2 + 8);
      v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
      v28[0] = v17;
      v28[1] = v16;
      v28[2] = v18;
      v28[3] = v19;
      llvm::object::Archive::create((uint64_t)v28, (uint64_t)&v37);
      if ((v38 & 1) == 0)
      {
        v20 = *a2;
        *a2 = 0;
        v26 = v37;
        v27 = v20;
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v36, a3);
        llvm::orc::StaticLibraryDefinitionGenerator::Create(a1, &v27, &v26, v36, a4);
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v36);
        if (v26)
          (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
        v15 = v27;
        if (!v27)
          goto LABEL_19;
LABEL_14:
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        goto LABEL_19;
      }
      v24 = (llvm::formatv_object_base *)v37;
    }
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v24;
    goto LABEL_19;
  }
  if (v13)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 16))(*a2);
    v32[0] = (llvm::formatv_object_base *)"Unrecognized file type for ";
    v33 = v21;
    v34 = v22;
    v35 = 1283;
    getErrorErrorCat();
    v23 = operator new();
    *(_QWORD *)v23 = off_251C127D0;
    llvm::Twine::str(v32, (std::string *)(v23 + 8));
    *(_QWORD *)(v23 + 32) = 3;
    *(_QWORD *)(v23 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v23 + 48) = 1;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v23;
    goto LABEL_19;
  }
  v14 = *a2;
  *a2 = 0;
  v29 = v12;
  v30 = v14;
  v40 = 0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v39, a3);
  llvm::orc::StaticLibraryDefinitionGenerator::Create(a1, &v30, (uint64_t *)&v29, v39, a4);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v39);
  if (v29)
    (*(void (**)(llvm::object::MachOUniversalBinary *))(*(_QWORD *)v29 + 8))(v29);
  v15 = v30;
  if (v30)
    goto LABEL_14;
LABEL_19:
  result = v40;
  v40 = 0;
  if (result)
    return (llvm::object::MachOUniversalBinary *)(*(uint64_t (**)(llvm::object::MachOUniversalBinary *))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::orc::StaticLibraryDefinitionGenerator::tryToGenerate@<X0>(uint64_t result@<X0>, int a2@<W2>, llvm::orc::JITDylib *a3@<X3>, uint64_t **a4@<X5>, uint64_t *a5@<X8>)
{
  uint64_t v6;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  _OWORD *v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  unint64_t *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[2];
  int v47;
  uint64_t v48;
  char *v49;
  _QWORD v50[4];
  int64x2_t v51;
  uint64_t v52;
  uint64_t v53;
  unsigned int v54;
  __int128 v55;
  __int128 v56;
  __int16 v57;
  unsigned __int8 *v58;
  _BYTE v59[32];
  char v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (a2 || (v6 = result, !*(_QWORD *)(result + 200)))
  {
    *a5 = 0;
    return result;
  }
  v52 = 0;
  v53 = 0;
  v54 = 0;
  v8 = *a4;
  v9 = a4[1];
  if (*a4 == v9)
  {
    v25 = 0;
    v24 = 0;
    goto LABEL_30;
  }
  v10 = 0;
  do
  {
    if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v6 + 208), *(_DWORD *)(v6 + 224), *v8, &v55))
    {
      *(_QWORD *)&v55 = 0;
      v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v6 + 208), *(_DWORD *)(v6 + 224), *v8, &v55);
      v12 = (_QWORD *)v55;
      if (v11)
      {
        v13 = *(_QWORD *)(v55 + 8);
      }
      else
      {
        v14 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(v6 + 208, v8, (_QWORD *)v55);
        v12 = v14;
        if ((unint64_t)(*v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v15 = (unint64_t *)(*v14 + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
        }
        v17 = *v8;
        *v14 = *v8;
        if ((unint64_t)(v17 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v18 = (unint64_t *)(v17 + 8);
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 + 1, v18));
        }
        v13 = 0;
        *(_OWORD *)(v14 + 3) = 0u;
        *(_OWORD *)(v14 + 1) = 0u;
        v10 = v52;
      }
      v20 = v12[4];
      *(_OWORD *)&v59[8] = *((_OWORD *)v12 + 1);
      *(_QWORD *)v59 = v13;
      *(_QWORD *)&v59[24] = v20;
      *(_QWORD *)&v55 = 0;
      v21 = v54;
      if ((llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>,std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::LookupBucketFor<std::pair<llvm::StringRef,llvm::StringRef>>(v10, v54, (uint64_t)v59, (unint64_t *)&v55) & 1) == 0)
      {
        if (4 * (int)v53 + 4 >= 3 * v21)
        {
          v23 = 2 * v21;
        }
        else
        {
          if (v21 + ~(_DWORD)v53 - HIDWORD(v53) > v21 >> 3)
          {
LABEL_19:
            v22 = (_OWORD *)v55;
            LODWORD(v53) = v53 + 1;
            v55 = xmmword_24AA2AC20;
            v56 = xmmword_24AA2AC20;
            if (!llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual((uint64_t)v22, (uint64_t)&v55))--HIDWORD(v53);
            *v22 = *(_OWORD *)v59;
            v22[1] = *(_OWORD *)&v59[16];
            goto LABEL_22;
          }
          v23 = v21;
        }
        llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::grow((uint64_t)&v52, v23);
        *(_QWORD *)&v55 = 0;
        v10 = v52;
        llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>,std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::LookupBucketFor<std::pair<llvm::StringRef,llvm::StringRef>>(v52, v54, (uint64_t)v59, (unint64_t *)&v55);
        goto LABEL_19;
      }
    }
LABEL_22:
    v8 += 2;
  }
  while (v8 != v9);
  v24 = v52;
  v25 = v52 + 32 * v54;
  if ((_DWORD)v53)
  {
    *(_QWORD *)&v55 = v52;
    *((_QWORD *)&v55 + 1) = v52 + 32 * v54;
    llvm::DenseMapIterator<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>,false>::AdvancePastEmptyBuckets((uint64_t *)&v55);
    v26 = (int64x2_t)v55;
    goto LABEL_31;
  }
LABEL_30:
  v26 = vdupq_n_s64(v25);
LABEL_31:
  v51 = v26;
  v27 = v24 + 32 * v54;
  v28 = (uint64_t *)v26.i64[0];
  if (v27 == v26.i64[0])
  {
LABEL_42:
    *a5 = 0;
  }
  else
  {
    while (1)
    {
      v29 = *v28;
      v30 = v28[1];
      v32 = v28[2];
      v31 = v28[3];
      v33 = *(_QWORD *)(*(_QWORD *)(v6 + 128) + 8);
      v50[0] = *v28;
      v50[1] = v30;
      v50[2] = v32;
      v50[3] = v31;
      v34 = v6 + 136;
      v35 = *(_QWORD *)(v6 + 160);
      if ((v35 & 2) == 0)
        v34 = *(_QWORD *)(v6 + 136);
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t, _QWORD *))(v35 & 0xFFFFFFFFFFFFFFF8))(v59, v34, v33, v50);
      if ((v60 & 1) != 0)
        break;
      v36 = *(_QWORD *)(v6 + 128);
      v57 = 261;
      *(_QWORD *)&v55 = v32;
      *((_QWORD *)&v55 + 1) = v31;
      v58 = (unsigned __int8 *)&v55;
      v37 = operator new(24, &v58);
      *(_QWORD *)v37 = off_251C12C18;
      *((_QWORD *)v37 + 1) = v29;
      *((_QWORD *)v37 + 2) = v29 + v30;
      v46[0] = *(_QWORD *)v59;
      v46[1] = *(_QWORD *)&v59[8];
      memset(v59, 0, 20);
      v47 = *(_DWORD *)&v59[16];
      v48 = *(_QWORD *)&v59[24];
      v49 = v37;
      *(_QWORD *)&v59[24] = 0;
      llvm::orc::ObjectLayer::add(v36, a3, (uint64_t *)&v49, (uint64_t)v46);
      if ((unint64_t)(v48 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v38 = (unint64_t *)(v48 + 8);
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
      }
      llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v46);
      v40 = (uint64_t)v49;
      v49 = 0;
      if (v40)
        (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
      v41 = *a5;
      llvm::Expected<llvm::orc::MaterializationUnit::Interface>::~Expected((uint64_t)v59);
      if (v41)
        goto LABEL_44;
      v51.i64[0] += 32;
      llvm::DenseMapIterator<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>,false>::AdvancePastEmptyBuckets(v51.i64);
      v28 = (uint64_t *)v51.i64[0];
      if (v51.i64[0] == v27)
        goto LABEL_42;
    }
    v42 = *(_QWORD *)v59;
    *(_QWORD *)v59 = 0;
    *a5 = v42;
    llvm::Expected<llvm::orc::MaterializationUnit::Interface>::~Expected((uint64_t)v59);
  }
LABEL_44:
  v43 = v52;
  if (v54)
  {
    v55 = xmmword_24AA2AC20;
    v56 = xmmword_24AA2AC20;
    *(_OWORD *)v59 = xmmword_24AA2DBB0;
    *(_OWORD *)&v59[16] = xmmword_24AA2DBB0;
    v44 = 32 * v54;
    v45 = v52;
    do
    {
      if (!llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(v45, (uint64_t)&v55))
        llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(v45, (uint64_t)v59);
      v45 += 32;
      v44 -= 32;
    }
    while (v44);
  }
  return MEMORY[0x24BD1B398](v43, 8);
}

uint64_t llvm::orc::StaticLibraryDefinitionGenerator::StaticLibraryDefinitionGenerator(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, __int128 *a5, unint64_t *a6)
{
  __n128 *v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  llvm::object::Archive *v16;
  uint64_t v17;
  uint64_t Next;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v23;
  uint64_t *v24;
  size_t v25;
  __n128 Member;
  _QWORD *v27;
  void *v28;
  int v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  int v37;
  std::string::size_type v38;
  size_t size;
  _BYTE *v40;
  _BYTE *v41;
  std::string *v42;
  uint64_t v43;
  uint64_t v44;
  double v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  char *v50;
  unint64_t *v51;
  _QWORD *v52;
  unint64_t *v53;
  unint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  int NumberOfSymbols;
  _QWORD v61[4];
  __int16 v62;
  unint64_t *v63[4];
  __int16 v64;
  void *__p;
  unint64_t *v66;
  const char *v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72[2];
  int v73;
  uint64_t v74[2];
  int v75;
  _QWORD v76[2];
  int v77;
  std::string v78;
  unint64_t v79;
  char v80;
  __n128 v81;
  uint64_t v82;
  char *v83;
  unsigned __int16 v84;
  char v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 57) = 0u;
  *(_QWORD *)a1 = &off_251C14E50;
  *(_QWORD *)(a1 + 8) = 850045863;
  *(_QWORD *)(a1 + 128) = a2;
  v10 = (__n128 *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a1 + 136, a5);
  *(_QWORD *)(a1 + 176) = 0;
  *(_QWORD *)(a1 + 168) = a1 + 176;
  v11 = (uint64_t **)(a1 + 168);
  *(_QWORD *)(a1 + 184) = 0;
  v12 = *a3;
  *a3 = 0;
  *(_QWORD *)(a1 + 192) = v12;
  v13 = *a4;
  *a4 = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 200) = v13;
  *(_QWORD *)(a1 + 208) = 0;
  v14 = a1 + 208;
  *(_QWORD *)(a1 + 216) = 0;
  *(_DWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 248) = a1 + 264;
  *(_QWORD *)(a1 + 256) = 0x400000000;
  *(_QWORD *)(a1 + 296) = a1 + 312;
  *(_QWORD *)(a1 + 304) = 0;
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 320) = 1;
  if (*(_QWORD *)(a1 + 160) <= 7uLL)
  {
    v81.n128_u64[0] = (unint64_t)llvm::orc::getObjectFileInterface;
    v83 = (char *)llvm::detail::UniqueFunctionBase<llvm::Expected<llvm::orc::MaterializationUnit::Interface>,llvm::orc::ExecutionSession &,llvm::MemoryBufferRef>::CallbacksHolder<llvm::Expected<llvm::orc::MaterializationUnit::Interface> (*)(llvm::orc::ExecutionSession &,llvm::MemoryBufferRef),llvm::Expected<llvm::orc::MaterializationUnit::Interface> (*)(llvm::orc::ExecutionSession &,llvm::MemoryBufferRef),void>::Callbacks
        + 2;
    if (v10 != &v81)
    {
      v15 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v15, (__int128 *)&v81);
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v81);
  }
  if (*a6)
    return a1;
  v76[0] = 0;
  v76[1] = 0;
  v77 = 0;
  v74[0] = 0;
  v74[1] = 0;
  v75 = 0;
  v72[0] = 0;
  v72[1] = 0;
  v73 = 0;
  v16 = *(llvm::object::Archive **)(a1 + 200);
  llvm::object::Archive::symbol_begin(v16);
  Next = v17;
  v20 = v19;
  NumberOfSymbols = llvm::object::Archive::getNumberOfSymbols(v16);
  v70 = Next;
  v71 = v20;
  if (v16 == (llvm::object::Archive *)Next && NumberOfSymbols == (_DWORD)v20)
  {
LABEL_8:
    v21 = 0;
    goto LABEL_9;
  }
  v58 = a6;
  while (1)
  {
    v23 = *(_QWORD *)(Next + 48);
    v24 = (uint64_t *)(v23 + HIDWORD(v20));
    if (v23)
      v25 = strlen((const char *)(v23 + HIDWORD(v20)));
    else
      v25 = 0;
    Member = llvm::object::Archive::Symbol::getMember((llvm::object::Archive::Symbol *)&v70, &v81);
    if ((v85 & 1) != 0)
    {
      v59 = v81.n128_u64[0];
      v81.n128_u64[0] = 0;
      v29 = 1;
      goto LABEL_22;
    }
    v69 = v82 - *(_QWORD *)(v81.n128_u64[0] + 16) + v84;
    __p = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::LookupBucketFor<unsigned long long>(v74, &v69, &__p) & 1) == 0)
    {
      llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v74, &v69, (uint64_t)&__p);
      llvm::object::Archive::Child::getAsBinary((llvm::object::Archive::Child *)&v81, (uint64_t)&v79);
      v27 = (_QWORD *)v79;
      if ((v80 & 1) != 0)
      {
        v29 = 1;
        v59 = v79;
        goto LABEL_47;
      }
      if (*(_DWORD *)(v79 + 8) == 2)
      {
        v28 = *(void **)(v79 + 32);
        if (v28)
        {
          std::string::basic_string[abi:nn180100](&__p, v28, *(_QWORD *)(v79 + 40));
        }
        else
        {
          __p = 0;
          v66 = 0;
          v67 = 0;
        }
        std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(v11, (const void **)&__p, (uint64_t)&__p);
        if (SHIBYTE(v67) < 0)
          operator delete(__p);
        llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v72, &v69, (uint64_t)&__p);
        (*(void (**)(_QWORD *))(*v27 + 8))(v27);
        v29 = 3;
        goto LABEL_47;
      }
      v32 = *(_QWORD *)(a1 + 200);
      v34 = *(_QWORD *)(v32 + 32);
      v33 = *(_QWORD *)(v32 + 40);
      v62 = 773;
      v61[0] = v34;
      v61[1] = v33;
      v61[2] = "(";
      v35 = *(unint64_t **)(v79 + 32);
      v36 = *(unint64_t **)(v79 + 40);
      v63[0] = v61;
      v63[2] = v35;
      v63[3] = v36;
      v64 = 1282;
      __p = v63;
      v66 = v36;
      v67 = ")";
      v68 = 770;
      llvm::Twine::str((llvm::formatv_object_base **)&__p, &v78);
      v37 = SHIBYTE(v78.__r_.__value_.__r.__words[2]);
      v38 = v78.__r_.__value_.__r.__words[0];
      if ((v78.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v78.__r_.__value_.__r.__words[2]);
      else
        size = v78.__r_.__value_.__l.__size_;
      v40 = (_BYTE *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1 + 232, size + 1, 0);
      v41 = v40;
      if (size)
      {
        if (v37 >= 0)
          v42 = &v78;
        else
          v42 = (std::string *)v38;
        memcpy(v40, v42, size);
      }
      v41[size] = 0;
      if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v78.__r_.__value_.__l.__data_);
      v43 = v27[2];
      v44 = v27[3];
      v45 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>,unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>::FindAndConstruct((uint64_t)v76, &v69);
      v46[1] = v43;
      v46[2] = v44;
      v46[3] = v41;
      v46[4] = size;
      (*(void (**)(_QWORD *, double))(*v27 + 8))(v27, v45);
      v11 = (uint64_t **)(a1 + 168);
      a6 = v58;
      v14 = a1 + 208;
    }
    __p = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::LookupBucketFor<unsigned long long>(v72, &v69, &__p) & 1) == 0)
    {
      llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>,unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>::FindAndConstruct((uint64_t)v76, &v69);
      v48 = v47;
      llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 128) + 8) + 72), v24, v25, v63);
      __p = 0;
      v49 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(a1 + 208), *(_DWORD *)(a1 + 224), (uint64_t)v63[0], &__p);
      v50 = (char *)__p;
      if (v49)
      {
        v51 = v63[0];
      }
      else
      {
        v52 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(v14, (uint64_t *)v63, __p);
        v50 = (char *)v52;
        if ((unint64_t)(*v52 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v53 = (unint64_t *)(*v52 + 8);
          do
            v54 = __ldaxr(v53);
          while (__stlxr(v54 - 1, v53));
        }
        v51 = 0;
        *v52 = 0;
        *v52 = v63[0];
        v63[0] = 0;
        *(_OWORD *)(v52 + 1) = 0u;
        *(_OWORD *)(v52 + 3) = 0u;
      }
      Member = *(__n128 *)(v48 + 8);
      *(_OWORD *)(v50 + 24) = *(_OWORD *)(v48 + 24);
      *(__n128 *)(v50 + 8) = Member;
      if ((unint64_t)v51 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v55 = v51 + 1;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
      }
    }
    v29 = 0;
LABEL_47:
    if ((v85 & 1) == 0)
    {
      v30 = (_QWORD *)v81.n128_u64[1];
      v81.n128_u64[1] = 0;
      if (v30)
      {
        v31 = 2;
        goto LABEL_50;
      }
      goto LABEL_51;
    }
LABEL_22:
    v30 = (_QWORD *)v81.n128_u64[0];
    v81.n128_u64[0] = 0;
    if (v30)
    {
      v31 = 1;
LABEL_50:
      (*(void (**)(__n128))(*v30 + 8 * v31))(Member);
    }
LABEL_51:
    if (v29 != 3 && v29)
      break;
    Next = llvm::object::Archive::Symbol::getNext((llvm::object::Archive::Symbol *)&v70);
    v20 = v57;
    v70 = Next;
    v71 = v57;
    if (v16 == (llvm::object::Archive *)Next && NumberOfSymbols == (_DWORD)v57)
      goto LABEL_8;
  }
  v21 = v59;
LABEL_9:
  MEMORY[0x24BD1B398](v72[0], 8);
  MEMORY[0x24BD1B398](v74[0], 8);
  MEMORY[0x24BD1B398](v76[0], 8);
  *a6 = v21;
  return a1;
}

_QWORD *llvm::jitlink::LinkGraph::addAbsoluteSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8)
{
  _QWORD *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v22;
  char v23[31];

  v16 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 16, 3);
  v17 = v16[1] & 0xFFFFFFFFFFFFFFFCLL | 2;
  *v16 = a4;
  v16[1] = v17;
  v18 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 40, 3);
  v19 = v18;
  *v18 = a2;
  v18[1] = a3;
  v20 = 0x1000000000000000;
  if (!a8)
    v20 = 0;
  v18[2] = v16;
  v18[3] = ((unint64_t)(a6 & 1) << 57) | ((unint64_t)(a7 & 3) << 58) | v20;
  v18[4] = a5;
  v22 = v18;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 232, &v22, (uint64_t)v23);
  return v19;
}

void *llvm::jitlink::LinkGraph::allocateContent(uint64_t a1, unsigned __int8 *a2)
{
  const void *v3;
  const void *v4;
  uint64_t v5;
  size_t v6;
  void *v7;
  void *v8;
  void *v10;
  __int128 v11;
  _QWORD v12[33];

  v12[32] = *MEMORY[0x24BDAC8D0];
  v10 = v12;
  v11 = xmmword_24AA2ACF0;
  llvm::Twine::toStringRef(a2, (uint64_t)&v10);
  v4 = v3;
  v6 = v5;
  v7 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v5, 0);
  v8 = v7;
  if (v6)
    memmove(v7, v4, v6);
  if (v10 != v12)
    free(v10);
  return v8;
}

void llvm::orc::StaticLibraryDefinitionGenerator::~StaticLibraryDefinitionGenerator(llvm::orc::StaticLibraryDefinitionGenerator *this)
{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_251C14E50;
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 232);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::~DenseMap((uint64_t)this + 208);
  v2 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 168, *((char **)this + 22));
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)this + 17);
  llvm::orc::DefinitionGenerator::~DefinitionGenerator(this);
}

{
  uint64_t v2;
  uint64_t v3;

  *(_QWORD *)this = &off_251C14E50;
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 232);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::~DenseMap((uint64_t)this + 208);
  v2 = *((_QWORD *)this + 25);
  *((_QWORD *)this + 25) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v3 = *((_QWORD *)this + 24);
  *((_QWORD *)this + 24) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  std::__tree<std::__value_type<std::string,unsigned int>,std::__map_value_compare<std::string,std::__value_type<std::string,unsigned int>,std::less<std::string>,true>,std::allocator<std::__value_type<std::string,unsigned int>>>::destroy((uint64_t)this + 168, *((char **)this + 22));
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)this + 17);
  llvm::orc::DefinitionGenerator::~DefinitionGenerator(this);
  JUMPOUT(0x24BD1B3A4);
}

BOOL llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a1, *(_QWORD *)(a1 + 8), *(void **)a2, *(_QWORD *)(a2 + 8));
  if (result)
    return llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)(a1 + 16), *(_QWORD *)(a1 + 24), *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
  return result;
}

uint64_t llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::~DenseMap(uint64_t a1)
{
  unsigned int v2;
  _QWORD *v3;
  _QWORD *v4;
  unint64_t *v5;
  unint64_t v6;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_QWORD **)a1;
  if (v2)
  {
    v4 = &v3[5 * v2];
    do
    {
      if ((unint64_t)(*v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v5 = (unint64_t *)(*v3 + 8);
        do
          v6 = __ldaxr(v5);
        while (__stlxr(v6 - 1, v5));
      }
      v3 += 5;
    }
    while (v3 != v4);
    v3 = *(_QWORD **)a1;
  }
  MEMORY[0x24BD1B398](v3, 8);
  return a1;
}

llvm::jitlink::LinkGraph *std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100](llvm::jitlink::LinkGraph **a1, llvm::jitlink::LinkGraph *a2)
{
  llvm::jitlink::LinkGraph *result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    llvm::jitlink::LinkGraph::~LinkGraph(result);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

void llvm::detail::provider_format_adapter<unsigned long &>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned long &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned long long,void>::format(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -8)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -16;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -8)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t *v16;
  unint64_t v17;
  __int128 v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -8;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = v4 + 40 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          v23 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>,llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::MemoryBufferRef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v23);
          v15 = v23;
          if ((unint64_t)(*v23 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v16 = (unint64_t *)(*v23 + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
          }
          *v15 = 0;
          *v15 = *(_QWORD *)v13;
          *(_QWORD *)v13 = 0;
          v18 = *(_OWORD *)(v13 + 8);
          *(_OWORD *)(v15 + 3) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v15 + 1) = v18;
          ++*(_DWORD *)(a1 + 8);
          v14 = *(_QWORD *)v13;
        }
        if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v19 = (unint64_t *)(v14 + 8);
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
        }
        v13 += 40;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v21 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v21)
  {
    v22 = 40 * v21;
    do
    {
      *result = -8;
      result += 5;
      v22 -= 40;
    }
    while (v22);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>,std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::LookupBucketFor<std::pair<llvm::StringRef,llvm::StringRef>>(uint64_t a1, int a2, uint64_t a3, unint64_t *a4)
{
  unsigned int v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  int v20;
  _BOOL4 isEqual;
  _OWORD v22[2];
  _OWORD v23[2];

  if (a2)
  {
    v23[0] = xmmword_24AA2AC20;
    v23[1] = xmmword_24AA2AC20;
    v22[0] = xmmword_24AA2DBB0;
    v22[1] = xmmword_24AA2DBB0;
    v8 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a3, *(_QWORD *)a3 + *(_QWORD *)(a3 + 8), a3, a4);
    v11 = llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)(a3 + 16), *(_QWORD *)(a3 + 16) + *(_QWORD *)(a3 + 24), v9, v10);
    v12 = (v11 | ((unint64_t)v8 << 32)) + ~(v11 << 32);
    v13 = 9
        * (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) ^ (((v12 ^ (v12 >> 22)) + ~((v12 ^ (v12 >> 22)) << 13)) >> 8));
    v14 = (v13 ^ (v13 >> 15)) + ~((v13 ^ (v13 >> 15)) << 27);
    v15 = a2 - 1;
    v16 = (a2 - 1) & ((v14 >> 31) ^ v14);
    v17 = a1 + 32 * v16;
    if (llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(a3, v17))
    {
      result = 1;
    }
    else
    {
      v19 = 0;
      v20 = 1;
      while (!llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(v17, (uint64_t)v23))
      {
        if (llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(v17, (uint64_t)v22) && v19 == 0)
          v19 = v17;
        v16 = ((_DWORD)v16 + v20) & v15;
        v17 = a1 + 32 * v16;
        isEqual = llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(a3, v17);
        result = 1;
        ++v20;
        if (isEqual)
          goto LABEL_4;
      }
      result = 0;
      if (v19)
        v17 = v19;
    }
LABEL_4:
    *a4 = v17;
  }
  else
  {
    result = 0;
    *a4 = 0;
  }
  return result;
}

uint64_t llvm::DenseMapIterator<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>,false>::AdvancePastEmptyBuckets(uint64_t *a1)
{
  uint64_t result;
  uint64_t v3;
  _OWORD v4[2];
  _OWORD v5[2];

  v5[0] = xmmword_24AA2AC20;
  v5[1] = xmmword_24AA2AC20;
  v4[0] = xmmword_24AA2DBB0;
  v4[1] = xmmword_24AA2DBB0;
  result = *a1;
  if (result != a1[1])
  {
    do
    {
      if (!llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(result, (uint64_t)v5))
      {
        result = llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual(*a1, (uint64_t)v4);
        if (!(_DWORD)result)
          break;
      }
      v3 = a1[1];
      result = *a1 + 32;
      *a1 = result;
    }
    while (result != v3);
  }
  return result;
}

_OWORD *llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  _OWORD *v11;
  uint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  uint64_t v15;
  _OWORD *v16;
  _OWORD v17[2];
  _OWORD v18[2];
  _OWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = &result[2 * v10];
      do
      {
        *result = xmmword_24AA2AC20;
        result[1] = xmmword_24AA2AC20;
        result += 2;
      }
      while (result != v11);
    }
    v18[0] = xmmword_24AA2AC20;
    v18[1] = xmmword_24AA2AC20;
    v17[0] = xmmword_24AA2DBB0;
    v17[1] = xmmword_24AA2DBB0;
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = (_OWORD *)v4;
      do
      {
        if (!llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual((uint64_t)v13, (uint64_t)v18)
          && !llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>::isEqual((uint64_t)v13, (uint64_t)v17))
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>,std::pair<llvm::StringRef,llvm::StringRef>,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<std::pair<llvm::StringRef,llvm::StringRef>,void>,llvm::detail::DenseSetPair<std::pair<llvm::StringRef,llvm::StringRef>>>::LookupBucketFor<std::pair<llvm::StringRef,llvm::StringRef>>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v13, (unint64_t *)&v19);
          v14 = v19;
          *v19 = *v13;
          v14[1] = v13[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = &result[2 * v15];
    do
    {
      *result = xmmword_24AA2AC20;
      result[1] = xmmword_24AA2AC20;
      result += 2;
    }
    while (result != v16);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::LookupBucketFor<unsigned long long>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 8 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 8 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::try_emplace<llvm::detail::DenseSetEmpty&>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  _QWORD *v10;

  v10 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::LookupBucketFor<unsigned long long>((uint64_t *)a1, a2, &v10);
  v7 = v10;
  if ((result & 1) != 0)
  {
    v8 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::InsertIntoBucketImpl<unsigned long long>(a1, (uint64_t)a2, a2, v10);
    v7 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    v8 = 1;
  }
  v9 = *(_QWORD *)a1 + 8 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v9;
  *(_BYTE *)(a3 + 16) = v8;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::InsertIntoBucketImpl<unsigned long long>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::LookupBucketFor<unsigned long long>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

void *llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  void *result;
  uint64_t v10;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::moveFromOldBuckets(a1, v4, &v4[v3]);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
    return memset(result, 255, 8 * v10);
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::moveFromOldBuckets(uint64_t result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
    result = (uint64_t)memset(*(void **)result, 255, 8 * v6);
  while (a2 != a3)
  {
    if (*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v7 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>,unsigned long long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseSetPair<unsigned long long>>::LookupBucketFor<unsigned long long>((uint64_t *)v5, a2, &v7);
      *v7 = *a2;
      ++*(_DWORD *)(v5 + 8);
    }
    ++a2;
  }
  return result;
}

_OWORD *std::__tree<std::string>::__emplace_unique_key_args<std::string,std::string>(uint64_t **a1, const void **a2, uint64_t a3)
{
  void **v5;
  _OWORD *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = (void **)std::__tree<std::string>::__find_equal<std::string>((uint64_t)a1, &v9, a2);
  v6 = *v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = operator new(0x38uLL);
    v6[2] = *(_OWORD *)a3;
    *((_QWORD *)v6 + 6) = *(_QWORD *)(a3 + 16);
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v9, v7, (uint64_t *)v6);
  }
  return v6;
}

double llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>,unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;

  v9 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    llvm::DenseMap<unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>::grow(a1, v8);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v6 != -1)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v6 = *a2;
  result = 0.0;
  *(_OWORD *)(v6 + 8) = 0u;
  *(_OWORD *)(v6 + 24) = 0u;
  return result;
}

_QWORD *llvm::DenseMap<unsigned long long,llvm::MemoryBufferRef,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::MemoryBufferRef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 40 * v10;
      do
      {
        *result = -1;
        result += 5;
        v11 -= 40;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 40 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          *v19 = *(_QWORD *)v13;
          v16 = *(_OWORD *)(v13 + 8);
          *(_OWORD *)(v15 + 3) = *(_OWORD *)(v13 + 24);
          *(_OWORD *)(v15 + 1) = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 40;
        v12 -= 40;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 40 * v17;
    do
    {
      *result = -1;
      result += 5;
      v18 -= 40;
    }
    while (v18);
  }
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Expected<llvm::orc::MaterializationUnit::Interface>,llvm::orc::ExecutionSession &,llvm::MemoryBufferRef>::CallImpl<llvm::Expected<llvm::orc::MaterializationUnit::Interface> (*)(llvm::orc::ExecutionSession &,llvm::MemoryBufferRef)>(uint64_t (**a1)(uint64_t, _OWORD *), uint64_t a2, _OWORD *a3)
{
  uint64_t (*v3)(uint64_t, _OWORD *);
  __int128 v4;
  _OWORD v6[2];

  v3 = *a1;
  v4 = a3[1];
  v6[0] = *a3;
  v6[1] = v4;
  return v3(a2, v6);
}

uint64_t llvm::Expected<std::unique_ptr<llvm::jitlink::LinkGraph>>::~Expected(uint64_t a1)
{
  llvm::jitlink::LinkGraph *v2;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v2 = *(llvm::jitlink::LinkGraph **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(llvm::jitlink::LinkGraph *))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)a1, 0);
  }
  return a1;
}

_QWORD *llvm::orc::addInitSymbol(uint64_t *a1, uint64_t a2, const void *a3, size_t a4)
{
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *result;
  void (**v16)(llvm::raw_string_ostream *__hidden);
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  void **p_p;
  void *__p;
  unint64_t v26;
  uint64_t v27;

  v8 = 0;
  v9 = a1 + 3;
  do
  {
    __p = 0;
    v26 = 0;
    v27 = 0;
    v17 = 0;
    v21 = 0;
    v22 = 0;
    v23 = 1;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v16 = &off_251C13AC0;
    p_p = &__p;
    llvm::raw_ostream::SetUnbuffered(&v16);
    if ((unint64_t)(v19 - v20) > 1)
    {
      *(_WORD *)v20 = 11812;
      v20 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v16, "$.", 2uLL);
    }
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v16, a3, a4);
    v10 = (_QWORD *)v20;
    if ((unint64_t)(v19 - v20) > 8)
    {
      *(_BYTE *)(v20 + 8) = 46;
      *v10 = *(_QWORD *)".__inits.";
      v20 += 9;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v16, ".__inits.", 9uLL);
    }
    write_unsigned<unsigned long>((llvm::raw_ostream *)&v16, v8, 0, 0, 0);
    v16 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
    if (v23 == 1 && v18)
      MEMORY[0x24BD1B380](v18, 0x1000C8077774924);
    if (v27 >= 0)
      v11 = (uint64_t *)&__p;
    else
      v11 = (uint64_t *)__p;
    if (v27 >= 0)
      v12 = HIBYTE(v27);
    else
      v12 = v26;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(a2 + 72), v11, v12, (unint64_t **)&v16);
    if ((unint64_t)(*v9 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v13 = (unint64_t *)(*v9 + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
    }
    *v9 = (uint64_t)v16;
    if (SHIBYTE(v27) < 0)
      operator delete(__p);
    ++v8;
    v16 = 0;
  }
  while ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, v9, &v16) & 1) != 0);
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(a1, v9);
  *((_WORD *)result + 4) = 0x4000;
  return result;
}

uint64_t llvm::orc::getObjectFileInterface@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v5;
  llvm::object::COFFObjectFile *v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  size_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  _BYTE *v42;
  uint64_t *v43;
  _BYTE *v44;
  uint64_t v45;
  _QWORD *v46;
  unint64_t *v47;
  unint64_t v48;
  _BYTE *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  _BYTE *v63;
  _QWORD *v64;
  unint64_t *v65;
  unint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  _BYTE *v69;
  uint64_t v70;
  int v71;
  _BYTE *v72;
  _QWORD *v73;
  unint64_t *v74;
  unint64_t v75;
  _BYTE *v76;
  uint64_t v77;
  _BYTE *v78;
  unsigned int v79;
  _BYTE *v80;
  _BYTE *v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  int v92;
  _BYTE *v93;
  int v94;
  int v95;
  char *v96;
  int v97;
  char v98;
  char v99;
  unsigned __int8 *v100;
  int v101;
  char v102;
  _QWORD *v103;
  unint64_t *v104;
  unint64_t v105;
  unsigned int v106;
  uint64_t v107;
  _BYTE *v108;
  char *v109;
  int v110;
  __int16 v111;
  _BYTE *v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v119;
  uint64_t v120;
  char v121;
  unint64_t *v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t *v127;
  unint64_t v128;
  _BYTE *v129;
  unint64_t *v130;
  unint64_t v131;
  uint64_t result;
  _BYTE *v133;
  _BYTE *v134;
  unint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  __int128 v138;
  __int128 v139;
  uint64_t v140;
  char v141;
  uint64_t v142;
  char v143;
  _BYTE *v144;
  size_t v145;
  char v146;
  _BYTE *v147;
  char v148;
  uint64_t v149;

  v149 = *MEMORY[0x24BDAC8D0];
  v5 = a2[1];
  v138 = *a2;
  v139 = v5;
  llvm::object::ObjectFile::createObjectFile((uint64_t)&v138, 0);
  v6 = (llvm::object::COFFObjectFile *)v140;
  if ((v141 & 1) != 0)
  {
    v140 = 0;
    *(_BYTE *)(a3 + 32) |= 1u;
    *(_QWORD *)a3 = v6;
    goto LABEL_259;
  }
  v7 = *(_DWORD *)(v140 + 8);
  if (v140)
    v8 = (v7 - 21) >= 0xFFFFFFFC;
  else
    v8 = 0;
  if (v8)
  {
    v138 = 0uLL;
    LODWORD(v139) = 0;
    *((_QWORD *)&v139 + 1) = 0;
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 48))(v140);
    v25 = v24;
    v26 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v6 + 56))(v6);
    v136 = v23;
    v137 = v25;
    if (v23 == v26)
    {
LABEL_27:
      v27 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v6 + 352))(v6);
      v29 = v28;
      v30 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v6 + 360))(v6);
      v136 = v27;
      v137 = v29;
      if (v29 != v31 || v27 != v30)
      {
        v33 = v30;
        v34 = v31;
        while (getSectionFlags(v6, v27) != 9)
        {
          v35 = *(_QWORD *)(*((_QWORD *)v6 + 10) + 8 * v136);
          v36 = (char *)(v35 + 16);
          v37 = *(_BYTE *)(v35 + 31) ? 16 : strlen(v36);
          (*(void (**)(_BYTE **__return_ptr, llvm::object::COFFObjectFile *, uint64_t))(*(_QWORD *)v6 + 144))(&v144, v6, v136);
          if ((llvm::orc::isMachOInitializerSection(v36, v37, v144, v145) & 1) != 0)
            break;
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v137 + 136))(v137, &v136);
          LODWORD(v27) = v136;
          if (v137 == v34 && v136 == v33)
            goto LABEL_80;
        }
        llvm::orc::addInitSymbol((uint64_t *)&v138, a1, *((const void **)v6 + 4), *((_QWORD *)v6 + 5));
      }
LABEL_80:
      v50 = 0;
      *(_BYTE *)(a3 + 32) &= ~1u;
      *(_QWORD *)a3 = v138;
      *(_DWORD *)(a3 + 16) = v139;
      *(_QWORD *)(a3 + 24) = *((_QWORD *)&v139 + 1);
      *(_QWORD *)(a3 + 8) = *((_QWORD *)&v138 + 1);
      v138 = 0uLL;
      LODWORD(v139) = 0;
      *((_QWORD *)&v139 + 1) = 0;
LABEL_81:
      if ((unint64_t)(v50 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v51 = (unint64_t *)(v50 + 8);
        do
          v52 = __ldaxr(v51);
        while (__stlxr(v52 - 1, v51));
      }
      goto LABEL_258;
    }
    v40 = v26;
    while (1)
    {
      (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 40))(&v147, v137, v23);
      if ((v148 & 1) != 0)
        break;
      if ((v147 & 3) != 2)
        goto LABEL_51;
      (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 120))(&v144, v137, v136);
      if ((v145 & 1) != 0)
        goto LABEL_58;
      if ((_DWORD)v144 != 4)
      {
        (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 80))(&v144, v137, v136);
        if ((v146 & 1) != 0)
        {
LABEL_58:
          v42 = v144;
          goto LABEL_59;
        }
        llvm::JITSymbolFlags::fromObjectSymbol(&v136, (uint64_t)&v142);
        if ((v143 & 1) != 0)
        {
          v45 = v142;
          *(_BYTE *)(a3 + 32) |= 1u;
          *(_QWORD *)a3 = v45;
          v41 = 1;
        }
        else
        {
          if (v145)
          {
            v43 = (uint64_t *)v144;
            if (*v144 == 108)
              BYTE1(v142) &= 0x6Fu;
          }
          else
          {
            v43 = (uint64_t *)v144;
          }
          llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(a1 + 72), v43, v145, &v135);
          v46 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v138, &v135);
          *((_WORD *)v46 + 4) = v142;
          if ((unint64_t)v135 - 1 < 0xFFFFFFFFFFFFFFE0)
          {
            v47 = v135 + 1;
            do
              v48 = __ldaxr(v47);
            while (__stlxr(v48 - 1, v47));
            if ((v143 & 1) != 0 && v142)
              (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
          }
          v41 = 0;
        }
        if ((v146 & 1) != 0)
        {
          v49 = v144;
          v144 = 0;
          if (v49)
            (*(void (**)(_BYTE *))(*(_QWORD *)v49 + 8))(v49);
        }
      }
      else
      {
LABEL_51:
        v41 = 3;
      }
LABEL_60:
      if ((v148 & 1) != 0)
      {
        v44 = v147;
        v147 = 0;
        if (v44)
          (*(void (**)(_BYTE *))(*(_QWORD *)v44 + 8))(v44);
      }
      if (v41 != 3 && v41)
      {
        v50 = *((_QWORD *)&v139 + 1);
        goto LABEL_81;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v137 + 24))(v137, &v136);
      v23 = v136;
      if (v136 == v40)
        goto LABEL_27;
    }
    v42 = v147;
    v147 = 0;
LABEL_59:
    *(_BYTE *)(a3 + 32) |= 1u;
    *(_QWORD *)a3 = v42;
    v41 = 1;
    goto LABEL_60;
  }
  if (!v140 || (v7 - 17) < 0xFFFFFFFC)
  {
    if (v140 && v7 == 10)
    {
      v138 = 0uLL;
      LODWORD(v139) = 0;
      *((_QWORD *)&v139 + 1) = 0;
      v38 = *(_QWORD *)(v140 + 48);
      if (v38)
      {
        v39 = *(unsigned __int16 *)(v38 + 2);
        if (v39 == 0xFFFF)
          v39 = 0;
      }
      else
      {
        v39 = *(_DWORD *)(*(_QWORD *)(v140 + 56) + 44);
      }
      v79 = v39 + 1;
      if (v39 == -1)
      {
        v80 = 0;
      }
      else
      {
        v80 = operator new(19 * v79);
        v81 = v80;
        do
        {
          *v81 = 0;
          v81[18] = 0;
          v81 += 19;
        }
        while (v81 != &v80[19 * v79]);
      }
      v82 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v6 + 48))(v6);
      v84 = v83;
      v85 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v6 + 56))(v6);
      v136 = v82;
      v137 = v84;
      if (v82 == v85)
      {
LABEL_223:
        v113 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v6 + 352))(v6);
        v115 = v114;
        v116 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v6 + 360))(v6);
        v136 = v113;
        v137 = v115;
        if (v115 == v117 && v113 == v116)
        {
          v121 = *(_BYTE *)(a3 + 32);
          goto LABEL_238;
        }
        v119 = v116;
        v120 = v117;
        v121 = *(_BYTE *)(a3 + 32);
        while (1)
        {
          (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v115 + 144))(&v144, v115, v113);
          if ((v146 & 1) != 0)
            break;
          if (v145 >= 4 && *(_DWORD *)v144 == *(_DWORD *)".CRT")
          {
            llvm::orc::addInitSymbol((uint64_t *)&v138, a1, *((const void **)v6 + 4), *((_QWORD *)v6 + 5));
            if ((v146 & 1) != 0)
            {
              v134 = v144;
              v144 = 0;
              if (v134)
                (*(void (**)(_BYTE *))(*(_QWORD *)v134 + 8))(v134);
            }
LABEL_238:
            *(_BYTE *)(a3 + 32) = v121 & 0xFE;
            *(_OWORD *)a3 = v138;
            v138 = 0uLL;
            *(_DWORD *)(a3 + 16) = v139;
            LODWORD(v139) = 0;
            *(_QWORD *)(a3 + 24) = *((_QWORD *)&v139 + 1);
            *((_QWORD *)&v139 + 1) = 0;
LABEL_239:
            if (v80)
LABEL_240:
              operator delete(v80);
LABEL_241:
            if ((unint64_t)(*((_QWORD *)&v139 + 1) - 1) <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v123 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
              do
                v124 = __ldaxr(v123);
              while (__stlxr(v124 - 1, v123));
            }
            goto LABEL_258;
          }
          (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v137 + 136))(v137, &v136);
          v113 = v136;
          v115 = v137;
          if (v137 == v120 && v136 == v119)
            goto LABEL_238;
        }
        v133 = v144;
        *(_BYTE *)(a3 + 32) = v121 | 1;
        *(_QWORD *)a3 = v133;
        if (v80)
          goto LABEL_240;
        goto LABEL_241;
      }
      v86 = v85;
      while (1)
      {
        (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 40))(&v147, v137, v82);
        if ((v148 & 1) != 0)
        {
          v93 = v147;
          v147 = 0;
          goto LABEL_169;
        }
        v87 = *((_QWORD *)v6 + 12);
        if (v87)
          v88 = v136;
        else
          v88 = 0;
        if (v87)
          v89 = 0;
        else
          v89 = v136;
        if (v88)
        {
          if (!*(_BYTE *)(v88 + 17) || *(_BYTE *)(v88 + 16) != 3)
            goto LABEL_177;
          v90 = v88 + 18;
          v91 = *(unsigned __int16 *)(v88 + 12);
          if (v91 >> 8 <= 0xFE)
            v92 = *(unsigned __int16 *)(v88 + 12);
          else
            v92 = (__int16)v91;
        }
        else
        {
          if (!*(_BYTE *)(v89 + 19) || *(_BYTE *)(v89 + 18) != 3)
            goto LABEL_179;
          v90 = v89 + 20;
          v92 = *(_DWORD *)(v89 + 12);
        }
        llvm::object::COFFObjectFile::getSection(v6, v92, (uint64_t)&v144);
        v93 = v144;
        if ((v145 & 1) != 0)
          goto LABEL_169;
        if ((v144[37] & 0x10) != 0 && *(_BYTE *)(v90 + 14) != 5)
        {
          if (v88)
          {
            v106 = *(unsigned __int16 *)(v88 + 12);
            if (v106 >> 8 > 0xFE)
              v106 = (__int16)v106;
          }
          else
          {
            v106 = *(_DWORD *)(v89 + 12);
          }
          v109 = &v80[19 * v106];
          v110 = v109[18];
          v111 = *(_WORD *)(v90 + 16);
          *(_OWORD *)v109 = *(_OWORD *)v90;
          *((_WORD *)v109 + 8) = v111;
          if (!v110)
            v109[18] = 1;
          goto LABEL_216;
        }
        if (!v88)
        {
LABEL_179:
          v95 = *(_DWORD *)(v89 + 12);
          if (v95 < 1)
            goto LABEL_183;
          goto LABEL_180;
        }
LABEL_177:
        v95 = *(unsigned __int16 *)(v88 + 12);
        if ((unsigned __int16)(v95 + 256) < 0x101u)
          goto LABEL_183;
LABEL_180:
        if (v80[19 * v95 + 18])
        {
          v96 = &v80[19 * v95];
          v97 = v96[14] != 1;
          v96[18] = 0;
          if ((v147 & 2) == 0)
            goto LABEL_216;
          goto LABEL_185;
        }
LABEL_183:
        if ((v147 & 1) != 0)
          goto LABEL_216;
        v97 = 0;
        if ((v147 & 2) == 0)
          goto LABEL_216;
LABEL_185:
        (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 120))(&v144, v137, v136);
        if ((v145 & 1) != 0)
          goto LABEL_204;
        if ((_DWORD)v144 != 4)
        {
          (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 80))(&v144, v137, v136);
          if ((v146 & 1) == 0)
          {
            llvm::JITSymbolFlags::fromObjectSymbol(&v136, (uint64_t)&v142);
            if ((v143 & 1) != 0)
            {
              v107 = v142;
              *(_BYTE *)(a3 + 32) |= 1u;
              *(_QWORD *)a3 = v107;
              v94 = 1;
            }
            else
            {
              v98 = BYTE1(v142);
              v99 = BYTE1(v142) | 0x10;
              BYTE1(v142) |= 0x10u;
              v100 = (unsigned __int8 *)(v88 + 16);
              if (!v88)
                v100 = (unsigned __int8 *)(v89 + 18);
              v101 = *v100;
              if (((v101 != 105) & ~v97) == 0)
              {
                v102 = v98 | 0x30;
                if (v101 == 105)
                  v99 = v102;
                if (v97)
                  v99 |= 2u;
                BYTE1(v142) = v99;
              }
              llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(a1 + 72), (uint64_t *)v144, v145, &v135);
              v103 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v138, &v135);
              *((_WORD *)v103 + 4) = v142;
              if ((unint64_t)v135 - 1 < 0xFFFFFFFFFFFFFFE0)
              {
                v104 = v135 + 1;
                do
                  v105 = __ldaxr(v104);
                while (__stlxr(v105 - 1, v104));
                if ((v143 & 1) != 0 && v142)
                  (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
              }
              v94 = 0;
            }
            if ((v146 & 1) != 0)
            {
              v108 = v144;
              v144 = 0;
              if (v108)
                (*(void (**)(_BYTE *))(*(_QWORD *)v108 + 8))(v108);
            }
            goto LABEL_217;
          }
LABEL_204:
          v93 = v144;
LABEL_169:
          *(_BYTE *)(a3 + 32) |= 1u;
          *(_QWORD *)a3 = v93;
          v94 = 1;
          goto LABEL_217;
        }
LABEL_216:
        v94 = 3;
LABEL_217:
        if ((v148 & 1) != 0)
        {
          v112 = v147;
          v147 = 0;
          if (v112)
            (*(void (**)(_BYTE *))(*(_QWORD *)v112 + 8))(v112);
        }
        if (v94 != 3 && v94)
          goto LABEL_239;
        (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v137 + 24))(v137, &v136);
        v82 = v136;
        if (v136 == v86)
          goto LABEL_223;
      }
    }
    v138 = 0uLL;
    LODWORD(v139) = 0;
    *((_QWORD *)&v139 + 1) = 0;
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 48))(v140);
    v55 = v54;
    v56 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v6 + 56))(v6);
    v136 = v53;
    v137 = v55;
    if (v53 == v56)
    {
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v60 = 0;
LABEL_246:
      v126 = 0;
      *(_BYTE *)(a3 + 32) &= ~1u;
      *(_QWORD *)a3 = v59;
      v138 = 0uLL;
      *(_QWORD *)(a3 + 8) = v60;
      *(_DWORD *)(a3 + 16) = v58;
      LODWORD(v139) = 0;
      *(_QWORD *)(a3 + 24) = v57;
      *((_QWORD *)&v139 + 1) = 0;
      goto LABEL_247;
    }
    v70 = v56;
    while (1)
    {
      (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 40))(&v147, v137, v53);
      if ((v148 & 1) != 0)
      {
        v72 = v147;
        v147 = 0;
      }
      else
      {
        if ((v147 & 3) != 2)
          goto LABEL_124;
        (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 120))(&v144, v137, v136);
        if ((v145 & 1) == 0)
        {
          if ((_DWORD)v144 == 4)
          {
LABEL_124:
            v71 = 3;
            goto LABEL_137;
          }
          (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 80))(&v144, v137, v136);
          if ((v146 & 1) == 0)
          {
            llvm::JITSymbolFlags::fromObjectSymbol(&v136, (uint64_t)&v142);
            if ((v143 & 1) != 0)
            {
              v77 = v142;
              *(_BYTE *)(a3 + 32) |= 1u;
              *(_QWORD *)a3 = v77;
              v71 = 1;
            }
            else
            {
              llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(a1 + 72), (uint64_t *)v144, v145, &v135);
              v73 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v138, &v135);
              *((_WORD *)v73 + 4) = v142;
              if ((unint64_t)v135 - 1 < 0xFFFFFFFFFFFFFFE0)
              {
                v74 = v135 + 1;
                do
                  v75 = __ldaxr(v74);
                while (__stlxr(v75 - 1, v74));
                if ((v143 & 1) != 0 && v142)
                  (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
              }
              v71 = 0;
            }
            if ((v146 & 1) != 0)
            {
              v78 = v144;
              v144 = 0;
              if (v78)
                (*(void (**)(_BYTE *))(*(_QWORD *)v78 + 8))(v78);
            }
            goto LABEL_137;
          }
        }
        v72 = v144;
      }
      *(_BYTE *)(a3 + 32) |= 1u;
      *(_QWORD *)a3 = v72;
      v71 = 1;
LABEL_137:
      if ((v148 & 1) != 0)
      {
        v76 = v147;
        v147 = 0;
        if (v76)
          (*(void (**)(_BYTE *))(*(_QWORD *)v76 + 8))(v76);
      }
      if (v71 != 3 && v71)
      {
        v126 = *((_QWORD *)&v139 + 1);
LABEL_247:
        if ((unint64_t)(v126 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v127 = (unint64_t *)(v126 + 8);
          do
            v128 = __ldaxr(v127);
          while (__stlxr(v128 - 1, v127));
        }
        goto LABEL_258;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v137 + 24))(v137, &v136);
      v53 = v136;
      if (v136 == v70)
      {
        v60 = *((_QWORD *)&v138 + 1);
        v59 = v138;
        v58 = v139;
        v57 = *((_QWORD *)&v139 + 1);
        goto LABEL_246;
      }
    }
  }
  v138 = 0uLL;
  LODWORD(v139) = 0;
  *((_QWORD *)&v139 + 1) = 0;
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v140 + 48))(v140);
  v11 = v10;
  v12 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v6 + 56))(v6);
  v136 = v9;
  v137 = v11;
  if (v9 != v12)
  {
    v61 = v12;
    do
    {
      (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 40))(&v147, v137, v9);
      if ((v148 & 1) != 0)
      {
        v63 = v147;
        v147 = 0;
      }
      else
      {
        if ((v147 & 3) != 2)
          goto LABEL_92;
        (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 120))(&v144, v137, v136);
        if ((v145 & 1) == 0)
        {
          if ((_DWORD)v144 == 4)
          {
LABEL_92:
            v62 = 3;
            goto LABEL_107;
          }
          (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 80))(&v144, v137, v136);
          if ((v146 & 1) == 0)
          {
            llvm::JITSymbolFlags::fromObjectSymbol(&v136, (uint64_t)&v142);
            if ((v143 & 1) != 0)
            {
              v68 = v142;
              *(_BYTE *)(a3 + 32) |= 1u;
              *(_QWORD *)a3 = v68;
              v62 = 1;
            }
            else
            {
              if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 456))(v137, v136) == 10)
                BYTE1(v142) |= 2u;
              llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(a1 + 72), (uint64_t *)v144, v145, &v135);
              v64 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v138, &v135);
              *((_WORD *)v64 + 4) = v142;
              if ((unint64_t)v135 - 1 < 0xFFFFFFFFFFFFFFE0)
              {
                v65 = v135 + 1;
                do
                  v66 = __ldaxr(v65);
                while (__stlxr(v66 - 1, v65));
                if ((v143 & 1) != 0 && v142)
                  (*(void (**)(uint64_t))(*(_QWORD *)v142 + 8))(v142);
              }
              v62 = 0;
            }
            if ((v146 & 1) != 0)
            {
              v69 = v144;
              v144 = 0;
              if (v69)
                (*(void (**)(_BYTE *))(*(_QWORD *)v69 + 8))(v69);
            }
            goto LABEL_107;
          }
        }
        v63 = v144;
      }
      *(_BYTE *)(a3 + 32) |= 1u;
      *(_QWORD *)a3 = v63;
      v62 = 1;
LABEL_107:
      if ((v148 & 1) != 0)
      {
        v67 = v147;
        v147 = 0;
        if (v67)
          (*(void (**)(_BYTE *))(*(_QWORD *)v67 + 8))(v67);
      }
      if (v62 != 3 && v62)
      {
        v125 = *((_QWORD *)&v139 + 1);
        goto LABEL_255;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v137 + 24))(v137, &v136);
      v9 = v136;
    }
    while (v136 != v61);
  }
  v13 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v6 + 352))(v6);
  v15 = v14;
  v16 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v6 + 360))(v6);
  v136 = v13;
  v137 = v15;
  if (v15 == v17 && v13 == v16)
    goto LABEL_254;
  v19 = v16;
  v20 = v17;
  while (1)
  {
    (*(void (**)(_BYTE **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v15 + 144))(&v144, v15, v13);
    if ((v146 & 1) != 0)
    {
      v21 = v144;
      v144 = 0;
      if (v21)
        (*(void (**)(_BYTE *))(*(_QWORD *)v21 + 8))(v21);
      goto LABEL_19;
    }
    if (llvm::orc::isELFInitializerSection((uint64_t)v144, v145))
      break;
LABEL_19:
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v137 + 136))(v137, &v136);
    v13 = v136;
    v15 = v137;
    if (v137 == v20 && v136 == v19)
      goto LABEL_254;
  }
  llvm::orc::addInitSymbol((uint64_t *)&v138, a1, *((const void **)v6 + 4), *((_QWORD *)v6 + 5));
  if ((v146 & 1) != 0)
  {
    v129 = v144;
    v144 = 0;
    if (v129)
      (*(void (**)(_BYTE *))(*(_QWORD *)v129 + 8))(v129);
  }
LABEL_254:
  v125 = 0;
  *(_BYTE *)(a3 + 32) &= ~1u;
  *(_QWORD *)a3 = v138;
  *(_DWORD *)(a3 + 16) = v139;
  *(_QWORD *)(a3 + 24) = *((_QWORD *)&v139 + 1);
  *(_QWORD *)(a3 + 8) = *((_QWORD *)&v138 + 1);
  v138 = 0uLL;
  LODWORD(v139) = 0;
  *((_QWORD *)&v139 + 1) = 0;
LABEL_255:
  if ((unint64_t)(v125 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v130 = (unint64_t *)(v125 + 8);
    do
      v131 = __ldaxr(v130);
    while (__stlxr(v131 - 1, v130));
  }
LABEL_258:
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v138);
LABEL_259:
  result = v140;
  v140 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
    return llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>((uint64_t)a1, v7, a2);
  return v5;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucket<llvm::orc::SymbolStringPtr>(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  _QWORD *result;
  unint64_t *v5;
  unint64_t v6;

  result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::InsertIntoBucketImpl<llvm::orc::SymbolStringPtr>(a1, (uint64_t)a3, a3, a2);
  if ((unint64_t)(*result - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v5 = (unint64_t *)(*result + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
  }
  *result = 0;
  *result = *a3;
  *a3 = 0;
  *((_WORD *)result + 4) = 0;
  return result;
}

uint64_t llvm::Function::args(llvm::Function *this)
{
  uint64_t v2;

  if ((*((_WORD *)this + 9) & 1) == 0)
    return *((_QWORD *)this + 11);
  llvm::Function::BuildLazyArguments(this);
  v2 = *((_QWORD *)this + 11);
  if ((*((_WORD *)this + 9) & 1) != 0)
    llvm::Function::BuildLazyArguments(this);
  return v2;
}

uint64_t *llvm::IRBuilderBase::CreateCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t a6, llvm::MDNode *a7)
{
  uint64_t v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  int v15;
  _BYTE v17[32];
  __int16 v18;

  v11 = *(_QWORD *)(a1 + 104);
  v12 = *(_QWORD *)(a1 + 112);
  v18 = 257;
  v13 = llvm::CallInst::Create(a2, a3, a4, a5, v11, v12, (const llvm::Twine *)v17, 0);
  v14 = (uint64_t)v13;
  if (*(_BYTE *)(a1 + 100))
    *((_QWORD *)v13 + 8) = llvm::AttributeList::addAttributeAtIndex((uint64_t **)v13 + 8, **(uint64_t ***)v13, -1, 62);
  if (llvm::FPMathOperator::classof(v14))
  {
    v15 = *(_DWORD *)(a1 + 96);
    if (a7 || (a7 = *(llvm::MDNode **)(a1 + 88)) != 0)
      llvm::Value::setMetadata(v14, 3, a7);
    *(_BYTE *)(v14 + 17) |= 2 * (_BYTE)v15;
  }
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, (uint64_t *)v14, a6);
}

void llvm::orc::addFunctionPointerRelocationsToCurrentSymbol(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v24;
  char v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v36;
  _QWORD v38[4];
  _QWORD v39[2];
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  void (**v43)(llvm::raw_ostream *__hidden);
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  int v50;
  llvm::formatv_object_base *v51;
  __int16 v52;
  _QWORD v53[2];
  void *v54;
  uint64_t v55;
  _BYTE v56[160];
  uint64_t v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  _QWORD v62[2];

  v62[0] = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 144) == 38)
  {
    v44 = 0;
    v48 = 0;
    v49 = 0;
    v50 = 1;
    v46 = 0;
    v47 = 0;
    v45 = 0;
    v43 = (void (**)(llvm::raw_ostream *__hidden))&off_251C13A40;
    v36 = a3[2];
    v7 = (_QWORD *)a1[2];
    v8 = *v7;
    v9 = a1[3] & 0x1FFFFFFFFFFFFFFLL;
    v10 = v7[3];
    if (a1[4])
      v11 = a1[4];
    else
      v11 = v7[4] - v9;
    v57 = 1;
    *(_QWORD *)&v12 = -1;
    *((_QWORD *)&v12 + 1) = -1;
    v61 = v12;
    v60 = v12;
    v58 = v12;
    v59 = v12;
    v13 = v7[5];
    v14 = v7[6];
    v34 = v7;
    if (v13 != v14)
    {
      while (1)
      {
        if (*(unsigned __int8 *)(v13 + 24) >= 2u)
        {
          v15 = *(unsigned int *)(v13 + 8);
          v53[0] = 0;
          if ((llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::LookupBucketFor<unsigned long>((uint64_t)&v57, v15, v53) & 1) == 0)break;
        }
LABEL_16:
        v13 += 32;
        if (v13 == v14)
          goto LABEL_21;
      }
      v16 = v57 >> 1;
      if ((v57 & 1) != 0)
        v17 = 8;
      else
        v17 = DWORD2(v58);
      if (4 * v16 + 4 >= 3 * v17)
      {
        v17 *= 2;
      }
      else if (v17 + ~v16 - HIDWORD(v57) > v17 >> 3)
      {
LABEL_13:
        LODWORD(v57) = v57 + 2;
        if (*(_QWORD *)v53[0] != -1)
          --HIDWORD(v57);
        *(_QWORD *)v53[0] = v15;
        goto LABEL_16;
      }
      llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::grow((uint64_t)&v57, v17);
      v53[0] = 0;
      llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::LookupBucketFor<unsigned long>((uint64_t)&v57, v15, v53);
      goto LABEL_13;
    }
LABEL_21:
    if (v11)
    {
      v18 = 0;
      v19 = v9 + v8;
      v20 = v10 + v9;
      while (1)
      {
        v53[0] = 0;
        v53[1] = 0;
        v54 = v56;
        v55 = 0xA00000000;
        v41 = v18 + v19;
        v42 = 0;
        if ((*(unsigned int (**)(_QWORD *, _QWORD *, uint64_t *, unint64_t, unint64_t))(*a3 + 16))(a3, v53, &v42, v20 + v18, v11 - v18) == 3)
        {
          v18 += v42;
          v21 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)a4 + 112))(a4, v53, v36, v41);
          if (!v22 || v21 != v19)
            goto LABEL_39;
          v24 = (*(uint64_t (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)a4 + 120))(a4, v53, v42);
          if (!v25 || v42 - v24 != 4)
            goto LABEL_39;
          v26 = v24 - v19 + v41 + (a1[3] & 0x1FFFFFFFFFFFFFFLL);
          v38[0] = 0;
          if (llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::LookupBucketFor<unsigned long>((uint64_t)&v57, v26, v38))
          {
            v27 = (_QWORD *)v38[0];
            v28 = v58;
            v29 = DWORD2(v58);
            v30 = v57 & 1;
          }
          else
          {
            v30 = v57 & 1;
            v28 = v58;
            v29 = DWORD2(v58);
            v27 = (_QWORD *)(v58 + 8 * DWORD2(v58));
            if ((v57 & 1) != 0)
              v27 = v62;
          }
          v33 = (_QWORD *)(v28 + 8 * v29);
          if (v30)
            v33 = v62;
          if (v33 == v27)
          {
            llvm::jitlink::Block::addEdge(v34, 7, v26, (uint64_t)a1, -4);
            v31 = 0;
          }
          else
          {
LABEL_39:
            v31 = 6;
          }
        }
        else
        {
          v38[0] = "failed to disassemble at address {0:x16}";
          v38[1] = 40;
          v31 = 1;
          v38[2] = &v40;
          v38[3] = 1;
          v39[0] = &off_251C14EA8;
          v39[1] = &v41;
          v40 = v39;
          getErrorErrorCat();
          v32 = operator new();
          v52 = 262;
          v51 = (llvm::formatv_object_base *)v38;
          *(_QWORD *)v32 = off_251C127D0;
          llvm::Twine::str(&v51, (std::string *)(v32 + 8));
          *(_QWORD *)(v32 + 32) = 3;
          *(_QWORD *)(v32 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
          *(_BYTE *)(v32 + 48) = 1;
          *a5 = v32;
        }
        if (v54 != v56)
          free(v54);
        if (v31 != 6 && v31)
          break;
        if (v18 >= v11)
          goto LABEL_47;
      }
    }
    else
    {
LABEL_47:
      *a5 = 0;
    }
    if ((v57 & 1) == 0)
      MEMORY[0x24BD1B398](v58, 8);
    v43 = off_251C13948;
    if (v50 == 1)
    {
      if (v45)
        MEMORY[0x24BD1B380](v45, 0x1000C8077774924);
    }
  }
  else
  {
    *a5 = 0;
  }
}

uint64_t *llvm::IRBuilderBase::CreateAlignedLoad(uint64_t *a1, llvm::Type *a2, llvm::Value *a3, __int16 a4, __int16 a5, uint64_t a6)
{
  char v8;
  char v12;
  char *v13;
  uint64_t *v14;
  _BYTE v16[32];
  __int16 v17;

  v8 = a4;
  if ((a4 & 0xFF00) == 0)
  {
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a1[6] + 56) + 40) + 256, (uint64_t)a2);
    v8 = v12;
  }
  v13 = (char *)operator new(0x60uLL);
  *((_DWORD *)v13 + 13) = *((_DWORD *)v13 + 13) & 0x38000000 | 1;
  v14 = (uint64_t *)(v13 + 32);
  *(_QWORD *)v13 = 0;
  *((_QWORD *)v13 + 1) = 0;
  *((_QWORD *)v13 + 2) = 0;
  *((_QWORD *)v13 + 3) = v13 + 32;
  v17 = 257;
  llvm::LoadInst::LoadInst((llvm::UnaryInstruction *)(v13 + 32), a2, a3, (const llvm::Twine *)v16, a5, v8, 0);
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>(a1, v14, a6);
}

uint64_t *llvm::IRBuilderBase::Insert<llvm::LoadInst>(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1[10] + 16))(a1[10], a2, a3, a1[6], a1[7]);
  v5 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v5)
  {
    v6 = *a1;
    v7 = v6 + 16 * v5;
    do
    {
      llvm::Instruction::setMetadata(a2, *(_DWORD *)v6, *(llvm::MDNode **)(v6 + 8));
      v6 += 16;
    }
    while (v6 != v7);
  }
  return a2;
}

char *llvm::CallInst::Create(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6, const llvm::Twine *a7, uint64_t *a8)
{
  int v16;
  uint64_t v17;
  _QWORD *v18;
  int v19;
  char *v20;
  char *v21;
  unsigned int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;

  v16 = 0;
  if (a6)
  {
    v17 = 48 * a6;
    v18 = (_QWORD *)(a5 + 32);
    do
    {
      v16 += (*v18 - *(v18 - 1)) >> 3;
      v18 += 6;
      v17 -= 48;
    }
    while (v17);
  }
  v19 = a4 + 1;
  v20 = llvm::User::operator new((llvm::User *)0x50, v16 + (int)a4 + 1, 16 * (int)a6);
  v21 = v20;
  if (a6)
  {
    v22 = 0;
    v23 = 48 * a6;
    v24 = (_QWORD *)(a5 + 32);
    do
    {
      v22 += (*v24 - *(v24 - 1)) >> 3;
      v24 += 6;
      v23 -= 48;
    }
    while (v23);
    v25 = 48 * a6;
    v26 = (_QWORD *)(a5 + 32);
    do
    {
      LODWORD(v23) = v23 + ((*v26 - *(v26 - 1)) >> 3);
      v26 += 6;
      v25 -= 48;
    }
    while (v25);
    v27 = a4 + v22;
  }
  else
  {
    LODWORD(v23) = 0;
    v27 = a4;
  }
  v28 = llvm::Instruction::Instruction((uint64_t)v20, **(_QWORD **)(a1 + 16), 56, (uint64_t)&v20[32 * ~v27], (int)v23 + v19, a8);
  *((_QWORD *)v21 + 8) = 0;
  llvm::CallInst::init(v28, a1, a2, a3, a4, a5, a6, a7);
  return v21;
}

BOOL llvm::FPMathOperator::classof(uint64_t a1)
{
  unsigned int v1;
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1)
  {
    v2 = v1 - 28;
    if (v1 >= 0x1C)
    {
LABEL_6:
      if (v2 <= 0x39)
      {
        if (((1 << v2) & 0x40000001255000) != 0)
          return 1;
        if (((1 << v2) & 0x380000000000000) != 0)
        {
          do
          {
            v4 = *(_QWORD *)a1;
            v5 = *(unsigned __int8 *)(*(_QWORD *)a1 + 8);
            a1 = *(_QWORD *)a1 + 24;
            if (v4)
              v6 = v5 == 17;
            else
              v6 = 0;
          }
          while (v6);
          if ((v5 & 0xFE) == 0x12)
            v5 = *(_DWORD *)(**(_QWORD **)(v4 + 16) + 8);
          if (v5 >= 6u || ((0x2Fu >> v5) & 1) == 0)
            return (v5 & 0xFD) == 4;
          return 1;
        }
      }
      return 0;
    }
  }
  v3 = 0;
  if (a1 && v1 == 5)
  {
    v2 = *(unsigned __int16 *)(a1 + 18);
    goto LABEL_6;
  }
  return v3;
}

uint64_t llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, uint64_t a2)
{
  uint64_t v3;

  v3 = *((_QWORD *)this + 2);
  if (v3 != a2)
  {
    if (v3 != -8192 && v3 != -4096 && v3 != 0)
      llvm::ValueHandleBase::RemoveFromUseList(this);
    *((_QWORD *)this + 2) = a2;
    if (a2 != -8192 && a2 != -4096 && a2)
      llvm::ValueHandleBase::AddToUseList(this);
  }
  return a2;
}

_DWORD *llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::DenseMap(_DWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v8[24];

  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::init(a1, a3);
  if (a3)
  {
    v6 = a2 + 16 * a3;
    do
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::try_emplace<llvm::JITSymbolFlags const&>((uint64_t)a1, (uint64_t *)a2, (_WORD *)(a2 + 8), (uint64_t)v8);
      a2 += 16;
    }
    while (a2 != v6);
  }
  return a1;
}

unint64_t *llvm::ValueHandleBase::ValueHandleBase(unint64_t *result, unsigned int a2, uint64_t *a3)
{
  unint64_t v3;
  uint64_t v5;
  unint64_t *v6;
  unint64_t *v7;

  *result = 2 * a2;
  result[1] = 0;
  v3 = a3[2];
  result[2] = v3;
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    v5 = *a3;
    v6 = (unint64_t *)(*a3 & 0xFFFFFFFFFFFFFFF8);
    result[1] = *v6;
    *v6 = (unint64_t)result;
    v7 = (unint64_t *)result[1];
    *result = v5 & 0xFFFFFFFFFFFFFFF8 | *result & 7;
    if (v7)
      *v7 = *v7 & 7 | (unint64_t)(result + 1);
  }
  return result;
}

uint64_t llvm::ValueHandleBase::operator=(llvm::ValueHandleBase *this, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;
  uint64_t v8;
  _QWORD *v9;
  unint64_t *v10;

  v3 = *((_QWORD *)this + 2);
  result = a2[2];
  if (v3 == result)
    return v3;
  if (v3 != -8192 && v3 != -4096 && v3 != 0)
  {
    llvm::ValueHandleBase::RemoveFromUseList(this);
    result = a2[2];
  }
  *((_QWORD *)this + 2) = result;
  if (result != -8192 && result != -4096 && result != 0)
  {
    v8 = *a2;
    v9 = (_QWORD *)(*a2 & 0xFFFFFFFFFFFFFFF8);
    *((_QWORD *)this + 1) = *v9;
    *v9 = this;
    *(_QWORD *)this = v8 & 0xFFFFFFFFFFFFFFF8 | *(_QWORD *)this & 7;
    v10 = (unint64_t *)*((_QWORD *)this + 1);
    if (v10)
      *v10 = *v10 & 7 | ((unint64_t)this + 8);
    return *((_QWORD *)this + 2);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::LookupBucketFor<unsigned long>(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & (37 * a2);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -1)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -2;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::grow(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  unint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::moveFromOldBuckets(a1, v6, &v6[v7]);
    JUMPOUT(0x24BD1B398);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if (v10 <= 0xFFFFFFFFFFFFFFFDLL)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::moveFromOldBuckets(a1, v14, v8);
}

uint64_t llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::moveFromOldBuckets(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t *v10;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (void *)(result + 8);
    v7 = 8;
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(void **)(result + 8);
  }
  result = (uint64_t)memset(v8, 255, 8 * v7);
LABEL_9:
  while (a2 != a3)
  {
    v9 = *a2;
    if ((unint64_t)*a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::SmallDenseMap<unsigned long,llvm::detail::DenseSetEmpty,8u,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>,unsigned long,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseSetPair<unsigned long>>::LookupBucketFor<unsigned long>((uint64_t)v5, v9, &v10);
      *v10 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

void llvm::detail::provider_format_adapter<unsigned long long &>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned long long &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned long long,void>::format(*(unint64_t **)(a1 + 8), a2, a3, a4);
}

uint64_t llvm::orc::ObjectLayer::add@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t result;
  unsigned int *v19;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  _QWORD v23[2];
  int v24;
  uint64_t v25;

  v10 = atomic_load((unint64_t *)(*(_QWORD *)a2 + 8));
  v11 = v10 & 0xFFFFFFFFFFFFFFFELL;
  v12 = operator new();
  v13 = *a3;
  *a3 = 0;
  v14 = *a4;
  *a4 = 0;
  v15 = *((_DWORD *)a4 + 4);
  *((_DWORD *)a4 + 4) = 0;
  v16 = a4[3];
  a4[3] = 0;
  v22 = 0;
  v23[0] = 0;
  v20[0] = 0;
  v20[1] = 0;
  v21 = 0;
  *(_QWORD *)(v12 + 8) = v14;
  v17 = a4[1];
  a4[1] = 0;
  *(_QWORD *)(v12 + 16) = v17;
  v23[1] = 0;
  *(_DWORD *)(v12 + 24) = v15;
  v24 = 0;
  *(_QWORD *)(v12 + 32) = v16;
  v25 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v23);
  *(_QWORD *)v12 = &off_251C14ED8;
  *(_QWORD *)(v12 + 40) = a1;
  *(_QWORD *)(v12 + 48) = v13;
  v23[0] = v12;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v20);
  v19 = *(unsigned int **)a2;
  *(_QWORD *)a2 = 0;
  llvm::orc::JITDylib::define<llvm::orc::BasicObjectLayerMaterializationUnit>(v11, (uint64_t)v23, (uint64_t)&v19, a5);
  if (v19)
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v19);
  result = v23[0];
  v23[0] = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::orc::ObjectLayer::add@<X0>(uint64_t a1@<X0>, llvm::orc::JITDylib *a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v19[2];
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(_QWORD *)(*a3 + 8);
  v10 = *(_QWORD *)(*a3 + 16) - v9;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a3 + 16))(*a3);
  *(_QWORD *)&v23 = v9;
  *((_QWORD *)&v23 + 1) = v10;
  v24 = v11;
  v25 = v12;
  llvm::orc::getObjectFileInterface(v8, &v23, (uint64_t)&v26);
  if ((v30 & 1) != 0)
  {
    v17 = v26;
    v26 = 0;
    *a4 = v17;
  }
  else
  {
    v13 = *a3;
    *a3 = 0;
    v19[0] = v26;
    v19[1] = v27;
    v26 = 0;
    v27 = 0;
    v20 = v28;
    v28 = 0;
    v21 = v29;
    v22 = v13;
    v29 = 0;
    llvm::orc::ObjectLayer::add(a1, a2, &v22, (uint64_t)v19);
    if ((unint64_t)(v21 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v14 = (unint64_t *)(v21 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
    }
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v19);
    v16 = v22;
    v22 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  return llvm::Expected<llvm::orc::MaterializationUnit::Interface>::~Expected((uint64_t)&v26);
}

const char *llvm::orc::BasicObjectLayerMaterializationUnit::getName(llvm::orc::BasicObjectLayerMaterializationUnit *this)
{
  uint64_t v1;

  v1 = *((_QWORD *)this + 6);
  if (v1)
    return (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 16))(v1);
  else
    return "<null object>";
}

void llvm::orc::BasicObjectLayerMaterializationUnit::materialize(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *a2;
  *a2 = 0;
  v4 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v7 = v4;
  v8 = v3;
  (*(void (**)(uint64_t, uint64_t **, uint64_t *))(*(_QWORD *)v2 + 48))(v2, &v8, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = v8;
  v8 = 0;
  if (v6)
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v8, v6);
}

void llvm::orc::BasicObjectLayerMaterializationUnit::~BasicObjectLayerMaterializationUnit(llvm::orc::BasicObjectLayerMaterializationUnit *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)this = &off_251C14ED8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_251C147C0;
  v3 = *((_QWORD *)this + 4);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)this + 8);
}

{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  *(_QWORD *)this = &off_251C14ED8;
  v2 = *((_QWORD *)this + 6);
  *((_QWORD *)this + 6) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *(_QWORD *)this = off_251C147C0;
  v3 = *((_QWORD *)this + 4);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)this + 8);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::DataLayout::operator=(uint64_t a1, uint64_t a2)
{
  __int16 v4;

  llvm::DataLayout::clear(a1);
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_DWORD *)(a1 + 4) = *(_DWORD *)(a2 + 4);
  *(_WORD *)(a1 + 8) = *(_WORD *)(a2 + 8);
  *(_WORD *)(a1 + 20) = *(_WORD *)(a2 + 20);
  *(_QWORD *)(a1 + 12) = *(_QWORD *)(a2 + 12);
  *(_QWORD *)(a1 + 24) = *(_QWORD *)(a2 + 24);
  llvm::SmallVectorImpl<char>::operator=(a1 + 32, a2 + 32);
  llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(a1 + 64, a2 + 64);
  llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(a1 + 112, a2 + 112);
  llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(a1 + 160, a2 + 160);
  v4 = *(_WORD *)(a2 + 212);
  *(_DWORD *)(a1 + 208) = *(_DWORD *)(a2 + 208);
  *(_WORD *)(a1 + 212) = v4;
  llvm::SmallVectorImpl<llvm::PointerAlignElem>::operator=(a1 + 240, a2 + 240);
  llvm::SmallVectorImpl<unsigned int>::operator=(a1 + 392, a2 + 392);
  return a1;
}

llvm::raw_ostream *llvm::orc::linkComponents(llvm::orc *this)
{
  llvm::raw_ostream *v1;

  v1 = (llvm::raw_ostream *)llvm::errs(this);
  llvm::write_hex(v1, (unint64_t)llvm_orc_registerEHFrameSectionWrapper, 3, 0, 0);
  return llvm::write_hex(v1, (unint64_t)llvm_orc_deregisterEHFrameSectionWrapper, 3, 0, 0);
}

uint64_t llvm::DataLayout::DataLayout(uint64_t a1, void *a2, unint64_t a3)
{
  *(_WORD *)(a1 + 8) = 0;
  *(_WORD *)(a1 + 20) = 0;
  *(_QWORD *)(a1 + 32) = a1 + 56;
  *(_OWORD *)(a1 + 40) = xmmword_24AA2ACB0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x400000000;
  *(_QWORD *)(a1 + 112) = a1 + 128;
  *(_QWORD *)(a1 + 120) = 0x400000000;
  *(_QWORD *)(a1 + 160) = a1 + 176;
  *(_QWORD *)(a1 + 168) = 0x400000000;
  *(_WORD *)(a1 + 212) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = a1 + 256;
  *(_QWORD *)(a1 + 248) = 0x800000000;
  *(_QWORD *)(a1 + 384) = 0;
  *(_QWORD *)(a1 + 392) = a1 + 408;
  *(_QWORD *)(a1 + 400) = 0x800000000;
  llvm::DataLayout::reset(a1, a2, a3);
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::LayoutAlignElem>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 8 * v4 - 2);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 8 * v5 - 2);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 8);
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 8 * v5), (const void *)(*(_QWORD *)a2 + 8 * v5), *(_QWORD *)a2 + 8 * v6 - (*(_QWORD *)a2 + 8 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::SmallVectorImpl<llvm::PointerAlignElem>::operator=(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 16 * v4);
      goto LABEL_12;
    }
    if (*(_DWORD *)(a1 + 12) >= v4)
    {
      if ((_DWORD)v5)
      {
        memmove(*(void **)a1, *(const void **)a2, 16 * v5);
        goto LABEL_10;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v4, 16);
    }
    v5 = 0;
LABEL_10:
    v6 = *(unsigned int *)(a2 + 8);
    if (v5 != v6)
      memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*(_QWORD *)a2 + 16 * v5), *(_QWORD *)a2 + 16 * v6 - (*(_QWORD *)a2 + 16 * v5));
LABEL_12:
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

llvm::DataLayout *llvm::DataLayout::DataLayout(llvm::DataLayout *this, const llvm::DataLayout *a2)
{
  *((_WORD *)this + 4) = 0;
  *((_WORD *)this + 10) = 0;
  *((_QWORD *)this + 4) = (char *)this + 56;
  *(_OWORD *)((char *)this + 40) = xmmword_24AA2ACB0;
  *((_QWORD *)this + 8) = (char *)this + 80;
  *((_QWORD *)this + 9) = 0x400000000;
  *((_QWORD *)this + 14) = (char *)this + 128;
  *((_QWORD *)this + 15) = 0x400000000;
  *((_QWORD *)this + 20) = (char *)this + 176;
  *((_QWORD *)this + 21) = 0x400000000;
  *((_WORD *)this + 106) = 0;
  *((_QWORD *)this + 27) = 0;
  *((_QWORD *)this + 28) = 0;
  *((_QWORD *)this + 29) = 0;
  *((_QWORD *)this + 30) = (char *)this + 256;
  *((_QWORD *)this + 31) = 0x800000000;
  *((_QWORD *)this + 48) = 0;
  *((_QWORD *)this + 49) = (char *)this + 408;
  *((_QWORD *)this + 50) = 0x800000000;
  llvm::DataLayout::operator=((uint64_t)this, (uint64_t)a2);
  return this;
}

void llvm::orc::shared::WrapperFunction<int ()(llvm::orc::shared::SPSExecutorAddr)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<int ()(llvm::orc::shared::SPSExecutorAddr),int &,llvm::orc::ExecutorAddr &>(llvm::orc::ExecutorAddr,int &,llvm::orc::ExecutorAddr &)::{lambda(char const*,unsigned long)#1},int,llvm::orc::ExecutorAddr>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, void **a3@<X2>, uint64_t *a4@<X8>)
{
  __int128 *v6;
  void *v7;
  void *v8;
  uint64_t v9[2];
  llvm::formatv_object_base *v10;
  __int128 v11;
  void *v12;
  unint64_t v13;

  v12 = *a3;
  v13 = 8;
  llvm::orc::ExecutorProcessControl::callWrapper(*a1, a1[1], (uint64_t)&v12, 8, &v11);
  if (*((_QWORD *)&v11 + 1))
  {
    if (*((_QWORD *)&v11 + 1) <= 8uLL)
      v6 = &v11;
    else
      v6 = (__int128 *)v11;
    goto LABEL_5;
  }
  v10 = (llvm::formatv_object_base *)v11;
  if (!(_QWORD)v11)
  {
    v6 = &v11;
LABEL_5:
    llvm::orc::shared::detail::ResultDeserializer<int,int>::deserialize(a2, v6, *((unint64_t *)&v11 + 1), a4);
    goto LABEL_8;
  }
  getErrorErrorCat();
  v9[0] = 3;
  v9[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v10, v9, a4);
LABEL_8:
  if (*((_QWORD *)&v11 + 1) >= 9uLL)
  {
    v7 = (void *)v11;
LABEL_12:
    free(v7);
    goto LABEL_13;
  }
  if (!*((_QWORD *)&v11 + 1))
  {
    v7 = (void *)v11;
    if ((_QWORD)v11)
      goto LABEL_12;
  }
LABEL_13:
  if (v13 >= 9)
  {
    v8 = v12;
LABEL_17:
    free(v8);
    return;
  }
  if (!v13)
  {
    v8 = v12;
    if (v12)
      goto LABEL_17;
  }
}

void llvm::orc::shared::detail::ResultDeserializer<int,int>::deserialize(_DWORD *a1@<X0>, _DWORD *a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v5[2];

  if (a3 <= 3)
  {
    getErrorErrorCat();
    v5[0] = 3;
    v5[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Error deserializing return value from blob in call", v5, a4);
  }
  else
  {
    *a1 = *a2;
    *a4 = 0;
  }
}

llvm::DataLayout *llvm::Expected<llvm::DataLayout>::~Expected(llvm::DataLayout *this)
{
  uint64_t v2;

  if ((*((_BYTE *)this + 440) & 1) != 0)
  {
    v2 = *(_QWORD *)this;
    *(_QWORD *)this = 0;
    if (v2)
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    llvm::DataLayout::~DataLayout(this);
  }
  return this;
}

uint64_t llvm::orc::MachOPlatform::HeaderOptions::BuildVersionOpts::fromTriple(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 36);
  if (v2 <= 27)
  {
    if (v2 != 7)
    {
      v3 = v2 == 11;
      return v3 | (a2 << 32);
    }
    v4 = *(_DWORD *)(a1 + 40) == 23;
    v5 = 2;
    v3 = 7;
  }
  else if (v2 == 28)
  {
    v4 = *(_DWORD *)(a1 + 40) == 23;
    v5 = 3;
    v3 = 8;
  }
  else
  {
    if (v2 != 29)
    {
      v3 = 0;
      if (v2 == 32)
      {
        if (*(_DWORD *)(a1 + 40) == 23)
          v3 = 12;
        else
          v3 = 11;
      }
      return v3 | (a2 << 32);
    }
    v4 = *(_DWORD *)(a1 + 40) == 23;
    v5 = 4;
    v3 = 9;
  }
  if (!v4)
    v3 = v5;
  return v3 | (a2 << 32);
}

void llvm::orc::MachOPlatform::Create(llvm::orc::ExecutionSession *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t a5@<X4>, __int128 *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X8>)
{
  uint64_t v16;
  int v17;
  uint64_t v18;
  std::unique_lock<std::mutex>::mutex_type *m;
  std::unique_lock<std::mutex>::mutex_type *v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  std::unique_lock<std::mutex>::mutex_type *v28;
  std::mutex *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t *v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t *v50;
  unint64_t *v51;
  unint64_t *v52;
  unint64_t *v53;
  unint64_t *v54;
  unint64_t *v55;
  unint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  void *v62;
  unint64_t *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  _BOOL4 v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  unint64_t v75;
  char *v76;
  uint64_t *v77;
  char *v78;
  char *v79;
  char *v80;
  std::unique_lock<std::mutex>::mutex_type *v81;
  unint64_t *opaque;
  unint64_t v83;
  uint64_t v84;
  unint64_t *v85;
  unint64_t v86;
  uint64_t v87;
  unint64_t *v88;
  unint64_t v89;
  char *v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  unint64_t *v103;
  unint64_t v104;
  uint64_t v105;
  unint64_t *v106;
  unint64_t v107;
  uint64_t v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t **v111;
  uint64_t v112;
  std::mutex *v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  uint64_t v121;
  unint64_t *v122;
  char *v123;
  unint64_t *v124;
  unint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  int v131;
  uint64_t *v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  std::recursive_mutex *v136;
  unsigned int *v137;
  uint64_t v138;
  std::unique_lock<std::mutex>::mutex_type *v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  char *v146;
  std::unique_lock<std::mutex>::mutex_type *v147;
  char *v148;
  std::unique_lock<std::mutex>::mutex_type *v149;
  std::unique_lock<std::mutex>::mutex_type *v150;
  _BOOL4 v151;
  unint64_t *v152;
  unint64_t v153;
  std::unique_lock<std::mutex> *v154;
  _QWORD *v155;
  unint64_t *v156;
  unint64_t v157;
  std::unique_lock<std::mutex> *v158;
  _QWORD *v159;
  unint64_t *v160;
  unint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t *v164;
  unint64_t v165;
  char v166;
  char v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  void *v176[2];
  uint64_t v177;
  uint64_t v178;
  int v179;
  char v180;
  __int128 v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  void *v185[2];
  uint64_t v186;
  unsigned int *v187;
  void *v188;
  void *v189;
  int v190;
  unsigned int *v191;
  uint64_t v192;
  uint64_t v193;
  int v194;
  void *v195;
  unint64_t *v196;
  __int128 v197;
  uint64_t v198;
  unsigned int *v199;
  void *__p[2];
  uint64_t v201;
  uint64_t v202;
  int v203;
  char v204;
  __int128 v205;
  uint64_t v206;
  __int128 v207;
  uint64_t v208;
  void *v209[2];
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  unint64_t *v213;
  unint64_t *v214;
  unint64_t *v215;
  unint64_t *v216;
  unint64_t *v217;
  unint64_t *v218;
  unint64_t *v219;
  unint64_t *v220;
  unint64_t *v221;
  unint64_t *v222;
  unint64_t *v223;
  unint64_t *v224;
  unint64_t *v225;
  unint64_t *v226;
  __int128 v227;
  uint64_t v228;
  void *v229;
  uint64_t *v230;
  unint64_t v231;
  __int128 v232[2];
  unint64_t *v233[3];
  unint64_t **v234;
  std::unique_lock<std::mutex> __lk;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  std::mutex v244;
  uint64_t v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  __int128 v249;
  __int128 v250;
  void *v251;
  uint64_t v252;
  _BYTE v253[48];
  unint64_t *v254;
  __int16 v255;
  std::unique_lock<std::mutex> v256;
  char *v257;
  uint64_t v258;
  uint64_t v259;

  v259 = *MEMORY[0x24BDAC8D0];
  v16 = *((_QWORD *)a1 + 9);
  v17 = *(_DWORD *)(v16 + 64);
  if (v17 == 3 || v17 == 38)
  {
    if (!*(_BYTE *)(a7 + 24))
    {
      memset(&v244, 0, 20);
      llvm::orc::addAliases(a1, &v244.__m_.__sig, (const char **)llvm::orc::MachOPlatform::requiredCXXAliases(void)::RequiredCXXAliases, 1);
      llvm::orc::addAliases(a1, &v244.__m_.__sig, (const char **)llvm::orc::MachOPlatform::standardRuntimeUtilityAliases(void)::StandardRuntimeUtilityAliases, 6);
      std::optional<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>>::operator=[abi:nn180100]<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,void>(a7, (uint64_t)&v244);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)&v244);
      MEMORY[0x24BD1B398](v244.__m_.__sig, 8);
    }
    v192 = *(_QWORD *)a7;
    *(_QWORD *)a7 = 0;
    v193 = *(_QWORD *)(a7 + 8);
    *(_QWORD *)(a7 + 8) = 0;
    v194 = *(_DWORD *)(a7 + 16);
    *(_DWORD *)(a7 + 16) = 0;
    v18 = operator new();
    v244.__m_.__sig = v192;
    v192 = 0;
    *(_QWORD *)v244.__m_.__opaque = v193;
    v193 = 0;
    *(_DWORD *)&v244.__m_.__opaque[8] = v194;
    v194 = 0;
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)llvm::orc::ReExportsMaterializationUnit::ReExportsMaterializationUnit(v18, 0, 1, (uint64_t)&v244);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)&v244);
    MEMORY[0x24BD1B398](v244.__m_.__sig, 8);
    v191 = 0;
    llvm::orc::JITDylib::define<llvm::orc::BasicObjectLayerMaterializationUnit>(a3, (uint64_t)&__lk, (uint64_t)&v191, (uint64_t *)__p);
    if (v191)
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v191);
    m = __lk.__m_;
    __lk.__m_ = 0;
    if (m)
      (*(void (**)(std::unique_lock<std::mutex>::mutex_type *))(m->__m_.__sig + 8))(m);
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::destroyAll((uint64_t)&v192);
    MEMORY[0x24BD1B398](v192, 8);
    v20 = (std::unique_lock<std::mutex>::mutex_type *)__p[0];
    if (__p[0])
      goto LABEL_32;
    llvm::orc::ExecutorProcessControl::intern(*((_QWORD *)a1 + 9), (uint64_t *)"___orc_rt_jit_dispatch", 0x16uLL, v233);
    v21 = *(_QWORD *)(v16 + 96);
    v244.__m_.__sig = (uint64_t)v233[0];
    if ((unint64_t)v233[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v22 = v233[0] + 1;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 + 1, v22));
    }
    *(_QWORD *)v244.__m_.__opaque = v21;
    *(_WORD *)&v244.__m_.__opaque[8] = 4096;
    *(_DWORD *)&v244.__m_.__opaque[10] = v227;
    *(_WORD *)&v244.__m_.__opaque[14] = WORD2(v227);
    llvm::orc::ExecutorProcessControl::intern(*((_QWORD *)a1 + 9), (uint64_t *)"___orc_rt_jit_dispatch_ctx", 0x1AuLL, (unint64_t **)&v229);
    v24 = *(_QWORD *)(v16 + 104);
    *(_QWORD *)&v244.__m_.__opaque[16] = v229;
    if ((char *)v229 - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL)
    {
      v25 = (unint64_t *)((char *)v229 + 8);
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 + 1, v25));
    }
    *(_QWORD *)&v244.__m_.__opaque[24] = v24;
    *(_WORD *)&v244.__m_.__opaque[32] = 4096;
    *(_DWORD *)&v244.__m_.__opaque[34] = v197;
    *(_WORD *)&v244.__m_.__opaque[38] = WORD2(v197);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::DenseMap(&v188, (uint64_t)&v244, 2);
    v27 = operator new();
    __p[0] = v188;
    __p[1] = v189;
    v188 = 0;
    v189 = 0;
    LODWORD(v201) = v190;
    v190 = 0;
    v256.__m_ = (std::unique_lock<std::mutex>::mutex_type *)llvm::orc::AbsoluteSymbolsMaterializationUnit::AbsoluteSymbolsMaterializationUnit(v27, (uint64_t)__p);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)__p);
    v187 = 0;
    llvm::orc::JITDylib::define<llvm::orc::BasicObjectLayerMaterializationUnit>(a3, (uint64_t)&v256, (uint64_t)&v187, (uint64_t *)&__lk);
    if (v187)
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v187);
    v28 = v256.__m_;
    v256.__m_ = 0;
    if (v28)
      (*(void (**)(std::unique_lock<std::mutex>::mutex_type *))(v28->__m_.__sig + 8))(v28);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)&v188);
    v29 = (std::mutex *)&v244.__m_.__opaque[40];
    do
    {
      v31 = *(_QWORD *)&v29[-1].__m_.__opaque[32];
      v29 = (std::mutex *)((char *)v29 - 24);
      v30 = v31;
      if ((unint64_t)(v31 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v32 = (unint64_t *)(v30 + 8);
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
      }
    }
    while (v29 != &v244);
    if ((char *)v229 - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL)
    {
      v34 = (unint64_t *)((char *)v229 + 8);
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
    }
    if ((unint64_t)v233[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v36 = v233[0] + 1;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
    }
    v20 = __lk.__m_;
    if (__lk.__m_)
    {
LABEL_32:
      *(_BYTE *)(a8 + 8) |= 1u;
      *(_QWORD *)a8 = v20;
      return;
    }
    v39 = operator new();
    v175 = *a4;
    *a4 = 0;
    LOBYTE(v176[0]) = 0;
    v180 = 0;
    if (*(_BYTE *)(a5 + 40))
    {
      *(_OWORD *)v176 = *(_OWORD *)a5;
      v40 = *(_QWORD *)(a5 + 16);
      v41 = *(_QWORD *)(a5 + 24);
      *(_QWORD *)(a5 + 8) = 0;
      *(_QWORD *)(a5 + 16) = 0;
      *(_QWORD *)a5 = 0;
      v177 = v40;
      v178 = v41;
      v179 = *(_DWORD *)(a5 + 32);
      v180 = 1;
    }
    v181 = *(_OWORD *)(a5 + 48);
    v182 = *(_QWORD *)(a5 + 64);
    *(_QWORD *)(a5 + 48) = 0;
    *(_QWORD *)(a5 + 56) = 0;
    v183 = *(_OWORD *)(a5 + 72);
    v184 = *(_QWORD *)(a5 + 88);
    *(_QWORD *)(a5 + 64) = 0;
    *(_QWORD *)(a5 + 72) = 0;
    *(_QWORD *)(a5 + 80) = 0;
    *(_QWORD *)(a5 + 88) = 0;
    *(_OWORD *)v185 = *(_OWORD *)(a5 + 96);
    v186 = *(_QWORD *)(a5 + 112);
    *(_QWORD *)(a5 + 104) = 0;
    *(_QWORD *)(a5 + 112) = 0;
    *(_QWORD *)(a5 + 96) = 0;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v232, a6);
    *(_QWORD *)v39 = &off_251C14F88;
    *(_QWORD *)(v39 + 8) = a1;
    *(_QWORD *)(v39 + 16) = a3;
    *(_QWORD *)(v39 + 24) = a2;
    v42 = (_QWORD *)(v39 + 32);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v39 + 32, v232);
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___dso_handle", 0xDuLL, (unint64_t **)(v39 + 64));
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_platform_bootstrap", 0x22uLL, &v226);
    v43 = v226;
    v226 = 0;
    *(_QWORD *)(v39 + 72) = v43;
    *(_QWORD *)(v39 + 80) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_platform_shutdown", 0x21uLL, &v225);
    v44 = v225;
    v225 = 0;
    *(_QWORD *)(v39 + 88) = v44;
    *(_QWORD *)(v39 + 96) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_register_ehframe_section", 0x28uLL, &v224);
    v45 = v224;
    v224 = 0;
    *(_QWORD *)(v39 + 104) = v45;
    *(_QWORD *)(v39 + 112) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_deregister_ehframe_section", 0x2AuLL, &v223);
    v46 = v223;
    v223 = 0;
    *(_QWORD *)(v39 + 120) = v46;
    *(_QWORD *)(v39 + 128) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_register_jitdylib", 0x21uLL, &v222);
    v47 = v222;
    v222 = 0;
    *(_QWORD *)(v39 + 136) = v47;
    *(_QWORD *)(v39 + 144) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_deregister_jitdylib", 0x23uLL, &v221);
    v48 = v221;
    v221 = 0;
    *(_QWORD *)(v39 + 152) = v48;
    *(_QWORD *)(v39 + 160) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_register_object_symbol_table", 0x2CuLL, &v220);
    v49 = v220;
    v220 = 0;
    *(_QWORD *)(v39 + 168) = v49;
    *(_QWORD *)(v39 + 176) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_deregister_object_symbol_table", 0x2EuLL, &v219);
    v50 = v219;
    v219 = 0;
    *(_QWORD *)(v39 + 184) = v50;
    *(_QWORD *)(v39 + 192) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_register_object_platform_sections", 0x31uLL, &v218);
    v51 = v218;
    v218 = 0;
    *(_QWORD *)(v39 + 200) = v51;
    *(_QWORD *)(v39 + 208) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_deregister_object_platform_sections", 0x33uLL, &v217);
    v52 = v217;
    v217 = 0;
    *(_QWORD *)(v39 + 216) = v52;
    *(_QWORD *)(v39 + 224) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_set_loadable_at_path_via_regex", 0x2EuLL, &v216);
    v53 = v216;
    v216 = 0;
    *(_QWORD *)(v39 + 232) = v53;
    *(_QWORD *)(v39 + 240) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_create_pthread_key", 0x22uLL, &v215);
    v54 = v215;
    v215 = 0;
    *(_QWORD *)(v39 + 248) = v54;
    *(_QWORD *)(v39 + 256) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_register_objc_runtime_object", 0x2CuLL, &v214);
    v55 = v214;
    v214 = 0;
    *(_QWORD *)(v39 + 264) = v55;
    *(_QWORD *)(v39 + 272) = 0;
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_deregister_objc_runtime_object", 0x2EuLL, &v213);
    v56 = v213;
    v213 = 0;
    *(_QWORD *)(v39 + 280) = v56;
    *(_QWORD *)(v39 + 288) = 0;
    *(_QWORD *)(v39 + 296) = 0;
    *(_QWORD *)(v39 + 304) = 0;
    *(_DWORD *)(v39 + 312) = 0;
    *(_QWORD *)(v39 + 320) = 850045863;
    *(_QWORD *)(v39 + 408) = 0;
    *(_QWORD *)(v39 + 416) = 0;
    *(_DWORD *)(v39 + 424) = 0;
    *(_QWORD *)(v39 + 432) = 0;
    *(_QWORD *)(v39 + 440) = 0;
    *(_DWORD *)(v39 + 448) = 0;
    *(_OWORD *)(v39 + 328) = 0u;
    *(_OWORD *)(v39 + 344) = 0u;
    *(_OWORD *)(v39 + 360) = 0u;
    *(_OWORD *)(v39 + 376) = 0u;
    *(_OWORD *)(v39 + 388) = 0u;
    v57 = operator new();
    *(_QWORD *)v57 = &off_251C15020;
    *(_QWORD *)(v57 + 8) = 850045863;
    *(_OWORD *)(v57 + 16) = 0u;
    *(_OWORD *)(v57 + 32) = 0u;
    *(_OWORD *)(v57 + 48) = 0u;
    *(_QWORD *)(v57 + 64) = 0;
    *(_QWORD *)(v57 + 72) = v39;
    *(_QWORD *)(v57 + 80) = 0;
    *(_QWORD *)(v57 + 88) = 0;
    *(_DWORD *)(v57 + 96) = 0;
    *(_QWORD *)(v57 + 104) = 0;
    *(_QWORD *)(v57 + 112) = 0;
    *(_DWORD *)(v57 + 120) = 0;
    *(_QWORD *)(v57 + 128) = 0;
    *(_QWORD *)(v57 + 136) = 0;
    *(_DWORD *)(v57 + 144) = 0;
    v212 = v57;
    llvm::orc::ObjectLinkingLayer::addPlugin(a2, &v212);
    v58 = v212;
    v212 = 0;
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    v211 = v175;
    llvm::orc::JITDylib::addGenerator<llvm::orc::DefinitionGenerator>(a3, &v211);
    v59 = v211;
    v211 = 0;
    if (v59)
      (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
    memset(v244.__m_.__opaque, 0, sizeof(v244.__m_.__opaque));
    v244.__m_.__sig = 850045863;
    v246 = 0u;
    v247 = 0u;
    v248 = 0u;
    v249 = 0u;
    v250 = 0u;
    v245 = 1018212795;
    v251 = v253;
    v252 = 0x200000000;
    atomic_store((unint64_t)&v244, (unint64_t *)(v39 + 456));
    LOBYTE(__p[0]) = 0;
    v204 = 0;
    if (v180)
    {
      *(_OWORD *)__p = *(_OWORD *)v176;
      v60 = v177;
      HIBYTE(v177) = 0;
      v176[0] = 0;
      v201 = v60;
      v202 = v178;
      v203 = v179;
      v204 = 1;
    }
    v205 = v181;
    v206 = v182;
    v182 = 0;
    v181 = 0uLL;
    v207 = v183;
    v208 = v184;
    v184 = 0;
    v183 = 0uLL;
    *(_OWORD *)v209 = *(_OWORD *)v185;
    v210 = v186;
    v185[0] = 0;
    v185[1] = 0;
    v186 = 0;
    v61 = *(_QWORD *)(v39 + 56);
    if ((v61 & 2) == 0)
      v42 = (_QWORD *)*v42;
    (*(void (**)(unint64_t **__return_ptr, _QWORD *, uint64_t, void **))(v61 & 0xFFFFFFFFFFFFFFF8))(v233, v42, v39, __p);
    v199 = 0;
    llvm::orc::JITDylib::define<llvm::orc::MaterializationUnit>((uint64_t *)&v256, (llvm::orc::JITDylib *)a3, (llvm::orc::MaterializationUnit **)v233, (uint64_t *)&v199);
    v62 = v256.__m_;
    v256.__m_ = 0;
    if (v199)
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v199);
    v63 = v233[0];
    v233[0] = 0;
    if (v63)
      (*(void (**)(unint64_t *))(*v63 + 8))(v63);
    if (v209[0])
    {
      v209[1] = v209[0];
      operator delete(v209[0]);
    }
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v207;
    std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&__lk);
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v205;
    std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100]((void ***)&__lk);
    if (v204 && SHIBYTE(v201) < 0)
      operator delete(__p[0]);
    if (v62)
      goto LABEL_204;
    v256.__m_ = (std::unique_lock<std::mutex>::mutex_type *)a3;
    v64 = *(_QWORD *)(v39 + 64);
    v198 = v64;
    if ((unint64_t)(v64 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v65 = (unint64_t *)(v64 + 8);
      do
        v66 = __ldaxr(v65);
      while (__stlxr(v66 + 1, v65));
    }
    v67 = 1;
    llvm::orc::ExecutionSession::lookup(a1, (uint64_t *)&v256, 1uLL, &v198, 63, (uint64_t)&__lk);
    if ((v236 & 1) != 0)
    {
      v62 = __lk.__m_;
      __lk.__m_ = 0;
      v67 = v62 == 0;
    }
    else
    {
      v62 = 0;
    }
    if ((unint64_t)(v198 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v68 = (unint64_t *)(v198 + 8);
      do
        v69 = __ldaxr(v68);
      while (__stlxr(v69 - 1, v68));
    }
    if (!v67)
      goto LABEL_204;
    v230 = 0;
    v229 = 0;
    v231 = 0;
    std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::reserve(&v229, 1uLL);
    v70 = v230;
    if ((unint64_t)v230 >= v231)
    {
      v72 = ((char *)v230 - (_BYTE *)v229) >> 4;
      v73 = v72 + 1;
      if ((unint64_t)(v72 + 1) >> 60)
        goto LABEL_216;
      v74 = v231 - (_QWORD)v229;
      if ((uint64_t)(v231 - (_QWORD)v229) >> 3 > v73)
        v73 = v74 >> 3;
      if ((unint64_t)v74 >= 0x7FFFFFFFFFFFFFF0)
        v75 = 0xFFFFFFFFFFFFFFFLL;
      else
        v75 = v73;
      if (v75)
        v76 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)&v231, v75);
      else
        v76 = 0;
      v77 = (uint64_t *)&v76[16 * v72];
      v78 = &v76[16 * v75];
      *v77 = a3;
      v77[1] = 0;
      v71 = v77 + 2;
      v79 = (char *)v230;
      v80 = (char *)v229;
      if (v230 != v229)
      {
        do
        {
          *((_OWORD *)v77 - 1) = *((_OWORD *)v79 - 1);
          v77 -= 2;
          v79 -= 16;
        }
        while (v79 != v80);
        v79 = (char *)v229;
      }
      v229 = v77;
      v230 = v71;
      v231 = (unint64_t)v78;
      if (v79)
        operator delete(v79);
    }
    else
    {
      *v230 = a3;
      v70[1] = 0;
      v71 = v70 + 2;
    }
    v230 = v71;
    v81 = *(std::unique_lock<std::mutex>::mutex_type **)(v39 + 72);
    __lk.__m_ = v81;
    if ((unint64_t)&v81[-1].__m_.__opaque[55] <= 0xFFFFFFFFFFFFFFDFLL)
    {
      opaque = (unint64_t *)v81->__m_.__opaque;
      do
        v83 = __ldaxr(opaque);
      while (__stlxr(v83 + 1, opaque));
    }
    v84 = *(_QWORD *)(v39 + 88);
    *(_QWORD *)&__lk.__owns_ = v84;
    if ((unint64_t)(v84 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v85 = (unint64_t *)(v84 + 8);
      do
        v86 = __ldaxr(v85);
      while (__stlxr(v86 + 1, v85));
    }
    v87 = *(_QWORD *)(v39 + 136);
    v236 = v87;
    if ((unint64_t)(v87 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v88 = (unint64_t *)(v87 + 8);
      do
        v89 = __ldaxr(v88);
      while (__stlxr(v89 + 1, v88));
    }
    v90 = *(char **)(v39 + 152);
    v237 = v90;
    if ((unint64_t)(v90 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v91 = (unint64_t *)(v90 + 8);
      do
        v92 = __ldaxr(v91);
      while (__stlxr(v92 + 1, v91));
    }
    v93 = *(_QWORD *)(v39 + 168);
    v238 = v93;
    if ((unint64_t)(v93 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v94 = (unint64_t *)(v93 + 8);
      do
        v95 = __ldaxr(v94);
      while (__stlxr(v95 + 1, v94));
    }
    v96 = *(_QWORD *)(v39 + 184);
    v239 = v96;
    if ((unint64_t)(v96 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v97 = (unint64_t *)(v96 + 8);
      do
        v98 = __ldaxr(v97);
      while (__stlxr(v98 + 1, v97));
    }
    v99 = *(_QWORD *)(v39 + 200);
    v240 = v99;
    if ((unint64_t)(v99 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v100 = (unint64_t *)(v99 + 8);
      do
        v101 = __ldaxr(v100);
      while (__stlxr(v101 + 1, v100));
    }
    v102 = *(_QWORD *)(v39 + 216);
    v241 = v102;
    if ((unint64_t)(v102 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v103 = (unint64_t *)(v102 + 8);
      do
        v104 = __ldaxr(v103);
      while (__stlxr(v104 + 1, v103));
    }
    v105 = *(_QWORD *)(v39 + 232);
    v242 = v105;
    if ((unint64_t)(v105 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v106 = (unint64_t *)(v105 + 8);
      do
        v107 = __ldaxr(v106);
      while (__stlxr(v107 + 1, v106));
    }
    v108 = *(_QWORD *)(v39 + 248);
    v243 = v108;
    if ((unint64_t)(v108 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v109 = (unint64_t *)(v108 + 8);
      do
        v110 = __ldaxr(v109);
      while (__stlxr(v110 + 1, v109));
    }
    llvm::orc::SymbolLookupSet::SymbolLookupSet((uint64_t *)&v197, (uint64_t *)&__lk, 0xAuLL, 0);
    std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v233, (uint64_t)&llvm::orc::NoDependenciesToRegister);
    llvm::orc::ExecutionSession::lookup(a1, (__int128 **)&v229, &v197, 0, 63, (uint64_t)v233, (uint64_t)&v256);
    if ((v258 & 1) != 0)
    {
      v62 = v256.__m_;
      v256.__m_ = 0;
    }
    else
    {
      v62 = 0;
    }
    llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v256);
    v111 = v234;
    if (v234 == v233)
    {
      v112 = 4;
      v111 = v233;
    }
    else
    {
      if (!v234)
        goto LABEL_119;
      v112 = 5;
    }
    ((void (*)(void))(*v111)[v112])();
LABEL_119:
    *(_QWORD *)&v227 = &v197;
    std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v227);
    v113 = &v244;
    do
    {
      v115 = *(_QWORD *)&v113[-1].__m_.__opaque[48];
      v113 = (std::mutex *)((char *)v113 - 8);
      v114 = v115;
      if ((unint64_t)(v115 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v116 = (unint64_t *)(v114 + 8);
        do
          v117 = __ldaxr(v116);
        while (__stlxr(v117 - 1, v116));
      }
    }
    while (v113 != (std::mutex *)&__lk);
    if (v229)
    {
      v230 = (uint64_t *)v229;
      operator delete(v229);
    }
    if (v62)
      goto LABEL_204;
    __lk.__m_ = &v244;
    __lk.__owns_ = 1;
    std::mutex::lock(&v244);
    while (*((_QWORD *)&v248 + 1))
      std::condition_variable::wait((std::condition_variable *)&v245, &__lk);
    atomic_store(0, (unint64_t *)(v39 + 456));
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    llvm::orc::ExecutorProcessControl::intern(*((_QWORD *)a1 + 9), (uint64_t *)"__orc_rt_macho_complete_bootstrap", 0x21uLL, &v196);
    v118 = operator new();
    v119 = *(_QWORD *)(a3 + 8);
    v120 = *(char *)(a3 + 31);
    if (v120 >= 0)
      v119 = a3 + 8;
    v121 = *(_QWORD *)(a3 + 16);
    if (v120 >= 0)
      v121 = *(unsigned __int8 *)(a3 + 31);
    v173 = v121;
    v174 = v119;
    v122 = v196;
    v123 = (char *)v196 - 1;
    if ((unint64_t)v196 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v124 = v196 + 1;
      do
        v125 = __ldaxr(v124);
      while (__stlxr(v125 + 1, v124));
    }
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v236;
    *(_QWORD *)&__lk.__owns_ = 0x200000000;
    if ((_DWORD)v252)
      llvm::SmallVectorImpl<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>::operator=((uint64_t)&__lk, (uint64_t *)&v251);
    v227 = v249;
    v228 = v250;
    *(_QWORD *)&v250 = 0;
    v249 = 0uLL;
    v126 = *(_QWORD *)(v39 + 80);
    v127 = *(_QWORD *)(v39 + 144);
    v171 = *(_QWORD *)(v39 + 160);
    v172 = *((_QWORD *)&v250 + 1);
    v170 = *(_QWORD *)(v39 + 176);
    v168 = *(_QWORD *)(v39 + 96);
    v169 = *(_QWORD *)(v39 + 192);
    v254 = v122;
    if ((unint64_t)v123 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v128 = v122 + 1;
      do
        v129 = __ldaxr(v128);
      while (__stlxr(v129 + 1, v128));
    }
    v255 = 0;
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::DenseMap(&v229, (uint64_t)&v254, 1);
    v130 = v229;
    v229 = 0;
    v131 = v231;
    LODWORD(v231) = 0;
    *(_QWORD *)v118 = off_251C147C0;
    *(_QWORD *)(v118 + 8) = v130;
    v256.__m_ = 0;
    v132 = v230;
    v230 = 0;
    *(_QWORD *)(v118 + 16) = v132;
    *(_QWORD *)&v256.__owns_ = 0;
    *(_DWORD *)(v118 + 24) = v131;
    LODWORD(v257) = 0;
    *(_QWORD *)(v118 + 32) = 0;
    v258 = 0;
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v256);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v229);
    if ((unint64_t)v254 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v133 = v254 + 1;
      do
        v134 = __ldaxr(v133);
      while (__stlxr(v134 - 1, v133));
    }
    *(_QWORD *)v118 = off_251C150B8;
    *(_QWORD *)(v118 + 40) = v39;
    *(_QWORD *)(v118 + 48) = v174;
    *(_QWORD *)(v118 + 56) = v173;
    *(_QWORD *)(v118 + 64) = v122;
    *(_QWORD *)(v118 + 72) = v118 + 88;
    *(_QWORD *)(v118 + 80) = 0x200000000;
    if (*(_DWORD *)&__lk.__owns_)
      llvm::SmallVectorImpl<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>::operator=(v118 + 72, (uint64_t *)&__lk);
    *(_OWORD *)(v118 + 136) = v227;
    v135 = v228;
    v228 = 0;
    v227 = 0uLL;
    *(_QWORD *)(v118 + 152) = v135;
    *(_QWORD *)(v118 + 160) = v172;
    *(_QWORD *)(v118 + 168) = v126;
    *(_QWORD *)(v118 + 176) = v168;
    *(_QWORD *)(v118 + 184) = v127;
    *(_QWORD *)(v118 + 192) = v171;
    *(_QWORD *)(v118 + 200) = v170;
    *(_QWORD *)(v118 + 208) = v169;
    v256.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v227;
    std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100]((void ***)&v256);
    if ((uint64_t *)__lk.__m_ != &v236)
      free(__lk.__m_);
    if (*(_DWORD *)(v118 + 16))
    {
      v136 = *(std::recursive_mutex **)(a3 + 32);
      std::recursive_mutex::lock(v136);
      llvm::orc::JITDylib::defineImpl((llvm::orc::JITDylib *)a3, (llvm::orc::MaterializationUnit *)v118, (uint64_t *)&v195);
      if (v195)
      {
        v137 = 0;
      }
      else
      {
        llvm::orc::JITDylib::getDefaultResourceTracker((llvm::orc::JITDylib *)a3, (unsigned int **)&__lk);
        v137 = (unsigned int *)__lk.__m_;
        v138 = *(_QWORD *)(*(_QWORD *)(a3 + 32) + 80);
        if (!v138
          || ((*(void (**)(void **__return_ptr, uint64_t, std::unique_lock<std::mutex>::mutex_type *, uint64_t))(*(_QWORD *)v138 + 32))(&v195, v138, __lk.__m_, v118), !v195))
        {
          v256.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v118;
          llvm::orc::JITDylib::installMaterializationUnit(a3, (std::__shared_weak_count_vtbl **)&v256, (uint64_t)v137);
          v139 = v256.__m_;
          v256.__m_ = 0;
          if (v139)
            (*(void (**)(std::unique_lock<std::mutex>::mutex_type *))(v139->__m_.__sig + 8))(v139);
          v118 = 0;
          v195 = 0;
        }
      }
      std::recursive_mutex::unlock(v136);
      v62 = v195;
      v195 = 0;
      if (v137)
        llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v137);
      if (v118)
        (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
      if (v62)
        goto LABEL_201;
    }
    else
    {
      v195 = 0;
      (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
    }
    v256.__m_ = 0;
    *(_QWORD *)&v256.__owns_ = 0;
    v257 = 0;
    std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::reserve((void **)&v256.__m_, 1uLL);
    v140 = *(_QWORD *)&v256.__owns_;
    if (*(_QWORD *)&v256.__owns_ < (unint64_t)v257)
    {
      **(_QWORD **)&v256.__owns_ = a3;
      *(_QWORD *)(v140 + 8) = 1;
      v141 = (char *)(v140 + 16);
LABEL_181:
      *(_QWORD *)&v256.__owns_ = v141;
      *(_QWORD *)&v227 = v196;
      v196 = 0;
      llvm::orc::ExecutionSession::lookup(a1, (__int128 **)&v256, (uint64_t *)&v227, 63, (uint64_t)&__lk);
      if ((v236 & 1) != 0)
      {
        v62 = __lk.__m_;
        __lk.__m_ = 0;
        v151 = v62 == 0;
      }
      else
      {
        v62 = 0;
        v151 = 1;
      }
      if ((unint64_t)(v227 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v152 = (unint64_t *)(v227 + 8);
        do
          v153 = __ldaxr(v152);
        while (__stlxr(v153 - 1, v152));
      }
      if (v256.__m_)
      {
        *(_QWORD *)&v256.__owns_ = v256.__m_;
        operator delete(v256.__m_);
      }
      if (v151)
      {
        v256.__m_ = 0;
        *(_QWORD *)&v256.__owns_ = 0;
        LODWORD(v257) = 0;
        __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v39;
        *(_QWORD *)&__lk.__owns_ = llvm::orc::MachOPlatform::rt_pushInitializers;
        v236 = 0;
        v237 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long>::CallbacksHolder<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSTuple<BOOL,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSExecutorAddr>>>>> ()(llvm::orc::shared::SPSExecutorAddr),llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSTuple<BOOL,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSExecutorAddr>>>>> ()(llvm::orc::shared::SPSExecutorAddr),llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (llvm::orc::MachOPlatform::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>&&,llvm::orc::ExecutorAddr&&)#1}>(llvm::orc::MachOPlatform&&)::{lambda(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)#1},llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSTuple<BOOL,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSExecutorAddr>>>>> ()(llvm::orc::shared::SPSExecutorAddr),llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (llvm::orc::MachOPlatform::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>&&,llvm::orc::ExecutorAddr&&)#1},void>::Callbacks
             + 2;
        llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_push_initializers_tag", 0x25uLL, (unint64_t **)&v229);
        v154 = (std::unique_lock<std::mutex> *)(llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::FindAndConstruct((uint64_t *)&v256, &v229)+ 1);
        if (v154 != &__lk)
        {
          v155 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v154);
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v155, (__int128 *)&__lk);
        }
        if ((char *)v229 - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL)
        {
          v156 = (unint64_t *)((char *)v229 + 8);
          do
            v157 = __ldaxr(v156);
          while (__stlxr(v157 - 1, v156));
        }
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&__lk);
        __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)v39;
        *(_QWORD *)&__lk.__owns_ = llvm::orc::MachOPlatform::rt_pushSymbols;
        v236 = 0;
        v237 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long>::CallbacksHolder<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,BOOL>>,BOOL),llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,BOOL>>,BOOL),llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL>(llvm::orc::MachOPlatform *,void (llvm::orc::MachOPlatform::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>&&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)#1}>(llvm::orc::MachOPlatform&&)::{lambda(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)#1},BOOL &&,void>::Callbacks
             + 2;
        llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(v39 + 8) + 72), (uint64_t *)"___orc_rt_macho_push_symbols_tag", 0x20uLL, (unint64_t **)&v229);
        v158 = (std::unique_lock<std::mutex> *)(llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::FindAndConstruct((uint64_t *)&v256, &v229)+ 1);
        if (v158 != &__lk)
        {
          v159 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v158);
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v159, (__int128 *)&__lk);
        }
        if ((char *)v229 - 1 <= (char *)0xFFFFFFFFFFFFFFDFLL)
        {
          v160 = (unint64_t *)((char *)v229 + 8);
          do
            v161 = __ldaxr(v160);
          while (__stlxr(v161 - 1, v160));
        }
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&__lk);
        v162 = *(_QWORD *)(v39 + 8);
        v163 = *(_QWORD *)(v39 + 16);
        __lk = v256;
        v256 = (std::unique_lock<std::mutex>)0;
        LODWORD(v236) = (_DWORD)v257;
        LODWORD(v257) = 0;
        llvm::orc::ExecutionSession::registerJITDispatchHandlers(v162, v163, (uint64_t)&__lk, (uint64_t *)&v229);
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::destroyAll(&__lk);
        MEMORY[0x24BD1B398](__lk.__m_, 8);
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>,llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>::destroyAll(&v256);
        MEMORY[0x24BD1B398](v256.__m_, 8);
        v62 = v229;
      }
LABEL_201:
      if ((unint64_t)v196 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v164 = v196 + 1;
        do
          v165 = __ldaxr(v164);
        while (__stlxr(v165 - 1, v164));
      }
LABEL_204:
      if (v251 != v253)
        free(v251);
      __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v249;
      std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100]((void ***)&__lk);
      std::condition_variable::~condition_variable((std::condition_variable *)&v245);
      std::mutex::~mutex(&v244);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v232);
      if (v185[0])
      {
        v185[1] = v185[0];
        operator delete(v185[0]);
      }
      v244.__m_.__sig = (uint64_t)&v183;
      std::vector<std::string>::__destroy_vector::operator()[abi:nn180100]((void ***)&v244);
      v244.__m_.__sig = (uint64_t)&v181;
      std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100]((void ***)&v244);
      if (v180 && SHIBYTE(v177) < 0)
        operator delete(v176[0]);
      v166 = *(_BYTE *)(a8 + 8);
      if (v62)
      {
        v167 = v166 | 1;
        (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        v39 = (uint64_t)v62;
      }
      else
      {
        v167 = v166 & 0xFE;
      }
      *(_BYTE *)(a8 + 8) = v167;
      *(_QWORD *)a8 = v39;
      return;
    }
    v142 = (uint64_t)(*(_QWORD *)&v256.__owns_ - (unint64_t)v256.__m_) >> 4;
    v143 = v142 + 1;
    if (!((unint64_t)(v142 + 1) >> 60))
    {
      v144 = v257 - (char *)v256.__m_;
      if ((v257 - (char *)v256.__m_) >> 3 > v143)
        v143 = v144 >> 3;
      if ((unint64_t)v144 >= 0x7FFFFFFFFFFFFFF0)
        v145 = 0xFFFFFFFFFFFFFFFLL;
      else
        v145 = v143;
      if (v145)
        v146 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>((uint64_t)&v257, v145);
      else
        v146 = 0;
      v147 = (std::unique_lock<std::mutex>::mutex_type *)&v146[16 * v142];
      v148 = &v146[16 * v145];
      v147->__m_.__sig = a3;
      *(_QWORD *)v147->__m_.__opaque = 1;
      v141 = &v147->__m_.__opaque[8];
      v150 = v256.__m_;
      v149 = *(std::unique_lock<std::mutex>::mutex_type **)&v256.__owns_;
      if (*(std::unique_lock<std::mutex>::mutex_type **)&v256.__owns_ != v256.__m_)
      {
        do
        {
          *(_OWORD *)&v147[-1].__m_.__opaque[40] = *(_OWORD *)&v149[-1].__m_.__opaque[40];
          v147 = (std::unique_lock<std::mutex>::mutex_type *)((char *)v147 - 16);
          v149 = (std::unique_lock<std::mutex>::mutex_type *)((char *)v149 - 16);
        }
        while (v149 != v150);
        v149 = v256.__m_;
      }
      v256.__m_ = v147;
      *(_QWORD *)&v256.__owns_ = v141;
      v257 = v148;
      if (v149)
        operator delete(v149);
      goto LABEL_181;
    }
LABEL_216:
    abort();
  }
  std::operator+<char>();
  getErrorErrorCat();
  v38 = operator new();
  *(_WORD *)&v244.__m_.__opaque[24] = 260;
  v244.__m_.__sig = (uint64_t)__p;
  *(_QWORD *)v38 = off_251C127D0;
  llvm::Twine::str((llvm::formatv_object_base **)&v244, (std::string *)(v38 + 8));
  *(_QWORD *)(v38 + 32) = 3;
  *(_QWORD *)(v38 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
  *(_BYTE *)(v38 + 48) = 1;
  *(_BYTE *)(a8 + 8) |= 1u;
  *(_QWORD *)a8 = v38;
  if (SHIBYTE(v201) < 0)
    operator delete(__p[0]);
}

void llvm::orc::MachOPlatform::setupJITDylib(llvm::orc::MachOPlatform *this@<X0>, llvm::orc::JITDylib *a2@<X1>, uint64_t *a3@<X8>)
{
  void *v3[2];
  __int128 v4;
  __int128 v5;
  _OWORD v6[3];
  void *__p[2];
  uint64_t v8;
  void **v9;

  v8 = 0;
  *(_OWORD *)__p = 0u;
  memset(v6, 0, sizeof(v6));
  v4 = 0u;
  v5 = 0u;
  *(_OWORD *)v3 = 0u;
  llvm::orc::MachOPlatform::setupJITDylib(this, a2, (uint64_t)v3, a3);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v9 = (void **)&v6[1] + 1;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v9);
  v9 = (void **)v6;
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](&v9);
  if (BYTE8(v5))
  {
    if (SBYTE7(v4) < 0)
      operator delete(v3[0]);
  }
}

void llvm::orc::MachOPlatform::setupJITDylib(_QWORD *a1@<X0>, llvm::orc::JITDylib *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  llvm::orc::MaterializationUnit *v11;
  llvm::orc::ExecutionSession *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  void **v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int *v20;
  void *v21[2];
  uint64_t v22;
  uint64_t v23;
  int v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  void *__p[2];
  uint64_t v31;
  void **v32[2];
  char v33;
  llvm::orc::MaterializationUnit *v34[2];

  v34[1] = *(llvm::orc::MaterializationUnit **)MEMORY[0x24BDAC8D0];
  LOBYTE(v21[0]) = 0;
  v25 = 0;
  if (*(_BYTE *)(a3 + 40))
  {
    *(_OWORD *)v21 = *(_OWORD *)a3;
    v7 = *(_QWORD *)(a3 + 16);
    v8 = *(_QWORD *)(a3 + 24);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v22 = v7;
    v23 = v8;
    v24 = *(_DWORD *)(a3 + 32);
    v25 = 1;
  }
  v9 = a1 + 4;
  v26 = *(_OWORD *)(a3 + 48);
  v27 = *(_QWORD *)(a3 + 64);
  *(_QWORD *)(a3 + 48) = 0;
  *(_QWORD *)(a3 + 56) = 0;
  v28 = *(_OWORD *)(a3 + 72);
  v29 = *(_QWORD *)(a3 + 88);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  *(_QWORD *)(a3 + 80) = 0;
  *(_QWORD *)(a3 + 88) = 0;
  *(_OWORD *)__p = *(_OWORD *)(a3 + 96);
  v31 = *(_QWORD *)(a3 + 112);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 96) = 0;
  v10 = a1[7];
  if ((v10 & 2) == 0)
    v9 = (_QWORD *)*v9;
  (*(void (**)(llvm::orc::MaterializationUnit **__return_ptr, _QWORD *, _QWORD *, void **))(v10 & 0xFFFFFFFFFFFFFFF8))(v34, v9, a1, v21);
  v20 = 0;
  llvm::orc::JITDylib::define<llvm::orc::MaterializationUnit>(a4, a2, v34, (uint64_t *)&v20);
  if (v20)
    llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v20);
  v11 = v34[0];
  v34[0] = 0;
  if (v11)
    (*(void (**)(llvm::orc::MaterializationUnit *))(*(_QWORD *)v11 + 8))(v11);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  v32[0] = (void **)&v28;
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](v32);
  v32[0] = (void **)&v26;
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](v32);
  if (v25 && SHIBYTE(v22) < 0)
    operator delete(v21[0]);
  if (!*a4)
  {
    v12 = (llvm::orc::ExecutionSession *)a1[1];
    v34[0] = a2;
    v13 = a1[8];
    v19 = v13;
    if ((unint64_t)(v13 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v14 = (unint64_t *)(v13 + 8);
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 + 1, v14));
    }
    llvm::orc::ExecutionSession::lookup(v12, (uint64_t *)v34, 1uLL, &v19, 63, (uint64_t)v32);
    if ((v33 & 1) != 0)
    {
      v16 = v32[0];
      v32[0] = 0;
    }
    else
    {
      v16 = 0;
    }
    *a4 = (uint64_t)v16;
    if ((unint64_t)(v19 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v17 = (unint64_t *)(v19 + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
    }
  }
}

void llvm::orc::JITDylib::define<llvm::orc::MaterializationUnit>(uint64_t *a1, llvm::orc::JITDylib *a2, llvm::orc::MaterializationUnit **a3, uint64_t *a4)
{
  std::recursive_mutex *v8;
  unsigned int *v9;
  uint64_t v10;
  llvm::orc::MaterializationUnit *v11;
  std::__shared_weak_count_vtbl *v12;
  std::__shared_weak_count_vtbl *v13;
  unsigned int *v14;

  if (*((_DWORD *)*a3 + 4))
  {
    v8 = (std::recursive_mutex *)*((_QWORD *)a2 + 4);
    std::recursive_mutex::lock(v8);
    llvm::orc::JITDylib::defineImpl(a2, *a3, a1);
    if (!*a1)
    {
      if (!*a4)
      {
        llvm::orc::JITDylib::getDefaultResourceTracker(a2, &v14);
        v9 = (unsigned int *)*a4;
        *a4 = (uint64_t)v14;
        if (v9)
          llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v9);
      }
      v10 = *(_QWORD *)(*((_QWORD *)a2 + 4) + 80);
      if (!v10
        || ((*(void (**)(uint64_t, uint64_t, llvm::orc::MaterializationUnit *))(*(_QWORD *)v10 + 32))(v10, *a4, *a3), !*a1))
      {
        v11 = *a3;
        *a3 = 0;
        v13 = (std::__shared_weak_count_vtbl *)v11;
        llvm::orc::JITDylib::installMaterializationUnit((uint64_t)a2, &v13, *a4);
        v12 = v13;
        v13 = 0;
        if (v12)
          (*((void (**)(std::__shared_weak_count_vtbl *))v12->~__shared_weak_count + 1))(v12);
        *a1 = 0;
      }
    }
    std::recursive_mutex::unlock(v8);
  }
  else
  {
    *a1 = 0;
  }
}

void llvm::orc::MachOPlatform::teardownJITDylib(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::mutex *v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;

  v6 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  v16 = a2;
  v17 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(a1 + 384), &v16, &v17))
  {
    v7 = v17;
    if (v17 != (_QWORD *)(*(_QWORD *)(a1 + 384) + 16 * *(unsigned int *)(a1 + 400)))
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::erase(a1 + 408, v17 + 1);
      *v7 = -8192;
      *(int32x2_t *)(a1 + 392) = vadd_s32(*(int32x2_t *)(a1 + 392), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  v8 = *(_DWORD *)(a1 + 448);
  if (v8)
  {
    v9 = *(_QWORD *)(a1 + 432);
    v10 = v8 - 1;
    LODWORD(v11) = (v8 - 1) & ((a2 >> 4) ^ (a2 >> 9));
    v12 = (uint64_t *)(v9 + 16 * v11);
    v13 = *v12;
    if (*v12 == a2)
    {
LABEL_6:
      *v12 = -8192;
      *(int32x2_t *)(a1 + 440) = vadd_s32(*(int32x2_t *)(a1 + 440), (int32x2_t)0x1FFFFFFFFLL);
    }
    else
    {
      v14 = 1;
      while (v13 != -4096)
      {
        v15 = v11 + v14++;
        v11 = v15 & v10;
        v13 = *(_QWORD *)(v9 + 16 * v11);
        if (v13 == a2)
        {
          v12 = (uint64_t *)(v9 + 16 * v11);
          goto LABEL_6;
        }
      }
    }
  }
  *a3 = 0;
  std::mutex::unlock(v6);
}

uint64_t *llvm::orc::MachOPlatform::notifyAdding@<X0>(uint64_t *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;

  v5 = atomic_load((unint64_t *)(a2 + 8));
  if (*(_QWORD *)(a3 + 32))
  {
    v14 = v5 & 0xFFFFFFFFFFFFFFFELL;
    v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::FindAndConstruct(result + 37, (uint64_t *)&v14)+ 1;
    v8 = *(_QWORD *)(a3 + 32);
    v13 = v8;
    if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v9 = (unint64_t *)(v8 + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 + 1, v9));
    }
    result = llvm::orc::SymbolLookupSet::add(v7, &v13, 1);
    if ((unint64_t)(v13 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v11 = (unint64_t *)(v13 + 8);
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
    }
  }
  *a4 = 0;
  return result;
}

_QWORD *llvm::orc::addAliases(_QWORD *result, uint64_t *a2, const char **a3, uint64_t a4)
{
  const char **v4;
  _QWORD *v6;
  const char **v7;
  size_t v8;
  uint64_t *v9;
  size_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t *v20;

  if (a4)
  {
    v4 = a3;
    v6 = result;
    v7 = &a3[2 * a4];
    do
    {
      if (*v4)
        v8 = strlen(*v4);
      else
        v8 = 0;
      llvm::orc::ExecutorProcessControl::intern(v6[9], (uint64_t *)*v4, v8, &v20);
      v9 = (uint64_t *)v4[1];
      if (v9)
        v10 = strlen(v4[1]);
      else
        v10 = 0;
      llvm::orc::ExecutorProcessControl::intern(v6[9], v9, v10, &v19);
      v11 = v19;
      v19 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolAliasMapEntry>>::FindAndConstruct(a2, &v20);
      v12 = result[1];
      if ((unint64_t)(v12 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
      }
      result[1] = v11;
      *((_WORD *)result + 8) = 4096;
      if ((unint64_t)v19 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v15 = v19 + 1;
        do
          v16 = __ldaxr(v15);
        while (__stlxr(v16 - 1, v15));
      }
      if ((unint64_t)v20 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v17 = v20 + 1;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
      }
      v4 += 2;
    }
    while (v4 != v7);
  }
  return result;
}

void llvm::orc::MachOPlatform::setLoadableAtPathRegexMatcher(uint64_t a1@<X0>, size_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  std::mutex *v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD v16[2];
  _QWORD v17[2];
  size_t v18;
  _QWORD *v19[2];

  v17[0] = a3;
  v17[1] = a4;
  v16[0] = a5;
  v16[1] = a6;
  v10 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  v18 = a2;
  v19[0] = 0;
  v11 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(a1 + 384), &v18, v19);
  v12 = v19[0];
  if (!v11)
    v12 = (_QWORD *)(*(_QWORD *)(a1 + 384) + 16 * *(unsigned int *)(a1 + 400));
  v18 = v12[1];
  std::mutex::unlock(v10);
  v15 = 0;
  v13 = *(_QWORD **)(a1 + 240);
  v19[0] = *(_QWORD **)(*(_QWORD *)(a1 + 8) + 72);
  v19[1] = v13;
  llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSSequence<char>)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSSequence<char>),llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef &,llvm::StringRef &>(llvm::orc::ExecutorAddr,llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef &,llvm::StringRef &)::{lambda(char const*,unsigned long)#1},llvm::Error,llvm::orc::ExecutorAddr,llvm::StringRef,llvm::StringRef>((uint64_t *)v19, (uint64_t *)&v15, &v18, (uint64_t)v17, (uint64_t)v16, a7);
  v14 = v15;
  if (*a7)
  {
    v15 = 0;
    v19[0] = v14;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(v19);
    if (v19[0])
      (*(void (**)(_QWORD *))(*v19[0] + 8))(v19[0]);
    if (v15)
      (*(void (**)(_QWORD *))(*v15 + 8))(v15);
  }
  else
  {
    *a7 = (uint64_t)v15;
  }
}

uint64_t llvm::orc::JITDylib::addGenerator<llvm::orc::DefinitionGenerator>(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  std::recursive_mutex *v3;
  _QWORD v5[2];

  v2 = *a2;
  v3 = *(std::recursive_mutex **)(a1 + 32);
  v5[0] = a1;
  v5[1] = a2;
  std::recursive_mutex::lock(v3);
  llvm::orc::JITDylib::addGenerator<llvm::orc::DefinitionGenerator>(std::unique_ptr<llvm::orc::DefinitionGenerator>)::{lambda(void)#1}::operator()(v5);
  std::recursive_mutex::unlock(v3);
  return v2;
}

unsigned int *llvm::orc::MachOPlatform::rt_pushInitializers(uint64_t a1, __int128 *a2, uint64_t a3)
{
  std::mutex *v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  _QWORD v13[4];
  _QWORD v14[2];
  _QWORD *v15;
  llvm::formatv_object_base *v16[4];
  __int16 v17;
  uint64_t v18;
  __int128 v19[2];
  _QWORD v20[3];
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  v18 = a3;
  v5 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  v13[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>((uint64_t *)(a1 + 408), &v18, v13)&& v13[0] != *(_QWORD *)(a1 + 408) + 16 * *(unsigned int *)(a1 + 424)&& (v6 = *(unsigned int **)(v13[0] + 8)) != 0)
  {
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    std::mutex::unlock(v5);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v19, a2);
    v12 = (void **)v6;
    do
      v8 = __ldxr(v6);
    while (__stxr(v8 + 1, v6));
    llvm::orc::MachOPlatform::pushInitializersLoop(a1, v19, &v12);
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v6);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v19);
    return llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v6);
  }
  else
  {
    std::mutex::unlock(v5);
    v13[0] = "{0:x}";
    v13[1] = 5;
    v13[2] = &v15;
    v13[3] = 1;
    v14[0] = &off_251C144D8;
    v14[1] = &v18;
    v15 = v14;
    v16[0] = (llvm::formatv_object_base *)"No JITDylib with header addr ";
    v16[2] = (llvm::formatv_object_base *)v13;
    v17 = 1539;
    getErrorErrorCat();
    v10 = operator new();
    *(_QWORD *)v10 = off_251C127D0;
    llvm::Twine::str(v16, (std::string *)(v10 + 8));
    *(_QWORD *)(v10 + 32) = 3;
    *(_QWORD *)(v10 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v10 + 48) = 1;
    v21 = -1;
    v20[0] = v10;
    v11 = *((_QWORD *)a2 + 3);
    if ((v11 & 2) == 0)
      a2 = *(__int128 **)a2;
    (*(void (**)(__int128 *, _QWORD *))(v11 & 0xFFFFFFFFFFFFFFF8))(a2, v20);
    return (unsigned int *)llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected((uint64_t)v20);
  }
}

void llvm::orc::MachOPlatform::rt_pushSymbols(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t *a4, int a5)
{
  std::mutex *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::orc::ExecutionSession *v19;
  _DWORD *v20;
  uint64_t v21;
  char v22;
  _QWORD *v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __int128 *v27;
  void *__p;
  void *v29;
  char *v30;
  unint64_t *v31;
  __int128 v32;
  __int128 *v33;
  __int16 v34;
  uint64_t v35;
  _QWORD v36[3];
  _QWORD *v37;
  __int128 v38[2];
  char v39;
  void *v40;
  __int128 v41;
  char *v42;
  __int128 v43;
  _QWORD **v44;
  uint64_t v45;
  _QWORD v46[2];
  _QWORD *v47;
  uint64_t v48;
  char v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v35 = a3;
  v9 = (std::mutex *)(a1 + 320);
  std::mutex::lock((std::mutex *)(a1 + 320));
  *(_QWORD *)&v43 = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::LookupBucketFor<llvm::orc::ExecutorAddr>((uint64_t *)(a1 + 408), &v35, &v43)|| (_QWORD)v43 == *(_QWORD *)(a1 + 408) + 16 * *(unsigned int *)(a1 + 424))
  {
    std::mutex::unlock(v9);
  }
  else
  {
    v10 = *(_QWORD *)(v43 + 8);
    std::mutex::unlock(v9);
    if (v10)
    {
      v33 = 0;
      v32 = 0u;
      v12 = *a4;
      v11 = a4[1];
      if (v12 == v11)
      {
        v15 = 0;
        v25 = 0uLL;
      }
      else
      {
        do
        {
          llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 72), *(uint64_t **)v12, *(_QWORD *)(v12 + 8), &v31);
          llvm::orc::SymbolLookupSet::add((uint64_t *)&v32, (uint64_t *)&v31, *(_BYTE *)(v12 + 16) == 0);
          if ((unint64_t)v31 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v13 = v31 + 1;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
          }
          v12 += 24;
        }
        while (v12 != v11);
        v25 = v32;
        v15 = v33;
      }
      v19 = *(llvm::orc::ExecutionSession **)(a1 + 8);
      v20 = operator new(0x10uLL);
      v29 = v20 + 4;
      v30 = (char *)(v20 + 4);
      *(_QWORD *)v20 = v10;
      v20[2] = 0;
      __p = v20;
      v26 = v25;
      v27 = v15;
      v33 = 0;
      v32 = 0uLL;
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v38, a2);
      v39 = a5;
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v43, v38);
      LOBYTE(v46[0]) = v39;
      v40 = operator new(0x28uLL, (std::align_val_t)8uLL);
      v41 = xmmword_24AA2ACA0;
      v21 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v40, &v43);
      *(_BYTE *)(v21 + 32) = v46[0];
      v42 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallbacksHolder<llvm::orc::MachOPlatform::rt_pushSymbols(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL)::$_0,llvm::orc::MachOPlatform::rt_pushSymbols(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL)::$_0,void>::Callbacks
          + 4;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v43);
      std::__function::__value_func<void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__value_func[abi:nn180100]((uint64_t)v36, (uint64_t)&llvm::orc::NoDependenciesToRegister);
      if (a5)
        v22 = 63;
      else
        v22 = 3;
      llvm::orc::ExecutionSession::lookup(v19, 1, (__int128 **)&__p, (uint64_t)&v26, v22, (__int128 *)&v40, v36);
      v23 = v37;
      if (v37 == v36)
      {
        v24 = 4;
        v23 = v36;
      }
      else
      {
        if (!v37)
        {
LABEL_25:
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v40);
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v38);
          *(_QWORD *)&v43 = &v26;
          std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
          if (__p)
          {
            v29 = __p;
            operator delete(__p);
          }
          *(_QWORD *)&v43 = &v32;
          std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v43);
          return;
        }
        v24 = 5;
      }
      (*(void (**)(void))(*v23 + 8 * v24))();
      goto LABEL_25;
    }
  }
  *(_QWORD *)&v43 = "{0:x}";
  *((_QWORD *)&v43 + 1) = 5;
  v44 = &v47;
  v45 = 1;
  v46[0] = &off_251C144D8;
  v46[1] = &v35;
  v47 = v46;
  *(_QWORD *)&v32 = "No JITDylib associated with handle ";
  v33 = &v43;
  v34 = 1539;
  getErrorErrorCat();
  v16 = operator new();
  *(_QWORD *)v16 = off_251C127D0;
  llvm::Twine::str((llvm::formatv_object_base **)&v32, (std::string *)(v16 + 8));
  *(_QWORD *)(v16 + 32) = 3;
  *(_QWORD *)(v16 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
  *(_BYTE *)(v16 + 48) = 1;
  v49 = -1;
  v48 = v16;
  v17 = *((_QWORD *)a2 + 3);
  if ((v17 & 2) == 0)
    a2 = *(__int128 **)a2;
  (*(void (**)(__int128 *, uint64_t *))(v17 & 0xFFFFFFFFFFFFFFF8))(a2, &v48);
  if ((v49 & 1) != 0)
  {
    v18 = v48;
    v48 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

uint64_t llvm::orc::MachOPlatform::pushInitializersLoop(uint64_t a1, __int128 *a2, void ***a3)
{
  std::recursive_mutex *v6;
  unsigned int i;
  _QWORD *v8;
  uint64_t v9;
  std::recursive_mutex *v10;
  uint64_t *v11;
  uint64_t *v12;
  unsigned int *v13;
  void **v14;
  void **v15;
  void **v16;
  unsigned int v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  void **v25;
  void ***v26;
  char *v27;
  uint64_t v28;
  void **v29;
  int64x2_t v30;
  uint64_t v31;
  char *v32;
  uint64_t v33;
  int64x2_t v34;
  char *v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  void **p_p;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t *v44;
  void **v45;
  char *v46;
  char *v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  uint64_t v55;
  char v56;
  char *v57;
  void *v58;
  char *v59;
  uint64_t v60;
  void **v61;
  void **v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  void **v66;
  void **v67;
  uint64_t v68;
  int64x2_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int64x2_t v74;
  void **v75;
  int64x2_t v76;
  unint64_t v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void *v84;
  void ***v85;
  uint64_t v86;
  void *__p;
  char *v88;
  char *v89;
  int64x2_t v90;
  void **v91;
  uint64_t v92[2];
  unsigned int v93;
  uint64_t *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  void **v101;
  __int128 v102[2];
  unsigned int *v103;
  _QWORD *v104;
  __int128 v105;
  char *v106;
  char *v107;
  char *v108;
  char *v109;
  char v110;
  void *v111;
  uint64_t v112;
  _BYTE v113[128];
  void **__src;
  int64x2_t v115;
  void **v116;
  void ***v117;
  unsigned int *v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v97 = 0;
  v98 = 0;
  v99 = 0;
  v94 = 0;
  v95 = 0;
  v96 = 0;
  __src = *a3;
  v111 = v113;
  v112 = 0x1000000000;
  llvm::SmallVectorImpl<char const*>::append<char const* const*,void>((unsigned int *)&v111, &__src, &v115);
  v6 = *(std::recursive_mutex **)(a1 + 8);
  std::recursive_mutex::lock(v6);
  for (i = v112; (_DWORD)v112; i = v112)
  {
    v92[0] = 0;
    v92[0] = *((_QWORD *)v111 + i - 1);
    LODWORD(v112) = i - 1;
    __src = (void **)v92[0];
    v86 = 0;
    if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::LookupBucketFor<llvm::orc::JITDylib *>((uint64_t *)&v94, &__src, &v86) & 1) == 0)
    {
      v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::FindAndConstruct((uint64_t *)&v94, v92);
      v9 = v92[0];
      v10 = *(std::recursive_mutex **)(v92[0] + 32);
      std::recursive_mutex::lock(v10);
      v12 = *(uint64_t **)(v9 + 208);
      v11 = *(uint64_t **)(v9 + 216);
      if (v12 != v11)
      {
        v13 = (unsigned int *)(v8 + 1);
        do
        {
          if (*v12 != v92[0])
          {
            llvm::SmallVectorTemplateBase<void *,true>::push_back(v13, *v12);
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v111, *v12);
          }
          v12 += 2;
        }
        while (v12 != v11);
      }
      std::recursive_mutex::unlock(v10);
      v86 = v92[0];
      __src = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)(a1 + 296), &v86, &__src))
      {
        v14 = __src;
        if (__src != (void **)(*(_QWORD *)(a1 + 296) + 32 * *(unsigned int *)(a1 + 312)))
        {
          v15 = (void **)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::FindAndConstruct((uint64_t *)&v97, v92);
          std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__vdeallocate(v15 + 1);
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v14 + 1);
          v15[3] = v14[3];
          v14[1] = 0;
          v14[2] = 0;
          v14[3] = 0;
          __src = v14 + 1;
          std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&__src);
          *v14 = (void *)-8192;
          *(int32x2_t *)(a1 + 304) = vadd_s32(*(int32x2_t *)(a1 + 304), (int32x2_t)0x1FFFFFFFFLL);
        }
      }
    }
  }
  std::recursive_mutex::unlock(v6);
  if ((_DWORD)v98)
  {
    v101 = (void **)a1;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v102, a2);
    v16 = *a3;
    v103 = (unsigned int *)v16;
    if (v16)
    {
      do
        v17 = __ldxr((unsigned int *)v16);
      while (__stxr(v17 + 1, (unsigned int *)v16));
    }
    __src = v101;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v115, v102);
    v118 = v103;
    v103 = 0;
    v18 = operator new(0x30uLL, (std::align_val_t)8uLL);
    v104 = v18;
    v105 = xmmword_24AA2DB60;
    *v18 = __src;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v18 + 1), (__int128 *)v115.i8);
    v18[5] = v118;
    v118 = 0;
    v106 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<llvm::orc::MachOPlatform::pushInitializersLoop(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>)::$_1,llvm::orc::MachOPlatform::pushInitializersLoop(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>)::$_1,void>::Callbacks
         + 4;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v115);
    llvm::orc::Platform::lookupInitSymbolsAsync((__int128 *)&v104, *(llvm::orc::ExecutionSession **)(a1 + 8), &v97);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v104);
    if (v103)
      llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v103);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v102);
  }
  else
  {
    v92[0] = 0;
    v92[1] = 0;
    v93 = 0;
    if ((_DWORD)v95)
    {
      v19 = (4 * (int)v95 / 3u + 1) | ((unint64_t)(4 * (int)v95 / 3u + 1) >> 1);
      v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
      llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::grow((uint64_t)v92, (((v20 | (v20 >> 8)) >> 16) | v20 | (v20 >> 8)) + 1);
    }
    std::mutex::lock((std::mutex *)(a1 + 320));
    if ((_DWORD)v95)
    {
      if (v96)
      {
        v21 = 72 * v96;
        v22 = v94;
        while ((*v22 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v22 += 9;
          v21 -= 72;
          if (!v21)
            goto LABEL_35;
        }
      }
      else
      {
        v22 = v94;
      }
      v23 = &v94[9 * v96];
      if (v22 != v23)
      {
        v24 = *v22;
LABEL_29:
        v86 = v24;
        __src = 0;
        if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(a1 + 384), &v86, &__src))
        {
          v25 = __src;
          if (__src != (void **)(*(_QWORD *)(a1 + 384) + 16 * *(unsigned int *)(a1 + 400)))
            llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::FindAndConstruct(v92, v22)[1] = v25[1];
        }
        while (1)
        {
          v22 += 9;
          if (v22 == v23)
            break;
          v24 = *v22;
          if ((*v22 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            if (v22 != v23)
              goto LABEL_29;
            break;
          }
        }
      }
    }
LABEL_35:
    std::mutex::unlock((std::mutex *)(a1 + 320));
    v90 = 0uLL;
    v91 = 0;
    if ((_DWORD)v95)
    {
      v26 = &v91;
      v117 = &v91;
      v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v95);
      v29 = (void **)&v27[40 * v28];
      v115.i64[1] = (uint64_t)v27;
      v116 = v29;
      v30 = v90;
      if (v90.i64[1] == v90.i64[0])
      {
        v34 = vdupq_n_s64(v90.u64[1]);
        v35 = v27;
      }
      else
      {
        v31 = 0;
        do
        {
          v32 = &v27[v31];
          v33 = v30.i64[1] + v31;
          *((_QWORD *)v32 - 5) = *(_QWORD *)(v30.i64[1] + v31 - 40);
          *(v32 - 32) = *(_BYTE *)(v30.i64[1] + v31 - 32);
          *((_QWORD *)v32 - 2) = 0;
          *((_QWORD *)v32 - 1) = 0;
          *((_QWORD *)v32 - 3) = 0;
          *(_OWORD *)(v32 - 24) = *(_OWORD *)(v30.i64[1] + v31 - 24);
          *((_QWORD *)v32 - 1) = *(_QWORD *)(v30.i64[1] + v31 - 8);
          *(_QWORD *)(v33 - 24) = 0;
          *(_QWORD *)(v33 - 16) = 0;
          *(_QWORD *)(v33 - 8) = 0;
          v31 -= 40;
        }
        while (v30.i64[1] + v31 != v30.i64[0]);
        v34 = v90;
        v35 = &v27[v31];
        v27 = (char *)v115.i64[1];
        v29 = v116;
      }
      v90.i64[0] = (uint64_t)v35;
      v90.i64[1] = (uint64_t)v27;
      v115 = v34;
      v36 = v91;
      v91 = v29;
      v116 = v36;
      __src = (void **)v34.i64[0];
      std::__split_buffer<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::~__split_buffer((uint64_t)&__src);
      if ((_DWORD)v95)
      {
        if (v96)
        {
          v37 = 72 * v96;
          v38 = (uint64_t)v94;
          while ((*(_QWORD *)v38 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v38 += 72;
            v37 -= 72;
            if (!v37)
              goto LABEL_95;
          }
        }
        else
        {
          v38 = (uint64_t)v94;
        }
        v39 = &v94[9 * v96];
        if ((uint64_t *)v38 != v39)
        {
          p_p = &__p;
          v41 = *(_QWORD *)v38;
          do
          {
            v86 = v41;
            __src = 0;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v92, &v86, &__src)|| __src == (void **)(v92[0] + 16 * v93))
            {
              goto LABEL_92;
            }
            v84 = __src[1];
            v85 = v26;
            LOBYTE(v86) = 0;
            p_p[1] = 0;
            p_p[2] = 0;
            *p_p = 0;
            v42 = *(unsigned int *)(v38 + 16);
            if ((_DWORD)v42)
            {
              v43 = *(uint64_t **)(v38 + 8);
              v44 = &v43[v42];
              do
              {
                v100 = *v43;
                __src = 0;
                if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v92, &v100, &__src))
                {
                  v45 = __src;
                  if (__src != (void **)(v92[0] + 16 * v93))
                  {
                    v46 = v88;
                    if (v88 >= v89)
                    {
                      v48 = (char *)__p;
                      v49 = (v88 - (_BYTE *)__p) >> 3;
                      v50 = v49 + 1;
                      if ((unint64_t)(v49 + 1) >> 61)
                        goto LABEL_106;
                      v51 = v89 - (_BYTE *)__p;
                      if ((v89 - (_BYTE *)__p) >> 2 > v50)
                        v50 = v51 >> 2;
                      if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF8)
                        v52 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v52 = v50;
                      if (v52)
                      {
                        v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v89, v52);
                        v48 = (char *)__p;
                        v46 = v88;
                      }
                      else
                      {
                        v53 = 0;
                      }
                      v54 = &v53[8 * v49];
                      *(_QWORD *)v54 = v45[1];
                      v47 = v54 + 8;
                      while (v46 != v48)
                      {
                        v55 = *((_QWORD *)v46 - 1);
                        v46 -= 8;
                        *((_QWORD *)v54 - 1) = v55;
                        v54 -= 8;
                      }
                      __p = v54;
                      v88 = v47;
                      v89 = &v53[8 * v52];
                      if (v48)
                        operator delete(v48);
                    }
                    else
                    {
                      *(_QWORD *)v88 = __src[1];
                      v47 = v46 + 8;
                    }
                    v88 = v47;
                  }
                }
                ++v43;
              }
              while (v43 != v44);
              v56 = v86;
              v58 = __p;
              v57 = v88;
              v59 = v89;
            }
            else
            {
              v59 = 0;
              v57 = 0;
              v58 = 0;
              v56 = 0;
            }
            *p_p = 0;
            p_p[1] = 0;
            p_p[2] = 0;
            v60 = v90.i64[1];
            if (v90.i64[1] >= (unint64_t)v91)
            {
              v62 = p_p;
              v63 = 0xCCCCCCCCCCCCCCCDLL * ((v90.i64[1] - v90.i64[0]) >> 3);
              v64 = v63 + 1;
              if (v63 + 1 > 0x666666666666666)
                goto LABEL_106;
              if (0x999999999999999ALL * (((uint64_t)v91 - v90.i64[0]) >> 3) > v64)
                v64 = 0x999999999999999ALL * (((uint64_t)v91 - v90.i64[0]) >> 3);
              if (0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v91 - v90.i64[0]) >> 3) >= 0x333333333333333)
                v65 = 0x666666666666666;
              else
                v65 = v64;
              v117 = v85;
              v66 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v65);
              v67 = &v66[5 * v63];
              __src = v66;
              v115.i64[0] = (uint64_t)v67;
              v116 = &v66[5 * v68];
              *v67 = v84;
              *((_BYTE *)v67 + 8) = v56;
              v67[2] = v58;
              v67[3] = 0;
              v67[3] = v57;
              v67[4] = v59;
              v61 = v67 + 5;
              v115.i64[1] = (uint64_t)(v67 + 5);
              v69 = v90;
              v70 = v115.i64[0];
              if (v90.i64[1] == v90.i64[0])
              {
                v74 = vdupq_n_s64(v90.u64[1]);
                p_p = v62;
              }
              else
              {
                v71 = 0;
                p_p = v62;
                do
                {
                  v72 = v70 + v71;
                  v73 = v69.i64[1] + v71;
                  *(_QWORD *)(v72 - 40) = *(_QWORD *)(v69.i64[1] + v71 - 40);
                  *(_BYTE *)(v72 - 32) = *(_BYTE *)(v69.i64[1] + v71 - 32);
                  *(_QWORD *)(v72 - 16) = 0;
                  *(_QWORD *)(v72 - 8) = 0;
                  *(_QWORD *)(v72 - 24) = 0;
                  *(_OWORD *)(v72 - 24) = *(_OWORD *)(v69.i64[1] + v71 - 24);
                  *(_QWORD *)(v72 - 8) = *(_QWORD *)(v69.i64[1] + v71 - 8);
                  *(_QWORD *)(v73 - 24) = 0;
                  *(_QWORD *)(v73 - 16) = 0;
                  *(_QWORD *)(v73 - 8) = 0;
                  v71 -= 40;
                }
                while (v69.i64[1] + v71 != v69.i64[0]);
                v74 = v90;
                v61 = (void **)v115.i64[1];
                v70 += v71;
              }
              v26 = v85;
              v90.i64[0] = v70;
              v90.i64[1] = (uint64_t)v61;
              v115 = v74;
              v75 = v91;
              v91 = v116;
              v116 = v75;
              __src = (void **)v74.i64[0];
              std::__split_buffer<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::~__split_buffer((uint64_t)&__src);
            }
            else
            {
              *(_QWORD *)v90.i64[1] = v84;
              *(_BYTE *)(v60 + 8) = v56;
              *(_QWORD *)(v60 + 16) = v58;
              *(_QWORD *)(v60 + 24) = v57;
              v61 = (void **)(v60 + 40);
              *(_QWORD *)(v60 + 32) = v59;
              v26 = v85;
            }
            v90.i64[1] = (uint64_t)v61;
            if (__p)
            {
              v88 = (char *)__p;
              operator delete(__p);
            }
            do
            {
LABEL_92:
              v38 += 72;
              if ((uint64_t *)v38 == v39)
                goto LABEL_95;
              v41 = *(_QWORD *)v38;
            }
            while ((*(_QWORD *)v38 | 0x1000) == 0xFFFFFFFFFFFFF000);
          }
          while ((uint64_t *)v38 != v39);
        }
      }
    }
LABEL_95:
    v110 &= ~1u;
    v108 = 0;
    v109 = 0;
    v107 = 0;
    v76 = v90;
    if (v90.i64[1] != v90.i64[0])
    {
      v77 = 0xCCCCCCCCCCCCCCCDLL * ((v90.i64[1] - v90.i64[0]) >> 3);
      if (v77 > 0x666666666666666)
LABEL_106:
        abort();
      v78 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::MachOPlatform::HeaderOptions::Dylib>>(v77);
      v79 = 0;
      v107 = v78;
      v108 = v78;
      v109 = &v78[40 * v80];
      v81 = v78 + 16;
      do
      {
        *(v81 - 2) = *(_QWORD *)(v76.i64[0] - 16);
        *((_BYTE *)v81 - 8) = *(_BYTE *)(v76.i64[0] - 8);
        v79 += 40;
        v81 = std::vector<llvm::orc::ExecutorAddr>::vector(v81, v76.i64[0]) + 5;
      }
      while (v76.i64[0] + 24 != v76.i64[1]);
      v108 = &v78[v79];
    }
    v82 = *((_QWORD *)a2 + 3);
    if ((v82 & 2) == 0)
      a2 = *(__int128 **)a2;
    (*(void (**)(__int128 *, char **))(v82 & 0xFFFFFFFFFFFFFFF8))(a2, &v107);
    llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected((uint64_t)&v107);
    __src = (void **)&v90;
    std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::__destroy_vector::operator()[abi:nn180100](&__src);
    MEMORY[0x24BD1B398](v92[0], 8);
  }
  if (v111 != v113)
    free(v111);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>,llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::SmallVector<llvm::orc::JITDylib *,6u>>>::destroyAll((uint64_t)&v94);
  MEMORY[0x24BD1B398](v94, 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::destroyAll((unsigned int *)&v97);
  return MEMORY[0x24BD1B398](v97, 8);
}

void llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(_QWORD *a1, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  char v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  char *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  unint64_t v72;
  char *v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  __int128 *v77;
  _QWORD *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  std::__shared_weak_count *v81;
  unint64_t *p_shared_owners;
  _QWORD *v83;
  unint64_t v84;
  unint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  char *v92;
  uint64_t v93;
  _QWORD *v94;
  unint64_t v95;
  _QWORD *v96;
  unint64_t v97;
  unint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  char *v104;
  uint64_t v105;
  unint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  unint64_t v114;
  char *v115;
  uint64_t v116;
  unint64_t v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  char *v124;
  uint64_t v125;
  unint64_t v126;
  unint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  char *v133;
  uint64_t v134;
  unint64_t v135;
  _QWORD *v136;
  __int128 v137;
  char *v138;
  __int128 v139;
  uint64_t v140;
  char *v141;
  uint64_t *v142;
  uint64_t v143;

  v143 = *MEMORY[0x24BDAC8D0];
  v7 = a1[9];
  if (*a2 == *(_QWORD *)(v7 + 16) && (v9 = atomic_load((unint64_t *)(v7 + 456))) != 0)
  {
    v136 = a1;
    v138 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0,void>::Callbacks
         + 2;
    v10 = a4[2];
    v11 = a4[1];
    if (v11 >= v10)
    {
      v13 = (uint64_t)(v11 - *a4) >> 5;
      if ((unint64_t)(v13 + 1) >> 59)
        goto LABEL_163;
      v14 = v10 - *a4;
      v15 = v14 >> 4;
      if (v14 >> 4 <= (unint64_t)(v13 + 1))
        v15 = v13 + 1;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFE0)
        v16 = 0x7FFFFFFFFFFFFFFLL;
      else
        v16 = v15;
      v142 = a4 + 2;
      if (v16)
        v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 2), v16);
      else
        v17 = 0;
      v18 = (uint64_t)&v17[32 * v13];
      *(_QWORD *)&v139 = v17;
      *((_QWORD *)&v139 + 1) = v18;
      v141 = &v17[32 * v16];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v18, (__int128 *)&v136);
      v140 = v18 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4, &v139);
      v12 = a4[1];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[1], (__int128 *)&v136);
      v12 = v11 + 32;
    }
    a4[1] = v12;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v136);
    v19 = a4[8];
    v136 = a1;
    v138 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1,void>::Callbacks
         + 2;
    v20 = a4[7];
    if (v20 >= v19)
    {
      v22 = a4[6];
      v23 = (uint64_t)(v20 - v22) >> 5;
      if ((unint64_t)(v23 + 1) >> 59)
        goto LABEL_163;
      v24 = v19 - v22;
      v25 = v24 >> 4;
      if (v24 >> 4 <= (unint64_t)(v23 + 1))
        v25 = v23 + 1;
      if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFE0)
        v26 = 0x7FFFFFFFFFFFFFFLL;
      else
        v26 = v25;
      v142 = a4 + 8;
      if (v26)
        v27 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 8), v26);
      else
        v27 = 0;
      v28 = (uint64_t)&v27[32 * v23];
      *(_QWORD *)&v139 = v27;
      *((_QWORD *)&v139 + 1) = v28;
      v141 = &v27[32 * v26];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v28, (__int128 *)&v136);
      v140 = v28 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 6, &v139);
      v21 = a4[7];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[7], (__int128 *)&v136);
      v21 = v20 + 32;
    }
    a4[7] = v21;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v136);
    v8 = 1;
  }
  else
  {
    v8 = 0;
  }
  v29 = a2[5];
  v30 = v29 - 1;
  if ((unint64_t)(v29 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v31 = (unint64_t *)(v29 + 8);
    do
      v32 = __ldaxr(v31);
    while (__stlxr(v32 + 1, v31));
  }
  if (!v29)
    goto LABEL_90;
  if (v29 == *(_QWORD *)(a1[9] + 64))
    v33 = v8;
  else
    v33 = 1;
  if ((v33 & 1) != 0)
  {
    v136 = a1;
    *(_QWORD *)&v137 = a2;
    v138 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_3,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_3,void>::Callbacks
         + 2;
    v34 = a4[2];
    v35 = a4[1];
    if (v35 >= v34)
    {
      v40 = (uint64_t)(v35 - *a4) >> 5;
      if ((unint64_t)(v40 + 1) >> 59)
        goto LABEL_163;
      v41 = v34 - *a4;
      v42 = v41 >> 4;
      if (v41 >> 4 <= (unint64_t)(v40 + 1))
        v42 = v40 + 1;
      if ((unint64_t)v41 >= 0x7FFFFFFFFFFFFFE0)
        v43 = 0x7FFFFFFFFFFFFFFLL;
      else
        v43 = v42;
      v142 = a4 + 2;
      if (v43)
        v44 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 2), v43);
      else
        v44 = 0;
      v51 = (uint64_t)&v44[32 * v40];
      *(_QWORD *)&v139 = v44;
      *((_QWORD *)&v139 + 1) = v51;
      v141 = &v44[32 * v43];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v51, (__int128 *)&v136);
      v140 = v51 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4, &v139);
      v36 = a4[1];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[1], (__int128 *)&v136);
      v36 = v35 + 32;
    }
    a4[1] = v36;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v136);
    v52 = a4[5];
    v136 = a1;
    v138 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_4,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_4,void>::Callbacks
         + 2;
    v53 = a4[4];
    if (v53 >= v52)
    {
      v55 = a4[3];
      v56 = (uint64_t)(v53 - v55) >> 5;
      if ((unint64_t)(v56 + 1) >> 59)
        goto LABEL_163;
      v57 = v52 - v55;
      v58 = v57 >> 4;
      if (v57 >> 4 <= (unint64_t)(v56 + 1))
        v58 = v56 + 1;
      if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFE0)
        v59 = 0x7FFFFFFFFFFFFFFLL;
      else
        v59 = v58;
      v142 = a4 + 5;
      if (v59)
        v60 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 5), v59);
      else
        v60 = 0;
      v64 = (uint64_t)&v60[32 * v56];
      *(_QWORD *)&v139 = v60;
      *((_QWORD *)&v139 + 1) = v64;
      v141 = &v60[32 * v59];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v64, (__int128 *)&v136);
      v140 = v64 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 3, &v139);
      v54 = a4[4];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[4], (__int128 *)&v136);
      v54 = v53 + 32;
    }
    a4[4] = v54;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v136);
    v65 = a4[8];
    v136 = a1;
    *(_QWORD *)&v137 = a2;
    v138 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_5,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_5,void>::Callbacks
         + 2;
    v66 = a4[7];
    if (v66 >= v65)
    {
      v68 = a4[6];
      v69 = (uint64_t)(v66 - v68) >> 5;
      if ((unint64_t)(v69 + 1) >> 59)
        goto LABEL_163;
      v70 = v65 - v68;
      v71 = v70 >> 4;
      if (v70 >> 4 <= (unint64_t)(v69 + 1))
        v71 = v69 + 1;
      if ((unint64_t)v70 >= 0x7FFFFFFFFFFFFFE0)
        v72 = 0x7FFFFFFFFFFFFFFLL;
      else
        v72 = v71;
      v142 = a4 + 8;
      if (v72)
        v73 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 8), v72);
      else
        v73 = 0;
      v74 = (uint64_t)&v73[32 * v69];
      *(_QWORD *)&v139 = v73;
      *((_QWORD *)&v139 + 1) = v74;
      v141 = &v73[32 * v72];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v74, (__int128 *)&v136);
      v140 = v74 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 6, &v139);
      v67 = a4[7];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[7], (__int128 *)&v136);
      v67 = v66 + 32;
    }
    a4[7] = v67;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v136);
LABEL_90:
    if (v30 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v75 = (unint64_t *)(v29 + 8);
      do
        v76 = __ldaxr(v75);
      while (__stlxr(v76 - 1, v75));
    }
    v78 = a4 + 3;
    v77 = (__int128 *)a4[3];
    v79 = *a2;
    *(_QWORD *)&v139 = a1;
    *((_QWORD *)&v139 + 1) = v79;
    v141 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_6,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_6,void>::Callbacks
         + 2;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::insert(a4 + 3, v77, &v139);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v139);
    v80 = (std::__shared_weak_count *)operator new(0x58uLL);
    v81 = v80;
    v80->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v80->__shared_owners_;
    v80->__shared_weak_owners_ = 0;
    v80->__vftable = (std::__shared_weak_count_vtbl *)&off_251C150F8;
    v80[1].__vftable = (std::__shared_weak_count_vtbl *)&v80[1].__shared_weak_owners_;
    v83 = &v80[1].__vftable;
    v80[1].__shared_owners_ = 0x300000000;
    do
      v84 = __ldxr(p_shared_owners);
    while (__stxr(v84 + 1, p_shared_owners));
    v136 = a1;
    *(_QWORD *)&v137 = v80 + 1;
    *((_QWORD *)&v137 + 1) = v80;
    v138 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_7,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_7,void>::Callbacks
         + 6;
    v85 = a4[5];
    v86 = a4[4];
    if (v86 >= v85)
    {
      v88 = (uint64_t)(v86 - *v78) >> 5;
      if ((unint64_t)(v88 + 1) >> 59)
        goto LABEL_163;
      v89 = v85 - *v78;
      v90 = v89 >> 4;
      if (v89 >> 4 <= (unint64_t)(v88 + 1))
        v90 = v88 + 1;
      if ((unint64_t)v89 >= 0x7FFFFFFFFFFFFFE0)
        v91 = 0x7FFFFFFFFFFFFFFLL;
      else
        v91 = v90;
      v142 = a4 + 5;
      if (v91)
        v92 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 5), v91);
      else
        v92 = 0;
      v93 = (uint64_t)&v92[32 * v88];
      *(_QWORD *)&v139 = v92;
      *((_QWORD *)&v139 + 1) = v93;
      v141 = &v92[32 * v91];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v93, (__int128 *)&v136);
      v140 = v93 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 3, &v139);
      v87 = a4[4];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
    }
    else
    {
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[4], (__int128 *)&v136);
      v87 = v86 + 32;
    }
    a4[4] = v87;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v136);
    v94 = a4 + 12;
    do
      v95 = __ldxr(p_shared_owners);
    while (__stxr(v95 + 1, p_shared_owners));
    v138 = 0;
    v96 = operator new(0x28uLL, (std::align_val_t)8uLL);
    v136 = v96;
    v137 = xmmword_24AA2ACA0;
    *v96 = a1;
    v96[1] = a2;
    v96[2] = v83;
    v96[3] = v81;
    *((_BYTE *)v96 + 32) = v8;
    v138 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_8,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_8,void>::Callbacks
         + 4;
    v97 = a4[14];
    v98 = a4[13];
    if (v98 >= v97)
    {
      v100 = (uint64_t)(v98 - *v94) >> 5;
      if ((unint64_t)(v100 + 1) >> 59)
        goto LABEL_163;
      v101 = v97 - *v94;
      v102 = v101 >> 4;
      if (v101 >> 4 <= (unint64_t)(v100 + 1))
        v102 = v100 + 1;
      if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFE0)
        v103 = 0x7FFFFFFFFFFFFFFLL;
      else
        v103 = v102;
      v142 = a4 + 14;
      if (v103)
        v104 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 14), v103);
      else
        v104 = 0;
      v105 = (uint64_t)&v104[32 * v100];
      *(_QWORD *)&v139 = v104;
      *((_QWORD *)&v139 + 1) = v105;
      v141 = &v104[32 * v103];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v105, (__int128 *)&v136);
      v140 = v105 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 12, &v139);
      v99 = a4[13];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
    }
    else
    {
      v99 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v98, (__int128 *)&v136)+ 32;
    }
    a4[13] = v99;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v136);
    v106 = a4[8];
    v107 = a4 + 6;
    v108 = *a2;
    v136 = a1;
    *(_QWORD *)&v137 = v108;
    BYTE8(v137) = v8;
    v138 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_9,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_9,void>::Callbacks
         + 2;
    v109 = a4[7];
    if (v109 >= v106)
    {
      v111 = (uint64_t)(v109 - *v107) >> 5;
      if ((unint64_t)(v111 + 1) >> 59)
        goto LABEL_163;
      v112 = v106 - *v107;
      v113 = v112 >> 4;
      if (v112 >> 4 <= (unint64_t)(v111 + 1))
        v113 = v111 + 1;
      if ((unint64_t)v112 >= 0x7FFFFFFFFFFFFFE0)
        v114 = 0x7FFFFFFFFFFFFFFLL;
      else
        v114 = v113;
      v142 = a4 + 8;
      if (v114)
        v115 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 8), v114);
      else
        v115 = 0;
      v116 = (uint64_t)&v115[32 * v111];
      *(_QWORD *)&v139 = v115;
      *((_QWORD *)&v139 + 1) = v116;
      v141 = &v115[32 * v114];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v116, (__int128 *)&v136);
      v140 = v116 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 6, &v139);
      v110 = a4[7];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
    }
    else
    {
      v110 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v109, (__int128 *)&v136)+ 32;
    }
    a4[7] = v110;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v136);
    v138 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_10,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_10,void>::Callbacks
         + 2;
    v117 = a4[7];
    v118 = a4[8];
    if (v117 >= v118)
    {
      v120 = (uint64_t)(v117 - *v107) >> 5;
      if ((unint64_t)(v120 + 1) >> 59)
        goto LABEL_163;
      v121 = v118 - *v107;
      v122 = v121 >> 4;
      if (v121 >> 4 <= (unint64_t)(v120 + 1))
        v122 = v120 + 1;
      if ((unint64_t)v121 >= 0x7FFFFFFFFFFFFFE0)
        v123 = 0x7FFFFFFFFFFFFFFLL;
      else
        v123 = v122;
      v142 = a4 + 8;
      if (v123)
        v124 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 8), v123);
      else
        v124 = 0;
      v125 = (uint64_t)&v124[32 * v120];
      *(_QWORD *)&v139 = v124;
      *((_QWORD *)&v139 + 1) = v125;
      v141 = &v124[32 * v123];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v125, (__int128 *)&v136);
      v140 = v125 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 6, &v139);
      v119 = a4[7];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
    }
    else
    {
      v119 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v117, (__int128 *)&v136)+ 32;
    }
    a4[7] = v119;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v136);
    if (!v8)
    {
      do
LABEL_159:
        v135 = __ldaxr(p_shared_owners);
      while (__stlxr(v135 - 1, p_shared_owners));
      if (!v135)
      {
        ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
        std::__shared_weak_count::__release_weak(v81);
      }
      return;
    }
    v136 = a1;
    v138 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_11,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_11,void>::Callbacks
         + 2;
    v126 = a4[13];
    v127 = a4[14];
    if (v126 < v127)
    {
      v128 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v126, (__int128 *)&v136)+ 32;
LABEL_158:
      a4[13] = v128;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v136);
      goto LABEL_159;
    }
    v129 = (uint64_t)(v126 - *v94) >> 5;
    if (!((unint64_t)(v129 + 1) >> 59))
    {
      v130 = v127 - *v94;
      v131 = v130 >> 4;
      if (v130 >> 4 <= (unint64_t)(v129 + 1))
        v131 = v129 + 1;
      if ((unint64_t)v130 >= 0x7FFFFFFFFFFFFFE0)
        v132 = 0x7FFFFFFFFFFFFFFLL;
      else
        v132 = v131;
      v142 = a4 + 14;
      if (v132)
        v133 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 14), v132);
      else
        v133 = 0;
      v134 = (uint64_t)&v133[32 * v129];
      *(_QWORD *)&v139 = v133;
      *((_QWORD *)&v139 + 1) = v134;
      v141 = &v133[32 * v132];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v134, (__int128 *)&v136);
      v140 = v134 + 32;
      std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 12, &v139);
      v128 = a4[13];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
      goto LABEL_158;
    }
LABEL_163:
    abort();
  }
  v37 = a4[8];
  v136 = a1;
  *(_QWORD *)&v137 = a2;
  v138 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2,llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2,void>::Callbacks
       + 2;
  v38 = a4[7];
  if (v38 >= v37)
  {
    v45 = a4[6];
    v46 = (uint64_t)(v38 - v45) >> 5;
    if ((unint64_t)(v46 + 1) >> 59)
      goto LABEL_163;
    v47 = v37 - v45;
    v48 = v47 >> 4;
    if (v47 >> 4 <= (unint64_t)(v46 + 1))
      v48 = v46 + 1;
    if ((unint64_t)v47 >= 0x7FFFFFFFFFFFFFE0)
      v49 = 0x7FFFFFFFFFFFFFFLL;
    else
      v49 = v48;
    v142 = a4 + 8;
    if (v49)
      v50 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a4 + 8), v49);
    else
      v50 = 0;
    v61 = (uint64_t)&v50[32 * v46];
    *(_QWORD *)&v139 = v50;
    *((_QWORD *)&v139 + 1) = v61;
    v141 = &v50[32 * v49];
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v61, (__int128 *)&v136);
    v140 = v61 + 32;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a4 + 6, &v139);
    v39 = a4[7];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v139);
  }
  else
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a4[7], (__int128 *)&v136);
    v39 = v38 + 32;
  }
  a4[7] = v39;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v136);
  if (v30 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v62 = (unint64_t *)(v29 + 8);
    do
      v63 = __ldaxr(v62);
    while (__stlxr(v63 - 1, v62));
  }
}

void llvm::orc::MachOPlatform::MachOPlatformPlugin::getSyntheticSymbolDependencies(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::mutex *v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;

  v6 = (std::mutex *)(a1 + 8);
  std::mutex::lock((std::mutex *)(a1 + 8));
  v7 = a1 + 128;
  v14 = a2;
  v15 = 0;
  v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::LookupBucketFor<llvm::orc::JITDylib const*>((uint64_t *)(a1 + 128), &v14, &v15);
  v9 = v15;
  v10 = *(_QWORD *)(a1 + 128);
  v11 = *(unsigned int *)(a1 + 144);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_DWORD *)(a3 + 16) = 0;
  if (v8 && v9 != v10 + 32 * v11)
  {
    v12 = v9 + 8;
    v13 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::FindAndConstruct((uint64_t *)a3, (uint64_t *)(a2 + 40));
    llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::operator=((uint64_t)(v13 + 1), v12);
    v15 = a2;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::erase(v7, &v15);
  }
  std::mutex::unlock(v6);
}

double llvm::jitlink::LinkGraph::blocks@<D0>(llvm::jitlink::LinkGraph *this@<X0>, _OWORD *a2@<X8>)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  double result;
  __int128 v9;
  __int128 v10;
  char v11;
  _QWORD v12[2];
  char v13;
  __int128 v14;
  char v15;
  _QWORD v16[2];
  char v17;
  _OWORD v18[2];
  __int128 v19;
  __int128 v20;

  v3 = (_QWORD *)*((_QWORD *)this + 23);
  v4 = *((unsigned int *)this + 50);
  v5 = &v3[3 * v4];
  if (*((_DWORD *)this + 48))
  {
    if ((_DWORD)v4)
    {
      v6 = 24 * v4;
      while (*v3 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v3 += 3;
        v6 -= 24;
        if (!v6)
          goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    v3 = v5;
  }
  v16[0] = v3;
  v16[1] = v5;
  v17 = 1;
  *(_QWORD *)&v14 = v5;
  *((_QWORD *)&v14 + 1) = v5;
  v15 = 1;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::nested_collection_iterator((uint64_t)v18, v16, &v14);
  v12[0] = v5;
  v12[1] = v5;
  v13 = 1;
  *(_QWORD *)&v10 = v5;
  *((_QWORD *)&v10 + 1) = v5;
  v11 = 1;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::nested_collection_iterator((uint64_t)(a2 + 4), v12, &v10);
  v7 = v18[1];
  *a2 = v18[0];
  a2[1] = v7;
  result = *(double *)&v19;
  v9 = v20;
  a2[2] = v19;
  a2[3] = v9;
  return result;
}

__n128 llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  __n128 result;
  __int128 v8;

  v4 = *(_QWORD **)(a1 + 56);
  v5 = (_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
  *(_QWORD *)(a1 + 48) = v5;
  while (v5 != v4 && (*v5 | 0x1000) == 0xFFFFFFFFFFFFF000)
    *(_QWORD *)(a1 + 48) = ++v5;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::moveToNonEmptyInnerOrEnd((_QWORD *)a1);
  v6 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + 16) = v6;
  result = *(__n128 *)(a1 + 32);
  v8 = *(_OWORD *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  *(_OWORD *)(a2 + 48) = v8;
  return result;
}

_QWORD **llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_0::operator()(unsigned int **a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  _QWORD **result;
  uint64_t **v8;
  unint64_t v9;
  unint64_t v10;
  _QWORD **v11;
  uint64_t v12;
  _QWORD **v13;
  _QWORD **v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v6 = a2 + 32;
  result = (_QWORD **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 32);
  if ((_QWORD **)(*(_QWORD *)(a2 + 32) + 8 * *(unsigned int *)(a2 + 48)) != result)
  {
    v8 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6);
    v9 = **v8;
    v10 = (*v8)[4] + v9;
    *a3 = v9;
    a3[1] = v10;
    result = (_QWORD **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6);
    v12 = *(_QWORD *)(a2 + 32) + 8 * *(unsigned int *)(a2 + 48);
    if ((_QWORD **)v12 != result)
    {
      v13 = result;
      v14 = v11;
      do
      {
        v15 = *v13;
        v16 = **v13;
        v17 = (*v13)[5];
        v18 = (*v13)[4] + v16;
        if (v16 >= *a3)
          v16 = *a3;
        if (a3[1] > v18)
          v18 = a3[1];
        *a3 = v16;
        a3[1] = v18;
        v19 = v15[6];
        while (v17 != v19)
        {
          v20 = *(_QWORD *)(*(_QWORD *)v17 + 16);
          if ((*(_BYTE *)(v20 + 8) & 1) != 0 && (*(_BYTE *)(*(_QWORD *)(v20 + 16) + 16) & 4) != 0)
            result = (_QWORD **)llvm::SmallVectorTemplateBase<void *,true>::push_back(*a1, v20);
          v17 += 32;
        }
        while (++v13 != v14)
        {
          if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_18;
        }
        v13 = v14;
LABEL_18:
        ;
      }
      while (v13 != (_QWORD **)v12);
    }
  }
  return result;
}

llvm::jitlink::Section *llvm::jitlink::LinkGraph::mergeSections(llvm::jitlink::Section *this, llvm::jitlink::Section *a2, llvm::jitlink::Section *a3, char a4)
{
  uint64_t v4;
  uint64_t v5;
  llvm::jitlink::Section *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;

  if (a2 != a3)
  {
    v17 = v4;
    v18 = v5;
    v9 = this;
    v10 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)a3 + 32);
    v12 = *((_QWORD *)a3 + 4) + 8 * *((unsigned int *)a3 + 12);
    if ((uint64_t *)v12 != v10)
    {
      do
      {
        v13 = *v10++;
        *(_QWORD *)(v13 + 16) = a2;
        while (v10 != v11)
        {
          if ((*v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_8;
          ++v10;
        }
        v10 = v11;
LABEL_8:
        ;
      }
      while (v10 != (uint64_t *)v12);
    }
    this = llvm::jitlink::Section::transferContentTo(a3, a2);
    if ((a4 & 1) == 0)
    {
      v16 = *(_OWORD *)a3;
      return (llvm::jitlink::Section *)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::erase((uint64_t)v9 + 184, (uint64_t)&v16, v14, v15);
    }
  }
  return this;
}

void llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSOptional<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>>,llvm::orc::ExecutorAddr,std::optional<std::tuple<llvm::SmallVector<llvm::orc::ExecutorAddrRange,3u>,llvm::orc::ExecutorAddrRange,llvm::orc::ExecutorAddrRange>>,llvm::SmallVector<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,8u>>(uint64_t a1, uint64_t a2, size_t *a3, uint64_t a4, unsigned int *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  size_t *v20;
  uint64_t v21;
  __int128 v22;
  unint64_t v23;
  size_t *v24;
  unint64_t v25;
  uint64_t v26;
  size_t *v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  size_t *v31;
  int v32;
  size_t *v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  const void *v38;
  size_t v39;
  size_t *v40;
  unint64_t v41;
  size_t *v42;
  uint64_t v43;
  size_t *v44;
  unint64_t v45;
  void *v46;
  __int128 v47;
  _BYTE v48[24];
  uint64_t v49;
  void *v50;
  __int128 v51;
  _BYTE v52[24];
  size_t *v53;
  __int128 v54;
  _QWORD v55[4];

  v55[3] = *MEMORY[0x24BDAC8D0];
  v53 = v55;
  v54 = xmmword_24AA2ACE0;
  v10 = *(unsigned int *)(a4 + 8);
  v11 = a5[2];
  if ((_DWORD)v11)
  {
    v12 = 32 * v11;
    v13 = (uint64_t *)(*(_QWORD *)a5 + 8);
    v14 = 8;
    do
    {
      v15 = *v13;
      v13 += 4;
      v14 += v15 + 24;
      v12 -= 32;
    }
    while (v12);
  }
  else
  {
    v14 = 8;
  }
  v16 = 16 * v10 + 49;
  v17 = (_DWORD)v10 == 0;
  v18 = 49;
  if (!v17)
    v18 = v16;
  v19 = 9;
  if (*(_BYTE *)(a4 + 96))
    v19 = v18;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v53, v19 + v14);
  v20 = v53;
  v21 = v54;
  if (!(_QWORD)v54)
    v20 = 0;
  v44 = v20;
  v45 = v54;
  v22 = xmmword_24AA2ACE0;
  if ((unint64_t)v54 < 8)
    goto LABEL_38;
  *v20 = *a3;
  v44 = v20 + 1;
  v45 = v21 - 8;
  if (v21 == 8)
    goto LABEL_38;
  *((_BYTE *)v20 + 8) = *(_BYTE *)(a4 + 96);
  v23 = v21 - 9;
  v44 = (size_t *)((char *)v20 + 9);
  v45 = v21 - 9;
  if (*(_BYTE *)(a4 + 96))
  {
    if (v23 < 8)
      goto LABEL_38;
    *(size_t *)((char *)v20 + 9) = *(unsigned int *)(a4 + 8);
    v24 = (size_t *)((char *)v20 + 17);
    v25 = v21 - 17;
    v44 = v24;
    v45 = v21 - 17;
    v26 = *(unsigned int *)(a4 + 8);
    if ((_DWORD)v26)
    {
      v27 = *(size_t **)a4;
      v28 = *(_QWORD *)a4 + 16 * v26;
      do
      {
        v29 = v25 >= 8;
        v30 = v25 - 8;
        if (!v29)
          goto LABEL_38;
        *v24 = *v27;
        v31 = v24 + 1;
        v44 = v31;
        v45 = v30;
        if (v30 <= 7)
          goto LABEL_38;
        *v31 = v27[1];
        v24 = v31 + 1;
        v25 = v45 - 8;
        v44 = v24;
        v45 -= 8;
        v27 += 2;
      }
      while (v27 != (size_t *)v28);
    }
    v32 = llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>::serialize<llvm::orc::ExecutorAddrRange,llvm::orc::ExecutorAddrRange>(&v44, (_QWORD *)(a4 + 64), (_QWORD *)(a4 + 80));
    v22 = xmmword_24AA2ACE0;
    if (!v32)
    {
LABEL_38:
      getErrorErrorCat();
      v49 = 3;
      v50 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Cannot serialize arguments for AllocActionCall", &v49, &v43);
      *(_BYTE *)(a1 + 56) |= 1u;
      *(_QWORD *)a1 = v43;
      v43 = 0;
      goto LABEL_39;
    }
    v23 = v45;
  }
  if (v23 < 8)
    goto LABEL_38;
  *v44 = a5[2];
  v33 = v44 + 1;
  v34 = v45 - 8;
  ++v44;
  v45 -= 8;
  v35 = a5[2];
  if ((_DWORD)v35)
  {
    v36 = *(_QWORD *)a5;
    v37 = *(_QWORD *)a5 + 32 * v35;
    while (v34 >= 8)
    {
      v38 = *(const void **)v36;
      v39 = *(_QWORD *)(v36 + 8);
      *v33 = v39;
      v40 = v33 + 1;
      v41 = v45 - 8;
      v44 = v40;
      v45 -= 8;
      if (v39)
      {
        v29 = v41 >= v39;
        v41 -= v39;
        if (!v29)
          goto LABEL_38;
        memcpy(v40, v38, v39);
        v22 = xmmword_24AA2ACE0;
        v40 = (size_t *)((char *)v40 + v39);
        v44 = v40;
        v45 = v41;
      }
      if (v41 < 8)
        break;
      *v40 = *(_QWORD *)(v36 + 16);
      v42 = v44++;
      v45 -= 8;
      if (v45 <= 7)
        break;
      v42[1] = *(_QWORD *)(v36 + 24);
      v33 = v42 + 2;
      v34 = v45 - 8;
      v44 = v33;
      v45 -= 8;
      v36 += 32;
      if (v36 == v37)
        goto LABEL_35;
    }
    goto LABEL_38;
  }
LABEL_35:
  v46 = v48;
  v47 = v22;
  if ((_QWORD)v54)
  {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v46, (const void **)&v53);
    v49 = a2;
    v50 = v52;
    v51 = xmmword_24AA2ACE0;
    if ((_QWORD)v47)
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v50, (const void **)&v46);
  }
  else
  {
    v49 = a2;
    v50 = v52;
    v51 = v22;
  }
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(a1, (uint64_t)&v49);
  if (v50 != v52)
    free(v50);
  if (v46 != v48)
    free(v46);
LABEL_39:
  if (v53 != v55)
    free(v53);
}

void std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::push_back[abi:nn180100](void **a1, _OWORD *a2)
{
  unint64_t v4;
  _OWORD *v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  _OWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  __int128 v17;
  __int128 v18;
  char *v19;
  char *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  char *v25;
  char *v26;

  v5 = a1[1];
  v4 = (unint64_t)a1[2];
  if ((unint64_t)v5 < v4)
  {
    *v5 = *a2;
    v6 = a2[1];
    v7 = a2[2];
    v8 = a2[4];
    v5[3] = a2[3];
    v5[4] = v8;
    v5[1] = v6;
    v5[2] = v7;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v5 + 5), a2 + 5);
    v9 = v5 + 7;
    goto LABEL_19;
  }
  v10 = 0x6DB6DB6DB6DB6DB7 * (((char *)v5 - (_BYTE *)*a1) >> 4);
  if ((unint64_t)(v10 + 1) > 0x249249249249249)
    abort();
  v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v4 - (_QWORD)*a1) >> 4);
  v12 = 2 * v11;
  if (2 * v11 <= v10 + 1)
    v12 = v10 + 1;
  if (v11 >= 0x124924924924924)
    v13 = 0x249249249249249;
  else
    v13 = v12;
  if (v13)
  {
    if (v13 > 0x249249249249249)
      std::__throw_bad_array_new_length[abi:nn180100]();
    v14 = (char *)operator new(112 * v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = &v14[112 * v10];
  v16 = &v14[112 * v13];
  v17 = a2[3];
  *((_OWORD *)v15 + 2) = a2[2];
  *((_OWORD *)v15 + 3) = v17;
  *((_OWORD *)v15 + 4) = a2[4];
  v18 = a2[1];
  *(_OWORD *)v15 = *a2;
  *((_OWORD *)v15 + 1) = v18;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v15 + 80), a2 + 5);
  v9 = v15 + 112;
  v20 = (char *)*a1;
  v19 = (char *)a1[1];
  if (v19 == *a1)
  {
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (!v19)
      goto LABEL_19;
    goto LABEL_18;
  }
  do
  {
    *((_OWORD *)v15 - 7) = *((_OWORD *)v19 - 7);
    v21 = *((_OWORD *)v19 - 6);
    v22 = *((_OWORD *)v19 - 5);
    v23 = *((_OWORD *)v19 - 3);
    *((_OWORD *)v15 - 4) = *((_OWORD *)v19 - 4);
    *((_OWORD *)v15 - 3) = v23;
    *((_OWORD *)v15 - 6) = v21;
    *((_OWORD *)v15 - 5) = v22;
    v24 = (uint64_t)(v15 - 32);
    v15 -= 112;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v24, (__int128 *)v19 - 2);
    v19 -= 112;
  }
  while (v19 != v20);
  v19 = (char *)*a1;
  v25 = (char *)a1[1];
  *a1 = v15;
  a1[1] = v9;
  a1[2] = v16;
  if (v25 != v19)
  {
    do
    {
      v26 = v25 - 112;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)v25 - 4);
      v25 = v26;
    }
    while (v26 != v19);
  }
  if (v19)
LABEL_18:
    operator delete(v19);
LABEL_19:
  a1[1] = v9;
}

void *llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_3::operator()(_QWORD **a1, const void *a2, size_t a3, __int128 **a4)
{
  size_t v8;
  void *result;
  unint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  int8x16_t v14;
  int8x16_t v15;
  int8x8_t v16;
  unsigned int v17;
  int v18;
  uint64_t v19;
  __int128 *v20;
  __int128 *v21;
  unint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  int8x16_t v25;
  int8x16_t v26;
  int8x8_t v27;
  int v28;
  unsigned int v29;
  uint64_t v30;
  __int128 v31;
  __int128 v32;
  __int128 __dst;
  int8x16_t v34;
  int8x16_t v35;
  int8x8_t v36;
  unsigned int v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (a3 <= 0x3F)
    v8 = 64 - a3;
  else
    v8 = 0;
  bzero((char *)&__dst + a3, v8);
  result = memcpy(&__dst, a2, a3);
  v10 = (unint64_t)((char *)a4[1] - (char *)*a4) >> 4;
  v11 = -1227133513 * v10;
  v12 = 613566768 * v10 + 72;
  v13 = (uint64_t)*a1;
  v14 = v34;
  v15 = v35;
  v16 = v36;
  v17 = v37;
  if (*(_DWORD *)(**a1 + 172) == 1)
  {
    v18 = 25;
  }
  else
  {
    v12 = bswap32(v12);
    v14 = vrev64q_s8(v34);
    v15 = vrev64q_s8(v35);
    v16 = vrev32_s8(v36);
    v11 = bswap32(v11);
    v17 = bswap32(v37);
    v18 = 419430400;
  }
  v19 = **(_QWORD **)(v13 + 8);
  *(_DWORD *)v19 = v18;
  *(_DWORD *)(v19 + 4) = v12;
  *(_OWORD *)(v19 + 8) = __dst;
  *(int8x16_t *)(v19 + 24) = v14;
  *(int8x16_t *)(v19 + 40) = v15;
  *(int8x8_t *)(v19 + 56) = v16;
  *(_DWORD *)(v19 + 64) = v11;
  *(_DWORD *)(v19 + 68) = v17;
  **(_QWORD **)(v13 + 8) += 72;
  v21 = *a4;
  v20 = a4[1];
  while (v21 != v20)
  {
    v22 = *((_QWORD *)v21 + 13);
    if (v22 >= 8)
    {
      v23 = v21 + 5;
      if ((v22 & 2) == 0)
        v23 = (_QWORD *)*v23;
      result = (void *)(*(uint64_t (**)(_QWORD *, _QWORD))(v22 & 0xFFFFFFFFFFFFFFF8))(v23, *a1[1] - *a1[2]);
    }
    v24 = (uint64_t)*a1;
    v26 = (int8x16_t)v21[2];
    v25 = (int8x16_t)v21[3];
    v27 = (int8x8_t)v21[4];
    v29 = *((_DWORD *)v21 + 18);
    v28 = *((_DWORD *)v21 + 19);
    if (*(_DWORD *)(**a1 + 172) != 1)
    {
      v26 = vrev64q_s8(v26);
      v25 = vrev32q_s8(v25);
      v27 = vrev32_s8(v27);
      v29 = bswap32(v29);
    }
    v30 = **(_QWORD **)(v24 + 8);
    v31 = *v21;
    v32 = v21[1];
    v21 += 7;
    *(_OWORD *)v30 = v31;
    *(_OWORD *)(v30 + 16) = v32;
    *(int8x16_t *)(v30 + 32) = v26;
    *(int8x16_t *)(v30 + 48) = v25;
    *(int8x8_t *)(v30 + 64) = v27;
    *(_DWORD *)(v30 + 72) = v29;
    *(_DWORD *)(v30 + 76) = v28;
    **(_QWORD **)(v24 + 8) += 80;
  }
  return result;
}

void **std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::~vector[abi:nn180100](void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  char *v5;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 112;
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)v3 - 4);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::ExecutorAddr,llvm::SmallVector<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>,2u>>(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t *a4)
{
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  _BYTE v20[24];
  uint64_t v21;
  void *v22;
  __int128 v23;
  _BYTE v24[24];
  _QWORD *v25;
  __int128 v26;
  _QWORD v27[4];

  v27[3] = *MEMORY[0x24BDAC8D0];
  v25 = v27;
  v26 = xmmword_24AA2ACE0;
  v8 = *((_DWORD *)a4 + 2);
  if (v8)
    v9 = 17 * ((24 * (unint64_t)v8 - 24) / 0x18) + 33;
  else
    v9 = 16;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v25, v9);
  v10 = v26;
  if ((unint64_t)v26 < 8 || (v11 = v25, *v25 = *a3, (v10 & 0xFFFFFFFFFFFFFFF8) == 8))
  {
LABEL_6:
    getErrorErrorCat();
    v21 = 3;
    v22 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Cannot serialize arguments for AllocActionCall", &v21, &v17);
    *(_BYTE *)(a1 + 56) |= 1u;
    *(_QWORD *)a1 = v17;
    v17 = 0;
    goto LABEL_7;
  }
  v11[1] = *((unsigned int *)a4 + 2);
  v12 = *((_DWORD *)a4 + 2);
  if (v12)
  {
    v13 = *a4;
    v14 = *a4 + 24 * v12;
    v15 = v10 - 16;
    v16 = (char *)(v11 + 2);
    while (v15 >= 8)
    {
      *(_QWORD *)v16 = *(_QWORD *)v13;
      if ((v15 & 0xFFFFFFFFFFFFFFF8) == 8)
        break;
      *((_QWORD *)v16 + 1) = *(_QWORD *)(v13 + 8);
      if (v15 == 16)
        break;
      v16[16] = *(_BYTE *)(v13 + 16);
      v16 += 17;
      v15 -= 17;
      v13 += 24;
      if (v13 == v14)
        goto LABEL_16;
    }
    goto LABEL_6;
  }
LABEL_16:
  v18 = v20;
  v19 = xmmword_24AA2ACE0;
  if ((_QWORD)v26)
  {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v18, (const void **)&v25);
    v21 = a2;
    v22 = v24;
    v23 = xmmword_24AA2ACE0;
    if ((_QWORD)v19)
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v22, (const void **)&v18);
  }
  else
  {
    v21 = a2;
    v22 = v24;
    v23 = xmmword_24AA2ACE0;
  }
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(a1, (uint64_t)&v21);
  if (v22 != v24)
    free(v22);
  if (v18 != v20)
    free(v18);
LABEL_7:
  if (v25 != v27)
    free(v25);
}

uint64_t llvm::orc::SimpleMachOHeaderMU::SimpleMachOHeaderMU(uint64_t a1, uint64_t a2, uint64_t *a3, __int128 *a4)
{
  unint64_t *v8;
  unint64_t v9;
  unint64_t *v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  uint64_t v18;
  _QWORD v20[2];
  int v21;
  uint64_t v22;
  unint64_t *v23;
  uint64_t v24;
  int v25;
  unint64_t *v26;
  uint64_t v27;
  int v28;

  v26 = 0;
  v27 = 0;
  v28 = 0;
  *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v26, a3)+ 4) = 4096;
  llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(a2 + 8) + 72), (uint64_t *)"___mh_executable_header", 0x17uLL, &v23);
  *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct((uint64_t *)&v26, &v23)+ 4) = 4096;
  if ((unint64_t)v23 - 1 < 0xFFFFFFFFFFFFFFE0)
  {
    v8 = v23 + 1;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
  }
  v10 = v26;
  v23 = v26;
  v11 = v27;
  v12 = HIDWORD(v27);
  v24 = v27;
  v26 = 0;
  v27 = 0;
  v13 = v28;
  v25 = v28;
  v14 = *a3;
  v28 = 0;
  if ((unint64_t)(v14 - 1) < 0xFFFFFFFFFFFFFFE0)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 + 1, v15));
    v10 = v23;
    v11 = v24;
    v12 = HIDWORD(v24);
    v13 = v25;
  }
  v23 = 0;
  v24 = 0;
  v25 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v23);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v26);
  *(_QWORD *)a1 = off_251C147C0;
  *(_QWORD *)(a1 + 8) = v10;
  v20[0] = 0;
  *(_DWORD *)(a1 + 16) = v11;
  *(_DWORD *)(a1 + 20) = v12;
  v20[1] = 0;
  *(_DWORD *)(a1 + 24) = v13;
  v21 = 0;
  *(_QWORD *)(a1 + 32) = v14;
  v22 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v20);
  *(_QWORD *)a1 = off_251C14FD8;
  *(_QWORD *)(a1 + 40) = a2;
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  if (*((_BYTE *)a4 + 40))
  {
    v17 = *a4;
    *(_QWORD *)(a1 + 64) = *((_QWORD *)a4 + 2);
    *(_OWORD *)(a1 + 48) = v17;
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    v18 = *((_QWORD *)a4 + 3);
    *(_DWORD *)(a1 + 80) = *((_DWORD *)a4 + 8);
    *(_QWORD *)(a1 + 72) = v18;
    *(_BYTE *)(a1 + 88) = 1;
  }
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 96) = a4[3];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a4 + 8);
  *((_QWORD *)a4 + 6) = 0;
  *((_QWORD *)a4 + 7) = 0;
  *((_QWORD *)a4 + 8) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_OWORD *)(a1 + 120) = *(__int128 *)((char *)a4 + 72);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a4 + 11);
  *((_QWORD *)a4 + 9) = 0;
  *((_QWORD *)a4 + 10) = 0;
  *((_QWORD *)a4 + 11) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_OWORD *)(a1 + 144) = a4[6];
  *(_QWORD *)(a1 + 160) = *((_QWORD *)a4 + 14);
  *((_QWORD *)a4 + 12) = 0;
  *((_QWORD *)a4 + 13) = 0;
  *((_QWORD *)a4 + 14) = 0;
  return a1;
}

void llvm::orc::SimpleMachOHeaderMU::materialize(_QWORD *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  llvm::jitlink::LinkGraph *v7;
  uint64_t Section;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  llvm::jitlink::LinkGraph *v21;
  uint64_t *v22;
  void *__p[2];
  char v24;
  llvm::jitlink::LinkGraph *v25;
  _QWORD *v26;
  _BYTE v27[31];

  v4 = a1[5];
  std::string::basic_string[abi:nn180100]<0>(__p, "<MachOHeaderMU>");
  if (v24 < 0)
    operator delete(__p[0]);
  v5 = *a2;
  v6 = **a2;
  v7 = v25;
  Section = llvm::jitlink::LinkGraph::createSection((uint64_t)v25, (uint64_t)"__header", 8, 1);
  v9 = (*(uint64_t (**)(_QWORD *, uint64_t, llvm::jitlink::LinkGraph *, uint64_t))(*a1 + 48))(a1, v6, v7, Section);
  v10 = (uint64_t *)v5[5];
  v11 = *v10;
  v12 = *(_QWORD *)(v9 + 32);
  v13 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v7, 40, 3);
  *v13 = v10 + 2;
  v13[1] = v11;
  v13[2] = v9;
  v13[3] = 0x1000000000000000;
  v13[4] = v12;
  v14 = *(_QWORD *)(v9 + 16) + 56;
  v26 = v13;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v14, &v26, (uint64_t)v27);
  v15 = *(_QWORD *)(v9 + 32);
  v16 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v7, 40, 3);
  *v16 = "___mh_executable_header";
  v16[1] = 23;
  v16[3] = 0x1000000000000000;
  v16[4] = v15;
  v16[2] = v9;
  v17 = *(_QWORD *)(v9 + 16) + 56;
  v26 = v16;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v17, &v26, (uint64_t)v27);
  v18 = *(_QWORD *)(a1[5] + 24);
  v19 = *a2;
  *a2 = 0;
  v21 = v7;
  v22 = v19;
  llvm::orc::ObjectLinkingLayer::emit(v18, &v22, (uint64_t *)&v21);
  if (v21)
  {
    llvm::jitlink::LinkGraph::~LinkGraph(v21);
    MEMORY[0x24BD1B3A4]();
  }
  v20 = v22;
  v22 = 0;
  if (v20)
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v22, v20);
}

void `anonymous namespace'::createPlatformGraph(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  __int128 *v5;
  uint64_t v6;
  void *__p[2];
  uint64_t v8;

  v5 = (__int128 *)(a2 + 40);
  v6 = operator new();
  *(_OWORD *)__p = *(_OWORD *)a3;
  v8 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *a1 = llvm::jitlink::LinkGraph::LinkGraph(v6, (__int128 *)__p, v5, 8, 1, (uint64_t)llvm::jitlink::getGenericEdgeKindName);
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

_QWORD *llvm::orc::SimpleMachOHeaderMU::createHeaderBlock(llvm::orc::SimpleMachOHeaderMU *this, llvm::orc::JITDylib *a2, llvm::jitlink::LinkGraph *a3, llvm::jitlink::Section *a4)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int64x2_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *i;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  uint64_t *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  __int128 *v50;
  __int128 *j;
  uint64_t v52;
  __int128 v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  char *v62;
  uint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  uint64_t v67;
  int64x2_t v68;
  uint64_t v69;
  __int128 *v70;
  __int128 *k;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  char *v80;
  uint64_t *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  int64x2_t v86;
  uint64_t v87;
  unint64_t v88;
  _OWORD *v89;
  _QWORD *v90;
  llvm::orc::SimpleMachOHeaderMU *v92;
  int64x2_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99[6];
  void *v100[2];
  __int128 v101;
  _QWORD **v102;
  _QWORD *v103[2];
  void *__p;
  void *v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t v109;
  std::string v110;
  uint64_t v111;
  uint64_t *v112;

  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 72) + 64) == 3;
  v6 = 4096;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 5) + 8) + 72) + 64) == 3)
    v6 = 0x4000;
  v98 = v6;
  v99[0] = (uint64_t)v99;
  v7 = 16777228;
  v99[1] = (uint64_t)v99;
  if (!v5)
    v7 = 0x301000007;
  v103[1] = 0;
  __p = 0;
  memset(&v99[2], 0, 32);
  *(_OWORD *)v100 = 0u;
  v101 = 0u;
  v102 = v103;
  v103[0] = 0;
  v105 = 0;
  v106 = 0;
  v96 = 0;
  v97 = 0;
  v95.i32[0] = -17958193;
  *(uint64_t *)((char *)v95.i64 + 4) = v7;
  v95.i32[3] = 6;
  if (!*((_BYTE *)this + 88))
  {
    v8 = operator new();
    if (*((char *)a2 + 31) < 0)
      std::string::__init_copy_ctor_external(&v110, *((const std::string::value_type **)a2 + 1), *((_QWORD *)a2 + 2));
    else
      v110 = *(std::string *)((char *)a2 + 8);
    *(_DWORD *)(v8 + 8) = 13;
    *(_QWORD *)v8 = off_251C15130;
    *(_QWORD *)(v8 + 48) = *((_QWORD *)&v110.__r_.__value_.__l + 2);
    v17 = *(_OWORD *)&v110.__r_.__value_.__l.__data_;
    *(_OWORD *)(v8 + 16) = xmmword_24AA2DBF0;
    *(_OWORD *)(v8 + 32) = v17;
    if (*(char *)(v8 + 55) < 0)
      v18 = *(_QWORD *)(v8 + 40);
    else
      LODWORD(v18) = *(unsigned __int8 *)(v8 + 55);
    *(_DWORD *)(v8 + 12) = (v18 & 0xFFFFFFFC) + 28;
    v12 = (uint64_t *)v99[4];
    if (v99[4] >= (unint64_t)v99[5])
    {
      v20 = (v99[4] - v99[3]) >> 3;
      if (!((unint64_t)(v20 + 1) >> 61))
      {
        v21 = (v99[5] - v99[3]) >> 2;
        if (v21 <= v20 + 1)
          v21 = v20 + 1;
        if (v99[5] - v99[3] >= 0x7FFFFFFFFFFFFFF8uLL)
          v22 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v22 = v21;
        v112 = &v99[5];
        if (v22)
          v23 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v99[5], v22);
        else
          v23 = 0;
        v24 = (uint64_t *)&v23[8 * v20];
        v25 = (uint64_t)&v23[8 * v22];
        v111 = v25;
        *v24 = v8;
        v19 = (uint64_t)(v24 + 1);
        v110.__r_.__value_.__r.__words[2] = (std::string::size_type)(v24 + 1);
        v29 = v99[3];
        v26 = (_QWORD *)v99[4];
        if (v99[4] != v99[3])
        {
          do
          {
            v30 = *--v26;
            *v26 = 0;
            *--v24 = v30;
          }
          while (v26 != (_QWORD *)v29);
          goto LABEL_44;
        }
LABEL_45:
        v31 = vdupq_n_s64((unint64_t)v26);
        goto LABEL_46;
      }
LABEL_118:
      abort();
    }
LABEL_28:
    *v12 = v8;
    v19 = (uint64_t)(v12 + 1);
    goto LABEL_47;
  }
  v8 = operator new();
  if (*((char *)this + 71) < 0)
    std::string::__init_copy_ctor_external(&v110, *((const std::string::value_type **)this + 6), *((_QWORD *)this + 7));
  else
    v110 = *(std::string *)((_BYTE *)this + 2);
  v10 = *((_DWORD *)this + 20);
  *(_DWORD *)(v8 + 8) = 13;
  *(_DWORD *)(v8 + 16) = 24;
  *(_QWORD *)(v8 + 20) = *((_QWORD *)this + 9);
  *(_DWORD *)(v8 + 28) = v10;
  *(_QWORD *)v8 = off_251C15130;
  *(std::string *)(v8 + 32) = v110;
  if (*(char *)(v8 + 55) < 0)
    v11 = *(_QWORD *)(v8 + 40);
  else
    LODWORD(v11) = *(unsigned __int8 *)(v8 + 55);
  *(_DWORD *)(v8 + 12) = (v11 & 0xFFFFFFFC) + 28;
  v12 = (uint64_t *)v99[4];
  if (v99[4] < (unint64_t)v99[5])
    goto LABEL_28;
  v13 = (v99[4] - v99[3]) >> 3;
  if ((unint64_t)(v13 + 1) >> 61)
    goto LABEL_118;
  v14 = (v99[5] - v99[3]) >> 2;
  if (v14 <= v13 + 1)
    v14 = v13 + 1;
  if (v99[5] - v99[3] >= 0x7FFFFFFFFFFFFFF8uLL)
    v15 = 0x1FFFFFFFFFFFFFFFLL;
  else
    v15 = v14;
  v112 = &v99[5];
  if (v15)
    v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v99[5], v15);
  else
    v16 = 0;
  v24 = (uint64_t *)&v16[8 * v13];
  v25 = (uint64_t)&v16[8 * v15];
  v111 = v25;
  *v24 = v8;
  v19 = (uint64_t)(v24 + 1);
  v110.__r_.__value_.__r.__words[2] = (std::string::size_type)(v24 + 1);
  v27 = v99[3];
  v26 = (_QWORD *)v99[4];
  if (v99[4] == v99[3])
    goto LABEL_45;
  do
  {
    v28 = *--v26;
    *v26 = 0;
    *--v24 = v28;
  }
  while (v26 != (_QWORD *)v27);
LABEL_44:
  v31 = *(int64x2_t *)&v99[3];
  v19 = v110.__r_.__value_.__r.__words[2];
  v25 = v111;
LABEL_46:
  v99[3] = (uint64_t)v24;
  v99[4] = v19;
  *(int64x2_t *)&v110.__r_.__value_.__r.__words[1] = v31;
  v32 = v99[5];
  v99[5] = v25;
  v111 = v32;
  v110.__r_.__value_.__r.__words[0] = v31.i64[0];
  std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v110);
LABEL_47:
  v99[4] = v19;
  v33 = (_DWORD *)*((_QWORD *)this + 18);
  for (i = (_DWORD *)*((_QWORD *)this + 19); v33 != i; v33 += 3)
  {
    v35 = operator new();
    v36 = v35;
    *(_QWORD *)(v35 + 8) = 0x1800000032;
    *(_DWORD *)(v35 + 16) = *v33;
    *(_DWORD *)(v35 + 20) = v33[1];
    *(_DWORD *)(v35 + 24) = v33[2];
    *(_DWORD *)(v35 + 28) = 0;
    *(_QWORD *)v35 = &off_251C15160;
    v37 = v99[4];
    if (v99[4] >= (unint64_t)v99[5])
    {
      v39 = (v99[4] - v99[3]) >> 3;
      if ((unint64_t)(v39 + 1) >> 61)
        goto LABEL_118;
      v40 = (v99[5] - v99[3]) >> 2;
      if (v40 <= v39 + 1)
        v40 = v39 + 1;
      if (v99[5] - v99[3] >= 0x7FFFFFFFFFFFFFF8uLL)
        v41 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v41 = v40;
      v112 = &v99[5];
      if (v41)
        v42 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v99[5], v41);
      else
        v42 = 0;
      v43 = (uint64_t *)&v42[8 * v39];
      v44 = (uint64_t)&v42[8 * v41];
      v111 = v44;
      *v43 = v36;
      v38 = (uint64_t)(v43 + 1);
      v110.__r_.__value_.__r.__words[2] = (std::string::size_type)(v43 + 1);
      v46 = v99[3];
      v45 = (_QWORD *)v99[4];
      if (v99[4] == v99[3])
      {
        v48 = vdupq_n_s64(v99[4]);
      }
      else
      {
        do
        {
          v47 = *--v45;
          *v45 = 0;
          *--v43 = v47;
        }
        while (v45 != (_QWORD *)v46);
        v48 = *(int64x2_t *)&v99[3];
        v38 = v110.__r_.__value_.__r.__words[2];
        v44 = v111;
      }
      v99[3] = (uint64_t)v43;
      v99[4] = v38;
      *(int64x2_t *)&v110.__r_.__value_.__r.__words[1] = v48;
      v49 = v99[5];
      v99[5] = v44;
      v111 = v49;
      v110.__r_.__value_.__r.__words[0] = v48.i64[0];
      std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v110);
    }
    else
    {
      *(_QWORD *)v99[4] = v35;
      v38 = v37 + 8;
    }
    v99[4] = v38;
  }
  v92 = this;
  v50 = (__int128 *)*((_QWORD *)this + 12);
  for (j = (__int128 *)*((_QWORD *)this + 13); v50 != j; v50 = (__int128 *)((char *)v50 + 40))
  {
    v52 = operator new();
    if (*((char *)v50 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v50, *((_QWORD *)v50 + 1));
    }
    else
    {
      v53 = *v50;
      v110.__r_.__value_.__r.__words[2] = *((_QWORD *)v50 + 2);
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v53;
    }
    v54 = *((_DWORD *)v50 + 8);
    v55 = *((_QWORD *)v50 + 3);
    *(_DWORD *)(v52 + 8) = 12;
    *(_DWORD *)(v52 + 16) = 24;
    *(_QWORD *)(v52 + 20) = v55;
    *(_DWORD *)(v52 + 28) = v54;
    *(_QWORD *)v52 = off_251C15190;
    *(std::string *)(v52 + 32) = v110;
    if (*(char *)(v52 + 55) < 0)
      v56 = *(_QWORD *)(v52 + 40);
    else
      LODWORD(v56) = *(unsigned __int8 *)(v52 + 55);
    *(_DWORD *)(v52 + 12) = (v56 & 0xFFFFFFFC) + 28;
    v57 = v99[4];
    if (v99[4] >= (unint64_t)v99[5])
    {
      v59 = (v99[4] - v99[3]) >> 3;
      if ((unint64_t)(v59 + 1) >> 61)
        goto LABEL_118;
      v60 = (v99[5] - v99[3]) >> 2;
      if (v60 <= v59 + 1)
        v60 = v59 + 1;
      if (v99[5] - v99[3] >= 0x7FFFFFFFFFFFFFF8uLL)
        v61 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v61 = v60;
      v112 = &v99[5];
      if (v61)
        v62 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v99[5], v61);
      else
        v62 = 0;
      v63 = (uint64_t *)&v62[8 * v59];
      v64 = (uint64_t)&v62[8 * v61];
      v111 = v64;
      *v63 = v52;
      v58 = (uint64_t)(v63 + 1);
      v110.__r_.__value_.__r.__words[2] = (std::string::size_type)(v63 + 1);
      v66 = v99[3];
      v65 = (_QWORD *)v99[4];
      if (v99[4] == v99[3])
      {
        v68 = vdupq_n_s64(v99[4]);
      }
      else
      {
        do
        {
          v67 = *--v65;
          *v65 = 0;
          *--v63 = v67;
        }
        while (v65 != (_QWORD *)v66);
        v68 = *(int64x2_t *)&v99[3];
        v58 = v110.__r_.__value_.__r.__words[2];
        v64 = v111;
      }
      v99[3] = (uint64_t)v63;
      v99[4] = v58;
      *(int64x2_t *)&v110.__r_.__value_.__r.__words[1] = v68;
      v69 = v99[5];
      v99[5] = v64;
      v111 = v69;
      v110.__r_.__value_.__r.__words[0] = v68.i64[0];
      std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v110);
    }
    else
    {
      *(_QWORD *)v99[4] = v52;
      v58 = v57 + 8;
    }
    v99[4] = v58;
  }
  v70 = (__int128 *)*((_QWORD *)v92 + 15);
  for (k = (__int128 *)*((_QWORD *)v92 + 16); v70 != k; v70 = (__int128 *)((char *)v70 + 24))
  {
    v72 = operator new();
    if (*((char *)v70 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&v110, *(const std::string::value_type **)v70, *((_QWORD *)v70 + 1));
    }
    else
    {
      v73 = *v70;
      v110.__r_.__value_.__r.__words[2] = *((_QWORD *)v70 + 2);
      *(_OWORD *)&v110.__r_.__value_.__l.__data_ = v73;
    }
    *(_DWORD *)(v72 + 8) = -2147483620;
    *(_DWORD *)(v72 + 16) = 12;
    *(_QWORD *)v72 = off_251C151C0;
    *(std::string *)(v72 + 24) = v110;
    if (*(char *)(v72 + 47) < 0)
      v74 = *(_QWORD *)(v72 + 32);
    else
      LODWORD(v74) = *(unsigned __int8 *)(v72 + 47);
    *(_DWORD *)(v72 + 12) = (v74 & 0xFFFFFFFC) + 16;
    v75 = v99[4];
    if (v99[4] >= (unint64_t)v99[5])
    {
      v77 = (v99[4] - v99[3]) >> 3;
      if ((unint64_t)(v77 + 1) >> 61)
        goto LABEL_118;
      v78 = (v99[5] - v99[3]) >> 2;
      if (v78 <= v77 + 1)
        v78 = v77 + 1;
      if (v99[5] - v99[3] >= 0x7FFFFFFFFFFFFFF8uLL)
        v79 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v79 = v78;
      v112 = &v99[5];
      if (v79)
        v80 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v99[5], v79);
      else
        v80 = 0;
      v81 = (uint64_t *)&v80[8 * v77];
      v82 = (uint64_t)&v80[8 * v79];
      v111 = v82;
      *v81 = v72;
      v76 = (uint64_t)(v81 + 1);
      v110.__r_.__value_.__r.__words[2] = (std::string::size_type)(v81 + 1);
      v84 = v99[3];
      v83 = (_QWORD *)v99[4];
      if (v99[4] == v99[3])
      {
        v86 = vdupq_n_s64(v99[4]);
      }
      else
      {
        do
        {
          v85 = *--v83;
          *v83 = 0;
          *--v81 = v85;
        }
        while (v83 != (_QWORD *)v84);
        v86 = *(int64x2_t *)&v99[3];
        v76 = v110.__r_.__value_.__r.__words[2];
        v82 = v111;
      }
      v99[3] = (uint64_t)v81;
      v99[4] = v76;
      *(int64x2_t *)&v110.__r_.__value_.__r.__words[1] = v86;
      v87 = v99[5];
      v99[5] = v82;
      v111 = v87;
      v110.__r_.__value_.__r.__words[0] = v86.i64[0];
      std::__split_buffer<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>::~__split_buffer((uint64_t)&v110);
    }
    else
    {
      *(_QWORD *)v99[4] = v72;
      v76 = v75 + 8;
    }
    v99[4] = v76;
  }
  v88 = llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::layout(&v95);
  v89 = (_OWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)a3, v88, 0);
  llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::write((uint64_t)&v95, v89, v88);
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)v89;
  v110.__r_.__value_.__l.__size_ = v88;
  v108 = 8;
  v109 = 0;
  v107 = 0;
  v90 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)a3, (uint64_t)a4, (uint64_t *)&v110, &v109, &v108, &v107);
  if (__p)
  {
    v105 = __p;
    operator delete(__p);
  }
  std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)&v102, v103[0]);
  if (v100[1])
  {
    *(void **)&v101 = v100[1];
    operator delete(v100[1]);
  }
  v110.__r_.__value_.__r.__words[0] = (std::string::size_type)&v99[3];
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v110);
  std::__list_imp<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment,std::allocator<llvm::orc::MachOBuilder<llvm::orc::MachO64LE>::Segment>>::clear(v99);
  return v90;
}

void llvm::orc::MachOPlatform::MachOPlatformPlugin::~MachOPlatformPlugin(llvm::orc::MachOPlatform::MachOPlatformPlugin *this)
{
  *(_QWORD *)this = &off_251C15020;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::destroyAll((uint64_t)this + 128);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 16), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 13), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 10), 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
}

{
  *(_QWORD *)this = &off_251C15020;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::destroyAll((uint64_t)this + 128);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 16), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 13), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 10), 8);
  std::mutex::~mutex((std::mutex *)((char *)this + 8));
  JUMPOUT(0x24BD1B3A4);
}

void llvm::orc::MachOPlatform::MachOPlatformPlugin::notifyFailed(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void llvm::orc::MachOPlatform::MachOPlatformPlugin::notifyRemovingResources(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void llvm::orc::MachOPlatform::~MachOPlatform(llvm::orc::MachOPlatform *this)
{
  llvm::orc::MachOPlatform::~MachOPlatform(this);
  JUMPOUT(0x24BD1B3A4);
}

{
  uint64_t v2;
  unint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;

  *(_QWORD *)this = &off_251C14F88;
  MEMORY[0x24BD1B398](*((_QWORD *)this + 54), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 51), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 48), 8);
  std::mutex::~mutex((std::mutex *)this + 5);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>,llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::SymbolLookupSet>>::destroyAll((unsigned int *)this + 74);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 37), 8);
  v2 = *((_QWORD *)this + 35);
  if ((unint64_t)(v2 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v3 = (unint64_t *)(v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
  }
  v5 = *((_QWORD *)this + 33);
  if ((unint64_t)(v5 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldaxr(v6);
    while (__stlxr(v7 - 1, v6));
  }
  v8 = *((_QWORD *)this + 31);
  if ((unint64_t)(v8 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v9 = (unint64_t *)(v8 + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
  }
  v11 = *((_QWORD *)this + 29);
  if ((unint64_t)(v11 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
  }
  v14 = *((_QWORD *)this + 27);
  if ((unint64_t)(v14 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v15 = (unint64_t *)(v14 + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
  }
  v17 = *((_QWORD *)this + 25);
  if ((unint64_t)(v17 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v18 = (unint64_t *)(v17 + 8);
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
  }
  v20 = *((_QWORD *)this + 23);
  if ((unint64_t)(v20 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v21 = (unint64_t *)(v20 + 8);
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
  }
  v23 = *((_QWORD *)this + 21);
  if ((unint64_t)(v23 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v24 = (unint64_t *)(v23 + 8);
    do
      v25 = __ldaxr(v24);
    while (__stlxr(v25 - 1, v24));
  }
  v26 = *((_QWORD *)this + 19);
  if ((unint64_t)(v26 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v27 = (unint64_t *)(v26 + 8);
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
  }
  v29 = *((_QWORD *)this + 17);
  if ((unint64_t)(v29 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v30 = (unint64_t *)(v29 + 8);
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
  }
  v32 = *((_QWORD *)this + 15);
  if ((unint64_t)(v32 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v33 = (unint64_t *)(v32 + 8);
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
  }
  v35 = *((_QWORD *)this + 13);
  if ((unint64_t)(v35 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v36 = (unint64_t *)(v35 + 8);
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
  }
  v38 = *((_QWORD *)this + 11);
  if ((unint64_t)(v38 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
  }
  v41 = *((_QWORD *)this + 9);
  if ((unint64_t)(v41 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v42 = (unint64_t *)(v41 + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
  }
  v44 = *((_QWORD *)this + 8);
  if ((unint64_t)(v44 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v45 = (unint64_t *)(v44 + 8);
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)this + 4);
}

void llvm::orc::SimpleMachOHeaderMU::~SimpleMachOHeaderMU(llvm::orc::SimpleMachOHeaderMU *this)
{
  void *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void **v6;

  *(_QWORD *)this = off_251C14FD8;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v6 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)((char *)this + 96);
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](&v6);
  if (*((_BYTE *)this + 88) && *((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  *(_QWORD *)this = off_251C147C0;
  v3 = *((_QWORD *)this + 4);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)this + 8);
}

{
  void *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  void **v6;

  *(_QWORD *)this = off_251C14FD8;
  v2 = (void *)*((_QWORD *)this + 18);
  if (v2)
  {
    *((_QWORD *)this + 19) = v2;
    operator delete(v2);
  }
  v6 = (void **)((char *)this + 120);
  std::vector<std::string>::__destroy_vector::operator()[abi:nn180100](&v6);
  v6 = (void **)((char *)this + 96);
  std::vector<llvm::orc::MachOPlatform::HeaderOptions::Dylib>::__destroy_vector::operator()[abi:nn180100](&v6);
  if (*((_BYTE *)this + 88) && *((char *)this + 71) < 0)
    operator delete(*((void **)this + 6));
  *(_QWORD *)this = off_251C147C0;
  v3 = *((_QWORD *)this + 4);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)this + 8);
  MEMORY[0x24BD1B3A4](this, 0x10B3C402DB37A05);
}

const char *llvm::orc::SimpleMachOHeaderMU::getName(llvm::orc::SimpleMachOHeaderMU *this)
{
  return "MachOHeaderMU";
}

_DWORD *llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::init(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(8 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 8 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 2;
        v6 -= 8;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::nested_collection_iterator(uint64_t a1, _QWORD *a2, __int128 *a3)
{
  __int128 v4;
  __int128 v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_OWORD *)a1 = v4;
  v5 = *a3;
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(a1 + 24) = v5;
  if (*a2 == *(_QWORD *)a3)
  {
    v7 = 0;
    v6 = 0;
  }
  else
  {
    v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(*(_QWORD *)(*a2 + 16) + 32);
  }
  *(_QWORD *)(a1 + 48) = v6;
  *(_QWORD *)(a1 + 56) = v7;
  llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::moveToNonEmptyInnerOrEnd((_QWORD *)a1);
  return a1;
}

_QWORD *llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::moveToNonEmptyInnerOrEnd(_QWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;

  v1 = *result;
  if (*result != result[3])
  {
    v2 = result;
    v3 = result + 6;
    do
    {
      v4 = *(_QWORD *)(v1 + 16);
      result = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v4 + 32);
      if (*v3 != *(_QWORD *)(v4 + 32) + 8 * *(unsigned int *)(v4 + 48))
        break;
      v5 = (_QWORD *)v2[1];
      v6 = (_QWORD *)(*v2 + 24);
      *v2 = v6;
      if (v6 != v5)
      {
        while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
        {
          v6 += 3;
          *v2 = v6;
          if (v6 == v5)
          {
            v6 = v5;
            break;
          }
        }
      }
      if (v6 == (_QWORD *)v2[3])
      {
        *v3 = 0;
        v3[1] = 0;
        return result;
      }
      result = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v6[2] + 32);
      v1 = *v2;
      v7 = v2[3];
      v2[6] = result;
      v2[7] = v8;
    }
    while (v1 != v7);
  }
  return result;
}

uint64_t llvm::SmallVectorImpl<llvm::orc::ExecutorAddrRange>::operator=(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 16 * v8);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 16 * v9);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 16);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

llvm::jitlink::Section *llvm::jitlink::Section::transferContentTo(llvm::jitlink::Section *this, llvm::jitlink::Section *a2)
{
  uint64_t v2;
  uint64_t v3;
  llvm::jitlink::Section *v5;
  _DWORD *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE v22[31];
  uint64_t v23;
  uint64_t v24;

  if (a2 != this)
  {
    v23 = v2;
    v24 = v3;
    v5 = this;
    v6 = (_DWORD *)((char *)this + 56);
    v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)this + 56);
    v9 = *((_QWORD *)v5 + 7) + 8 * *((unsigned int *)v5 + 18);
    if ((uint64_t *)v9 != v7)
    {
      v10 = v7;
      v11 = v8;
      do
      {
        v12 = *v10++;
        v21 = v12;
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)a2 + 56, &v21, (uint64_t)v22);
        while (v10 != v11)
        {
          if ((*v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_9;
          ++v10;
        }
        v10 = v11;
LABEL_9:
        ;
      }
      while (v10 != (uint64_t *)v9);
    }
    v13 = (_DWORD *)((char *)v5 + 32);
    v14 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)v5 + 32);
    v16 = *((_QWORD *)v5 + 4) + 8 * *((unsigned int *)v5 + 12);
    if ((uint64_t *)v16 != v14)
    {
      v17 = v14;
      v18 = v15;
      v19 = (char *)a2 + 32;
      do
      {
        v20 = *v17++;
        v21 = v20;
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v19, &v21, (uint64_t)v22);
        while (v17 != v18)
        {
          if ((*v17 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_17;
          ++v17;
        }
        v17 = v18;
LABEL_17:
        ;
      }
      while (v17 != (uint64_t *)v16);
    }
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::clear(v6);
    return (llvm::jitlink::Section *)llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::clear(v13);
  }
  return this;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::clear(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 8 * v1;
        do
        {
          *v2++ = -4096;
          v3 -= 8;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::shrink_and_clear(result);
    }
  }
  return result;
}

_DWORD *llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::shrink_and_clear(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 8 * v2;
      do
      {
        *v6++ = -4096;
        v7 -= 8;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x24BD1B398](*(_QWORD *)result, 8);
    return llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::init(v1, v5);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::erase(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5;
  _OWORD *v6;
  uint64_t v8;

  v8 = 0;
  v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a2, &v8, a4);
  if ((_DWORD)v5)
  {
    v6 = (_OWORD *)v8;
    std::unique_ptr<llvm::jitlink::Section>::reset[abi:nn180100]((llvm::jitlink::Section **)(v8 + 16), 0);
    *v6 = xmmword_24AA2DBB0;
    *(int32x2_t *)(a1 + 8) = vadd_s32(*(int32x2_t *)(a1 + 8), (int32x2_t)0x1FFFFFFFFLL);
  }
  return v5;
}

void llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSSequence<char>)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSError ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSSequence<char>),llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef &,llvm::StringRef &>(llvm::orc::ExecutorAddr,llvm::Error &,llvm::orc::ExecutorAddr &,llvm::StringRef &,llvm::StringRef &)::{lambda(char const*,unsigned long)#1},llvm::Error,llvm::orc::ExecutorAddr,llvm::StringRef,llvm::StringRef>(uint64_t *a1@<X0>, uint64_t *a2@<X1>, size_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  uint64_t v9;
  unint64_t v10;
  size_t *v14;
  size_t *v15;
  const void *v16;
  size_t v17;
  size_t *v18;
  unint64_t v19;
  BOOL v20;
  const void *v21;
  size_t v22;
  void *v23;
  void *v24;
  __int128 *v25;
  void *v26;
  void *v27;
  llvm::formatv_object_base *v28[2];
  llvm::formatv_object_base *v29;
  __int128 v30;
  void *v31;
  unint64_t v32;

  *a2 = 0;
  v9 = *(_QWORD *)(a4 + 8) + *(_QWORD *)(a5 + 8);
  v10 = v9 + 24;
  if ((unint64_t)(v9 + 24) < 9)
  {
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v31);
  }
  else
  {
    v14 = (size_t *)malloc_type_malloc(v9 + 24, 0xBCDE199DuLL);
    v15 = v14;
    *v14 = *a3;
    if ((v10 & 0xFFFFFFFFFFFFFFF8) == 8)
      goto LABEL_10;
    v16 = *(const void **)a4;
    v17 = *(_QWORD *)(a4 + 8);
    v14[1] = v17;
    v18 = v14 + 2;
    v19 = v10 - 16;
    if (v17)
    {
      v20 = v19 >= v17;
      v19 -= v17;
      if (!v20)
        goto LABEL_10;
      memcpy(v14 + 2, v16, v17);
      v18 = (size_t *)((char *)v18 + v17);
    }
    if (v19 < 8)
    {
LABEL_10:
      llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)&v31);
      free(v15);
      goto LABEL_12;
    }
    v21 = *(const void **)a5;
    v22 = *(_QWORD *)(a5 + 8);
    *v18 = v22;
    v23 = v18 + 1;
    if (v22)
    {
      if (v19 - 8 < v22)
        goto LABEL_10;
      memcpy(v23, v21, v22);
    }
    v31 = v15;
    v32 = v10;
  }
LABEL_12:
  if (v32)
  {
    if (v32 <= 8)
      v24 = &v31;
    else
      v24 = v31;
  }
  else
  {
    v28[0] = (llvm::formatv_object_base *)v31;
    if (v31)
    {
      getErrorErrorCat();
      *(_QWORD *)&v30 = 3;
      *((_QWORD *)&v30 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(v28, (uint64_t *)&v30, a6);
      goto LABEL_30;
    }
    v24 = &v31;
  }
  llvm::orc::ExecutorProcessControl::callWrapper(*a1, a1[1], (uint64_t)v24, v32, &v30);
  if (*((_QWORD *)&v30 + 1))
  {
    if (*((_QWORD *)&v30 + 1) <= 8uLL)
      v25 = &v30;
    else
      v25 = (__int128 *)v30;
    goto LABEL_20;
  }
  v29 = (llvm::formatv_object_base *)v30;
  if (!(_QWORD)v30)
  {
    v25 = &v30;
LABEL_20:
    llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSError,llvm::Error>::deserialize(a2, (uint64_t)v25, *((uint64_t *)&v30 + 1), a6);
    goto LABEL_25;
  }
  getErrorErrorCat();
  v28[0] = (llvm::formatv_object_base *)3;
  v28[1] = (llvm::formatv_object_base *)&getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v29, (uint64_t *)v28, a6);
LABEL_25:
  if (*((_QWORD *)&v30 + 1) >= 9uLL)
  {
    v26 = (void *)v30;
LABEL_29:
    free(v26);
    goto LABEL_30;
  }
  if (!*((_QWORD *)&v30 + 1))
  {
    v26 = (void *)v30;
    if ((_QWORD)v30)
      goto LABEL_29;
  }
LABEL_30:
  if (v32 >= 9)
  {
    v27 = v31;
LABEL_34:
    free(v27);
    return;
  }
  if (!v32)
  {
    v27 = v31;
    if (v31)
      goto LABEL_34;
  }
}

uint64_t llvm::orc::JITDylib::addGenerator<llvm::orc::DefinitionGenerator>(std::unique_ptr<llvm::orc::DefinitionGenerator>)::{lambda(void)#1}::operator()(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t *v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t result;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  char *v17;
  _QWORD *v18;
  _QWORD *v19;
  char *v20;
  __int128 v21;
  int64x2_t v22;
  uint64_t v23;
  uint64_t v24;
  int64x2_t v25;
  uint64_t v26;
  _QWORD *v27;

  v1 = (_QWORD *)*a1;
  v2 = (uint64_t *)a1[1];
  v3 = *v2;
  if (*v2)
  {
    v4 = (_QWORD *)operator new();
    v5 = *v2;
    *v4 = &off_251C15080;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = v5;
  }
  else
  {
    v4 = 0;
  }
  *v2 = 0;
  result = (uint64_t)(v1 + 25);
  v7 = v1[25];
  v8 = (_QWORD *)v1[24];
  if ((unint64_t)v8 >= v7)
  {
    v10 = v1[23];
    v11 = ((uint64_t)v8 - v10) >> 4;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 60)
      abort();
    v13 = v7 - v10;
    if (v13 >> 3 > v12)
      v12 = v13 >> 3;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF0)
      v14 = 0xFFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    v27 = v1 + 25;
    v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(result, v14);
    v17 = &v15[16 * v11];
    *(_QWORD *)v17 = v3;
    *((_QWORD *)v17 + 1) = v4;
    v19 = (_QWORD *)v1[23];
    v18 = (_QWORD *)v1[24];
    if (v18 == v19)
    {
      v22 = vdupq_n_s64((unint64_t)v18);
      v20 = &v15[16 * v11];
    }
    else
    {
      v20 = &v15[16 * v11];
      do
      {
        v21 = *((_OWORD *)v18 - 1);
        v18 -= 2;
        *((_OWORD *)v20 - 1) = v21;
        v20 -= 16;
        *v18 = 0;
        v18[1] = 0;
      }
      while (v18 != v19);
      v22 = *(int64x2_t *)(v1 + 23);
    }
    v9 = v17 + 16;
    v1[23] = v20;
    v1[24] = v17 + 16;
    v25 = v22;
    v23 = v1[25];
    v1[25] = &v15[16 * v16];
    v26 = v23;
    v24 = v22.i64[0];
    result = std::__split_buffer<std::shared_ptr<llvm::orc::DefinitionGenerator>>::~__split_buffer((uint64_t)&v24);
  }
  else
  {
    *v8 = v3;
    v8[1] = v4;
    v9 = v8 + 2;
  }
  v1[24] = v9;
  return result;
}

void std::__shared_ptr_pointer<llvm::orc::DefinitionGenerator  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__shared_ptr_pointer<llvm::orc::DefinitionGenerator  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::SmallVectorImpl<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>::operator=(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t *v5;
  _QWORD *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  if ((uint64_t *)a1 != a2)
  {
    v5 = a2 + 2;
    v4 = *a2;
    if ((uint64_t *)*a2 == a2 + 2)
    {
      v7 = a2 + 1;
      v8 = *((unsigned int *)a2 + 2);
      v9 = *(unsigned int *)(a1 + 8);
      if (v9 >= v8)
      {
        if ((_DWORD)v8)
        {
          v11 = *(_QWORD **)a1;
          v12 = v4 + 24 * v8;
          do
          {
            *v11 = *(_QWORD *)v4;
            v11[1] = *(_QWORD *)(v4 + 8);
            *((_BYTE *)v11 + 16) = *(_BYTE *)(v4 + 16);
            v4 += 24;
            v11 += 3;
          }
          while (v4 != v12);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) >= v8)
        {
          if ((_DWORD)v9)
          {
            v13 = v4 + 24 * v9;
            v14 = *(_QWORD **)a1;
            do
            {
              *v14 = *(_QWORD *)v4;
              v14[1] = *(_QWORD *)(v4 + 8);
              *((_BYTE *)v14 + 16) = *(_BYTE *)(v4 + 16);
              v4 += 24;
              v14 += 3;
            }
            while (v4 != v13);
          }
          else
          {
            v9 = 0;
          }
          v10 = v8;
        }
        else
        {
          *(_DWORD *)(a1 + 8) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v8, 24);
          v9 = 0;
          v10 = *v7;
        }
        if (v9 != v10)
          memcpy((void *)(*(_QWORD *)a1 + 24 * v9), (const void *)(*a2 + 24 * v9), *a2 + 24 * v10 - (*a2 + 24 * v9));
      }
      *(_DWORD *)(a1 + 8) = v8;
    }
    else
    {
      v6 = *(_QWORD **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = (uint64_t)v5;
      *((_DWORD *)a2 + 3) = 0;
    }
    *v7 = 0;
  }
  return a1;
}

void `anonymous namespace'::MachOPlatformCompleteBootstrapMaterializationUnit::~MachOPlatformCompleteBootstrapMaterializationUnit(_anonymous_namespace_::MachOPlatformCompleteBootstrapMaterializationUnit *this)
{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void **v9;

  *(_QWORD *)this = off_251C150B8;
  v9 = (void **)((char *)this + 136);
  std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100](&v9);
  v2 = (char *)*((_QWORD *)this + 9);
  if (v2 != (char *)this + 88)
    free(v2);
  v3 = *((_QWORD *)this + 8);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
  }
  *(_QWORD *)this = off_251C147C0;
  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)this + 8);
}

{
  char *v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  void **v9;

  *(_QWORD *)this = off_251C150B8;
  v9 = (void **)((char *)this + 136);
  std::vector<llvm::orc::shared::AllocActionCallPair>::__destroy_vector::operator()[abi:nn180100](&v9);
  v2 = (char *)*((_QWORD *)this + 9);
  if (v2 != (char *)this + 88)
    free(v2);
  v3 = *((_QWORD *)this + 8);
  if ((unint64_t)(v3 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldaxr(v4);
    while (__stlxr(v5 - 1, v4));
  }
  *(_QWORD *)this = off_251C147C0;
  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(v6 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v7 = (unint64_t *)(v6 + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)this + 8);
  MEMORY[0x24BD1B3A4](this, 0x10F1C407EA5DECDLL);
}

const char *`anonymous namespace'::MachOPlatformCompleteBootstrapMaterializationUnit::getName(_anonymous_namespace_::MachOPlatformCompleteBootstrapMaterializationUnit *this)
{
  return "MachOPlatformCompleteBootstrap";
}

void `anonymous namespace'::MachOPlatformCompleteBootstrapMaterializationUnit::materialize(_QWORD *a1, uint64_t **a2)
{
  uint64_t v4;
  uint64_t *v5;
  uint64_t Section;
  _QWORD *v7;
  uint64_t *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  const void *v18;
  size_t v19;
  uint64_t v20;
  _QWORD *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  llvm::jitlink::LinkGraph *v28;
  uint64_t *v29;
  void *__p[2];
  char v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  const void *v35[7];
  uint64_t v36;
  const void *v37[7];
  uint64_t v38;
  const void *v39[7];
  uint64_t v40;
  const void *v41[6];
  char v42;
  uint64_t v43;
  const void *v44[7];
  uint64_t v45;
  const void *v46[7];
  uint64_t v47;
  void *v48;
  __int128 v49;
  _QWORD v50[3];
  uint64_t v51;
  void *v52;
  __int128 v53;
  _BYTE v54[24];
  uint64_t v55;
  __int128 v56;
  _BYTE v57[24];
  uint64_t v58;
  __int128 v59;
  _QWORD v60[5];

  v60[3] = *MEMORY[0x24BDAC8D0];
  v4 = a1[5];
  std::string::basic_string[abi:nn180100]<0>(__p, "<OrcRTCompleteBootstrap>");
  if (v31 < 0)
    operator delete(__p[0]);
  v5 = v32;
  Section = llvm::jitlink::LinkGraph::createSection((uint64_t)v32, (uint64_t)"__orc_rt_cplt_bs", 16, 1);
  v47 = 0;
  v58 = 1;
  v55 = 1;
  v33 = 0;
  v7 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)v5, Section, &v58, &v47, (unint64_t *)&v55, &v33);
  v8 = (uint64_t *)a1[8];
  v9 = *v8;
  v10 = (char *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v5, 40, 3);
  *(_QWORD *)v10 = v8 + 2;
  *((_QWORD *)v10 + 1) = v9;
  *((_QWORD *)v10 + 2) = v7;
  *(_OWORD *)(v10 + 24) = xmmword_24AA2DC00;
  v11 = v7[2] + 56;
  v58 = (uint64_t)v10;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v11, &v58, (uint64_t)&v47);
  v12 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a1[18] - a1[17]) >> 4) + 3;
  v13 = v5[32];
  if (0x6DB6DB6DB6DB6DB7 * ((v5[34] - v13) >> 4) < v12)
  {
    if (v12 >= 0x24924924924924ALL)
      abort();
    v14 = v5[33] - v13;
    v50[0] = v5 + 34;
    v47 = (uint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::orc::shared::AllocActionCallPair>>((uint64_t)(v5 + 34), v12);
    v48 = (void *)(v47 + v14);
    *(_QWORD *)&v49 = v47 + v14;
    *((_QWORD *)&v49 + 1) = v47 + 112 * v15;
    std::vector<llvm::orc::shared::AllocActionCallPair>::__swap_out_circular_buffer(v5 + 32, &v47);
    std::__split_buffer<llvm::orc::shared::AllocActionCallPair>::~__split_buffer((uint64_t)&v47);
  }
  llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<>>(a1[21], (uint64_t)&v45);
  v47 = v45;
  v48 = v50;
  v49 = xmmword_24AA2ACE0;
  if (v46[1])
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v48, v46);
  llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<>>(a1[22], (uint64_t)&v43);
  v51 = v43;
  v52 = v54;
  v53 = xmmword_24AA2ACE0;
  if (v44[1])
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v52, v44);
  std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](v5 + 32, (uint64_t)&v47);
  if (v52 != v54)
    free(v52);
  if (v48 != v50)
    free(v48);
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v43);
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v45);
  v16 = a1[23];
  v58 = (uint64_t)v60;
  v59 = xmmword_24AA2ACE0;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v58, a1[7] + 16);
  v17 = v59 - 8;
  if ((unint64_t)v59 < 8)
    goto LABEL_23;
  v18 = (const void *)a1[6];
  v19 = a1[7];
  v20 = v58;
  *(_QWORD *)v58 = v19;
  v21 = (_QWORD *)(v20 + 8);
  if (v19)
  {
    v22 = v17 >= v19;
    v17 -= v19;
    if (!v22)
      goto LABEL_23;
    memcpy(v21, v18, v19);
    v21 = (_QWORD *)((char *)v21 + v19);
  }
  if (v17 < 8)
  {
LABEL_23:
    getErrorErrorCat();
    v47 = 3;
    v48 = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Cannot serialize arguments for AllocActionCall", &v47, &v55);
    v42 |= 1u;
    v40 = v55;
    v55 = 0;
    goto LABEL_24;
  }
  *v21 = a1[20];
  v55 = (uint64_t)v57;
  v56 = xmmword_24AA2ACE0;
  if ((_QWORD)v59)
  {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v55, (const void **)&v58);
    v47 = v16;
    v48 = v50;
    v49 = xmmword_24AA2ACE0;
    if ((_QWORD)v56)
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v48, (const void **)&v55);
  }
  else
  {
    v47 = v16;
    v48 = v50;
    v49 = xmmword_24AA2ACE0;
  }
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>((uint64_t)&v40, (uint64_t)&v47);
  if (v48 != v50)
    free(v48);
  if ((_BYTE *)v55 != v57)
    free((void *)v55);
LABEL_24:
  if ((_QWORD *)v58 != v60)
    free((void *)v58);
  v47 = v40;
  v48 = v50;
  v49 = xmmword_24AA2ACE0;
  if (v41[1])
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v48, v41);
  llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr>,llvm::orc::ExecutorAddr>(a1[24], a1 + 20, (uint64_t)&v38);
  v51 = v38;
  v52 = v54;
  v53 = xmmword_24AA2ACE0;
  if (v39[1])
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v52, v39);
  std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](v5 + 32, (uint64_t)&v47);
  if (v52 != v54)
    free(v52);
  if (v48 != v50)
    free(v48);
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v38);
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v40);
  llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::ExecutorAddr,llvm::SmallVector<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>,2u>>((uint64_t)&v36, a1[25], a1 + 20, a1 + 9);
  v47 = v36;
  v48 = v50;
  v49 = xmmword_24AA2ACE0;
  if (v37[1])
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v48, v37);
  llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::ExecutorAddr,llvm::SmallVector<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>,2u>>((uint64_t)&v34, a1[26], a1 + 20, a1 + 9);
  v51 = v34;
  v52 = v54;
  v53 = xmmword_24AA2ACE0;
  if (v35[1])
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v52, v35);
  std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](v5 + 32, (uint64_t)&v47);
  if (v52 != v54)
    free(v52);
  if (v48 != v50)
    free(v48);
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v34);
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v36);
  v24 = a1[17];
  v23 = a1[18];
  while (v24 != v23)
  {
    std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](v5 + 32, v24);
    v24 += 112;
  }
  v25 = *(_QWORD *)(a1[5] + 24);
  v26 = *a2;
  *a2 = 0;
  v28 = (llvm::jitlink::LinkGraph *)v5;
  v29 = v26;
  llvm::orc::ObjectLinkingLayer::emit(v25, &v29, (uint64_t *)&v28);
  if (v28)
  {
    llvm::jitlink::LinkGraph::~LinkGraph(v28);
    MEMORY[0x24BD1B3A4]();
  }
  v27 = v29;
  v29 = 0;
  if (v27)
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v29, v27);
}

void llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<>>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  void *v4;
  __int128 v5;
  _BYTE v6[24];
  uint64_t v7;
  void *v8;
  __int128 v9;
  _BYTE v10[24];
  _QWORD *v11;
  __int128 v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x24BDAC8D0];
  v11 = v13;
  v12 = xmmword_24AA2ACE0;
  llvm::SmallVectorImpl<char>::resizeImpl<false>(&v11, 0);
  v4 = v6;
  v5 = xmmword_24AA2ACE0;
  if ((_QWORD)v12)
  {
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v4, (const void **)&v11);
    v7 = a1;
    v8 = v10;
    v9 = xmmword_24AA2ACE0;
    if ((_QWORD)v5)
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v8, (const void **)&v4);
  }
  else
  {
    v7 = a1;
    v8 = v10;
    v9 = xmmword_24AA2ACE0;
  }
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::Expected<llvm::orc::shared::WrapperFunctionCall>(a2, (uint64_t)&v7);
  if (v8 != v10)
    free(v8);
  if (v4 != v6)
    free(v4);
  if (v11 != v13)
    free(v11);
}

_QWORD *llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  _QWORD *v11;
  _QWORD *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  char v21[31];

  v11 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 64, 3);
  v12 = v11;
  v13 = *a5;
  v14 = (8 * (__clz(__rbit64(*a5)) & 0x1F)) | 1;
  v15 = *a3;
  v16 = *a4;
  v17 = *a6;
  v11[2] = a2;
  v11[3] = 0;
  v11[4] = v15;
  v11[5] = 0;
  v11[6] = 0;
  v11[7] = 0;
  if (v13)
    v18 = v14;
  else
    v18 = 1;
  *v11 = v16;
  v11[1] = v18 | (v17 << 8);
  v20 = v11;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a2 + 32, &v20, (uint64_t)v21);
  return v12;
}

_QWORD *llvm::detail::UniqueFunctionBase<void,llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long>::CallImpl<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSTuple<BOOL,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSExecutorAddr>>>>> ()(llvm::orc::shared::SPSExecutorAddr),llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSTuple<BOOL,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSExecutorAddr>>>>> ()(llvm::orc::shared::SPSExecutorAddr),llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (llvm::orc::MachOPlatform::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>&&,llvm::orc::ExecutorAddr&&)#1}>(llvm::orc::MachOPlatform&&)::{lambda(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)#1}>(_QWORD *a1, __int128 *a2, uint64_t *a3, unint64_t a4)
{
  uint64_t v7;
  _QWORD *v8;
  void (*v9)(_QWORD *, __int128 *, uint64_t);
  uint64_t v10;
  _QWORD *v11;
  __int128 *v12;
  void *v13;
  __int128 v15;
  uint64_t v16;
  __int128 v17[2];
  __int128 v18[2];
  void *v19;
  __int128 v20;
  char *v21;
  __int128 v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v15, a2);
  if (a4 <= 7)
  {
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Could not deserialize arguments for wrapper function call", (char **)v22);
    if ((v16 & 2) != 0)
      v12 = &v15;
    else
      v12 = (__int128 *)v15;
    (*(void (**)(__int128 *, __int128 *))(v16 & 0xFFFFFFFFFFFFFFF8))(v12, v22);
    if (*((_QWORD *)&v22[0] + 1) < 9uLL)
    {
      if (*((_QWORD *)&v22[0] + 1))
        return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v15);
      v13 = *(void **)&v22[0];
      if (!*(_QWORD *)&v22[0])
        return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v15);
    }
    else
    {
      v13 = *(void **)&v22[0];
    }
    free(v13);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v15);
  }
  v7 = *a3;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v17, &v15);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v18, v17);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v22, v18);
  v19 = operator new(0x20uLL, (std::align_val_t)8uLL);
  v20 = xmmword_24AA2ACD0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v19, v22);
  v21 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>>::CallbacksHolder<void llvm::orc::shared::detail::WrapperFunctionAsyncHandlerHelper<void ()(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&,llvm::orc::ExecutorAddr&&),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>> ()(llvm::orc::shared::SPSSequence)>::ResultSerializer,llvm::orc::shared::SPSSequence>::applyAsync<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1} &,llvm::orc::shared::WrapperFunctionResult>(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1} &,void (&&)(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long),llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,unsigned long)::{lambda(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1})#1},void (&)(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long),void>::Callbacks
      + 4;
  v8 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v22);
  v9 = (void (*)(_QWORD *, __int128 *, uint64_t))a1[1];
  v10 = a1[2];
  v11 = (_QWORD *)(*a1 + (v10 >> 1));
  if ((v10 & 1) != 0)
    v9 = *(void (**)(_QWORD *, __int128 *, uint64_t))(*v11 + v9);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v8, (__int128 *)&v19);
  v9(v11, v22, v7);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v22);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v19);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v18);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v17);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v15);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>>::CallImpl<void llvm::orc::shared::detail::WrapperFunctionAsyncHandlerHelper<void ()(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&,llvm::orc::ExecutorAddr&&),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>> ()(llvm::orc::shared::SPSSequence)>::ResultSerializer,llvm::orc::shared::SPSSequence>::applyAsync<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1} &,llvm::orc::shared::WrapperFunctionResult>(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1} &,void (&&)(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long),llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,unsigned long)::{lambda(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExpected<BOOL,llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSSequence>>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr>(llvm::orc::MachOPlatform *,void (void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)::*)(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::orc::ExecutorAddr))::{lambda(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &,llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)> &&)#1})#1}>(_QWORD *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  __int128 v5;
  char *v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  std::string::size_type size;
  size_t v14;
  __int128 *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v25[2];
  char v26;
  uint64_t v27;
  __int128 v28;
  std::string __p;
  __int128 *v30;
  unint64_t v31;
  __int128 v32;
  _QWORD v33[3];
  char v34;
  _QWORD v35[3];
  char v36;
  _QWORD v37[3];
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  v3 = *((_BYTE *)a2 + 24);
  v34 = v3 & 1;
  v4 = *a2;
  if ((v3 & 1) != 0)
  {
    *a2 = 0;
    v33[0] = 0;
    v36 = v3 & 1;
    v6 = (char *)&v32 + 1;
    v38 = v3 & 1;
    v35[0] = 0;
    v26 = 0;
    v28 = 0uLL;
    v27 = 0;
    v37[0] = 0;
    *(_QWORD *)&v32 = v4;
    llvm::toString((uint64_t *)&v32, &__p);
    if ((_QWORD)v32)
      (*(void (**)(_QWORD))(*(_QWORD *)v32 + 8))(v32);
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 1);
    v6 = (char *)&v32 + 1;
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    memset(v33, 0, sizeof(v33));
    v36 = 0;
    v38 = 0;
    memset(v35, 0, sizeof(v35));
    v26 = 1;
    v27 = v4;
    v28 = v5;
    memset(v37, 0, sizeof(v37));
    memset(&__p, 0, sizeof(__p));
  }
  v7 = v26;
  if (v26)
  {
    v8 = v27;
    if (v27 == (_QWORD)v28)
    {
      v14 = 9;
      *((_QWORD *)&v32 + 1) = 9;
      goto LABEL_20;
    }
    v9 = 8;
    do
    {
      v11 = *(_QWORD *)(v8 + 16);
      v10 = *(_QWORD *)(v8 + 24);
      if (v11 == v10)
        v12 = 17;
      else
        v12 = ((v10 - v11 - 8) & 0xFFFFFFFFFFFFFFF8) + 25;
      v9 += v12;
      v8 += 40;
    }
    while (v8 != (_QWORD)v28);
  }
  else
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    v9 = size + 8;
  }
  v14 = v9 + 1;
  *(_QWORD *)&v32 = 0;
  *((_QWORD *)&v32 + 1) = v9 + 1;
  if ((unint64_t)(v9 + 1) >= 9)
  {
LABEL_20:
    v15 = (__int128 *)malloc_type_malloc(v14, 0xBCDE199DuLL);
    v6 = (char *)v15 + 1;
    *(_QWORD *)&v32 = v15;
    v7 = v26;
    goto LABEL_21;
  }
  v15 = &v32;
  v30 = &v32;
  v31 = v9 + 1;
  if (v9 == -1)
    goto LABEL_31;
LABEL_21:
  *(_BYTE *)v15 = v7;
  v30 = (__int128 *)v6;
  v31 = v14 - 1;
  if (v26)
  {
    if (v14 - 1 >= 8)
    {
      *(_QWORD *)((char *)v15 + 1) = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v28 - v27) >> 3);
      v16 = v14 - 9;
      v30 = (__int128 *)((char *)v15 + 9);
      v31 = v14 - 9;
      v17 = v27;
      v18 = v28;
      if (v27 != (_QWORD)v28)
      {
        while (v16 >= 8)
        {
          *(_QWORD *)v30 = *(_QWORD *)v17;
          v19 = v30;
          v20 = v31 == 8;
          v30 = (__int128 *)((char *)v30 + 8);
          v31 -= 8;
          if (v20)
            break;
          *((_BYTE *)v19 + 8) = *(_BYTE *)(v17 + 8);
          v30 = (__int128 *)((char *)v19 + 9);
          --v31;
          v21 = v17 + 16;
          if (!llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSExecutorAddr>,std::vector<llvm::orc::ExecutorAddr>,void>::serialize(&v30, (_QWORD *)(v17 + 16)))break;
          v17 = v21 + 24;
          if (v21 + 24 == v18)
            goto LABEL_30;
          v16 = v31;
        }
        goto LABEL_31;
      }
LABEL_30:
      *(_OWORD *)v25 = v32;
      goto LABEL_35;
    }
  }
  else if (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(&v30, (uint64_t)&__p))
  {
    goto LABEL_30;
  }
LABEL_31:
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v25);
  if (*((_QWORD *)&v32 + 1) > 8uLL || !*((_QWORD *)&v32 + 1) && (_QWORD)v32)
    free((void *)v32);
LABEL_35:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  *(_QWORD *)&v32 = &v27;
  std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v32);
  llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected((uint64_t)v37);
  v22 = a1[3];
  if ((v22 & 2) == 0)
    a1 = (_QWORD *)*a1;
  (*(void (**)(_QWORD *, void **))(v22 & 0xFFFFFFFFFFFFFFF8))(a1, v25);
  if (v25[1] >= (void *)9)
  {
    v23 = v25[0];
LABEL_43:
    free(v23);
    goto LABEL_44;
  }
  if (!v25[1])
  {
    v23 = v25[0];
    if (v25[0])
      goto LABEL_43;
  }
LABEL_44:
  llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected((uint64_t)v35);
  return llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected((uint64_t)v33);
}

_QWORD *llvm::detail::UniqueFunctionBase<void,llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long>::CallImpl<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,BOOL>>,BOOL),llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>> ()(llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,BOOL>>,BOOL),llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL>(llvm::orc::MachOPlatform *,void (llvm::orc::MachOPlatform::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>&&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)#1}>(llvm::orc::MachOPlatform&&)::{lambda(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)#1}>(_QWORD *a1, __int128 *a2, _QWORD *a3, unint64_t a4)
{
  uint64_t *v7;
  __int128 *v8;
  void *v9;
  void *v11;
  unint64_t v12;
  unsigned __int8 *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  uint64_t *v18;
  BOOL v19;
  unint64_t v20;
  uint64_t v21;
  unsigned __int8 *v22;
  uint64_t v23;
  unsigned __int8 v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t *v31;
  __int128 v32;
  unint64_t v33;
  int v34;
  char *v35;
  _QWORD *v36;
  void (*v37)(_QWORD *, __int128 *, void *, void **, BOOL);
  uint64_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  void *v42;
  void *__p;
  void *v44;
  char *v45;
  char v46;
  __int128 v47;
  uint64_t v48;
  __int128 v49[2];
  __int128 v50[2];
  void *v51;
  __int128 v52;
  char *v53;
  __int128 v54[2];
  uint64_t v55;

  v55 = *MEMORY[0x24BDAC8D0];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v47, a2);
  if (a4 < 8 || (a4 & 0xFFFFFFFFFFFFFFF8) == 8)
  {
    v7 = 0;
    goto LABEL_4;
  }
  v11 = (void *)*a3;
  v12 = a3[1];
  v13 = (unsigned __int8 *)(a3 + 2);
  v14 = a4 - 16;
  v40 = a1;
  v41 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_53:
      abort();
    v7 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v12);
    v15 = 0;
    v17 = (char *)&v7[3 * v16];
    v18 = v7;
    while (1)
    {
      v19 = v14 >= 8;
      v20 = v14 - 8;
      if (!v19)
        break;
      v21 = *(_QWORD *)v13;
      if (v20 < *(_QWORD *)v13)
        break;
      v22 = v13 + 8;
      v23 = v21 ? (uint64_t)(v13 + 8) : 0;
      if (v20 == v21)
        break;
      v13 = &v22[v21 + 1];
      v24 = v22[v21];
      if (v18 >= (uint64_t *)v17)
      {
        v25 = 0xAAAAAAAAAAAAAAABLL * (v18 - v7) + 1;
        if (v25 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_53;
        v26 = 0xAAAAAAAAAAAAAAABLL * ((v17 - (char *)v7) >> 3);
        if (2 * v26 > v25)
          v25 = 2 * v26;
        if (v26 >= 0x555555555555555)
          v27 = 0xAAAAAAAAAAAAAAALL;
        else
          v27 = v25;
        if (v27)
          v27 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(v27);
        else
          v28 = 0;
        v29 = v27 + 8 * (v18 - v7);
        *(_QWORD *)v29 = v23;
        *(_QWORD *)(v29 + 8) = v21;
        *(_BYTE *)(v29 + 16) = v24;
        if (v18 == v7)
        {
          v31 = (uint64_t *)(v27 + 8 * (v18 - v7));
        }
        else
        {
          v30 = v27 + 8 * (v18 - v7);
          do
          {
            v31 = (uint64_t *)(v30 - 24);
            v32 = *(_OWORD *)(v18 - 3);
            *(_QWORD *)(v30 - 8) = *(v18 - 1);
            *(_OWORD *)(v30 - 24) = v32;
            v18 -= 3;
            v30 -= 24;
          }
          while (v18 != v7);
        }
        v17 = (char *)(v27 + 24 * v28);
        v18 = (uint64_t *)(v29 + 24);
        if (v7)
        {
          v33 = v27 + 24 * v28;
          operator delete(v7);
          v17 = (char *)v33;
        }
        v7 = v31;
      }
      else
      {
        *v18 = v23;
        v18[1] = v21;
        *((_BYTE *)v18 + 16) = v24;
        v18 += 3;
      }
      v14 = v20 + ~v21;
      if (++v15 == v12)
      {
        if (!v14)
          break;
        goto LABEL_46;
      }
    }
LABEL_4:
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Could not deserialize arguments for wrapper function call", (char **)&v42);
    if ((v48 & 2) != 0)
      v8 = &v47;
    else
      v8 = (__int128 *)v47;
    (*(void (**)(__int128 *, void **))(v48 & 0xFFFFFFFFFFFFFFF8))(v8, &v42);
    if ((unint64_t)__p < 9)
    {
      if (__p || (v9 = v42) == 0)
      {
LABEL_12:
        if (v7)
          operator delete(v7);
        return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v47);
      }
    }
    else
    {
      v9 = v42;
    }
    free(v9);
    goto LABEL_12;
  }
  v7 = 0;
  v18 = 0;
  v17 = 0;
  if (!v14)
    goto LABEL_4;
LABEL_46:
  v34 = *v13;
  v35 = v17;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v49, &v47);
  v42 = v41;
  __p = v7;
  v44 = v18;
  v45 = v35;
  v46 = v34;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v50, v49);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v54, v50);
  v51 = operator new(0x20uLL, (std::align_val_t)8uLL);
  v52 = xmmword_24AA2ACD0;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v51, v54);
  v53 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>>::CallbacksHolder<void llvm::orc::shared::detail::WrapperFunctionAsyncHandlerHelper<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>> ()(llvm::orc::shared::SPSSequence,void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected,BOOL>>,BOOL)>::ResultSerializer,llvm::orc::shared::SPSSequence,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>,BOOL>::applyAsync<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL>(llvm::orc::MachOPlatform *,void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,std::vector<std::pair<llvm::StringRef,BOOL>>,std::vector<std::pair<llvm::StringRef,BOOL>> const)#1} &,llvm::orc::ExecutionSession::wrapAsyncWithSPS>(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL>(llvm::orc::MachOPlatform *,void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,std::vector<std::pair<llvm::StringRef,BOOL>>,std::vector<std::pair<llvm::StringRef,BOOL>> const)#1} &,char const*&&,void ()(llvm::orc::shared::WrapperFunctionResult),unsigned long)::{lambda(void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))#1},llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL>(llvm::orc::MachOPlatform *,void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,std::vector<std::pair<llvm::StringRef,BOOL>>,std::vector<std::pair<llvm::StringRef,BOOL>> const)#1} &,void>::Callbacks
      + 4;
  v36 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v54);
  v37 = (void (*)(_QWORD *, __int128 *, void *, void **, BOOL))v40[1];
  v38 = v40[2];
  v39 = (_QWORD *)(*v40 + (v38 >> 1));
  if ((v38 & 1) != 0)
    v37 = *(void (**)(_QWORD *, __int128 *, void *, void **, BOOL))(*v39 + v37);
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v36, (__int128 *)&v51);
  v37(v39, v54, v41, &__p, v34 != 0);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v54);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v51);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v50);
  if (__p)
  {
    v44 = __p;
    operator delete(__p);
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v49);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v47);
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::StringRef,BOOL>>>(unint64_t a1)
{
  if (a1 >= 0xAAAAAAAAAAAAAABLL)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(24 * a1);
}

void llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>>::CallImpl<void llvm::orc::shared::detail::WrapperFunctionAsyncHandlerHelper<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&),llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>> ()(llvm::orc::shared::SPSSequence,void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected,BOOL>>,BOOL)>::ResultSerializer,llvm::orc::shared::SPSSequence,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>,BOOL>::applyAsync<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL>(llvm::orc::MachOPlatform *,void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,std::vector<std::pair<llvm::StringRef,BOOL>>,std::vector<std::pair<llvm::StringRef,BOOL>> const)#1} &,llvm::orc::ExecutionSession::wrapAsyncWithSPS>(llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)> llvm::orc::ExecutionSession::wrapAsyncWithSPS<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<void ()(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,llvm::orc::ExecutorAddr&&,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL &&)<char>,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::MachOPlatform,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL>(llvm::orc::MachOPlatform *,void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))::{lambda(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &,llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)> &&,std::vector<std::pair<llvm::StringRef,BOOL>>,std::vector<std::pair<llvm::StringRef,BOOL>> const)#1} &,char const*&&,void ()(llvm::orc::shared::WrapperFunctionResult),unsigned long)::{lambda(void (char const*::*)(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>>,BOOL))#1}>(_QWORD *a1, uint64_t *a2)
{
  char v3;
  uint64_t v4;
  uint64_t v5;
  size_t *v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  std::string::size_type size;
  size_t v13;
  __int128 *v14;
  size_t *v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  size_t v20;
  size_t *v21;
  unint64_t v22;
  BOOL v23;
  size_t *v24;
  BOOL v25;
  int v26;
  uint64_t v27;
  void *v28;
  void *v29[2];
  char v30;
  uint64_t v31;
  uint64_t v32;
  std::string __p;
  size_t *v34;
  unint64_t v35;
  __int128 v36;

  v3 = *((_BYTE *)a2 + 16);
  v4 = *a2;
  if ((v3 & 1) != 0)
  {
    *a2 = 0;
    v6 = (size_t *)((char *)&v36 + 1);
    v30 = 0;
    v31 = 0;
    v32 = 0;
    *(_QWORD *)&v36 = v4;
    llvm::toString((uint64_t *)&v36, &__p);
    if ((_QWORD)v36)
      (*(void (**)(_QWORD))(*(_QWORD *)v36 + 8))(v36);
    v4 = 0;
  }
  else
  {
    v5 = a2[1];
    v6 = (size_t *)((char *)&v36 + 1);
    v30 = 1;
    v31 = v4;
    v32 = v5;
    memset(&__p, 0, sizeof(__p));
  }
  v7 = v30;
  if (v30)
  {
    if (!v32)
    {
      v13 = 9;
      *((_QWORD *)&v36 + 1) = 9;
      goto LABEL_18;
    }
    v8 = 32 * v32;
    v9 = (uint64_t *)(v31 + 8);
    v10 = 8;
    do
    {
      v11 = *v9;
      v9 += 4;
      v10 += v11 + 17;
      v8 -= 32;
    }
    while (v8);
  }
  else
  {
    size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
      size = __p.__r_.__value_.__l.__size_;
    v10 = size + 8;
  }
  v13 = v10 + 1;
  *(_QWORD *)&v36 = 0;
  *((_QWORD *)&v36 + 1) = v10 + 1;
  if ((unint64_t)(v10 + 1) >= 9)
  {
LABEL_18:
    v14 = (__int128 *)malloc_type_malloc(v13, 0xBCDE199DuLL);
    v6 = (size_t *)((char *)v14 + 1);
    *(_QWORD *)&v36 = v14;
    v7 = v30;
    goto LABEL_19;
  }
  v14 = &v36;
  v34 = (size_t *)&v36;
  v35 = v10 + 1;
  if (v10 == -1)
    goto LABEL_35;
LABEL_19:
  *(_BYTE *)v14 = v7;
  v34 = v6;
  v35 = v13 - 1;
  if (v30)
  {
    if (v13 - 1 >= 8)
    {
      *(_QWORD *)((char *)v14 + 1) = v32;
      v15 = (size_t *)((char *)v14 + 9);
      v16 = v13 - 9;
      v34 = (size_t *)((char *)v14 + 9);
      v35 = v13 - 9;
      if (v32)
      {
        if (v16 >= 8)
        {
          v17 = 32 * v32 - 32;
          v18 = v31 + 16;
          do
          {
            v19 = *(const void **)(v18 - 16);
            v20 = *(_QWORD *)(v18 - 8);
            *v15 = v20;
            v21 = v15 + 1;
            v22 = v16 - 8;
            v34 = v21;
            v35 = v16 - 8;
            if (v20)
            {
              v23 = v22 >= v20;
              v22 -= v20;
              if (!v23)
                goto LABEL_35;
              memcpy(v21, v19, v20);
              v21 = (size_t *)((char *)v21 + v20);
              v34 = v21;
              v35 = v22;
            }
            if (v22 < 8)
              break;
            *v21 = *(_QWORD *)v18;
            v24 = v34++;
            v35 = v22 - 8;
            if (v22 == 8)
              break;
            *((_BYTE *)v24 + 8) = *(_BYTE *)(v18 + 8);
            v15 = (size_t *)((char *)v24 + 9);
            v16 = v22 - 9;
            v34 = v15;
            v35 = v22 - 9;
            if (!v17)
              goto LABEL_34;
            v17 -= 32;
            v18 += 32;
          }
          while (v16 >= 8);
        }
        goto LABEL_35;
      }
LABEL_34:
      *(_OWORD *)v29 = v36;
      goto LABEL_39;
    }
  }
  else if (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(&v34, (uint64_t)&__p))
  {
    goto LABEL_34;
  }
LABEL_35:
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v29);
  if (*((_QWORD *)&v36 + 1) > 8uLL || !*((_QWORD *)&v36 + 1) && (_QWORD)v36)
    free((void *)v36);
LABEL_39:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  v25 = (v3 & 1) == 0 || v4 == 0;
  v26 = v25;
  if (!v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v27 = a1[3];
  if ((v27 & 2) == 0)
    a1 = (_QWORD *)*a1;
  (*(void (**)(_QWORD *, void **))(v27 & 0xFFFFFFFFFFFFFFF8))(a1, v29);
  if (v29[1] < (void *)9)
  {
    if (v29[1])
      goto LABEL_56;
    v28 = v29[0];
    if (!v29[0])
      goto LABEL_56;
  }
  else
  {
    v28 = v29[0];
  }
  free(v28);
LABEL_56:
  if (!v26)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  }
}

void std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  void *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = (void *)*((_QWORD *)v4 - 3);
        if (v6)
        {
          *((_QWORD *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 40;
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t std::__split_buffer<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::~__split_buffer(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  v3 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != v3)
  {
    *(_QWORD *)(a1 + 16) = v2 - 40;
    v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(_QWORD *)(v2 - 16) = v4;
      operator delete(v4);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 40;
    }
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected(uint64_t a1)
{
  void *v2;
  void **v4;

  if ((*(_BYTE *)(a1 + 24) & 1) != 0)
  {
    v2 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    v4 = (void **)a1;
    std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>::__destroy_vector::operator()[abi:nn180100](&v4);
  }
  return a1;
}

_QWORD *llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::orc::MachOPlatform::pushInitializersLoop(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>)::$_1>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  void **v8;
  unsigned int v9;
  void **v10;
  __int128 v11;
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  v3 = *a2;
  *a2 = 0;
  v4 = (__int128 *)(a1 + 1);
  v5 = *a1;
  if (v3)
  {
    v12 = -1;
    *(_QWORD *)&v11 = v3;
    v6 = a1[4];
    if ((v6 & 2) == 0)
      v4 = *(__int128 **)v4;
    (*(void (**)(__int128 *, __int128 *))(v6 & 0xFFFFFFFFFFFFFFF8))(v4, &v11);
    return (_QWORD *)llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>::~Expected((uint64_t)&v11);
  }
  else
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)&v11, v4);
    v8 = (void **)a1[5];
    v10 = v8;
    if (v8)
    {
      do
        v9 = __ldxr((unsigned int *)v8);
      while (__stxr(v9 + 1, (unsigned int *)v8));
      llvm::orc::MachOPlatform::pushInitializersLoop(v5, &v11, &v10);
      llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release((unsigned int *)v8);
    }
    else
    {
      llvm::orc::MachOPlatform::pushInitializersLoop(v5, &v11, &v10);
    }
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v11);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::MoveImpl<llvm::orc::MachOPlatform::pushInitializersLoop(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>)::$_1>(_QWORD *a1, uint64_t a2)
{
  uint64_t result;

  *a1 = *(_QWORD *)a2;
  result = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(a1 + 1), (__int128 *)(a2 + 8));
  a1[5] = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 40) = 0;
  return result;
}

_QWORD *llvm::detail::UniqueFunctionBase<void,llvm::Error>::DestroyImpl<llvm::orc::MachOPlatform::pushInitializersLoop(llvm::unique_function<void ()(llvm::Expected<std::vector<std::pair<llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOJITDylibDepInfo>>>)>,llvm::IntrusiveRefCntPtr<llvm::orc::JITDylib>)::$_1>(uint64_t a1)
{
  unsigned int *v2;

  v2 = *(unsigned int **)(a1 + 40);
  if (v2)
    llvm::ThreadSafeRefCountedBase<llvm::orc::JITDylib>::Release(v2);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 8));
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::MachOPlatform::rt_pushSymbols(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL)::$_0>(uint64_t a1, uint64_t *a2)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  unint64_t v14;
  uint64_t *v15;
  int v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  char *v29;
  __int128 v30;
  char *v31;
  unint64_t v32;
  char v33;
  uint64_t v34;
  _QWORD v36[2];
  int v37;
  char v38;
  _QWORD v39[2];
  char v40;
  _QWORD v41[2];
  char v42;
  uint64_t v43;
  char v44;
  uint64_t v45;

  v2 = (_QWORD *)a1;
  v45 = *MEMORY[0x24BDAC8D0];
  v38 = a2[3] & 1;
  v3 = *a2;
  if (!v38)
  {
    v36[0] = *a2;
    v4 = a2[1];
    v36[1] = v4;
    *a2 = 0;
    a2[1] = 0;
    v5 = *((unsigned int *)a2 + 4);
    v37 = *((_DWORD *)a2 + 4);
    *((_DWORD *)a2 + 4) = 0;
    if (!*(_BYTE *)(a1 + 32))
    {
      if (!(_DWORD)v4)
        goto LABEL_46;
      if ((_DWORD)v5)
      {
        v10 = 24 * v5;
        v11 = v3;
        while ((*(_QWORD *)v11 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v11 += 24;
          v10 -= 24;
          if (!v10)
            goto LABEL_46;
        }
      }
      else
      {
        v11 = v3;
      }
      v12 = v3 + 24 * v5;
      if (v11 == v12)
      {
LABEL_46:
        v9 = 0;
        v13 = 0;
        v33 = 0;
      }
      else
      {
        v9 = 0;
        v13 = 0;
        v14 = 0;
        v15 = *(uint64_t **)v11;
LABEL_23:
        v16 = (*(unsigned __int8 *)(v11 + 17) >> 4) & 2 | (*(unsigned __int8 *)(v11 + 17) >> 1) & 1;
        v19 = *v15;
        v18 = v15 + 2;
        v17 = v19;
        v20 = *(_QWORD *)(v11 + 8);
        if ((unint64_t)v13 >= v14)
        {
          v21 = (v13 - v9) >> 5;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 59)
            abort();
          v23 = v14 - (_QWORD)v9;
          v24 = (uint64_t)(v14 - (_QWORD)v9) >> 4;
          if (v24 > v22)
            v22 = v24;
          if (v23 >= 0x7FFFFFFFFFFFFFE0)
            v25 = 0x7FFFFFFFFFFFFFFLL;
          else
            v25 = v22;
          if (v25)
            v25 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>(v25);
          else
            v26 = 0;
          v27 = v25 + 32 * v21;
          *(_QWORD *)v27 = v18;
          *(_QWORD *)(v27 + 8) = v17;
          *(_QWORD *)(v27 + 16) = v20;
          *(_BYTE *)(v27 + 24) = v16;
          if (v13 == v9)
          {
            v29 = (char *)(v25 + 32 * v21);
          }
          else
          {
            v28 = v25 + 32 * v21;
            do
            {
              v29 = (char *)(v28 - 32);
              v30 = *((_OWORD *)v13 - 1);
              *(_OWORD *)(v28 - 32) = *((_OWORD *)v13 - 2);
              *(_OWORD *)(v28 - 16) = v30;
              v13 -= 32;
              v28 -= 32;
            }
            while (v13 != v9);
          }
          v14 = v25 + 32 * v26;
          v13 = (char *)(v27 + 32);
          if (v9)
          {
            v31 = v9;
            v32 = v14;
            operator delete(v31);
            v14 = v32;
          }
          v9 = v29;
        }
        else
        {
          *(_QWORD *)v13 = v18;
          *((_QWORD *)v13 + 1) = v17;
          *((_QWORD *)v13 + 2) = v20;
          v13[24] = v16;
          v13 += 32;
        }
        while (1)
        {
          v11 += 24;
          if (v11 == v12)
            break;
          v15 = *(uint64_t **)v11;
          if ((*(_QWORD *)v11 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            if (v11 != v12)
              goto LABEL_23;
            break;
          }
        }
        v33 = v40 & 0xFE;
      }
      v40 = v33;
      v39[0] = v9;
      v39[1] = (v13 - v9) >> 5;
      v34 = v2[3];
      if ((v34 & 2) == 0)
        v2 = (_QWORD *)*v2;
      (*(void (**)(_QWORD *, _QWORD *))(v34 & 0xFFFFFFFFFFFFFFF8))(v2, v39);
      if ((v40 & 1) == 0)
        goto LABEL_51;
      v7 = v39[0];
      v39[0] = 0;
      if (!v7)
        goto LABEL_51;
      goto LABEL_13;
    }
    v41[0] = 0;
    v41[1] = 0;
    v42 = 0;
    v6 = *(_QWORD *)(a1 + 24);
    if ((v6 & 2) == 0)
      v2 = *(_QWORD **)a1;
    (*(void (**)(_QWORD *, _QWORD *))(v6 & 0xFFFFFFFFFFFFFFF8))(v2, v41);
    if ((v42 & 1) == 0)
      return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v36);
    v7 = v41[0];
    v41[0] = 0;
    if (!v7)
      return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v36);
LABEL_12:
    v9 = 0;
LABEL_13:
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
LABEL_51:
    if (v9)
      operator delete(v9);
    return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v36);
  }
  *a2 = 0;
  v36[0] = 0;
  v44 = -1;
  v43 = v3;
  v8 = *(_QWORD *)(a1 + 24);
  if ((v8 & 2) == 0)
    v2 = *(_QWORD **)a1;
  (*(void (**)(_QWORD *, uint64_t *))(v8 & 0xFFFFFFFFFFFFFFF8))(v2, &v43);
  if ((v44 & 1) != 0)
  {
    v7 = v43;
    v43 = 0;
    if (v7)
      goto LABEL_12;
  }
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v36);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::MoveImpl<llvm::orc::MachOPlatform::rt_pushSymbols(llvm::unique_function<void ()(llvm::Expected<llvm::ArrayRef<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>)>,llvm::orc::ExecutorAddr,std::vector<std::pair<llvm::StringRef,BOOL>> const&,BOOL)::$_0>(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a1, (__int128 *)a2);
  *(_BYTE *)(result + 32) = *(_BYTE *)(a2 + 32);
  return result;
}

void *std::__allocate_at_least[abi:nn180100]<std::allocator<std::tuple<llvm::StringRef,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>>>(unint64_t a1)
{
  if (a1 >> 59)
    std::__throw_bad_array_new_length[abi:nn180100]();
  return operator new(32 * a1);
}

void llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<unsigned long long> ()(void)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSExpected<unsigned long long> ()(void),llvm::Expected<unsigned long long> &>(llvm::orc::ExecutorAddr,llvm::Expected<unsigned long long> &)::{lambda(char const*,unsigned long)#1},llvm::Expected<unsigned long long>>(uint64_t *a1@<X0>, _BYTE *a2@<X1>, uint64_t *a3@<X8>)
{
  __int128 *v5;
  void *v6;
  void *v7;
  uint64_t v8[2];
  llvm::formatv_object_base *v9;
  __int128 v10;
  void *v11;
  unint64_t v12;

  if ((a2[8] & 1) != 0)
    *(_QWORD *)a2 = 0;
  v11 = 0;
  v12 = 0;
  llvm::orc::ExecutorProcessControl::callWrapper(*a1, a1[1], (uint64_t)&v11, 0, &v10);
  if (*((_QWORD *)&v10 + 1))
  {
    if (*((_QWORD *)&v10 + 1) <= 8uLL)
      v5 = &v10;
    else
      v5 = (__int128 *)v10;
    goto LABEL_7;
  }
  v9 = (llvm::formatv_object_base *)v10;
  if (!(_QWORD)v10)
  {
    v5 = &v10;
LABEL_7:
    llvm::orc::shared::detail::ResultDeserializer<llvm::orc::shared::SPSExpected<llvm::orc::shared::SPSExecutorAddr>,llvm::Expected<llvm::orc::ExecutorAddr>>::deserialize(a2, (uint64_t)v5, *((uint64_t *)&v10 + 1), a3);
    goto LABEL_10;
  }
  getErrorErrorCat();
  v8[0] = 3;
  v8[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v9, v8, a3);
LABEL_10:
  if (*((_QWORD *)&v10 + 1) >= 9uLL)
  {
    v6 = (void *)v10;
LABEL_14:
    free(v6);
    goto LABEL_15;
  }
  if (!*((_QWORD *)&v10 + 1))
  {
    v6 = (void *)v10;
    if ((_QWORD)v10)
      goto LABEL_14;
  }
LABEL_15:
  if (v12 >= 9)
  {
    v7 = v11;
LABEL_19:
    free(v7);
    return;
  }
  if (!v12)
  {
    v7 = v11;
    if (v11)
      goto LABEL_19;
  }
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_0>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::mutex *v4;
  unint64_t v5;

  v3 = *a1;
  v4 = (std::mutex *)atomic_load((unint64_t *)(*(_QWORD *)(*a1 + 72) + 456));
  std::mutex::lock(v4);
  v5 = atomic_load((unint64_t *)(*(_QWORD *)(v3 + 72) + 456));
  ++*(_QWORD *)(v5 + 112);
  *a2 = 0;
  std::mutex::unlock(v4);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_1>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, uint64_t *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  const void **v41;
  const void *v42;
  const void *v43;
  _QWORD *v44;
  _QWORD *v45;
  BOOL v46;
  std::mutex *v48;
  unint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  llvm::formatv_object_base *v58[4];
  __int16 v59;
  _QWORD v60[4];
  __int16 v61;
  _OWORD v62[3];
  __int128 v63;
  _OWORD v64[3];
  __int128 v65;
  uint64_t v66;
  uint64_t v67;
  _QWORD v68[42];

  v68[39] = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v5 = *(_QWORD *)(*a2 + 72);
  v6 = *(uint64_t **)(v5 + 64);
  v7 = *v6;
  v8 = atomic_load((unint64_t *)(v5 + 456));
  v9 = v8 + 144;
  v68[0] = v6 + 2;
  v68[1] = v7;
  v10 = *(_QWORD **)(v4 + 72);
  v11 = (uint64_t *)v10[9];
  v12 = *v11;
  v68[2] = v9;
  v68[3] = v11 + 2;
  v68[4] = v12;
  v68[5] = v10 + 10;
  v13 = (uint64_t *)v10[11];
  v14 = *v13;
  v68[6] = v13 + 2;
  v68[7] = v14;
  v15 = (uint64_t *)v10[17];
  v16 = *v15;
  v68[8] = v10 + 12;
  v68[9] = v15 + 2;
  v68[10] = v16;
  v68[11] = v10 + 18;
  v17 = (uint64_t *)v10[19];
  v18 = *v17;
  v68[12] = v17 + 2;
  v68[13] = v18;
  v19 = (uint64_t *)v10[21];
  v20 = *v19;
  v68[14] = v10 + 20;
  v68[15] = v19 + 2;
  v68[16] = v20;
  v68[17] = v10 + 22;
  v21 = (uint64_t *)v10[23];
  v22 = *v21;
  v68[18] = v21 + 2;
  v68[19] = v22;
  v23 = (uint64_t *)v10[25];
  v24 = *v23;
  v68[20] = v10 + 24;
  v68[21] = v23 + 2;
  v68[22] = v24;
  v68[23] = v10 + 26;
  v25 = (uint64_t *)v10[27];
  v26 = *v25;
  v68[24] = v25 + 2;
  v68[25] = v26;
  v27 = (uint64_t *)v10[29];
  v28 = *v27;
  v68[26] = v10 + 28;
  v68[27] = v27 + 2;
  v68[28] = v28;
  v68[29] = v10 + 30;
  v29 = (uint64_t *)v10[31];
  v30 = *v29;
  v68[30] = v29 + 2;
  v68[31] = v30;
  v31 = (uint64_t *)v10[33];
  v32 = *v31;
  v68[32] = v10 + 32;
  v68[33] = v31 + 2;
  v68[34] = v32;
  v68[35] = v10 + 34;
  v33 = (uint64_t *)v10[35];
  v34 = *v33;
  v68[36] = v33 + 2;
  v68[37] = v34;
  v68[38] = v10 + 36;
  llvm::jitlink::LinkGraph::defined_symbols(this, v64);
  v62[0] = v64[0];
  v62[1] = v64[1];
  v62[2] = v64[2];
  v63 = v65;
  v35 = v67;
  v36 = (uint64_t *)v65;
  v57 = v66;
  if (*(_QWORD *)&v64[0] != v66 || (_QWORD)v63 != v67)
  {
    v56 = a3;
    v37 = 0;
    do
    {
      v38 = 0;
      v39 = *v36;
      v40 = *(_QWORD *)(*v36 + 8);
      do
      {
        if (v40)
        {
          v41 = (const void **)&v68[v38];
          if (v40 == v68[v38 + 1])
          {
            v42 = *(const void **)v39;
            v43 = *v41;
            if (!memcmp(*(const void **)v39, *v41, v40))
            {
              v44 = (_QWORD *)v68[v38 + 2];
              if (*v44)
              {
                v61 = 1283;
                v60[0] = "Duplicate ";
                v60[2] = v43;
                v60[3] = v40;
                v58[0] = (llvm::formatv_object_base *)v60;
                v58[2] = (llvm::formatv_object_base *)" detected during MachOPlatform bootstrap";
                v59 = 770;
                getErrorErrorCat();
                v55 = operator new();
                *(_QWORD *)v55 = off_251C127D0;
                llvm::Twine::str(v58, (std::string *)(v55 + 8));
                *(_QWORD *)(v55 + 32) = 3;
                *(_QWORD *)(v55 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
                *(_BYTE *)(v55 + 48) = 1;
                *v56 = v55;
                return;
              }
              v45 = *(_QWORD **)(*(_QWORD *)(v4 + 72) + 64);
              v46 = v40 == *v45 && memcmp(v42, v45 + 2, v40) == 0;
              v37 |= v46;
              *v44 = (*(_QWORD *)(v39 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(v39 + 16);
            }
          }
        }
        v38 += 3;
      }
      while (v38 != 39);
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v62, (uint64_t)v58);
      v36 = (uint64_t *)v63;
    }
    while (*(_QWORD *)&v62[0] != v57 || (_QWORD)v63 != v35);
    a3 = v56;
    if ((v37 & 1) != 0)
    {
      v48 = (std::mutex *)(*(_QWORD *)(v4 + 72) + 320);
      std::mutex::lock(v48);
      v49 = atomic_load((unint64_t *)(*(_QWORD *)(v4 + 72) + 456));
      v50 = *(_QWORD *)(v4 + 72);
      *(_QWORD *)&v64[0] = *(_QWORD *)(v50 + 16);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::FindAndConstruct((uint64_t *)(v50 + 384), v64)[1] = *(_QWORD *)(v49 + 144);
      v51 = *(_QWORD **)(v4 + 72);
      v52 = v51[2];
      v53 = v51 + 51;
      v54 = atomic_load(v51 + 57);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::FindAndConstruct(v53, (_QWORD *)(v54 + 144))[1] = v52;
      std::mutex::unlock(v48);
    }
  }
  *a3 = 0;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_2>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X8>)
{
  void **v5;
  uint64_t v6;
  void *v7;
  const void ***v8;
  const void ***v9;
  size_t v10;
  uint64_t *v11;
  const void *v12;
  uint64_t v13;
  void *v15;
  std::mutex *v16;
  uint64_t *v17;
  uint64_t v18;
  void *v19[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  void *v23;
  __int128 v24;
  _BYTE v25[24];
  const void ***v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  void *v31;
  const void *v32[8];

  v32[7] = *(const void **)MEMORY[0x24BDAC8D0];
  v6 = *a2;
  v5 = (void **)a2[1];
  llvm::jitlink::LinkGraph::defined_symbols(this, v19);
  v27 = *(_OWORD *)v19;
  v28 = v20;
  v29 = v21;
  v30 = v22;
  v7 = v23;
  v8 = v26;
  v9 = (const void ***)v22;
  if (v19[0] == v23 && (const void ***)v30 == v26)
  {
LABEL_11:
    v9 = v8;
  }
  else
  {
    while (1)
    {
      v10 = (size_t)(*v9)[1];
      v11 = *(uint64_t **)(*(_QWORD *)(v6 + 72) + 64);
      v13 = *v11;
      v12 = v11 + 2;
      if (v10 == v13 && (!v10 || !memcmp(**v9, v12, v10)))
        break;
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v27, (uint64_t)&v31);
      v9 = (const void ***)v30;
      if ((void *)v27 == v7 && (_QWORD)v30 == (_QWORD)v8)
        goto LABEL_11;
    }
  }
  v15 = *v5;
  v16 = (std::mutex *)(*(_QWORD *)(v6 + 72) + 320);
  std::mutex::lock(v16);
  v18 = ((unint64_t)(*v9)[3] & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)(*v9)[2];
  v19[0] = v15;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>,llvm::orc::JITDylib *,llvm::orc::ExecutorAddr,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::ExecutorAddr>>::FindAndConstruct((uint64_t *)(*(_QWORD *)(v6 + 72) + 384), v19)[1] = v18;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>,llvm::orc::ExecutorAddr,llvm::orc::JITDylib *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::orc::JITDylib *>>::FindAndConstruct((uint64_t *)(*(_QWORD *)(v6 + 72) + 408), &v18)[1] = v15;
  v17 = (uint64_t *)((char *)this + 256);
  llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSExecutorAddr>,std::string,llvm::orc::ExecutorAddr>(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 144), (uint64_t)v15 + 8, &v18, (uint64_t)&v31);
  v19[0] = v31;
  v19[1] = &v21;
  v20 = xmmword_24AA2ACE0;
  if (v32[1])
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v19[1], v32);
  llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr>,llvm::orc::ExecutorAddr>(*(_QWORD *)(*(_QWORD *)(v6 + 72) + 160), &v18, (uint64_t)&v27);
  *((_QWORD *)&v22 + 1) = v27;
  v23 = v25;
  v24 = xmmword_24AA2ACE0;
  if ((_QWORD)v28)
    llvm::SmallVectorImpl<char>::operator=((uint64_t)&v23, (const void **)&v27 + 1);
  std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](v17, (uint64_t)v19);
  if (v23 != v25)
    free(v23);
  if (v19[1] != &v21)
    free(v19[1]);
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)&v27);
  llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)&v31);
  *a3 = 0;
  std::mutex::unlock(v16);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_3>(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  _QWORD *v5;
  void *v7;
  uint64_t v8;
  __int128 *v9;
  uint64_t SectionByName;
  unint64_t *v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  __int128 *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  std::string::size_type v29;
  void **v30;
  void **v31;
  uint64_t v32;
  void **v33;
  void **v34;
  _QWORD *v35;
  _QWORD *v36;
  unint64_t *v37;
  std::string *v38;
  const char *v39;
  void *v40;
  std::string *v41;
  const void *v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  _QWORD *i;
  const char *v52;
  const void *v53;
  uint64_t v54;
  uint64_t v55;
  __int128 *v56;
  uint64_t v57;
  uint64_t v58;
  _QWORD *v59;
  _QWORD *v60;
  unsigned int *v61;
  unsigned int v62;
  unsigned int v63;
  unsigned int v64;
  unsigned int v65;
  BOOL v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  int v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t v82;
  char v83;
  uint64_t *v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  uint64_t j;
  uint64_t v93;
  std::string *v94;
  const char *v95;
  uint64_t v96;
  int v97;
  int v98;
  BOOL v99;
  BOOL v100;
  std::string *v101;
  const char *v102;
  unsigned int v103;
  unsigned int v104;
  int v106;
  unint64_t *v107;
  unint64_t *v108;
  uint64_t v109;
  unint64_t *v110;
  unint64_t *v111;
  _QWORD *v112;
  uint64_t v113;
  void *v114;
  _QWORD *v115;
  std::string v116;
  _BYTE v117[32];
  __int16 v118;
  void *__p[2];
  const char *v120;
  __int16 v121;
  __int128 v122;
  const void *v123;
  uint64_t v124;
  __int16 v125;
  uint64_t v126;

  v5 = a1;
  v126 = *MEMORY[0x24BDAC8D0];
  v8 = *a1;
  v7 = (void *)a1[1];
  v9 = &llvm::orc::MachOObjCImageInfoSectionName;
  SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, llvm::orc::MachOObjCImageInfoSectionName, *((uint64_t *)&llvm::orc::MachOObjCImageInfoSectionName + 1), a3);
  if (!SectionByName)
    goto LABEL_10;
  v12 = SectionByName;
  if (*(_DWORD *)(SectionByName + 40) == 1)
  {
    v13 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(SectionByName + 32);
    llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, *v13, 0, 0, 0, 1);
    v14 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v12 + 32);
    v16 = *(_QWORD *)(v12 + 32) + 8 * *(unsigned int *)(v12 + 48);
    if ((_QWORD *)v16 != v14)
    {
      while (*(_QWORD *)(*v14 + 40) == *(_QWORD *)(*v14 + 48))
      {
        while (++v14 != v15)
        {
          if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_9;
        }
        v14 = v15;
LABEL_9:
        if (v14 == (_QWORD *)v16)
          goto LABEL_10;
      }
      std::operator+<char>();
      v41 = std::string::append(&v116, ", ");
      v42 = (const void *)v41->__r_.__value_.__r.__words[2];
      v122 = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
      v123 = v42;
      v41->__r_.__value_.__l.__size_ = 0;
      v41->__r_.__value_.__r.__words[2] = 0;
      v41->__r_.__value_.__r.__words[0] = 0;
      *(_QWORD *)v117 = &v122;
      *(_OWORD *)&v117[16] = llvm::orc::MachOObjCImageInfoSectionName;
      v118 = 1284;
      __p[0] = v117;
      v120 = " contains references to symbols";
      v121 = 770;
      getErrorErrorCat();
      v43 = operator new();
      *(_QWORD *)v43 = off_251C127D0;
      llvm::Twine::str((llvm::formatv_object_base **)__p, (std::string *)(v43 + 8));
      *(_QWORD *)(v43 + 32) = 3;
      *(_QWORD *)(v43 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v43 + 48) = 1;
      *a4 = v43;
      if (SHIBYTE(v123) < 0)
        operator delete((void *)v122);
      if (SHIBYTE(v116.__r_.__value_.__r.__words[2]) < 0)
      {
        v40 = (void *)v116.__r_.__value_.__r.__words[0];
        goto LABEL_48;
      }
      goto LABEL_49;
    }
LABEL_10:
    v114 = v7;
    v115 = v5;
    v17 = llvm::orc::MachOInitSectionNames;
    memset(v117, 0, 20);
    do
    {
      v18 = *(const void **)v17;
      v19 = *((_QWORD *)v17 + 1);
      if (v19 != *((_QWORD *)v9 + 1) || v19 && memcmp(*(const void **)v17, *(const void **)v9, *((_QWORD *)v17 + 1)))
      {
        v20 = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)v18, v19, v11);
        if (v20)
        {
          v21 = v20;
          v22 = v9;
          v122 = 0uLL;
          LODWORD(v123) = 0;
          v23 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v20 + 56);
          v25 = *(_QWORD *)(v21 + 56) + 8 * *(unsigned int *)(v21 + 72);
          if ((_QWORD *)v25 != v23)
          {
            v26 = v23;
            v27 = v24;
            do
            {
              v28 = *v26;
              if ((*(_QWORD *)(*v26 + 24) & 0x11FFFFFFFFFFFFFFLL) == 0x1000000000000000)
              {
                v29 = *(_QWORD *)(v28 + 16);
                if (*(_QWORD *)(v28 + 32) == *(_QWORD *)(v29 + 32))
                {
                  __p[0] = *(void **)(v28 + 16);
                  v116.__r_.__value_.__r.__words[0] = 0;
                  if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)&v122, __p, &v116) & 1) == 0)
                  {
                    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v117, v26, (uint64_t)__p);
                    v116.__r_.__value_.__r.__words[0] = v29;
                    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v122, &v116, (uint64_t)__p);
                  }
                }
              }
              while (++v26 != v27)
              {
                if ((*v26 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_25;
              }
              v26 = v27;
LABEL_25:
              ;
            }
            while (v26 != (_QWORD *)v25);
          }
          v30 = (void **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v21 + 32);
          v32 = *(_QWORD *)(v21 + 32) + 8 * *(unsigned int *)(v21 + 48);
          if ((void **)v32 != v30)
          {
            v33 = v30;
            v34 = v31;
            do
            {
              v35 = *v33;
              __p[0] = *v33;
              v116.__r_.__value_.__r.__words[0] = 0;
              if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)&v122, __p, &v116) & 1) == 0)
              {
                v116.__r_.__value_.__r.__words[0] = (std::string::size_type)llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v35, 0, v35[4], 0, 1);
                llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v117, &v116, (uint64_t)__p);
              }
              while (++v33 != v34)
              {
                if (((unint64_t)*v33 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_34;
              }
              v33 = v34;
LABEL_34:
              ;
            }
            while (v33 != (void **)v32);
          }
          MEMORY[0x24BD1B398](v122, 8);
          v9 = v22;
        }
      }
      ++v17;
    }
    if (*(_DWORD *)&v117[8])
    {
      std::mutex::lock((std::mutex *)(v8 + 8));
      __p[0] = v114;
      v36 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>,llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>,llvm::DenseMapInfo<llvm::orc::MaterializationResponsibility *,void>,llvm::detail::DenseMapPair<llvm::orc::MaterializationResponsibility *,llvm::DenseSet<llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>>>::FindAndConstruct((uint64_t *)(v8 + 128), (uint64_t *)__p);
      MEMORY[0x24BD1B398](v36[1], 8);
      v36[1] = *(_QWORD *)v117;
      v36[2] = *(_QWORD *)&v117[8];
      *(_OWORD *)v117 = 0uLL;
      *((_DWORD *)v36 + 6) = *(_DWORD *)&v117[16];
      *(_DWORD *)&v117[16] = 0;
      std::mutex::unlock((std::mutex *)(v8 + 8));
    }
    *a4 = 0;
    MEMORY[0x24BD1B398](*(_QWORD *)v117, 8);
    v5 = v115;
    goto LABEL_49;
  }
  std::operator+<char>();
  v38 = std::string::append((std::string *)v117, "__DATA,__objc_imageinfo contains multiple blocks");
  v39 = (const char *)v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v120 = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  getErrorErrorCat();
  *(_QWORD *)&v122 = 3;
  *((_QWORD *)&v122 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)__p, (uint64_t *)&v122, a4);
  if (SHIBYTE(v120) < 0)
    operator delete(__p[0]);
  if ((v117[23] & 0x80000000) != 0)
  {
    v40 = *(void **)v117;
LABEL_48:
    operator delete(v40);
  }
LABEL_49:
  if (*a4)
    return;
  v44 = (uint64_t *)v5[1];
  v45 = llvm::jitlink::LinkGraph::findSectionByName(a2, *(_QWORD *)v9, *((_QWORD *)v9 + 1), v37);
  if (!v45)
  {
    *a4 = 0;
    return;
  }
  v46 = v45;
  v47 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v45 + 32);
  v49 = *(_QWORD *)(v46 + 32) + 8 * *(unsigned int *)(v46 + 48);
  if ((_QWORD *)v49 == v47)
  {
    v125 = 1283;
    v52 = "Empty ";
    goto LABEL_61;
  }
  v50 = v47;
  for (i = v47 + 1; i != v48; ++i)
  {
    if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
      goto LABEL_58;
  }
  i = v48;
LABEL_58:
  if (i != (_QWORD *)v49)
  {
    v125 = 1283;
    v52 = "Multiple blocks in ";
LABEL_61:
    v53 = *(const void **)v9;
    v54 = *((_QWORD *)v9 + 1);
    *(_QWORD *)&v122 = v52;
    v123 = v53;
    v124 = v54;
    *(_QWORD *)v117 = &v122;
    *(_QWORD *)&v117[16] = " section in ";
    v118 = 770;
LABEL_62:
    __p[0] = v117;
    v120 = (const char *)(a2 + 96);
    v121 = 1026;
    getErrorErrorCat();
    v55 = operator new();
    *(_QWORD *)v55 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)__p, (std::string *)(v55 + 8));
    *(_QWORD *)(v55 + 32) = 3;
    *(_QWORD *)(v55 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v55 + 48) = 1;
    *a4 = v55;
    return;
  }
  if (*(_DWORD *)(a2 + 192))
  {
    v56 = v9;
    v57 = *(unsigned int *)(a2 + 200);
    if ((_DWORD)v57)
    {
      v58 = 24 * v57;
      v59 = *(_QWORD **)(a2 + 184);
      while (*v59 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v59 += 3;
        v58 -= 24;
        if (!v58)
          goto LABEL_68;
      }
    }
    else
    {
      v59 = *(_QWORD **)(a2 + 184);
    }
    v87 = *(_QWORD *)(a2 + 184) + 24 * v57;
LABEL_98:
    if (v59 != (_QWORD *)v87)
    {
      v88 = v59[2];
      if (v88 != v46)
      {
        v89 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v88 + 32);
        v91 = *(_QWORD *)(v88 + 32) + 8 * *(unsigned int *)(v88 + 48);
        if ((_QWORD *)v91 != v89)
        {
LABEL_101:
          for (j = *(_QWORD *)(*v89 + 40); ; j += 32)
          {
            if (j == *(_QWORD *)(*v89 + 48))
            {
              while (++v89 != v90)
              {
                if ((*v89 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_110;
              }
              v89 = v90;
LABEL_110:
              if (v89 == (_QWORD *)v91)
                goto LABEL_111;
              goto LABEL_101;
            }
            v93 = *(_QWORD *)(*(_QWORD *)j + 16);
            if ((*(_BYTE *)(v93 + 8) & 1) != 0 && *(_QWORD *)(v93 + 16) == v46)
              break;
          }
          v118 = 773;
          v96 = *((_QWORD *)v56 + 1);
          *(_QWORD *)v117 = *(_QWORD *)v56;
          *(_QWORD *)&v117[8] = v96;
          *(_QWORD *)&v117[16] = " is referenced within file ";
          goto LABEL_62;
        }
      }
LABEL_111:
      while (1)
      {
        v59 += 3;
        if (v59 == (_QWORD *)v87)
          break;
        if (*v59 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_98;
      }
    }
  }
LABEL_68:
  v60 = (_QWORD *)*v50;
  v61 = *(unsigned int **)(*v50 + 24);
  v62 = *(_DWORD *)(a2 + 172) - 1;
  v64 = *v61;
  v63 = v61[1];
  v65 = bswap32(v64);
  v66 = v62 >= 2;
  if (v62 >= 2)
    v67 = v65;
  else
    v67 = v64;
  v68 = bswap32(v63);
  if (v66)
    v69 = v68;
  else
    v69 = v63;
  v70 = v69 & 0xFFFFFFEF;
  std::mutex::lock((std::mutex *)(v8 + 8));
  v71 = *v44;
  v72 = *(_QWORD *)(v8 + 80);
  __p[0] = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(v72, *(_DWORD *)(v8 + 96), v71, __p)|| __p[0] == (void *)(*(_QWORD *)(v8 + 80) + 24 * *(unsigned int *)(v8 + 96)))
  {
    v75 = v60[4];
    v76 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, 40, 3);
    *v76 = "__llvm_jitlink_macho_objc_imageinfo";
    v76[1] = 35;
    v76[2] = v60;
    v76[3] = 0x1400000000000000;
    v76[4] = v75;
    v77 = v60[2] + 56;
    *(_QWORD *)v117 = v76;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v77, v117, (uint64_t)__p);
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)(*v44 + 32) + 72), (uint64_t *)"__llvm_jitlink_macho_objc_imageinfo", 0x23uLL, (unint64_t **)&v116);
    *(_QWORD *)&v122 = v116.__r_.__value_.__r.__words[0];
    v116.__r_.__value_.__r.__words[0] = 0;
    WORD4(v122) = 0;
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::DenseMap(v117, (uint64_t)&v122, 1);
    __p[0] = *(void **)v117;
    __p[1] = *(void **)&v117[8];
    memset(v117, 0, 20);
    LODWORD(v120) = *(_DWORD *)&v117[16];
    llvm::orc::ExecutionSession::OL_defineMaterializing(v44, (int32x2_t *)__p, a4);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)__p);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v117);
    if ((unint64_t)(v122 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v78 = (unint64_t *)(v122 + 8);
      do
        v79 = __ldaxr(v78);
      while (__stlxr(v79 - 1, v78));
    }
    if (v116.__r_.__value_.__r.__words[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v80 = (unint64_t *)(v116.__r_.__value_.__r.__words[0] + 8);
      do
        v81 = __ldaxr(v80);
      while (__stlxr(v81 - 1, v80));
    }
    if (*a4)
      goto LABEL_163;
    v82 = *v44;
    __p[0] = 0;
    v83 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(*(_QWORD *)(v8 + 80), *(_DWORD *)(v8 + 96), v82, __p);
    v84 = (uint64_t *)__p[0];
    if ((v83 & 1) != 0)
      goto LABEL_95;
    v85 = *(_DWORD *)(v8 + 88);
    v86 = *(_DWORD *)(v8 + 96);
    if (4 * v85 + 4 >= 3 * v86)
    {
      v86 *= 2;
    }
    else if (v86 + ~v85 - *(_DWORD *)(v8 + 92) > v86 >> 3)
    {
LABEL_92:
      ++*(_DWORD *)(v8 + 88);
      if (*v84 != -4096)
        --*(_DWORD *)(v8 + 92);
      *v84 = v82;
      v84[1] = 0;
      *((_DWORD *)v84 + 4) = 0;
LABEL_95:
      *((_DWORD *)v84 + 2) = v67;
      *((_DWORD *)v84 + 3) = v70;
      *((_BYTE *)v84 + 16) = 0;
      goto LABEL_162;
    }
    llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::grow(v8 + 80, v86);
    __p[0] = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(*(_QWORD *)(v8 + 80), *(_DWORD *)(v8 + 96), v82, __p);
    v84 = (uint64_t *)__p[0];
    goto LABEL_92;
  }
  if (*((_DWORD *)__p[0] + 2) != v67)
  {
    std::operator+<char>();
    v94 = std::string::append((std::string *)v117, " does not match first registered version");
    v95 = (const char *)v94->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v94->__r_.__value_.__l.__data_;
    v120 = v95;
    v94->__r_.__value_.__l.__size_ = 0;
    v94->__r_.__value_.__r.__words[2] = 0;
    v94->__r_.__value_.__r.__words[0] = 0;
    getErrorErrorCat();
    *(_QWORD *)&v122 = 3;
    *((_QWORD *)&v122 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)__p, (uint64_t *)&v122, a4);
    if (SHIBYTE(v120) < 0)
      operator delete(__p[0]);
    if ((v117[23] & 0x80000000) != 0)
      operator delete(*(void **)v117);
    goto LABEL_163;
  }
  v73 = *((_DWORD *)__p[0] + 3);
  if (v73 != v70)
  {
    v74 = BYTE1(v73);
    if (((v69 & 0xFFEF) < 0x100 || (unsigned __int16)*((_DWORD *)__p[0] + 3) < 0x100u || BYTE1(v73) == BYTE1(v70))
      && ((v97 = (v73 >> 6) & 1, (v98 = (v69 >> 6) & 1) == 0) ? (v99 = v97 == 0) : (v99 = 1),
          !v99 ? (v100 = *((_BYTE *)__p[0] + 16) == 0) : (v100 = 1),
          v100 && ((v73 & 0x10) == 0 || !*((_BYTE *)__p[0] + 16))))
    {
      if (!*((_BYTE *)__p[0] + 16))
      {
        v103 = HIWORD(v73);
        if (HIWORD(v69) >= HIWORD(v73))
          v104 = HIWORD(v73);
        else
          v104 = HIWORD(v69);
        if (!HIWORD(v69))
          v104 = v103;
        if (!v103)
          v104 = HIWORD(v69);
        if ((v69 & 0xFFEF) >= 0x100)
          v74 = BYTE1(v70);
        if (v97 != v98 || v98 == 0)
          v106 = 0;
        else
          v106 = 64;
        *((_DWORD *)__p[0] + 3) = (v74 << 8) | (v104 << 16) | v106;
      }
      *a4 = 0;
    }
    else
    {
      std::operator+<char>();
      v101 = std::string::append((std::string *)v117, " does not match first registered flags");
      v102 = (const char *)v101->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v101->__r_.__value_.__l.__data_;
      v120 = v102;
      v101->__r_.__value_.__l.__size_ = 0;
      v101->__r_.__value_.__r.__words[2] = 0;
      v101->__r_.__value_.__r.__words[0] = 0;
      getErrorErrorCat();
      *(_QWORD *)&v122 = 3;
      *((_QWORD *)&v122 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)__p, (uint64_t *)&v122, a4);
      if (SHIBYTE(v120) < 0)
        operator delete(__p[0]);
      if ((v117[23] & 0x80000000) != 0)
        operator delete(*(void **)v117);
      if (*a4)
        goto LABEL_163;
    }
  }
  v107 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v46 + 56);
  v109 = *(_QWORD *)(v46 + 56) + 8 * *(unsigned int *)(v46 + 72);
  if ((unint64_t *)v109 != v107)
  {
    v110 = v107;
    v111 = v108;
    do
    {
      v112 = (_QWORD *)*v110++;
      v113 = *(_QWORD *)(v112[2] + 16) + 56;
      __p[0] = v112;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v113, __p);
      while (v110 != v111)
      {
        if ((*v110 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_160;
        ++v110;
      }
      v110 = v111;
LABEL_160:
      ;
    }
    while (v110 != (unint64_t *)v109);
  }
  llvm::jitlink::LinkGraph::removeBlock(a2, v60);
LABEL_162:
  *a4 = 0;
LABEL_163:
  std::mutex::unlock((std::mutex *)(v8 + 8));
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_4>@<X0>(uint64_t a1@<X1>, unint64_t *a2@<X3>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t v14;
  void *v15;
  uint64_t Section;
  void *v17[2];
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;

  v5 = 0;
  v6 = (unint64_t *)&qword_25795E368;
  do
  {
    v7 = *v6;
    v8 = v6[1];
    v6 += 2;
    if (llvm::jitlink::LinkGraph::findSectionByName(a1, v7, v8, a2))
      ++v5;
  }
  v9 = 0;
  v10 = (uint64_t *)&_MergedGlobals_2;
  do
  {
    v11 = *v10;
    v12 = v10[1];
    v10 += 2;
    result = llvm::jitlink::LinkGraph::findSectionByName(a1, v11, v12, a2);
    if (result)
      ++v5;
    v9 |= result != 0;
  }
  while (v10 != &qword_25795E368);
  if (v5)
  {
    v14 = 184;
    if ((v9 & 1) != 0)
      v14 = 256;
    v15 = (void *)(v14 + 80 * v5);
    Section = llvm::jitlink::LinkGraph::createSection(a1, (uint64_t)"__llvm_jitlink_ObjCRuntimeRegistrationObject", 44, 3);
    v19 = 16;
    v20 = 0;
    v18 = 0;
    v17[0] = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, (uint64_t)v15, 0);
    v17[1] = v15;
    bzero(v17[0], (size_t)v15);
    result = (uint64_t)llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a1, Section, (uint64_t *)v17, &v20, &v19, &v18);
  }
  *a3 = 0;
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_5>(__int128 *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t SectionByName;
  int v7;
  _QWORD *v8;
  char *v9;
  char *v10;
  _QWORD *v11;
  _QWORD *v12;
  unint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  int **v16;
  unint64_t v17;
  int *v18;
  size_t v19;
  int v20;
  _QWORD *v21;
  uint64_t v22;
  _BYTE *v23;
  _OWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  int **v27;
  unint64_t v28;
  int *v29;
  size_t v30;
  int v31;
  _QWORD *v32;
  uint64_t v33;
  _BYTE *v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  int v39;
  char *v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  double v44;
  BOOL v45;
  unsigned int v46;
  double v47;
  int v48;
  unsigned int v49;
  int v50;
  unsigned int v51;
  uint64_t *v52;
  __int128 v53;
  _QWORD v54[2];
  uint64_t v55;
  _QWORD v56[2];
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  _UNKNOWN **v61;
  uint64_t v62;
  void *__p[4];
  __int128 v64;
  __int128 v65;
  __int128 v66;
  __int128 v67;
  __int128 v68;
  uint64_t v69;

  v69 = *MEMORY[0x24BDAC8D0];
  v53 = *a1;
  SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)"__llvm_jitlink_ObjCRuntimeRegistrationObject", 44, a3);
  if (SectionByName)
  {
    v7 = *(_DWORD *)(a2 + 144);
    if (v7 == 3 || v7 == 38)
    {
      v52 = a4;
      v8 = (_QWORD *)*llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(SectionByName + 32);
      v60 = 0;
      v61 = 0;
      v62 = 0;
      v57 = 0;
      v58 = 0;
      v59 = 0;
      v67 = 0u;
      v68 = 0u;
      v65 = 0u;
      v66 = 0u;
      v64 = 0u;
      memset(__p, 0, sizeof(__p));
      std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::push_back[abi:nn180100]((void **)&v57, __p);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v67);
      v9 = v58;
      v10 = v58 - 112;
      *(_OWORD *)(v58 - 73) = 0u;
      *(_OWORD *)(v9 - 57) = 0u;
      *((_OWORD *)v9 - 3) = 0u;
      *(_OWORD *)(v9 - 89) = 0u;
      strcpy(v9 - 112, "__objc_imageinfo__DATA");
      *((_QWORD *)v9 - 9) = 8;
      v11 = operator new(0x28uLL, (std::align_val_t)8uLL);
      __p[0] = v11;
      *(_OWORD *)&__p[1] = xmmword_24AA2ACA0;
      *v11 = a2;
      *(_OWORD *)(v11 + 1) = v53;
      v11[3] = v8;
      v11[4] = v10;
      __p[3] = llvm::detail::UniqueFunctionBase<void,unsigned long>::CallbacksHolder<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_2,llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_2,void>::Callbacks;
      if (v9 - 32 != (char *)__p)
      {
        v12 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)v9 - 4);
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v12, (__int128 *)__p);
      }
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(__p);
      v14 = &qword_25795E368;
      do
      {
        v15 = llvm::jitlink::LinkGraph::findSectionByName(a2, *v14, v14[1], v13);
        if (v15)
        {
          v16 = (int **)v15;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v64 = 0u;
          memset(__p, 0, sizeof(__p));
          std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::push_back[abi:nn180100]((void **)&v57, __p);
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v67);
          v9 = v58;
          llvm::jitlink::SectionRange::SectionRange((unint64_t **)__p, (uint64_t)v16);
          v18 = *v16;
          v17 = (unint64_t)v16[1];
          *((_OWORD *)v9 - 4) = 0u;
          *((_OWORD *)v9 - 3) = 0u;
          *((_OWORD *)v9 - 6) = 0u;
          *((_OWORD *)v9 - 5) = 0u;
          *((_OWORD *)v9 - 7) = 0u;
          v19 = v17 - 7;
          if (v17 >= 7)
            v17 = 7;
          memcpy(v9 - 112, (char *)v18 + v17, v19);
          v20 = *v18;
          *((_WORD *)v9 - 46) = *((_WORD *)v18 + 2);
          *((_DWORD *)v9 - 24) = v20;
          v21 = __p[0];
          if (__p[0])
            v22 = *(_QWORD *)__p[0];
          else
            v22 = 0;
          *((_QWORD *)v9 - 10) = v22 - *v8;
          v23 = __p[1];
          if (__p[1])
            v23 = (_BYTE *)(*((_QWORD *)__p[1] + 4) + *(_QWORD *)__p[1]);
          if (v21)
            v21 = (_QWORD *)*v21;
          *((_QWORD *)v9 - 9) = v23 - (_BYTE *)v21;
          *((_DWORD *)v9 - 12) = 0;
        }
        v14 += 2;
      }
      v24 = 0;
      v25 = (uint64_t *)&_MergedGlobals_2;
      do
      {
        v26 = llvm::jitlink::LinkGraph::findSectionByName(a2, *v25, v25[1], v13);
        if (v26)
        {
          v27 = (int **)v26;
          v67 = 0u;
          v68 = 0u;
          v65 = 0u;
          v66 = 0u;
          v64 = 0u;
          memset(__p, 0, sizeof(__p));
          std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::push_back[abi:nn180100]((void **)&v60, __p);
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v67);
          v24 = v61;
          llvm::jitlink::SectionRange::SectionRange((unint64_t **)__p, (uint64_t)v27);
          v29 = *v27;
          v28 = (unint64_t)v27[1];
          *(v24 - 4) = 0u;
          *(v24 - 3) = 0u;
          *(v24 - 6) = 0u;
          *(v24 - 5) = 0u;
          *(v24 - 7) = 0u;
          v30 = v28 - 7;
          if (v28 >= 7)
            v28 = 7;
          memcpy(v24 - 7, (char *)v29 + v28, v30);
          v31 = *v29;
          *((_WORD *)v24 - 46) = *((_WORD *)v29 + 2);
          *((_DWORD *)v24 - 24) = v31;
          v32 = __p[0];
          if (__p[0])
            v33 = *(_QWORD *)__p[0];
          else
            v33 = 0;
          *((_QWORD *)v24 - 10) = v33 - *v8;
          v34 = __p[1];
          if (__p[1])
            v34 = (_BYTE *)(*((_QWORD *)__p[1] + 4) + *(_QWORD *)__p[1]);
          if (v32)
            v32 = (_QWORD *)*v32;
          *((_QWORD *)v24 - 9) = v34 - (_BYTE *)v32;
          *((_DWORD *)v24 - 12) = 0;
        }
        v25 += 2;
      }
      while (v25 != &qword_25795E368);
      if (*(_DWORD *)(a2 + 144) == 3)
        v35 = 0;
      else
        v35 = 3;
      if (*(_DWORD *)(a2 + 144) == 3)
        v36 = 16777228;
      else
        v36 = 16777223;
      v37 = v60;
      if (v24 == (_OWORD *)v60)
        v38 = 1;
      else
        v38 = 2;
      v39 = 72 << (v24 != (_OWORD *)v60);
      v40 = v57;
      v41 = -1227133513 * (((unint64_t)v24 - v60) >> 4) - 1227133513 * ((unint64_t)(v9 - v57) >> 4);
      v42 = v8[3];
      v43 = v8[4];
      v56[0] = v42;
      v56[1] = v43;
      v54[0] = a2;
      v54[1] = &v55;
      __p[0] = v54;
      __p[1] = &v55;
      __p[2] = v56;
      *(_QWORD *)&v44 = v35 | 0x600000000;
      v45 = *(_DWORD *)(a2 + 172) == 1;
      v46 = bswap32(v36);
      HIDWORD(v47) = 100663296;
      LODWORD(v47) = v35 << 24;
      if (*(_DWORD *)(a2 + 172) == 1)
      {
        v48 = -17958193;
      }
      else
      {
        v36 = v46;
        v48 = -805638658;
      }
      *(_DWORD *)v42 = v48;
      *(_DWORD *)(v42 + 4) = v36;
      v49 = v39 + 80 * v41;
      v50 = v38 << 24;
      if (!v45)
        v44 = v47;
      *(double *)(v42 + 8) = v44;
      v51 = bswap32(v49);
      if (v45)
        v50 = v38;
      else
        v49 = v51;
      *(_DWORD *)(v42 + 16) = v50;
      *(_DWORD *)(v42 + 20) = v49;
      *(_QWORD *)(v42 + 24) = 0;
      v55 = v42 + 32;
      if ((_OWORD *)v37 != v24)
        llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_3::operator()((_QWORD **)__p, "__TEXT", 6uLL, (__int128 **)&v60);
      if (v40 != v9)
        llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_3::operator()((_QWORD **)__p, "__DATA", 6uLL, (__int128 **)&v57);
      *v52 = 0;
      std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::~vector[abi:nn180100]((void **)&v57);
      std::vector<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc,std::allocator<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::SecDesc>>::~vector[abi:nn180100]((void **)&v60);
    }
    else
    {
      std::operator+<char>();
      getErrorErrorCat();
      v60 = 3;
      v61 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)__p, &v60, a4);
      if (SHIBYTE(__p[2]) < 0)
        operator delete(__p[0]);
    }
  }
  else
  {
    *a4 = 0;
  }
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_6>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t SectionByName;
  uint64_t v14;
  std::mutex *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  size_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t i;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45[4];
  __int16 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t __src;
  __int128 v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;

  v58 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = a1[1];
  v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 208);
  v10 = *(_QWORD *)(a2 + 208) + 8 * *(unsigned int *)(a2 + 224);
  if ((_QWORD *)v10 != v7)
  {
    while (1)
    {
      v11 = (_QWORD *)*v7;
      if (*(_QWORD *)(*v7 + 8) == 15
        && *(_QWORD *)*v11 == 0x6F625F766C745F5FLL
        && *(_QWORD *)(*v11 + 7) == 0x7061727473746F6FLL)
      {
        break;
      }
      while (++v7 != v8)
      {
        if ((*v7 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_11;
      }
      v7 = v8;
LABEL_11:
      if (v7 == (_QWORD *)v10)
        goto LABEL_14;
    }
    *v11 = "___orc_rt_macho_tlv_get_addr";
    v11[1] = 28;
  }
LABEL_14:
  SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)llvm::orc::MachOThreadVarsSectionName, unk_25795D498, v9);
  if (!SectionByName)
    goto LABEL_33;
  v14 = SectionByName;
  v15 = (std::mutex *)(*(_QWORD *)(v5 + 72) + 320);
  std::mutex::lock(v15);
  v16 = *(_QWORD *)(v5 + 72);
  *(_QWORD *)&v54 = v6;
  *(_QWORD *)&v47 = 0;
  v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v16 + 432), &v54, &v47);
  v18 = v47;
  if (!v17)
    v18 = *(_QWORD *)(v16 + 432) + 16 * *(unsigned int *)(v16 + 448);
  if (v18 != *(_QWORD *)(*(_QWORD *)(v5 + 72) + 432) + 16 * *(unsigned int *)(*(_QWORD *)(v5 + 72) + 448))
  {
    v19 = *(_QWORD *)(v18 + 8);
    std::mutex::unlock(v15);
    goto LABEL_19;
  }
  std::mutex::unlock(v15);
  v39 = *(_QWORD *)(v5 + 72);
  v40 = *(_QWORD *)(v39 + 256);
  if (!v40)
  {
    getErrorErrorCat();
    *(_QWORD *)&v47 = 3;
    *((_QWORD *)&v47 + 1) = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Attempting to create pthread key in target, but runtime support has not been loaded yet", (uint64_t *)&v47, v45);
    v41 = v45[0];
LABEL_55:
    *a3 = v41;
    return;
  }
  BYTE8(v54) = 0;
  *(_QWORD *)&v54 = 0;
  *(_QWORD *)&v47 = *(_QWORD *)(*(_QWORD *)(v39 + 8) + 72);
  *((_QWORD *)&v47 + 1) = v40;
  llvm::orc::shared::WrapperFunction<llvm::orc::shared::SPSExpected<unsigned long long> ()(void)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<llvm::orc::shared::SPSExpected<unsigned long long> ()(void),llvm::Expected<unsigned long long> &>(llvm::orc::ExecutorAddr,llvm::Expected<unsigned long long> &)::{lambda(char const*,unsigned long)#1},llvm::Expected<unsigned long long>>((uint64_t *)&v47, &v54, &__src);
  v41 = __src;
  if (__src)
  {
    if ((BYTE8(v54) & 1) != 0)
    {
      v42 = v54;
      *(_QWORD *)&v54 = 0;
      if (v42)
        (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    }
    goto LABEL_55;
  }
  if ((BYTE8(v54) & 1) != 0)
  {
    v41 = v54;
    goto LABEL_55;
  }
  v19 = v54;
LABEL_19:
  v20 = bswap64(v19);
  if ((*(_DWORD *)(a2 + 172) - 1) >= 2)
    v21 = v20;
  else
    v21 = v19;
  __src = v21;
  v22 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v14 + 32);
  v24 = *(_QWORD *)(v14 + 32) + 8 * *(unsigned int *)(v14 + 48);
  if ((_QWORD *)v24 == v22)
  {
LABEL_33:
    llvm::jitlink::LinkGraph::blocks((llvm::jitlink::LinkGraph *)a2, &v47);
    v54 = v47;
    v55 = v48;
    v56 = v49;
    v57 = v50;
    v32 = v51;
    v33 = v52;
    v34 = (uint64_t *)v50;
    if ((_QWORD)v47 != v51 || (_QWORD)v50 != v52)
    {
      do
      {
        v35 = *v34;
        v36 = *(_QWORD *)(*v34 + 40);
        for (i = *(_QWORD *)(v35 + 48); v36 != i; v36 += 32)
        {
          if (*(_BYTE *)(v36 + 24) == 24)
            *(_BYTE *)(v36 + 24) = 20;
        }
        llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)&v54, (uint64_t)v45);
        v34 = (uint64_t *)v57;
      }
      while ((_QWORD)v54 != v32 || (_QWORD)v57 != v33);
    }
    *a3 = 0;
    return;
  }
  v25 = v22;
  v26 = v23;
  while (1)
  {
    v27 = (uint64_t *)*v25;
    v28 = *(_QWORD *)(*v25 + 32);
    if (v28 != 3 * *(_DWORD *)(a2 + 168))
      break;
    v29 = (char *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, *(_QWORD *)(*v25 + 32), 0);
    v30 = v29;
    v31 = v27[4];
    if (v31)
      memmove(v29, (const void *)v27[3], v31);
    memcpy(&v30[*(unsigned int *)(a2 + 168)], &__src, *(unsigned int *)(a2 + 168));
    v27[3] = (uint64_t)v30;
    v27[4] = v28;
    v27[1] &= ~4uLL;
    while (++v25 != v26)
    {
      if ((*v25 | 0x1000) != 0xFFFFFFFFFFFFF000)
        goto LABEL_32;
    }
    v25 = v26;
LABEL_32:
    if (v25 == (_QWORD *)v24)
      goto LABEL_33;
  }
  v43 = *v27;
  *(_QWORD *)&v47 = "{0:x}";
  *((_QWORD *)&v47 + 1) = 5;
  *(_QWORD *)&v48 = &v50;
  *((_QWORD *)&v48 + 1) = 1;
  *(_QWORD *)&v49 = &off_251C151F0;
  *((_QWORD *)&v49 + 1) = v43;
  *(_QWORD *)&v50 = &v49;
  v45[0] = (uint64_t)"__thread_vars block at ";
  v45[2] = (uint64_t)&v47;
  v46 = 1539;
  *(_QWORD *)&v54 = v45;
  *(_QWORD *)&v55 = " has unexpected size";
  LOWORD(v56) = 770;
  getErrorErrorCat();
  v44 = operator new();
  *(_QWORD *)v44 = off_251C127D0;
  llvm::Twine::str((llvm::formatv_object_base **)&v54, (std::string *)(v44 + 8));
  *(_QWORD *)(v44 + 32) = 3;
  *(_QWORD *)(v44 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
  *(_BYTE *)(v44 + 48) = 1;
  *a3 = v44;
}

void std::__shared_ptr_emplace<llvm::SmallVector<llvm::orc::MachOPlatform::MachOPlatformPlugin::SymbolTablePair,3u>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_251C150F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<llvm::SmallVector<llvm::orc::MachOPlatform::MachOPlatformPlugin::SymbolTablePair,3u>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_251C150F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x24BD1B3A4);
}

void std::__shared_ptr_emplace<llvm::SmallVector<llvm::orc::MachOPlatform::MachOPlatformPlugin::SymbolTablePair,3u>>::__on_zero_shared(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 24);
  if (v2 != (void *)(a1 + 40))
    free(v2);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_7>@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t SectionByName;
  uint64_t *v7;
  uint64_t *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t *v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  size_t v33;
  const void *v34;
  _BYTE *v35;
  _BYTE *v36;
  _QWORD *v37;
  unint64_t v38;
  _QWORD *v39;
  unint64_t v42[8];
  _OWORD v43[3];
  __int128 v44;
  __int128 v45;
  _OWORD v46[2];
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50[2];
  unsigned int v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  _QWORD v55[9];

  v55[6] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)(a1 + 8);
  SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, (uint64_t)llvm::orc::MachOCStringSectionName, unk_25795D308, a3);
  if (!SectionByName)
    SectionByName = llvm::jitlink::LinkGraph::createSection(a2, (uint64_t)llvm::orc::MachOCStringSectionName, unk_25795D308, 5);
  v50[0] = 0;
  v50[1] = 0;
  v51 = 0;
  v7 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(SectionByName + 56);
  v10 = *(_QWORD *)(SectionByName + 56) + 8 * *(unsigned int *)(SectionByName + 72);
  if ((uint64_t *)v10 != v7)
  {
    v11 = v7;
    v12 = v8;
    do
    {
      v13 = *v11++;
      v14 = *(_QWORD *)(v13 + 16);
      v16 = *(_QWORD *)(v14 + 24);
      v15 = *(_QWORD *)(v14 + 32);
      *(_QWORD *)&v45 = v16;
      *((_QWORD *)&v45 + 1) = v15;
      *(_QWORD *)&v46[0] = v13;
      llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v50, &v45, v46, v9, (uint64_t)&v53);
      while (v11 != v12)
      {
        if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_10;
        ++v11;
      }
      v11 = v12;
LABEL_10:
      ;
    }
    while (v11 != (uint64_t *)v10);
  }
  v53 = (char *)v55;
  v54 = 0x600000000;
  llvm::jitlink::LinkGraph::defined_symbols((llvm::jitlink::LinkGraph *)a2, &v45);
  v43[0] = v45;
  v43[1] = v46[0];
  v43[2] = v46[1];
  v44 = v47;
  v17 = v48;
  v18 = v49;
  v19 = (uint64_t *)v47;
  if ((_QWORD)v45 != v48 || (_QWORD)v47 != v49)
  {
    do
    {
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v53, *v19);
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v43, (uint64_t)v42);
      v19 = (uint64_t *)v44;
    }
    while (*(_QWORD *)&v43[0] != v17 || (_QWORD)v44 != v18);
  }
  v21 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 232);
  v24 = *(_QWORD *)(a2 + 232) + 8 * *(unsigned int *)(a2 + 248);
  if ((uint64_t *)v24 != v21)
  {
    v25 = v21;
    v26 = v22;
    do
    {
      v27 = *v25++;
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v53, v27);
      while (v25 != v26)
      {
        if ((*v25 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_25;
        ++v25;
      }
      v25 = v26;
LABEL_25:
      ;
    }
    while (v25 != (uint64_t *)v24);
  }
  v28 = v53;
  if ((_DWORD)v54)
  {
    v29 = 8 * v54;
    do
    {
      v30 = *(_QWORD **)v28;
      v31 = *(_QWORD *)(*(_QWORD *)v28 + 8);
      if (v31)
      {
        *(_QWORD *)&v45 = *v30;
        *((_QWORD *)&v45 + 1) = v31;
        *(_QWORD *)&v43[0] = 0;
        if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v50, (uint64_t)&v45, v43, v23)|| *(_QWORD *)&v43[0] == v50[0] + 24 * v51)
        {
          v34 = (const void *)*v30;
          v33 = v30[1];
          v35 = (_BYTE *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, v33 + 1, 0);
          v36 = v35;
          if (v33)
            memmove(v35, v34, v33);
          v36[v33] = 0;
          *(_QWORD *)&v45 = v36;
          *((_QWORD *)&v45 + 1) = v33 + 1;
          *(_QWORD *)&v43[0] = 0;
          v42[0] = 1;
          v52 = 0;
          v37 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, SectionByName, (uint64_t *)&v45, (uint64_t *)v43, v42, &v52);
          v32 = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v37, 0, v37[4], 0, 1);
        }
        else
        {
          v32 = *(_QWORD **)(*(_QWORD *)&v43[0] + 16);
        }
        v38 = *(unsigned int *)(v5 + 8);
        if (v38 >= *(unsigned int *)(v5 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v5, (void *)(v5 + 16), v38 + 1, 16);
          v38 = *(unsigned int *)(v5 + 8);
        }
        v39 = (_QWORD *)(*(_QWORD *)v5 + 16 * v38);
        *v39 = v30;
        v39[1] = v32;
        ++*(_DWORD *)(v5 + 8);
      }
      v28 += 8;
      v29 -= 8;
    }
    while (v29);
    v28 = v53;
  }
  if (v28 != (char *)v55)
    free(v28);
  *a4 = 0;
  return MEMORY[0x24BD1B398](v50[0], 8);
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_7>(__n128 *a1, __n128 *a2)
{
  __n128 result;

  result = *a2;
  *a1 = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  a2->n128_u64[1] = 0;
  a2[1].n128_u64[0] = 0;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::DestroyImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_7>(uint64_t a1)
{
  return std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](a1 + 8);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_8>(uint64_t *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  void **v5;
  uint64_t v6;
  uint64_t *v7;
  int v8;
  std::mutex *v9;
  uint64_t v10;
  void **v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  void *v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t *v25;
  __int128 v26;
  unint64_t v27;
  BOOL v28;
  uint64_t *v29;
  unint64_t v30;
  char *v31;
  uint64_t v32;
  uint64_t v33;
  const void *v34[7];
  uint64_t v35;
  const void *v36[7];
  uint64_t v37;
  void *v38;
  __int128 v39;
  _QWORD v40[4];
  void *v41;
  __int128 v42;
  _BYTE v43[24];
  void *v44[2];
  _QWORD v45[8];

  v45[6] = *MEMORY[0x24BDAC8D0];
  v6 = *a1;
  v5 = (void **)a1[1];
  v7 = (uint64_t *)a1[2];
  v8 = *((unsigned __int8 *)a1 + 32);
  v9 = (std::mutex *)(*(_QWORD *)(*a1 + 72) + 320);
  std::mutex::lock(v9);
  v10 = *(_QWORD *)(v6 + 72);
  v44[0] = *v5;
  v37 = 0;
  v11 = v44;
  v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v10 + 384), v44, &v37);
  v13 = v37;
  if (!v12)
    v13 = *(_QWORD *)(v10 + 384) + 16 * *(unsigned int *)(v10 + 400);
  v32 = *(_QWORD *)(v13 + 8);
  std::mutex::unlock(v9);
  v44[0] = v45;
  v44[1] = (void *)0x200000000;
  if (v8)
  {
    v30 = atomic_load((unint64_t *)(*(_QWORD *)(v6 + 72) + 456));
    v11 = (void **)(v30 + 152);
  }
  v14 = *((unsigned int *)v7 + 2);
  if ((_DWORD)v14)
  {
    v15 = *v7;
    v16 = *((_DWORD *)v11 + 2);
    v17 = 16 * v14;
    v18 = v15 + 8;
    do
    {
      v19 = *(_QWORD *)(v18 - 8);
      v21 = *(_QWORD **)(v19 + 16);
      v20 = *(_QWORD *)(v19 + 24);
      v22 = (void *)((v20 & 0x1FFFFFFFFFFFFFFLL) + *v21);
      v37 = (*(_QWORD *)(*(_QWORD *)v18 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(*(_QWORD *)v18 + 16);
      v38 = v22;
      LOBYTE(v39) = (v20 >> 60) & 2 | ((v20 & 0x200000000000000) != 0);
      v23 = (uint64_t *)*v11;
      if (v16 >= *((_DWORD *)v11 + 3))
      {
        v27 = v16 + 1;
        v28 = &v23[3 * v16] > &v37;
        if (v23 <= &v37 && v28)
        {
          v31 = (char *)((char *)&v37 - (char *)v23);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, v11 + 2, v27, 24);
          v23 = (uint64_t *)*v11;
          v24 = (uint64_t *)&v31[(_QWORD)*v11];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v11, v11 + 2, v27, 24);
          v23 = (uint64_t *)*v11;
          v24 = &v37;
        }
      }
      else
      {
        v24 = &v37;
      }
      v25 = &v23[3 * *((unsigned int *)v11 + 2)];
      v26 = *(_OWORD *)v24;
      v25[2] = v24[2];
      *(_OWORD *)v25 = v26;
      v16 = *((_DWORD *)v11 + 2) + 1;
      *((_DWORD *)v11 + 2) = v16;
      v18 += 16;
      v17 -= 16;
    }
    while (v17);
  }
  if (!v8)
  {
    v29 = (uint64_t *)(a2 + 256);
    llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::ExecutorAddr,llvm::SmallVector<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>,2u>>((uint64_t)&v35, *(_QWORD *)(*(_QWORD *)(v6 + 72) + 176), &v32, (uint64_t *)v11);
    v37 = v35;
    v38 = v40;
    v39 = xmmword_24AA2ACE0;
    if (v36[1])
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v38, v36);
    llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSMachOExecutorSymbolFlags>>>,llvm::orc::ExecutorAddr,llvm::SmallVector<std::tuple<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr,llvm::orc::MachOPlatform::MachOExecutorSymbolFlags>,2u>>((uint64_t)&v33, *(_QWORD *)(*(_QWORD *)(v6 + 72) + 192), &v32, (uint64_t *)v11);
    v40[3] = v33;
    v41 = v43;
    v42 = xmmword_24AA2ACE0;
    if (v34[1])
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v41, v34);
    std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](v29, (uint64_t)&v37);
    if (v41 != v43)
      free(v41);
    if (v38 != v40)
      free(v38);
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v33);
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected(&v35);
  }
  *a3 = 0;
  if (v44[0] != v45)
    free(v44[0]);
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_8>(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  result = *(__n128 *)(a2 + 16);
  *(__n128 *)(a1 + 16) = result;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::DestroyImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_8>(uint64_t a1)
{
  return std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100](a1 + 16);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_9>(uint64_t *a1@<X0>, llvm::jitlink::Section *a2@<X1>, unint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  llvm::jitlink::Section *SectionByName;
  unint64_t *v7;
  llvm::jitlink::Section *v8;
  unint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD *v19;
  _OWORD *v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _OWORD *v29;
  _OWORD *v30;
  __int128 v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  char v35;
  unsigned int v36;
  uint64_t **v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  char *v41;
  uint64_t v42;
  char *v43;
  uint64_t *v44;
  std::mutex *v45;
  uint64_t v46;
  int v47;
  void *v48;
  int v49;
  unint64_t v50;
  int v51;
  char *v52;
  void **v54;
  void *v55[2];
  __int128 v56;
  _QWORD v57[4];
  _BYTE v58[32];
  char v59;
  void *v60;
  uint64_t v61;
  _BYTE v62[48];
  __int128 v63;
  __int128 v64;
  unsigned __int8 v65;
  _OWORD v66[2];
  _OWORD v67[3];
  void *v68;
  uint64_t v69;
  _BYTE v70[256];
  void *v71;
  uint64_t v72;
  _QWORD v73[6];
  char *v74;
  uint64_t v75;
  _QWORD v76[6];
  __int128 v77;
  __int128 v78;
  uint64_t v79;

  v79 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v52 = (char *)a1[1];
  v51 = *((unsigned __int8 *)a1 + 16);
  SectionByName = (llvm::jitlink::Section *)llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, llvm::orc::MachOThreadDataSectionName, *((uint64_t *)&llvm::orc::MachOThreadDataSectionName + 1), a3);
  v8 = (llvm::jitlink::Section *)llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, (uint64_t)llvm::orc::MachOThreadBSSSectionName, unk_25795D478, v7);
  if (v8)
  {
    if (SectionByName)
      llvm::jitlink::LinkGraph::mergeSections(a2, SectionByName, v8, 0);
    else
      SectionByName = v8;
  }
  v10 = 0;
  v68 = v70;
  v69 = 0x800000000;
  v67[0] = llvm::orc::MachODataDataSectionName;
  v67[1] = llvm::orc::MachODataCommonSectionName;
  v67[2] = llvm::orc::MachOEHFrameSectionName;
  do
  {
    v11 = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, *(_QWORD *)&v67[v10], *((_QWORD *)&v67[v10] + 1), v9);
    if (v11)
    {
      llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v60, v11);
      if (v60)
      {
        v12 = v61;
        if (v61)
          v12 = *(_QWORD *)(v61 + 32) + *(_QWORD *)v61;
        v13 = *(_QWORD *)v60;
        *(_OWORD *)v55 = v67[v10];
        *(_QWORD *)&v56 = v13;
        *((_QWORD *)&v56 + 1) = v12;
        v14 = (_OWORD *)llvm::SmallVectorTemplateCommon<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,true>>((uint64_t)&v68, (unint64_t)v55);
        v15 = (char *)v68 + 32 * v69;
        v16 = v14[1];
        *v15 = *v14;
        v15[1] = v16;
        LODWORD(v69) = v69 + 1;
      }
    }
    ++v10;
  }
  while (v10 != 3);
  if (SectionByName)
  {
    llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v60, (uint64_t)SectionByName);
    if (v60)
    {
      v17 = *(_QWORD *)v60;
      v18 = v61;
      if (v61)
        v18 = *(_QWORD *)(v61 + 32) + *(_QWORD *)v61;
      *(_OWORD *)v55 = llvm::orc::MachOThreadDataSectionName;
      *(_QWORD *)&v56 = v17;
      *((_QWORD *)&v56 + 1) = v18;
      v19 = (_OWORD *)llvm::SmallVectorTemplateCommon<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,true>>((uint64_t)&v68, (unint64_t)v55);
      v20 = (char *)v68 + 32 * v69;
      v21 = v19[1];
      *v20 = *v19;
      v20[1] = v21;
      LODWORD(v69) = v69 + 1;
    }
  }
  v22 = 0;
  v66[0] = llvm::orc::MachOModInitFuncSectionName;
  v23 = 1;
  v24 = (uint64_t *)v66;
  do
  {
    v25 = v22;
    v26 = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, *v24, v24[1], v9);
    if (v26)
    {
      llvm::jitlink::SectionRange::SectionRange((unint64_t **)&v60, v26);
      if (v60)
      {
        v27 = v61;
        if (v61)
          v27 = *(_QWORD *)(v61 + 32) + *(_QWORD *)v61;
        v28 = *(_QWORD *)v60;
        *(_OWORD *)v55 = *(_OWORD *)v24;
        *(_QWORD *)&v56 = v28;
        *((_QWORD *)&v56 + 1) = v27;
        v29 = (_OWORD *)llvm::SmallVectorTemplateCommon<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,true>>((uint64_t)&v68, (unint64_t)v55);
        v30 = (char *)v68 + 32 * v69;
        v31 = v29[1];
        *v30 = *v29;
        v30[1] = v31;
        LODWORD(v69) = v69 + 1;
      }
    }
    v24 = (uint64_t *)&v66[v23];
    v22 = 1;
    v23 = 2;
  }
  while ((v25 & 1) == 0);
  LOBYTE(v60) = 0;
  v65 = 0;
  v74 = (char *)v76;
  v75 = 0x300000000;
  v77 = 0u;
  v78 = 0u;
  v71 = v73;
  v72 = 0x600000000;
  v54 = &v71;
  v32 = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, llvm::orc::MachOEHFrameSectionName, *((uint64_t *)&llvm::orc::MachOEHFrameSectionName + 1), v9);
  if (v32)
    llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_0::operator()((unsigned int **)&v54, v32, (unint64_t *)&v77);
  v34 = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)a2, (uint64_t)llvm::orc::MachOCompactUnwindInfoSectionName, unk_25795D2F8, v33);
  if (v34)
    llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_0::operator()((unsigned int **)&v54, v34, (unint64_t *)&v78);
  v35 = v72;
  if ((_DWORD)v72)
  {
    std::__introsort<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **,false>((unint64_t **)v71, (unint64_t **)v71 + v72, 126 - 2 * __clz(v72), 1);
    v36 = v75;
    if ((_DWORD)v72)
    {
      v37 = (uint64_t **)v71;
      v38 = 8 * v72;
      do
      {
        v39 = *v37;
        v40 = **v37;
        if (v36 && (v41 = &v74[16 * v36], *((_QWORD *)v41 - 1) == v40))
        {
          *((_QWORD *)v41 - 1) = v39[4] + v40;
        }
        else
        {
          v42 = v39[4];
          if (v36 >= HIDWORD(v75))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v74, v76, v36 + 1, 16);
            v36 = v75;
          }
          v43 = &v74[16 * v36];
          *(_QWORD *)v43 = v40;
          *((_QWORD *)v43 + 1) = v42 + v40;
          v36 = v75 + 1;
          LODWORD(v75) = v75 + 1;
        }
        ++v37;
        v38 -= 8;
      }
      while (v38);
    }
    v55[0] = &v56;
    v55[1] = (void *)0x300000000;
    if (v36)
      llvm::SmallVectorImpl<llvm::orc::ExecutorAddrRange>::operator=((uint64_t)v55, (uint64_t)&v74);
    *(_OWORD *)v58 = v77;
    *(_OWORD *)&v58[16] = v78;
    v35 = 1;
  }
  else
  {
    LOBYTE(v55[0]) = 0;
  }
  v59 = v35;
  if (v71 != v73)
    free(v71);
  if (v74 != (char *)v76)
    free(v74);
  if (v59)
  {
    v74 = (char *)v76;
    v75 = 0x300000000;
    if (LODWORD(v55[1]))
      llvm::SmallVectorImpl<llvm::orc::ExecutorAddrRange>::operator=((uint64_t)&v74, (uint64_t)v55);
    v77 = *(_OWORD *)v58;
    v78 = *(_OWORD *)&v58[16];
    if (v65)
    {
      llvm::SmallVectorImpl<llvm::orc::ExecutorAddrRange>::operator=((uint64_t)&v60, (uint64_t)&v74);
      v63 = v77;
      v64 = v78;
    }
    else
    {
      v60 = v62;
      v61 = 0x300000000;
      if ((_DWORD)v75)
        llvm::SmallVectorImpl<llvm::orc::ExecutorAddrRange>::operator=((uint64_t)&v60, (uint64_t)&v74);
      v63 = v77;
      v64 = v78;
      v65 = 1;
    }
    if (v74 != (char *)v76)
      free(v74);
    if (v59 && v55[0] != &v56)
      free(v55[0]);
  }
  if ((_DWORD)v69 || v65)
  {
    if (v51)
    {
      v50 = atomic_load((unint64_t *)(*(_QWORD *)(v5 + 72) + 456));
      v44 = (uint64_t *)(v50 + 120);
    }
    else
    {
      v44 = (uint64_t *)((char *)a2 + 256);
    }
    v45 = (std::mutex *)(*(_QWORD *)(v5 + 72) + 320);
    std::mutex::lock(v45);
    v46 = *(_QWORD *)(v5 + 72);
    v74 = v52;
    v55[0] = 0;
    v47 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>((uint64_t *)(v46 + 384), &v74, v55);
    v48 = v55[0];
    if (!v47)
      v48 = (void *)(*(_QWORD *)(v46 + 384) + 16 * *(unsigned int *)(v46 + 400));
    v54 = (void **)*((_QWORD *)v48 + 1);
    std::mutex::unlock(v45);
    llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSOptional<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>>,llvm::orc::ExecutorAddr,std::optional<std::tuple<llvm::SmallVector<llvm::orc::ExecutorAddrRange,3u>,llvm::orc::ExecutorAddrRange,llvm::orc::ExecutorAddrRange>>,llvm::SmallVector<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,8u>>((uint64_t)&v74, *(_QWORD *)(*(_QWORD *)(v5 + 72) + 208), (size_t *)&v54, (uint64_t)&v60, (unsigned int *)&v68);
    v55[0] = v74;
    v55[1] = v57;
    v56 = xmmword_24AA2ACE0;
    if (v76[0])
      llvm::SmallVectorImpl<char>::operator=((uint64_t)&v55[1], (const void **)&v75);
    llvm::orc::shared::WrapperFunctionCall::Create<llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSOptional<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>,llvm::orc::shared::SPSSequence<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSSequence<char>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>>>,llvm::orc::ExecutorAddr,std::optional<std::tuple<llvm::SmallVector<llvm::orc::ExecutorAddrRange,3u>,llvm::orc::ExecutorAddrRange,llvm::orc::ExecutorAddrRange>>,llvm::SmallVector<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,8u>>((uint64_t)&v71, *(_QWORD *)(*(_QWORD *)(v5 + 72) + 224), (size_t *)&v54, (uint64_t)&v60, (unsigned int *)&v68);
    v57[3] = v71;
    *(_QWORD *)v58 = &v58[24];
    *(_OWORD *)&v58[8] = xmmword_24AA2ACE0;
    if (v73[0])
      llvm::SmallVectorImpl<char>::operator=((uint64_t)v58, (const void **)&v72);
    std::vector<llvm::orc::shared::AllocActionCallPair>::push_back[abi:nn180100](v44, (uint64_t)v55);
    if (*(_BYTE **)v58 != &v58[24])
      free(*(void **)v58);
    if (v55[1] != v57)
      free(v55[1]);
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)&v71);
    llvm::Expected<llvm::orc::shared::WrapperFunctionCall>::~Expected((uint64_t *)&v74);
    v49 = v65;
    *a4 = 0;
    if (v49 && v60 != v62)
      free(v60);
  }
  else
  {
    *a4 = 0;
  }
  if (v68 != v70)
    free(v68);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_10>(llvm::jitlink::LinkGraph *this@<X1>, _QWORD *a2@<X8>)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD **v11;
  _QWORD **v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15[3];
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[7];

  v21[6] = *MEMORY[0x24BDAC8D0];
  v19 = v21;
  v20 = 0x600000000;
  llvm::jitlink::LinkGraph::defined_symbols(this, v15);
  if (*(_QWORD *)&v15[0] != v17 || v16 != v18)
  {
    v5 = *v16;
    if (*v16)
    {
      v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)this + 208);
      v8 = *((_QWORD *)this + 26) + 8 * *((unsigned int *)this + 56);
      if ((_QWORD *)v8 != v6)
      {
        v9 = v6;
        v10 = v7;
        do
        {
          v11 = (_QWORD **)*v9;
          if (*(_QWORD *)(*v9 + 8) >= 8uLL && **v11 == 0x246E6F6974636573)
            llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v19, (uint64_t)v11);
          while (++v9 != v10)
          {
            if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
              goto LABEL_15;
          }
          v9 = v10;
LABEL_15:
          ;
        }
        while (v9 != (_QWORD *)v8);
      }
      if ((_DWORD)v20)
      {
        v12 = (_QWORD **)v19;
        v13 = 8 * v20;
        do
        {
          v14 = *v12++;
          llvm::jitlink::LinkGraph::makeDefined((uint64_t)this, v14, *(_QWORD *)(v5 + 16), 0, 0, 1, 2, 1);
          v13 -= 8;
        }
        while (v13);
      }
    }
  }
  if (v19 != v21)
    free(v19);
  *a2 = 0;
}

uint64_t llvm::jitlink::LinkGraph::makeDefined(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6, char a7, int a8)
{
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v20;
  _QWORD v21[3];

  if ((*(_BYTE *)(a2[2] + 8) & 2) != 0)
    v15 = a1 + 232;
  else
    v15 = a1 + 208;
  v21[0] = a2;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v15, v21);
  v16 = a2[3] & 0xE000000000000000 | a4 & 0x1FFFFFFFFFFFFFFLL | ((unint64_t)(a6 & 1) << 57) | ((unint64_t)(a7 & 3) << 58);
  v17 = 0x1000000000000000;
  if (!a8)
    v17 = 0;
  a2[2] = a3;
  a2[3] = v16 | v17;
  a2[4] = a5;
  v18 = *(_QWORD *)(a3 + 16) + 56;
  v20 = a2;
  return llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v18, &v20, (uint64_t)v21);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::modifyPassConfig(llvm::orc::MaterializationResponsibility &,llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::$_11>(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  std::mutex *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;

  v3 = *a1;
  v4 = (std::mutex *)atomic_load((unint64_t *)(*(_QWORD *)(*a1 + 72) + 456));
  std::mutex::lock(v4);
  v5 = atomic_load((unint64_t *)(*(_QWORD *)(v3 + 72) + 456));
  --*(_QWORD *)(v5 + 112);
  v6 = atomic_load((unint64_t *)(*(_QWORD *)(v3 + 72) + 456));
  if (!*(_QWORD *)(v6 + 112))
  {
    v7 = atomic_load((unint64_t *)(*(_QWORD *)(v3 + 72) + 456));
    std::condition_variable::notify_all((std::condition_variable *)(v7 + 64));
  }
  *a2 = 0;
  std::mutex::unlock(v4);
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          *v19 = *(_QWORD *)v13;
          v16 = *(_QWORD *)(v13 + 8);
          *((_DWORD *)v15 + 4) = *(_DWORD *)(v13 + 16);
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 24 * v17;
    do
    {
      *result = -4096;
      result += 3;
      v18 -= 24;
    }
    while (v18);
  }
  return result;
}

void llvm::detail::stream_operator_format_adapter<llvm::orc::ExecutorAddr>::~stream_operator_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

void llvm::detail::stream_operator_format_adapter<llvm::orc::ExecutorAddr>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  uint64_t v2;
  _QWORD v3[4];
  _QWORD v4[2];
  _QWORD *v5;

  v2 = *(_QWORD *)(a1 + 8);
  v3[0] = "{0:x}";
  v3[1] = 5;
  v3[2] = &v5;
  v3[3] = 1;
  v4[0] = &off_251C144A8;
  v4[1] = v2;
  v5 = v4;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)v3, a2);
}

unint64_t **std::__introsort<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **,false>(unint64_t **result, unint64_t **a2, uint64_t a3, char a4)
{
  unint64_t **v7;
  unint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t **v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t **v18;
  unint64_t **v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t **v23;
  unint64_t **v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t **v27;
  BOOL v28;
  unint64_t *v29;
  unint64_t **v30;
  unint64_t **v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t **v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t **v40;
  unint64_t **v41;
  unint64_t **v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t **v50;
  BOOL v52;
  uint64_t v53;
  unint64_t **v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t **v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t **v65;
  unint64_t *v66;
  unint64_t *v67;
  unint64_t v68;
  BOOL v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t **v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t **v82;
  unint64_t ***v83;
  unint64_t ***v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t **v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t **v93;
  unint64_t *v95;
  unint64_t *v96;
  unint64_t v97;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*v38 < **v8)
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*v43 < *v44)
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = **v42;
          if (v47 < **v41)
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < **v40)
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < **v8)
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 8;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *v55;
                if (*v55 < *v56)
                {
                  v58 = v53;
                  while (1)
                  {
                    *(unint64_t **)((char *)v8 + v58) = v56;
                    v59 = v58 - 8;
                    if (v58 == 8)
                      break;
                    v56 = *(unint64_t **)((char *)v8 + v58 - 16);
                    v58 -= 8;
                    if (v57 >= *v56)
                    {
                      v60 = (unint64_t **)((char *)v8 + v59);
                      goto LABEL_79;
                    }
                  }
                  v60 = v8;
LABEL_79:
                  *v60 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v96 = *v7;
              v95 = v7[1];
              v7 = v50;
              v97 = *v95;
              if (*v95 < *v96)
              {
                do
                {
                  *v50 = v96;
                  v96 = *(v50 - 2);
                  --v50;
                }
                while (v97 < *v96);
                *v50 = v95;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                v66 = *v65;
                if (2 * v63 + 2 >= (uint64_t)v10)
                {
                  v68 = *v66;
                }
                else
                {
                  v67 = v65[1];
                  v68 = *v66;
                  v69 = *v66 >= *v67;
                  if (*v66 <= *v67)
                    v68 = *v67;
                  if (*v66 < *v67)
                  {
                    v66 = v65[1];
                    ++v65;
                  }
                  if (!v69)
                    v64 = 2 * v63 + 2;
                }
                result = &v8[v63];
                v70 = *result;
                v71 = **result;
                if (v68 >= v71)
                {
                  do
                  {
                    v72 = v65;
                    *result = v66;
                    if (v61 < v64)
                      break;
                    v73 = (2 * v64) | 1;
                    v65 = &v8[v73];
                    v64 = 2 * v64 + 2;
                    v66 = *v65;
                    if (v64 >= (uint64_t)v10)
                    {
                      v75 = *v66;
                      v64 = v73;
                    }
                    else
                    {
                      v74 = v65[1];
                      v75 = *v66;
                      v76 = *v66 >= *v74;
                      if (*v66 <= *v74)
                        v75 = *v74;
                      if (*v66 < *v74)
                      {
                        v66 = v65[1];
                        ++v65;
                      }
                      if (v76)
                        v64 = v73;
                    }
                    result = v72;
                  }
                  while (v75 >= v71);
                  *v72 = v70;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v77 = (unint64_t)v9 >> 3;
            do
            {
              v78 = 0;
              v79 = *v8;
              v80 = v8;
              do
              {
                v81 = &v80[v78];
                v84 = (unint64_t ***)v81[1];
                v82 = (unint64_t **)(v81 + 1);
                v83 = v84;
                v85 = (2 * v78) | 1;
                v86 = 2 * v78 + 2;
                if (v86 < v77)
                {
                  result = *v83;
                  if ((unint64_t)*v83 < *v82[1])
                  {
                    v83 = (unint64_t ***)v82[1];
                    ++v82;
                    v85 = v86;
                  }
                }
                *v80 = v83;
                v80 = v82;
                v78 = v85;
              }
              while (v85 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              if (v82 == --a2)
              {
                *v82 = v79;
              }
              else
              {
                *v82 = *a2;
                *a2 = v79;
                v87 = (char *)v82 - (char *)v8 + 8;
                if (v87 >= 9)
                {
                  v88 = (((unint64_t)v87 >> 3) - 2) >> 1;
                  v89 = &v8[v88];
                  v90 = *v89;
                  v91 = *v82;
                  v92 = **v82;
                  if (**v89 < v92)
                  {
                    do
                    {
                      v93 = v89;
                      *v82 = v90;
                      if (!v88)
                        break;
                      v88 = (v88 - 1) >> 1;
                      v89 = &v8[v88];
                      v90 = *v89;
                      v82 = v93;
                    }
                    while (**v89 < v92);
                    *v93 = v91;
                  }
                }
              }
            }
            while (v77-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        v15 = **v7;
        if ((a4 & 1) == 0 && **(v7 - 1) >= v15)
        {
          if (v15 >= **(a2 - 1))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= **v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *v29);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *v32);
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *v35);
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *v36);
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*v17 < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*v21 >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*v20 >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*v25 < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*v26 >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_32:
          result = (unint64_t **)std::__introsort<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v7, v27);
        v8 = v27 + 1;
        result = (unint64_t **)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

unint64_t **std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(unint64_t **result, unint64_t **a2, unint64_t **a3)
{
  unint64_t *v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  unint64_t *v9;

  v3 = *a2;
  v4 = *result;
  v5 = **a2;
  v6 = **result;
  v7 = *a3;
  v8 = **a3;
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (**a2 < **result)
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (**a3 >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t **v8;
  unint64_t **v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t **v17;
  unint64_t **v18;
  unint64_t **v19;
  unint64_t **v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*v21 < *v22)
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = **v20;
        if (v25 < **v19)
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < **v18)
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < **a1)
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = **v9;
    if (v14 < **v8)
    {
      v15 = v11;
      while (1)
      {
        *(unint64_t **)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(unint64_t **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *v13)
        {
          v17 = (unint64_t **)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

unint64_t **std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(unint64_t **a1, unint64_t **a2, unint64_t **a3, unint64_t **a4)
{
  unint64_t **result;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t *v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a2, a3);
  v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::StringRef,llvm::orc::ExecutorAddrRange>,true>>(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 32 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 32);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, (void *)(a1 + 16), v5, 32);
    }
  }
  return v2;
}

uint64_t llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>,llvm::orc::shared::SPSTuple<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>>::serialize<llvm::orc::ExecutorAddrRange,llvm::orc::ExecutorAddrRange>(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;

  result = llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>::serialize<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr>(a1, a2, a2 + 1);
  if ((_DWORD)result)
    return llvm::orc::shared::SPSArgList<llvm::orc::shared::SPSExecutorAddr,llvm::orc::shared::SPSExecutorAddr>::serialize<llvm::orc::ExecutorAddr,llvm::orc::ExecutorAddr>(a1, a3, a3 + 1);
  return result;
}

void llvm::detail::UniqueFunctionBase<void,unsigned long>::CallImpl<llvm::orc::MachOPlatform::MachOPlatformPlugin::populateObjCRuntimeObject(llvm::jitlink::LinkGraph &,llvm::orc::MaterializationResponsibility &)::$_2>(uint64_t a1, int a2)
{
  llvm::jitlink::LinkGraph *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  const void **v11;
  llvm::jitlink::LinkGraph *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  const void ***v20;
  std::mutex *v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  BOOL v26;
  unsigned int v27;
  _QWORD *v28;
  const void *v29;
  size_t v30;
  _DWORD *v31;
  _DWORD *v32;
  unsigned int v33;
  unsigned int v34;
  _QWORD v35[8];
  _OWORD v36[3];
  __int128 v37;
  _OWORD v38[3];
  __int128 v39;
  uint64_t v40;
  uint64_t v41;

  v4 = *(llvm::jitlink::LinkGraph **)a1;
  v5 = *(_QWORD *)(a1 + 8);
  v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(*(_QWORD *)a1 + 208);
  v8 = *((_QWORD *)v4 + 26) + 8 * *((unsigned int *)v4 + 56);
  if ((_QWORD *)v8 == v6)
  {
LABEL_10:
    v12 = *(llvm::jitlink::LinkGraph **)a1;
    v13 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(*(_QWORD *)a1 + 232);
    v15 = *((_QWORD *)v12 + 29) + 8 * *((unsigned int *)v12 + 62);
    if ((_QWORD *)v15 == v13)
    {
LABEL_19:
      llvm::jitlink::LinkGraph::defined_symbols(*(llvm::jitlink::LinkGraph **)a1, v38);
      v36[0] = v38[0];
      v36[1] = v38[1];
      v36[2] = v38[2];
      v37 = v39;
      v18 = v40;
      v19 = v41;
      v20 = (const void ***)v39;
      if (*(_QWORD *)&v38[0] == v40 && (_QWORD)v39 == v41)
      {
LABEL_28:
        v11 = (const void **)llvm::jitlink::LinkGraph::addExternalSymbol(*(_QWORD *)a1, (uint64_t)"__llvm_jitlink_macho_objc_imageinfo", 35, 8, 0);
      }
      else
      {
        while (1)
        {
          v11 = *v20;
          if ((*v20)[1] == (const void *)35 && !memcmp(*v11, "__llvm_jitlink_macho_objc_imageinfo", 0x23uLL))
            break;
          llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v36, (uint64_t)v35);
          v20 = (const void ***)v37;
          if (*(_QWORD *)&v36[0] == v18 && (_QWORD)v37 == v19)
            goto LABEL_28;
        }
        v22 = (std::mutex *)(v5 + 8);
        std::mutex::lock((std::mutex *)(v5 + 8));
        v23 = **(_QWORD **)(a1 + 16);
        v35[0] = 0;
        v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(*(_QWORD *)(v5 + 80), *(_DWORD *)(v5 + 96), v23, v35);
        v25 = v35[0];
        if (v24)
          v26 = v35[0] == *(_QWORD *)(v5 + 80) + 24 * *(unsigned int *)(v5 + 96);
        else
          v26 = 1;
        if (v26)
        {
          std::mutex::unlock((std::mutex *)(v5 + 8));
        }
        else
        {
          *(_BYTE *)(v35[0] + 16) = 1;
          v27 = *(_DWORD *)(v25 + 12);
          std::mutex::unlock(v22);
          v28 = v11[2];
          v29 = (const void *)v28[3];
          if ((v28[1] & 4) != 0)
          {
            v32 = (_DWORD *)v28[3];
          }
          else
          {
            v30 = v28[4];
            v31 = (_DWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(_QWORD *)a1, v30, 0);
            v32 = v31;
            if (v30)
              memmove(v31, v29, v30);
            v28[3] = v32;
            v28[4] = v30;
            v28[1] |= 4uLL;
          }
          v33 = bswap32(v27);
          if ((*(_DWORD *)(*(_QWORD *)a1 + 172) - 1) >= 2)
            v34 = v33;
          else
            v34 = v27;
          v32[1] = v34;
        }
      }
    }
    else
    {
      v16 = v13;
      v17 = v14;
      while (1)
      {
        v11 = (const void **)*v16;
        if (*(_QWORD *)(*v16 + 8) == 35 && !memcmp(*v11, "__llvm_jitlink_macho_objc_imageinfo", 0x23uLL))
          break;
        while (++v16 != v17)
        {
          if ((*v16 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_18;
        }
        v16 = v17;
LABEL_18:
        if (v16 == (_QWORD *)v15)
          goto LABEL_19;
      }
    }
  }
  else
  {
    v9 = v6;
    v10 = v7;
    while (1)
    {
      v11 = (const void **)*v9;
      if (*(_QWORD *)(*v9 + 8) == 35 && !memcmp(*v11, "__llvm_jitlink_macho_objc_imageinfo", 0x23uLL))
        break;
      while (++v9 != v10)
      {
        if ((*v9 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_9;
      }
      v9 = v10;
LABEL_9:
      if (v9 == (_QWORD *)v8)
        goto LABEL_10;
    }
  }
  llvm::jitlink::Block::addEdge(*(_QWORD **)(a1 + 24), 2, a2 + 32, (uint64_t)v11, -**(_QWORD **)(a1 + 24));
}

_QWORD *llvm::jitlink::LinkGraph::addExternalSymbol(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v16;
  char v17[31];

  v10 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 16, 3);
  v11 = v10[1] & 0xFFFFFFFFFFFFFFFCLL;
  *v10 = 0;
  v10[1] = v11;
  v12 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, 40, 3);
  v13 = v12;
  *v12 = a2;
  v12[1] = a3;
  v14 = 0x4000000000000000;
  if (!a5)
    v14 = 0;
  v12[2] = v10;
  v12[3] = v14;
  v12[4] = a4;
  v16 = v12;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(a1 + 208, &v16, (uint64_t)v17);
  return v13;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X2>, unint64_t *a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t result;
  _QWORD *v10;
  char v11;
  uint64_t v12;
  _QWORD *v13;

  v13 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)a2, &v13, a4);
  v10 = v13;
  if ((result & 1) != 0)
  {
    v11 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::StringRef>(a1, (uint64_t)a2, (uint64_t)a2, v13);
    v10 = (_QWORD *)result;
    *(_OWORD *)result = *a2;
    *(_QWORD *)(result + 16) = *a3;
    v11 = 1;
  }
  v12 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a5 = v10;
  *(_QWORD *)(a5 + 8) = v12;
  *(_BYTE *)(a5 + 16) = v11;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  unint64_t *v9;
  _QWORD *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::moveFromOldBuckets(a1, v4, v4 + 24 * v3, v10);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = 24 * v11;
    do
    {
      *result = xmmword_24AA2AC20;
      result = (_OWORD *)((char *)result + 24);
      v12 -= 24;
    }
    while (v12);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;

  v6 = result;
  *(_QWORD *)(result + 8) = 0;
  v7 = *(unsigned int *)(result + 16);
  if ((_DWORD)v7)
  {
    v8 = *(_OWORD **)result;
    v9 = 24 * v7;
    do
    {
      *v8 = xmmword_24AA2AC20;
      v8 = (_OWORD *)((char *)v8 + 24);
      v9 -= 24;
    }
    while (v9);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v6, a2, &v11, a4);
      v10 = v11;
      *v11 = *(_OWORD *)a2;
      *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
      ++*(_DWORD *)(v6 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)13>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15130;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)13>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15130;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)13>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

unint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)13>::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int8x16_t v7;
  int8x8_t v8;
  int8x16_t v9;
  int8x8_t v10;
  unsigned int v11;
  int8x16_t v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  uint64_t v16;

  v7 = *(int8x16_t *)(a1 + 8);
  v8 = *(int8x8_t *)(a1 + 24);
  v9 = vrev32q_s8(v7);
  v10 = vrev32_s8(v8);
  if (a5)
    v11 = -1;
  else
    v11 = 0;
  v12 = (int8x16_t)vdupq_n_s32(v11);
  v13 = a2 + a4;
  *(int8x16_t *)v13 = vbslq_s8(v12, v9, v7);
  *(int8x8_t *)(v13 + 16) = vbsl_s8(*(int8x8_t *)v12.i8, v10, v8);
  v14 = (char *)(a2 + a4 + 24);
  v15 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v15 = *(const char **)v15;
  strcpy(v14, v15);
  if (*(char *)(a1 + 55) < 0)
    v16 = *(_QWORD *)(a1 + 40);
  else
    v16 = *(unsigned __int8 *)(a1 + 55);
  return a4 + (v16 & 0xFFFFFFFFFFFFFFFCLL) + 28;
}

void llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)50>::~MachOBuilderLoadCommand()
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)50>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)50>::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int8x16_t v5;
  int8x8_t v6;
  int8x16_t v7;
  int8x8_t v8;
  unsigned int v9;
  int8x16_t v10;
  uint64_t v11;

  v5 = *(int8x16_t *)(a1 + 8);
  v6 = *(int8x8_t *)(a1 + 24);
  v7 = vrev32q_s8(v5);
  v8 = vrev32_s8(v6);
  if (a5)
    v9 = -1;
  else
    v9 = 0;
  v10 = (int8x16_t)vdupq_n_s32(v9);
  v11 = a2 + a4;
  *(int8x16_t *)v11 = vbslq_s8(v10, v7, v5);
  *(int8x8_t *)(v11 + 16) = vbsl_s8(*(int8x8_t *)v10.i8, v8, v6);
  return a4 + 24;
}

uint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)12>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15190;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  return a1;
}

void llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)12>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15190;
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)12>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

unint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)12>::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int8x16_t v7;
  int8x8_t v8;
  int8x16_t v9;
  int8x8_t v10;
  unsigned int v11;
  int8x16_t v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  uint64_t v16;

  v7 = *(int8x16_t *)(a1 + 8);
  v8 = *(int8x8_t *)(a1 + 24);
  v9 = vrev32q_s8(v7);
  v10 = vrev32_s8(v8);
  if (a5)
    v11 = -1;
  else
    v11 = 0;
  v12 = (int8x16_t)vdupq_n_s32(v11);
  v13 = a2 + a4;
  *(int8x16_t *)v13 = vbslq_s8(v12, v9, v7);
  *(int8x8_t *)(v13 + 16) = vbsl_s8(*(int8x8_t *)v12.i8, v10, v8);
  v14 = (char *)(a2 + a4 + 24);
  v15 = (const char *)(a1 + 32);
  if (*(char *)(a1 + 55) < 0)
    v15 = *(const char **)v15;
  strcpy(v14, v15);
  if (*(char *)(a1 + 55) < 0)
    v16 = *(_QWORD *)(a1 + 40);
  else
    v16 = *(unsigned __int8 *)(a1 + 55);
  return a4 + (v16 & 0xFFFFFFFFFFFFFFFCLL) + 28;
}

uint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)2147483676>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C151C0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  return a1;
}

void llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)2147483676>::~MachOBuilderLoadCommand(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C151C0;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::orc::MachOBuilderLoadCommandImplBase<(llvm::MachO::LoadCommandType)2147483676>::size(uint64_t a1)
{
  return *(unsigned int *)(a1 + 12);
}

unint64_t llvm::orc::MachOBuilderLoadCommand<(llvm::MachO::LoadCommandType)2147483676>::write(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  const char *v15;
  uint64_t v16;

  LODWORD(v8) = *(_DWORD *)(a1 + 8);
  LODWORD(v7) = *(_DWORD *)(a1 + 12);
  v9 = *(_DWORD *)(a1 + 16);
  v10 = bswap32(v8);
  v11 = bswap32(v7);
  v12 = bswap32(v9);
  if (a5)
    v7 = v11;
  else
    v7 = v7;
  if (a5)
    v8 = v10;
  else
    v8 = v8;
  if (a5)
    v9 = v12;
  v13 = a2 + a4;
  *(_QWORD *)v13 = v8 | (v7 << 32);
  *(_DWORD *)(v13 + 8) = v9;
  v14 = (char *)(a2 + a4 + 12);
  v15 = (const char *)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    v15 = *(const char **)v15;
  strcpy(v14, v15);
  if (*(char *)(a1 + 47) < 0)
    v16 = *(_QWORD *)(a1 + 32);
  else
    v16 = *(unsigned __int8 *)(a1 + 47);
  return a4 + (v16 & 0xFFFFFFFFFFFFFFFCLL) + 16;
}

double _GLOBAL__sub_I_MachOPlatform_cpp()
{
  double result;

  result = *(double *)&llvm::orc::MachOObjCCatListSectionName;
  xmmword_25795E378 = llvm::orc::MachOObjCCatList2SectionName;
  unk_25795E388 = llvm::orc::MachOObjCClassListSectionName;
  xmmword_25795E398 = llvm::orc::MachOObjCClassRefsSectionName;
  unk_25795E3A8 = llvm::orc::MachOObjCConstSectionName;
  xmmword_25795E3B8 = llvm::orc::MachOObjCDataSectionName;
  unk_25795E3C8 = llvm::orc::MachOObjCProtoListSectionName;
  xmmword_25795E3D8 = llvm::orc::MachOObjCProtoRefsSectionName;
  unk_25795E3E8 = llvm::orc::MachOObjCNLCatListSectionName;
  xmmword_25795E3F8 = llvm::orc::MachOObjCNLClassListSectionName;
  unk_25795E408 = llvm::orc::MachOObjCSelRefsSectionName;
  _MergedGlobals_2 = llvm::orc::MachOObjCClassNameSectionName;
  unk_25795E2E8 = llvm::orc::MachOObjCMethNameSectionName;
  xmmword_25795E2F8 = llvm::orc::MachOObjCMethTypeSectionName;
  unk_25795E308 = llvm::orc::MachOSwift5TypesSectionName;
  xmmword_25795E318 = llvm::orc::MachOSwift5TypeRefSectionName;
  unk_25795E328 = llvm::orc::MachOSwift5FieldMetadataSectionName;
  xmmword_25795E338 = llvm::orc::MachOSwift5EntrySectionName;
  unk_25795E348 = llvm::orc::MachOSwift5ProtoSectionName;
  xmmword_25795E358 = llvm::orc::MachOSwift5ProtosSectionName;
  *(_OWORD *)&qword_25795E368 = llvm::orc::MachOObjCCatListSectionName;
  return result;
}

void llvm::orc::ObjectLinkingLayer::~ObjectLinkingLayer(llvm::orc::ObjectLinkingLayer *this)
{
  llvm::orc::ObjectLinkingLayer *v2;
  uint64_t v3;
  uint64_t v4;
  void **v5;

  *(_QWORD *)this = &off_251C15220;
  *((_QWORD *)this + 2) = &unk_251C15278;
  llvm::orc::ExecutionSession::deregisterResourceManager(*((_QWORD *)this + 1), (uint64_t)this + 16);
  v5 = (void **)((char *)this + 168);
  std::vector<std::unique_ptr<llvm::ErrorInfoBase>>::__destroy_vector::operator()[abi:nn180100](&v5);
  llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::destroyAll((unsigned int *)this + 36);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 18), 8);
  v2 = (llvm::orc::ObjectLinkingLayer *)*((_QWORD *)this + 17);
  if (v2 == (llvm::orc::ObjectLinkingLayer *)((char *)this + 112))
  {
    v3 = 4;
    v2 = (llvm::orc::ObjectLinkingLayer *)((char *)this + 112);
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v2 + 8 * v3))();
LABEL_6:
  v4 = *((_QWORD *)this + 12);
  *((_QWORD *)this + 12) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  std::mutex::~mutex((std::mutex *)((char *)this + 24));
}

{
  llvm::orc::ObjectLinkingLayer::~ObjectLinkingLayer(this);
  JUMPOUT(0x24BD1B3A4);
}

void `non-virtual thunk to'llvm::orc::ObjectLinkingLayer::~ObjectLinkingLayer(llvm::orc::ObjectLinkingLayer *this)
{
  llvm::orc::ObjectLinkingLayer::~ObjectLinkingLayer((llvm::orc::ObjectLinkingLayer *)((char *)this - 16));
}

{
  llvm::orc::ObjectLinkingLayer::~ObjectLinkingLayer((llvm::orc::ObjectLinkingLayer *)((char *)this - 16));
  JUMPOUT(0x24BD1B3A4);
}

void llvm::orc::ObjectLinkingLayer::add(uint64_t a1@<X0>, unsigned int **a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  __int16 v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t ***v22;
  uint64_t ***v23;
  uint64_t v24;
  uint64_t ***v25;
  uint64_t ***v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  __int16 v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  unsigned int *v46;
  llvm::orc::JITDylib *v47;
  std::recursive_mutex *v48;
  uint64_t v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  const char *v54;
  size_t v55;
  unint64_t v56;
  uint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  unint64_t *v66[8];
  void *__p[2];
  __int128 v68;
  __int128 v69;
  __int128 v70;
  __int128 v71;
  __int128 v72;
  __int128 v73;
  __int128 v74;
  void **v75;
  uint64_t v76;

  v7 = atomic_load((unint64_t *)*a2 + 1);
  v61 = v7;
  v62 = 0;
  v8 = *a3;
  *a3 = 0;
  v9 = *(_QWORD *)(a1 + 8);
  v63 = 0;
  v64 = 0;
  v65 = 0;
  llvm::jitlink::LinkGraph::defined_symbols((llvm::jitlink::LinkGraph *)v8, &v71);
  *(_OWORD *)__p = v71;
  v68 = v72;
  v69 = v73;
  v70 = v74;
  v10 = v75;
  v11 = v76;
  v12 = (uint64_t *)v74;
  if ((void **)v71 != v75 || (_QWORD)v74 != v76)
  {
    do
    {
      v13 = *v12;
      v14 = *(_QWORD *)(v13 + 24);
      v15 = v14 & 0xC00000000000000;
      if ((v14 & 0xC00000000000000) != 0x800000000000000)
      {
        v16 = HIBYTE(v14);
        if (v15)
          LOWORD(v17) = v16 & 2;
        else
          v17 = v16 & 2 | 0x10;
        v18 = ((unsigned __int16)v17 | v16 & 0x20) << 8;
        llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v9 + 72), *(uint64_t **)v13, *(_QWORD *)(v13 + 8), v66);
        *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v62, v66)+ 4) = v18;
        if ((unint64_t)v66[0] - 1 <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v19 = v66[0] + 1;
          do
            v20 = __ldaxr(v19);
          while (__stlxr(v20 - 1, v19));
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)__p, (uint64_t)v66);
      v12 = (uint64_t *)v70;
    }
    while (__p[0] != v10 || (_QWORD)v70 != v11);
  }
  v22 = (uint64_t ***)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 232);
  v24 = *(_QWORD *)(v8 + 232) + 8 * *(unsigned int *)(v8 + 248);
  if ((uint64_t ***)v24 != v22)
  {
    v25 = v22;
    v26 = v23;
    do
    {
      v27 = (unint64_t)(*v25)[3];
      v28 = v27 & 0xC00000000000000;
      if ((v27 & 0xC00000000000000) != 0x800000000000000)
      {
        v29 = HIBYTE(v27);
        if (v28)
          LOWORD(v30) = v29 & 2;
        else
          v30 = v29 & 2 | 0x10;
        v31 = ((unsigned __int16)v30 | v29 & 0x20) << 8;
        llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v9 + 72), **v25, (unint64_t)(*v25)[1], (unint64_t **)&v71);
        *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v62, &v71)+ 4) = v31;
        if ((unint64_t)(v71 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v32 = (unint64_t *)(v71 + 8);
          do
            v33 = __ldaxr(v32);
          while (__stlxr(v33 - 1, v32));
        }
      }
      while (++v25 != v26)
      {
        if (((unint64_t)*v25 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_28;
      }
      v25 = v26;
LABEL_28:
      ;
    }
    while (v25 != (uint64_t ***)v24);
  }
  v34 = *(_DWORD *)(v8 + 164);
  v35 = v34 == 5 || v34 == 3;
  if (v35 && *(_DWORD *)(v8 + 192))
  {
    v36 = *(unsigned int *)(v8 + 200);
    if ((_DWORD)v36)
    {
      v37 = 24 * v36;
      v38 = *(_QWORD **)(v8 + 184);
      while (*v38 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v38 += 3;
        v37 -= 24;
        if (!v37)
          goto LABEL_39;
      }
    }
    else
    {
      v38 = *(_QWORD **)(v8 + 184);
    }
    v51 = *(_QWORD *)(v8 + 184) + 24 * v36;
LABEL_60:
    if (v38 != (_QWORD *)v51)
    {
      v52 = v38[2];
      if (v34 == 3)
      {
        if (!llvm::orc::isELFInitializerSection(*(_QWORD *)v52, *(_QWORD *)(v52 + 8)))
          goto LABEL_66;
        goto LABEL_69;
      }
      if (v34 == 5 && (llvm::orc::isMachOInitializerSection(*(void **)v52, *(_QWORD *)(v52 + 8)) & 1) != 0)
      {
LABEL_69:
        __p[0] = 0;
        __p[1] = 0;
        *(_QWORD *)&v68 = 0;
        DWORD2(v71) = 0;
        BYTE8(v73) = 0;
        *(_QWORD *)&v74 = 0;
        DWORD2(v74) = 1;
        *(_QWORD *)&v73 = 0;
        v72 = 0uLL;
        *(_QWORD *)&v71 = &off_251C13AC0;
        v75 = __p;
        llvm::raw_ostream::SetUnbuffered(&v71);
        if (*((_QWORD *)&v72 + 1) - (_QWORD)v73 > 1uLL)
        {
          *(_WORD *)v73 = 11812;
          *(_QWORD *)&v73 = v73 + 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v71, "$.", 2uLL);
        }
        v53 = *(char *)(v8 + 119);
        if (v53 >= 0)
          v54 = (const char *)(v8 + 96);
        else
          v54 = *(const char **)(v8 + 96);
        if (v53 >= 0)
          v55 = *(unsigned __int8 *)(v8 + 119);
        else
          v55 = *(_QWORD *)(v8 + 104);
        llvm::raw_ostream::write((llvm::raw_ostream *)&v71, v54, v55);
        if (*((_QWORD *)&v72 + 1) - (_QWORD)v73 > 7uLL)
        {
          *(_QWORD *)v73 = 0x7374696E695F5F2ELL;
          *(_QWORD *)&v73 = v73 + 8;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v71, ".__inits", 8uLL);
        }
        do
        write_unsigned<unsigned long>((llvm::raw_ostream *)&v71, v56, 0, 0, 0);
        *(_QWORD *)&v71 = off_251C13948;
        if (DWORD2(v74) == 1 && (_QWORD)v72)
          MEMORY[0x24BD1B380](v72, 0x1000C8077774924);
        if ((SBYTE7(v68) & 0x80u) == 0)
          v57 = (uint64_t *)__p;
        else
          v57 = (uint64_t *)__p[0];
        if ((SBYTE7(v68) & 0x80u) == 0)
          v58 = BYTE7(v68);
        else
          v58 = (unint64_t)__p[1];
        llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v9 + 72), v57, v58, (unint64_t **)&v71);
        if (SBYTE7(v68) < 0)
          operator delete(__p[0]);
        if ((unint64_t)(v65 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v59 = (unint64_t *)(v65 + 8);
          do
            v60 = __ldaxr(v59);
          while (__stlxr(v60 - 1, v59));
        }
        v65 = v71;
        goto LABEL_39;
      }
LABEL_66:
      while (1)
      {
        v38 += 3;
        if (v38 == (_QWORD *)v51)
          break;
        if (*v38 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_60;
      }
    }
  }
LABEL_39:
  v39 = operator new();
  v40 = v62;
  v62 = 0;
  v41 = v64;
  v64 = 0;
  v42 = v65;
  v65 = 0;
  *((_QWORD *)&v68 + 1) = 0;
  __p[0] = 0;
  __p[1] = 0;
  LODWORD(v68) = 0;
  *(_QWORD *)(v39 + 8) = v40;
  *(_QWORD *)&v71 = 0;
  v43 = v63;
  v63 = 0;
  *(_QWORD *)(v39 + 16) = v43;
  *((_QWORD *)&v71 + 1) = 0;
  *(_DWORD *)(v39 + 24) = v41;
  LODWORD(v72) = 0;
  *(_QWORD *)(v39 + 32) = v42;
  *((_QWORD *)&v72 + 1) = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v71);
  *(_QWORD *)v39 = &off_251C152A8;
  *(_QWORD *)(v39 + 40) = a1;
  *(_QWORD *)(v39 + 48) = v8;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)__p);
  if ((unint64_t)(v65 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v44 = (unint64_t *)(v65 + 8);
    do
      v45 = __ldaxr(v44);
    while (__stlxr(v45 - 1, v44));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v62);
  v46 = *a2;
  *a2 = 0;
  if (*(_DWORD *)(v39 + 16))
  {
    v47 = (llvm::orc::JITDylib *)(v61 & 0xFFFFFFFFFFFFFFFELL);
    v48 = *(std::recursive_mutex **)((v61 & 0xFFFFFFFFFFFFFFFELL) + 32);
    std::recursive_mutex::lock(v48);
    llvm::orc::JITDylib::defineImpl((llvm::orc::JITDylib *)(v61 & 0xFFFFFFFFFFFFFFFELL), (llvm::orc::MaterializationUnit *)v39, a4);
    if (!*a4)
    {
      if (!v46)
      {
        llvm::orc::JITDylib::getDefaultResourceTracker(v47, (unsigned int **)&v71);
        v46 = (unsigned int *)v71;
        *(_QWORD *)&v71 = 0;
      }
      v49 = *(_QWORD *)(*((_QWORD *)v47 + 4) + 80);
      if (!v49
        || ((*(void (**)(uint64_t, unsigned int *, uint64_t))(*(_QWORD *)v49 + 32))(v49, v46, v39), !*a4))
      {
        __p[0] = (void *)v39;
        llvm::orc::JITDylib::installMaterializationUnit((uint64_t)v47, (std::__shared_weak_count_vtbl **)__p, (uint64_t)v46);
        v50 = __p[0];
        __p[0] = 0;
        if (v50)
          (*(void (**)(void *))(*(_QWORD *)v50 + 8))(v50);
        v39 = 0;
        *a4 = 0;
      }
    }
    std::recursive_mutex::unlock(v48);
    if (v46)
      goto LABEL_52;
  }
  else
  {
    *a4 = 0;
    if (v46)
LABEL_52:
      llvm::ThreadSafeRefCountedBase<llvm::orc::ResourceTracker>::Release(v46);
  }
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
}

uint64_t llvm::orc::ObjectLinkingLayer::emit(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::jitlink::LinkGraph *v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::jitlink::LinkGraph *v20;
  _QWORD v21[4];
  llvm::jitlink::LinkGraph *v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(*a3 + 8);
  v7 = *(_QWORD *)(*a3 + 16) - v6;
  v8 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a3 + 16))(*a3);
  v10 = v9;
  v11 = operator new();
  v12 = *a2;
  *a2 = 0;
  v13 = *a3;
  *a3 = 0;
  v14 = *v12 + 8;
  *(_QWORD *)v11 = &off_251C152E8;
  *(_QWORD *)(v11 + 8) = v14;
  *(_QWORD *)(v11 + 16) = a1;
  *(_QWORD *)(v11 + 24) = v12;
  *(_DWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 32) = v13;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_DWORD *)(v11 + 80) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  *(_DWORD *)(v11 + 104) = 0;
  *(_QWORD *)(v11 + 88) = 0;
  *(_QWORD *)(v11 + 96) = 0;
  *(_QWORD *)(v11 + 120) = 0;
  *(_QWORD *)(v11 + 128) = 0;
  *(_QWORD *)(v11 + 112) = 0;
  v21[0] = v6;
  v21[1] = v7;
  v21[2] = v8;
  v21[3] = v10;
  llvm::jitlink::createLinkGraphFromObject((uint64_t)v21, (uint64_t)&v22);
  if ((v23 & 1) != 0)
  {
    v17 = (uint64_t)v22;
    v22 = 0;
    v18 = v17;
    llvm::orc::ObjectLinkingLayerJITLinkContext::notifyFailed(v11, &v18);
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    llvm::Expected<std::unique_ptr<llvm::jitlink::LinkGraph>>::~Expected((uint64_t)&v22);
    llvm::orc::ObjectLinkingLayerJITLinkContext::~ObjectLinkingLayerJITLinkContext((llvm::orc::ObjectLinkingLayerJITLinkContext *)v11);
    return MEMORY[0x24BD1B3A4]();
  }
  else
  {
    llvm::orc::ObjectLinkingLayerJITLinkContext::notifyMaterializing(v11, (uint64_t)v22);
    v15 = v22;
    v22 = 0;
    v19 = v11;
    v20 = v15;
    llvm::jitlink::link(&v20, &v19);
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
    if (v20)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v20);
      MEMORY[0x24BD1B3A4]();
    }
    return llvm::Expected<std::unique_ptr<llvm::jitlink::LinkGraph>>::~Expected((uint64_t)&v22);
  }
}

uint64_t llvm::orc::ObjectLinkingLayerJITLinkContext::notifyMaterializing(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;

  v2 = *(_QWORD *)(result + 16);
  v3 = *(uint64_t **)(v2 + 168);
  v4 = *(uint64_t **)(v2 + 176);
  if (v3 != v4)
  {
    v6 = result;
    do
    {
      v7 = *v3;
      v9 = *(_QWORD *)(v6 + 24);
      v8 = *(_QWORD **)(v6 + 32);
      if (v8)
      {
        v10 = v8[1];
        v11 = v8[2] - v10;
        v12 = (*(uint64_t (**)(_QWORD *))(*v8 + 16))(v8);
        *(_QWORD *)&v14 = v10;
        *((_QWORD *)&v14 + 1) = v11;
        *(_QWORD *)&v15 = v12;
        *((_QWORD *)&v15 + 1) = v13;
      }
      else
      {
        v14 = 0u;
        v15 = 0u;
      }
      result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int128 *))(*(_QWORD *)v7 + 24))(v7, v9, a2, v6, &v14);
      ++v3;
    }
    while (v3 != v4);
  }
  return result;
}

void llvm::orc::ObjectLinkingLayerJITLinkContext::notifyFailed(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_QWORD **)(a1 + 16);
  v5 = (_QWORD *)v4[21];
  v6 = (_QWORD *)v4[22];
  if (v5 != v6)
  {
    do
    {
      v7 = *a2;
      *a2 = 0;
      (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)*v5 + 48))(&v11, *v5, *(_QWORD *)(a1 + 24));
      v13 = v11;
      v14 = v7;
      v11 = 0;
      llvm::ErrorList::join(&v14, &v13, &v12);
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      if (v14)
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
      v8 = v11;
      *a2 = v12;
      v12 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      ++v5;
    }
    while (v5 != v6);
    v4 = *(_QWORD **)(a1 + 16);
  }
  v9 = v4[1];
  v10 = *a2;
  *a2 = 0;
  llvm::orc::ExecutionSession::reportError(v9, &v10);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  llvm::orc::ExecutionSession::OL_notifyFailed(*(_QWORD *)(**(_QWORD **)(a1 + 24) + 32), *(_QWORD *)(a1 + 24));
}

llvm::jitlink::LinkGraph *llvm::orc::ObjectLinkingLayer::emit(uint64_t a1, _QWORD **a2, uint64_t *a3)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  llvm::jitlink::LinkGraph *v9;
  llvm::jitlink::LinkGraph *result;
  uint64_t v11;
  llvm::jitlink::LinkGraph *v12;

  v6 = operator new();
  v7 = *a2;
  *a2 = 0;
  v8 = *v7 + 8;
  *(_QWORD *)v6 = &off_251C152E8;
  *(_QWORD *)(v6 + 8) = v8;
  *(_QWORD *)(v6 + 16) = a1;
  *(_QWORD *)(v6 + 24) = v7;
  *(_DWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 64) = 0;
  *(_QWORD *)(v6 + 72) = 0;
  *(_DWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 88) = 0;
  *(_QWORD *)(v6 + 96) = 0;
  *(_QWORD *)(v6 + 120) = 0;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_DWORD *)(v6 + 56) = 0;
  *(_QWORD *)(v6 + 40) = 0;
  *(_QWORD *)(v6 + 48) = 0;
  *(_QWORD *)(v6 + 32) = 0;
  llvm::orc::ObjectLinkingLayerJITLinkContext::notifyMaterializing(v6, *a3);
  v9 = (llvm::jitlink::LinkGraph *)*a3;
  *a3 = 0;
  v11 = v6;
  v12 = v9;
  llvm::jitlink::link(&v12, &v11);
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  result = v12;
  if (v12)
  {
    llvm::jitlink::LinkGraph::~LinkGraph(v12);
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

void llvm::jitlink::JITLinkMemoryManager::deallocate(_QWORD *a1, uint64_t a2, uint64_t *a3)
{
  _QWORD *v6;
  uint64_t v7;
  void *__p[3];

  v6 = operator new(8uLL);
  v7 = *a3;
  __p[0] = v6;
  *v6 = v7;
  *a3 = -1;
  __p[1] = v6 + 1;
  __p[2] = v6 + 1;
  llvm::jitlink::JITLinkMemoryManager::deallocate(a1, a2, (uint64_t)__p);
  if (__p[0])
    operator delete(__p[0]);
}

void llvm::orc::ObjectLinkingLayer::handleRemoveResources(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;
  std::recursive_mutex *v12;
  int v13;
  _QWORD *v14;
  BOOL v15;
  void *v16;
  uint64_t v17;
  void *v18;
  __int128 v19;
  void *v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  *a4 = 0;
  v7 = *(_QWORD **)(a1 + 168);
  v8 = *(_QWORD **)(a1 + 176);
  if (v7 == v8)
    goto LABEL_11;
  v10 = 0;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t))(*(_QWORD *)*v7 + 56))(&v22, *v7, a2, a3);
    v24 = v22;
    v25 = v10;
    v22 = 0;
    llvm::ErrorList::join(&v25, &v24, &v23);
    if (v24)
      (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    if (v25)
      (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
    v11 = v22;
    v10 = v23;
    *a4 = v23;
    v23 = 0;
    if (v11)
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
    ++v7;
  }
  while (v7 != v8);
  if (!v10)
  {
LABEL_11:
    v12 = *(std::recursive_mutex **)(a1 + 8);
    std::recursive_mutex::lock(v12);
    v25 = 0;
    v13 = llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(_QWORD *)(a1 + 144), *(_DWORD *)(a1 + 160), a3, &v25);
    v14 = (_QWORD *)v25;
    if (v13)
      v15 = v25 == *(_QWORD *)(a1 + 144) + 32 * *(unsigned int *)(a1 + 160);
    else
      v15 = 1;
    if (v15)
    {
      std::recursive_mutex::unlock(v12);
      *a4 = 0;
      return;
    }
    v16 = *(void **)(v25 + 8);
    v19 = *(_OWORD *)(v25 + 16);
    *(_QWORD *)(v25 + 16) = 0;
    v14[3] = 0;
    *v14 = -2;
    v14[1] = 0;
    *(int32x2_t *)(a1 + 152) = vadd_s32(*(int32x2_t *)(a1 + 152), (int32x2_t)0x1FFFFFFFFLL);
    std::recursive_mutex::unlock(v12);
    if (v16 == (void *)v19)
    {
      *a4 = 0;
      if (!v16)
        return;
      v18 = v16;
    }
    else
    {
      v17 = *(_QWORD *)(a1 + 88);
      v20 = v16;
      v21 = v19;
      llvm::jitlink::JITLinkMemoryManager::deallocate(a4, v17, (uint64_t)&v20);
      v18 = v20;
      if (!v20)
        return;
    }
    operator delete(v18);
  }
}

uint64_t *llvm::jitlink::JITLinkMemoryManager::deallocate(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  std::__assoc_sub_state_vtbl *v10;
  void *__p[2];
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 16) = 0;
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_251C10F50;
  v13 = v6;
  std::__assoc_sub_state::__attach_future[abi:nn180100](v6);
  *(_OWORD *)__p = *(_OWORD *)a3;
  v12 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v14[0] = &v13;
  v14[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<llvm::jitlink::JITLinkMemoryManager::deallocate(std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)::{lambda(llvm::Error)#1},llvm::jitlink::JITLinkMemoryManager::deallocate(std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)::{lambda(llvm::Error)#1},void>::Callbacks
         + 2;
  (*(void (**)(uint64_t, void **, _QWORD *))(*(_QWORD *)a2 + 24))(a2, __p, v14);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v14);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  std::__assoc_state<llvm::MSVCPError>::move((std::__assoc_sub_state *)v6, &v10);
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (!v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
  *a1 = v10;
  return std::promise<llvm::MSVCPError>::~promise(&v13);
}

void `non-virtual thunk to'llvm::orc::ObjectLinkingLayer::handleRemoveResources(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  llvm::orc::ObjectLinkingLayer::handleRemoveResources(a1 - 16, a2, a3, a4);
}

void llvm::orc::ObjectLinkingLayer::handleTransferResources(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  int v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;

  v43 = a3;
  v44 = 0;
  v8 = a1 + 144;
  v9 = llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(_QWORD *)(a1 + 144), *(_DWORD *)(a1 + 160), a4, &v44);
  v10 = v44;
  if (v9)
    v11 = v44 == (_QWORD *)(*(_QWORD *)v8 + 32 * *(unsigned int *)(v8 + 16));
  else
    v11 = 1;
  if (!v11)
  {
    v12 = llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::FindAndConstruct(v8, &v43);
    v13 = v12[1];
    v14 = v12[2] - v13;
    v15 = ((uint64_t)(v10[2] - v10[1]) >> 3) + (v14 >> 3);
    if (v15 > (v12[3] - v13) >> 3)
    {
      if (v15 >> 61)
LABEL_39:
        abort();
      v16 = v14 >> 3;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v15);
      v18 = &v17[8 * v16];
      v20 = &v17[8 * v19];
      v21 = (_QWORD *)v12[1];
      v22 = (_QWORD *)v12[2];
      v23 = (uint64_t)v18;
      if (v22 != v21)
      {
        v23 = (uint64_t)v18;
        do
        {
          v24 = *--v22;
          *(_QWORD *)(v23 - 8) = v24;
          v23 -= 8;
          *v22 = -1;
        }
        while (v22 != v21);
      }
      v12[1] = v23;
      v12[2] = (uint64_t)v18;
      v12[3] = (uint64_t)v20;
      if (v21)
        operator delete(v21);
    }
    v25 = (_QWORD *)v10[1];
    v26 = (_QWORD *)v10[2];
    if (v25 != v26)
    {
      v27 = (char *)v12[2];
      do
      {
        v28 = v12[3];
        if ((unint64_t)v27 >= v28)
        {
          v30 = (char *)v12[1];
          v31 = (v27 - v30) >> 3;
          v32 = v31 + 1;
          if ((unint64_t)(v31 + 1) >> 61)
            goto LABEL_39;
          v33 = v28 - (_QWORD)v30;
          if (v33 >> 2 > v32)
            v32 = v33 >> 2;
          if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
            v34 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v34 = v32;
          if (v34)
          {
            v34 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v34);
            v30 = (char *)v12[1];
            v27 = (char *)v12[2];
          }
          else
          {
            v35 = 0;
          }
          v36 = (_QWORD *)(v34 + 8 * v31);
          *v36 = *v25;
          v29 = (char *)(v36 + 1);
          *v25 = -1;
          while (v27 != v30)
          {
            v37 = *((_QWORD *)v27 - 1);
            v27 -= 8;
            *--v36 = v37;
            *(_QWORD *)v27 = -1;
          }
          v12[1] = (uint64_t)v36;
          v12[2] = (uint64_t)v29;
          v12[3] = v34 + 8 * v35;
          if (v30)
            operator delete(v30);
        }
        else
        {
          *(_QWORD *)v27 = *v25;
          *v25 = -1;
          v29 = v27 + 8;
        }
        v12[2] = (uint64_t)v29;
        ++v25;
        v27 = v29;
      }
      while (v25 != v26);
    }
    v44 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(_QWORD *)(a1 + 144), *(_DWORD *)(a1 + 160), a4, &v44))
    {
      v38 = v44;
      v39 = (void *)v44[1];
      if (v39)
      {
        v44[2] = v39;
        operator delete(v39);
      }
      *v38 = -2;
      *(int32x2_t *)(a1 + 152) = vadd_s32(*(int32x2_t *)(a1 + 152), (int32x2_t)0x1FFFFFFFFLL);
    }
  }
  v41 = *(uint64_t **)(a1 + 168);
  v40 = *(uint64_t **)(a1 + 176);
  while (v41 != v40)
  {
    v42 = *v41++;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v42 + 64))(v42, a2, a3, a4);
  }
}

void `non-virtual thunk to'llvm::orc::ObjectLinkingLayer::handleTransferResources(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::orc::ObjectLinkingLayer::handleTransferResources(a1 - 16, a2, a3, a4);
}

void *llvm::RTTIExtends<llvm::orc::ObjectLinkingLayer,llvm::orc::ObjectLayer>::dynamicClassID()
{
  return &llvm::orc::ObjectLinkingLayer::ID;
}

uint64_t llvm::RTTIExtends<llvm::orc::ObjectLinkingLayer,llvm::orc::ObjectLayer>::isA(uint64_t a1, void *a2)
{
  _BOOL4 v3;

  v3 = a2 == &llvm::orc::ObjectLayer::ID || a2 == &llvm::RTTIRoot::ID;
  return a2 == &llvm::orc::ObjectLinkingLayer::ID || v3;
}

void `anonymous namespace'::LinkGraphMaterializationUnit::~LinkGraphMaterializationUnit(llvm::jitlink::LinkGraph **this)
{
  llvm::jitlink::LinkGraph *v2;
  unint64_t *v3;
  unint64_t v4;

  *this = (llvm::jitlink::LinkGraph *)&off_251C152A8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100](this + 6, 0);
  *this = (llvm::jitlink::LinkGraph *)off_251C147C0;
  v2 = this[4];
  if ((unint64_t)v2 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v3 = (unint64_t *)((char *)v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)(this + 1));
}

{
  llvm::jitlink::LinkGraph *v2;
  unint64_t *v3;
  unint64_t v4;

  *this = (llvm::jitlink::LinkGraph *)&off_251C152A8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100](this + 6, 0);
  *this = (llvm::jitlink::LinkGraph *)off_251C147C0;
  v2 = this[4];
  if ((unint64_t)v2 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
  {
    v3 = (unint64_t *)((char *)v2 + 8);
    do
      v4 = __ldaxr(v3);
    while (__stlxr(v4 - 1, v3));
  }
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)(this + 1));
  JUMPOUT(0x24BD1B3A4);
}

uint64_t `anonymous namespace'::LinkGraphMaterializationUnit::getName(_anonymous_namespace_::LinkGraphMaterializationUnit *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v1 = *((_QWORD *)this + 6);
  v4 = *(_QWORD *)(v1 + 96);
  v2 = v1 + 96;
  v3 = v4;
  if (*(char *)(v2 + 23) >= 0)
    return v2;
  else
    return v3;
}

void `anonymous namespace'::LinkGraphMaterializationUnit::materialize(uint64_t a1, uint64_t **a2)
{
  uint64_t v2;
  uint64_t *v3;
  llvm::jitlink::LinkGraph *v4;
  uint64_t *v5;
  llvm::jitlink::LinkGraph *v6;
  uint64_t *v7;

  v2 = *(_QWORD *)(a1 + 40);
  v3 = *a2;
  *a2 = 0;
  v4 = *(llvm::jitlink::LinkGraph **)(a1 + 48);
  *(_QWORD *)(a1 + 48) = 0;
  v6 = v4;
  v7 = v3;
  llvm::orc::ObjectLinkingLayer::emit(v2, &v7, (uint64_t *)&v6);
  if (v6)
  {
    llvm::jitlink::LinkGraph::~LinkGraph(v6);
    MEMORY[0x24BD1B3A4]();
  }
  v5 = v7;
  v7 = 0;
  if (v5)
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)&v7, v5);
}

void `anonymous namespace'::LinkGraphMaterializationUnit::discard(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  const void ***v7;
  const void **v8;
  size_t v9;
  uint64_t v11;
  _OWORD v12[3];
  __int128 v13;
  _OWORD v14[3];
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  llvm::jitlink::LinkGraph::defined_symbols(*(llvm::jitlink::LinkGraph **)(a1 + 48), v14);
  v12[0] = v14[0];
  v12[1] = v14[1];
  v12[2] = v14[2];
  v13 = v15;
  v5 = v16;
  v6 = v17;
  v7 = (const void ***)v15;
  if (*(_QWORD *)&v14[0] != v16 || (_QWORD)v15 != v17)
  {
    while (1)
    {
      v8 = *v7;
      v9 = (size_t)(*v7)[1];
      if (v9 == **(_QWORD **)a3 && (!v9 || !memcmp(*v8, (const void *)(*(_QWORD *)a3 + 16), v9)))
        break;
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v12, (uint64_t)&v11);
      v7 = (const void ***)v13;
      if (*(_QWORD *)&v12[0] == v5 && (_QWORD)v13 == v6)
        return;
    }
    llvm::jitlink::LinkGraph::makeExternal(*(_QWORD *)(a1 + 48), (uint64_t)v8);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::jitlink::JITLinkMemoryManager::deallocate(std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)::{lambda(llvm::Error)#1}>(uint64_t **a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;

  v2 = *a2;
  *a2 = 0;
  v3 = *a1;
  v5 = v2;
  std::promise<llvm::MSVCPError>::set_value(v3, &v5);
  result = v5;
  if (v5)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return result;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::destroyAll(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  void *v4;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      if (*(v3 - 2) <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v4 = (void *)*(v3 - 1);
        if (v4)
        {
          *v3 = v4;
          operator delete(v4);
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

void llvm::orc::ObjectLinkingLayerJITLinkContext::~ObjectLinkingLayerJITLinkContext(llvm::orc::ObjectLinkingLayerJITLinkContext *this)
{
  llvm::orc::ObjectLinkingLayerJITLinkContext::~ObjectLinkingLayerJITLinkContext(this);
  JUMPOUT(0x24BD1B3A4);
}

{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  void **v10;

  v2 = *((_QWORD *)this + 2);
  if (*(_QWORD *)(v2 + 136))
  {
    v3 = *((_QWORD *)this + 4);
    if (v3)
    {
      *((_QWORD *)this + 4) = 0;
      v9 = v3;
      v4 = *(_QWORD *)(v2 + 136);
      if (!v4)
      {
        v8 = std::__throw_bad_function_call[abi:nn180100]();
        llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1}>(v8);
        return;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 48))(v4, &v9);
      v5 = v9;
      v9 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    }
  }
  v10 = (void **)((char *)this + 112);
  std::vector<llvm::orc::SymbolDependenceGroup>::__destroy_vector::operator()[abi:nn180100](&v10);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 11), 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)this + 64);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 8), 8);
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)this + 40);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 5), 8);
  v6 = *((_QWORD *)this + 4);
  *((_QWORD *)this + 4) = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = (uint64_t *)*((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v7)
    std::default_delete<llvm::orc::MaterializationResponsibility>::operator()[abi:nn180100]((uint64_t)this + 24, v7);
}

uint64_t llvm::orc::ObjectLinkingLayerJITLinkContext::getMemoryManager(llvm::orc::ObjectLinkingLayerJITLinkContext *this)
{
  return *(_QWORD *)(*((_QWORD *)this + 2) + 88);
}

void llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v6;
  uint64_t v7;
  std::recursive_mutex *v8;
  uint64_t *v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  _BOOL4 v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  unint64_t *v25;
  __int128 v26;
  uint64_t v27;
  void *__p;
  void *v29;
  uint64_t v30;
  void **v31;
  _QWORD v32[3];
  _QWORD *v33;
  __int128 v34;
  char *v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  __p = 0;
  v29 = 0;
  v30 = 0;
  v6 = *(uint64_t **)(a1 + 24);
  v7 = *v6;
  v8 = *(std::recursive_mutex **)(*v6 + 32);
  std::recursive_mutex::lock(v8);
  if (&__p != (void **)(v7 + 208))
    std::vector<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>::__assign_with_size[abi:nn180100]<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*,std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>*>(&__p, *(__int128 **)(v7 + 208), *(__int128 **)(v7 + 216), (uint64_t)(*(_QWORD *)(v7 + 216) - *(_QWORD *)(v7 + 208)) >> 4);
  std::recursive_mutex::unlock(v8);
  v9 = *(uint64_t **)(*(_QWORD *)(a1 + 16) + 8);
  v27 = 0;
  v10 = 0uLL;
  v26 = 0u;
  if (!*((_DWORD *)a2 + 2))
    goto LABEL_19;
  v11 = *((unsigned int *)a2 + 4);
  if ((_DWORD)v11)
  {
    v12 = 24 * v11;
    v13 = *a2;
    while (*(_QWORD *)v13 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v13 += 24;
      v12 -= 24;
      if (!v12)
        goto LABEL_19;
    }
  }
  else
  {
    v13 = *a2;
  }
  v14 = *a2 + 24 * v11;
  if (v13 == v14)
  {
LABEL_19:
    v19 = 0;
  }
  else
  {
    v15 = *(uint64_t **)v13;
LABEL_12:
    v16 = *(_DWORD *)(v13 + 16) == 1;
    llvm::orc::ExecutorProcessControl::intern(v9[9], v15, *(_QWORD *)(v13 + 8), &v25);
    llvm::orc::SymbolLookupSet::add((uint64_t *)&v26, (uint64_t *)&v25, v16);
    if ((unint64_t)v25 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
    {
      v17 = v25 + 1;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
    }
    while (1)
    {
      v13 += 24;
      if (v13 == v14)
        break;
      v15 = *(uint64_t **)v13;
      if (*(_QWORD *)v13 < 0xFFFFFFFFFFFFFFFELL)
      {
        if (v13 != v14)
          goto LABEL_12;
        break;
      }
    }
    v10 = v26;
    v19 = v27;
  }
  v20 = *a3;
  *a3 = 0;
  v23 = v10;
  v24 = v19;
  v27 = 0;
  v26 = 0uLL;
  *(_QWORD *)&v34 = v20;
  v35 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallbacksHolder<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1},llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1},void>::Callbacks
      + 6;
  v32[0] = &off_251C15348;
  v32[1] = a1;
  v33 = v32;
  llvm::orc::ExecutionSession::lookup((llvm::orc::ExecutionSession *)v9, 0, (__int128 **)&__p, (uint64_t)&v23, 3, &v34, v32);
  v21 = v33;
  if (v33 == v32)
  {
    v22 = 4;
    v21 = v32;
  }
  else
  {
    if (!v33)
      goto LABEL_25;
    v22 = 5;
  }
  (*(void (**)(void))(*v21 + 8 * v22))();
LABEL_25:
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v34);
  v31 = (void **)&v23;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v31);
  v31 = (void **)&v26;
  std::vector<std::pair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolLookupFlags>>::__destroy_vector::operator()[abi:nn180100](&v31);
  if (__p)
  {
    v29 = __p;
    operator delete(__p);
  }
}

uint64_t llvm::orc::ObjectLinkingLayerJITLinkContext::notifyResolved@<X0>(llvm::orc::ObjectLinkingLayerJITLinkContext *this@<X0>, llvm::jitlink::LinkGraph *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v20;
  unint64_t v21;
  unsigned __int16 v22;
  __int16 v23;
  _QWORD *v24;
  uint64_t *v25;
  unint64_t *v26;
  unint64_t v27;
  _QWORD *v29;
  _QWORD *v30;
  llvm::jitlink::LinkGraph *v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v42;
  unint64_t v43;
  unsigned __int16 v44;
  __int16 v45;
  _QWORD *v46;
  uint64_t *v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  uint64_t *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  __int128 v89;
  void (**v90)(llvm::orc::MissingSymbolDefinitions *__hidden);
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  char *v97;
  uint64_t *v99;
  __int128 v100;
  unint64_t v101;
  __int128 v102;
  int v103;
  __int128 v104;
  unint64_t v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  _BYTE v110[32];
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t v119;
  int v120;
  void **v121;

  v6 = *((_QWORD *)this + 2);
  v7 = *(_QWORD *)(v6 + 8);
  v118 = 0;
  v119 = 0;
  v120 = 0;
  v8 = *(unsigned __int8 *)(v6 + 105);
  v115 = 0;
  v116 = 0;
  v117 = 0;
  llvm::jitlink::LinkGraph::defined_symbols(a2, v110);
  v106 = *(_OWORD *)v110;
  v107 = *(_OWORD *)&v110[16];
  v108 = v111;
  v109 = v112;
  v9 = v113;
  v10 = v114;
  v11 = (uint64_t *)v112;
  if (*(_QWORD *)v110 != v113 || (_QWORD)v112 != v114)
  {
    do
    {
      v12 = *v11;
      v13 = *(_QWORD *)(*v11 + 8);
      if (v13 && (*(_QWORD *)(v12 + 24) & 0xC00000000000000) != 0x800000000000000)
      {
        llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v7 + 72), *(uint64_t **)v12, v13, (unint64_t **)&v100);
        v15 = *(_QWORD **)(v12 + 16);
        v14 = *(_QWORD *)(v12 + 24);
        v16 = *((_DWORD *)a2 + 36);
        v17 = v16 > 0x24;
        v18 = (1 << v16) & 0x1800000006;
        if (v17 || v18 == 0)
          v20 = *v15 + (v14 & 0x1FFFFFFFFFFFFFFLL);
        else
          v20 = (v14 & 0x1FFFFFFFFFFFFFFLL) + (v14 >> 63) + *v15;
        v21 = HIBYTE(v14);
        if ((v14 & 0xC00000000000000) != 0)
          v22 = HIBYTE(v14) & 2;
        else
          v22 = HIBYTE(v14) & 2 | 0x10;
        v23 = (v22 | v21 & 0x20) << 8;
        v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct((uint64_t *)&v115, (uint64_t *)&v100);
        v24[1] = v20;
        *((_WORD *)v24 + 8) = v23;
        if (v8)
        {
          v25 = (uint64_t *)(*((_QWORD *)this + 3) + 16);
          *(_QWORD *)&v104 = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v25, &v100, &v104) & 1) == 0)*((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v118, (uint64_t *)&v100)+ 4) = v23;
        }
        if ((unint64_t)(v100 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v26 = (unint64_t *)(v100 + 8);
          do
            v27 = __ldaxr(v26);
          while (__stlxr(v27 - 1, v26));
        }
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v106, (uint64_t)&v104);
      v11 = (uint64_t *)v109;
    }
    while ((_QWORD)v106 != v9 || (_QWORD)v109 != v10);
  }
  v99 = a3;
  v29 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)a2 + 232);
  v31 = a2;
  v32 = *((_QWORD *)a2 + 29) + 8 * *((unsigned int *)a2 + 62);
  if ((_QWORD *)v32 != v29)
  {
    v33 = v29;
    v34 = v30;
    do
    {
      v35 = *v33;
      v36 = *(_QWORD *)(*v33 + 8);
      if (v36 && (*(_QWORD *)(v35 + 24) & 0xC00000000000000) != 0x800000000000000)
      {
        llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v7 + 72), *(uint64_t **)v35, v36, (unint64_t **)&v106);
        v38 = *(_QWORD **)(v35 + 16);
        v37 = *(_QWORD *)(v35 + 24);
        v39 = *((_DWORD *)v31 + 36);
        v17 = v39 > 0x24;
        v40 = (1 << v39) & 0x1800000006;
        if (v17 || v40 == 0)
          v42 = *v38 + (v37 & 0x1FFFFFFFFFFFFFFLL);
        else
          v42 = (v37 & 0x1FFFFFFFFFFFFFFLL) + (v37 >> 63) + *v38;
        v43 = HIBYTE(v37);
        if ((v37 & 0xC00000000000000) != 0)
          v44 = HIBYTE(v37) & 2;
        else
          v44 = HIBYTE(v37) & 2 | 0x10;
        v45 = (v44 | v43 & 0x20) << 8;
        v46 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::FindAndConstruct((uint64_t *)&v115, (uint64_t *)&v106);
        v46[1] = v42;
        *((_WORD *)v46 + 8) = v45;
        if (v8)
        {
          v47 = (uint64_t *)(*((_QWORD *)this + 3) + 16);
          *(_QWORD *)v110 = 0;
          if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v47, &v106, v110) & 1) == 0)*((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(&v118, (uint64_t *)&v106)+ 4) = v45;
        }
        if ((unint64_t)(v106 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v48 = (unint64_t *)(v106 + 8);
          do
            v49 = __ldaxr(v48);
          while (__stlxr(v49 - 1, v48));
        }
      }
      while (++v33 != v34)
      {
        if ((*v33 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_47;
      }
      v33 = v34;
LABEL_47:
      ;
    }
    while (v33 != (_QWORD *)v32);
  }
  if (!(_DWORD)v119)
    goto LABEL_52;
  v50 = (uint64_t *)*((_QWORD *)this + 3);
  v102 = 0uLL;
  v103 = 0;
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::copyFrom((uint64_t)&v102, (uint64_t)&v118);
  *(_OWORD *)v110 = v102;
  v102 = 0uLL;
  *(_DWORD *)&v110[16] = v103;
  v103 = 0;
  llvm::orc::ExecutionSession::OL_defineMaterializing(v50, (int32x2_t *)v110, v99);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)v110);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v102);
  if (!*v99)
  {
LABEL_52:
    v104 = 0uLL;
    v105 = 0;
    v101 = 0;
    v100 = 0uLL;
    v51 = *((_QWORD *)this + 3);
    v52 = *(_DWORD *)(v51 + 24);
    if (!v52)
      goto LABEL_91;
    v53 = *(uint64_t **)(v51 + 16);
    v54 = *(unsigned int *)(v51 + 32);
    if ((_DWORD)v54)
    {
      v55 = 16 * v54;
      v56 = v53;
      while ((*v56 | 8) == 0xFFFFFFFFFFFFFFF8)
      {
        v56 += 2;
        v55 -= 16;
        if (!v55)
          goto LABEL_91;
      }
    }
    else
    {
      v56 = v53;
    }
    v57 = &v53[2 * v54];
    if (v56 == v57)
    {
LABEL_91:
      v58 = 0;
    }
    else
    {
      v58 = 0;
LABEL_61:
      *(_QWORD *)v110 = 0;
      v59 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>,llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::orc::SymbolStringPtr>((uint64_t *)&v115, v56, v110);
      v60 = *(uint64_t **)v110;
      v61 = &v115[3 * v117];
      if (!v59)
        v60 = &v115[3 * v117];
      if ((*((_BYTE *)v56 + 9) & 0x40) != 0)
      {
        ++v58;
        if (v60 != v61)
        {
          v62 = *((_QWORD *)&v104 + 1);
          if (*((_QWORD *)&v104 + 1) >= v105)
          {
            v66 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)&v104, v56);
          }
          else
          {
            v63 = *v56;
            **((_QWORD **)&v104 + 1) = *v56;
            if ((unint64_t)(v63 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v64 = (unint64_t *)(v63 + 8);
              do
                v65 = __ldaxr(v64);
              while (__stlxr(v65 + 1, v64));
            }
            v66 = (char *)(v62 + 8);
          }
          *((_QWORD *)&v104 + 1) = v66;
        }
      }
      else if (v60 == v61)
      {
        v67 = *((_QWORD *)&v100 + 1);
        if (*((_QWORD *)&v100 + 1) >= v101)
        {
          v71 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)&v100, v56);
        }
        else
        {
          v68 = *v56;
          **((_QWORD **)&v100 + 1) = *v56;
          if ((unint64_t)(v68 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v69 = (unint64_t *)(v68 + 8);
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 + 1, v69));
          }
          v71 = (char *)(v67 + 8);
        }
        *((_QWORD *)&v100 + 1) = v71;
      }
      else if (*(_BYTE *)(*((_QWORD *)this + 2) + 104))
      {
        *((_WORD *)v60 + 8) = *((_WORD *)v56 + 4);
      }
      while (1)
      {
        v56 += 2;
        if (v56 == v57)
          break;
        if ((*v56 | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (v56 != v57)
            goto LABEL_61;
          break;
        }
      }
      if ((_QWORD)v100 != *((_QWORD *)&v100 + 1))
      {
        v72 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 72);
        v74 = *(_QWORD *)(v72 + 8);
        v73 = *(_QWORD *)(v72 + 16);
        if (v73)
        {
          v75 = (unint64_t *)(v73 + 8);
          do
            v76 = __ldxr(v75);
          while (__stxr(v76 + 1, v75));
        }
        v77 = operator new();
        if (*((char *)v31 + 119) < 0)
        {
          std::string::__init_copy_ctor_external((std::string *)v110, *((const std::string::value_type **)v31 + 12), *((_QWORD *)v31 + 13));
        }
        else
        {
          *(_OWORD *)v110 = *((_OWORD *)v31 + 6);
          *(_QWORD *)&v110[16] = *((_QWORD *)v31 + 14);
        }
        v88 = v101;
        v89 = v100;
        v101 = 0;
        v90 = off_251C14720;
        v100 = 0uLL;
        goto LABEL_128;
      }
      v52 = *(_DWORD *)(*((_QWORD *)this + 3) + 24);
    }
    if ((unint64_t)v52 - v58 < v116 && (_DWORD)v116)
    {
      if (v117)
      {
        v78 = 24 * v117;
        v79 = v115;
        while ((*v79 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v79 += 3;
          v78 -= 24;
          if (!v78)
            goto LABEL_98;
        }
      }
      else
      {
        v79 = v115;
      }
      v91 = &v115[3 * v117];
LABEL_113:
      if (v79 != v91)
      {
        v92 = (uint64_t *)(*((_QWORD *)this + 3) + 16);
        *(_QWORD *)v110 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v92, v79, v110) & 1) == 0)
        {
          v93 = *((_QWORD *)&v104 + 1);
          if (*((_QWORD *)&v104 + 1) >= v105)
          {
            v97 = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)&v104, v79);
          }
          else
          {
            v94 = *v79;
            **((_QWORD **)&v104 + 1) = *v79;
            if ((unint64_t)(v94 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
            {
              v95 = (unint64_t *)(v94 + 8);
              do
                v96 = __ldaxr(v95);
              while (__stlxr(v96 + 1, v95));
            }
            v97 = (char *)(v93 + 8);
          }
          *((_QWORD *)&v104 + 1) = v97;
        }
        while (1)
        {
          v79 += 3;
          if (v79 == v91)
            break;
          if ((*v79 | 8) != 0xFFFFFFFFFFFFFFF8)
            goto LABEL_113;
        }
      }
    }
LABEL_98:
    if ((_QWORD)v104 != *((_QWORD *)&v104 + 1))
    {
      v80 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 2) + 8) + 72);
      v74 = *(_QWORD *)(v80 + 8);
      v73 = *(_QWORD *)(v80 + 16);
      if (v73)
      {
        v81 = (unint64_t *)(v73 + 8);
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      v77 = operator new();
      if (*((char *)v31 + 119) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v110, *((const std::string::value_type **)v31 + 12), *((_QWORD *)v31 + 13));
      }
      else
      {
        *(_OWORD *)v110 = *((_OWORD *)v31 + 6);
        *(_QWORD *)&v110[16] = *((_QWORD *)v31 + 14);
      }
      v88 = v105;
      v89 = v104;
      v105 = 0;
      v90 = off_251C14770;
      v104 = 0uLL;
LABEL_128:
      *(_QWORD *)v77 = v90;
      *(_QWORD *)(v77 + 8) = v74;
      *(_QWORD *)(v77 + 16) = v73;
      *(_OWORD *)(v77 + 24) = *(_OWORD *)v110;
      *(_QWORD *)(v77 + 40) = *(_QWORD *)&v110[16];
      memset(v110, 0, 24);
      *(_OWORD *)(v77 + 48) = v89;
      *(_QWORD *)(v77 + 64) = v88;
      v106 = 0uLL;
      *(_QWORD *)&v107 = 0;
      v121 = (void **)&v106;
      std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v121);
      if ((v110[23] & 0x80000000) != 0)
        operator delete(*(void **)v110);
      *v99 = v77;
      *(_QWORD *)v110 = &v100;
      std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)v110);
      *(_QWORD *)v110 = &v104;
      std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)v110);
      goto LABEL_131;
    }
    *(_QWORD *)v110 = &v100;
    std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)v110);
    *(_QWORD *)v110 = &v104;
    std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)v110);
    llvm::orc::JITDylib::resolve(**((_QWORD **)this + 3), *((_QWORD *)this + 3), (uint64_t)&v115, v99);
    if (!*v99)
    {
      v83 = *((_QWORD *)this + 2);
      v84 = *(uint64_t **)(v83 + 168);
      v85 = *(uint64_t **)(v83 + 176);
      if (v84 != v85)
      {
        v86 = *((_QWORD *)this + 3);
        do
        {
          v87 = *v84++;
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v87 + 32))(v87, v86);
        }
        while (v84 != v85);
      }
      *v99 = 0;
    }
  }
LABEL_131:
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>::~DenseMap((uint64_t)&v115);
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v118);
}

void llvm::orc::ObjectLinkingLayerJITLinkContext::notifyFinalized(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::recursive_mutex *v12;
  char v13;
  uint64_t *v14;
  uint64_t *v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *i;
  _QWORD *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v4 = (_QWORD *)a1[2];
  v3 = a1[3];
  v5 = *a2;
  *a2 = -1;
  v6 = (_QWORD *)v4[21];
  v7 = (_QWORD *)v4[22];
  if (v6 == v7)
    goto LABEL_13;
  v8 = 0;
  do
  {
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v6 + 40))(&v40, *v6, v3);
    v42 = v40;
    v43 = v8;
    v40 = 0;
    llvm::ErrorList::join(&v43, &v42, &v41);
    if (v42)
      (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
    if (v43)
      (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    v8 = v41;
    v41 = 0;
    if (v40)
      (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
    ++v6;
  }
  while (v6 != v7);
  if (!v8)
  {
LABEL_13:
    if (v5 == -1)
      goto LABEL_41;
    v10 = *(_QWORD *)(v3 + 8);
    v11 = atomic_load((unint64_t *)(v10 + 8));
    v12 = *(std::recursive_mutex **)((v11 & 0xFFFFFFFFFFFFFFFELL) + 32);
    std::recursive_mutex::lock(v12);
    v13 = atomic_load((unint64_t *)(v10 + 8));
    if ((v13 & 1) == 0)
    {
      v43 = v10;
      v14 = llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::FindAndConstruct((uint64_t)(v4 + 18), &v43);
      v15 = v14;
      v17 = (uint64_t *)v14[2];
      v16 = v14[3];
      if ((unint64_t)v17 >= v16)
      {
        v25 = (uint64_t *)v14[1];
        v26 = v17 - v25;
        v27 = v26 + 1;
        if ((unint64_t)(v26 + 1) >> 61)
          abort();
        v28 = v16 - (_QWORD)v25;
        if (v28 >> 2 > v27)
          v27 = v28 >> 2;
        v29 = (unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8;
        v30 = 0x1FFFFFFFFFFFFFFFLL;
        if (!v29)
          v30 = v27;
        if (v30)
        {
          v30 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v30);
          v25 = (uint64_t *)v15[1];
          v17 = (uint64_t *)v15[2];
        }
        else
        {
          v31 = 0;
        }
        v32 = (uint64_t *)(v30 + 8 * v26);
        v33 = v30 + 8 * v31;
        *v32 = v5;
        for (i = v32 + 1; v17 != v25; *v17 = -1)
        {
          v34 = *--v17;
          *--v32 = v34;
        }
        v15[1] = (uint64_t)v32;
        v15[2] = (uint64_t)i;
        v15[3] = v33;
        if (v25)
          operator delete(v25);
      }
      else
      {
        *v17 = v5;
        i = v17 + 1;
      }
      v15[2] = (uint64_t)i;
      std::recursive_mutex::unlock(v12);
      goto LABEL_41;
    }
    v19 = (_QWORD *)operator new();
    v20 = (uint64_t)v19;
    do
      v21 = __ldxr((unsigned int *)v10);
    while (__stxr(v21 + 1, (unsigned int *)v10));
    *v19 = &off_251C14538;
    v19[1] = v10;
    std::recursive_mutex::unlock(v12);
    v22 = v4[11];
    v38 = v5;
    llvm::jitlink::JITLinkMemoryManager::deallocate(&v42, v22, &v38);
    v43 = v20;
  }
  else
  {
    if (v5 == -1)
      goto LABEL_25;
    v9 = v4[11];
    v39 = v5;
    llvm::jitlink::JITLinkMemoryManager::deallocate(&v42, v9, &v39);
    v43 = v8;
  }
  llvm::ErrorList::join(&v43, &v42, &v41);
  if (v42)
    (*(void (**)(uint64_t))(*(_QWORD *)v42 + 8))(v42);
  if (v43)
    (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  v8 = v41;
  if (v41)
  {
LABEL_25:
    v23 = *(_QWORD *)(a1[2] + 8);
    v37 = v8;
    llvm::orc::ExecutionSession::reportError(v23, &v37);
    v24 = v37;
    if (!v37)
    {
LABEL_27:
      llvm::orc::ExecutionSession::OL_notifyFailed(*(_QWORD *)(*(_QWORD *)a1[3] + 32), a1[3]);
      return;
    }
LABEL_26:
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
    goto LABEL_27;
  }
LABEL_41:
  llvm::orc::ExecutionSession::OL_notifyEmitted(*(std::recursive_mutex **)(*(_QWORD *)a1[3] + 32), a1[3], a1[14], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[15] - a1[14]) >> 4), &v43);
  if (v43)
  {
    v35 = *(_QWORD *)(a1[2] + 8);
    v36 = v43;
    llvm::orc::ExecutionSession::reportError(v35, &v36);
    v24 = v36;
    if (!v36)
      goto LABEL_27;
    goto LABEL_26;
  }
}

uint64_t llvm::orc::ObjectLinkingLayerJITLinkContext::getMarkLivePass@<X0>(uint64_t result@<X0>, _QWORD *a2@<X8>)
{
  *a2 = result;
  a2[3] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::ObjectLinkingLayerJITLinkContext::getMarkLivePass(llvm::Triple const&)::{lambda(llvm::jitlink::LinkGraph &)#1},llvm::orc::ObjectLinkingLayerJITLinkContext::getMarkLivePass(llvm::Triple const&)::{lambda(llvm::jitlink::LinkGraph &)#1},void>::Callbacks
        + 2;
  return result;
}

_QWORD *llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  uint64_t v30;
  _QWORD *result;
  char *v32;
  char *v33;
  uint64_t v34;
  char *v35;
  uint64_t *v36;
  __int128 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v37 = a1;
  v38 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1},void>::Callbacks
      + 2;
  v8 = a3[2];
  v9 = a3[1];
  if (v9 >= v8)
  {
    v11 = (uint64_t)(v9 - *a3) >> 5;
    if ((unint64_t)(v11 + 1) >> 59)
      goto LABEL_29;
    v12 = v8 - *a3;
    v13 = v12 >> 4;
    if (v12 >> 4 <= (unint64_t)(v11 + 1))
      v13 = v11 + 1;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFE0)
      v14 = 0x7FFFFFFFFFFFFFFLL;
    else
      v14 = v13;
    v36 = a3 + 2;
    if (v14)
      v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a3 + 2), v14);
    else
      v15 = 0;
    v32 = v15;
    v33 = &v15[32 * v11];
    v35 = &v15[32 * v14];
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v33, &v37);
    v34 = (uint64_t)(v33 + 32);
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a3, &v32);
    v10 = a3[1];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v32);
  }
  else
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a3[1], &v37);
    v10 = v9 + 32;
  }
  a3[1] = v10;
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v37);
  v16 = *(_QWORD *)(a1 + 16);
  v17 = *(uint64_t **)(v16 + 168);
  v18 = *(uint64_t **)(v16 + 176);
  if (v17 != v18)
  {
    v19 = *(_QWORD *)(a1 + 24);
    do
    {
      v20 = *v17++;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v20 + 16))(v20, v19, a2, a3);
    }
    while (v17 != v18);
  }
  v21 = a3[11];
  *(_QWORD *)&v37 = a1;
  v38 = (char *)&llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2},llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2},void>::Callbacks
      + 2;
  v22 = a3[10];
  if (v22 < v21)
  {
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a3[10], &v37);
    v23 = v22 + 32;
    goto LABEL_28;
  }
  v24 = a3[9];
  v25 = (uint64_t)(v22 - v24) >> 5;
  if ((unint64_t)(v25 + 1) >> 59)
LABEL_29:
    abort();
  v26 = v21 - v24;
  v27 = v26 >> 4;
  if (v26 >> 4 <= (unint64_t)(v25 + 1))
    v27 = v25 + 1;
  if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFE0)
    v28 = 0x7FFFFFFFFFFFFFFLL;
  else
    v28 = v27;
  v36 = a3 + 11;
  if (v28)
    v29 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)(a3 + 11), v28);
  else
    v29 = 0;
  v30 = (uint64_t)&v29[32 * v25];
  v32 = v29;
  v33 = (char *)v30;
  v35 = &v29[32 * v28];
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v30, &v37);
  v34 = v30 + 32;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__swap_out_circular_buffer(a3 + 9, &v32);
  v23 = a3[10];
  std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)&v32);
LABEL_28:
  a3[10] = v23;
  result = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v37);
  *a4 = 0;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::CallImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1}>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  unint64_t *v21;
  uint64_t v22;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  char v32;
  uint64_t v33[2];
  unsigned int v34;
  char v35;
  uint64_t v36[3];
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  v32 = *(_BYTE *)(a2 + 24) & 1;
  v5 = *(_QWORD *)a2;
  if (!v32)
  {
    v30 = *(_QWORD *)(a2 + 8);
    v6 = v30;
    v7 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    v8 = *(unsigned int *)(a2 + 16);
    v31 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v29 = v5;
    *(_QWORD *)a2 = 0;
    v25 = 0;
    v26 = 0;
    v27 = 0;
    if (v6)
    {
      if ((_DWORD)v8)
      {
        v9 = 24 * v8;
        v10 = v5;
        while ((*(_QWORD *)v10 | 8) == 0xFFFFFFFFFFFFFFF8)
        {
          v10 += 24;
          v9 -= 24;
          if (!v9)
            goto LABEL_26;
        }
      }
      else
      {
        v10 = v5;
      }
      v14 = v5 + 24 * v8;
      if (v10 != v14)
      {
        v15 = *(uint64_t **)v10;
LABEL_13:
        v16 = *v15;
        *(_QWORD *)&v24 = v15 + 2;
        *((_QWORD *)&v24 + 1) = v16;
        v28 = 0;
        v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>,llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::StringRef>(&v25, (uint64_t)&v24, &v28, a4);
        v18 = v28;
        if ((v17 & 1) != 0)
        {
LABEL_19:
          v20 = *(_QWORD *)(v10 + 8);
          *(_WORD *)(v18 + 24) = *(_WORD *)(v10 + 16);
          *(_QWORD *)(v18 + 16) = v20;
          while (1)
          {
            v10 += 24;
            if (v10 == v14)
              break;
            v15 = *(uint64_t **)v10;
            if ((*(_QWORD *)v10 | 8) != 0xFFFFFFFFFFFFFFF8)
            {
              if (v10 != v14)
                goto LABEL_13;
              break;
            }
          }
          v13 = v25;
          v7 = v26;
          v12 = v27;
          goto LABEL_28;
        }
        v19 = v27;
        if (4 * (int)v26 + 4 >= 3 * v27)
        {
          v19 = 2 * v27;
        }
        else if (v27 + ~(_DWORD)v26 - HIDWORD(v26) > v27 >> 3)
        {
LABEL_16:
          LODWORD(v26) = v26 + 1;
          if (*(_QWORD *)v18 != -1)
            --HIDWORD(v26);
          *(_OWORD *)v18 = v24;
          *(_QWORD *)(v18 + 16) = 0;
          *(_QWORD *)(v18 + 24) = 0;
          goto LABEL_19;
        }
        llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::grow((uint64_t)&v25, v19);
        v28 = 0;
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>,llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::StringRef>(&v25, (uint64_t)&v24, &v28, v21);
        v18 = v28;
        goto LABEL_16;
      }
LABEL_26:
      v12 = 0;
      v13 = 0;
      v7 = 0;
    }
    else
    {
      v12 = 0;
      v13 = 0;
    }
LABEL_28:
    v22 = *a1;
    v35 = 0;
    v33[0] = v13;
    v25 = 0;
    v26 = 0;
    v33[1] = v7;
    v34 = v12;
    v27 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v22 + 16))(v22, v33);
    llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(v33);
    MEMORY[0x24BD1B398](v25, 8);
    return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v29);
  }
  *(_QWORD *)a2 = 0;
  v11 = *a1;
  v29 = 0;
  v37 = -1;
  v36[0] = v5;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 16))(v11, v36);
  llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(v36);
  return llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v29);
}

_QWORD *llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::MoveImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1}>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>>::DestroyImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::Expected<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>>)#1}>(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t *llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(uint64_t *a1)
{
  char v2;
  uint64_t v3;

  v2 = *((_BYTE *)a1 + 24);
  v3 = *a1;
  if ((v2 & 1) != 0)
  {
    *a1 = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  else
  {
    MEMORY[0x24BD1B398](v3, 8);
  }
  return a1;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>,llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::StringRef>(uint64_t *a1, uint64_t a2, _QWORD *a3, unint64_t *a4)
{
  int v5;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  int v13;
  int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _BOOL4 isEqual;
  _BOOL4 v20;

  v5 = *((_DWORD *)a1 + 4);
  if (v5)
  {
    v7 = *a1;
    v8 = v5 - 1;
    v9 = (v5 - 1) & llvm::hashing::detail::hash_combine_range_impl<unsigned long long const>(*(llvm::hashing::detail::hash_state **)a2, *(_QWORD *)a2 + *(_QWORD *)(a2 + 8), (uint64_t)a3, a4);
    v10 = v7 + 32 * v9;
    if (llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(_QWORD *)(a2 + 8), *(void **)v10, *(_QWORD *)(v10 + 8)))
    {
      result = 1;
    }
    else
    {
      v12 = 0;
      v13 = 1;
      v14 = v9;
      while (*(_QWORD *)v10 != -1)
      {
        if (v12)
          v15 = 0;
        else
          v15 = *(_QWORD *)v10 == -2;
        if (v15)
          v16 = v10;
        else
          v16 = v12;
        v17 = v13 + 1;
        v18 = (v14 + v13) & v8;
        v10 = v7 + 32 * v18;
        isEqual = llvm::DenseMapInfo<llvm::StringRef,void>::isEqual(*(char **)a2, *(_QWORD *)(a2 + 8), *(void **)v10, *(_QWORD *)(v10 + 8));
        v14 = v18;
        v12 = v16;
        v20 = isEqual;
        result = 1;
        v13 = v17;
        if (v20)
          goto LABEL_5;
      }
      result = 0;
      if (v12)
        v10 = v12;
    }
  }
  else
  {
    v10 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v10;
  return result;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = 32 * v11;
      do
      {
        *result = xmmword_24AA2AC20;
        result += 2;
        v12 -= 32;
      }
      while (v12);
    }
    if ((_DWORD)v3)
    {
      v13 = 32 * v3;
      v14 = (_OWORD *)v4;
      do
      {
        if (*(_QWORD *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>,llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v14, &v18, v10);
          v15 = v18;
          *v18 = *v14;
          v15[1] = v14[1];
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 2;
        v13 -= 32;
      }
      while (v13);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 32 * v16;
    do
    {
      *result = xmmword_24AA2AC20;
      result += 2;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

void std::__function::__func<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1},std::allocator<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1}>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::~__func()
{
  JUMPOUT(0x24BD1B3A4);
}

_QWORD *std::__function::__func<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1},std::allocator<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1}>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__clone(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_251C15348;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1},std::allocator<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1}>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::__clone(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_251C15348;
  a2[1] = v2;
  return result;
}

uint64_t *std::__function::__func<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1},std::allocator<llvm::orc::ObjectLinkingLayerJITLinkContext::lookup(llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>> const&,std::unique_ptr<llvm::jitlink::JITLinkAsyncLookupContinuation>)::{lambda(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)#1}>,void ()(llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>> const&)>::operator()(uint64_t *result, uint64_t **a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *i;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  if (*((_DWORD *)a2 + 2))
  {
    v2 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v2)
    {
      v3 = 32 * v2;
      for (i = *a2; (*i | 0x1000) == 0xFFFFFFFFFFFFF000; i += 4)
      {
        v3 -= 32;
        if (!v3)
          return result;
      }
    }
    else
    {
      i = *a2;
    }
    v5 = (uint64_t)&(*a2)[4 * v2];
    if (i != (uint64_t *)v5)
    {
      v6 = result[1] + 88;
LABEL_10:
      result = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin((uint64_t)(i + 1));
      v8 = i[1] + 8 * *((unsigned int *)i + 6);
      if ((uint64_t *)v8 == result)
        goto LABEL_18;
      v9 = result;
      v10 = v7;
      do
      {
        v11 = *i;
        v12 = *v9++;
        v13 = v12;
        result = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::FindAndConstruct(v6, &v13);
        result[1] = v11;
        while (v9 != v10)
        {
          if ((*v9 | 8) != 0xFFFFFFFFFFFFFFF8)
            goto LABEL_17;
          ++v9;
        }
        v9 = v10;
LABEL_17:
        ;
      }
      while (v9 != (uint64_t *)v8);
LABEL_18:
      while (1)
      {
        i += 4;
        if (i == (uint64_t *)v5)
          break;
        if ((*i | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (i != (uint64_t *)v5)
            goto LABEL_10;
          return result;
        }
      }
    }
  }
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::getMarkLivePass(llvm::Triple const&)::{lambda(llvm::jitlink::LinkGraph &)#1}>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD v16[8];
  unint64_t *v17;
  _OWORD v18[3];
  __int128 v19;
  _OWORD v20[3];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;

  v4 = *a2;
  v5 = *(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8);
  llvm::jitlink::LinkGraph::defined_symbols(this, v20);
  v18[0] = v20[0];
  v18[1] = v20[1];
  v18[2] = v20[2];
  v19 = v21;
  v6 = v22;
  v7 = v23;
  v8 = (uint64_t *)v21;
  if (*(_QWORD *)&v20[0] != v22 || (_QWORD)v21 != v23)
  {
    do
    {
      v9 = *v8;
      v10 = *(_QWORD *)(*v8 + 8);
      if (v10)
      {
        v11 = (uint64_t *)(*(_QWORD *)(v4 + 24) + 16);
        llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v5 + 72), *(uint64_t **)v9, v10, &v17);
        v16[0] = 0;
        v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v11, &v17, v16);
        if ((unint64_t)v17 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v13 = v17 + 1;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
        }
        if (v12)
          *(_QWORD *)(v9 + 24) |= 0x1000000000000000uLL;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v18, (uint64_t)v16);
      v8 = (uint64_t *)v19;
    }
    while (*(_QWORD *)&v18[0] != v6 || (_QWORD)v19 != v7);
  }
  *a3 = 0;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#1}>@<X0>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t *v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD v44[4];
  _QWORD *v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  int v50;

  v5 = *a2;
  v6 = *(_QWORD *)(*(_QWORD *)(*a2 + 16) + 8);
  v48 = 0;
  v49 = 0;
  v50 = 0;
  v45 = 0;
  v46 = 0;
  v47 = 0;
  v44[0] = v6;
  v44[1] = v5;
  v44[2] = &v48;
  v44[3] = &v45;
  llvm::jitlink::LinkGraph::defined_symbols(this, &v38);
  v34 = v38;
  v35 = v39;
  v36 = v40;
  v37 = v41;
  v7 = v42;
  v8 = v43;
  v9 = (uint64_t *)v41;
  if ((_QWORD)v38 != v42 || (_QWORD)v41 != v43)
  {
    do
    {
      llvm::orc::ObjectLinkingLayerJITLinkContext::claimOrExternalizeWeakAndCommonSymbols(llvm::jitlink::LinkGraph &)::{lambda(llvm::jitlink::Symbol *)#1}::operator()((uint64_t)v44, *v9);
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v34, (uint64_t)&v33);
      v9 = (uint64_t *)v37;
    }
    while ((_QWORD)v34 != v7 || (_QWORD)v37 != v8);
  }
  v11 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)this + 232);
  v13 = *((_QWORD *)this + 29) + 8 * *((unsigned int *)this + 62);
  if ((uint64_t *)v13 != v11)
  {
    v14 = v11;
    v15 = v12;
    do
    {
      v16 = *v14++;
      llvm::orc::ObjectLinkingLayerJITLinkContext::claimOrExternalizeWeakAndCommonSymbols(llvm::jitlink::LinkGraph &)::{lambda(llvm::jitlink::Symbol *)#1}::operator()((uint64_t)v44, v16);
      while (v14 != v15)
      {
        if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_15;
        ++v14;
      }
      v14 = v15;
LABEL_15:
      ;
    }
    while (v14 != (uint64_t *)v13);
  }
  v17 = *(uint64_t **)(v5 + 24);
  v18 = v48;
  v48 = 0;
  v19 = v50;
  v50 = 0;
  *(_QWORD *)&v38 = v18;
  v34 = 0uLL;
  v20 = v49;
  v49 = 0;
  *((_QWORD *)&v38 + 1) = v20;
  LODWORD(v39) = v19;
  LODWORD(v35) = 0;
  llvm::orc::ExecutionSession::OL_defineMaterializing(v17, (int32x2_t *)&v38, a3);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v38);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v34);
  v21 = v45;
  if (*a3)
  {
    if (!v45)
      return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v48);
    goto LABEL_26;
  }
  v22 = v46;
  if (v45 != v46)
  {
    do
    {
      v23 = (uint64_t *)(*(_QWORD *)(v5 + 24) + 16);
      *(_QWORD *)&v38 = 0;
      v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v23, v21, &v38);
      v25 = v21[1];
      if (v24)
        *(_QWORD *)(v25 + 24) |= 0x1000000000000000uLL;
      else
        llvm::jitlink::LinkGraph::makeExternal((uint64_t)this, v25);
      v21 += 2;
    }
    while (v21 != v22);
    v21 = v45;
  }
  *a3 = 0;
  if (v21)
  {
LABEL_26:
    v26 = v46;
    v27 = v21;
    if (v46 != v21)
    {
      do
      {
        v29 = *(v26 - 2);
        v26 -= 2;
        v28 = v29;
        if ((unint64_t)(v29 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v30 = (unint64_t *)(v28 + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
        }
      }
      while (v26 != v21);
      v27 = v45;
    }
    v46 = v21;
    operator delete(v27);
  }
  return llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::~DenseMap((uint64_t)&v48);
}

void llvm::orc::ObjectLinkingLayerJITLinkContext::claimOrExternalizeWeakAndCommonSymbols(llvm::jitlink::LinkGraph &)::{lambda(llvm::jitlink::Symbol *)#1}::operator()(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v6;
  uint64_t *v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int16 v13;
  unint64_t ***v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t **v17;
  unint64_t **v18;
  unint64_t **v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  unint64_t **v25;
  unint64_t **v26;
  unint64_t *v27;
  unint64_t **v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  unint64_t *v36;
  uint64_t v37;

  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v4 = *(_QWORD *)(a2 + 24);
    if ((v4 & 0x200000000000000) != 0 && (v4 & 0xC00000000000000) != 0x800000000000000)
    {
      v6 = *(_QWORD *)(a1 + 8);
      llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)a1 + 72), *(uint64_t **)a2, v2, &v36);
      v7 = (uint64_t *)(*(_QWORD *)(v6 + 24) + 16);
      llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)a1 + 72), *(uint64_t **)a2, *(_QWORD *)(a2 + 8), &v35);
      v37 = 0;
      v8 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(v7, &v35, &v37);
      if ((unint64_t)v35 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v9 = v35 + 1;
        do
          v10 = __ldaxr(v9);
        while (__stlxr(v10 - 1, v9));
      }
      if ((v8 & 1) == 0)
      {
        v11 = *(_QWORD *)(a2 + 24);
        v12 = HIBYTE(v11) & 0x20;
        if ((v11 & 0xC00000000000000) != 0)
          v13 = 2;
        else
          v13 = 18;
        *((_WORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>,llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::JITSymbolFlags>>::FindAndConstruct(*(uint64_t **)(a1 + 16), (uint64_t *)&v36)+ 4) = ((unsigned __int16)v13 | (unsigned __int16)v12) << 8;
        v14 = *(unint64_t ****)(a1 + 24);
        v15 = v36;
        v36 = 0;
        v17 = v14[1];
        v16 = (unint64_t)v14[2];
        if ((unint64_t)v17 >= v16)
        {
          v19 = *v14;
          v20 = ((char *)v17 - (char *)*v14) >> 4;
          v21 = v20 + 1;
          if ((unint64_t)(v20 + 1) >> 60)
            abort();
          v22 = v16 - (_QWORD)v19;
          if (v22 >> 3 > v21)
            v21 = v22 >> 3;
          if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF0)
            v23 = 0xFFFFFFFFFFFFFFFLL;
          else
            v23 = v21;
          if (v23 >> 60)
            std::__throw_bad_array_new_length[abi:nn180100]();
          v24 = (char *)operator new(16 * v23);
          v25 = (unint64_t **)&v24[16 * v20];
          v26 = (unint64_t **)&v24[16 * v23];
          *v25 = v15;
          v25[1] = (unint64_t *)a2;
          v18 = v25 + 2;
          if (v17 == v19)
          {
            *v14 = v25;
            v14[1] = v18;
            v14[2] = v26;
          }
          else
          {
            do
            {
              v27 = *(v17 - 2);
              v17 -= 2;
              *(v25 - 2) = v27;
              v25 -= 2;
              *v17 = 0;
              v25[1] = v17[1];
            }
            while (v17 != v19);
            v17 = *v14;
            v28 = v14[1];
            *v14 = v25;
            v14[1] = v18;
            v14[2] = v26;
            while (v28 != v17)
            {
              v30 = (uint64_t)*(v28 - 2);
              v28 -= 2;
              v29 = v30;
              if ((unint64_t)(v30 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
              {
                v31 = (unint64_t *)(v29 + 8);
                do
                  v32 = __ldaxr(v31);
                while (__stlxr(v32 - 1, v31));
              }
            }
          }
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v17 = v15;
          v17[1] = (unint64_t *)a2;
          v18 = v17 + 2;
        }
        v14[1] = v18;
      }
      if ((unint64_t)v36 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v33 = v36 + 1;
        do
          v34 = __ldaxr(v33);
        while (__stlxr(v34 - 1, v33));
      }
    }
  }
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::orc::ObjectLinkingLayerJITLinkContext::modifyPassConfig(llvm::jitlink::LinkGraph &,llvm::jitlink::PassConfiguration &)::{lambda(llvm::jitlink::LinkGraph &)#2}>@<X0>(llvm::jitlink::LinkGraph *this@<X1>, uint64_t *a2@<X0>, _QWORD *a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD **v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  _QWORD *v18;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD **v29;
  _QWORD **v30;
  _QWORD **v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  int v51;
  int v52;
  uint64_t v53;
  unint64_t v54;
  _QWORD *v55;
  __n128 v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  char v67;
  unint64_t *v68;
  unint64_t v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  BOOL v78;
  _QWORD *v79;
  uint64_t v81;
  _QWORD *v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t *v98;
  _QWORD *v99;
  uint64_t *v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t *v104;
  uint64_t v105;
  BOOL v106;
  _QWORD *v107;
  _QWORD *v108;
  uint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  uint64_t *v112;
  uint64_t *v113;
  uint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  int v117;
  uint64_t v118;
  _QWORD *v119;
  unint64_t v120;
  unint64_t v121;
  unsigned int v122;
  unsigned int v123;
  BOOL v124;
  uint64_t v125;
  _QWORD *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  llvm::jitlink::LinkGraph *v140;
  _QWORD *v141;
  uint64_t v142;
  _QWORD *v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  unint64_t *v148;
  _QWORD *v149;
  uint64_t v150;
  unsigned int v151;
  __int128 v152;
  __int128 v153;
  __int128 v154;
  __n128 v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  uint64_t v159;
  unsigned int v160;
  unint64_t *v161;
  _QWORD *v162;
  int v163;
  unsigned int v164;
  __int128 v165;
  __int128 v166;
  __int128 v167;
  __n128 v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  __int128 v174;
  _OWORD v175[2];
  __n128 v176;
  uint64_t v177;

  v177 = *MEMORY[0x24BDAC8D0];
  v4 = *a2;
  v147 = **(_QWORD ***)(*a2 + 24);
  v142 = v147[4];
  v171 = 0;
  v172 = 0;
  v173 = 0;
  *(_QWORD *)&v174 = v175;
  *((_QWORD *)&v174 + 1) = 0x600000000;
  llvm::jitlink::LinkGraph::blocks(this, &v165);
  v152 = v165;
  v153 = v166;
  v154 = v167;
  v155 = v168;
  v5 = v169;
  v6 = v170;
  v7 = (_QWORD **)v168.n128_u64[0];
  if ((_QWORD)v165 != v169 || v168.n128_u64[0] != v170)
  {
    do
    {
      v162 = *v7;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v171, (uint64_t *)&v162);
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)&v152, (uint64_t)&v162);
      v7 = (_QWORD **)v155.n128_u64[0];
    }
    while ((_QWORD)v152 != v5 || v155.n128_u64[0] != v6);
  }
  v140 = this;
  llvm::jitlink::LinkGraph::blocks(this, &v165);
  v152 = v165;
  v153 = v166;
  v154 = v167;
  v155 = v168;
  v9 = v169;
  v10 = v170;
  v11 = (uint64_t *)v168.n128_u64[0];
  if ((_QWORD)v165 != v169 || v168.n128_u64[0] != v170)
  {
    do
    {
      v149 = 0;
      v149 = (_QWORD *)*v11;
      v12 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v171, (uint64_t *)&v149);
      v13 = v149[5];
      v14 = v149[6];
      if (v13 != v14)
      {
        v15 = (uint64_t)(v12 + 1);
        do
        {
          if ((*(_QWORD *)(*(_QWORD *)v13 + 24) & 0xC00000000000000) == 0x800000000000000)
          {
            v16 = *(_QWORD *)(*(_QWORD *)v13 + 16);
            if ((*(_BYTE *)(v16 + 8) & 2) == 0 && (_QWORD *)v16 != v149)
            {
              v161 = *(unint64_t **)(*(_QWORD *)v13 + 16);
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v15, &v161, (uint64_t)&v162);
              v161 = (unint64_t *)v16;
              v162 = 0;
              v17 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::LookupBucketFor<llvm::jitlink::Block *>(v171, v173, v16, &v162);
              v18 = v162;
              if ((v17 & 1) == 0)
              {
                v18 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::InsertIntoBucketImpl<llvm::jitlink::Block *>((uint64_t)&v171, (uint64_t *)&v161, v162);
                *v18 = v16;
                v18[7] = 0;
                *(_OWORD *)(v18 + 1) = 0u;
                *(_OWORD *)(v18 + 3) = 0u;
                *(_OWORD *)(v18 + 5) = 0u;
                *((_BYTE *)v18 + 56) = 1;
              }
              llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v18 + 4), &v149, (uint64_t)&v162);
            }
          }
          v13 += 32;
        }
        while (v13 != v14);
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)&v152, (uint64_t)&v162);
      v11 = (uint64_t *)v155.n128_u64[0];
    }
    while ((_QWORD)v152 != v9 || v155.n128_u64[0] != v10);
  }
  v20 = v171;
  v21 = v172;
  v22 = v173;
  if ((_DWORD)v172)
  {
    v23 = v171;
    if (v173)
    {
      v24 = (unint64_t)v173 << 6;
      v23 = v171;
      while ((*(_QWORD *)v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v23 += 64;
        v24 -= 64;
        if (!v24)
          goto LABEL_29;
      }
    }
    v43 = v171 + ((unint64_t)v173 << 6);
LABEL_62:
    if (v23 != v43)
    {
      if (*(_DWORD *)(v23 + 40) && *(_DWORD *)(v23 + 16))
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v174, *(_QWORD *)v23);
      while (1)
      {
        v23 += 64;
        if (v23 == v43)
          break;
        if ((*(_QWORD *)v23 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_62;
      }
    }
  }
LABEL_29:
  v25 = DWORD2(v174);
  v146 = v4;
  if (DWORD2(v174))
  {
    do
    {
      v26 = *(_QWORD *)(v174 + 8 * v25 - 8);
      DWORD2(v174) = v25 - 1;
      *(_QWORD *)&v152 = v26;
      v27 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v171, (uint64_t *)&v152);
      *((_BYTE *)v27 + 56) = 0;
      v28 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v27 + 4));
      v144 = v27[4] + 8 * *((unsigned int *)v27 + 12);
      if ((_QWORD *)v144 != v28)
      {
        v30 = (_QWORD **)v28;
        v31 = v29;
        do
        {
          v162 = 0;
          v32 = *v30;
          v162 = *v30;
          v33 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct((uint64_t)&v171, (uint64_t *)&v162);
          v34 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v27 + 1));
          v36 = v27[1] + 8 * *((unsigned int *)v27 + 6);
          if ((uint64_t *)v36 != v34)
          {
            v37 = v34;
            v38 = v35;
            do
            {
              v149 = 0;
              v149 = (_QWORD *)*v37;
              if (v32 != v149)
              {
                llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v33 + 1), &v149, (uint64_t)&v165);
                if ((_BYTE)v166 && *((_BYTE *)v33 + 56) == 0)
                {
                  *((_BYTE *)v33 + 56) = 1;
                  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v174, (uint64_t)v32);
                }
              }
              while (++v37 != v38)
              {
                if ((*v37 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_45;
              }
              v37 = v38;
LABEL_45:
              ;
            }
            while (v37 != (uint64_t *)v36);
          }
          if (++v30 == v31)
          {
            v30 = v31;
            v4 = v146;
          }
          else
          {
            v4 = v146;
            while (((unint64_t)*v30 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              if (++v30 == v31)
              {
                v30 = v31;
                break;
              }
            }
          }
        }
        while (v30 != (_QWORD **)v144);
      }
      v25 = DWORD2(v174);
    }
    while (DWORD2(v174));
    v20 = v171;
    v21 = v172;
    v22 = v173;
  }
  v165 = 0uLL;
  LODWORD(v166) = 0;
  if (v21)
  {
    v40 = v20;
    if ((_DWORD)v22)
    {
      v41 = v22 << 6;
      v40 = v20;
      while ((*(_QWORD *)v40 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v40 += 64;
        v41 -= 64;
        if (!v41)
        {
          v42 = 0;
          goto LABEL_87;
        }
      }
    }
    v44 = v20 + (v22 << 6);
    if (v40 != v44)
    {
      v45 = 0;
LABEL_71:
      *(_QWORD *)&v152 = 0;
      v46 = v166;
      v48 = v152;
      if (v47)
      {
        v49 = *(_QWORD *)(v152 + 8);
        goto LABEL_78;
      }
      if (4 * DWORD2(v165) + 4 >= 3 * v46)
      {
        v52 = 2 * v46;
      }
      else
      {
        if (v46 + ~DWORD2(v165) - HIDWORD(v165) > v46 >> 3)
        {
LABEL_75:
          ++DWORD2(v165);
          if (*(_QWORD *)v48 != -4096)
            --HIDWORD(v165);
          v49 = 0;
          *(_QWORD *)v48 = *(_QWORD *)v40;
          *(_QWORD *)(v48 + 8) = 0;
          *(_QWORD *)(v48 + 16) = 0;
          *(_QWORD *)(v48 + 24) = 0;
LABEL_78:
          MEMORY[0x24BD1B398](v49, 8);
          *(_QWORD *)(v48 + 8) = 0;
          *(_QWORD *)(v48 + 16) = 0;
          *(_DWORD *)(v48 + 24) = 0;
          *(_QWORD *)(v48 + 8) = *(_QWORD *)(v40 + 8);
          *(_QWORD *)(v40 + 8) = 0;
          *(_DWORD *)(v48 + 16) = *(_DWORD *)(v40 + 16);
          *(_DWORD *)(v40 + 16) = 0;
          v50 = *(_DWORD *)(v48 + 20);
          *(_DWORD *)(v48 + 20) = *(_DWORD *)(v40 + 20);
          *(_DWORD *)(v40 + 20) = v50;
          v51 = *(_DWORD *)(v48 + 24);
          *(_DWORD *)(v48 + 24) = *(_DWORD *)(v40 + 24);
          *(_DWORD *)(v40 + 24) = v51;
          while (1)
          {
            v40 += 64;
            if (v40 == v44)
              break;
            if ((*(_QWORD *)v40 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              if (v40 != v44)
                goto LABEL_71;
              break;
            }
          }
          v53 = *((_QWORD *)&v165 + 1);
          v41 = v165;
          v42 = v166;
          goto LABEL_89;
        }
        v52 = v46;
      }
      llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::NonOwningSymbolStringPtr,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>>>>::grow((uint64_t)&v165, v52);
      *(_QWORD *)&v152 = 0;
      v45 = v165;
      v48 = v152;
      goto LABEL_75;
    }
  }
  v42 = 0;
  v41 = 0;
LABEL_87:
  v53 = 0;
LABEL_89:
  *(_QWORD *)&v152 = *(_QWORD *)(*(_QWORD *)(v4 + 16) + 8);
  *((_QWORD *)&v152 + 1) = v41;
  *(_QWORD *)&v153 = v53;
  DWORD2(v153) = v42;
  v154 = 0uLL;
  v155.n128_u32[0] = 0;
  v155.n128_u64[1] = 0;
  v156 = 0;
  v157 = 0;
  v158 = 0;
  v159 = 0;
  v160 = 0;
  MEMORY[0x24BD1B398](0, 8);
  MEMORY[0x24BD1B398](0, 8);
  if ((_OWORD *)v174 != v175)
    free((void *)v174);
  if (v173)
  {
    v54 = (unint64_t)v173 << 6;
    v55 = (_QWORD *)v20;
    do
    {
      if ((*v55 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        MEMORY[0x24BD1B398](v55[4], 8);
        MEMORY[0x24BD1B398](v55[1], 8);
      }
      v55 += 8;
      v54 -= 64;
    }
    while (v54);
  }
  MEMORY[0x24BD1B398](v20, 8);
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v149 = 0;
  v150 = 0;
  v151 = 0;
  llvm::jitlink::LinkGraph::defined_symbols(v140, &v165);
  v174 = v165;
  v175[0] = v166;
  v56 = v168;
  v175[1] = v167;
  v176 = v168;
  v57 = v169;
  v58 = v170;
  v59 = v168.n128_u64[0];
  if ((_QWORD)v165 != v169 || v168.n128_u64[0] != v170)
  {
    while (1)
    {
      v62 = *(_QWORD *)v59;
      if ((*(_QWORD *)(*(_QWORD *)v59 + 24) & 0xC00000000000000) != 0x800000000000000)
      {
        v63 = llvm::orc::ObjectLinkingLayerJITLinkContext::BlockDependenciesMap::operator[]((uint64_t)&v152, *(_QWORD *)(v62 + 16));
        if (*(_DWORD *)(v63 + 8) | *(_DWORD *)(v63 + 32))
          break;
      }
LABEL_129:
      v56 = llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v174, (uint64_t)&v162);
      v59 = v176.n128_u64[0];
      if ((_QWORD)v174 == v57 && v176.n128_u64[0] == v58)
        goto LABEL_134;
    }
    v64 = v63;
    v65 = *(_QWORD *)(v62 + 16);
    v162 = 0;
    v66 = v151;
    v67 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::LookupBucketFor<llvm::jitlink::Block const*>((uint64_t)v149, v151, v65, &v162);
    v61 = v162;
    if ((v67 & 1) != 0)
    {
LABEL_110:
      llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v142 + 72), *(uint64_t **)v62, *(_QWORD *)(v62 + 8), &v161);
      llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v61 + 1), &v161, (uint64_t)&v162);
      if ((unint64_t)v161 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v68 = v161 + 1;
        do
          v69 = __ldaxr(v68);
        while (__stlxr(v69 - 1, v68));
      }
      v70 = *(_QWORD **)(v62 + 16);
      v161 = 0;
      v162 = v70;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(&v171, &v162, &v161) & 1) == 0)
      {
        v161 = *(unint64_t **)(v62 + 16);
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v171, &v161, (uint64_t)&v162);
        if (*(_DWORD *)(v64 + 8))
        {
          v162 = v147;
          v71 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v61 + 4, (uint64_t *)&v162)+ 1;
          if ((_QWORD *)v64 != v71)
            llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::copyFrom((uint64_t)v71, v64);
        }
        v72 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v64 + 24);
        v74 = *(_QWORD *)(v64 + 24) + 8 * *(unsigned int *)(v64 + 40);
        if ((uint64_t *)v74 != v72)
        {
          v75 = v72;
          v76 = v73;
          do
          {
            v77 = *v75;
            v162 = 0;
            if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v4 + 88), *(_DWORD *)(v4 + 104), v77, &v162))v78 = v162 == (_QWORD *)(*(_QWORD *)(v4 + 88) + 16 * *(unsigned int *)(v4 + 104));
            else
              v78 = 1;
            if (!v78)
            {
              v79 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct(v61 + 4, v162 + 1);
              llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v79 + 1), v75, (uint64_t)&v162);
            }
            while (++v75 != v76)
            {
              if ((*v75 | 8) != 0xFFFFFFFFFFFFFFF8)
                goto LABEL_128;
            }
            v75 = v76;
LABEL_128:
            ;
          }
          while (v75 != (uint64_t *)v74);
        }
      }
      goto LABEL_129;
    }
    if (4 * (int)v150 + 4 >= 3 * v66)
    {
      v60 = 2 * v66;
    }
    else
    {
      if (v66 + ~(_DWORD)v150 - HIDWORD(v150) > v66 >> 3)
        goto LABEL_107;
      v60 = v66;
    }
    llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::SymbolDependenceGroup,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::SymbolDependenceGroup>>::grow((uint64_t)&v149, v60);
    v162 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::LookupBucketFor<llvm::jitlink::Block const*>((uint64_t)v149, v151, v65, &v162);
    v61 = v162;
LABEL_107:
    LODWORD(v150) = v150 + 1;
    if (*v61 != -4096)
      --HIDWORD(v150);
    *v61 = v65;
    *(_OWORD *)(v61 + 1) = 0u;
    *(_OWORD *)(v61 + 3) = 0u;
    *(_OWORD *)(v61 + 5) = 0u;
    goto LABEL_110;
  }
LABEL_134:
  LODWORD(v166) = 0;
  v165 = 0uLL;
  *((_QWORD *)&v166 + 1) = 0;
  *(_QWORD *)&v167 = 0;
  DWORD2(v167) = 0;
  v81 = *(_QWORD *)(v4 + 16);
  v82 = *(_QWORD **)(v81 + 168);
  v83 = *(_QWORD **)(v81 + 176);
  if (v82 != v83)
  {
    v145 = v4 + 88;
    v141 = *(_QWORD **)(v81 + 176);
    do
    {
      (*(void (**)(_QWORD **__return_ptr, _QWORD, _QWORD, __n128))(*(_QWORD *)*v82 + 72))(&v162, *v82, *(_QWORD *)(v4 + 24), v56);
      if (v163)
      {
        if (v164)
        {
          v84 = 32 * v164;
          v85 = v162;
          while ((*v85 | 8) == 0xFFFFFFFFFFFFFFF8)
          {
            v85 += 4;
            v84 -= 32;
            if (!v84)
              goto LABEL_183;
          }
        }
        else
        {
          v85 = v162;
        }
        v86 = &v162[4 * v164];
        while (v85 != v86)
        {
          v143 = v82;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v165, v85, (uint64_t)&v174);
          v87 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)(v85 + 1));
          v89 = v85[1] + 8 * *((unsigned int *)v85 + 6);
          if ((_QWORD *)v89 != v87)
          {
            v90 = v87;
            v91 = v88;
            do
            {
              v92 = *v90;
              if ((*(_QWORD *)(*v90 + 24) & 0xC00000000000000) == 0x800000000000000)
              {
                v93 = llvm::orc::ObjectLinkingLayerJITLinkContext::BlockDependenciesMap::operator[]((uint64_t)&v152, *(_QWORD *)(v92 + 16));
                v94 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v93);
                v96 = *(_QWORD *)v93 + 8 * *(unsigned int *)(v93 + 16);
                if ((uint64_t *)v96 != v94)
                {
                  v97 = v94;
                  v98 = v95;
                  do
                  {
                    v161 = v147;
                    v99 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct((uint64_t *)&v166 + 1, (uint64_t *)&v161);
                    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v99 + 1), v97, (uint64_t)&v174);
                    while (++v97 != v98)
                    {
                      if ((*v97 | 8) != 0xFFFFFFFFFFFFFFF8)
                        goto LABEL_155;
                    }
                    v97 = v98;
LABEL_155:
                    ;
                  }
                  while (v97 != (uint64_t *)v96);
                }
                v100 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v93 + 24);
                v102 = *(_QWORD *)(v93 + 24) + 8 * *(unsigned int *)(v93 + 40);
                v4 = v146;
                if ((uint64_t *)v102 == v100)
                  goto LABEL_175;
                v103 = v100;
                v104 = v101;
                while (1)
                {
                  v105 = *v103;
                  *(_QWORD *)&v174 = 0;
                  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::SymbolStringPtr>>::LookupBucketFor<llvm::orc::SymbolStringPtr>(*(_QWORD *)(v146 + 88), *(_DWORD *)(v146 + 104), v105, &v174))v106 = (_QWORD)v174 == *(_QWORD *)(v146 + 88) + 16 * *(unsigned int *)(v146 + 104);
                  else
                    v106 = 1;
                  if (!v106)
                  {
                    v107 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct((uint64_t *)&v166 + 1, (uint64_t *)(v174 + 8));
                    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v107 + 1), v103, (uint64_t)&v174);
                  }
                  while (++v103 != v104)
                  {
                    if ((*v103 | 8) != 0xFFFFFFFFFFFFFFF8)
                      goto LABEL_167;
                  }
                  v103 = v104;
LABEL_167:
                  if (v103 == (uint64_t *)v102)
                    goto LABEL_175;
                }
              }
              llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(v142 + 72), *(uint64_t **)v92, *(_QWORD *)(v92 + 8), &v161);
              if ((*(_BYTE *)(*(_QWORD *)(v92 + 16) + 8) & 3) != 0)
              {
                v148 = v147;
                v108 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct((uint64_t *)&v166 + 1, (uint64_t *)&v148);
              }
              else
              {
                v148 = v161;
                v109 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>,llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *,llvm::DenseMapInfo<llvm::orc::NonOwningSymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::NonOwningSymbolStringPtr,llvm::orc::JITDylib::EmissionDepUnit *>>::FindAndConstruct(v145, (uint64_t *)&v148);
                v108 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::FindAndConstruct((uint64_t *)&v166 + 1, v109 + 1);
              }
              llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)(v108 + 1), (uint64_t *)&v161, (uint64_t)&v174);
              if ((unint64_t)v161 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
              {
                v110 = v161 + 1;
                do
                  v111 = __ldaxr(v110);
                while (__stlxr(v111 - 1, v110));
              }
LABEL_175:
              while (++v90 != v91)
              {
                if ((*v90 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_179;
              }
              v90 = v91;
LABEL_179:
              ;
            }
            while (v90 != (_QWORD *)v89);
          }
          v85 += 4;
          v82 = v143;
          v83 = v141;
          if (v85 == v86)
            break;
          while ((*v85 | 8) == 0xFFFFFFFFFFFFFFF8)
          {
            v85 += 4;
            if (v85 == v86)
              goto LABEL_183;
          }
        }
LABEL_183:
        MEMORY[0x24BD1B398](0, 8);
      }
      v112 = v162;
      if (v164)
      {
        v113 = &v162[4 * v164];
        do
        {
          v114 = *v112;
          if ((*v112 | 8) != 0xFFFFFFFFFFFFFFF8)
          {
            MEMORY[0x24BD1B398](v112[1], 8);
            v114 = *v112;
          }
          if ((unint64_t)(v114 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
          {
            v115 = (unint64_t *)(v114 + 8);
            do
              v116 = __ldaxr(v115);
            while (__stlxr(v116 - 1, v115));
          }
          v112 += 4;
        }
        while (v112 != v113);
        v112 = v162;
      }
      MEMORY[0x24BD1B398](v112, 8);
      ++v82;
    }
    while (v82 != v83);
  }
  v117 = v150;
  if ((_DWORD)v150 == -1)
  {
    v118 = (uint64_t)v149;
    v119 = &v149[7 * v151];
    if (v151)
      goto LABEL_201;
  }
  else
  {
    v120 = (4 * ((int)v150 + 1) / 3u + 1) | ((unint64_t)(4 * ((int)v150 + 1) / 3u + 1) >> 1);
    v121 = v120 | (v120 >> 2) | ((v120 | (v120 >> 2)) >> 4);
    v122 = ((v121 | (v121 >> 8)) >> 16) | v121 | (v121 >> 8);
    v123 = v151;
    if (v151 <= v122)
    {
      llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::SymbolDependenceGroup,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::SymbolDependenceGroup>>::grow((uint64_t)&v149, v122 + 1);
      v117 = v150;
      v123 = v151;
    }
    if (!v117)
      goto LABEL_210;
    v118 = (uint64_t)v149;
    v119 = &v149[7 * v123];
    if (v123)
    {
LABEL_201:
      while ((*(_QWORD *)v118 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v118 += 56;
        if ((_QWORD *)v118 == v119)
          goto LABEL_210;
      }
    }
  }
  if ((_QWORD *)v118 != v119)
  {
LABEL_205:
    if (*(_DWORD *)(v118 + 40))
      std::vector<llvm::orc::SymbolDependenceGroup>::push_back[abi:nn180100]((uint64_t *)(v4 + 112), v118 + 8);
    while (1)
    {
      v118 += 56;
      if ((_QWORD *)v118 == v119)
        break;
      if ((*(_QWORD *)v118 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if ((_QWORD *)v118 != v119)
          goto LABEL_205;
        break;
      }
    }
  }
LABEL_210:
  if (DWORD2(v165))
    v124 = (_DWORD)v167 == 0;
  else
    v124 = 1;
  if (!v124)
    std::vector<llvm::orc::SymbolDependenceGroup>::push_back[abi:nn180100]((uint64_t *)(v4 + 112), (uint64_t)&v165);
  *a3 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)&v166 + 8);
  MEMORY[0x24BD1B398](*((_QWORD *)&v166 + 1), 8);
  llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v165);
  v125 = (uint64_t)v149;
  if (v151)
  {
    v126 = v149 + 4;
    v127 = 56 * v151;
    do
    {
      if ((*(v126 - 4) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll((uint64_t)v126);
        MEMORY[0x24BD1B398](*v126, 8);
        llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)(v126 - 3));
      }
      v126 += 7;
      v127 -= 56;
    }
    while (v127);
    v125 = (uint64_t)v149;
  }
  MEMORY[0x24BD1B398](v125, 8);
  MEMORY[0x24BD1B398](v171, 8);
  v128 = v158;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::destroyAll(v158, v160);
  MEMORY[0x24BD1B398](v128, 8);
  v129 = v155.n128_i64[1];
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::destroyAll(v155.n128_i64[1], v157);
  MEMORY[0x24BD1B398](v129, 8);
  v130 = (_QWORD *)v154;
  if (v155.n128_u32[0])
  {
    v131 = (_QWORD *)(v154 + 16 * v155.n128_u32[0]);
    do
    {
      if ((*v130 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v132 = v130[1];
        if ((unint64_t)(v132 - 1) <= 0xFFFFFFFFFFFFFFDFLL)
        {
          v133 = (unint64_t *)(v132 + 8);
          do
            v134 = __ldaxr(v133);
          while (__stlxr(v134 - 1, v133));
        }
      }
      v130 += 2;
    }
    while (v130 != v131);
    v130 = (_QWORD *)v154;
  }
  MEMORY[0x24BD1B398](v130, 8);
  v135 = *((_QWORD *)&v152 + 1);
  if (DWORD2(v153))
  {
    v136 = (_QWORD *)(*((_QWORD *)&v152 + 1) + 8);
    v137 = 32 * DWORD2(v153);
    do
    {
      if ((*(v136 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        MEMORY[0x24BD1B398](*v136, 8);
      v136 += 4;
      v137 -= 32;
    }
    while (v137);
  }
  return MEMORY[0x24BD1B398](v135, 8);
}

uint64_t llvm::orc::ObjectLinkingLayerJITLinkContext::BlockDependenciesMap::operator[](uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *InternedName;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  int v49;
  uint64_t v50;
  _QWORD v51[2];
  int v52;
  _QWORD v53[2];
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  uint64_t v62[3];
  uint64_t v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  uint64_t v67;
  int v68;

  v5 = a1 + 80;
  v4 = *(_QWORD *)(a1 + 80);
  v55 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::LookupBucketFor<llvm::jitlink::Block const*>(v4, *(_DWORD *)(v5 + 16), a2, &v55);
  v7 = *(_DWORD *)(v5 + 16);
  if (v6)
    v8 = v55;
  else
    v8 = *(_QWORD *)v5 + 56 * v7;
  if (v8 == *(_QWORD *)v5 + 56 * v7)
  {
    v42 = a2;
    v44 = 0;
    v45 = 0;
    v46 = 0;
    v47 = 0;
    v48 = 0;
    v49 = 0;
    v55 = 0;
    else
      v9 = *(_QWORD *)(a1 + 8) + 32 * *(unsigned int *)(a1 + 24);
    v10 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v9 + 8);
    v43 = *(_QWORD *)(v9 + 8) + 8 * *(unsigned int *)(v9 + 24);
    if ((uint64_t *)v43 != v10)
    {
      v12 = v10;
      v13 = v11;
      do
      {
        v14 = *v12;
        v55 = 0;
        v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::LookupBucketFor<llvm::jitlink::Block const*>(*(_QWORD *)(a1 + 56), *(_DWORD *)(a1 + 72), v14, &v55);
        v16 = *(_DWORD *)(a1 + 72);
        if (v15)
          v17 = v55;
        else
          v17 = *(_QWORD *)(a1 + 56) + 56 * v16;
        if (v17 == *(_QWORD *)(a1 + 56) + 56 * v16)
        {
          v63 = 0;
          v64 = 0;
          v65 = 0;
          v68 = 0;
          v66 = 0;
          v67 = 0;
          v18 = *(uint64_t **)(v14 + 40);
          v19 = *(uint64_t **)(v14 + 48);
          if (v18 != v19)
          {
            while (1)
            {
              v20 = *v18;
              v21 = *(_QWORD *)(*v18 + 24);
              if ((v21 & 0xC00000000000000) != 0x800000000000000)
              {
                v22 = *(_QWORD *)(v20 + 16);
                if ((*(_BYTE *)(v22 + 8) & 3) != 0)
                {
                  InternedName = llvm::orc::ObjectLinkingLayerJITLinkContext::BlockDependenciesMap::getInternedName(a1, v20);
                  v24 = &v63;
                }
                else
                {
                  if ((v21 & 0x4000000000000000) != 0 && (v21 & 0x1FFFFFFFFFFFFFFLL) == -*(_QWORD *)v22)
                    goto LABEL_22;
                  InternedName = llvm::orc::ObjectLinkingLayerJITLinkContext::BlockDependenciesMap::getInternedName(a1, v20);
                  v24 = &v66;
                }
                llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v24, InternedName, (uint64_t)&v55);
              }
LABEL_22:
              v18 += 4;
              if (v18 == v19)
              {
                v25 = v63;
                v26 = v64;
                v27 = v65;
                v28 = v66;
                v29 = v67;
                v30 = v68;
                goto LABEL_25;
              }
            }
          }
          v30 = 0;
          v28 = 0;
          v27 = 0;
          v25 = 0;
          v26 = 0;
          v29 = 0;
LABEL_25:
          v63 = 0;
          v64 = 0;
          v65 = 0;
          v66 = 0;
          v67 = 0;
          v68 = 0;
          v55 = v14;
          v56 = v25;
          v50 = v14;
          v51[0] = 0;
          v57 = v26;
          v51[1] = 0;
          v58 = v27;
          v52 = 0;
          v59 = v28;
          v53[0] = 0;
          v60 = v29;
          v53[1] = 0;
          v61 = v30;
          v54 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::try_emplace<llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>((uint64_t)v62, a1 + 56, &v55, (uint64_t)&v56);
          v17 = v62[0];
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v59);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v56);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)v53);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)v51);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v66);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v63);
        }
        v31 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v17 + 32);
        v33 = *(_QWORD *)(v17 + 32) + 8 * *(unsigned int *)(v17 + 48);
        if ((uint64_t *)v33 != v31)
        {
          v34 = v31;
          v35 = v32;
          do
          {
            llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v47, v34, (uint64_t)&v55);
            while (++v34 != v35)
            {
              if ((*v34 | 8) != 0xFFFFFFFFFFFFFFF8)
                goto LABEL_33;
            }
            v34 = v35;
LABEL_33:
            ;
          }
          while (v34 != (uint64_t *)v33);
        }
        v36 = llvm::detail::DenseSetImpl<llvm::orc::SymbolStringPtr,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>::begin(v17 + 8);
        v38 = *(_QWORD *)(v17 + 8) + 8 * *(unsigned int *)(v17 + 24);
        if ((uint64_t *)v38 == v36)
          goto LABEL_42;
        v39 = v36;
        v40 = v37;
        do
        {
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>,llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v44, v39, (uint64_t)&v55);
          while (++v39 != v40)
          {
            if ((*v39 | 8) != 0xFFFFFFFFFFFFFFF8)
              goto LABEL_41;
          }
          v39 = v40;
LABEL_41:
          ;
        }
        while (v39 != (uint64_t *)v38);
LABEL_42:
        while (++v12 != v13)
        {
          if ((*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_46;
        }
        v12 = v13;
LABEL_46:
        ;
      }
      while (v12 != (uint64_t *)v43);
    }
    v55 = v42;
    v56 = v44;
    v44 = 0;
    v57 = v45;
    v45 = 0;
    v58 = v46;
    v46 = 0;
    v59 = v47;
    v47 = 0;
    v60 = v48;
    v48 = 0;
    v61 = v49;
    v49 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::try_emplace<llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>((uint64_t)&v50, v5, &v55, (uint64_t)&v56);
    v8 = v50;
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v59);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v56);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v47);
    llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap((uint64_t)&v44);
  }
  return v8 + 8;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::InsertIntoBucketImpl<llvm::jitlink::Block *>(a1, a2, v7);
    *v5 = *a2;
    v5[7] = 0;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    *((_BYTE *)v5 + 56) = 1;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::LookupBucketFor<llvm::jitlink::Block *>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + (v4 << 6));
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + (v4 << 6));
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::InsertIntoBucketImpl<llvm::jitlink::Block *>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new((unint64_t)v8 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = v10 << 6;
      do
      {
        *result = -4096;
        result += 8;
        v11 -= 64;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = v3 << 6;
      do
      {
        v14 = *(_QWORD *)(v4 + v12);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>,llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::ObjectLinkingLayerJITLinkContext::computeBlockNonLocalDeps(llvm::jitlink::LinkGraph &)::BlockInfo>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          v15 = v20;
          v16 = v4 + v12;
          v17 = *(_QWORD *)(v4 + v12);
          *(_DWORD *)(v20 + 24) = 0;
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)v15 = v17;
          *(_QWORD *)(v15 + 8) = *(_QWORD *)(v4 + v12 + 8);
          *(_QWORD *)(v16 + 8) = 0;
          *(_DWORD *)(v15 + 16) = *(_DWORD *)(v4 + v12 + 16);
          *(_DWORD *)(v16 + 16) = 0;
          LODWORD(v17) = *(_DWORD *)(v15 + 20);
          *(_DWORD *)(v15 + 20) = *(_DWORD *)(v4 + v12 + 20);
          *(_DWORD *)(v16 + 20) = v17;
          LODWORD(v17) = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v15 + 24) = *(_DWORD *)(v4 + v12 + 24);
          *(_DWORD *)(v16 + 24) = v17;
          *(_DWORD *)(v15 + 48) = 0;
          *(_QWORD *)(v15 + 32) = 0;
          *(_QWORD *)(v15 + 40) = 0;
          *(_QWORD *)(v15 + 32) = *(_QWORD *)(v4 + v12 + 32);
          *(_QWORD *)(v16 + 32) = 0;
          *(_DWORD *)(v15 + 40) = *(_DWORD *)(v4 + v12 + 40);
          *(_DWORD *)(v16 + 40) = 0;
          LODWORD(v17) = *(_DWORD *)(v15 + 44);
          *(_DWORD *)(v15 + 44) = *(_DWORD *)(v4 + v12 + 44);
          *(_DWORD *)(v16 + 44) = v17;
          LODWORD(v17) = *(_DWORD *)(v15 + 48);
          *(_DWORD *)(v15 + 48) = *(_DWORD *)(v4 + v12 + 48);
          *(_DWORD *)(v16 + 48) = v17;
          *(_BYTE *)(v15 + 56) = *(_BYTE *)(v4 + v12 + 56);
          ++*(_DWORD *)(a1 + 8);
          MEMORY[0x24BD1B398](0, 8);
          MEMORY[0x24BD1B398](*(_QWORD *)(v4 + v12 + 8), 8);
        }
        v12 += 64;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = v18 << 6;
    do
    {
      *result = -4096;
      result += 8;
      v19 -= 64;
    }
    while (v19);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::LookupBucketFor<llvm::jitlink::Block const*>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 56 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 56 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

uint64_t *llvm::orc::ObjectLinkingLayerJITLinkContext::BlockDependenciesMap::getInternedName(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  unint64_t *v8;
  char v9;
  unsigned int v10;
  int v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t *v17;
  uint64_t *v18;

  v5 = a1 + 32;
  v4 = *(_QWORD *)(a1 + 32);
  v18 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(v4, *(_DWORD *)(v5 + 16), a2, &v18);
  v7 = v18;
  if (!v6)
    v7 = (uint64_t *)(*(_QWORD *)v5 + 16 * *(unsigned int *)(v5 + 16));
  if (v7 == (uint64_t *)(*(_QWORD *)v5 + 16 * *(unsigned int *)(v5 + 16)))
  {
    llvm::orc::ExecutorProcessControl::intern(*(_QWORD *)(*(_QWORD *)a1 + 72), *(uint64_t **)a2, *(_QWORD *)(a2 + 8), &v17);
    v8 = v17;
    v17 = 0;
    v18 = 0;
    v9 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), a2, &v18);
    v7 = v18;
    if ((v9 & 1) != 0)
    {
LABEL_10:
      if ((unint64_t)v8 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v12 = v8 + 1;
        do
          v13 = __ldaxr(v12);
        while (__stlxr(v13 - 1, v12));
      }
      if ((unint64_t)v17 - 1 <= 0xFFFFFFFFFFFFFFDFLL)
      {
        v14 = v17 + 1;
        do
          v15 = __ldaxr(v14);
        while (__stlxr(v15 - 1, v14));
      }
      return v7 + 1;
    }
    v10 = *(_DWORD *)(a1 + 48);
    v11 = *(_DWORD *)(a1 + 40);
    if (4 * v11 + 4 >= 3 * v10)
    {
      v10 *= 2;
    }
    else if (v10 + ~v11 - *(_DWORD *)(a1 + 44) > v10 >> 3)
    {
LABEL_7:
      ++*(_DWORD *)(a1 + 40);
      if (*v7 != -4096)
        --*(_DWORD *)(a1 + 44);
      *v7 = a2;
      v7[1] = (uint64_t)v8;
      v8 = 0;
      goto LABEL_10;
    }
    llvm::DenseMap<llvm::jitlink::Symbol const*,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::jitlink::Symbol const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol const*,llvm::orc::SymbolStringPtr>>::grow(v5, v10);
    v18 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)(a1 + 32), *(_DWORD *)(a1 + 48), a2, &v18);
    v7 = v18;
    goto LABEL_7;
  }
  return v7 + 1;
}

_QWORD *llvm::DenseMap<llvm::jitlink::Symbol const*,llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::jitlink::Symbol const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol const*,llvm::orc::SymbolStringPtr>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (_QWORD *)(v4 + 8);
      v13 = 16 * v3;
      do
      {
        v14 = *(v12 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>,llvm::jitlink::Block *,unsigned long,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,unsigned long>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(v12 - 1);
          v15[1] = 0;
          v15[1] = *v12;
          *v12 = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 16 * v16;
    do
    {
      *result = -4096;
      result += 2;
      v17 -= 16;
    }
    while (v17);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::try_emplace<llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  int v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;

  v15 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::LookupBucketFor<llvm::jitlink::Block const*>(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v15);
  v9 = v15;
  if ((result & 1) != 0)
  {
    v10 = 0;
    goto LABEL_8;
  }
  v11 = *(_DWORD *)(a2 + 8);
  v12 = *(_DWORD *)(a2 + 16);
  if (4 * v11 + 4 >= 3 * v12)
  {
    v12 *= 2;
    goto LABEL_10;
  }
  if (v12 + ~v11 - *(_DWORD *)(a2 + 12) <= v12 >> 3)
  {
LABEL_10:
    llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::grow(a2, v12);
    v15 = 0;
    result = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::LookupBucketFor<llvm::jitlink::Block const*>(*(_QWORD *)a2, *(_DWORD *)(a2 + 16), *a3, &v15);
    v9 = v15;
  }
  ++*(_DWORD *)(a2 + 8);
  if (*(_QWORD *)v9 != -4096)
    --*(_DWORD *)(a2 + 12);
  v13 = *a3;
  *(_QWORD *)(v9 + 8) = 0;
  *(_QWORD *)(v9 + 16) = 0;
  *(_QWORD *)v9 = v13;
  *(_DWORD *)(v9 + 24) = 0;
  *(_QWORD *)(v9 + 8) = *(_QWORD *)a4;
  *(_QWORD *)a4 = 0;
  *(_DWORD *)(v9 + 16) = *(_DWORD *)(a4 + 8);
  *(_DWORD *)(a4 + 8) = 0;
  LODWORD(v13) = *(_DWORD *)(v9 + 20);
  *(_DWORD *)(v9 + 20) = *(_DWORD *)(a4 + 12);
  *(_DWORD *)(a4 + 12) = v13;
  LODWORD(v13) = *(_DWORD *)(v9 + 24);
  *(_DWORD *)(v9 + 24) = *(_DWORD *)(a4 + 16);
  *(_DWORD *)(a4 + 16) = v13;
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = 0;
  *(_DWORD *)(v9 + 48) = 0;
  *(_QWORD *)(v9 + 32) = *(_QWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 24) = 0;
  *(_DWORD *)(v9 + 40) = *(_DWORD *)(a4 + 32);
  *(_DWORD *)(a4 + 32) = 0;
  LODWORD(v13) = *(_DWORD *)(v9 + 44);
  *(_DWORD *)(v9 + 44) = *(_DWORD *)(a4 + 36);
  *(_DWORD *)(a4 + 36) = v13;
  LODWORD(v13) = *(_DWORD *)(v9 + 48);
  *(_DWORD *)(v9 + 48) = *(_DWORD *)(a4 + 40);
  *(_DWORD *)(a4 + 40) = v13;
  v10 = 1;
LABEL_8:
  v14 = *(_QWORD *)a2 + 56 * *(unsigned int *)(a2 + 16);
  *(_QWORD *)a1 = v9;
  *(_QWORD *)(a1 + 8) = v14;
  *(_BYTE *)(a1 + 16) = v10;
  return result;
}

_QWORD *llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 56 * v3;
      v13 = v4 + 24;
      do
      {
        v14 = *(_QWORD *)(v13 - 24);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::LookupBucketFor<llvm::jitlink::Block const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          v16 = *(_QWORD *)(v13 - 24);
          *(_DWORD *)(v19 + 24) = 0;
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)v15 = v16;
          *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 - 16);
          *(_QWORD *)(v13 - 16) = 0;
          *(_DWORD *)(v15 + 16) = *(_DWORD *)(v13 - 8);
          *(_DWORD *)(v13 - 8) = 0;
          LODWORD(v16) = *(_DWORD *)(v15 + 20);
          *(_DWORD *)(v15 + 20) = *(_DWORD *)(v13 - 4);
          *(_DWORD *)(v13 - 4) = v16;
          LODWORD(v16) = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v15 + 24) = *(_DWORD *)v13;
          *(_DWORD *)v13 = v16;
          *(_DWORD *)(v15 + 48) = 0;
          *(_QWORD *)(v15 + 32) = 0;
          *(_QWORD *)(v15 + 40) = 0;
          *(_QWORD *)(v15 + 32) = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          *(_DWORD *)(v15 + 40) = *(_DWORD *)(v13 + 16);
          *(_DWORD *)(v13 + 16) = 0;
          LODWORD(v16) = *(_DWORD *)(v15 + 44);
          *(_DWORD *)(v15 + 44) = *(_DWORD *)(v13 + 20);
          *(_DWORD *)(v13 + 20) = v16;
          LODWORD(v16) = *(_DWORD *)(v15 + 48);
          *(_DWORD *)(v15 + 48) = *(_DWORD *)(v13 + 24);
          *(_DWORD *)(v13 + 24) = v16;
          ++*(_DWORD *)(a1 + 8);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(v13 + 8);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(v13 - 16);
        }
        v13 += 56;
        v12 -= 56;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 56 * v17;
    do
    {
      *result = -4096;
      result += 7;
      v18 -= 56;
    }
    while (v18);
  }
  return result;
}

_QWORD *llvm::DenseMap<llvm::jitlink::Block *,llvm::orc::SymbolDependenceGroup,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,llvm::orc::SymbolDependenceGroup>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 56 * v10;
      do
      {
        *result = -4096;
        result += 7;
        v11 -= 56;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 56 * v3;
      v13 = v4 + 24;
      do
      {
        v14 = *(_QWORD *)(v13 - 24);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::LookupBucketFor<llvm::jitlink::Block const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          v16 = *(_QWORD *)(v13 - 24);
          *(_DWORD *)(v19 + 24) = 0;
          *(_QWORD *)(v15 + 8) = 0;
          *(_QWORD *)(v15 + 16) = 0;
          *(_QWORD *)v15 = v16;
          *(_QWORD *)(v15 + 8) = *(_QWORD *)(v13 - 16);
          *(_QWORD *)(v13 - 16) = 0;
          *(_DWORD *)(v15 + 16) = *(_DWORD *)(v13 - 8);
          *(_DWORD *)(v13 - 8) = 0;
          LODWORD(v16) = *(_DWORD *)(v15 + 20);
          *(_DWORD *)(v15 + 20) = *(_DWORD *)(v13 - 4);
          *(_DWORD *)(v13 - 4) = v16;
          LODWORD(v16) = *(_DWORD *)(v15 + 24);
          *(_DWORD *)(v15 + 24) = *(_DWORD *)v13;
          *(_DWORD *)v13 = v16;
          *(_DWORD *)(v15 + 48) = 0;
          *(_QWORD *)(v15 + 32) = 0;
          *(_QWORD *)(v15 + 40) = 0;
          *(_QWORD *)(v15 + 32) = *(_QWORD *)(v13 + 8);
          *(_QWORD *)(v13 + 8) = 0;
          *(_DWORD *)(v15 + 40) = *(_DWORD *)(v13 + 16);
          *(_DWORD *)(v13 + 16) = 0;
          LODWORD(v16) = *(_DWORD *)(v15 + 44);
          *(_DWORD *)(v15 + 44) = *(_DWORD *)(v13 + 20);
          *(_DWORD *)(v13 + 20) = v16;
          LODWORD(v16) = *(_DWORD *)(v15 + 48);
          *(_DWORD *)(v15 + 48) = *(_DWORD *)(v13 + 24);
          *(_DWORD *)(v13 + 24) = v16;
          ++*(_DWORD *)(a1 + 8);
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>,llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::DenseSet<llvm::orc::SymbolStringPtr,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>>>>::destroyAll(v13 + 8);
          MEMORY[0x24BD1B398](*(_QWORD *)(v13 + 8), 8);
          llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(v13 - 16);
        }
        v13 += 56;
        v12 -= 56;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 56 * v17;
    do
    {
      *result = -4096;
      result += 7;
      v18 -= 56;
    }
    while (v18);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>,llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies,llvm::DenseMapInfo<llvm::jitlink::Block const*,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block const*,llvm::orc::ObjectLinkingLayerJITLinkContext::BlockSymbolDependencies>>::destroyAll(uint64_t result, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;

  if (a2)
  {
    v2 = 56 * a2;
    v3 = result + 32;
    do
    {
      if ((*(_QWORD *)(v3 - 32) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(v3);
        result = llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseSetPair<llvm::orc::SymbolStringPtr>>::~DenseMap(v3 - 24);
      }
      v3 += 56;
      v2 -= 56;
    }
    while (v2);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::grow(a1, v7);
    v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -1)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  result[2] = 0;
  result[3] = 0;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = (37 * (_DWORD)a3) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -1)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -2;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

_QWORD *llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 32 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 32;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 32 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>,unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>,llvm::DenseMapInfo<unsigned long,void>,llvm::detail::DenseMapPair<unsigned long,std::vector<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>>::LookupBucketFor<unsigned long>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_QWORD *)v13;
          v15[1] = 0;
          v15[2] = 0;
          v15[3] = 0;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          v15[3] = *(_QWORD *)(v13 + 24);
          *(_QWORD *)(v13 + 8) = 0;
          *(_QWORD *)(v13 + 16) = 0;
          *(_QWORD *)(v13 + 24) = 0;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 32;
        v12 -= 32;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 32 * v16;
    do
    {
      *result = -1;
      result += 4;
      v17 -= 32;
    }
    while (v17);
  }
  return result;
}

uint64_t LLVMOrcExecutionSessionCreateBareJITDylib(uint64_t a1, char *a2)
{
  uint64_t BareJITDylib;
  void *__p[2];
  char v6;

  std::string::basic_string[abi:nn180100]<0>(__p, a2);
  BareJITDylib = llvm::orc::ExecutionSession::createBareJITDylib(a1, (uint64_t *)__p);
  if (v6 < 0)
    operator delete(__p[0]);
  return BareJITDylib;
}

uint64_t LLVMOrcExecutionSessionCreateJITDylib(uint64_t a1, uint64_t *a2, char *__s)
{
  uint64_t result;
  void *__p[2];
  char v7;
  uint64_t v8;
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  std::string::basic_string[abi:nn180100]<0>(__p, __s);
  llvm::orc::ExecutionSession::createJITDylib(a1, (uint64_t)__p, (uint64_t)&v8);
  if (v7 < 0)
    operator delete(__p[0]);
  result = v8;
  if ((v9 & 1) == 0)
  {
    *a2 = v8;
    return 0;
  }
  return result;
}

uint64_t LLVMOrcObjectLayerAddObjectFile(uint64_t a1, llvm::orc::JITDylib *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;

  v5 = a3;
  llvm::orc::ObjectLayer::add(a1, a2, &v5, &v6);
  v3 = v6;
  v6 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  return v3;
}

uint64_t llvm::MCTargetOptions::MCTargetOptions(uint64_t a1, uint64_t a2)
{
  std::string *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  std::string *v8;
  __int128 v9;
  std::string *v10;
  __int128 v11;
  __int128 v12;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = (std::string *)(a1 + 16);
  if (*(char *)(a2 + 39) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 16), *(_QWORD *)(a2 + 24));
  }
  else
  {
    v5 = *(_OWORD *)(a2 + 16);
    v4->__r_.__value_.__r.__words[2] = *(_QWORD *)(a2 + 32);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  v6 = (std::string *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0)
  {
    std::string::__init_copy_ctor_external(v6, *(const std::string::value_type **)(a2 + 40), *(_QWORD *)(a2 + 48));
  }
  else
  {
    v7 = *(_OWORD *)(a2 + 40);
    *(_QWORD *)(a1 + 56) = *(_QWORD *)(a2 + 56);
    *(_OWORD *)&v6->__r_.__value_.__l.__data_ = v7;
  }
  v8 = (std::string *)(a1 + 64);
  if (*(char *)(a2 + 87) < 0)
  {
    std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)(a2 + 64), *(_QWORD *)(a2 + 72));
  }
  else
  {
    v9 = *(_OWORD *)(a2 + 64);
    *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
    *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
  }
  v10 = (std::string *)(a1 + 88);
  if (*(char *)(a2 + 111) < 0)
  {
    std::string::__init_copy_ctor_external(v10, *(const std::string::value_type **)(a2 + 88), *(_QWORD *)(a2 + 96));
  }
  else
  {
    v11 = *(_OWORD *)(a2 + 88);
    *(_QWORD *)(a1 + 104) = *(_QWORD *)(a2 + 104);
    *(_OWORD *)&v10->__r_.__value_.__l.__data_ = v11;
  }
  v12 = *(_OWORD *)(a2 + 112);
  *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v12;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>((std::string *)(a1 + 136), *(__int128 **)(a2 + 136), *(__int128 **)(a2 + 144), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 144) - *(_QWORD *)(a2 + 136)) >> 3));
  return a1;
}

std::string *std::vector<std::string>::__init_with_size[abi:nn180100]<std::string*,std::string*>(std::string *result, __int128 *a2, __int128 *a3, unint64_t a4)
{
  std::string *v6;

  if (a4)
  {
    v6 = result;
    std::vector<std::string>::__vallocate[abi:nn180100](result, a4);
    result = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((int)v6 + 16, a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

_QWORD *llvm::object::COFFObjectFile::getSymbol@<X0>(_QWORD *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  _UNKNOWN **v8;

  v4 = this[12];
  if (*((_OWORD *)this + 6) == 0)
    goto LABEL_11;
  v5 = this[6];
  if (v5)
  {
    if (*(__int16 *)(v5 + 2) == -1)
      goto LABEL_11;
    v6 = (unsigned int *)(v5 + 12);
  }
  else
  {
    v6 = (unsigned int *)(this[7] + 52);
  }
  if (*v6 > a2)
  {
    if (v4)
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v4 + 18 * a2;
      *(_QWORD *)(a3 + 8) = 0;
      return this;
    }
    v7 = this[13];
    if (v7)
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = 0;
      *(_QWORD *)(a3 + 8) = v7 + 20 * a2;
      return this;
    }
  }
LABEL_11:
  v8 = llvm::object::object_category((llvm::object *)this);
  this = (_QWORD *)operator new();
  *this = &off_251C12820;
  this[1] = 3;
  this[2] = v8;
  *(_BYTE *)(a3 + 16) |= 1u;
  *(_QWORD *)a3 = this;
  return this;
}

uint64_t *std::__tree<llvm::StringRef>::__emplace_unique_key_args<llvm::StringRef,llvm::StringRef const&>(uint64_t **a1, __int128 *a2, _OWORD *a3)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t **v7;
  uint64_t v9;

  v5 = std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__find_equal<llvm::StringRef>((uint64_t)a1, &v9, a2);
  v6 = (uint64_t *)*v5;
  if (!*v5)
  {
    v7 = (uint64_t **)v5;
    v6 = (uint64_t *)operator new(0x30uLL);
    *((_OWORD *)v6 + 2) = *a3;
    std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::__insert_node_at(a1, v9, v7, v6);
  }
  return v6;
}

void llvm::orc::SimpleRemoteEPC::~SimpleRemoteEPC(llvm::orc::SimpleRemoteEPC *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  *(_QWORD *)this = &off_251C15408;
  *((_QWORD *)this + 22) = &unk_251C15470;
  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>,unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::destroyAll((_QWORD *)this + 47);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 47), 8);
  v2 = *((_QWORD *)this + 42);
  *((_QWORD *)this + 42) = 0;
  if (v2)
    MEMORY[0x24BD1B3A4](v2, 0x1020C40B07D1DCCLL);
  v3 = *((_QWORD *)this + 41);
  *((_QWORD *)this + 41) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  v4 = *((_QWORD *)this + 40);
  *((_QWORD *)this + 40) = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  v5 = *((_QWORD *)this + 39);
  *((_QWORD *)this + 39) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  v6 = *((_QWORD *)this + 38);
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 248));
  std::mutex::~mutex((std::mutex *)((char *)this + 184));
  llvm::orc::ExecutorProcessControl::~ExecutorProcessControl((void **)this);
}

{
  llvm::orc::SimpleRemoteEPC::~SimpleRemoteEPC(this);
  JUMPOUT(0x24BD1B3A4);
}

void `non-virtual thunk to'llvm::orc::SimpleRemoteEPC::~SimpleRemoteEPC(llvm::orc::SimpleRemoteEPC *this)
{
  llvm::orc::SimpleRemoteEPC::~SimpleRemoteEPC((llvm::orc::SimpleRemoteEPC *)((char *)this - 176));
}

{
  llvm::orc::SimpleRemoteEPC::~SimpleRemoteEPC((llvm::orc::SimpleRemoteEPC *)((char *)this - 176));
  JUMPOUT(0x24BD1B3A4);
}

void llvm::orc::SimpleRemoteEPC::loadDylib(llvm::orc::SimpleRemoteEPC *this@<X0>, const char *__s@<X1>, uint64_t a3@<X8>)
{
  uint64_t *v5;
  size_t v6;

  v5 = (uint64_t *)*((_QWORD *)this + 42);
  if (__s)
    v6 = strlen(__s);
  else
    v6 = 0;
  llvm::orc::EPCGenericDylibManager::open(v5, (uint64_t)__s, v6, 0, a3);
}

void llvm::orc::SimpleRemoteEPC::lookupSymbolsAsync(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  void **v9;
  __int128 v10[2];
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  v6 = *(_QWORD *)(a1 + 336);
  v8 = 0;
  v7 = 0uLL;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, a4);
  llvm::orc::lookupSymbolsAsyncHelper(v6, a2, a3, &v7, v10);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v10);
  v9 = (void **)&v7;
  std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](&v9);
}

_QWORD *llvm::orc::lookupSymbolsAsyncHelper(uint64_t a1, uint64_t *a2, uint64_t a3, __int128 *a4, __int128 *a5)
{
  uint64_t v7;
  size_t ***v8;
  char *v9;
  uint64_t v11;
  void **v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15[2];
  __int128 v16;
  uint64_t v17;
  char *v18;
  __int128 v19;
  char *v20;
  __int128 v21;
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26[2];
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    v7 = *a2;
    v8 = (size_t ***)a2[1];
    *(_QWORD *)&v13 = a1;
    *((_QWORD *)&v13 + 1) = a2;
    v14 = a3;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v15, a5);
    v16 = *a4;
    v17 = *((_QWORD *)a4 + 2);
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    *(_QWORD *)a4 = 0;
    v24 = v13;
    v25 = v14;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v26, v15);
    v27 = v16;
    v28 = v17;
    v17 = 0;
    v16 = 0uLL;
    v9 = (char *)operator new(0x50uLL, (std::align_val_t)8uLL);
    v18 = v9;
    v19 = xmmword_24AA2DC20;
    *(_OWORD *)v9 = v24;
    *((_QWORD *)v9 + 2) = v25;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)(v9 + 24), v26);
    *(_OWORD *)(v9 + 56) = v27;
    *((_QWORD *)v9 + 9) = v28;
    v28 = 0;
    v27 = 0uLL;
    v20 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::CallbacksHolder<llvm::orc::lookupSymbolsAsyncHelper(llvm::orc::EPCGenericDylibManager &,llvm::ArrayRef<llvm::orc::ExecutorProcessControl::LookupRequest>,std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>,llvm::unique_function<void ()(llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>)>)::$_0,llvm::orc::lookupSymbolsAsyncHelper(llvm::orc::EPCGenericDylibManager &,llvm::ArrayRef<llvm::orc::ExecutorProcessControl::LookupRequest>,std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>,llvm::unique_function<void ()(llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>)>)::$_0,void>::Callbacks
        + 4;
    v12 = (void **)&v27;
    std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](&v12);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v26);
    llvm::orc::EPCGenericDylibManager::lookupAsync(a1, v7, v8, (__int128 *)&v18);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v18);
    *(_QWORD *)&v24 = &v16;
    std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v24);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v15);
  }
  else
  {
    v23 = 0;
    v21 = *a4;
    v22 = *((_QWORD *)a4 + 2);
    *(_QWORD *)a4 = 0;
    *((_QWORD *)a4 + 1) = 0;
    *((_QWORD *)a4 + 2) = 0;
    v11 = *((_QWORD *)a5 + 3);
    if ((v11 & 2) == 0)
      a5 = *(__int128 **)a5;
    (*(void (**)(__int128 *, __int128 *))(v11 & 0xFFFFFFFFFFFFFFF8))(a5, &v21);
    return (_QWORD *)llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v21);
  }
}

void llvm::orc::SimpleRemoteEPC::runAsMain(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v6;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  void **v16;
  void **v17;
  llvm::formatv_object_base *v18;
  uint64_t v19;
  void *v20;
  void **v21;
  void **v22;
  void *v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  llvm::formatv_object_base *v28;
  void *v29[2];
  uint64_t v30;
  _UNKNOWN **v31;
  void *v32[2];

  v6 = a3;
  v27 = 0;
  v10 = *(_QWORD *)(a1 + 344);
  if (!a4)
  {
    v15 = 16;
    v32[1] = (void *)16;
LABEL_9:
    v11 = (uint64_t)malloc_type_malloc(v15, 0xBCDE199DuLL);
    v32[0] = (void *)v11;
    v15 = (size_t)v32[1];
    goto LABEL_10;
  }
  v11 = 24 * a4;
  v12 = (unsigned __int8 *)(a3 + 23);
  v13 = 8;
  do
  {
    v14 = *v12;
    if ((v14 & 0x80u) != 0)
      v14 = *(_QWORD *)(v12 - 15);
    v13 += v14 + 8;
    v12 += 24;
    v11 -= 24;
  }
  while (v11);
  v15 = v13 + 8;
  v32[0] = 0;
  v32[1] = (void *)(v13 + 8);
  if ((unint64_t)(v13 + 8) >= 9)
    goto LABEL_9;
LABEL_10:
  v16 = v32;
  if (v15 <= 8)
    v17 = v32;
  else
    v17 = (void **)v11;
  v30 = (uint64_t)v17;
  v31 = (_UNKNOWN **)v15;
  if (v15 >= 8)
  {
    *v17 = a2;
    if (v15 > 8)
      v16 = (void **)v11;
    v18 = (llvm::formatv_object_base *)(v16 + 1);
    v30 = (uint64_t)v18;
    v31 = (_UNKNOWN **)(v15 - 8);
    if (v15 - 8 >= 8)
    {
      *(_QWORD *)v18 = a4;
      v30 = v11 + 16;
      v31 = (_UNKNOWN **)(v15 - 16);
      if (!a4)
      {
LABEL_21:
        *(_OWORD *)v29 = *(_OWORD *)v32;
        v32[0] = 0;
        v32[1] = 0;
        goto LABEL_23;
      }
      v19 = 24 * a4;
      while (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::serialize(&v30, v6))
      {
        v6 += 24;
        v19 -= 24;
        if (!v19)
          goto LABEL_21;
      }
    }
  }
  llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"Error serializing arguments to blob in call", (char **)v29);
LABEL_23:
  if (v32[1] >= (void *)9)
  {
    v20 = v32[0];
LABEL_27:
    free(v20);
    goto LABEL_28;
  }
  if (!v32[1])
  {
    v20 = v32[0];
    if (v32[0])
      goto LABEL_27;
  }
LABEL_28:
  if (v29[1])
  {
    if (v29[1] <= (void *)8)
      v21 = v29;
    else
      v21 = (void **)v29[0];
  }
  else
  {
    v30 = (uint64_t)v29[0];
    if (v29[0])
    {
      getErrorErrorCat();
      v32[0] = (void *)3;
      v32[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v30, (uint64_t *)v32, &v26);
      goto LABEL_46;
    }
    v21 = v29;
  }
  llvm::orc::ExecutorProcessControl::callWrapper(a1, v10, (uint64_t)v21, (uint64_t)v29[1], v32);
  if (v32[1])
  {
    if (v32[1] <= (void *)8)
      v22 = v32;
    else
      v22 = (void **)v32[0];
    goto LABEL_36;
  }
  v28 = (llvm::formatv_object_base *)v32[0];
  if (!v32[0])
  {
    v22 = v32;
LABEL_36:
    llvm::orc::shared::detail::ResultDeserializer<long long,long long>::deserialize(&v27, v22, (unint64_t)v32[1], &v26);
    goto LABEL_41;
  }
  getErrorErrorCat();
  v30 = 3;
  v31 = &getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v28, &v30, &v26);
LABEL_41:
  if (v32[1] >= (void *)9)
  {
    v23 = v32[0];
LABEL_45:
    free(v23);
    goto LABEL_46;
  }
  if (!v32[1])
  {
    v23 = v32[0];
    if (v32[0])
      goto LABEL_45;
  }
LABEL_46:
  if (v29[1] < (void *)9)
  {
    if (v29[1])
      goto LABEL_51;
    v24 = v29[0];
    if (!v29[0])
      goto LABEL_51;
  }
  else
  {
    v24 = v29[0];
  }
  free(v24);
LABEL_51:
  v25 = v26;
  if (v26)
  {
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v25;
  }
  else
  {
    *(_BYTE *)(a5 + 8) &= ~1u;
    *(_DWORD *)a5 = v27;
  }
}

void llvm::orc::SimpleRemoteEPC::runAsVoidFunction(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  void *v7;
  uint64_t v8[2];

  v7 = a2;
  v8[0] = a1;
  v6 = 0;
  v8[1] = *(_QWORD *)(a1 + 352);
  llvm::orc::shared::WrapperFunction<int ()(llvm::orc::shared::SPSExecutorAddr)>::call<llvm::Error llvm::orc::ExecutorProcessControl::callSPSWrapper<int ()(llvm::orc::shared::SPSExecutorAddr),int &,llvm::orc::ExecutorAddr &>(llvm::orc::ExecutorAddr,int &,llvm::orc::ExecutorAddr &)::{lambda(char const*,unsigned long)#1},int,llvm::orc::ExecutorAddr>(v8, &v6, &v7, &v5);
  v4 = v5;
  if (v5)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v4;
  }
  else
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_DWORD *)a3 = v6;
  }
}

void llvm::orc::SimpleRemoteEPC::runAsIntFunction(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  _DWORD *v9;
  __int128 *v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15[2];
  llvm::formatv_object_base *v16;
  __int128 v17;

  v14 = 0;
  v8 = *(_QWORD *)(a1 + 360);
  v9 = malloc_type_malloc(0xCuLL, 0xBCDE199DuLL);
  *(_QWORD *)v9 = a2;
  v9[2] = a3;
  llvm::orc::ExecutorProcessControl::callWrapper(a1, v8, (uint64_t)v9, 12, &v17);
  if (*((_QWORD *)&v17 + 1))
  {
    if (*((_QWORD *)&v17 + 1) <= 8uLL)
      v10 = &v17;
    else
      v10 = (__int128 *)v17;
    goto LABEL_5;
  }
  v16 = (llvm::formatv_object_base *)v17;
  if (!(_QWORD)v17)
  {
    v10 = &v17;
LABEL_5:
    llvm::orc::shared::detail::ResultDeserializer<int,int>::deserialize(&v14, v10, *((unint64_t *)&v17 + 1), &v13);
    goto LABEL_8;
  }
  getErrorErrorCat();
  v15[0] = 3;
  v15[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const*&,std::error_code>(&v16, v15, &v13);
LABEL_8:
  if (*((_QWORD *)&v17 + 1) < 9uLL)
  {
    if (*((_QWORD *)&v17 + 1))
      goto LABEL_13;
    v11 = (void *)v17;
    if (!(_QWORD)v17)
      goto LABEL_13;
  }
  else
  {
    v11 = (void *)v17;
  }
  free(v11);
LABEL_13:
  free(v9);
  v12 = v13;
  if (v13)
  {
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v12;
  }
  else
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_DWORD *)a4 = v14;
  }
}

_QWORD *llvm::orc::SimpleRemoteEPC::callWrapperAsync(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4, uint64_t a5)
{
  std::mutex *v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  _QWORD *inserted;
  _QWORD *v15;
  _QWORD *result;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26[3];
  unint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v10 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  v12 = *(_QWORD *)(a1 + 368);
  v11 = *(_QWORD *)(a1 + 376);
  *(_QWORD *)(a1 + 368) = v12 + 1;
  v24 = v12;
  v26[0] = 0;
  v13 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(v11, *(_DWORD *)(a1 + 392), v12, v26);
  inserted = v26[0];
  if ((v13 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>,unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::InsertIntoBucketImpl<unsigned long long>(a1 + 376, &v24, v26[0]);
    *inserted = v12;
    *(_OWORD *)(inserted + 1) = 0u;
    *(_OWORD *)(inserted + 3) = 0u;
  }
  if (inserted + 1 != (_QWORD *)a3)
  {
    v15 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(inserted + 1);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v15, a3);
  }
  std::mutex::unlock(v10);
  result = (*(_QWORD *(**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(_QWORD **)(a1 + 312) + 24))(&v23, *(_QWORD *)(a1 + 312), 3, v12, a2, a4, a5);
  if (v23)
  {
    v27 = 0;
    std::mutex::lock(v10);
    v25 = 0;
    if (llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)(a1 + 376), *(_DWORD *)(a1 + 392), v12, &v25))
    {
      v17 = v25;
      if (v25 != *(_QWORD *)(a1 + 376) + 40 * *(unsigned int *)(a1 + 392))
      {
        if (v26 != (_QWORD **)(v25 + 8))
        {
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v26);
          llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v26, (__int128 *)(v17 + 8));
        }
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(v17 + 8));
        *(_QWORD *)v17 = -2;
        *(int32x2_t *)(a1 + 384) = vadd_s32(*(int32x2_t *)(a1 + 384), (int32x2_t)0x1FFFFFFFFLL);
      }
    }
    std::mutex::unlock(v10);
    if (v27 < 8)
      goto LABEL_17;
    llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"disconnecting", (char **)&v21);
    llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(v26, (uint64_t)&v21);
    if (v22 < 9)
    {
      if (v22)
        goto LABEL_17;
      v18 = v21;
      if (!v21)
        goto LABEL_17;
    }
    else
    {
      v18 = v21;
    }
    free(v18);
LABEL_17:
    v19 = *(_QWORD *)(a1 + 32);
    v20 = v23;
    v23 = 0;
    llvm::orc::ExecutionSession::reportError(v19, &v20);
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v26);
    result = (_QWORD *)v23;
    if (v23)
      return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
  return result;
}

void llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  void *v4[2];

  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = a1[3];
  if ((v2 & 2) == 0)
    a1 = (_QWORD *)*a1;
  (*(void (**)(_QWORD *, void **))(v2 & 0xFFFFFFFFFFFFFFF8))(a1, v4);
  if (v4[1] >= (void *)9)
  {
    v3 = v4[0];
LABEL_7:
    free(v3);
    return;
  }
  if (!v4[1])
  {
    v3 = v4[0];
    if (v4[0])
      goto LABEL_7;
  }
}

void llvm::orc::SimpleRemoteEPC::disconnect(llvm::orc::SimpleRemoteEPC *this@<X0>, _QWORD *a2@<X8>)
{
  std::mutex *m;
  _BOOL4 owns;
  std::unique_lock<std::mutex> v6;

  (*(void (**)(_QWORD))(**((_QWORD **)this + 39) + 32))(*((_QWORD *)this + 39));
  (*(void (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
  m = (std::mutex *)((char *)this + 184);
  v6.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 184);
  v6.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 184));
  if (*((_BYTE *)this + 296))
  {
    *a2 = *((_QWORD *)this + 38);
    *((_QWORD *)this + 38) = 0;
LABEL_6:
    std::mutex::unlock(m);
    return;
  }
  do
    std::condition_variable::wait((std::condition_variable *)((char *)this + 248), &v6);
  while (!*((_BYTE *)this + 296));
  owns = v6.__owns_;
  *a2 = *((_QWORD *)this + 38);
  *((_QWORD *)this + 38) = 0;
  if (owns)
  {
    m = v6.__m_;
    goto LABEL_6;
  }
}

void llvm::orc::SimpleRemoteEPC::handleMessage(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  uint64_t v7;
  char *v12;
  size_t v13;
  _BYTE *v14;
  void **p_dst;
  BOOL v16;
  std::mutex *v17;
  uint64_t v18;
  void *v19;
  size_t v20;
  _BYTE *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  void **v27;
  unint64_t v28;
  uint64_t v29;
  std::mutex *v30;
  uint64_t v31;
  void *v32;
  size_t v33;
  _BYTE *v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39[2];
  void **__dst;
  unint64_t v41;
  void *v42[2];
  void *v43;
  __int128 v44;
  _BYTE v45[128];
  void *v46;
  __int128 v47;
  _BYTE v48[128];
  void *v49;
  __int128 v50;
  _BYTE v51[128];
  void *v52;
  __int128 size;
  _BYTE v54[128];
  _BYTE v55[24];
  void *v56;
  _BYTE v57[24];
  void *v58;
  __int128 v59;
  _QWORD v60[17];

  v60[16] = *MEMORY[0x24BDAC8D0];
  if (a2 >= 4)
  {
    getErrorErrorCat();
    *(_QWORD *)v57 = 3;
    *(_QWORD *)&v57[8] = &getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Unexpected opcode", (uint64_t *)v57, &v38);
    *(_BYTE *)(a6 + 8) |= 1u;
    v7 = v38;
LABEL_78:
    *(_QWORD *)a6 = v7;
    return;
  }
  switch(a2)
  {
    case 0u:
      v52 = v54;
      size = xmmword_24AA2AC90;
      if (*(_QWORD *)(a5 + 8))
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v52, (const void **)a5);
      if (a3)
      {
        getErrorErrorCat();
        v12 = (char *)operator new();
        *(_QWORD *)v57 = "Setup packet SeqNo not zero";
        LOWORD(v59) = 259;
        *(_QWORD *)v12 = off_251C127D0;
        llvm::Twine::str((llvm::formatv_object_base **)v57, (std::string *)(v12 + 8));
        *((_QWORD *)v12 + 4) = 3;
        *((_QWORD *)v12 + 5) = &getErrorErrorCat(void)::ErrorErrorCat;
        v12[48] = 1;
        __dst = (void **)v12;
        goto LABEL_86;
      }
      if (a4)
      {
        getErrorErrorCat();
        *(_QWORD *)v57 = 3;
        *(_QWORD *)&v57[8] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Setup packet TagAddr not zero", (uint64_t *)v57, (uint64_t *)&__dst);
        goto LABEL_86;
      }
      v30 = (std::mutex *)(a1 + 184);
      std::mutex::lock((std::mutex *)(a1 + 184));
      *(_QWORD *)v57 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)(a1 + 376), *(_DWORD *)(a1 + 392), 0, v57))v31 = *(_QWORD *)v57;
      else
        v31 = *(_QWORD *)(a1 + 376) + 40 * *(unsigned int *)(a1 + 392);
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v57, (__int128 *)(v31 + 8));
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(v31 + 8));
      *(_QWORD *)v31 = -2;
      *(int32x2_t *)(a1 + 384) = vadd_s32(*(int32x2_t *)(a1 + 384), (int32x2_t)0x1FFFFFFFFLL);
      v32 = v52;
      v33 = size;
      *(_QWORD *)v55 = 0;
      *(_QWORD *)&v55[8] = size;
      if ((unint64_t)size < 9)
      {
        v34 = v55;
      }
      else
      {
        v34 = malloc_type_malloc(size, 0xBCDE199DuLL);
        *(_QWORD *)v55 = v34;
      }
      memcpy(v34, v32, v33);
      *(_OWORD *)v42 = *(_OWORD *)v55;
      llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(v57, (uint64_t)v42);
      if (v42[1] < (void *)9)
      {
        if (v42[1])
          goto LABEL_85;
        v36 = v42[0];
        if (!v42[0])
          goto LABEL_85;
      }
      else
      {
        v36 = v42[0];
      }
      free(v36);
LABEL_85:
      __dst = 0;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v57);
      std::mutex::unlock(v30);
LABEL_86:
      if (v52 != v54)
        free(v52);
      v7 = (uint64_t)__dst;
      if (__dst)
        goto LABEL_77;
      goto LABEL_89;
    case 1u:
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 32))(*(_QWORD *)(a1 + 312));
      v49 = v51;
      v50 = xmmword_24AA2AC90;
      if (*(_QWORD *)(a5 + 8))
      {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v49, (const void **)a5);
        v14 = v49;
        v13 = v50;
        __dst = 0;
        v41 = v50;
        if ((unint64_t)v50 < 9)
        {
          p_dst = (void **)&__dst;
        }
        else
        {
          p_dst = (void **)malloc_type_malloc(v50, 0xBCDE199DuLL);
          __dst = p_dst;
        }
      }
      else
      {
        v13 = 0;
        __dst = 0;
        v41 = 0;
        p_dst = (void **)&__dst;
        v14 = v51;
      }
      memcpy(p_dst, v14, v13);
      if (v41)
      {
        v57[0] = 0;
        v58 = 0;
        *(_QWORD *)&v57[8] = 0;
        *(_QWORD *)&v57[16] = 0;
        v26 = __dst;
        if (v41 <= 8)
          v26 = (void **)&__dst;
      }
      else
      {
        v27 = __dst;
        v42[0] = __dst;
        if (__dst)
        {
          getErrorErrorCat();
          *(_QWORD *)v57 = 3;
          *(_QWORD *)&v57[8] = &getErrorErrorCat(void)::ErrorErrorCat;
          llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)v42, (uint64_t *)v57, &v37);
          v28 = 0;
LABEL_54:
          if (!v28 && v27)
LABEL_56:
            free(v27);
          if (v49 != v51)
            free(v49);
          v7 = v37;
          if (!v37)
          {
            *(_BYTE *)(a6 + 8) &= ~1u;
            *(_DWORD *)a6 = 1;
            return;
          }
LABEL_77:
          *(_BYTE *)(a6 + 8) |= 1u;
          goto LABEL_78;
        }
        v57[0] = 0;
        v58 = 0;
        *(_QWORD *)&v57[8] = 0;
        *(_QWORD *)&v57[16] = 0;
        v26 = (void **)&__dst;
      }
      v39[0] = (uint64_t)v26;
      v39[1] = v41;
      if (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError,void>::deserialize(v39, (uint64_t)v57))
      {
        v55[0] = v57[0];
        *(_OWORD *)&v55[8] = *(_OWORD *)&v57[8];
        v56 = v58;
        *(_QWORD *)&v57[8] = 0;
        *(_QWORD *)&v57[16] = 0;
        v58 = 0;
        if (v57[0])
        {
          getErrorErrorCat();
          v42[0] = (void *)3;
          v42[1] = &getErrorErrorCat(void)::ErrorErrorCat;
          llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)&v55[8], (uint64_t *)v42, &v37);
        }
        else
        {
          v37 = 0;
        }
        if (SHIBYTE(v56) < 0)
          operator delete(*(void **)&v55[8]);
      }
      else
      {
        getErrorErrorCat();
        v42[0] = (void *)3;
        v42[1] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Could not deserialize hangup info", (uint64_t *)v42, &v37);
      }
      if (SHIBYTE(v58) < 0)
        operator delete(*(void **)&v57[8]);
      v27 = __dst;
      v28 = v41;
      if (v41 > 8)
        goto LABEL_56;
      goto LABEL_54;
    case 2u:
      v46 = v48;
      v47 = xmmword_24AA2AC90;
      if (*(_QWORD *)(a5 + 8))
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v46, (const void **)a5);
      __dst = (void **)a3;
      v56 = 0;
      if (a4)
      {
        getErrorErrorCat();
        *(_QWORD *)v57 = 3;
        *(_QWORD *)&v57[8] = &getErrorErrorCat(void)::ErrorErrorCat;
        llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Unexpected TagAddr in result message", (uint64_t *)v57, v39);
        goto LABEL_74;
      }
      v17 = (std::mutex *)(a1 + 184);
      std::mutex::lock((std::mutex *)(a1 + 184));
      *(_QWORD *)v57 = 0;
      if (!llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)(a1 + 376), *(_DWORD *)(a1 + 392), a3, v57)|| (v18 = *(_QWORD *)v57, *(_QWORD *)v57 == *(_QWORD *)(a1 + 376) + 40 * *(unsigned int *)(a1 + 392)))
      {
        *(_QWORD *)v57 = "No call for sequence number ";
        *(_QWORD *)&v57[16] = &__dst;
        LOWORD(v59) = 3075;
        getErrorErrorCat();
        v29 = operator new();
        *(_QWORD *)v29 = off_251C127D0;
        llvm::Twine::str((llvm::formatv_object_base **)v57, (std::string *)(v29 + 8));
        *(_QWORD *)(v29 + 32) = 3;
        *(_QWORD *)(v29 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
        *(_BYTE *)(v29 + 48) = 1;
        v39[0] = v29;
        std::mutex::unlock(v17);
        goto LABEL_74;
      }
      if (v55 != (_BYTE *)(*(_QWORD *)v57 + 8))
      {
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v55);
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v55, (__int128 *)(v18 + 8));
      }
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(v18 + 8));
      *(_QWORD *)v18 = -2;
      *(int32x2_t *)(a1 + 384) = vadd_s32(*(int32x2_t *)(a1 + 384), (int32x2_t)0x1FFFFFFFFLL);
      std::mutex::unlock((std::mutex *)(a1 + 184));
      v19 = v46;
      v20 = v47;
      *(_QWORD *)v57 = 0;
      *(_QWORD *)&v57[8] = v47;
      if ((unint64_t)v47 < 9)
      {
        v21 = v57;
      }
      else
      {
        v21 = malloc_type_malloc(v47, 0xBCDE199DuLL);
        *(_QWORD *)v57 = v21;
      }
      memcpy(v21, v19, v20);
      *(_OWORD *)v42 = *(_OWORD *)v57;
      llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(v55, (uint64_t)v42);
      if (v42[1] >= (void *)9)
      {
        v35 = v42[0];
LABEL_72:
        free(v35);
        goto LABEL_73;
      }
      if (!v42[1])
      {
        v35 = v42[0];
        if (v42[0])
          goto LABEL_72;
      }
LABEL_73:
      v39[0] = 0;
LABEL_74:
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v55);
      if (v46 != v48)
        free(v46);
      v7 = v39[0];
      if (v39[0])
        goto LABEL_77;
LABEL_89:
      *(_BYTE *)(a6 + 8) &= ~1u;
      *(_DWORD *)a6 = 0;
      return;
    case 3u:
      v43 = v45;
      v44 = xmmword_24AA2AC90;
      if (*(_QWORD *)(a5 + 8))
      {
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v43, (const void **)a5);
        v16 = (_QWORD)v44 == 0;
      }
      else
      {
        v16 = 1;
      }
      v22 = *(_QWORD *)(a1 + 24);
      *(_QWORD *)v57 = a1;
      *(_QWORD *)&v57[8] = a3;
      *(_QWORD *)&v57[16] = a4;
      v58 = v60;
      v59 = xmmword_24AA2AC90;
      if (!v16)
        llvm::SmallVectorImpl<char>::operator=((uint64_t)&v58, (const void **)&v43);
      v23 = operator new();
      *(_QWORD *)v23 = off_251C153C0;
      *(_OWORD *)(v23 + 8) = *(_OWORD *)v57;
      v24 = v59;
      *(_QWORD *)(v23 + 24) = *(_QWORD *)&v57[16];
      *(_QWORD *)(v23 + 32) = v23 + 56;
      *(_OWORD *)(v23 + 40) = xmmword_24AA2AC90;
      if (v24)
        llvm::SmallVectorImpl<char>::operator=(v23 + 32, (const void **)&v58);
      *(_QWORD *)(v23 + 184) = "callWrapper task";
      *(_QWORD *)(v23 + 192) = 0;
      *(_QWORD *)(v23 + 200) = 0;
      *(_QWORD *)(v23 + 208) = 0;
      *(_QWORD *)v55 = v23;
      (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v22 + 16))(v22, v55);
      v25 = *(_QWORD *)v55;
      *(_QWORD *)v55 = 0;
      if (v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
      if (v58 != v60)
        free(v58);
      if (v43 != v45)
        free(v43);
      goto LABEL_89;
    default:
      goto LABEL_89;
  }
}

void `non-virtual thunk to'llvm::orc::SimpleRemoteEPC::handleMessage(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  llvm::orc::SimpleRemoteEPC::handleMessage(a1 - 176, a2, a3, a4, a5, a6);
}

uint64_t llvm::orc::SimpleRemoteEPC::handleDisconnect(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  void *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v19;
  void *v20;
  unint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25[2];
  unsigned int v26;
  uint64_t v27;

  v4 = (std::mutex *)(a1 + 184);
  std::mutex::lock((std::mutex *)(a1 + 184));
  v25[0] = 0;
  v22 = 0;
  v25[1] = 0;
  v23 = 0;
  v26 = 0;
  v24 = 0;
  llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::operator=(&v22, a1 + 376);
  llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::operator=((_QWORD *)(a1 + 376), (uint64_t)v25);
  v5 = v25[0];
  if (v26)
  {
    v6 = 40 * v26;
    v7 = (_QWORD *)(v25[0] + 8);
    do
    {
      if (*(v7 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        v7 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v7);
      v7 += 5;
      v6 -= 40;
    }
    while (v6);
    v5 = v25[0];
  }
  MEMORY[0x24BD1B398](v5, 8);
  std::mutex::unlock(v4);
  if ((_DWORD)v23)
  {
    if (v24)
    {
      v8 = 40 * v24;
      v9 = v22;
      while (*v9 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v9 += 5;
        v8 -= 40;
        if (!v8)
          goto LABEL_25;
      }
    }
    else
    {
      v9 = v22;
    }
    v10 = &v22[5 * v24];
    while (v9 != v10)
    {
      llvm::orc::shared::WrapperFunctionResult::createOutOfBandError((llvm::orc::shared::WrapperFunctionResult *)"disconnecting", (char **)&v20);
      llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(v9 + 1, (uint64_t)&v20);
      if (v21 >= 9)
      {
        v11 = v20;
LABEL_21:
        free(v11);
        goto LABEL_22;
      }
      v11 = v20;
      if (v21)
        v12 = 1;
      else
        v12 = v20 == 0;
      if (!v12)
        goto LABEL_21;
      do
      {
LABEL_22:
        v9 += 5;
        if (v9 == v10)
          goto LABEL_25;
      }
      while (*v9 >= 0xFFFFFFFFFFFFFFFELL);
    }
  }
LABEL_25:
  std::mutex::lock(v4);
  v13 = *(_QWORD *)(a1 + 304);
  *(_QWORD *)(a1 + 304) = 0;
  v14 = *a2;
  *a2 = 0;
  v25[0] = v13;
  v27 = v14;
  llvm::ErrorList::join(v25, &v27, &v19);
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  if (v25[0])
    (*(void (**)(uint64_t))(*(_QWORD *)v25[0] + 8))(v25[0]);
  *(_QWORD *)(a1 + 304) = v19;
  *(_BYTE *)(a1 + 296) = 1;
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 248));
  std::mutex::unlock(v4);
  v15 = v22;
  if (v24)
  {
    v16 = 40 * v24;
    v17 = v22 + 1;
    do
    {
      if (*(v17 - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        v17 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v17);
      v17 += 5;
      v16 -= 40;
    }
    while (v16);
    v15 = v22;
  }
  return MEMORY[0x24BD1B398](v15, 8);
}

uint64_t `non-virtual thunk to'llvm::orc::SimpleRemoteEPC::handleDisconnect(uint64_t a1, uint64_t *a2)
{
  return llvm::orc::SimpleRemoteEPC::handleDisconnect(a1 - 176, a2);
}

uint64_t llvm::orc::SimpleRemoteEPC::createDefaultMemoryManager@<X0>(llvm::orc::SimpleRemoteEPC *this@<X0>, uint64_t a2@<X8>)
{
  size_t v5;
  size_t v6;
  size_t v7;
  size_t v8;
  uint64_t result;
  char v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _QWORD v15[13];

  v15[12] = *MEMORY[0x24BDAC8D0];
  v13 = 0u;
  v14 = 0u;
  v5 = llvm::orc::rt::SimpleExecutorMemoryManagerInstanceName;
  v15[0] = &v13;
  v15[1] = llvm::orc::rt::SimpleExecutorMemoryManagerInstanceName;
  if (llvm::orc::rt::SimpleExecutorMemoryManagerInstanceName)
    v5 = strlen((const char *)llvm::orc::rt::SimpleExecutorMemoryManagerInstanceName);
  v15[2] = v5;
  v15[3] = (char *)&v13 + 8;
  v6 = llvm::orc::rt::SimpleExecutorMemoryManagerReserveWrapperName;
  v15[4] = llvm::orc::rt::SimpleExecutorMemoryManagerReserveWrapperName;
  if (llvm::orc::rt::SimpleExecutorMemoryManagerReserveWrapperName)
    v6 = strlen((const char *)llvm::orc::rt::SimpleExecutorMemoryManagerReserveWrapperName);
  v15[5] = v6;
  v15[6] = &v14;
  v7 = llvm::orc::rt::SimpleExecutorMemoryManagerFinalizeWrapperName;
  v15[7] = llvm::orc::rt::SimpleExecutorMemoryManagerFinalizeWrapperName;
  if (llvm::orc::rt::SimpleExecutorMemoryManagerFinalizeWrapperName)
    v7 = strlen((const char *)llvm::orc::rt::SimpleExecutorMemoryManagerFinalizeWrapperName);
  v15[8] = v7;
  v15[9] = (char *)&v14 + 8;
  v8 = llvm::orc::rt::SimpleExecutorMemoryManagerDeallocateWrapperName;
  v15[10] = llvm::orc::rt::SimpleExecutorMemoryManagerDeallocateWrapperName;
  if (llvm::orc::rt::SimpleExecutorMemoryManagerDeallocateWrapperName)
    v8 = strlen((const char *)llvm::orc::rt::SimpleExecutorMemoryManagerDeallocateWrapperName);
  v15[11] = v8;
  llvm::orc::ExecutorProcessControl::getBootstrapSymbols((uint64_t)this, (uint64_t)v15, 4, &v12);
  result = v12;
  if (v12)
  {
    v10 = *(_BYTE *)(a2 + 8) | 1;
  }
  else
  {
    result = operator new();
    v11 = v14;
    *(_OWORD *)(result + 16) = v13;
    *(_OWORD *)(result + 32) = v11;
    *(_QWORD *)result = &off_251C14CD0;
    *(_QWORD *)(result + 8) = this;
    v10 = *(_BYTE *)(a2 + 8) & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v10;
  *(_QWORD *)a2 = result;
  return result;
}

void llvm::orc::SimpleRemoteEPC::createDefaultMemoryAccess(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 8) &= ~1u;
  *(_QWORD *)a1 = 0;
}

uint64_t llvm::orc::SimpleRemoteEPC::setup@<X0>(uint64_t a1@<X0>, std::unique_lock<std::mutex> *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  unint64_t *v7;
  char v8;
  _OWORD *ptr;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  std::exception_ptr *v13;
  unint64_t v14;
  void **v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  size_t v26;
  size_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t *p_sig;
  std::unique_lock<std::mutex>::mutex_type *m;
  uint64_t v38;
  std::unique_lock<std::mutex>::mutex_type *v39;
  void *v40;
  std::unique_lock<std::mutex> *v41;
  unint64_t v42;
  std::unique_lock<std::mutex>::mutex_type *v43;
  uint64_t v44;
  std::unique_lock<std::mutex>::mutex_type *v45;
  uint64_t result;
  uint64_t v47;
  unint64_t *v48;
  unint64_t v49;
  std::exception_ptr v50;
  const std::error_category *v51;
  _QWORD v52[2];
  int v53;
  int v54;
  _QWORD v55[2];
  int v56;
  int v57;
  llvm::formatv_object_base *v58[4];
  __int16 v59;
  uint64_t v60;
  std::unique_lock<std::mutex> __lk;
  _BYTE v62[24];
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  size_t v66;
  uint64_t v67;
  uint64_t v68;
  size_t v69;
  uint64_t v70;
  uint64_t v71;
  size_t v72;
  std::exception_ptr v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  int v82;
  char v83;
  uint64_t v84;

  v84 = *MEMORY[0x24BDAC8D0];
  v6 = operator new();
  *(_QWORD *)(v6 + 8) = 0;
  v7 = (unint64_t *)(v6 + 8);
  *(_QWORD *)(v6 + 24) = 850045863;
  *(_QWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = 0u;
  *(_OWORD *)(v6 + 48) = 0u;
  *(_OWORD *)(v6 + 64) = 0u;
  *(_QWORD *)(v6 + 80) = 0;
  *(_QWORD *)(v6 + 88) = 1018212795;
  *(_OWORD *)(v6 + 96) = 0u;
  *(_OWORD *)(v6 + 112) = 0u;
  *(_OWORD *)(v6 + 124) = 0u;
  *(_QWORD *)v6 = &off_251C15390;
  v60 = v6;
  std::__assoc_sub_state::__attach_future[abi:nn180100](v6);
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v60;
  *(_QWORD *)&v62[8] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallbacksHolder<llvm::orc::SimpleRemoteEPC::setup(llvm::orc::SimpleRemoteEPC::Setup)::$_0,llvm::orc::SimpleRemoteEPC::setup(llvm::orc::SimpleRemoteEPC::Setup)::$_0,void>::Callbacks
                     + 2;
  v58[0] = 0;
  v73.__ptr_ = 0;
  v8 = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)(a1 + 376), *(_DWORD *)(a1 + 392), 0, &v73);
  ptr = v73.__ptr_;
  if ((v8 & 1) == 0)
  {
    ptr = llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>,unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::InsertIntoBucketImpl<unsigned long long>(a1 + 376, (uint64_t *)v58, v73.__ptr_);
    *ptr = 0u;
    ptr[1] = 0u;
    *((_QWORD *)ptr + 4) = 0;
  }
  if ((std::unique_lock<std::mutex> *)((char *)ptr + 8) != &__lk)
  {
    v10 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)ptr + 1);
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v10, (__int128 *)&__lk);
  }
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&__lk);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 16))(*(_QWORD *)(a1 + 312));
  if (!*a3)
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v6 + 24);
    __lk.__owns_ = 1;
    std::mutex::lock((std::mutex *)(v6 + 24));
    std::__assoc_sub_state::__sub_wait((std::__assoc_sub_state *)v6, &__lk);
    v12 = *(_QWORD *)(v6 + 16);
    v73.__ptr_ = 0;
    std::exception_ptr::~exception_ptr(&v73);
    if (v12)
    {
      v50.__ptr_ = std::exception_ptr::exception_ptr(v13, (const std::exception_ptr *)(v6 + 16));
      std::rethrow_exception(v50);
      goto LABEL_69;
    }
    llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::moveConstruct<llvm::orc::SimpleRemoteEPCExecutorInfo>((uint64_t)v13, (uint64_t *)(v6 + 144));
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
    do
      v14 = __ldaxr(v7);
    while (__stlxr(v14 - 1, v7));
    if (!v14)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if ((v83 & 1) != 0)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 312) + 32))(*(_QWORD *)(a1 + 312));
      if ((v83 & 1) != 0)
      {
        v40 = v73.__ptr_;
        v73.__ptr_ = 0;
      }
      else
      {
        v40 = 0;
      }
    }
    else
    {
      v59 = 260;
      v58[0] = (llvm::formatv_object_base *)&v73;
      llvm::Triple::Triple((std::string *)&__lk, v58);
      v15 = (void **)(a1 + 40);
      if (*(char *)(a1 + 63) < 0)
        operator delete(*v15);
      *(std::unique_lock<std::mutex> *)v15 = __lk;
      *(_QWORD *)(a1 + 56) = *(_QWORD *)v62;
      *(_OWORD *)(a1 + 64) = *(_OWORD *)&v62[8];
      *(_QWORD *)(a1 + 80) = v63;
      v16 = v75;
      *(_DWORD *)(a1 + 88) = v74;
      v17 = *(_QWORD *)(a1 + 128);
      *(_QWORD *)(a1 + 128) = v16;
      LODWORD(v16) = v77;
      v18 = v78;
      v19 = v76;
      v75 = 0;
      v76 = 0;
      v77 = 0;
      v55[0] = v17;
      v20 = *(_QWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = v19;
      v55[1] = v20;
      LODWORD(v17) = *(_DWORD *)(a1 + 144);
      *(_DWORD *)(a1 + 144) = v16;
      v56 = v17;
      v57 = v18;
      llvm::StringMap<std::vector<char>,llvm::MallocAllocator>::~StringMap((uint64_t)v55);
      v21 = *(_QWORD *)(a1 + 152);
      *(_QWORD *)(a1 + 152) = v79;
      v22 = v81;
      v23 = v82;
      v24 = v80;
      v79 = 0;
      v80 = 0;
      v81 = 0;
      v52[0] = v21;
      v25 = *(_QWORD *)(a1 + 160);
      *(_QWORD *)(a1 + 160) = v24;
      v52[1] = v25;
      LODWORD(v21) = *(_DWORD *)(a1 + 168);
      *(_DWORD *)(a1 + 168) = v22;
      v53 = v21;
      v54 = v23;
      llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)v52);
      v26 = llvm::orc::SimpleRemoteEPCDefaultBootstrapSymbolNames::ExecutorSessionObjectName;
      __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 104);
      *(_QWORD *)&__lk.__owns_ = llvm::orc::SimpleRemoteEPCDefaultBootstrapSymbolNames::ExecutorSessionObjectName;
      if (llvm::orc::SimpleRemoteEPCDefaultBootstrapSymbolNames::ExecutorSessionObjectName)
        v26 = strlen((const char *)llvm::orc::SimpleRemoteEPCDefaultBootstrapSymbolNames::ExecutorSessionObjectName);
      *(_QWORD *)v62 = v26;
      *(_QWORD *)&v62[8] = a1 + 96;
      v27 = llvm::orc::SimpleRemoteEPCDefaultBootstrapSymbolNames::DispatchFnName;
      *(_QWORD *)&v62[16] = llvm::orc::SimpleRemoteEPCDefaultBootstrapSymbolNames::DispatchFnName;
      if (llvm::orc::SimpleRemoteEPCDefaultBootstrapSymbolNames::DispatchFnName)
        v27 = strlen((const char *)llvm::orc::SimpleRemoteEPCDefaultBootstrapSymbolNames::DispatchFnName);
      v63 = v27;
      v64 = a1 + 344;
      v28 = llvm::orc::rt::RunAsMainWrapperName;
      v65 = llvm::orc::rt::RunAsMainWrapperName;
      if (llvm::orc::rt::RunAsMainWrapperName)
        v28 = strlen((const char *)llvm::orc::rt::RunAsMainWrapperName);
      v66 = v28;
      v67 = a1 + 352;
      v29 = llvm::orc::rt::RunAsVoidFunctionWrapperName;
      v68 = llvm::orc::rt::RunAsVoidFunctionWrapperName;
      if (llvm::orc::rt::RunAsVoidFunctionWrapperName)
        v29 = strlen((const char *)llvm::orc::rt::RunAsVoidFunctionWrapperName);
      v69 = v29;
      v70 = a1 + 360;
      v30 = llvm::orc::rt::RunAsIntFunctionWrapperName;
      v71 = llvm::orc::rt::RunAsIntFunctionWrapperName;
      if (llvm::orc::rt::RunAsIntFunctionWrapperName)
        v30 = strlen((const char *)llvm::orc::rt::RunAsIntFunctionWrapperName);
      v72 = v30;
      llvm::orc::ExecutorProcessControl::getBootstrapSymbols(a1, (uint64_t)&__lk, 5, a3);
      if (*a3)
        goto LABEL_56;
      llvm::orc::EPCGenericDylibManager::CreateWithDefaultBootstrapSymbols((llvm::orc::EPCGenericDylibManager *)a1, (uint64_t)&__lk);
      if ((v62[16] & 1) == 0)
      {
        v31 = operator new();
        v32 = *(_OWORD *)v62;
        *(std::unique_lock<std::mutex> *)v31 = __lk;
        *(_OWORD *)(v31 + 16) = v32;
        v33 = *(_QWORD *)(a1 + 336);
        *(_QWORD *)(a1 + 336) = v31;
        if (v33)
          MEMORY[0x24BD1B3A4](v33, 0x1020C40B07D1DCCLL);
        v34 = *(_QWORD *)&a2[1].__owns_;
        if (v34 <= 7)
        {
          __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)llvm::orc::SimpleRemoteEPC::createDefaultMemoryManager;
          *(_QWORD *)&v62[8] = (char *)llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>>,llvm::orc::SimpleRemoteEPC &>::CallbacksHolder<llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>> (*)(llvm::orc::SimpleRemoteEPC &),llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>> (*)(llvm::orc::SimpleRemoteEPC &),void>::Callbacks
                             + 2;
          if (&__lk != a2)
          {
            v35 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(a2);
            llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v35, (__int128 *)&__lk);
          }
          llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&__lk);
          v34 = *(_QWORD *)&a2[1].__owns_;
        }
        p_sig = (uint64_t *)a2;
        if ((v34 & 2) == 0)
          p_sig = &a2->__m_->__m_.__sig;
        (*(void (**)(std::unique_lock<std::mutex> *__return_ptr, uint64_t *, uint64_t))(v34 & 0xFFFFFFFFFFFFFFF8))(&__lk, p_sig, a1);
        if (!__lk.__owns_)
        {
          m = __lk.__m_;
          __lk.__m_ = 0;
          v38 = *(_QWORD *)(a1 + 320);
          *(_QWORD *)(a1 + 320) = m;
          if (v38)
          {
            (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
            v39 = __lk.__m_;
            *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 320);
            __lk.__m_ = 0;
            if (v39)
              (*(void (**)(std::unique_lock<std::mutex>::mutex_type *))(v39->__m_.__sig + 8))(v39);
          }
          else
          {
            *(_QWORD *)(a1 + 120) = m;
          }
          v41 = a2 + 2;
          v42 = *(_QWORD *)&a2[3].__owns_;
          if (v42 <= 7)
          {
            __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)llvm::orc::SimpleRemoteEPC::createDefaultMemoryAccess;
            *(_QWORD *)&v62[8] = (char *)llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>>,llvm::orc::SimpleRemoteEPC &>::CallbacksHolder<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> (*)(llvm::orc::SimpleRemoteEPC &),llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> (*)(llvm::orc::SimpleRemoteEPC &),void>::Callbacks
                               + 2;
            llvm::unique_function<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> ()(llvm::orc::SimpleRemoteEPC &)>::operator=((__int128 *)&a2[2], (__int128 *)&__lk);
            llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&__lk);
            v42 = *(_QWORD *)&a2[3].__owns_;
          }
          if ((v42 & 2) == 0)
            v41 = (std::unique_lock<std::mutex> *)v41->__m_;
          (*(void (**)(std::unique_lock<std::mutex> *__return_ptr, std::unique_lock<std::mutex> *, uint64_t))(v42 & 0xFFFFFFFFFFFFFFF8))(&__lk, v41, a1);
          if (!__lk.__owns_)
          {
            v43 = __lk.__m_;
            __lk.__m_ = 0;
            v44 = *(_QWORD *)(a1 + 328);
            *(_QWORD *)(a1 + 328) = v43;
            if (v44)
            {
              (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
              v45 = __lk.__m_;
              *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 328);
              __lk.__m_ = 0;
              if (v45)
                (*(void (**)(std::unique_lock<std::mutex>::mutex_type *))(v45->__m_.__sig + 8))(v45);
            }
            else
            {
              *(_QWORD *)(a1 + 112) = v43;
            }
            *a3 = 0;
            goto LABEL_56;
          }
        }
      }
      v40 = __lk.__m_;
    }
    *a3 = (uint64_t)v40;
LABEL_56:
    llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::~Expected((uint64_t)&v73);
    goto LABEL_57;
  }
  do
    v11 = __ldaxr(v7);
  while (__stlxr(v11 - 1, v7));
  if (!v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
LABEL_57:
  result = v60;
  if (!v60)
    return result;
  if ((*(_BYTE *)(v60 + 136) & 1) == 0)
  {
    __lk.__m_ = 0;
    v47 = *(_QWORD *)(v60 + 16);
    std::exception_ptr::~exception_ptr((std::exception_ptr *)&__lk);
    result = v60;
    if (!v47 && *(uint64_t *)(v60 + 8) >= 1)
    {
LABEL_69:
      v51 = std::future_category();
      MEMORY[0x24BD1B17C](&__lk, 4, v51);
      abort();
    }
  }
  v48 = (unint64_t *)(result + 8);
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

__int128 *llvm::unique_function<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> ()(llvm::orc::SimpleRemoteEPC &)>::operator=(__int128 *result, __int128 *a2)
{
  _QWORD *v3;

  if (result != a2)
  {
    v3 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(result);
    return (__int128 *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v3, a2);
  }
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::CallImpl<llvm::orc::lookupSymbolsAsyncHelper(llvm::orc::EPCGenericDylibManager &,llvm::ArrayRef<llvm::orc::ExecutorProcessControl::LookupRequest>,std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>,llvm::unique_function<void ()(llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>)>)::$_0>(uint64_t *a1, uint64_t *a2)
{
  _OWORD *v3;
  __int128 v4;
  uint64_t v5;
  unint64_t v6;
  int64x2_t *v7;
  _QWORD *v8;
  char **v9;
  _OWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  __int128 v22;
  int64x2_t v23;
  uint64_t v24;
  _OWORD *v25;
  _OWORD *i;
  uint64_t v27;
  _OWORD *v28;
  unint64_t v29;
  _OWORD *v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unint64_t v35;
  char *v36;
  char *v37;
  _WORD *v38;
  _WORD *v39;
  char *v40;
  uint64_t v41;
  __int16 v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  _BYTE v50[24];
  uint64_t v51;
  uint64_t *v52;
  _OWORD *v53;
  __int128 v54;
  __int128 v56[2];
  _QWORD v57[3];
  char v58;
  uint64_t v59;

  v59 = *MEMORY[0x24BDAC8D0];
  if (a2[3] & 1)
  {
    v10 = (_OWORD *)*a2;
    *a2 = 0;
    v11 = a1 + 3;
    v53 = 0;
    v58 = -1;
    v57[0] = v10;
    v12 = a1[6];
    if ((v12 & 2) == 0)
      v11 = (_QWORD *)*v11;
    (*(void (**)(_QWORD *, _QWORD *))(v12 & 0xFFFFFFFFFFFFFFF8))(v11, v57);
    llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v57);
  }
  else
  {
    v3 = (_OWORD *)*a2;
    v53 = (_OWORD *)*a2;
    v4 = *(_OWORD *)(a2 + 1);
    v54 = v4;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    v5 = (uint64_t)(a1 + 9);
    v6 = a1[9];
    v7 = (int64x2_t *)(a1 + 7);
    v8 = (_QWORD *)a1[8];
    if ((unint64_t)v8 >= v6)
    {
      v47 = v4;
      v13 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v8 - v7->i64[0]) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_38:
        abort();
      v15 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - v7->i64[0]) >> 3);
      if (2 * v15 > v14)
        v14 = 2 * v15;
      if (v15 >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v14;
      v52 = a1 + 9;
      v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>(v5, v16);
      v19 = &v17[24 * v13];
      v9 = (char **)(v19 + 24);
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      *(_QWORD *)v19 = 0;
      v21 = (_QWORD *)a1[7];
      v20 = (_QWORD *)a1[8];
      if (v20 == v21)
      {
        v23 = vdupq_n_s64((unint64_t)v20);
      }
      else
      {
        do
        {
          *((_QWORD *)v19 - 3) = 0;
          *((_QWORD *)v19 - 2) = 0;
          v19 -= 24;
          *((_QWORD *)v19 + 2) = 0;
          v22 = *(_OWORD *)(v20 - 3);
          v20 -= 3;
          *(_OWORD *)v19 = v22;
          *((_QWORD *)v19 + 2) = v20[2];
          *v20 = 0;
          v20[1] = 0;
          v20[2] = 0;
        }
        while (v20 != v21);
        v23 = *v7;
      }
      a1[7] = (uint64_t)v19;
      a1[8] = (uint64_t)v9;
      *(int64x2_t *)&v50[8] = v23;
      v24 = a1[9];
      a1[9] = (uint64_t)&v17[24 * v18];
      v51 = v24;
      *(_QWORD *)v50 = v23.i64[0];
      std::__split_buffer<std::vector<llvm::orc::ExecutorSymbolDef>>::~__split_buffer((uint64_t)v50);
      *(_QWORD *)&v4 = v47;
    }
    else
    {
      v9 = (char **)(v8 + 3);
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
    }
    a1[8] = (uint64_t)v9;
    std::vector<llvm::orc::ExecutorSymbolDef>::reserve(v9 - 3, (uint64_t)(v4 - (_QWORD)v3) >> 4);
    v25 = v53;
    for (i = (_OWORD *)v54; v25 != i; ++v25)
    {
      *(_OWORD *)v50 = *v25;
      v27 = a1[8];
      v28 = *(_OWORD **)(v27 - 16);
      v29 = *(_QWORD *)(v27 - 8);
      if ((unint64_t)v28 >= v29)
      {
        v31 = *(_QWORD *)(v27 - 24);
        v32 = ((uint64_t)v28 - v31) >> 4;
        v33 = v32 + 1;
        if ((unint64_t)(v32 + 1) >> 60)
          goto LABEL_38;
        v34 = v29 - v31;
        if (v34 >> 3 > v33)
          v33 = v34 >> 3;
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF0)
          v35 = 0xFFFFFFFFFFFFFFFLL;
        else
          v35 = v33;
        if (v35)
          v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v27 - 8, v35);
        else
          v36 = 0;
        v37 = &v36[16 * v32];
        *(_OWORD *)v37 = *(_OWORD *)v50;
        v39 = *(_WORD **)(v27 - 24);
        v38 = *(_WORD **)(v27 - 16);
        v40 = v37;
        if (v38 != v39)
        {
          do
          {
            v41 = *((_QWORD *)v38 - 2);
            v38 -= 8;
            v42 = v38[4];
            *((_QWORD *)v40 - 2) = v41;
            v40 -= 16;
            *((_WORD *)v40 + 4) = v42;
          }
          while (v38 != v39);
          v38 = *(_WORD **)(v27 - 24);
        }
        v30 = v37 + 16;
        *(_QWORD *)(v27 - 24) = v40;
        *(_QWORD *)(v27 - 16) = v37 + 16;
        *(_QWORD *)(v27 - 8) = &v36[16 * v35];
        if (v38)
          operator delete(v38);
      }
      else
      {
        *v28 = *v25;
        v30 = v28 + 1;
      }
      *(_QWORD *)(v27 - 16) = v30;
    }
    v43 = a1[2] - 1;
    v44 = *a1;
    v45 = (uint64_t *)(a1[1] + 16);
    v48 = *(_OWORD *)(a1 + 7);
    v49 = a1[9];
    a1[8] = 0;
    a1[9] = 0;
    v7->i64[0] = 0;
    llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase((uint64_t)v56, (__int128 *)(a1 + 3));
    llvm::orc::lookupSymbolsAsyncHelper(v44, v45, v43, &v48, v56);
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v56);
    *(_QWORD *)v50 = &v48;
    std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100]((void ***)v50);
  }
  return llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>::~Expected((uint64_t)&v53);
}

__n128 llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::MoveImpl<llvm::orc::lookupSymbolsAsyncHelper(llvm::orc::EPCGenericDylibManager &,llvm::ArrayRef<llvm::orc::ExecutorProcessControl::LookupRequest>,std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>,llvm::unique_function<void ()(llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>)>)::$_0>(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __n128 result;

  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(a1 + 24, (__int128 *)((char *)a2 + 24));
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  result = *(__n128 *)((char *)a2 + 56);
  *(__n128 *)(a1 + 56) = result;
  *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
  *((_QWORD *)a2 + 7) = 0;
  *((_QWORD *)a2 + 8) = 0;
  *((_QWORD *)a2 + 9) = 0;
  return result;
}

_QWORD *llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::vector<llvm::orc::ExecutorSymbolDef>>>::DestroyImpl<llvm::orc::lookupSymbolsAsyncHelper(llvm::orc::EPCGenericDylibManager &,llvm::ArrayRef<llvm::orc::ExecutorProcessControl::LookupRequest>,std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>,llvm::unique_function<void ()(llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>)>)::$_0>(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 56);
  std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](&v3);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase((_QWORD *)(a1 + 24));
}

uint64_t std::__split_buffer<std::vector<llvm::orc::ExecutorSymbolDef>>::~__split_buffer(uint64_t a1)
{
  std::__split_buffer<std::vector<llvm::orc::ExecutorSymbolDef>>::__destruct_at_end[abi:nn180100](a1, *(_QWORD *)(a1 + 8));
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

void std::__split_buffer<std::vector<llvm::orc::ExecutorSymbolDef>>::__destruct_at_end[abi:nn180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v5;

  v2 = *(_QWORD *)(a1 + 16);
  while (v2 != a2)
  {
    v5 = *(void **)(v2 - 24);
    *(_QWORD *)(a1 + 16) = v2 - 24;
    if (v5)
    {
      *(_QWORD *)(v2 - 16) = v5;
      operator delete(v5);
      v2 = *(_QWORD *)(a1 + 16);
    }
    else
    {
      v2 -= 24;
    }
  }
}

uint64_t llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::~Expected(uint64_t a1)
{
  void *v2;

  if ((*(_BYTE *)(a1 + 80) & 1) != 0)
  {
    v2 = *(void **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap(a1 + 56);
    llvm::StringMap<std::vector<char>,llvm::MallocAllocator>::~StringMap(a1 + 32);
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t llvm::StringMap<std::vector<char>,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      do
      {
        v4 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v4 != -8 && v4 != 0)
          llvm::StringMapEntry<std::vector<char>>::Destroy<llvm::MallocAllocator>(v4);
        v3 += 8;
      }
      while (8 * v2 != v3);
    }
  }
  free(*(void **)a1);
  return a1;
}

void llvm::StringMapEntry<std::vector<char>>::Destroy<llvm::MallocAllocator>(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 8);
  if (v2)
  {
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v2);
  }
  JUMPOUT(0x24BD1B398);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>,unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::destroyAll(_QWORD *result)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *((unsigned int *)result + 4);
  if ((_DWORD)v1)
  {
    v2 = 40 * v1;
    result = (_QWORD *)(*result + 8);
    do
    {
      if (*(result - 1) <= 0xFFFFFFFFFFFFFFFDLL)
        result = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(result);
      result += 5;
      v2 -= 40;
    }
    while (v2);
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>,unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::InsertIntoBucketImpl<unsigned long long>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>,unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::unique_function<void ()(llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>)>>>::LookupBucketFor<unsigned long long>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::operator=(_QWORD *a1, uint64_t a2)
{
  int v4;
  int v5;

  llvm::DenseMapBase<llvm::DenseMap<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>,unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler,llvm::DenseMapInfo<unsigned long long,void>,llvm::detail::DenseMapPair<unsigned long long,llvm::orc::ExecutorProcessControl::IncomingWFRHandler>>::destroyAll(a1);
  MEMORY[0x24BD1B398](*a1, 8);
  *a1 = 0;
  a1[1] = 0;
  *((_DWORD *)a1 + 4) = 0;
  *a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *((_DWORD *)a1 + 2) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v4 = *((_DWORD *)a1 + 3);
  *((_DWORD *)a1 + 3) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v4;
  v5 = *((_DWORD *)a1 + 4);
  *((_DWORD *)a1 + 4) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v5;
  return a1;
}

void std::__assoc_state<llvm::MSVCPExpected<llvm::orc::SimpleRemoteEPCExecutorInfo>>::~__assoc_state(uint64_t a1)
{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
}

{
  std::exception_ptr *v2;

  *(_QWORD *)a1 = MEMORY[0x24BEDB850] + 16;
  v2 = (std::exception_ptr *)(a1 + 16);
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 88));
  std::mutex::~mutex((std::mutex *)(a1 + 24));
  std::exception_ptr::~exception_ptr(v2);
  std::__shared_count::~__shared_count((std::__shared_count *)a1);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__assoc_state<llvm::MSVCPExpected<llvm::orc::SimpleRemoteEPCExecutorInfo>>::__on_zero_shared(_BYTE *a1)
{
  if ((a1[136] & 1) != 0)
    llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::~Expected((uint64_t)(a1 + 144));
  return (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 8))(a1);
}

void llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallImpl<llvm::orc::SimpleRemoteEPC::setup(llvm::orc::SimpleRemoteEPC::Setup)::$_0>(uint64_t **a1, uint64_t a2)
{
  uint64_t **v2;
  void **v3;
  char *v4;
  unint64_t v5;
  llvm::formatv_object_base *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  _BOOL4 v10;
  unint64_t v11;
  uint64_t *v12;
  unint64_t v13;
  size_t *v14;
  BOOL v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  char *v23;
  uint64_t v24;
  size_t v25;
  unint64_t v26;
  char *v27;
  char *v28;
  char *v29;
  char *v30;
  char v31;
  size_t v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  char v37;
  _QWORD *v38;
  unint64_t *v39;
  char *v40;
  char *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t *v44;
  unint64_t v45;
  char *v46;
  unint64_t v47;
  uint64_t *v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  _QWORD *v52;
  unint64_t *v53;
  char *v54;
  uint64_t *v55;
  uint64_t v56;
  void *v57;
  uint64_t *v58;
  uint64_t v59;
  void *v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t **v64;
  void *v65[2];
  uint64_t v66[2];
  uint64_t v67;
  void *__p[2];
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  void **v74;
  char *v75;
  uint64_t v76;
  _OWORD v77[2];
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  __int128 v81;
  char v82;
  uint64_t v83;

  v2 = a1;
  v83 = *MEMORY[0x24BDAC8D0];
  *(_OWORD *)v65 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  if (v65[1])
  {
    v3 = (void **)v65[0];
    if (v65[1] <= (void *)8)
      v3 = v65;
  }
  else
  {
    v74 = (void **)v65[0];
    if (v65[0])
    {
      v55 = *a1;
      getErrorErrorCat();
      __p[0] = (void *)3;
      __p[1] = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>((llvm::formatv_object_base **)&v74, (uint64_t *)__p, &v76);
      v56 = v76;
      v76 = 0;
      *(_QWORD *)&v77[0] = v56;
      v82 = -1;
      std::promise<llvm::MSVCPExpected<llvm::orc::SimpleRemoteEPCExecutorInfo>>::set_value(*v55, (uint64_t *)v77);
      llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::~Expected((uint64_t)v77);
      if (v76)
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
      v57 = 0;
      goto LABEL_89;
    }
    v3 = v65;
  }
  v74 = v3;
  v75 = (char *)v65[1];
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v69 = 0;
  v70 = 0;
  *(_QWORD *)&v71 = 0;
  *((_QWORD *)&v71 + 1) = 0x2000000000;
  v72 = 0;
  *(_QWORD *)&v73 = 0;
  *((_QWORD *)&v73 + 1) = 0x1000000000;
  if (!llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSSequence<char>,std::string,void>::deserialize((uint64_t)&v74, (std::string *)__p))goto LABEL_83;
  v4 = v75;
  v5 = (unint64_t)(v75 - 8);
  if ((unint64_t)v75 < 8)
    goto LABEL_83;
  v6 = (llvm::formatv_object_base *)v74;
  v7 = (uint64_t)*v74++;
  v75 -= 8;
  *((_QWORD *)&v69 + 1) = v7;
  if (v5 < 8)
    goto LABEL_83;
  v8 = *((_QWORD *)v6 + 1);
  v9 = (unint64_t)(v4 - 16);
  v74 = (void **)((char *)v6 + 16);
  v75 = (char *)v9;
  v10 = v9 > 7;
  if (!v8)
    goto LABEL_58;
  v63 = v2;
  do
  {
    if (!v10)
      goto LABEL_83;
    v12 = (uint64_t *)(v74 + 1);
    v11 = (unint64_t)*v74++;
    v75 = (char *)(v9 - 8);
    v13 = v9 - 8 - v11;
    if (v9 - 8 < v11)
      goto LABEL_83;
    v14 = (size_t *)((char *)v12 + v11);
    v74 = (void **)((char *)v12 + v11);
    v75 = (char *)v13;
    v15 = v13 >= 8;
    v16 = (char *)(v13 - 8);
    if (!v15)
      goto LABEL_83;
    v17 = *v14;
    v74 = (void **)(v14 + 1);
    v75 = v16;
    v62 = v8;
    if (!v17)
    {
      v18 = 0;
      v32 = 0;
      goto LABEL_42;
    }
    if ((v17 & 0x8000000000000000) != 0)
      goto LABEL_94;
    v18 = (unint64_t)operator new(v17);
    v19 = 0;
    v20 = (char *)(v18 + v17);
    v21 = (char *)v18;
    do
    {
      if (!v75)
      {
        v2 = v63;
        if (v18)
          operator delete((void *)v18);
        goto LABEL_83;
      }
      v22 = *(_BYTE *)v74;
      v74 = (void **)((char *)v74 + 1);
      --v75;
      if (v21 < v20)
      {
        *v21++ = v22;
        goto LABEL_36;
      }
      v23 = &v21[-v18];
      v24 = (uint64_t)&v21[-v18 + 1];
      if (v24 < 0)
        goto LABEL_94;
      if (2 * (uint64_t)&v20[-v18] > (unint64_t)v24)
        v24 = 2 * (_QWORD)&v20[-v18];
      if ((unint64_t)&v20[-v18] >= 0x3FFFFFFFFFFFFFFFLL)
        v25 = 0x7FFFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      if (v25)
        v26 = (unint64_t)operator new(v25);
      else
        v26 = 0;
      v27 = &v23[v26];
      v20 = (char *)(v26 + v25);
      v28 = &v23[v26];
      *v28 = v22;
      v29 = v28 + 1;
      if (v21 == (char *)v18)
      {
        v26 = (unint64_t)v27;
      }
      else
      {
        v30 = &v21[~v18];
        do
        {
          v31 = *--v21;
          (v30--)[v26] = v31;
        }
        while (v21 != (char *)v18);
        if (!v18)
          goto LABEL_35;
      }
      operator delete((void *)v18);
LABEL_35:
      v18 = v26;
      v21 = v29;
LABEL_36:
      ++v19;
    }
    while (v19 != v17);
    if (v21 != (char *)v18)
    {
      if ((uint64_t)&v21[-v18] >= 0)
      {
        v17 = (size_t)operator new((size_t)&v21[-v18]);
        v32 = (size_t)&v21[v17 - v18];
        memmove((void *)v17, (const void *)v18, (size_t)&v21[-v18]);
        goto LABEL_42;
      }
LABEL_94:
      abort();
    }
    v17 = 0;
    v32 = 0;
LABEL_42:
    if (v11)
      v33 = v12;
    else
      v33 = 0;
    v34 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)&v70, v33, v11);
    v35 = v70;
    v36 = *(_QWORD *)(v70 + 8 * v34);
    if (v36 == -8)
    {
      --DWORD2(v71);
    }
    else if (v36)
    {
      if (v17)
        operator delete((void *)v17);
      v37 = 1;
      goto LABEL_54;
    }
    v38 = operator new(v11 + 33, (std::align_val_t)8uLL);
    v39 = v38;
    v40 = (char *)(v38 + 4);
    if (v11)
      memcpy(v38 + 4, v12, v11);
    v40[v11] = 0;
    *v39 = v11;
    v39[1] = v17;
    v39[2] = v32;
    v39[3] = v32;
    *(_QWORD *)(v35 + 8 * v34) = v39;
    ++DWORD1(v71);
    llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v70, v34);
    v37 = 0;
LABEL_54:
    v2 = v63;
    if (v18)
      operator delete((void *)v18);
    if ((v37 & 1) != 0)
    {
LABEL_83:
      v58 = *v2;
      getErrorErrorCat();
      v66[0] = 3;
      v66[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Could not deserialize setup message", v66, &v67);
      v59 = v67;
      v67 = 0;
      v82 = -1;
      *(_QWORD *)&v77[0] = v59;
      std::promise<llvm::MSVCPExpected<llvm::orc::SimpleRemoteEPCExecutorInfo>>::set_value(*v58, (uint64_t *)v77);
      llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::~Expected((uint64_t)v77);
      if (v67)
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
      goto LABEL_85;
    }
    v9 = (unint64_t)v75;
    v10 = (unint64_t)v75 > 7;
    v8 = v62 - 1;
  }
  while (v62 != 1);
LABEL_58:
  if (!v10)
    goto LABEL_83;
  v41 = (char *)*v74;
  v42 = v9 - 8;
  ++v74;
  v75 = (char *)v42;
  if (v41)
  {
    if (v42 >= 8)
    {
      v64 = v2;
      while (1)
      {
        v44 = (uint64_t *)(v74 + 1);
        v43 = (unint64_t)*v74++;
        v75 = (char *)(v42 - 8);
        v45 = v42 - 8 - v43;
        if (v42 - 8 < v43)
          break;
        v74 = (void **)((char *)v44 + v43);
        v75 = (char *)(v42 - 8 - v43);
        v15 = v45 >= 8;
        v46 = (char *)(v45 - 8);
        if (!v15)
          break;
        v47 = *(uint64_t *)((char *)v44 + v43);
        v74 = (void **)((char *)v44 + v43 + 8);
        v75 = v46;
        if (v43)
          v48 = v44;
        else
          v48 = 0;
        v49 = llvm::StringMapImpl::LookupBucketFor((llvm::StringMapImpl *)&v72, v48, v43);
        v50 = v72;
        v51 = *(_QWORD *)(v72 + 8 * v49);
        if (v51)
        {
          if (v51 != -8)
            goto LABEL_83;
          --DWORD2(v73);
        }
        v52 = operator new(v43 + 17, (std::align_val_t)8uLL);
        v53 = v52;
        v54 = (char *)(v52 + 2);
        if (v43)
          memcpy(v52 + 2, v44, v43);
        --v41;
        v54[v43] = 0;
        *v53 = v43;
        v53[1] = v47;
        *(_QWORD *)(v50 + 8 * v49) = v53;
        ++DWORD1(v73);
        llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)&v72, v49);
        v2 = v64;
        if (!v41)
          goto LABEL_93;
        v42 = (unint64_t)v75;
        if ((unint64_t)v75 < 8)
          goto LABEL_83;
      }
    }
    goto LABEL_83;
  }
LABEL_93:
  v61 = *v2;
  v82 = 0;
  v77[0] = *(_OWORD *)__p;
  v77[1] = v69;
  __p[0] = 0;
  __p[1] = 0;
  *(_QWORD *)&v69 = 0;
  v78 = v70;
  v79 = v71;
  DWORD2(v71) = 0;
  v70 = 0;
  *(_QWORD *)&v71 = 0;
  v80 = v72;
  v81 = v73;
  v72 = 0;
  *(_QWORD *)&v73 = 0;
  DWORD2(v73) = 0;
  std::promise<llvm::MSVCPExpected<llvm::orc::SimpleRemoteEPCExecutorInfo>>::set_value(*v61, (uint64_t *)v77);
  llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::~Expected((uint64_t)v77);
LABEL_85:
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)&v72);
  llvm::StringMap<std::vector<char>,llvm::MallocAllocator>::~StringMap((uint64_t)&v70);
  if (SBYTE7(v69) < 0)
    operator delete(__p[0]);
  v57 = v65[1];
  if (v65[1] >= (void *)9)
  {
    v60 = v65[0];
    goto LABEL_91;
  }
LABEL_89:
  if (!v57)
  {
    v60 = v65[0];
    if (v65[0])
LABEL_91:
      free(v60);
  }
}

void std::promise<llvm::MSVCPExpected<llvm::orc::SimpleRemoteEPCExecutorInfo>>::set_value(uint64_t a1, uint64_t *a2)
{
  std::mutex *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  std::exception_ptr v8;

  if (a1)
  {
    v4 = (std::mutex *)(a1 + 24);
    std::mutex::lock((std::mutex *)(a1 + 24));
    if ((*(_BYTE *)(a1 + 136) & 1) == 0)
    {
      v8.__ptr_ = 0;
      v5 = *(_QWORD *)(a1 + 16);
      std::exception_ptr::~exception_ptr(&v8);
      if (!v5)
      {
        llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::moveConstruct<llvm::orc::SimpleRemoteEPCExecutorInfo>(a1 + 144, a2);
        *(_DWORD *)(a1 + 136) |= 5u;
        std::condition_variable::notify_all((std::condition_variable *)(a1 + 88));
        std::mutex::unlock(v4);
        return;
      }
    }
    std::__throw_future_error[abi:nn180100]();
  }
  v6 = std::__throw_future_error[abi:nn180100]();
  llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::moveConstruct<llvm::orc::SimpleRemoteEPCExecutorInfo>(v6, v7);
}

uint64_t llvm::Expected<llvm::orc::SimpleRemoteEPCExecutorInfo>::moveConstruct<llvm::orc::SimpleRemoteEPCExecutorInfo>(uint64_t result, uint64_t *a2)
{
  char v2;
  __int128 v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *((_BYTE *)a2 + 80);
  *(_BYTE *)(result + 80) = *(_BYTE *)(result + 80) & 0xFE | v2 & 1;
  if ((v2 & 1) != 0)
  {
    v5 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v5;
  }
  else
  {
    v3 = *(_OWORD *)a2;
    *(_QWORD *)(result + 16) = a2[2];
    *(_OWORD *)result = v3;
    a2[1] = 0;
    a2[2] = 0;
    *a2 = 0;
    v4 = a2[4];
    *(_QWORD *)(result + 24) = a2[3];
    *(_QWORD *)(result + 32) = v4;
    *(_OWORD *)(result + 40) = *(_OWORD *)(a2 + 5);
    *((_DWORD *)a2 + 12) = 0;
    a2[4] = 0;
    a2[5] = 0;
    *(_QWORD *)(result + 56) = a2[7];
    *(_OWORD *)(result + 64) = *((_OWORD *)a2 + 4);
    a2[7] = 0;
    a2[8] = 0;
    *((_DWORD *)a2 + 18) = 0;
  }
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>>,llvm::orc::SimpleRemoteEPC &>::CallImpl<llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager>> (*)(llvm::orc::SimpleRemoteEPC &)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>>,llvm::orc::SimpleRemoteEPC &>::CallImpl<llvm::Expected<std::unique_ptr<llvm::orc::ExecutorProcessControl::MemoryAccess>> (*)(llvm::orc::SimpleRemoteEPC &)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

uint64_t llvm::orc::GenericNamedTaskImpl<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_251C153C0;
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  v2 = *(void **)(a1 + 32);
  if (v2 != (void *)(a1 + 56))
    free(v2);
  return a1;
}

void llvm::orc::GenericNamedTaskImpl<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0>::~GenericNamedTaskImpl(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = off_251C153C0;
  if (*(char *)(a1 + 215) < 0)
    operator delete(*(void **)(a1 + 192));
  v2 = *(void **)(a1 + 32);
  if (v2 != (void *)(a1 + 56))
    free(v2);
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::orc::GenericNamedTaskImpl<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0>::printDescription(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::raw_ostream::operator<<(a2, *(char **)(a1 + 184));
}

_QWORD *llvm::orc::GenericNamedTaskImpl<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0>::run(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  __int128 v4;
  char *v5;
  uint64_t v6;

  v6 = *MEMORY[0x24BDAC8D0];
  v1 = a1[2];
  v2 = *(_QWORD *)(a1[1] + 32);
  *(_QWORD *)&v4 = a1[1];
  *((_QWORD *)&v4 + 1) = v1;
  v5 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallbacksHolder<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0::operator() const(void)::{lambda(llvm::orc::shared::WrapperFunctionResult)#1},llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0::operator() const(void)::{lambda(llvm::orc::shared::WrapperFunctionResult)#1},void>::Callbacks
     + 2;
  llvm::orc::ExecutionSession::runJITDispatchHandler(v2, &v4, a1[3], a1[4], a1[5]);
  return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v4);
}

void llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallImpl<llvm::orc::SimpleRemoteEPC::handleCallWrapper(unsigned long long,llvm::orc::ExecutorAddr,llvm::SmallVector<char,128u>)::$_0::operator() const(void)::{lambda(llvm::orc::shared::WrapperFunctionResult)#1}>(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void **v3;
  uint64_t v4;
  void *v5;
  void *v6[2];
  uint64_t v7;
  uint64_t v8;

  *(_OWORD *)v6 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  v2 = *a1;
  if (v6[1] <= (void *)8)
    v3 = v6;
  else
    v3 = (void **)v6[0];
  (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t, uint64_t, _QWORD, void **))(**(_QWORD **)(v2 + 312)
                                                                                           + 24))(&v8, *(_QWORD *)(v2 + 312), 2, a1[1], 0, v3);
  if (v8)
  {
    v4 = *(_QWORD *)(v2 + 32);
    v7 = v8;
    v8 = 0;
    llvm::orc::ExecutionSession::reportError(v4, &v7);
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
  if (v6[1] >= (void *)9)
  {
    v5 = v6[0];
LABEL_13:
    free(v5);
    return;
  }
  if (!v6[1])
  {
    v5 = v6[0];
    if (v6[0])
      goto LABEL_13;
  }
}

uint64_t *llvm::IRBuilderBase::CreateICmp(uint64_t a1, __int16 a2, llvm::CmpInst **a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  char *v11;
  uint64_t *v12;
  llvm::Type *v13;
  uint64_t v14;
  _BYTE v15[32];
  __int16 v16;

  result = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 56))(*(_QWORD *)(a1 + 72));
  if (!result)
  {
    v11 = (char *)operator new(0x80uLL);
    *((_DWORD *)v11 + 21) = *((_DWORD *)v11 + 21) & 0x38000000 | 2;
    v12 = (uint64_t *)(v11 + 64);
    *(_QWORD *)v11 = 0;
    *((_QWORD *)v11 + 1) = 0;
    *((_QWORD *)v11 + 2) = 0;
    *((_QWORD *)v11 + 3) = v11 + 64;
    *((_QWORD *)v11 + 4) = 0;
    *((_QWORD *)v11 + 5) = 0;
    *((_QWORD *)v11 + 6) = 0;
    *((_QWORD *)v11 + 7) = v11 + 64;
    v16 = 257;
    llvm::CmpInst::makeCmpResultType(*a3, v13);
    llvm::CmpInst::CmpInst(v12, v14, 53, a2, (uint64_t)a3, a4, (const llvm::Twine *)v15, 0, 0);
    return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, v12, a5);
  }
  return result;
}

double llvm::CmpInst::makeCmpResultType(llvm::CmpInst *this, llvm::Type *a2)
{
  uint64_t **v3;
  double result;

  v3 = (uint64_t **)(**(_QWORD **)this + 1920);
  if (this)
  {
    if ((*((_DWORD *)this + 2) & 0xFE) == 0x12)
      return llvm::VectorType::get(v3, (llvm::Type *)(*((unsigned int *)this + 8) | ((unint64_t)(*((_DWORD *)this + 2) == 19) << 32)));
  }
  return result;
}

uint64_t *llvm::IRBuilderBase::CreateCast(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  BOOL v7;
  uint64_t *v9;

  if (*(_QWORD *)a3 != a4)
  {
    if (*(unsigned __int8 *)(a3 + 16) > 0x14u)
    {
      llvm::CastInst::Create(a2);
      return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, v9, a5);
    }
    else
    {
      a3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 72) + 120))(*(_QWORD *)(a1 + 72));
      if (a3)
        v7 = *(unsigned __int8 *)(a3 + 16) >= 0x1Cu;
      else
        v7 = 0;
      if (v7)
        return llvm::IRBuilderBase::Insert<llvm::LoadInst>((uint64_t *)a1, (uint64_t *)a3, a5);
    }
  }
  return (uint64_t *)a3;
}

uint64_t *llvm::IRBuilderBase::CreateAlignedStore(uint64_t *a1, uint64_t *a2, uint64_t a3, __int16 a4, __int16 a5)
{
  char v6;
  char v10;
  char *v11;
  uint64_t *v12;
  _BYTE v14[32];
  __int16 v15;

  v6 = a4;
  if ((a4 & 0xFF00) == 0)
  {
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(a1[6] + 56) + 40) + 256, *a2);
    v6 = v10;
  }
  v11 = (char *)operator new(0x80uLL);
  *((_DWORD *)v11 + 21) = *((_DWORD *)v11 + 21) & 0x38000000 | 2;
  v12 = (uint64_t *)(v11 + 64);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  *((_QWORD *)v11 + 3) = v11 + 64;
  *((_QWORD *)v11 + 4) = 0;
  *((_QWORD *)v11 + 5) = 0;
  *((_QWORD *)v11 + 6) = 0;
  *((_QWORD *)v11 + 7) = v11 + 64;
  llvm::StoreInst::StoreInst((uint64_t)(v11 + 64), (uint64_t)a2, a3, a5, v6, 0, 1, 0);
  v15 = 257;
  return llvm::IRBuilderBase::Insert<llvm::LoadInst>(a1, v12, (uint64_t)v14);
}

void llvm::orc::ExecutorProcessControl::~ExecutorProcessControl(void **this)
{
  void *v2;

  *this = off_251C154A0;
  llvm::StringMap<std::atomic<unsigned long>,llvm::MallocAllocator>::~StringMap((uint64_t)(this + 19));
  llvm::StringMap<std::vector<char>,llvm::MallocAllocator>::~StringMap((uint64_t)(this + 16));
  if (*((char *)this + 63) < 0)
    operator delete(this[5]);
  v2 = this[3];
  this[3] = 0;
  if (v2)
    (*(void (**)(void *))(*(_QWORD *)v2 + 8))(v2);
  std::shared_ptr<llvm::orc::DefinitionGenerator>::~shared_ptr[abi:nn180100]((uint64_t)(this + 1));
}

uint64_t llvm::orc::SelfExecutorProcessControl::jitDispatchViaWrapperFunctionManager(llvm::orc::SelfExecutorProcessControl *this, uint64_t a2, uint64_t a3, const char *a4)
{
  uint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  char *v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v8 = operator new();
  *(_QWORD *)(v8 + 8) = 0;
  v9 = (unint64_t *)(v8 + 8);
  *(_QWORD *)(v8 + 16) = 0;
  *(_QWORD *)(v8 + 24) = 850045863;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_QWORD *)(v8 + 80) = 0;
  *(_QWORD *)(v8 + 88) = 1018212795;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 124) = 0u;
  *(_QWORD *)v8 = &off_251C10FB8;
  std::__assoc_sub_state::__attach_future[abi:nn180100](v8);
  v10 = *((_QWORD *)this + 4);
  v15 = 0;
  v16 = 0;
  *(_QWORD *)&v14 = 0;
  *(_QWORD *)&v17 = v8;
  v18 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallbacksHolder<llvm::orc::SelfExecutorProcessControl::jitDispatchViaWrapperFunctionManager(void *,void const*,char const*,unsigned long)::$_0,llvm::orc::SelfExecutorProcessControl::jitDispatchViaWrapperFunctionManager(void *,void const*,char const*,unsigned long)::$_0,void>::Callbacks
      + 6;
  std::promise<llvm::MSVCPError>::~promise((uint64_t *)&v14);
  llvm::orc::ExecutionSession::runJITDispatchHandler(v10, &v17, a2, a3, (uint64_t)a4);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v17);
  std::promise<llvm::MSVCPError>::~promise(&v15);
  std::__assoc_state<llvm::orc::shared::WrapperFunctionResult>::move(v8, &v14);
  do
    v11 = __ldaxr(v9);
  while (__stlxr(v11 - 1, v9));
  if (!v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 16))(v8);
  v12 = v14;
  std::promise<llvm::MSVCPError>::~promise(&v16);
  return v12;
}

void llvm::orc::SelfExecutorProcessControl::Create(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  std::string::size_type v13;
  char v14;
  int v15;
  uint64_t v16;
  unsigned int PageSizeEstimate;
  std::string::size_type v18;
  uint64_t v19;
  char *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  std::string v27;
  __int128 v28;
  uint64_t v29;
  std::string __p;
  uint64_t v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (!*a1)
  {
    v20 = (char *)operator new(0x70uLL);
    *((_QWORD *)v20 + 1) = 0;
    *((_QWORD *)v20 + 2) = 0;
    *(_QWORD *)v20 = &off_251C11158;
    *((_OWORD *)v20 + 2) = 0u;
    *((_OWORD *)v20 + 3) = 0u;
    *((_OWORD *)v20 + 4) = 0u;
    *((_OWORD *)v20 + 5) = 0u;
    *(_OWORD *)(v20 + 92) = 0u;
    *((_DWORD *)v20 + 27) = 16;
    v21 = (std::__shared_weak_count *)a1[1];
    a1[1] = v20;
    *((_QWORD *)v20 + 3) = 850045863;
    *a1 = v20 + 24;
    if (v21)
    {
      p_shared_owners = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(p_shared_owners);
      while (__stlxr(v23 - 1, p_shared_owners));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  if (!*a2)
  {
    v8 = (_QWORD *)operator new();
    *v8 = &off_251C155F0;
    v9 = *a2;
    *a2 = (uint64_t)v8;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
  llvm::sys::Process::getPageSize((uint64_t)&v31);
  if ((v32 & 1) != 0)
  {
    v19 = v31;
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v19;
  }
  else
  {
    llvm::sys::getProcessTriple(&__p);
    v26 = 260;
    *(_QWORD *)&v24 = &__p;
    llvm::Triple::Triple(&v27, (llvm::formatv_object_base **)&v24);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v10 = operator new();
    v11 = *(_OWORD *)a1;
    *a1 = 0;
    a1[1] = 0;
    v12 = *a2;
    *a2 = 0;
    __p.__r_.__value_.__r.__words[0] = v27.__r_.__value_.__l.__size_;
    v13 = v27.__r_.__value_.__r.__words[0];
    *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v27.__r_.__value_.__r.__words[1] + 7);
    v14 = HIBYTE(v27.__r_.__value_.__r.__words[2]);
    memset(&v27, 0, sizeof(v27));
    v25 = v29;
    v24 = v28;
    v15 = v31;
    v16 = *a3;
    *a3 = 0;
    *(_OWORD *)(v10 + 8) = v11;
    *(_QWORD *)(v10 + 24) = v12;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 128) = 0;
    *(_QWORD *)(v10 + 136) = 0;
    *(_DWORD *)(v10 + 144) = 0;
    *(_DWORD *)(v10 + 148) = 32;
    *(_QWORD *)(v10 + 152) = 0;
    *(_QWORD *)(v10 + 160) = 0;
    *(_DWORD *)(v10 + 168) = 0;
    *(_DWORD *)(v10 + 172) = 16;
    *(_QWORD *)(v10 + 176) = &unk_251C15578;
    *(_QWORD *)v10 = &off_251C154F8;
    *(_BYTE *)(v10 + 192) = 0;
    *(_QWORD *)(v10 + 184) = v16;
    if (!v16)
    {
      PageSizeEstimate = llvm::sys::Process::getPageSizeEstimate(0);
      v16 = operator new();
      *(_QWORD *)v16 = &off_251C157D0;
      *(_QWORD *)(v16 + 8) = PageSizeEstimate;
      *(_QWORD *)(v16 + 16) = 850045863;
      *(_OWORD *)(v16 + 24) = 0u;
      *(_OWORD *)(v16 + 40) = 0u;
      *(_OWORD *)(v16 + 56) = 0u;
      *(_OWORD *)(v16 + 72) = 0u;
      *(_OWORD *)(v16 + 88) = 0u;
      *(_QWORD *)(v16 + 104) = v16 + 120;
      *(_QWORD *)(v16 + 168) = 0;
      *(_QWORD *)(v16 + 112) = 0x400000000;
      *(_QWORD *)(v16 + 152) = v16 + 168;
      *(_QWORD *)(v16 + 160) = 0;
      *(_QWORD *)(v16 + 176) = 1;
      *(_QWORD *)(v10 + 184) = v16;
    }
    v18 = __p.__r_.__value_.__r.__words[0];
    *(_QWORD *)(v10 + 40) = v13;
    *(_QWORD *)(v10 + 48) = v18;
    *(_QWORD *)(v10 + 55) = *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 7);
    *(_BYTE *)(v10 + 63) = v14;
    *(_QWORD *)(v10 + 80) = v25;
    *(_OWORD *)(v10 + 64) = v24;
    *(_DWORD *)(v10 + 88) = v15;
    *(_QWORD *)(v10 + 112) = v10 + 176;
    *(_QWORD *)(v10 + 120) = v16;
    *(_QWORD *)(v10 + 96) = llvm::orc::SelfExecutorProcessControl::jitDispatchViaWrapperFunctionManager;
    *(_QWORD *)(v10 + 104) = v10;
    if (*(_DWORD *)(v10 + 84) == 5)
      *(_BYTE *)(v10 + 192) = 95;
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = v10;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
  }
}

void llvm::orc::SelfExecutorProcessControl::loadDylib(_anonymous_namespace_ *a1@<X1>, uint64_t a2@<X8>)
{
  void *PermanentLibrary;
  uint64_t v5;
  char v6;
  void *__p[2];
  uint64_t v8;
  void **v9;
  __int16 v10;

  __p[0] = 0;
  __p[1] = 0;
  v8 = 0;
  PermanentLibrary = llvm::sys::DynamicLibrary::getPermanentLibrary(a1, (uint64_t)__p);
  if (PermanentLibrary == &llvm::sys::DynamicLibrary::Invalid)
  {
    getErrorErrorCat();
    v5 = operator new();
    v10 = 260;
    v9 = __p;
    *(_QWORD *)v5 = off_251C127D0;
    llvm::Twine::str((llvm::formatv_object_base **)&v9, (std::string *)(v5 + 8));
    *(_QWORD *)(v5 + 32) = 3;
    *(_QWORD *)(v5 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v5 + 48) = 1;
    v6 = *(_BYTE *)(a2 + 8) | 1;
  }
  else
  {
    v5 = (uint64_t)PermanentLibrary;
    v6 = *(_BYTE *)(a2 + 8) & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v6;
  *(_QWORD *)a2 = v5;
  if (SHIBYTE(v8) < 0)
    operator delete(__p[0]);
}

void llvm::orc::SelfExecutorProcessControl::lookupSymbolsAsync(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int64x2_t v5;
  uint64_t v6;
  void *v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void **v15;
  void **v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  __int128 v21;
  int64x2_t v22;
  void **v23;
  uint64_t **v24;
  uint64_t *v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  void **v29;
  void *v30;
  BOOL v31;
  char v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t *v41;
  unint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  _QWORD *v46;
  void *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  char *v53;
  char *v54;
  _WORD *v55;
  _WORD *v56;
  char *v57;
  uint64_t v58;
  __int16 v59;
  uint64_t v60;
  char v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  __int128 v65;
  uint64_t v66;
  void *__p[2];
  char v68;
  int64x2_t v69;
  _QWORD v70[2];
  void **v71;
  int64x2_t v72;
  void **v73;
  _QWORD *v74;
  void ***v75;
  int64x2_t v76;
  uint64_t v77;
  char v78;
  _QWORD v79[3];
  char v80;
  uint64_t v81;

  v81 = *MEMORY[0x24BDAC8D0];
  v70[0] = 0;
  v5 = 0uLL;
  v69 = 0u;
  if (a3)
  {
    v6 = a2;
    v8 = &llvm::sys::DynamicLibrary::Invalid;
    v63 = a2 + 16 * a3;
    do
    {
      v9 = *(void **)v6;
      v10 = v69.i64[1];
      if (v69.i64[1] >= v70[0])
      {
        v12 = 0xAAAAAAAAAAAAAAABLL * ((v69.i64[1] - v69.i64[0]) >> 3);
        v13 = v12 + 1;
        if (v12 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_68:
          abort();
        if (0x5555555555555556 * ((v70[0] - v69.i64[0]) >> 3) > v13)
          v13 = 0x5555555555555556 * ((v70[0] - v69.i64[0]) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v70[0] - v69.i64[0]) >> 3) >= 0x555555555555555)
          v14 = 0xAAAAAAAAAAAAAAALL;
        else
          v14 = v13;
        v74 = v70;
        v15 = (void **)std::__allocate_at_least[abi:nn180100]<std::allocator<std::string>>((uint64_t)v70, v14);
        v16 = &v15[3 * v12];
        v71 = v15;
        v72.i64[0] = (uint64_t)v16;
        v73 = &v15[3 * v17];
        v11 = (uint64_t)(v16 + 3);
        v16[1] = 0;
        v16[2] = 0;
        *v16 = 0;
        v72.i64[1] = (uint64_t)(v16 + 3);
        v18 = (_QWORD *)v69.i64[1];
        v19 = (_QWORD *)v69.i64[0];
        v20 = v72.i64[0];
        if (v69.i64[1] == v69.i64[0])
        {
          v22 = vdupq_n_s64(v69.u64[1]);
        }
        else
        {
          do
          {
            *(_QWORD *)(v20 - 24) = 0;
            *(_QWORD *)(v20 - 16) = 0;
            v20 -= 24;
            *(_QWORD *)(v20 + 16) = 0;
            v21 = *(_OWORD *)(v18 - 3);
            v18 -= 3;
            *(_OWORD *)v20 = v21;
            *(_QWORD *)(v20 + 16) = v18[2];
            *v18 = 0;
            v18[1] = 0;
            v18[2] = 0;
          }
          while (v18 != v19);
          v22 = v69;
          v11 = v72.i64[1];
        }
        v69.i64[0] = v20;
        v69.i64[1] = v11;
        v72 = v22;
        v23 = (void **)v70[0];
        v70[0] = v73;
        v73 = v23;
        v71 = (void **)v22.i64[0];
        std::__split_buffer<std::vector<llvm::orc::ExecutorSymbolDef>>::~__split_buffer((uint64_t)&v71);
      }
      else
      {
        v11 = v69.i64[1] + 24;
        *(_QWORD *)v69.i64[1] = 0;
        *(_QWORD *)(v10 + 8) = 0;
        *(_QWORD *)(v10 + 16) = 0;
      }
      v69.i64[1] = v11;
      v64 = v6;
      v24 = *(uint64_t ***)(v6 + 8);
      v25 = *v24;
      v26 = v24[1];
      while (v25 != v26)
      {
        v27 = (_QWORD *)*v25;
        if (*(_BYTE *)(a1 + 192))
        {
          v27 = (_QWORD *)(*v25 + 1);
          v28 = 1;
        }
        else
        {
          v28 = 0;
        }
        std::string::basic_string[abi:nn180100](__p, v27 + 2, *(_QWORD *)*v25 - v28);
        if (v9 == v8)
        {
          v30 = 0;
        }
        else
        {
          if (v68 >= 0)
            v29 = __p;
          else
            v29 = (void **)__p[0];
          v30 = dlsym(v9, (const char *)v29);
        }
        if (v30)
          v31 = 0;
        else
          v31 = *((_DWORD *)v25 + 2) == 0;
        v32 = !v31;
        if (v31)
        {
          v65 = 0uLL;
          v66 = 0;
          *((_QWORD *)&v65 + 1) = std::vector<llvm::orc::SymbolStringPtr>::__push_back_slow_path<llvm::orc::SymbolStringPtr const&>((char **)&v65, v25);
          v37 = operator new();
          v38 = v37;
          v40 = *(_QWORD *)(a1 + 8);
          v39 = *(_QWORD *)(a1 + 16);
          if (v39)
          {
            v41 = (unint64_t *)(v39 + 8);
            do
              v42 = __ldxr(v41);
            while (__stxr(v42 + 1, v41));
          }
          v43 = v66;
          v44 = v65;
          v66 = 0;
          v65 = 0uLL;
          *(_QWORD *)v37 = off_251C14628;
          *(_QWORD *)(v37 + 8) = v40;
          *(_QWORD *)(v37 + 16) = v39;
          *(_OWORD *)(v37 + 24) = v44;
          *(_QWORD *)(v37 + 40) = v43;
          v72 = 0uLL;
          v71 = 0;
          v75 = &v71;
          std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100]((void ***)&v75);
          v80 |= 1u;
          v79[0] = v38;
          v45 = a4[3];
          v46 = a4;
          if ((v45 & 2) == 0)
            v46 = (_QWORD *)*a4;
          (*(void (**)(_QWORD *, _QWORD *))(v45 & 0xFFFFFFFFFFFFFFF8))(v46, v79);
          llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)v79);
          v71 = (void **)&v65;
          std::vector<llvm::orc::SymbolStringPtr>::__destroy_vector::operator()[abi:nn180100](&v71);
        }
        else
        {
          v33 = v69.i64[1];
          v34 = *(_QWORD *)(v69.i64[1] - 16);
          v35 = *(_QWORD *)(v69.i64[1] - 8);
          if (v34 >= v35)
          {
            v47 = v8;
            v48 = *(_QWORD *)(v69.i64[1] - 24);
            v49 = (uint64_t)(v34 - v48) >> 4;
            v50 = v49 + 1;
            if ((unint64_t)(v49 + 1) >> 60)
              goto LABEL_68;
            v51 = v35 - v48;
            if (v51 >> 3 > v50)
              v50 = v51 >> 3;
            if ((unint64_t)v51 >= 0x7FFFFFFFFFFFFFF0)
              v52 = 0xFFFFFFFFFFFFFFFLL;
            else
              v52 = v50;
            if (v52)
              v53 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::pair<llvm::orc::JITDylib *,llvm::orc::JITDylibLookupFlags>>>(v69.i64[1] - 8, v52);
            else
              v53 = 0;
            v54 = &v53[16 * v49];
            *(_QWORD *)v54 = v30;
            *((_WORD *)v54 + 4) = 4096;
            v56 = *(_WORD **)(v33 - 24);
            v55 = *(_WORD **)(v33 - 16);
            v57 = v54;
            v8 = v47;
            if (v55 != v56)
            {
              do
              {
                v58 = *((_QWORD *)v55 - 2);
                v55 -= 8;
                v59 = v55[4];
                *((_QWORD *)v57 - 2) = v58;
                v57 -= 16;
                *((_WORD *)v57 + 4) = v59;
              }
              while (v55 != v56);
              v55 = *(_WORD **)(v33 - 24);
            }
            v36 = v54 + 16;
            *(_QWORD *)(v33 - 24) = v57;
            *(_QWORD *)(v33 - 16) = v54 + 16;
            *(_QWORD *)(v33 - 8) = &v53[16 * v52];
            if (v55)
              operator delete(v55);
          }
          else
          {
            *(_QWORD *)v34 = v30;
            *(_WORD *)(v34 + 8) = 4096;
            v36 = (char *)(v34 + 16);
          }
          *(_QWORD *)(v33 - 16) = v36;
        }
        if (v68 < 0)
          operator delete(__p[0]);
        if ((v32 & 1) == 0)
          goto LABEL_67;
        v25 += 2;
      }
      v6 = v64 + 16;
    }
    while (v64 + 16 != v63);
    v5 = v69;
    v60 = v70[0];
    v61 = v78 & 0xFE;
  }
  else
  {
    v60 = 0;
    v61 = 0;
  }
  v78 = v61;
  v76 = v5;
  v77 = v60;
  v70[0] = 0;
  v69 = 0uLL;
  v62 = a4[3];
  if ((v62 & 2) == 0)
    a4 = (_QWORD *)*a4;
  (*(void (**)(_QWORD *, int64x2_t *))(v62 & 0xFFFFFFFFFFFFFFF8))(a4, &v76);
  llvm::Expected<std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>>::~Expected((uint64_t)&v76);
LABEL_67:
  v71 = (void **)&v69;
  std::vector<std::vector<llvm::orc::ExecutorSymbolDef>>::__destroy_vector::operator()[abi:nn180100](&v71);
}

uint64_t llvm::orc::SelfExecutorProcessControl::runAsMain@<X0>(uint64_t (*a1)(_QWORD, char *)@<X1>, const void **a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t result;
  _BYTE v6[24];

  v6[0] = 0;
  v6[16] = 0;
  result = llvm::orc::runAsMain(a1, a2, a3, (uint64_t)v6);
  *(_BYTE *)(a4 + 8) &= ~1u;
  *(_DWORD *)a4 = result;
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::runAsVoidFunction@<X0>(uint64_t (*a1)(void)@<X1>, uint64_t a2@<X8>)
{
  uint64_t result;

  result = a1();
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_DWORD *)a2 = result;
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::runAsIntFunction@<X0>(uint64_t (*a1)(uint64_t)@<X1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t result;

  result = a1(a2);
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = result;
  return result;
}

void llvm::orc::SelfExecutorProcessControl::callWrapperAsync(uint64_t a1, uint64_t (*a2)(uint64_t, uint64_t), _QWORD *a3, uint64_t a4, uint64_t a5)
{
  unint64_t v6;
  void *v7;
  BOOL v8;
  void *v9;
  unint64_t v10;

  v9 = (void *)a2(a4, a5);
  v10 = v6;
  llvm::orc::ExecutorProcessControl::IncomingWFRHandler::operator()(a3, (uint64_t)&v9);
  if (v10 >= 9)
  {
    v7 = v9;
LABEL_7:
    free(v7);
    return;
  }
  v7 = v9;
  if (v10)
    v8 = 1;
  else
    v8 = v9 == 0;
  if (!v8)
    goto LABEL_7;
}

uint64_t llvm::orc::SelfExecutorProcessControl::disconnect@<X0>(llvm::orc::SelfExecutorProcessControl *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 3) + 24))(*((_QWORD *)this + 3));
  *a2 = 0;
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::writeUInt8sAsync(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  _BYTE *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = a4;
  if (a3)
  {
    v5 = 16 * a3;
    v6 = (_BYTE *)(a2 + 8);
    do
    {
      **((_BYTE **)v6 - 1) = *v6;
      v6 += 16;
      v5 -= 16;
    }
    while (v5);
  }
  v9 = 0;
  v7 = a4[3];
  if ((v7 & 2) == 0)
    v4 = (_QWORD *)*a4;
  (*(void (**)(_QWORD *, uint64_t *))(v7 & 0xFFFFFFFFFFFFFFF8))(v4, &v9);
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::writeUInt16sAsync(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  _WORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = a4;
  if (a3)
  {
    v5 = 16 * a3;
    v6 = (_WORD *)(a2 + 8);
    do
    {
      **((_WORD **)v6 - 1) = *v6;
      v6 += 8;
      v5 -= 16;
    }
    while (v5);
  }
  v9 = 0;
  v7 = a4[3];
  if ((v7 & 2) == 0)
    v4 = (_QWORD *)*a4;
  (*(void (**)(_QWORD *, uint64_t *))(v7 & 0xFFFFFFFFFFFFFFF8))(v4, &v9);
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::writeUInt32sAsync(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = a4;
  if (a3)
  {
    v5 = 16 * a3;
    v6 = (_DWORD *)(a2 + 8);
    do
    {
      **((_DWORD **)v6 - 1) = *v6;
      v6 += 4;
      v5 -= 16;
    }
    while (v5);
  }
  v9 = 0;
  v7 = a4[3];
  if ((v7 & 2) == 0)
    v4 = (_QWORD *)*a4;
  (*(void (**)(_QWORD *, uint64_t *))(v7 & 0xFFFFFFFFFFFFFFF8))(v4, &v9);
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::writeUInt64sAsync(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  v4 = a4;
  if (a3)
  {
    v5 = 16 * a3;
    v6 = (_QWORD *)(a2 + 8);
    do
    {
      *(_QWORD *)*(v6 - 1) = *v6;
      v6 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  v9 = 0;
  v7 = a4[3];
  if ((v7 & 2) == 0)
    v4 = (_QWORD *)*a4;
  (*(void (**)(_QWORD *, uint64_t *))(v7 & 0xFFFFFFFFFFFFFFF8))(v4, &v9);
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

uint64_t llvm::orc::SelfExecutorProcessControl::writeBuffersAsync(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  uint64_t v9;

  if (a3)
  {
    v5 = a2;
    v6 = a2 + 24 * a3;
    do
    {
      memcpy(*(void **)v5, *(const void **)(v5 + 8), *(_QWORD *)(v5 + 16));
      v5 += 24;
    }
    while (v5 != v6);
  }
  v9 = 0;
  v7 = a4[3];
  if ((v7 & 2) == 0)
    a4 = (_QWORD *)*a4;
  (*(void (**)(_QWORD *, uint64_t *))(v7 & 0xFFFFFFFFFFFFFFF8))(a4, &v9);
  result = v9;
  if (v9)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return result;
}

void llvm::orc::SelfExecutorProcessControl::~SelfExecutorProcessControl(llvm::orc::SelfExecutorProcessControl *this)
{
  uint64_t v2;

  *(_QWORD *)this = &off_251C154F8;
  v2 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 22) = &unk_251C15578;
  *((_QWORD *)this + 23) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::orc::ExecutorProcessControl::~ExecutorProcessControl((void **)this);
}

{
  uint64_t v2;

  *(_QWORD *)this = &off_251C154F8;
  v2 = *((_QWORD *)this + 23);
  *((_QWORD *)this + 22) = &unk_251C15578;
  *((_QWORD *)this + 23) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::orc::ExecutorProcessControl::~ExecutorProcessControl((void **)this);
  JUMPOUT(0x24BD1B3A4);
}

void `non-virtual thunk to'llvm::orc::SelfExecutorProcessControl::~SelfExecutorProcessControl(llvm::orc::SelfExecutorProcessControl *this)
{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &unk_251C15578;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this - 22) = &off_251C154F8;
  v3 = (void **)((char *)this - 176);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::orc::ExecutorProcessControl::~ExecutorProcessControl(v3);
}

{
  uint64_t v2;
  void **v3;

  v2 = *((_QWORD *)this + 1);
  *(_QWORD *)this = &unk_251C15578;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this - 22) = &off_251C154F8;
  v3 = (void **)((char *)this - 176);
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  llvm::orc::ExecutorProcessControl::~ExecutorProcessControl(v3);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::CallImpl<llvm::orc::SelfExecutorProcessControl::jitDispatchViaWrapperFunctionManager(void *,void const*,char const*,unsigned long)::$_0>(uint64_t *a1, uint64_t a2)
{
  void *v2;
  BOOL v3;
  void *v4[2];

  *(_OWORD *)v4 = *(_OWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  std::promise<llvm::orc::shared::WrapperFunctionResult>::set_value(a1, (uint64_t)v4);
  if (v4[1] >= (void *)9)
  {
    v2 = v4[0];
LABEL_7:
    free(v2);
    return;
  }
  v2 = v4[0];
  if (v4[1])
    v3 = 1;
  else
    v3 = v4[0] == 0;
  if (!v3)
    goto LABEL_7;
}

_QWORD *llvm::detail::UniqueFunctionBase<void,llvm::orc::shared::WrapperFunctionResult>::MoveImpl<llvm::orc::SelfExecutorProcessControl::jitDispatchViaWrapperFunctionManager(void *,void const*,char const*,unsigned long)::$_0>(_QWORD *result, _QWORD *a2)
{
  *result = *a2;
  *a2 = 0;
  return result;
}

uint64_t llvm::orc::InPlaceTaskDispatcher::dispatch(uint64_t a1, _QWORD *a2)
{
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a2 + 48))(*a2);
}

void llvm::orc::DynamicThreadPoolTaskDispatcher::dispatch(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  std::__thread_struct *v7;
  _QWORD *v8;
  int v9;
  llvm::orc::DynamicThreadPoolTaskDispatcher *v10;
  std::thread v11;
  uint64_t *v12;

  v4 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)*a2 + 24))(*a2, &llvm::orc::MaterializationTask::ID);
  std::mutex::lock((std::mutex *)(a1 + 8));
  if (v4)
  {
    if (*(_BYTE *)(a1 + 144))
    {
      v5 = *(_QWORD *)(a1 + 152);
      if (v5 == *(_QWORD *)(a1 + 136))
      {
        std::deque<std::unique_ptr<llvm::orc::Task>>::push_back((_QWORD *)(a1 + 160), a2);
        std::mutex::unlock((std::mutex *)(a1 + 8));
        return;
      }
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 152);
    }
    *(_QWORD *)(a1 + 152) = v5 + 1;
  }
  ++*(_QWORD *)(a1 + 80);
  std::mutex::unlock((std::mutex *)(a1 + 8));
  v6 = *a2;
  *a2 = 0;
  v7 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v7);
  v8 = (_QWORD *)operator new();
  *v8 = v7;
  v8[1] = a1;
  v8[2] = v6;
  *((_BYTE *)v8 + 24) = v4;
  v9 = pthread_create(&v11.__t_, 0, (void *(__cdecl *)(void *))std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,llvm::orc::DynamicThreadPoolTaskDispatcher::dispatch(std::unique_ptr<llvm::orc::Task>)::$_0>>, v8);
  if (v9)
  {
    std::__throw_system_error(v9, "thread constructor failed");
    llvm::orc::DynamicThreadPoolTaskDispatcher::shutdown(v10);
  }
  else
  {
    v12 = 0;
    std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,llvm::orc::DynamicThreadPoolTaskDispatcher::dispatch(std::unique_ptr<llvm::orc::Task>)::$_0>>::~unique_ptr[abi:nn180100](&v12);
    std::thread::detach(&v11);
    std::thread::~thread(&v11);
  }
}

void llvm::orc::DynamicThreadPoolTaskDispatcher::shutdown(llvm::orc::DynamicThreadPoolTaskDispatcher *this)
{
  std::mutex *m;
  std::unique_lock<std::mutex> v3;

  m = (std::mutex *)((char *)this + 8);
  v3.__m_ = (std::unique_lock<std::mutex>::mutex_type *)((char *)this + 8);
  v3.__owns_ = 1;
  std::mutex::lock((std::mutex *)((char *)this + 8));
  *((_BYTE *)this + 72) = 0;
  if (!*((_QWORD *)this + 10))
    goto LABEL_5;
  do
    std::condition_variable::wait((std::condition_variable *)((char *)this + 88), &v3);
  while (*((_QWORD *)this + 10));
  if (v3.__owns_)
  {
    m = v3.__m_;
LABEL_5:
    std::mutex::unlock(m);
  }
}

void llvm::orc::DynamicThreadPoolTaskDispatcher::~DynamicThreadPoolTaskDispatcher(llvm::orc::DynamicThreadPoolTaskDispatcher *this)
{
  std::mutex *v2;

  *(_QWORD *)this = &off_251C155C0;
  v2 = (std::mutex *)((char *)this + 8);
  std::deque<std::unique_ptr<llvm::orc::Task>>::~deque[abi:nn180100]((_QWORD *)this + 20);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  std::mutex::~mutex(v2);
}

{
  std::mutex *v2;

  *(_QWORD *)this = &off_251C155C0;
  v2 = (std::mutex *)((char *)this + 8);
  std::deque<std::unique_ptr<llvm::orc::Task>>::~deque[abi:nn180100]((_QWORD *)this + 20);
  std::condition_variable::~condition_variable((std::condition_variable *)((char *)this + 88));
  std::mutex::~mutex(v2);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::orc::InPlaceTaskDispatcher::~InPlaceTaskDispatcher(llvm::orc::InPlaceTaskDispatcher *this)
{
  JUMPOUT(0x24BD1B3A4);
}

uint64_t std::__thread_proxy[abi:nn180100]<std::tuple<std::unique_ptr<std::__thread_struct>,llvm::orc::DynamicThreadPoolTaskDispatcher::dispatch(std::unique_ptr<llvm::orc::Task>)::$_0>>(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v10;

  v10 = (uint64_t *)a1;
  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  v4 = *(_QWORD *)(a1 + 8);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
  std::mutex::lock((std::mutex *)(v4 + 8));
  while (*(_QWORD *)(v4 + 200))
  {
    v5 = *(_QWORD *)(*(_QWORD *)(v4 + 168) + ((*(_QWORD *)(v4 + 192) >> 6) & 0x3FFFFFFFFFFFFF8));
    v6 = *(_QWORD *)(v4 + 192) & 0x1FFLL;
    v7 = *(_QWORD *)(v5 + 8 * v6);
    *(_QWORD *)(v5 + 8 * v6) = 0;
    v8 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v7;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    std::deque<std::unique_ptr<llvm::orc::Task>>::pop_front((_QWORD *)(v4 + 160));
    if (!*(_BYTE *)(a1 + 24))
    {
      ++*(_QWORD *)(v4 + 152);
      *(_BYTE *)(a1 + 24) = 1;
    }
    std::mutex::unlock((std::mutex *)(v4 + 8));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
    std::mutex::lock((std::mutex *)(v4 + 8));
  }
  if (*(_BYTE *)(a1 + 24))
    --*(_QWORD *)(v4 + 152);
  --*(_QWORD *)(v4 + 80);
  std::condition_variable::notify_all((std::condition_variable *)(v4 + 88));
  std::mutex::unlock((std::mutex *)(v4 + 8));
  std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,llvm::orc::DynamicThreadPoolTaskDispatcher::dispatch(std::unique_ptr<llvm::orc::Task>)::$_0>>::~unique_ptr[abi:nn180100](&v10);
  return 0;
}

uint64_t **std::unique_ptr<std::tuple<std::unique_ptr<std::__thread_struct>,llvm::orc::DynamicThreadPoolTaskDispatcher::dispatch(std::unique_ptr<llvm::orc::Task>)::$_0>>::~unique_ptr[abi:nn180100](uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = v2[2];
    v2[2] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    std::unique_ptr<std::__thread_struct>::reset[abi:nn180100](v2, 0);
    MEMORY[0x24BD1B3A4](v2, 0x1020C4034AC6F07);
  }
  return a1;
}

uint64_t std::unique_ptr<std::__thread_struct>::reset[abi:nn180100](uint64_t *a1, uint64_t a2)
{
  uint64_t result;

  result = *a1;
  *a1 = a2;
  if (result)
  {
    MEMORY[0x24BD1B1DC]();
    JUMPOUT(0x24BD1B3A4);
  }
  return result;
}

uint64_t llvm::Expected<std::unique_ptr<llvm::Module>>::~Expected(uint64_t a1)
{
  llvm::Module *v2;

  if ((*(_BYTE *)(a1 + 8) & 1) != 0)
  {
    v2 = *(llvm::Module **)a1;
    *(_QWORD *)a1 = 0;
    if (v2)
      (*(void (**)(llvm::Module *))(*(_QWORD *)v2 + 8))(v2);
  }
  else
  {
    std::unique_ptr<llvm::Module>::reset[abi:nn180100]((llvm::Module **)a1, 0);
  }
  return a1;
}

uint64_t llvm::jitlink::DWARFRecordSectionSplitter::operator()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t *v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  std::string::size_type *v25;
  std::string::size_type *v26;
  uint64_t v27;
  std::string::size_type *v28;
  std::string::size_type *v29;
  std::string::size_type v30;
  _QWORD *v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count_vtbl *v39;
  uint64_t v40;
  int v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  unint64_t v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  unsigned int v59;
  unint64_t v60[4];
  __int16 v61;
  std::string v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  char v66;
  uint64_t v67;
  uint64_t v68;

  v68 = *MEMORY[0x24BDAC8D0];
  result = llvm::jitlink::LinkGraph::findSectionByName(a2, *a1, a1[1], a3);
  if (!result)
  {
    *a4 = 0;
    return result;
  }
  v8 = result;
  v56 = 0;
  v57 = 0;
  v9 = result + 32;
  v58 = 0;
  v10 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(result + 32);
  v12 = *(_QWORD *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
  if ((unint64_t *)v12 != v10)
  {
    v13 = v10;
    v14 = v11;
    do
    {
      v60[0] = 0;
      v60[0] = *v13;
      v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v62.__r_.__value_.__r.__words[2];
      v62.__r_.__value_.__l.__size_ = 0x800000000;
      v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::FindAndConstruct((uint64_t)&v56, (uint64_t *)v60);
      std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>::operator=[abi:nn180100]<llvm::SmallVector<llvm::jitlink::Symbol *,8u>,void>((uint64_t)(v15 + 1), (uint64_t)&v62);
      if ((std::string::size_type *)v62.__r_.__value_.__l.__data_ != &v62.__r_.__value_.__r.__words[2])
        free(v62.__r_.__value_.__l.__data_);
      while (++v13 != v14)
      {
        if ((*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_10;
      }
      v13 = v14;
LABEL_10:
      ;
    }
    while (v13 != (unint64_t *)v12);
  }
  v16 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 56);
  v18 = *(_QWORD *)(v8 + 56) + 8 * *(unsigned int *)(v8 + 72);
  if ((uint64_t *)v18 != v16)
  {
    v19 = v16;
    v20 = v17;
    do
    {
      v21 = *v19;
      v22 = *(_QWORD *)(*v19 + 16);
      v60[0] = v22;
      v62.__r_.__value_.__r.__words[0] = 0;
      v23 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::LookupBucketFor<llvm::jitlink::Block *>(v56, v58, v22, &v62);
      v24 = (_QWORD *)v62.__r_.__value_.__r.__words[0];
      if ((v23 & 1) == 0)
      {
        v24 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::InsertIntoBucketImpl<llvm::jitlink::Block *>((uint64_t)&v56, (uint64_t *)v60, v62.__r_.__value_.__l.__data_);
        *v24 = v22;
        *((_BYTE *)v24 + 8) = 0;
        *((_BYTE *)v24 + 88) = 0;
      }
      llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v24 + 2, v21);
      while (++v19 != v20)
      {
        if ((*v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_20;
      }
      v19 = v20;
LABEL_20:
      ;
    }
    while (v19 != (uint64_t *)v18);
  }
  v25 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v9);
  v27 = *(_QWORD *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
  if ((std::string::size_type *)v27 != v25)
  {
    v28 = v25;
    v29 = v26;
    do
    {
      v62.__r_.__value_.__r.__words[0] = 0;
      v30 = *v28++;
      v62.__r_.__value_.__r.__words[0] = v30;
      v31 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::FindAndConstruct((uint64_t)&v56, (uint64_t *)&v62);
      v32 = *((unsigned int *)v31 + 4);
      v33 = 126 - 2 * __clz(v32);
      if ((_DWORD)v32)
        v34 = v33;
      else
        v34 = 0;
      std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **,false>(v31[1], (uint64_t *)(v31[1] + 8 * v32), v34, 1);
      while (v28 != v29)
      {
        if ((*v28 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_31;
        ++v28;
      }
      v28 = v29;
LABEL_31:
      ;
    }
    while (v28 != (std::string::size_type *)v27);
  }
  if ((_DWORD)v57)
  {
    if (v58)
    {
      v35 = 96 * v58;
      v36 = v56;
      while ((*(_QWORD *)v36 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v36 += 96;
        v35 -= 96;
        if (!v35)
          goto LABEL_71;
      }
    }
    else
    {
      v36 = v56;
    }
    v37 = v56 + 96 * v58;
    if (v36 != v37)
    {
      v38 = *(_QWORD *)v36;
LABEL_42:
      v39 = *(std::__shared_weak_count_vtbl **)(v38 + 24);
      if (!v39)
      {
        v61 = 1283;
        v53 = *a1;
        v54 = a1[1];
        v60[0] = (unint64_t)"Unexpected zero-fill block in ";
        v60[2] = v53;
        v60[3] = v54;
        v55 = operator new();
        v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v60;
        v62.__r_.__value_.__r.__words[2] = (std::string::size_type)" section";
        LOWORD(v64) = 770;
        *(_QWORD *)v55 = off_251C15728;
        llvm::Twine::str((llvm::formatv_object_base **)&v62, (std::string *)(v55 + 8));
        *a4 = v55;
        goto LABEL_72;
      }
      v40 = *(_QWORD *)(v38 + 32);
      if (!v40)
      {
        *a4 = 0;
        goto LABEL_53;
      }
      v41 = *(_DWORD *)(a2 + 172);
      v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_251C11F40;
      llvm::BinaryStreamRef::BinaryStreamRef(&v62.__r_.__value_.__l.__size_, v39, v40, v41);
      v67 = 0;
      v59 = 0;
      llvm::BinaryStreamReader::readInteger<unsigned int>((uint64_t)&v62, &v59, a4);
      if (!*a4)
      {
        v45 = 0;
        do
        {
          v46 = v59;
          if (v59 == -1)
          {
            v60[0] = 0;
            llvm::BinaryStreamReader::readInteger<unsigned long long>((uint64_t)&v62, v60, a4);
            if (*a4)
              break;
            v46 = v60[0];
          }
          llvm::BinaryStreamReader::skip(&v62, v46, a4);
          if (*a4)
            break;
          if (v66)
          {
            v47 = v65;
          }
          else if (v63)
          {
            v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v63 + 40))(v63);
            v47 = v48 - v64;
          }
          else
          {
            v47 = 0;
          }
          if (v47 == v67)
          {
            *a4 = 0;
            break;
          }
          llvm::jitlink::LinkGraph::splitBlock(a2, v38, v67 - v45, (void **)(v36 + 8));
          v45 = v67;
          v59 = 0;
          llvm::BinaryStreamReader::readInteger<unsigned int>((uint64_t)&v62, &v59, a4);
        }
        while (!*a4);
      }
      v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_251C11F40;
      v42 = (std::__shared_weak_count *)v62.__r_.__value_.__r.__words[2];
      if (v62.__r_.__value_.__r.__words[2])
      {
        v43 = (unint64_t *)(v62.__r_.__value_.__r.__words[2] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      if (*a4)
        goto LABEL_72;
LABEL_53:
      while (1)
      {
        v36 += 96;
        if (v36 == v37)
          break;
        v38 = *(_QWORD *)v36;
        if ((*(_QWORD *)v36 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v36 != v37)
            goto LABEL_42;
          break;
        }
      }
    }
  }
LABEL_71:
  *a4 = 0;
LABEL_72:
  v49 = v56;
  if (v58)
  {
    v50 = 96 * v58;
    v51 = v56;
    do
    {
      if ((*(_QWORD *)v51 | 0x1000) != 0xFFFFFFFFFFFFF000 && *(_BYTE *)(v51 + 88))
      {
        v52 = *(void **)(v51 + 8);
        if ((void *)(v51 + 24) != v52)
          free(v52);
      }
      v51 += 96;
      v50 -= 96;
    }
    while (v50);
  }
  return MEMORY[0x24BD1B398](v49, 8);
}

uint64_t std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>::operator=[abi:nn180100]<llvm::SmallVector<llvm::jitlink::Symbol *,8u>,void>(uint64_t a1, uint64_t a2)
{
  if (*(_BYTE *)(a1 + 80))
  {
    llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(a1, a2);
  }
  else
  {
    *(_QWORD *)a1 = a1 + 16;
    *(_QWORD *)(a1 + 8) = 0x800000000;
    if (*(_DWORD *)(a2 + 8))
      llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=(a1, a2);
    *(_BYTE *)(a1 + 80) = 1;
  }
  return a1;
}

std::string *llvm::BinaryStreamReader::readInteger<unsigned int>@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string *result;
  unsigned int *v7;
  unsigned int v8;
  unsigned int v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  result = llvm::BinaryStreamRef::readBytes(a1 + 8, *(_QWORD *)(a1 + 56), 4, (uint64_t)v10, a3);
  if (!*a3)
  {
    *(_QWORD *)(a1 + 56) += 4;
    *a3 = 0;
    v7 = (unsigned int *)v10[0];
    result = (std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    v8 = *v7;
    v9 = bswap32(*v7);
    if (((_DWORD)result - 1) >= 2)
      v8 = v9;
    *a2 = v8;
    *a3 = 0;
  }
  return result;
}

std::string *llvm::BinaryStreamReader::readInteger<unsigned long long>@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  std::string *result;
  unint64_t *v7;
  unint64_t v8;
  unint64_t v9;
  _QWORD v10[2];

  v10[0] = 0;
  v10[1] = 0;
  result = llvm::BinaryStreamRef::readBytes(a1 + 8, *(_QWORD *)(a1 + 56), 8, (uint64_t)v10, a3);
  if (!*a3)
  {
    *(_QWORD *)(a1 + 56) += 8;
    *a3 = 0;
    v7 = (unint64_t *)v10[0];
    result = (std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 24) + 16))(*(_QWORD *)(a1 + 24));
    v8 = *v7;
    v9 = bswap64(*v7);
    if (((_DWORD)result - 1) >= 2)
      v8 = v9;
    *a2 = v8;
    *a3 = 0;
  }
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::InsertIntoBucketImpl<llvm::jitlink::Block *>(a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
    *((_BYTE *)v5 + 88) = 0;
  }
  return v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::LookupBucketFor<llvm::jitlink::Block *>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 96 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 96 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::InsertIntoBucketImpl<llvm::jitlink::Block *>(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::grow(a1, v6);
  v8 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(96 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 96 * v10;
      do
      {
        *result = -4096;
        result += 12;
        v11 -= 96;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 96 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v20 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>,llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Block *,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>>>::LookupBucketFor<llvm::jitlink::Block *>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v20);
          v15 = v20;
          *v20 = *(_QWORD *)v13;
          *((_BYTE *)v15 + 8) = 0;
          *((_BYTE *)v15 + 88) = 0;
          if (*(_BYTE *)(v13 + 88))
          {
            v15[1] = v15 + 3;
            v15[2] = 0x800000000;
            if (*(_DWORD *)(v13 + 16))
              llvm::SmallVectorImpl<llvm::orc::JITDylib *>::operator=((uint64_t)(v15 + 1), v13 + 8);
            *((_BYTE *)v15 + 88) = 1;
            v16 = *(unsigned __int8 *)(v13 + 88);
            ++*(_DWORD *)(a1 + 8);
            if (v16)
            {
              v17 = *(void **)(v13 + 8);
              if ((void *)(v13 + 24) != v17)
                free(v17);
            }
          }
          else
          {
            ++*(_DWORD *)(a1 + 8);
          }
        }
        v13 += 96;
        v12 -= 96;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v18 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v18)
  {
    v19 = 96 * v18;
    do
    {
      *result = -4096;
      result += 12;
      v19 -= 96;
    }
    while (v19);
  }
  return result;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v40 = *(a2 - 1);
        v41 = *v8;
        if ((*(_QWORD *)(v40 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v8 + 24) & 0x1FFFFFFFFFFFFFFuLL))
        {
          *v8 = v40;
          *(a2 - 1) = v41;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v42 = v8 + 1;
        v43 = v8 + 2;
        v44 = v8 + 3;
        result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v8, v8 + 1, v8 + 2, v8 + 3);
        v45 = *(a2 - 1);
        v46 = v8[3];
        if ((*(_QWORD *)(v45 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v46 + 24) & 0x1FFFFFFFFFFFFFFuLL))
        {
          *v44 = v45;
          *(a2 - 1) = v46;
          v47 = *v44;
          v48 = *v43;
          if ((*(_QWORD *)(*v44 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v43 + 24) & 0x1FFFFFFFFFFFFFFuLL))
          {
            *v43 = v47;
            *v44 = v48;
            v49 = *v42;
            if ((*(_QWORD *)(v47 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v42 + 24) & 0x1FFFFFFFFFFFFFFuLL))
            {
              v8[1] = v47;
              v8[2] = v49;
              v50 = *v8;
              if ((*(_QWORD *)(v47 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v8 + 24) & 0x1FFFFFFFFFFFFFFuLL))
              {
                *v8 = v47;
                v8[1] = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v51 = v8 + 1;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 8;
              v55 = v8;
              do
              {
                v57 = *v55;
                v56 = v55[1];
                v55 = v51;
                if ((*(_QWORD *)(v56 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v57 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                {
                  v58 = v54;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58) = v57;
                    v59 = v58 - 8;
                    if (v58 == 8)
                      break;
                    v57 = *(uint64_t *)((char *)v8 + v58 - 16);
                    v58 -= 8;
                    if ((*(_QWORD *)(v56 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(_QWORD *)(v57 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                    {
                      v60 = (uint64_t *)((char *)v8 + v59);
                      goto LABEL_80;
                    }
                  }
                  v60 = v8;
LABEL_80:
                  *v60 = v56;
                }
                v51 = v55 + 1;
                v54 += 8;
              }
              while (v55 + 1 != a2);
            }
          }
          else if (!v53)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v51;
              if ((*(_QWORD *)(v88 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v89 + 24) & 0x1FFFFFFFFFFFFFFuLL))
              {
                do
                {
                  *v51 = v89;
                  v89 = *(v51 - 2);
                  --v51;
                }
                while ((*(_QWORD *)(v88 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v89 + 24) & 0x1FFFFFFFFFFFFFFuLL));
                *v51 = v88;
              }
              v51 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                v66 = *v65;
                if (2 * v63 + 2 < (uint64_t)v10
                  && (*(_QWORD *)(v66 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v65[1] + 24) & 0x1FFFFFFFFFFFFFFuLL))
                {
                  v66 = v65[1];
                  ++v65;
                  v64 = 2 * v63 + 2;
                }
                result = (unint64_t)&v8[v63];
                v67 = *(_QWORD *)result;
                if ((*(_QWORD *)(v66 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(_QWORD *)(*(_QWORD *)result + 24) & 0x1FFFFFFFFFFFFFFuLL))
                {
                  do
                  {
                    v68 = v65;
                    *(_QWORD *)result = v66;
                    if (v61 < v64)
                      break;
                    v69 = (2 * v64) | 1;
                    v65 = &v8[v69];
                    v70 = 2 * v64 + 2;
                    v66 = *v65;
                    if (v70 < (uint64_t)v10
                      && (*(_QWORD *)(v66 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v65[1] + 24) & 0x1FFFFFFFFFFFFFFuLL))
                    {
                      v66 = v65[1];
                      ++v65;
                      v69 = v70;
                    }
                    result = (unint64_t)v68;
                    v64 = v69;
                  }
                  while ((*(_QWORD *)(v66 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(_QWORD *)(v67 + 24) & 0x1FFFFFFFFFFFFFFuLL));
                  *v68 = v67;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v71 = (unint64_t)v9 >> 3;
            do
            {
              v72 = 0;
              v73 = *v8;
              v74 = v8;
              do
              {
                v75 = &v74[v72];
                v78 = v75[1];
                v76 = v75 + 1;
                v77 = v78;
                v79 = (2 * v72) | 1;
                v80 = 2 * v72 + 2;
                if (v80 < v71)
                {
                  result = *(_QWORD *)(v77 + 24) & 0x1FFFFFFFFFFFFFFLL;
                  if (result > (*(_QWORD *)(v76[1] + 24) & 0x1FFFFFFFFFFFFFFuLL))
                  {
                    v77 = v76[1];
                    ++v76;
                    v79 = v80;
                  }
                }
                *v74 = v77;
                v74 = v76;
                v72 = v79;
              }
              while (v79 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              if (v76 == --a2)
              {
                *v76 = v73;
              }
              else
              {
                *v76 = *a2;
                *a2 = v73;
                v81 = (char *)v76 - (char *)v8 + 8;
                if (v81 >= 9)
                {
                  v82 = (((unint64_t)v81 >> 3) - 2) >> 1;
                  v83 = &v8[v82];
                  v84 = *v83;
                  v85 = *v76;
                  if ((*(_QWORD *)(*v83 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v76 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                  {
                    do
                    {
                      v86 = v83;
                      *v76 = v84;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &v8[v82];
                      v84 = *v83;
                      v76 = v86;
                    }
                    while ((*(_QWORD *)(*v83 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v85 + 24) & 0x1FFFFFFFFFFFFFFuLL));
                    *v86 = v85;
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v14 + 24) & 0x1FFFFFFFFFFFFFFLL;
          if ((*(_QWORD *)(*(v7 - 1) + 24) & 0x1FFFFFFFFFFFFFFuLL) > v15)
            goto LABEL_12;
          if (v15 <= (*(_QWORD *)(*(a2 - 1) + 24) & 0x1FFFFFFFFFFFFFFuLL))
          {
            v31 = v7 + 1;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              ++v31;
            }
            while (v15 <= (*(_QWORD *)(*v8 + 24) & 0x1FFFFFFFFFFFFFFuLL));
          }
          else
          {
            v8 = v7;
            do
            {
              v30 = v8[1];
              ++v8;
            }
            while (v15 <= (*(_QWORD *)(v30 + 24) & 0x1FFFFFFFFFFFFFFuLL));
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
              v33 = *--v32;
            while (v15 > (*(_QWORD *)(v33 + 24) & 0x1FFFFFFFFFFFFFFuLL));
          }
          if (v8 < v32)
          {
            v34 = *v8;
            v35 = *v32;
            do
            {
              *v8 = v35;
              *v32 = v34;
              v36 = *(_QWORD *)(v14 + 24) & 0x1FFFFFFFFFFFFFFLL;
              do
              {
                v37 = v8[1];
                ++v8;
                v34 = v37;
              }
              while (v36 <= (*(_QWORD *)(v37 + 24) & 0x1FFFFFFFFFFFFFFuLL));
              do
              {
                v38 = *--v32;
                v35 = v38;
              }
              while (v36 > (*(_QWORD *)(v38 + 24) & 0x1FFFFFFFFFFFFFFuLL));
            }
            while (v8 < v32);
          }
          v39 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v39;
          a4 = 0;
          *v39 = v14;
          continue;
        }
        v15 = *(_QWORD *)(v14 + 24) & 0x1FFFFFFFFFFFFFFLL;
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while ((*(_QWORD *)(v17 + 24) & 0x1FFFFFFFFFFFFFFuLL) > v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while ((*(_QWORD *)(v21 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while ((*(_QWORD *)(v20 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= v15);
        }
        if (v18 >= v19)
        {
          v28 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            v25 = *(_QWORD *)(v14 + 24) & 0x1FFFFFFFFFFFFFFLL;
            do
            {
              v26 = v23[1];
              ++v23;
              v17 = v26;
            }
            while ((*(_QWORD *)(v26 + 24) & 0x1FFFFFFFFFFFFFFuLL) > v25);
            do
            {
              v27 = *--v24;
              v22 = v27;
            }
            while ((*(_QWORD *)(v27 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= v25);
          }
          while (v23 < v24);
          v28 = v23 - 1;
        }
        if (v28 != v7)
          *v7 = *v28;
        *v28 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **,false>(v7, v28, a3, a4 & 1);
          a4 = 0;
          v8 = v28 + 1;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v7, v28);
        v8 = v28 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v28 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_33;
        }
        a2 = v28;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFLL;
  v6 = *a3;
  v7 = *(_QWORD *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFLL;
  if (v5 <= (*(_QWORD *)(*result + 24) & 0x1FFFFFFFFFFFFFFuLL))
  {
    if (v7 > v5)
    {
      *a2 = v6;
      *a3 = v3;
      v8 = *result;
      if ((*(_QWORD *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*result + 24) & 0x1FFFFFFFFFFFFFFuLL))
      {
        *result = *a2;
        *a2 = v8;
      }
    }
  }
  else
  {
    if (v7 <= v5)
    {
      *result = v3;
      *a2 = v4;
      if ((*(_QWORD *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(_QWORD *)(v4 + 24) & 0x1FFFFFFFFFFFFFFuLL))
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v6;
    }
    *a3 = v4;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if ((*(_QWORD *)(v6 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*a1 + 24) & 0x1FFFFFFFFFFFFFFuLL))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if ((*(_QWORD *)(v20 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v21 + 24) & 0x1FFFFFFFFFFFFFFuLL))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if ((*(_QWORD *)(*v19 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFuLL))
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if ((*(_QWORD *)(v22 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v17 + 24) & 0x1FFFFFFFFFFFFFFuLL))
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if ((*(_QWORD *)(v22 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*a1 + 24) & 0x1FFFFFFFFFFFFFFuLL))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if ((*(_QWORD *)(*v9 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v8 + 24) & 0x1FFFFFFFFFFFFFFuLL))
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if ((*(_QWORD *)(v12 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(_QWORD *)(v13 + 24) & 0x1FFFFFFFFFFFFFFuLL))
        {
          v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a2, a3);
  v9 = *a3;
  if ((*(_QWORD *)(*a4 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFuLL))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if ((*(_QWORD *)(*a3 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFuLL))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if ((*(_QWORD *)(*a2 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*a1 + 24) & 0x1FFFFFFFFFFFFFFuLL))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void llvm::jitlink::EHFrameEdgeFixer::operator()(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, std::string *a4@<X8>)
{
  uint64_t SectionByName;
  int v8;
  BOOL v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string::size_type *v21;
  uint64_t *v22;
  uint64_t v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  std::string::size_type v30;
  std::string::size_type v31;
  std::string::size_type v33;
  const void *v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t **v39;
  uint64_t *v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t **v43;
  uint64_t **v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t **v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t **v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t *v57;
  uint64_t *v58;
  uint64_t **v59;
  uint64_t *v60;
  uint64_t **v61;
  uint64_t **v62;
  uint64_t **v63;
  uint64_t *v64;
  uint64_t **v65;
  unint64_t v66;
  uint64_t *v67;
  uint64_t *v68;
  unint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  _QWORD *v72;
  _QWORD *v73;
  uint64_t v74;
  _QWORD *v75;
  _QWORD *v76;
  unint64_t **v77;
  unint64_t *v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  unint64_t **v83;
  unint64_t **v84;
  unint64_t *v85;
  unint64_t **v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t **v89;
  uint64_t *v90;
  std::__shared_weak_count_vtbl *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  int v100;
  char v101;
  std::string::size_type v102;
  int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  std::string::size_type v108;
  std::string::size_type data_low;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  std::__shared_weak_count_vtbl *v116;
  int v117;
  _QWORD *v118;
  uint64_t v119;
  uint64_t v120;
  std::__shared_weak_count_vtbl *v121;
  int v122;
  _QWORD *v123;
  uint64_t v124;
  char *v125;
  std::string::size_type v126;
  _BYTE *v127;
  uint64_t v128;
  uint64_t v129;
  std::string::size_type v130;
  std::__shared_weak_count *v131;
  unint64_t *v132;
  unint64_t v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  unsigned __int8 *v137;
  int v138;
  std::string::size_type v139;
  const char *v140;
  unint64_t *v141;
  uint64_t *v142;
  uint64_t v143;
  int v144;
  uint64_t v145;
  std::string *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  uint64_t (****v154)(llvm::detail::format_adapter *__hidden);
  uint64_t v155;
  uint64_t v156;
  std::string::size_type v157;
  const void *v158;
  size_t v159;
  _QWORD *v160;
  uint64_t v161;
  uint64_t v162;
  unint64_t **__p;
  unint64_t **v164;
  unint64_t **v165;
  uint64_t v166;
  _QWORD v167[2];
  int v168;
  uint64_t **v169;
  uint64_t *v170;
  uint64_t v171;
  _QWORD v172[2];
  int v173;
  unsigned int v174;
  const char *v175;
  uint64_t v176;
  uint64_t (****v177)(llvm::detail::format_adapter *__hidden);
  uint64_t v178;
  uint64_t (**v179)(llvm::detail::format_adapter *__hidden);
  uint64_t v180;
  uint64_t (***v181)(llvm::detail::format_adapter *__hidden);
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186[4];
  __int16 v187;
  unint64_t v188;
  unsigned __int8 v189;
  uint64_t v190[2];
  std::string *v191;
  uint64_t v192;
  __int16 v193;
  std::string v194;
  uint64_t v195;
  uint64_t (**v196)(llvm::detail::format_adapter *__hidden);
  uint64_t v197;
  uint64_t (***v198)(llvm::detail::format_adapter *__hidden);
  uint64_t v199;
  const char *v200;
  char v201;
  std::string *v202;
  __int16 v203;
  std::string::size_type v204;
  char v205;
  std::string v206;
  uint64_t v207;
  uint64_t (**v208)(llvm::detail::format_adapter *__hidden);
  uint64_t v209;
  uint64_t (***v210)(llvm::detail::format_adapter *__hidden);
  std::string v211;
  __int16 v212;
  uint64_t v213;

  v213 = *MEMORY[0x24BDAC8D0];
  SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, *a1, a1[1], a3);
  if (!SectionByName)
  {
    a4->__r_.__value_.__r.__words[0] = 0;
    return;
  }
  v8 = *(_DWORD *)(a2 + 168);
  v9 = v8 == 4 || v8 == 8;
  if (!v9)
  {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"EHFrameEdgeFixer only supports 32 and 64 bit targets", (uint64_t *)a4);
    return;
  }
  v10 = SectionByName;
  v161 = (uint64_t)a1;
  v167[0] = 0;
  v167[1] = 0;
  v166 = a2;
  v168 = 0;
  v169 = &v170;
  v170 = 0;
  v172[0] = 0;
  v172[1] = 0;
  v171 = 0;
  v173 = 0;
  if (!*(_DWORD *)(a2 + 192))
    goto LABEL_117;
  v11 = *(unsigned int *)(a2 + 200);
  if ((_DWORD)v11)
  {
    v12 = 24 * v11;
    v13 = *(_QWORD **)(a2 + 184);
    while (*v13 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v13 += 3;
      v12 -= 24;
      if (!v12)
        goto LABEL_117;
    }
  }
  else
  {
    v13 = *(_QWORD **)(a2 + 184);
  }
  v14 = *(_QWORD *)(a2 + 184) + 24 * v11;
  if (v13 == (_QWORD *)v14)
  {
LABEL_117:
    __p = 0;
    v164 = 0;
    v165 = 0;
    v72 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v10 + 32);
    v74 = *(_QWORD *)(v10 + 32) + 8 * *(unsigned int *)(v10 + 48);
    if ((_QWORD *)v74 == v72)
    {
      v77 = 0;
      v86 = 0;
    }
    else
    {
      v75 = v72;
      v76 = v73;
      v77 = 0;
      do
      {
        v78 = (unint64_t *)*v75;
        if (v77 >= v165)
        {
          v79 = v77 - __p;
          if ((unint64_t)(v79 + 1) >> 61)
            abort();
          v80 = ((char *)v165 - (char *)__p) >> 2;
          if (v80 <= v79 + 1)
            v80 = v79 + 1;
          if ((unint64_t)((char *)v165 - (char *)__p) >= 0x7FFFFFFFFFFFFFF8)
            v81 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v81 = v80;
          if (v81)
            v82 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v165, v81);
          else
            v82 = 0;
          v83 = (unint64_t **)&v82[8 * v79];
          *v83 = v78;
          v77 = v83 + 1;
          v84 = v164;
          if (v164 != __p)
          {
            do
            {
              v85 = *--v84;
              *--v83 = v85;
            }
            while (v84 != __p);
            v84 = __p;
          }
          __p = v83;
          v165 = (unint64_t **)&v82[8 * v81];
          if (v84)
            operator delete(v84);
        }
        else
        {
          *v77++ = v78;
        }
        v164 = v77;
        while (++v75 != v76)
        {
          if ((*v75 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_140;
        }
        v75 = v76;
LABEL_140:
        ;
      }
      while (v75 != (_QWORD *)v74);
      v86 = __p;
    }
    v87 = 126 - 2 * __clz(v77 - v86);
    if (v77 == v86)
      v88 = 0;
    else
      v88 = v87;
    std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(v86, v77, v88, 1);
    v89 = __p;
    if (__p == v164)
    {
LABEL_278:
      a4->__r_.__value_.__r.__words[0] = 0;
    }
    else
    {
      while (2)
      {
        v90 = (uint64_t *)*v89;
        v91 = (std::__shared_weak_count_vtbl *)(*v89)[3];
        if (v91)
        {
          v92 = v90[4];
          if (!v92)
          {
            a4->__r_.__value_.__r.__words[0] = 0;
            goto LABEL_277;
          }
          v183 = 0;
          v184 = 0;
          v185 = 0;
          v93 = v90[5];
          v94 = v90[6];
          if (v93 != v94)
          {
            v95 = 0;
            while (*(unsigned __int8 *)(v93 + 24) < 2u)
            {
LABEL_160:
              v93 += 32;
              if (v93 == v94)
              {
                v91 = (std::__shared_weak_count_vtbl *)v90[3];
                v92 = v90[4];
                goto LABEL_166;
              }
            }
            v96 = *(_DWORD *)(v93 + 8);
            v194.__r_.__value_.__r.__words[0] = 0;
            v97 = v185;
            if (llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(v95, v185, v96, &v194))
            {
              v144 = *(_DWORD *)(v93 + 8);
              v194.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0:x16}";
              v194.__r_.__value_.__l.__size_ = 7;
              v194.__r_.__value_.__r.__words[2] = (std::string::size_type)&v198;
              v195 = 1;
              v196 = &off_251C15650;
              LODWORD(v197) = v144;
              v198 = &v196;
              v200 = "Multiple relocations at offset ";
              v202 = &v194;
              v203 = 1539;
              v186[0] = (uint64_t)&v200;
              v186[2] = (uint64_t)" in ";
              v187 = 770;
              v146 = *(std::string **)v161;
              v145 = *(_QWORD *)(v161 + 8);
              v190[0] = (uint64_t)v186;
              v191 = v146;
              v192 = v145;
              v193 = 1282;
              v211.__r_.__value_.__r.__words[0] = (std::string::size_type)v190;
              v211.__r_.__value_.__r.__words[2] = (std::string::size_type)" block at address ";
              v212 = 770;
              v147 = *v90;
              v175 = "{0:x16}";
              v176 = 7;
              v177 = &v181;
              v178 = 1;
              v179 = &off_251C151F0;
              v180 = v147;
              v181 = &v179;
              v148 = operator new();
              v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
              v206.__r_.__value_.__r.__words[2] = (std::string::size_type)&v175;
              LOWORD(v208) = 1538;
              *(_QWORD *)v148 = off_251C15728;
              llvm::Twine::str((llvm::formatv_object_base **)&v206, (std::string *)(v148 + 8));
              a4->__r_.__value_.__r.__words[0] = v148;
              goto LABEL_276;
            }
            v98 = *(_QWORD *)v93;
            v99 = *(_QWORD *)(v93 + 16);
            v100 = *(_DWORD *)(v93 + 8);
            v194.__r_.__value_.__r.__words[0] = 0;
            v101 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(v95, v97, v100, &v194);
            v102 = v194.__r_.__value_.__r.__words[0];
            if ((v101 & 1) != 0)
            {
LABEL_159:
              *(_QWORD *)(v102 + 8) = v98;
              *(_QWORD *)(v102 + 16) = v99;
              goto LABEL_160;
            }
            if (4 * (int)v184 + 4 >= 3 * v97)
            {
              v103 = 2 * v97;
            }
            else
            {
              if (v97 + ~(_DWORD)v184 - HIDWORD(v184) > v97 >> 3)
              {
LABEL_156:
                LODWORD(v184) = v184 + 1;
                if (*(_DWORD *)v102 != -1)
                  --HIDWORD(v184);
                *(_DWORD *)v102 = v100;
                *(_QWORD *)(v102 + 8) = 0;
                *(_QWORD *)(v102 + 16) = 0;
                goto LABEL_159;
              }
              v103 = v97;
            }
            llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::grow((uint64_t)&v183, v103);
            v194.__r_.__value_.__r.__words[0] = 0;
            v95 = v183;
            llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(v183, v185, v100, &v194);
            v102 = v194.__r_.__value_.__r.__words[0];
            goto LABEL_156;
          }
LABEL_166:
          v104 = *(_DWORD *)(v166 + 172);
          v175 = (const char *)&off_251C11F40;
          llvm::BinaryStreamRef::BinaryStreamRef(&v176, v91, v92, v104);
          v105 = 0;
          v182 = 0;
LABEL_167:
          if ((_BYTE)v181)
          {
            v106 = v180;
          }
          else if (v178)
          {
            v107 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 40))(v178);
            v105 = v182;
            v106 = v107 - (_QWORD)v179;
          }
          else
          {
            v106 = 0;
          }
          if (v106 == v105)
          {
            a4->__r_.__value_.__r.__words[0] = 0;
            goto LABEL_270;
          }
          LODWORD(v211.__r_.__value_.__l.__data_) = 0;
          llvm::BinaryStreamReader::readInteger<unsigned int>((uint64_t)&v175, (unsigned int *)&v211, (uint64_t *)&v194);
          v108 = v194.__r_.__value_.__r.__words[0];
          if (v194.__r_.__value_.__r.__words[0])
            goto LABEL_267;
          data_low = LODWORD(v211.__r_.__value_.__l.__data_);
          if (LODWORD(v211.__r_.__value_.__l.__data_) == -1)
          {
            v194.__r_.__value_.__r.__words[0] = 0;
            llvm::BinaryStreamReader::readInteger<unsigned long long>((uint64_t)&v175, (unint64_t *)&v194, (uint64_t *)&v206);
            v108 = v206.__r_.__value_.__r.__words[0];
            if (v206.__r_.__value_.__r.__words[0])
            {
LABEL_267:
              a4->__r_.__value_.__r.__words[0] = v108;
              goto LABEL_270;
            }
            data_low = v194.__r_.__value_.__r.__words[0];
          }
          if ((_BYTE)v181)
          {
            v110 = v180;
          }
          else if (v178)
          {
            v111 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v178 + 40))(v178);
            v110 = v111 - (_QWORD)v179;
          }
          else
          {
            v110 = 0;
          }
          v112 = v182;
          if (v110 - v182 < data_low)
          {
            v149 = *v90 + v105;
            v194.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0:x16}";
            v194.__r_.__value_.__l.__size_ = 7;
            v194.__r_.__value_.__r.__words[2] = (std::string::size_type)&v198;
            v195 = 1;
            v196 = &off_251C151F0;
            v197 = v149;
            v198 = &v196;
            v150 = operator new();
            v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"Incomplete CFI record at ";
            v206.__r_.__value_.__r.__words[2] = (std::string::size_type)&v194;
            LOWORD(v208) = 1539;
            *(_QWORD *)v150 = off_251C15728;
            llvm::Twine::str((llvm::formatv_object_base **)&v206, (std::string *)(v150 + 8));
            a4->__r_.__value_.__r.__words[0] = v150;
LABEL_270:
            v175 = (const char *)&off_251C11F40;
            v151 = (std::__shared_weak_count *)v177;
            if (v177)
            {
              v152 = (unint64_t *)(v177 + 1);
              do
                v153 = __ldaxr(v152);
              while (__stlxr(v153 - 1, v152));
              if (!v153)
              {
                ((void (*)(std::__shared_weak_count *))v151->__on_zero_shared)(v151);
                std::__shared_weak_count::__release_weak(v151);
              }
            }
            MEMORY[0x24BD1B398](0, 8);
LABEL_276:
            MEMORY[0x24BD1B398](v183, 8);
            if (a4->__r_.__value_.__r.__words[0])
              goto LABEL_280;
LABEL_277:
            if (++v89 == v164)
              goto LABEL_278;
            continue;
          }
          v174 = 0;
          llvm::BinaryStreamReader::readInteger<unsigned int>((uint64_t)&v175, &v174, (uint64_t *)a4);
          if (a4->__r_.__value_.__r.__words[0])
            goto LABEL_270;
          v113 = v112 - v105;
          v114 = v174;
          if (v174)
          {
            v115 = *v90;
            v116 = (std::__shared_weak_count_vtbl *)(v90[3] + v105);
            v117 = *(_DWORD *)(v166 + 172);
            v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_251C11F40;
            llvm::BinaryStreamRef::BinaryStreamRef(&v194.__r_.__value_.__l.__size_, v116, v112 - v105 + data_low, v117);
            v199 = v113 + 4;
            v118 = llvm::jitlink::LinkGraph::addAnonymousSymbol(v166, (uint64_t)v90, v105, v112 - v105 + data_low, 0, 0);
            v119 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::find((uint64_t)&v183, v112);
            if (v183 + 24 * v185 == v119)
            {
              llvm::jitlink::EHFrameEdgeFixer::ParseContext::findCIEInfo((uint64_t)&v206, (uint64_t)&v166, v115 + v112 - v114);
              if ((v206.__r_.__value_.__s.__data_[8] & 1) == 0)
              {
                v127 = (_BYTE *)v206.__r_.__value_.__r.__words[0];
                v128 = v161;
                llvm::jitlink::Block::addEdge(v90, *(_BYTE *)(v161 + 24), v112, *(_QWORD *)v206.__r_.__value_.__l.__data_, 0);
                goto LABEL_209;
              }
              a4->__r_.__value_.__r.__words[0] = v206.__r_.__value_.__r.__words[0];
            }
            else
            {
              if (*(_QWORD *)(v119 + 16))
              {
                v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0:x16}";
                v206.__r_.__value_.__l.__size_ = 7;
                v206.__r_.__value_.__r.__words[2] = (std::string::size_type)&v210;
                v207 = 1;
                v208 = &off_251C151F0;
                v209 = v115 + v112;
                v210 = &v208;
                v190[0] = (uint64_t)"CIE edge at ";
                v191 = &v206;
                v193 = 1539;
                v120 = operator new();
                v211.__r_.__value_.__r.__words[0] = (std::string::size_type)v190;
                v211.__r_.__value_.__r.__words[2] = (std::string::size_type)" has non-zero addend";
                v212 = 770;
                *(_QWORD *)v120 = off_251C15728;
                llvm::Twine::str((llvm::formatv_object_base **)&v211, (std::string *)(v120 + 8));
                a4->__r_.__value_.__r.__words[0] = v120;
                goto LABEL_221;
              }
              llvm::jitlink::EHFrameEdgeFixer::ParseContext::findCIEInfo((uint64_t)&v206, (uint64_t)&v166, (*(_QWORD *)(*(_QWORD *)(v119 + 8) + 24) & 0x1FFFFFFFFFFFFFFLL)+ **(_QWORD **)(*(_QWORD *)(v119 + 8) + 16));
              if ((v206.__r_.__value_.__s.__data_[8] & 1) != 0)
                goto LABEL_219;
              v127 = (_BYTE *)v206.__r_.__value_.__r.__words[0];
              v128 = v161;
LABEL_209:
              llvm::jitlink::EHFrameEdgeFixer::getOrCreateEncodedPointerEdge(&v206, v128, (uint64_t)&v166, (uint64_t)&v183, (llvm::BinaryStreamReader *)v127[11], &v194, (uint64_t)v90, v199);
              if ((v206.__r_.__value_.__s.__data_[8] & 1) != 0)
              {
LABEL_219:
                a4->__r_.__value_.__r.__words[0] = v206.__r_.__value_.__r.__words[0];
              }
              else
              {
                v129 = *(_QWORD *)(v206.__r_.__value_.__r.__words[0] + 16);
                if ((*(_BYTE *)(v129 + 8) & 1) != 0)
                  llvm::jitlink::Block::addEdge((_QWORD *)v129, 1, 0, (uint64_t)v118, 0);
                llvm::jitlink::EHFrameEdgeFixer::skipEncodedPointer(a4, v161, (llvm::BinaryStreamReader *)v127[11], &v194);
                if (!a4->__r_.__value_.__r.__words[0])
                {
                  if (!v127[8]
                    || (llvm::BinaryStreamReader::readULEB128((llvm::BinaryStreamReader *)&v194, (unint64_t *)&v211, (uint64_t *)a4), !a4->__r_.__value_.__r.__words[0])&& (!v127[9]|| (llvm::jitlink::EHFrameEdgeFixer::getOrCreateEncodedPointerEdge(&v206, v161, (uint64_t)&v166, (uint64_t)&v183, (llvm::BinaryStreamReader *)v127[10], &v194, (uint64_t)v90, v199), (v206.__r_.__value_.__s.__data_[8] & 1) == 0)|| (v130 = v206.__r_.__value_.__r.__words[0], a4->__r_.__value_.__r.__words[0] = v206.__r_.__value_.__r.__words[0], !v130)))
                  {
                    a4->__r_.__value_.__r.__words[0] = 0;
                  }
                }
              }
            }
LABEL_221:
            v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_251C11F40;
            v131 = (std::__shared_weak_count *)v194.__r_.__value_.__r.__words[2];
            if (v194.__r_.__value_.__r.__words[2])
            {
              v132 = (unint64_t *)(v194.__r_.__value_.__r.__words[2] + 8);
              do
                v133 = __ldaxr(v132);
              while (__stlxr(v133 - 1, v132));
LABEL_255:
              if (!v133)
              {
                ((void (*)(std::__shared_weak_count *))v131->__on_zero_shared)(v131);
                std::__shared_weak_count::__release_weak(v131);
              }
            }
            goto LABEL_257;
          }
          v121 = (std::__shared_weak_count_vtbl *)(v90[3] + v105);
          v122 = *(_DWORD *)(v166 + 172);
          v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_251C11F40;
          llvm::BinaryStreamRef::BinaryStreamRef(&v194.__r_.__value_.__l.__size_, v121, v112 - v105 + data_low, v122);
          v199 = v113 + 4;
          v123 = llvm::jitlink::LinkGraph::addAnonymousSymbol(v166, (uint64_t)v90, v105, v112 - v105 + data_low, 0, 0);
          v189 = 0;
          llvm::BinaryStreamReader::readInteger<unsigned char>((uint64_t *)a4, (uint64_t)&v194, &v189);
          if (a4->__r_.__value_.__r.__words[0])
            goto LABEL_252;
          if (v189 != 1)
          {
            v211.__r_.__value_.__r.__words[0] = (std::string::size_type)"Bad CIE version ";
            v211.__r_.__value_.__r.__words[2] = v189;
            v212 = 1795;
            v134 = operator new();
            v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
            v206.__r_.__value_.__r.__words[2] = (std::string::size_type)" (should be 0x01) in eh-frame";
            LOWORD(v208) = 770;
            *(_QWORD *)v134 = off_251C15728;
            llvm::Twine::str((llvm::formatv_object_base **)&v206, (std::string *)(v134 + 8));
            a4->__r_.__value_.__r.__words[0] = v134;
            goto LABEL_252;
          }
          WORD2(v190[0]) = 0;
          LODWORD(v190[0]) = 0;
          LOBYTE(v186[0]) = 0;
          llvm::BinaryStreamReader::readInteger<unsigned char>((uint64_t *)&v206, (uint64_t)&v194, v186);
          v124 = v206.__r_.__value_.__r.__words[0];
          if (v206.__r_.__value_.__r.__words[0])
          {
LABEL_251:
            v201 = -1;
            a4->__r_.__value_.__r.__words[0] = v124;
            v200 = 0;
            goto LABEL_252;
          }
          v125 = (char *)v190 + 2;
          while (1)
          {
            v126 = LOBYTE(v186[0]);
            if (LOBYTE(v186[0]) <= 0x51u)
              break;
            switch(LOBYTE(v186[0]))
            {
              case 'R':
                goto LABEL_199;
              case 'e':
                llvm::BinaryStreamReader::readInteger<unsigned char>((uint64_t *)&v206, (uint64_t)&v194, v186);
                v124 = v206.__r_.__value_.__r.__words[0];
                if (v206.__r_.__value_.__r.__words[0])
                  goto LABEL_251;
                v126 = LOBYTE(v186[0]);
                if (LOBYTE(v186[0]) != 104)
                {
                  v140 = "Unrecognized substring e";
                  goto LABEL_250;
                }
                BYTE1(v190[0]) = 1;
                break;
              case 'z':
                LOBYTE(v190[0]) = 1;
                break;
              default:
                goto LABEL_248;
            }
LABEL_203:
            llvm::BinaryStreamReader::readInteger<unsigned char>((uint64_t *)&v206, (uint64_t)&v194, v186);
            v124 = v206.__r_.__value_.__r.__words[0];
            if (v206.__r_.__value_.__r.__words[0])
              goto LABEL_251;
          }
          if (LOBYTE(v186[0]) != 76 && LOBYTE(v186[0]) != 80)
          {
            if (LOBYTE(v186[0]))
            {
LABEL_248:
              v140 = "Unrecognized character ";
LABEL_250:
              v211.__r_.__value_.__r.__words[0] = (std::string::size_type)v140;
              v211.__r_.__value_.__r.__words[2] = v126;
              v212 = 1795;
              v124 = operator new();
              v206.__r_.__value_.__r.__words[0] = (std::string::size_type)&v211;
              v206.__r_.__value_.__r.__words[2] = (std::string::size_type)" in augmentation string";
              LOWORD(v208) = 770;
              *(_QWORD *)v124 = off_251C15728;
              llvm::Twine::str((llvm::formatv_object_base **)&v206, (std::string *)(v124 + 8));
              goto LABEL_251;
            }
            v201 = 0;
            LODWORD(v200) = v190[0];
            WORD2(v200) = WORD2(v190[0]);
            if (!BYTE1(v190[0])
              || (llvm::BinaryStreamReader::skip(&v194, *(unsigned int *)(v166 + 168), (uint64_t *)a4),
                  !a4->__r_.__value_.__r.__words[0]))
            {
              llvm::BinaryStreamReader::readULEB128((llvm::BinaryStreamReader *)&v194, (unint64_t *)&v206, (uint64_t *)a4);
              if (!a4->__r_.__value_.__r.__words[0])
              {
                llvm::BinaryStreamReader::readSLEB128((llvm::BinaryStreamReader *)&v194, (uint64_t *)&v206, (uint64_t *)a4);
                if (!a4->__r_.__value_.__r.__words[0])
                {
                  llvm::BinaryStreamReader::skip(&v194, 1uLL, (uint64_t *)a4);
                  if (!a4->__r_.__value_.__r.__words[0])
                  {
                    if ((_BYTE)v200)
                    {
                      v188 = 0;
                      llvm::BinaryStreamReader::readULEB128((llvm::BinaryStreamReader *)&v194, &v188, (uint64_t *)a4);
                      if (!a4->__r_.__value_.__r.__words[0])
                      {
                        v135 = v199;
                        v136 = 1;
                        v137 = (unsigned __int8 *)&v200 + 2;
                        while (1)
                        {
                          while (1)
                          {
                            v138 = *v137++;
                            if (v138 != 80)
                              break;
                            llvm::jitlink::EHFrameEdgeFixer::readPointerEncoding((uint64_t)&v206, (uint64_t)&v194, v90, "personality");
                            if ((v206.__r_.__value_.__s.__data_[8] & 1) != 0)
                              goto LABEL_263;
                            llvm::jitlink::EHFrameEdgeFixer::getOrCreateEncodedPointerEdge(&v211, v161, (uint64_t)&v166, (uint64_t)&v183, (llvm::BinaryStreamReader *)v206.__r_.__value_.__s.__data_[0], &v194, (uint64_t)v90, v199 + v105);
                            if ((v211.__r_.__value_.__s.__data_[8] & 1) != 0)
                            {
                              v139 = v211.__r_.__value_.__r.__words[0];
                              a4->__r_.__value_.__r.__words[0] = v211.__r_.__value_.__r.__words[0];
                              if (v139)
                                goto LABEL_252;
                            }
                            else
                            {
                              a4->__r_.__value_.__r.__words[0] = 0;
                            }
                          }
                          if (!*(v137 - 1))
                            break;
                          if (v138 == 82)
                          {
                            llvm::jitlink::EHFrameEdgeFixer::readPointerEncoding((uint64_t)&v204, (uint64_t)&v194, v90, "address");
                            if ((v205 & 1) != 0)
                            {
                              a4->__r_.__value_.__r.__words[0] = v204;
                              v204 = 0;
                              goto LABEL_252;
                            }
                            if (v204 == 255)
                            {
                              v190[0] = (uint64_t)"Invalid address encoding DW_EH_PE_omit in CIE at ";
                              v193 = 259;
                              v143 = *v90 + v105;
                              v206.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0:x}";
                              v206.__r_.__value_.__l.__size_ = 5;
                              v206.__r_.__value_.__r.__words[2] = (std::string::size_type)&v210;
                              v207 = 1;
                              v208 = &off_251C144A8;
                              v209 = v143;
                              v210 = &v208;
                              v187 = 262;
                              v186[0] = (uint64_t)&v206;
                              llvm::operator+(v190, v186, (uint64_t)&v211);
                              llvm::make_error<llvm::jitlink::JITLinkError,llvm::Twine>((uint64_t)&v211, (uint64_t *)a4);
                              goto LABEL_252;
                            }
                            v136 = v136 & 0xFFFFFF | (v204 << 24);
                          }
                          else
                          {
                            llvm::jitlink::EHFrameEdgeFixer::readPointerEncoding((uint64_t)&v206, (uint64_t)&v194, v90, "LSDA");
                            if ((v206.__r_.__value_.__s.__data_[8] & 1) != 0)
                            {
LABEL_263:
                              a4->__r_.__value_.__r.__words[0] = v206.__r_.__value_.__r.__words[0];
                              goto LABEL_252;
                            }
                            v136 = v136 & 0xFF0000FF | (v206.__r_.__value_.__s.__data_[0] << 16) | 0x100;
                          }
                        }
                        if (v199 - v135 <= v188)
                          goto LABEL_260;
                        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Read past the end of the augmentation data while parsing fields", (uint64_t *)a4);
                      }
                    }
                    else
                    {
                      v136 = 0;
LABEL_260:
                      v206.__r_.__value_.__r.__words[0] = (v123[3] & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)v123[2];
                      v142 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>,llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>::FindAndConstruct((uint64_t)v167, (uint64_t *)&v206);
                      v142[1] = (uint64_t)v123;
                      *((_DWORD *)v142 + 4) = v136;
                      a4->__r_.__value_.__r.__words[0] = 0;
                    }
                  }
                }
              }
            }
LABEL_252:
            v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_251C11F40;
            v131 = (std::__shared_weak_count *)v194.__r_.__value_.__r.__words[2];
            if (v194.__r_.__value_.__r.__words[2])
            {
              v141 = (unint64_t *)(v194.__r_.__value_.__r.__words[2] + 8);
              do
                v133 = __ldaxr(v141);
              while (__stlxr(v133 - 1, v141));
              goto LABEL_255;
            }
LABEL_257:
            if (a4->__r_.__value_.__r.__words[0])
              goto LABEL_270;
            v105 = v112 + data_low;
            v182 = v112 + data_low;
            goto LABEL_167;
          }
LABEL_199:
          *v125++ = v186[0];
          goto LABEL_203;
        }
        break;
      }
      LOWORD(v179) = 1283;
      v154 = *(uint64_t (*****)(llvm::detail::format_adapter *__hidden))v161;
      v155 = *(_QWORD *)(v161 + 8);
      v175 = "Unexpected zero-fill block in ";
      v177 = v154;
      v178 = v155;
      v156 = operator new();
      v194.__r_.__value_.__r.__words[0] = (std::string::size_type)&v175;
      v194.__r_.__value_.__r.__words[2] = (std::string::size_type)" section";
      LOWORD(v196) = 770;
      *(_QWORD *)v156 = off_251C15728;
      llvm::Twine::str((llvm::formatv_object_base **)&v194, (std::string *)(v156 + 8));
      a4->__r_.__value_.__r.__words[0] = v156;
    }
LABEL_280:
    if (__p)
      operator delete(__p);
    goto LABEL_282;
  }
  v162 = SectionByName;
  v160 = (_QWORD *)v14;
  while (1)
  {
    v15 = v13[2];
    v16 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v15 + 56);
    v18 = *(_QWORD *)(v15 + 56) + 8 * *(unsigned int *)(v15 + 72);
    if ((_QWORD *)v18 != v16)
    {
      v19 = v16;
      v20 = v17;
      while (1)
      {
        v21 = (std::string::size_type *)*v19;
        v194.__r_.__value_.__r.__words[0] = (*(_QWORD *)(*v19 + 24) & 0x1FFFFFFFFFFFFFFLL)
                                          + **(_QWORD **)(*v19 + 16);
        v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t)v172, (uint64_t *)&v194);
        v23 = v22[1];
        if (!v23)
          goto LABEL_21;
        v24 = v21[3];
        v25 = (v24 >> 57) & 1;
        v26 = *(_QWORD *)(v23 + 24);
        v27 = (v26 >> 57) & 1;
        if (v25 < v27)
          goto LABEL_21;
        if (v27 < v25)
          goto LABEL_22;
        v28 = (v24 >> 58) & 3;
        v29 = (v26 >> 58) & 3;
        if (v28 < v29)
          goto LABEL_21;
        if (v29 < v28)
          goto LABEL_22;
        v30 = v21[1];
        v31 = *(_QWORD *)(v23 + 8);
        if (v30 && v31 == 0)
          goto LABEL_21;
        v33 = *v21;
        v34 = *(const void **)v23;
        if (v30 || !v31)
          break;
LABEL_22:
        while (++v19 != v20)
        {
          if ((*v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_26;
        }
        v19 = v20;
LABEL_26:
        if (v19 == (_QWORD *)v18)
          goto LABEL_39;
      }
      v194.__r_.__value_.__r.__words[0] = *v21;
      v194.__r_.__value_.__l.__size_ = v30;
      v157 = (std::string::size_type)v34;
      v158 = (const void *)v33;
      v159 = v30;
      if ((llvm::StringRef::compare((uint64_t)&v194, v34, v31) & 0x80000000) == 0)
      {
        v194.__r_.__value_.__r.__words[0] = v157;
        v194.__r_.__value_.__l.__size_ = v31;
        llvm::StringRef::compare((uint64_t)&v194, v158, v159);
        goto LABEL_22;
      }
LABEL_21:
      v22[1] = (uint64_t)v21;
      goto LABEL_22;
    }
LABEL_39:
    v35 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v15 + 32);
    v37 = *(_QWORD *)(v15 + 32) + 8 * *(unsigned int *)(v15 + 48);
    if ((uint64_t **)v37 != v35)
      break;
LABEL_112:
    a4->__r_.__value_.__r.__words[0] = 0;
    v13 += 3;
    v10 = v162;
    if (v13 != v160)
    {
      while (*v13 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v13 += 3;
        if (v13 == v160)
          goto LABEL_117;
      }
      if (v13 != v160)
        continue;
    }
    goto LABEL_117;
  }
  v38 = v35;
  v39 = v36;
  while (1)
  {
    v40 = *v38;
    v41 = **v38;
    if (!v41)
      goto LABEL_106;
    v42 = v170;
    v43 = &v170;
    if (v170)
    {
      v44 = &v170;
      v45 = v170;
      do
      {
        v46 = v45;
        v47 = v44;
        v48 = v45[4];
        if (v41 < v48)
          v44 = (uint64_t **)v45;
        else
          ++v45;
        v45 = (uint64_t *)*v45;
      }
      while (v45);
      v43 = &v170;
      if (v44 != &v170)
      {
        v49 = v40[4];
        if (v41 >= v48)
          v46 = (uint64_t *)v47;
        v50 = (uint64_t *)v46[5];
        v51 = *v50;
        v43 = v44;
        if (v49 + v41 > *v50)
        {
          v52 = v50[4];
          goto LABEL_60;
        }
      }
    }
    if (v43 != v169)
    {
      v53 = *v43;
      v54 = v43;
      if (*v43)
      {
        do
        {
          v55 = v53;
          v53 = (uint64_t *)v53[1];
        }
        while (v53);
      }
      else
      {
        do
        {
          v55 = v54[2];
          v9 = *v55 == (_QWORD)v54;
          v54 = (uint64_t **)v55;
        }
        while (v9);
      }
      v56 = (uint64_t *)v55[5];
      v51 = *v56;
      v52 = v56[4];
      if (v52 + *v56 > v41)
        break;
    }
    if (&v170 != v43)
    {
      v57 = v43[4];
      if ((unint64_t)v57 <= v41)
      {
        if ((unint64_t)v57 >= v41)
          goto LABEL_106;
        v63 = v43 + 1;
        v64 = v43[1];
        if (v64)
        {
          do
          {
            v63 = (uint64_t **)v64;
            v64 = (uint64_t *)*v64;
            v43 = v63;
            v65 = v63;
          }
          while (v64);
        }
        else
        {
          v65 = v43;
          do
          {
            v67 = (uint64_t *)v65;
            v65 = (uint64_t **)v65[2];
          }
          while (*v65 != v67);
        }
        if (v65 != &v170)
        {
          v68 = v65[4];
          if ((unint64_t)v68 <= v41)
          {
            v63 = &v170;
            v43 = &v170;
          }
          if (v170 && (unint64_t)v68 <= v41)
          {
            while (1)
            {
              while (1)
              {
                v43 = (uint64_t **)v42;
                v69 = v42[4];
                if (v69 <= v41)
                  break;
                v42 = *v43;
                v63 = v43;
                if (!*v43)
                  goto LABEL_102;
              }
              if (v69 >= v41)
                goto LABEL_106;
              v42 = v43[1];
              if (!v42)
              {
LABEL_101:
                v63 = v43 + 1;
                goto LABEL_102;
              }
            }
          }
        }
        goto LABEL_102;
      }
    }
    v58 = *v43;
    v59 = v43;
    if (v43 != v169)
    {
      v60 = *v43;
      v61 = v43;
      if (v58)
      {
        do
        {
          v59 = (uint64_t **)v60;
          v60 = (uint64_t *)v60[1];
        }
        while (v60);
      }
      else
      {
        do
        {
          v59 = (uint64_t **)v61[2];
          v9 = *v59 == (uint64_t *)v61;
          v61 = v59;
        }
        while (v9);
      }
      if ((unint64_t)v59[4] >= v41)
      {
        v63 = &v170;
        v43 = &v170;
        if (v170)
        {
          while (1)
          {
            while (1)
            {
              v43 = (uint64_t **)v42;
              v66 = v42[4];
              if (v66 <= v41)
                break;
              v42 = *v43;
              v63 = v43;
              if (!*v43)
                goto LABEL_102;
            }
            if (v66 >= v41)
              goto LABEL_106;
            v42 = v43[1];
            if (!v42)
              goto LABEL_101;
          }
        }
        goto LABEL_102;
      }
    }
    if (v58)
      v62 = v59;
    else
      v62 = v43;
    if (v58)
      v63 = v59 + 1;
    else
      v63 = v43;
    if (!*v63)
    {
      v43 = v62;
LABEL_102:
      v70 = (uint64_t *)operator new(0x30uLL);
      v70[4] = v41;
      v70[5] = (uint64_t)v40;
      *v70 = 0;
      v70[1] = 0;
      v70[2] = (uint64_t)v43;
      *v63 = v70;
      if (*v169)
      {
        v169 = (uint64_t **)*v169;
        v71 = *v63;
      }
      else
      {
        v71 = v70;
      }
      std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(v170, v71);
      ++v171;
    }
LABEL_106:
    a4->__r_.__value_.__r.__words[0] = 0;
LABEL_107:
    while (++v38 != v39)
    {
      if (((unint64_t)*v38 | 0x1000) != 0xFFFFFFFFFFFFF000)
        goto LABEL_111;
    }
    v38 = v39;
LABEL_111:
    if (v38 == (uint64_t **)v37)
      goto LABEL_112;
  }
  v49 = v40[4];
LABEL_60:
  llvm::jitlink::BlockAddressMap::overlapError((uint64_t *)a4, **v38, v49, v51, v52);
  if (!a4->__r_.__value_.__r.__words[0])
    goto LABEL_107;
LABEL_282:
  MEMORY[0x24BD1B398](v172[0], 8);
  std::__tree<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,unsigned long long>>>::destroy(v170);
  MEMORY[0x24BD1B398](v167[0], 8);
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>(llvm::formatv_object_base *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  char v6;
  llvm::formatv_object_base *v7;
  char v8;
  char v9;

  v4 = operator new();
  v5 = v4;
  v6 = 1;
  v9 = 1;
  if (*(_BYTE *)a1)
  {
    v7 = a1;
    v6 = 3;
  }
  v8 = v6;
  *(_QWORD *)v4 = off_251C15728;
  llvm::Twine::str(&v7, (std::string *)(v4 + 8));
  *a2 = v5;
}

void llvm::make_error<llvm::jitlink::JITLinkError,llvm::Twine>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  _OWORD v6[2];
  uint64_t v7;

  v4 = operator new();
  v5 = *(_OWORD *)(a1 + 16);
  v6[0] = *(_OWORD *)a1;
  v6[1] = v5;
  v7 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)v4 = off_251C15728;
  llvm::Twine::str((llvm::formatv_object_base **)v6, (std::string *)(v4 + 8));
  *a2 = v4;
}

std::string *llvm::BinaryStreamReader::readInteger<unsigned char>(uint64_t *a1, uint64_t a2, _BYTE *a3)
{
  std::string *result;
  _BYTE *v7;
  _QWORD v8[2];

  v8[0] = 0;
  v8[1] = 0;
  result = llvm::BinaryStreamRef::readBytes(a2 + 8, *(_QWORD *)(a2 + 56), 1, (uint64_t)v8, a1);
  if (!*a1)
  {
    ++*(_QWORD *)(a2 + 56);
    *a1 = 0;
    v7 = (_BYTE *)v8[0];
    result = (std::string *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 16))(*(_QWORD *)(a2 + 24));
    *a3 = *v7;
    *a1 = 0;
  }
  return result;
}

void llvm::jitlink::EHFrameEdgeFixer::readPointerEncoding(uint64_t a1, uint64_t a2, uint64_t *a3, _BYTE *a4)
{
  uint64_t v7;
  char v8;
  __int128 *v9;
  char v10;
  __int128 *v11;
  char v12;
  llvm::formatv_object_base *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  _QWORD v17[2];
  _QWORD *v18;
  uint64_t v19[4];
  _QWORD v20[2];
  _QWORD *v21;
  _QWORD v22[4];
  __int16 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  uint64_t v29;
  _QWORD v30[4];
  __int16 v31;
  int v32;
  __int16 v33;
  char v34;
  llvm::formatv_object_base *v35[4];
  char v36;
  char v37;
  int v38;
  __int16 v39;

  v34 = 0;
  llvm::BinaryStreamReader::readInteger<unsigned char>(v19, a2, &v34);
  v7 = v19[0];
  if (v19[0])
  {
    *(_BYTE *)(a1 + 8) |= 1u;
    *(_QWORD *)a1 = v7;
    return;
  }
  v8 = v34;
  if ((((v34 & 0xF) - 1) & 0xFFFFFFF6) != 0 && (v34 & 0x60u) - 96 <= 0xFFFFFFBF)
  {
    *(_BYTE *)(a1 + 8) &= ~1u;
    *(_BYTE *)a1 = v8;
    return;
  }
  v19[0] = (uint64_t)"{0:x2}";
  v19[1] = 6;
  v19[2] = (uint64_t)&v21;
  v19[3] = 1;
  v20[0] = &off_251C15620;
  v20[1] = &v34;
  v21 = v20;
  v22[0] = "Unsupported pointer encoding ";
  v22[2] = v19;
  v23 = 1539;
  *(_QWORD *)&v24 = v22;
  *(_QWORD *)&v25 = " for ";
  LOWORD(v26) = 770;
  if (*a4)
  {
    v9 = &v24;
    *(_QWORD *)&v27 = &v24;
    *(_QWORD *)&v28 = a4;
    LOWORD(v29) = 770;
    v10 = 2;
    v11 = &v27;
  }
  else
  {
    v27 = v24;
    v28 = v25;
    v29 = v26;
    v10 = v26;
    if (v26 == 1)
    {
      v13 = (llvm::formatv_object_base *)"in CFI record at ";
      v30[0] = "in CFI record at ";
      v31 = 259;
      v12 = 3;
      goto LABEL_9;
    }
    v9 = (__int128 *)*((_QWORD *)&v27 + 1);
    v11 = &v27;
    if (BYTE1(v29) == 1)
      v11 = (__int128 *)v27;
    else
      v10 = 2;
  }
  v30[0] = v11;
  v30[1] = v9;
  v30[2] = "in CFI record at ";
  LOBYTE(v31) = v10;
  HIBYTE(v31) = 3;
  v12 = 2;
  v13 = (llvm::formatv_object_base *)v30;
LABEL_9:
  v14 = *a3;
  v16[0] = "{0:x16}";
  v16[1] = 7;
  v16[2] = &v18;
  v16[3] = 1;
  v17[0] = &off_251C151F0;
  v17[1] = v14;
  v18 = v17;
  v15 = operator new();
  v35[0] = v13;
  v35[2] = (llvm::formatv_object_base *)v16;
  v36 = v12;
  v37 = 6;
  v38 = v32;
  v39 = v33;
  *(_QWORD *)v15 = off_251C15728;
  llvm::Twine::str(v35, (std::string *)(v15 + 8));
  *(_BYTE *)(a1 + 8) |= 1u;
  *(_QWORD *)a1 = v15;
}

std::string *llvm::jitlink::EHFrameEdgeFixer::getOrCreateEncodedPointerEdge(std::string *result, uint64_t a2, uint64_t a3, uint64_t a4, llvm::BinaryStreamReader *a5, std::string *a6, uint64_t a7, int a8)
{
  std::string *v8;
  llvm::BinaryStreamReader *v10;
  uint64_t v13;
  uint64_t v14;
  std::string::size_type v15;
  char v16;
  std::string v17;

  v8 = result;
  if ((_DWORD)a5 == 255)
  {
    result->__r_.__value_.__s.__data_[8] &= ~1u;
    result->__r_.__value_.__r.__words[0] = 0;
  }
  else
  {
    v10 = a5;
    v13 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::find(a4, a8);
    if (*(_QWORD *)a4 + 24 * *(unsigned int *)(a4 + 16) == v13)
    {
      if ((v10 & 0xF) == 0)
      {
        if (*(_DWORD *)(a2 + 16) == 8)
          v16 = 4;
        else
          v16 = 3;
        LOBYTE(v10) = v16 | v10;
      }
      __asm { BR              X10 }
    }
    v14 = v13;
    result = llvm::jitlink::EHFrameEdgeFixer::skipEncodedPointer(&v17, a2, v10, a6);
    v15 = v17.__r_.__value_.__r.__words[0];
    if (v17.__r_.__value_.__r.__words[0])
    {
      v8->__r_.__value_.__s.__data_[8] |= 1u;
    }
    else
    {
      v8->__r_.__value_.__s.__data_[8] &= ~1u;
      v15 = *(_QWORD *)(v14 + 8);
    }
    v8->__r_.__value_.__r.__words[0] = v15;
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::find(uint64_t a1, int a2)
{
  uint64_t v4;

  v4 = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))return v4;
  else
    return *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
}

void llvm::jitlink::EHFrameEdgeFixer::ParseContext::findCIEInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  BOOL v5;
  uint64_t v6;
  char v7;
  _QWORD v8[4];
  _QWORD v9[2];
  _QWORD *v10;
  uint64_t v11;
  llvm::formatv_object_base *v12[4];
  __int16 v13;

  v11 = a3;
  v8[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)(a2 + 8), *(_DWORD *)(a2 + 24), a3, v8))v5 = v8[0] == *(_QWORD *)(a2 + 8) + 24 * *(unsigned int *)(a2 + 24);
  else
    v5 = 1;
  if (v5)
  {
    v8[0] = "{0:x16}";
    v8[1] = 7;
    v8[2] = &v10;
    v8[3] = 1;
    v9[0] = &off_251C144D8;
    v9[1] = &v11;
    v10 = v9;
    v6 = operator new();
    v12[0] = (llvm::formatv_object_base *)"No CIE found at address ";
    v12[2] = (llvm::formatv_object_base *)v8;
    v13 = 1539;
    *(_QWORD *)v6 = off_251C15728;
    llvm::Twine::str(v12, (std::string *)(v6 + 8));
    v7 = *(_BYTE *)(a1 + 8) | 1;
  }
  else
  {
    v6 = v8[0] + 8;
    v7 = *(_BYTE *)(a1 + 8) & 0xFE;
  }
  *(_BYTE *)(a1 + 8) = v7;
  *(_QWORD *)a1 = v6;
}

std::string *llvm::jitlink::EHFrameEdgeFixer::skipEncodedPointer(std::string *this, uint64_t a2, llvm::BinaryStreamReader *a3, std::string *a4)
{
  std::string::__raw *v4;
  uint64_t *v5;
  std::string *v6;
  unint64_t v7;

  v4 = (std::string::__raw *)this;
  switch(a3 & 0xF)
  {
    case 3:
    case 0xB:
      goto LABEL_2;
    case 4:
    case 0xC:
      goto LABEL_4;
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 0xA:
      __break(1u);
      return this;
    default:
      if (*(_DWORD *)(a2 + 16) == 8)
      {
LABEL_4:
        v5 = (uint64_t *)this;
        v6 = a4;
        v7 = 8;
      }
      else
      {
LABEL_2:
        v5 = (uint64_t *)this;
        v6 = a4;
        v7 = 4;
      }
      this = llvm::BinaryStreamReader::skip(v6, v7, v5);
      if (!v4->__words[0])
        v4->__words[0] = 0;
      return this;
  }
}

uint64_t llvm::jitlink::EHFrameNullTerminator::operator()@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, _QWORD *a4@<X8>)
{
  uint64_t result;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11[2];

  result = llvm::jitlink::LinkGraph::findSectionByName(a2, *a1, a1[1], a3);
  if (result)
  {
    v11[0] = (uint64_t)&llvm::jitlink::EHFrameNullTerminator::NullTerminatorBlockContent;
    v11[1] = 4;
    v9 = 1;
    v10 = -5;
    v8 = 0;
    v7 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, result, v11, &v10, &v9, &v8);
    result = (uint64_t)llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v7, 0, 4, 0, 1);
  }
  *a4 = 0;
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::grow(a1, v7);
    v8 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -1)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = (uint64_t *)v4;
      do
      {
        v14 = *v13;
        if ((unint64_t)*v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v19 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>,llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v19);
          v15 = v19;
          v16 = v13[1];
          *v19 = *v13;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 2;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v17 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v17)
  {
    v18 = 16 * v17;
    do
    {
      *result = -1;
      result += 2;
      v18 -= 16;
    }
    while (v18);
  }
  return result;
}

void llvm::jitlink::BlockAddressMap::overlapError(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6;
  _QWORD v7[4];
  _QWORD v8[2];
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[4];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  llvm::formatv_object_base *v19[4];
  __int16 v20;

  v11[0] = "{0:x16} -- {1:x16}";
  v11[1] = 18;
  v11[2] = v14;
  v11[3] = 2;
  v12[0] = &off_251C144A8;
  v12[1] = a2;
  v13[0] = &off_251C144A8;
  v13[1] = a3 + a2;
  v14[0] = v12;
  v14[1] = v13;
  v15[0] = "Block at ";
  v15[2] = v11;
  v16 = 1539;
  v17[0] = v15;
  v17[2] = " overlaps ";
  v18 = 770;
  v7[0] = "{0:x16} -- {1:x16}";
  v7[1] = 18;
  v7[2] = v10;
  v7[3] = 2;
  v8[0] = &off_251C144A8;
  v8[1] = a4;
  v9[0] = &off_251C144A8;
  v9[1] = a5 + a4;
  v10[0] = v8;
  v10[1] = v9;
  v6 = operator new();
  v19[0] = (llvm::formatv_object_base *)v17;
  v19[2] = (llvm::formatv_object_base *)v7;
  v20 = 1538;
  *(_QWORD *)v6 = off_251C15728;
  llvm::Twine::str(v19, (std::string *)(v6 + 8));
  *a1 = v6;
}

unint64_t **std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(unint64_t **result, unint64_t **a2, uint64_t a3, char a4)
{
  unint64_t **v7;
  unint64_t **v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t **v12;
  unint64_t *v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t **v18;
  unint64_t **v19;
  unint64_t *v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t **v23;
  unint64_t **v24;
  unint64_t *v25;
  unint64_t *v26;
  unint64_t **v27;
  BOOL v28;
  unint64_t *v29;
  unint64_t **v30;
  unint64_t **v31;
  unint64_t *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;
  unint64_t *v36;
  unint64_t **v37;
  unint64_t *v38;
  unint64_t *v39;
  unint64_t **v40;
  unint64_t **v41;
  unint64_t **v42;
  unint64_t *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  unint64_t *v49;
  unint64_t **v50;
  BOOL v52;
  uint64_t v53;
  unint64_t **v54;
  unint64_t *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t **v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  unint64_t **v65;
  unint64_t *v66;
  unint64_t *v67;
  unint64_t v68;
  BOOL v69;
  unint64_t *v70;
  unint64_t v71;
  unint64_t **v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  _QWORD *v80;
  _QWORD *v81;
  unint64_t **v82;
  unint64_t ***v83;
  unint64_t ***v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t **v89;
  unint64_t *v90;
  unint64_t *v91;
  unint64_t v92;
  unint64_t **v93;
  unint64_t *v95;
  unint64_t *v96;
  unint64_t v97;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v38 = *(a2 - 1);
        v39 = *v8;
        if (*v38 < **v8)
        {
          *v8 = v38;
          *(a2 - 1) = v39;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v40 = v8 + 1;
        v41 = v8 + 2;
        v42 = v8 + 3;
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v8, v8 + 1, v8 + 2, v8 + 3);
        v43 = *(a2 - 1);
        v44 = v8[3];
        if (*v43 < *v44)
        {
          *v42 = v43;
          *(a2 - 1) = v44;
          v45 = *v42;
          v46 = *v41;
          v47 = **v42;
          if (v47 < **v41)
          {
            *v41 = v45;
            *v42 = v46;
            v48 = *v40;
            if (v47 < **v40)
            {
              v8[1] = v45;
              v8[2] = v48;
              v49 = *v8;
              if (v47 < **v8)
              {
                *v8 = v45;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 8;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                v57 = *v55;
                if (*v55 < *v56)
                {
                  v58 = v53;
                  while (1)
                  {
                    *(unint64_t **)((char *)v8 + v58) = v56;
                    v59 = v58 - 8;
                    if (v58 == 8)
                      break;
                    v56 = *(unint64_t **)((char *)v8 + v58 - 16);
                    v58 -= 8;
                    if (v57 >= *v56)
                    {
                      v60 = (unint64_t **)((char *)v8 + v59);
                      goto LABEL_79;
                    }
                  }
                  v60 = v8;
LABEL_79:
                  *v60 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v96 = *v7;
              v95 = v7[1];
              v7 = v50;
              v97 = *v95;
              if (*v95 < *v96)
              {
                do
                {
                  *v50 = v96;
                  v96 = *(v50 - 2);
                  --v50;
                }
                while (v97 < *v96);
                *v50 = v95;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                v66 = *v65;
                if (2 * v63 + 2 >= (uint64_t)v10)
                {
                  v68 = *v66;
                }
                else
                {
                  v67 = v65[1];
                  v68 = *v66;
                  v69 = *v66 >= *v67;
                  if (*v66 <= *v67)
                    v68 = *v67;
                  if (*v66 < *v67)
                  {
                    v66 = v65[1];
                    ++v65;
                  }
                  if (!v69)
                    v64 = 2 * v63 + 2;
                }
                result = &v8[v63];
                v70 = *result;
                v71 = **result;
                if (v68 >= v71)
                {
                  do
                  {
                    v72 = v65;
                    *result = v66;
                    if (v61 < v64)
                      break;
                    v73 = (2 * v64) | 1;
                    v65 = &v8[v73];
                    v64 = 2 * v64 + 2;
                    v66 = *v65;
                    if (v64 >= (uint64_t)v10)
                    {
                      v75 = *v66;
                      v64 = v73;
                    }
                    else
                    {
                      v74 = v65[1];
                      v75 = *v66;
                      v76 = *v66 >= *v74;
                      if (*v66 <= *v74)
                        v75 = *v74;
                      if (*v66 < *v74)
                      {
                        v66 = v65[1];
                        ++v65;
                      }
                      if (v76)
                        v64 = v73;
                    }
                    result = v72;
                  }
                  while (v75 >= v71);
                  *v72 = v70;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v77 = (unint64_t)v9 >> 3;
            do
            {
              v78 = 0;
              v79 = *v8;
              v80 = v8;
              do
              {
                v81 = &v80[v78];
                v84 = (unint64_t ***)v81[1];
                v82 = (unint64_t **)(v81 + 1);
                v83 = v84;
                v85 = (2 * v78) | 1;
                v86 = 2 * v78 + 2;
                if (v86 < v77)
                {
                  result = *v83;
                  if ((unint64_t)*v83 < *v82[1])
                  {
                    v83 = (unint64_t ***)v82[1];
                    ++v82;
                    v85 = v86;
                  }
                }
                *v80 = v83;
                v80 = v82;
                v78 = v85;
              }
              while (v85 <= (uint64_t)((unint64_t)(v77 - 2) >> 1));
              if (v82 == --a2)
              {
                *v82 = v79;
              }
              else
              {
                *v82 = *a2;
                *a2 = v79;
                v87 = (char *)v82 - (char *)v8 + 8;
                if (v87 >= 9)
                {
                  v88 = (((unint64_t)v87 >> 3) - 2) >> 1;
                  v89 = &v8[v88];
                  v90 = *v89;
                  v91 = *v82;
                  v92 = **v82;
                  if (**v89 < v92)
                  {
                    do
                    {
                      v93 = v89;
                      *v82 = v90;
                      if (!v88)
                        break;
                      v88 = (v88 - 1) >> 1;
                      v89 = &v8[v88];
                      v90 = *v89;
                      v82 = v93;
                    }
                    while (**v89 < v92);
                    *v93 = v91;
                  }
                }
              }
            }
            while (v77-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        v15 = **v7;
        if ((a4 & 1) == 0 && **(v7 - 1) >= v15)
        {
          if (v15 >= **(a2 - 1))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= **v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *v29);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *v32);
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              do
              {
                v35 = v8[1];
                ++v8;
                v33 = v35;
              }
              while (v15 >= *v35);
              do
              {
                v36 = *--v31;
                v34 = v36;
              }
              while (v15 < *v36);
            }
            while (v8 < v31);
          }
          v37 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v37;
          a4 = 0;
          *v37 = v14;
          continue;
        }
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*v17 < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*v21 >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*v20 >= v15);
        }
        if (v18 >= v19)
        {
          v27 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            do
            {
              v25 = v23[1];
              ++v23;
              v17 = v25;
            }
            while (*v25 < v15);
            do
            {
              v26 = *--v24;
              v22 = v26;
            }
            while (*v26 >= v15);
          }
          while (v23 < v24);
          v27 = v23 - 1;
        }
        if (v27 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_32:
          result = (unint64_t **)std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(v7, v27, a3, a4 & 1);
          a4 = 0;
          v8 = v27 + 1;
          continue;
        }
        v28 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(v7, v27);
        v8 = v27 + 1;
        result = (unint64_t **)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(v27 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_32;
        }
        a2 = v27;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::EHFrameEdgeFixer::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(unint64_t **a1, unint64_t **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t *v6;
  unint64_t *v7;
  unint64_t **v8;
  unint64_t **v9;
  int v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t **v17;
  unint64_t **v18;
  unint64_t **v19;
  unint64_t **v20;
  unint64_t *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t *v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t *v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*v21 < *v22)
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = **v20;
        if (v25 < **v19)
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < **v18)
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < **a1)
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::orc::MachOPlatform::MachOPlatformPlugin::findUnwindSectionInfo(llvm::jitlink::LinkGraph &)::$_1 &,llvm::jitlink::Block **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = **v9;
    if (v14 < **v8)
    {
      v15 = v11;
      while (1)
      {
        *(unint64_t **)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(unint64_t **)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *v13)
        {
          v17 = (unint64_t **)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(uint64_t a1, int a2, int a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _DWORD *v6;
  int v7;
  uint64_t v8;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = (37 * a3) & (a2 - 1);
    v6 = (_DWORD *)(a1 + 24 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -2;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_DWORD *)(a1 + 24 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

void llvm::detail::provider_format_adapter<unsigned int>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned int>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned int,void>::format((unsigned int *)(a1 + 8), a2, a3, a4);
}

_DWORD *llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _DWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -1;
        result += 6;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        v14 = *(_DWORD *)v13;
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>,unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::EHFrameEdgeFixer::EdgeTarget>>::LookupBucketFor<unsigned int>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_DWORD *)v13;
          *(_OWORD *)(v15 + 2) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 24 * v16;
    do
    {
      *result = -1;
      result += 6;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

uint64_t *llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>,llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>::FindAndConstruct(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;

  v9 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  result = v9;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>::grow(a1, v7);
    v9 = 0;
    llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    result = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -1)
    --*(_DWORD *)(a1 + 12);
  v8 = *a2;
  result[1] = 0;
  result[2] = 0;
  *result = v8;
  return result;
}

_QWORD *llvm::DenseMap<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,llvm::jitlink::EHFrameEdgeFixer::CIEInformation>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -1;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if (*(_QWORD *)v13 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>,llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>,llvm::DenseMapInfo<llvm::orc::ExecutorAddr,void>,llvm::detail::DenseMapPair<llvm::orc::ExecutorAddr,std::shared_ptr<llvm::unique_function<void ()(llvm::unique_function<void ()(llvm::orc::shared::WrapperFunctionResult)>,char const*,unsigned long)>>>>::LookupBucketFor<llvm::orc::ExecutorAddr>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_QWORD *)v13;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 24 * v16;
    do
    {
      *result = -1;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

void llvm::detail::provider_format_adapter<unsigned char &>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned char &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned char,void>::format(*(unsigned __int8 **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<unsigned char,void>::format(unsigned __int8 *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  unsigned int v13;
  size_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  size_t v18;

  v16 = a3;
  v17 = a4;
  v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      v12 = 0;
      v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78)
            goto LABEL_19;
          goto LABEL_16;
        }
LABEL_17:
        v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100)
        goto LABEL_17;
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      v12 = 0;
    }
LABEL_19:
    v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6))
      v14 = 0;
    else
      v14 = v18;
    return llvm::write_integer(a2, *a1, v14, v12);
  }
  v7 = v15;
  v18 = 0;
  v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  v9 = v18;
  if (v8)
    v9 = 0;
  if ((v7 & 0xFFFFFFFE) == 2)
    v10 = v9 + 2;
  else
    v10 = v9;
  return llvm::write_hex(a2, *a1, v7, v10, 1);
}

llvm::raw_ostream *llvm::jitlink::JITLinkError::log(llvm::jitlink::JITLinkError *this, llvm::raw_ostream *a2)
{
  char *v3;
  const char *v4;
  const char *v5;
  int v6;
  const char *v7;
  size_t v8;

  v5 = (const char *)*((_QWORD *)this + 1);
  v3 = (char *)this + 8;
  v4 = v5;
  v6 = v3[23];
  if (v6 >= 0)
    v7 = v3;
  else
    v7 = v4;
  if (v6 >= 0)
    v8 = v3[23];
  else
    v8 = *((_QWORD *)v3 + 1);
  return llvm::raw_ostream::write(a2, v7, v8);
}

uint64_t llvm::jitlink::JITLinkError::convertToErrorCode(llvm::jitlink::JITLinkError *this)
{
  unsigned __int8 v1;

  if ((v1 & 1) == 0
  {
  }
  return 1;
}

const char *llvm::jitlink::getGenericEdgeKindName(llvm::jitlink *this)
{
  const char *v1;

  v1 = "<Unrecognized edge kind>";
  if ((_DWORD)this == 1)
    v1 = "Keep-Alive";
  if ((_DWORD)this)
    return v1;
  else
    return "INVALID RELOCATION";
}

void llvm::jitlink::Section::~Section(llvm::jitlink::Section *this)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  void *v10;

  v2 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)this + 56);
  v4 = *((_QWORD *)this + 7) + 8 * *((unsigned int *)this + 18);
  if ((_QWORD *)v4 != v2)
  {
    while (1)
    {
      if (++v2 == v3)
      {
        v2 = v3;
LABEL_6:
        if (v2 == (_QWORD *)v4)
          break;
      }
      else if ((*v2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        goto LABEL_6;
      }
    }
  }
  v5 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)this + 32);
  v7 = *((_QWORD *)this + 4) + 8 * *((unsigned int *)this + 12);
  if ((_QWORD *)v7 != v5)
  {
    v8 = v5;
    v9 = v6;
    do
    {
      v10 = *(void **)(*v8 + 40);
      if (v10)
      {
        *(_QWORD *)(*v8 + 48) = v10;
        operator delete(v10);
      }
      while (++v8 != v9)
      {
        if ((*v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_15;
      }
      v8 = v9;
LABEL_15:
      ;
    }
    while (v8 != (_QWORD *)v7);
  }
  MEMORY[0x24BD1B398](*((_QWORD *)this + 7), 8);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 4), 8);
}

_QWORD *llvm::jitlink::LinkGraph::splitBlock(uint64_t a1, uint64_t a2, unint64_t a3, void **a4)
{
  _QWORD *v5;
  uint64_t v8;
  void *v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  void **v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  void **v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  void **v32;
  unsigned int v33;
  uint64_t *v34;
  uint64_t v35;
  _QWORD *v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  void *v43[2];
  _BYTE v44[64];
  void *v45[2];
  uint64_t v46;
  char v47;
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 32) == a3)
    return (_QWORD *)a2;
  v8 = *(_QWORD *)(a2 + 16);
  if (*(_QWORD *)(a2 + 24))
  {
    v9 = *(void **)a2;
    v10 = *(_QWORD *)(a2 + 8);
    v45[0] = *(void **)(a2 + 24);
    v45[1] = (void *)a3;
    v42 = 1 << (v10 >> 3);
    v43[0] = v9;
    v41 = v10 >> 8;
    v11 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a1, v8, (uint64_t *)v45, (uint64_t *)v43, (unint64_t *)&v42, (uint64_t *)&v41);
  }
  else
  {
    v12 = *(_QWORD *)(a2 + 8);
    v45[0] = *(void **)a2;
    v42 = 1 << (v12 >> 3);
    v43[0] = (void *)a3;
    v41 = v12 >> 8;
    v11 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a1, v8, (uint64_t *)v43, (uint64_t *)v45, (unint64_t *)&v42, (uint64_t *)&v41);
  }
  v5 = v11;
  v13 = *(_QWORD *)(a2 + 8);
  v14 = (char *)(*(_QWORD *)a2 + a3);
  v15 = *(_QWORD *)(a2 + 32) - a3;
  *(_QWORD *)(a2 + 24) += a3;
  *(_QWORD *)(a2 + 32) = v15;
  *(_QWORD *)a2 = v14;
  *(_QWORD *)(a2 + 8) = v13 & 0xFB | (((a3 + (v13 >> 8)) & ~(-1 << (v13 >> 3))) << 8);
  v17 = *(_QWORD *)(a2 + 40);
  v16 = *(_QWORD *)(a2 + 48);
  while (v17 != v16)
  {
    v18 = *(unsigned int *)(v17 + 8);
    if (v18 >= a3)
    {
      *(_DWORD *)(v17 + 8) = v18 - a3;
      v17 += 32;
    }
    else
    {
      llvm::jitlink::Block::addEdge(v5, (_OWORD *)v17);
      v19 = *(_QWORD *)(a2 + 48);
      v20 = v19 - (v17 + 32);
      if (v19 != v17 + 32)
        memmove((void *)v17, (const void *)(v17 + 32), v20 - 7);
      v16 = v17 + v20;
      *(_QWORD *)(a2 + 48) = v17 + v20;
    }
  }
  LOBYTE(v45[0]) = 0;
  v47 = 0;
  if (a4)
    v21 = a4;
  else
    v21 = v45;
  if (!*((_BYTE *)v21 + 80))
  {
    v43[0] = v44;
    v43[1] = (void *)0x800000000;
    std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>>::operator=[abi:nn180100]<llvm::SmallVector<llvm::jitlink::Symbol *,8u>,void>((uint64_t)v21, (uint64_t)v43);
    if (v43[0] != v44)
      free(v43[0]);
    v22 = *(_QWORD *)(a2 + 16);
    v23 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v22 + 56);
    v25 = *(_QWORD *)(v22 + 56) + 8 * *(unsigned int *)(v22 + 72);
    if ((uint64_t *)v25 != v23)
    {
      v26 = v23;
      v27 = v24;
      do
      {
        if (*(_QWORD *)(*v26 + 16) == a2)
          llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)v21, *v26);
        while (++v26 != v27)
        {
          if ((*v26 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_27;
        }
        v26 = v27;
LABEL_27:
        ;
      }
      while (v26 != (uint64_t *)v25);
    }
    v28 = v45;
    if (a4)
      v28 = a4;
    v29 = *((unsigned int *)v28 + 2);
    v30 = 126 - 2 * __clz(v29);
    if ((_DWORD)v29)
      v31 = v30;
    else
      v31 = 0;
    std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlock(llvm::jitlink::Block &,unsigned long,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **,false>((unint64_t)*v21, (uint64_t *)*v21 + v29, v31, 1);
  }
  if (a4)
    v32 = a4;
  else
    v32 = v45;
  v33 = *((_DWORD *)v32 + 2);
  if (v33)
  {
    v34 = (uint64_t *)*v21;
    v35 = (uint64_t)*v21 - 8;
    while (1)
    {
      v36 = *(_QWORD **)(v35 + 8 * v33);
      v37 = v36[3] & 0x1FFFFFFFFFFFFFFLL;
      if (a3 <= v37)
        break;
      if (v36[4] + v37 > a3)
        v36[4] = a3 - v37;
      v36[2] = v5;
      *((_DWORD *)v32 + 2) = --v33;
      if (!v33)
        goto LABEL_46;
    }
    v38 = 8 * v33;
    do
    {
      v39 = *v34++;
      *(_QWORD *)(v39 + 24) = *(_QWORD *)(v39 + 24) & 0xFE00000000000000 | (*(_QWORD *)(v39 + 24) - a3) & 0x1FFFFFFFFFFFFFFLL;
      v38 -= 8;
    }
    while (v38);
  }
LABEL_46:
  if (v47 && v45[0] != &v46)
    free(v45[0]);
  return v5;
}

uint64_t llvm::jitlink::JITLinkContext::shouldAddDefaultTargetPasses()
{
  return 1;
}

void llvm::jitlink::markAllSymbolsLive(llvm::jitlink *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  _OWORD v9[3];
  __int128 v10;
  _OWORD v11[3];
  __int128 v12;
  uint64_t v13;
  uint64_t v14;

  llvm::jitlink::LinkGraph::defined_symbols(this, v11);
  v9[0] = v11[0];
  v9[1] = v11[1];
  v9[2] = v11[2];
  v10 = v12;
  v4 = v13;
  v5 = v14;
  v6 = v12;
  if (*(_QWORD *)&v11[0] != v13 || (_QWORD)v12 != v14)
  {
    do
    {
      *(_QWORD *)(*(_QWORD *)v6 + 24) |= 0x1000000000000000uLL;
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)v9, (uint64_t)&v8);
      v6 = v10;
    }
    while (*(_QWORD *)&v9[0] != v4 || (_QWORD)v10 != v5);
  }
  *a2 = 0;
}

void llvm::jitlink::makeTargetOutOfRangeError(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v8;
  _QWORD *v9;
  int v10;
  const char *v11;
  size_t v12;
  _QWORD *v13;
  llvm::raw_ostream *v14;
  uint64_t v15;
  uint64_t v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  uint64_t v19;
  llvm::raw_ostream *v20;
  _BYTE *v21;
  int v22;
  _QWORD *v23;
  uint64_t v24;
  _OWORD *v25;
  char *v26;
  llvm::raw_ostream *v27;
  llvm::raw_ostream *v28;
  uint64_t v29;
  uint64_t v30;
  _WORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  BOOL v40;
  llvm::raw_ostream *v41;
  _WORD *v42;
  const char *v43;
  size_t v44;
  _OWORD *v45;
  uint64_t v46;
  _WORD *v47;
  int v48;
  uint64_t v49;
  const char *v50;
  uint64_t v51;
  uint64_t (****v52)(llvm::detail::format_adapter *__hidden);
  uint64_t v53;
  uint64_t (**v54)(llvm::detail::format_adapter *__hidden);
  uint64_t v55;
  uint64_t (***v56)(llvm::detail::format_adapter *__hidden);
  const char *v57;
  uint64_t v58;
  uint64_t (****v59)(llvm::detail::format_adapter *__hidden);
  uint64_t v60;
  uint64_t (**v61)(llvm::detail::format_adapter *__hidden);
  uint64_t v62;
  uint64_t (***v63)(llvm::detail::format_adapter *__hidden);
  void **v64;
  int v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  char v69;
  uint64_t v70;
  int v71;
  void **v72;
  void *v73[2];
  uint64_t v74;

  v73[0] = 0;
  v73[1] = 0;
  v74 = 0;
  v65 = 0;
  v69 = 0;
  v70 = 0;
  v71 = 1;
  v67 = 0;
  v68 = 0;
  v66 = 0;
  v64 = (void **)&off_251C13AC0;
  v72 = v73;
  llvm::raw_ostream::SetUnbuffered(&v64);
  v8 = a2[2];
  v9 = v68;
  if ((unint64_t)(v67 - v68) > 8)
  {
    v68[8] = 32;
    *v9 = *(_QWORD *)"In graph ";
    v68 += 9;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "In graph ", 9uLL);
  }
  v10 = *(char *)(a1 + 119);
  if (v10 >= 0)
    v11 = (const char *)(a1 + 96);
  else
    v11 = *(const char **)(a1 + 96);
  if (v10 >= 0)
    v12 = *(unsigned __int8 *)(a1 + 119);
  else
    v12 = *(_QWORD *)(a1 + 104);
  llvm::raw_ostream::write((llvm::raw_ostream *)&v64, v11, v12);
  v13 = v68;
  if ((unint64_t)(v67 - v68) > 9)
  {
    *((_WORD *)v68 + 4) = 8302;
    *v13 = *(_QWORD *)", section ";
    v68 += 10;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, ", section ", 0xAuLL);
  }
  v14 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v64, *(const void **)v8, *(_QWORD *)(v8 + 8));
  v15 = *((_QWORD *)v14 + 4);
  if ((unint64_t)(*((_QWORD *)v14 + 3) - v15) > 0x13)
  {
    *(_DWORD *)(v15 + 16) = 544499047;
    *(_OWORD *)v15 = *(_OWORD *)": relocation target ";
    *((_QWORD *)v14 + 4) += 20;
  }
  else
  {
    llvm::raw_ostream::write(v14, ": relocation target ", 0x14uLL);
  }
  if (*(_QWORD *)(*(_QWORD *)a3 + 8))
  {
    if (v67 == v68)
      llvm::raw_ostream::write((llvm::raw_ostream *)&v64, "\"", 1uLL);
    else
      *v68++ = 34;
    v20 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v64, **(const void ***)a3, *(_QWORD *)(*(_QWORD *)a3 + 8));
    v21 = (_BYTE *)*((_QWORD *)v20 + 4);
    if (*((_BYTE **)v20 + 3) == v21)
    {
      llvm::raw_ostream::write(v20, "\"", 1uLL);
    }
    else
    {
      *v21 = 34;
      ++*((_QWORD *)v20 + 4);
    }
  }
  else
  {
    v16 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 16);
    v17 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v64, *(const void **)v16, *(_QWORD *)(v16 + 8));
    v18 = v17;
    v19 = *((_QWORD *)v17 + 4);
    if ((unint64_t)(*((_QWORD *)v17 + 3) - v19) > 2)
    {
      *(_BYTE *)(v19 + 2) = 32;
      *(_WORD *)v19 = 11040;
      *((_QWORD *)v17 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v17, " + ", 3uLL);
    }
    v22 = *(_DWORD *)(a3 + 8);
    v57 = "{0:x}";
    v58 = 5;
    v59 = &v63;
    v60 = 1;
    v61 = &off_251C15650;
    LODWORD(v62) = v22;
    v63 = &v61;
    llvm::formatv_object_base::format((llvm::formatv_object_base *)&v57, v18);
  }
  v23 = v68;
  if ((unint64_t)(v67 - v68) > 0xB)
  {
    *((_DWORD *)v68 + 2) = 544437093;
    *v23 = *(_QWORD *)" at address ";
    v68 += 12;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, " at address ", 0xCuLL);
  }
  v24 = (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(*(_QWORD *)a3 + 16);
  v57 = "{0:x}";
  v58 = 5;
  v59 = &v63;
  v60 = 1;
  v61 = &off_251C151F0;
  v62 = v24;
  v63 = &v61;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)&v57, (llvm::raw_ostream *)&v64);
  v25 = v68;
  if ((unint64_t)(v67 - v68) > 0x13)
  {
    *((_DWORD *)v68 + 4) = 543584032;
    *v25 = *(_OWORD *)" is out of range of ";
    v68 += 20;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, " is out of range of ", 0x14uLL);
  }
  v26 = (char *)(*(uint64_t (**)(_QWORD))(a1 + 176))(*(unsigned __int8 *)(a3 + 24));
  v27 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v64, v26);
  v28 = v27;
  v29 = *((_QWORD *)v27 + 4);
  if ((unint64_t)(*((_QWORD *)v27 + 3) - v29) > 9)
  {
    *(_WORD *)(v29 + 8) = 8308;
    *(_QWORD *)v29 = *(_QWORD *)" fixup at ";
    *((_QWORD *)v27 + 4) += 10;
  }
  else
  {
    llvm::raw_ostream::write(v27, " fixup at ", 0xAuLL);
  }
  v30 = *a2 + *(unsigned int *)(a3 + 8);
  v50 = "{0:x}";
  v51 = 5;
  v52 = &v56;
  v53 = 1;
  v54 = &off_251C151F0;
  v55 = v30;
  v56 = &v54;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)&v50, v28);
  v31 = (_WORD *)*((_QWORD *)v28 + 4);
  if (*((_QWORD *)v28 + 3) - (_QWORD)v31 > 1uLL)
  {
    *v31 = 10272;
    *((_QWORD *)v28 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v28, " (", 2uLL);
  }
  v32 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 56);
  v34 = *(_QWORD *)(v8 + 56) + 8 * *(unsigned int *)(v8 + 72);
  if ((_QWORD *)v34 == v32)
    goto LABEL_59;
  v35 = 0;
  do
  {
    v36 = *v32;
    if (*(uint64_t **)(*v32 + 16) == a2)
    {
      if (*(_QWORD *)(v36 + 8))
      {
        v37 = *(_QWORD *)(v36 + 24);
        if ((v37 & 0x1FFFFFFFFFFFFFFLL) == 0)
        {
          if (!v35
            || ((v38 = *(_QWORD *)(v35 + 24), v40 = ((v37 >> 58) & 3) >= ((v38 >> 58) & 3), v39 = (v37 >> 57) & 1, v40)
              ? (v40 = v39 >= ((v38 & 0x200000000000000) != 0))
              : (v40 = 0),
                !v40))
          {
            v35 = *v32;
          }
        }
      }
    }
    while (++v32 != v33)
    {
      if ((*v32 | 0x1000) != 0xFFFFFFFFFFFFF000)
        goto LABEL_46;
    }
    v32 = v33;
LABEL_46:
    ;
  }
  while (v32 != (_QWORD *)v34);
  if (!v35)
  {
LABEL_59:
    v45 = v68;
    if ((unint64_t)(v67 - v68) <= 0x13)
    {
      v43 = "<anonymous block> @ ";
      v41 = (llvm::raw_ostream *)&v64;
      v44 = 20;
      goto LABEL_61;
    }
    *((_DWORD *)v68 + 4) = 541073470;
    *v45 = *(_OWORD *)"<anonymous block> @ ";
    v68 += 20;
  }
  else
  {
    v41 = llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v64, *(const void **)v35, *(_QWORD *)(v35 + 8));
    v42 = (_WORD *)*((_QWORD *)v41 + 4);
    if (*((_QWORD *)v41 + 3) - (_QWORD)v42 <= 1uLL)
    {
      v43 = ", ";
      v44 = 2;
LABEL_61:
      llvm::raw_ostream::write(v41, v43, v44);
      goto LABEL_64;
    }
    *v42 = 8236;
    *((_QWORD *)v41 + 4) += 2;
  }
LABEL_64:
  v46 = *a2;
  v57 = "{0:x}";
  v58 = 5;
  v59 = &v63;
  v60 = 1;
  v61 = &off_251C151F0;
  v62 = v46;
  v63 = &v61;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)&v57, (llvm::raw_ostream *)&v64);
  v47 = v68;
  if ((unint64_t)(v67 - v68) > 2)
  {
    v68[2] = 32;
    *v47 = 11040;
    v68 += 3;
  }
  else
  {
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, " + ", 3uLL);
  }
  v48 = *(_DWORD *)(a3 + 8);
  v50 = "{0:x}";
  v51 = 5;
  v52 = &v56;
  v53 = 1;
  v54 = &off_251C15650;
  LODWORD(v55) = v48;
  v56 = &v54;
  llvm::formatv_object_base::format((llvm::formatv_object_base *)&v50, (llvm::raw_ostream *)&v64);
  if (v67 == v68)
    llvm::raw_ostream::write((llvm::raw_ostream *)&v64, ")", 1uLL);
  else
    *v68++ = 41;
  v64 = (void **)off_251C13948;
  if (v71 == 1 && v66)
    MEMORY[0x24BD1B380](v66, 0x1000C8077774924);
  v49 = operator new();
  LOWORD(v68) = 260;
  v64 = v73;
  *(_QWORD *)v49 = off_251C15728;
  llvm::Twine::str((llvm::formatv_object_base **)&v64, (std::string *)(v49 + 8));
  *a4 = v49;
  if (SHIBYTE(v74) < 0)
    operator delete(v73[0]);
}

void llvm::jitlink::makeAlignmentError(unint64_t a1@<X0>, unint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  llvm::formatv_object_base *v5;
  char *v10;
  BOOL v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  char *v16;
  void **v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  void **v23;
  uint64_t v24;
  void *__p[2];
  char v26;
  int v27;
  __int16 v28;
  __int128 v29;
  std::string v30;
  std::string v31;
  void *v32[2];
  std::string::size_type v33;
  _QWORD v34[4];
  __int16 v35;
  _QWORD v36[4];
  __int16 v37;
  void **v38;
  uint64_t v39;
  __int128 v40;
  __int16 v41;
  int v42;
  __int16 v43;
  _QWORD v44[4];
  __int16 v45;
  _QWORD v46[4];
  __int16 v47;
  int v48;
  __int16 v49;
  _QWORD v50[2];
  _QWORD v51[2];
  uint64_t (**v52)(llvm::detail::format_adapter *__hidden);
  char v53;
  uint64_t (***v54)(llvm::detail::format_adapter *__hidden);
  llvm::formatv_object_base *v55;
  _QWORD v56[2];
  char v57;
  char v58;
  int v59;
  __int16 v60;
  uint64_t v61;

  v61 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v10 = (char *)v51 + 1;
    do
    {
      *--v10 = llvm::hexdigit(unsigned int,BOOL)::LUT[a1 & 0xF];
      v11 = a1 > 0xF;
      a1 >>= 4;
    }
    while (v11);
  }
  else
  {
    v10 = (char *)v51;
    LOBYTE(v51[0]) = 48;
  }
  std::string::__init_with_size[abi:nn180100]<char *,char *>(&v30, v10, (char *)v51 + 1, (char *)v51 + 1 - v10);
  v12 = std::string::insert(&v30, 0, "0x");
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v31.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v31, " improper alignment for relocation ");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)v32 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v33 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  LOBYTE(v15) = *(_BYTE *)(a4 + 24);
  v50[0] = "{0:d}";
  v50[1] = 5;
  v51[0] = &v54;
  v51[1] = 1;
  v52 = &off_251C156F8;
  v53 = v15;
  v54 = &v52;
  v34[0] = v32;
  v34[2] = v50;
  v35 = 1540;
  v36[0] = v34;
  v36[2] = ": 0x";
  v37 = 770;
  if (a2)
  {
    v16 = (char *)v56 + 1;
    do
    {
      *--v16 = llvm::hexdigit(unsigned int,BOOL)::LUT[a2 & 0xF];
      v11 = a2 > 0xF;
      a2 >>= 4;
    }
    while (v11);
  }
  else
  {
    v16 = (char *)v56;
    LOBYTE(v56[0]) = 48;
  }
  v17 = __p;
  std::string::__init_with_size[abi:nn180100]<char *,char *>(__p, v16, (char *)v56 + 1, (char *)v56 + 1 - v16);
  v18 = v37;
  if (v37 == 1)
  {
    v38 = __p;
    v40 = v29;
    v41 = 260;
    v42 = v27;
    v43 = v28;
    v21 = 4;
    v22 = v39;
  }
  else
  {
    if (!(_BYTE)v37)
    {
      v19 = 0;
      v41 = 256;
      v45 = 256;
      v47 = 256;
      v20 = 1;
      goto LABEL_19;
    }
    v23 = (void **)v36[0];
    v21 = 2;
    if (HIBYTE(v37) != 1)
    {
      v18 = 2;
      v23 = (void **)v36;
    }
    v38 = v23;
    v39 = v36[1];
    *(_QWORD *)&v40 = __p;
    LOBYTE(v41) = v18;
    v22 = 4;
    HIBYTE(v41) = 4;
    v17 = (void **)&v38;
  }
  v44[0] = v17;
  v44[1] = v22;
  v44[2] = " is not aligned to ";
  LOBYTE(v45) = v21;
  v20 = 3;
  HIBYTE(v45) = 3;
  v46[0] = v44;
  v46[2] = a3;
  v19 = 2;
  v5 = (llvm::formatv_object_base *)v46;
  v47 = 2306;
LABEL_19:
  v24 = operator new();
  v55 = v5;
  v56[0] = " bytes";
  v57 = v19;
  v58 = v20;
  v59 = v48;
  v60 = v49;
  *(_QWORD *)v24 = off_251C15728;
  llvm::Twine::str(&v55, (std::string *)(v24 + 8));
  *a5 = v24;
  if (v26 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v33) < 0)
    operator delete(v32[0]);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v30.__r_.__value_.__l.__data_);
}

void llvm::jitlink::createLinkGraphFromObject(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v4;
  __int128 v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  _OWORD v9[2];
  _OWORD v10[2];
  _OWORD v11[2];

  v4 = llvm::identify_magic(*(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8));
  switch(v4)
  {
    case 4:
      v6 = *(_OWORD *)(a1 + 16);
      v10[0] = *(_OWORD *)a1;
      v10[1] = v6;
      llvm::jitlink::createLinkGraphFromELFObject((uint64_t)v10, a2);
      break;
    case 24:
      v7 = *(_OWORD *)(a1 + 16);
      v9[0] = *(_OWORD *)a1;
      v9[1] = v7;
      llvm::jitlink::createLinkGraphFromCOFFObject((uint64_t)v9, a2);
      break;
    case 9:
      v5 = *(_OWORD *)(a1 + 16);
      v11[0] = *(_OWORD *)a1;
      v11[1] = v5;
      llvm::jitlink::createLinkGraphFromMachOObject((unint64_t *)v11, a2);
      break;
    default:
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Unsupported file format", &v8);
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v8;
      break;
  }
}

void llvm::jitlink::absoluteSymbolsLinkGraph(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v6;
  int v7;
  int v8;
  unint64_t v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t i;
  uint64_t v20;
  uint64_t *v21;
  _QWORD *v22;
  std::string v23;
  std::string v24;
  void *__p;
  _BYTE v26[15];
  char v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x24BDAC8D0];
  v6 = *(_DWORD *)(a1 + 24);
  if (v6 - 1 > 0x3B)
    v7 = 0;
  else
    v7 = dword_24AA2DC7C[v6 - 1];
  if (v6 > 0x26)
    goto LABEL_30;
  if (((1 << v6) & 0x2008000002) == 0)
  {
    if (((1 << v6) & 0x4010000008) != 0)
    {
      v8 = 8;
      goto LABEL_9;
    }
LABEL_30:
    llvm::report_fatal_error((llvm *)"unhandled target architecture", (const llvm::Twine *)1);
  }
  v8 = 4;
  do
LABEL_9:
    v9 = __ldxr(&llvm::jitlink::absoluteSymbolsLinkGraph(llvm::Triple const&,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>)::Counter);
  while (__stxr(v9 + 1, &llvm::jitlink::absoluteSymbolsLinkGraph(llvm::Triple const&,llvm::DenseMap<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::orc::SymbolStringPtr,void>,llvm::detail::DenseMapPair<llvm::orc::SymbolStringPtr,llvm::orc::ExecutorSymbolDef>>)::Counter));
  std::to_string(&v23, v9);
  v10 = std::string::insert(&v23, 0, "<Absolute Symbols ");
  v11 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v24.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  v24.__r_.__value_.__r.__words[2] = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  v12 = std::string::append(&v24, ">");
  v13 = (void *)v12->__r_.__value_.__r.__words[0];
  v28[0] = v12->__r_.__value_.__l.__size_;
  *(_QWORD *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v12->__r_.__value_.__r.__words[1] + 7);
  v14 = HIBYTE(v12->__r_.__value_.__r.__words[2]);
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v15 = operator new();
  __p = v13;
  *(_QWORD *)v26 = v28[0];
  *(_QWORD *)&v26[7] = *(_QWORD *)((char *)v28 + 7);
  v27 = v14;
  *a3 = llvm::jitlink::LinkGraph::LinkGraph(v15, (__int128 *)&__p, (__int128 *)a1, v8, v7, 0);
  if (v27 < 0)
    operator delete(__p);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v24.__r_.__value_.__l.__data_);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  if (*((_DWORD *)a2 + 2))
  {
    v16 = *a2;
    v17 = *((unsigned int *)a2 + 4);
    if ((_DWORD)v17)
    {
      v18 = 24 * v17;
      for (i = *a2; (*(_QWORD *)i | 8) == 0xFFFFFFFFFFFFFFF8; i += 24)
      {
        v18 -= 24;
        if (!v18)
          return;
      }
    }
    else
    {
      i = *a2;
    }
    v20 = v16 + 24 * v17;
    if (i != v20)
    {
      v21 = *(uint64_t **)i;
LABEL_25:
      v22 = llvm::jitlink::LinkGraph::addAbsoluteSymbol(v15, (uint64_t)(v21 + 2), *v21, *(_QWORD *)(i + 8), 0, 0, 0, 1);
      v22[3] = v22[3] & 0xDFFFFFFFFFFFFFFFLL | ((((unint64_t)(*(_BYTE *)(i + 17) & 0x20) >> 5) & 1) << 61);
      while (1)
      {
        i += 24;
        if (i == v20)
          break;
        v21 = *(uint64_t **)i;
        if ((*(_QWORD *)i | 8) != 0xFFFFFFFFFFFFFFF8)
        {
          if (i != v20)
            goto LABEL_25;
          return;
        }
      }
    }
  }
}

llvm::jitlink::LinkGraph *llvm::jitlink::link(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  llvm::jitlink::LinkGraph *v2;
  int v3;
  uint64_t v4;
  llvm::jitlink::LinkGraph *result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::jitlink::LinkGraph *v10;
  uint64_t v11;
  llvm::jitlink::LinkGraph *v12;
  uint64_t v13;
  llvm::jitlink::LinkGraph *v14;
  uint64_t v15;
  llvm::jitlink::LinkGraph *v16;

  v2 = *a1;
  v3 = *((_DWORD *)*a1 + 41);
  switch(v3)
  {
    case 1:
      *a1 = 0;
      v12 = v2;
      v6 = *a2;
      *a2 = 0;
      v11 = v6;
      llvm::jitlink::link_COFF(&v12, &v11);
      if (v11)
        (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      result = v12;
      if (v12)
        goto LABEL_11;
      break;
    case 3:
      *a1 = 0;
      v14 = v2;
      v7 = *a2;
      *a2 = 0;
      v13 = v7;
      llvm::jitlink::link_ELF(&v14, &v13);
      v8 = v13;
      v13 = 0;
      if (v8)
        (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
      result = v14;
      v14 = 0;
      if (result)
      {
        llvm::jitlink::LinkGraph::~LinkGraph(result);
        return (llvm::jitlink::LinkGraph *)MEMORY[0x24BD1B3A4]();
      }
      break;
    case 5:
      *a1 = 0;
      v16 = v2;
      v4 = *a2;
      *a2 = 0;
      v15 = v4;
      llvm::jitlink::link_MachO(&v16, &v15);
      if (v15)
        (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
      result = v16;
      if (!v16)
        return result;
LABEL_11:
      llvm::jitlink::LinkGraph::~LinkGraph(result);
      JUMPOUT(0x24BD1B3A4);
    default:
      v9 = *a2;
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Unsupported object format", (uint64_t *)&v10);
      (*(void (**)(uint64_t, llvm::jitlink::LinkGraph **))(*(_QWORD *)v9 + 24))(v9, &v10);
      result = v10;
      if (v10)
        return (llvm::jitlink::LinkGraph *)(*(uint64_t (**)(llvm::jitlink::LinkGraph *))(*(_QWORD *)v10 + 8))(v10);
      break;
  }
  return result;
}

void llvm::jitlink::JITLinkError::~JITLinkError(void **this)
{
  *this = off_251C15728;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
}

{
  *this = off_251C15728;
  if (*((char *)this + 31) < 0)
    operator delete(this[1]);
  JUMPOUT(0x24BD1B3A4);
}

void *llvm::ErrorInfo<llvm::jitlink::JITLinkError,llvm::ErrorInfoBase>::dynamicClassID()
{
  return &llvm::jitlink::JITLinkError::ID;
}

BOOL llvm::ErrorInfo<llvm::jitlink::JITLinkError,llvm::ErrorInfoBase>::isA(uint64_t a1, void *a2)
{
  return a2 == &llvm::jitlink::JITLinkError::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void `anonymous namespace'::JITLinkerErrorCategory::~JITLinkerErrorCategory(std::error_category *this)
{
  std::error_category::~error_category(this);
  JUMPOUT(0x24BD1B3A4);
}

const char *`anonymous namespace'::JITLinkerErrorCategory::name(_anonymous_namespace_::JITLinkerErrorCategory *this)
{
  return "runtimedyld";
}

_QWORD *`anonymous namespace'::JITLinkerErrorCategory::message@<X0>(_QWORD *a1@<X8>)
{
  return std::string::basic_string[abi:nn180100]<0>(a1, "Generic JITLink error");
}

void llvm::detail::provider_format_adapter<char const*>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<char const*>::format(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, unint64_t *a4)
{
  return llvm::format_provider<char const*,void>::format((const char **)(a1 + 8), a2, a3, a4);
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlock(llvm::jitlink::Block &,unsigned long,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **,false>(unint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  BOOL v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  int64_t v61;
  int64_t v62;
  int64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;

  v7 = (uint64_t *)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v40 = *(a2 - 1);
        v41 = *v8;
        if ((*(_QWORD *)(v40 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v8 + 24) & 0x1FFFFFFFFFFFFFFuLL))
        {
          *v8 = v40;
          *(a2 - 1) = v41;
        }
        return result;
      case 3uLL:
        return (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v8, v8 + 1, a2 - 1);
      case 4uLL:
        return (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5uLL:
        v42 = v8 + 1;
        v43 = v8 + 2;
        v44 = v8 + 3;
        result = (unint64_t)std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v8, v8 + 1, v8 + 2, v8 + 3);
        v45 = *(a2 - 1);
        v46 = v8[3];
        if ((*(_QWORD *)(v45 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v46 + 24) & 0x1FFFFFFFFFFFFFFuLL))
        {
          *v44 = v45;
          *(a2 - 1) = v46;
          v47 = *v44;
          v48 = *v43;
          if ((*(_QWORD *)(*v44 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v43 + 24) & 0x1FFFFFFFFFFFFFFuLL))
          {
            *v43 = v47;
            *v44 = v48;
            v49 = *v42;
            if ((*(_QWORD *)(v47 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v42 + 24) & 0x1FFFFFFFFFFFFFFuLL))
            {
              v8[1] = v47;
              v8[2] = v49;
              v50 = *v8;
              if ((*(_QWORD *)(v47 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v8 + 24) & 0x1FFFFFFFFFFFFFFuLL))
              {
                *v8 = v47;
                v8[1] = v50;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v51 = v8 + 1;
          v53 = v8 == a2 || v51 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v53)
            {
              v54 = 8;
              v55 = v8;
              do
              {
                v57 = *v55;
                v56 = v55[1];
                v55 = v51;
                if ((*(_QWORD *)(v56 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v57 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                {
                  v58 = v54;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v58) = v57;
                    v59 = v58 - 8;
                    if (v58 == 8)
                      break;
                    v57 = *(uint64_t *)((char *)v8 + v58 - 16);
                    v58 -= 8;
                    if ((*(_QWORD *)(v56 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(_QWORD *)(v57 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                    {
                      v60 = (uint64_t *)((char *)v8 + v59);
                      goto LABEL_80;
                    }
                  }
                  v60 = v8;
LABEL_80:
                  *v60 = v56;
                }
                v51 = v55 + 1;
                v54 += 8;
              }
              while (v55 + 1 != a2);
            }
          }
          else if (!v53)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v51;
              if ((*(_QWORD *)(v88 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v89 + 24) & 0x1FFFFFFFFFFFFFFuLL))
              {
                do
                {
                  *v51 = v89;
                  v89 = *(v51 - 2);
                  --v51;
                }
                while ((*(_QWORD *)(v88 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v89 + 24) & 0x1FFFFFFFFFFFFFFuLL));
                *v51 = v88;
              }
              v51 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v61 = (v10 - 2) >> 1;
            v62 = v61;
            do
            {
              v63 = v62;
              if (v61 >= v62)
              {
                v64 = (2 * v62) | 1;
                v65 = &v8[v64];
                v66 = *v65;
                if (2 * v63 + 2 < (uint64_t)v10
                  && (*(_QWORD *)(v66 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v65[1] + 24) & 0x1FFFFFFFFFFFFFFuLL))
                {
                  v66 = v65[1];
                  ++v65;
                  v64 = 2 * v63 + 2;
                }
                result = (unint64_t)&v8[v63];
                v67 = *(_QWORD *)result;
                if ((*(_QWORD *)(v66 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(_QWORD *)(*(_QWORD *)result + 24) & 0x1FFFFFFFFFFFFFFuLL))
                {
                  do
                  {
                    v68 = v65;
                    *(_QWORD *)result = v66;
                    if (v61 < v64)
                      break;
                    v69 = (2 * v64) | 1;
                    v65 = &v8[v69];
                    v70 = 2 * v64 + 2;
                    v66 = *v65;
                    if (v70 < (uint64_t)v10
                      && (*(_QWORD *)(v66 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v65[1] + 24) & 0x1FFFFFFFFFFFFFFuLL))
                    {
                      v66 = v65[1];
                      ++v65;
                      v69 = v70;
                    }
                    result = (unint64_t)v68;
                    v64 = v69;
                  }
                  while ((*(_QWORD *)(v66 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(_QWORD *)(v67 + 24) & 0x1FFFFFFFFFFFFFFuLL));
                  *v68 = v67;
                }
              }
              v62 = v63 - 1;
            }
            while (v63);
            v71 = (unint64_t)v9 >> 3;
            do
            {
              v72 = 0;
              v73 = *v8;
              v74 = v8;
              do
              {
                v75 = &v74[v72];
                v78 = v75[1];
                v76 = v75 + 1;
                v77 = v78;
                v79 = (2 * v72) | 1;
                v80 = 2 * v72 + 2;
                if (v80 < v71)
                {
                  result = *(_QWORD *)(v77 + 24) & 0x1FFFFFFFFFFFFFFLL;
                  if (result > (*(_QWORD *)(v76[1] + 24) & 0x1FFFFFFFFFFFFFFuLL))
                  {
                    v77 = v76[1];
                    ++v76;
                    v79 = v80;
                  }
                }
                *v74 = v77;
                v74 = v76;
                v72 = v79;
              }
              while (v79 <= (uint64_t)((unint64_t)(v71 - 2) >> 1));
              if (v76 == --a2)
              {
                *v76 = v73;
              }
              else
              {
                *v76 = *a2;
                *a2 = v73;
                v81 = (char *)v76 - (char *)v8 + 8;
                if (v81 >= 9)
                {
                  v82 = (((unint64_t)v81 >> 3) - 2) >> 1;
                  v83 = &v8[v82];
                  v84 = *v83;
                  v85 = *v76;
                  if ((*(_QWORD *)(*v83 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v76 + 24) & 0x1FFFFFFFFFFFFFFuLL))
                  {
                    do
                    {
                      v86 = v83;
                      *v76 = v84;
                      if (!v82)
                        break;
                      v82 = (v82 - 1) >> 1;
                      v83 = &v8[v82];
                      v84 = *v83;
                      v76 = v86;
                    }
                    while ((*(_QWORD *)(*v83 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v85 + 24) & 0x1FFFFFFFFFFFFFFuLL));
                    *v86 = v85;
                  }
                }
              }
            }
            while (v71-- > 2);
          }
          return result;
        }
        v11 = v10 >> 1;
        v12 = &v8[v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(&v7[v10 >> 1], v7, a2 - 1);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v7, &v7[v10 >> 1], a2 - 1);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v7 + 1, v12 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (unint64_t)std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_QWORD *)(v14 + 24) & 0x1FFFFFFFFFFFFFFLL;
          if ((*(_QWORD *)(*(v7 - 1) + 24) & 0x1FFFFFFFFFFFFFFuLL) > v15)
            goto LABEL_12;
          if (v15 <= (*(_QWORD *)(*(a2 - 1) + 24) & 0x1FFFFFFFFFFFFFFuLL))
          {
            v31 = v7 + 1;
            do
            {
              v8 = v31;
              if (v31 >= a2)
                break;
              ++v31;
            }
            while (v15 <= (*(_QWORD *)(*v8 + 24) & 0x1FFFFFFFFFFFFFFuLL));
          }
          else
          {
            v8 = v7;
            do
            {
              v30 = v8[1];
              ++v8;
            }
            while (v15 <= (*(_QWORD *)(v30 + 24) & 0x1FFFFFFFFFFFFFFuLL));
          }
          v32 = a2;
          if (v8 < a2)
          {
            v32 = a2;
            do
              v33 = *--v32;
            while (v15 > (*(_QWORD *)(v33 + 24) & 0x1FFFFFFFFFFFFFFuLL));
          }
          if (v8 < v32)
          {
            v34 = *v8;
            v35 = *v32;
            do
            {
              *v8 = v35;
              *v32 = v34;
              v36 = *(_QWORD *)(v14 + 24) & 0x1FFFFFFFFFFFFFFLL;
              do
              {
                v37 = v8[1];
                ++v8;
                v34 = v37;
              }
              while (v36 <= (*(_QWORD *)(v37 + 24) & 0x1FFFFFFFFFFFFFFuLL));
              do
              {
                v38 = *--v32;
                v35 = v38;
              }
              while (v36 > (*(_QWORD *)(v38 + 24) & 0x1FFFFFFFFFFFFFFuLL));
            }
            while (v8 < v32);
          }
          v39 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v39;
          a4 = 0;
          *v39 = v14;
          continue;
        }
        v15 = *(_QWORD *)(v14 + 24) & 0x1FFFFFFFFFFFFFFLL;
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while ((*(_QWORD *)(v17 + 24) & 0x1FFFFFFFFFFFFFFuLL) > v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while ((*(_QWORD *)(v21 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while ((*(_QWORD *)(v20 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= v15);
        }
        if (v18 >= v19)
        {
          v28 = v18 - 1;
        }
        else
        {
          v22 = *v19;
          v23 = &v7[v16];
          v24 = v19;
          do
          {
            *v23 = v22;
            *v24 = v17;
            v25 = *(_QWORD *)(v14 + 24) & 0x1FFFFFFFFFFFFFFLL;
            do
            {
              v26 = v23[1];
              ++v23;
              v17 = v26;
            }
            while ((*(_QWORD *)(v26 + 24) & 0x1FFFFFFFFFFFFFFuLL) > v25);
            do
            {
              v27 = *--v24;
              v22 = v27;
            }
            while ((*(_QWORD *)(v27 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= v25);
          }
          while (v23 < v24);
          v28 = v23 - 1;
        }
        if (v28 != v7)
          *v7 = *v28;
        *v28 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlock(llvm::jitlink::Block &,unsigned long,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **,false>(v7, v28, a3, a4 & 1);
          a4 = 0;
          v8 = v28 + 1;
          continue;
        }
        v29 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlock(llvm::jitlink::Block &,unsigned long,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(v7, v28);
        v8 = v28 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlock(llvm::jitlink::Block &,unsigned long,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(v28 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v29)
            continue;
          goto LABEL_33;
        }
        a2 = v28;
        if (!v29)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::LinkGraph::splitBlock(llvm::jitlink::Block &,unsigned long,std::optional<llvm::SmallVector<llvm::jitlink::Symbol *,8u>> *)::$_0 &,llvm::jitlink::Symbol **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if ((*(_QWORD *)(v6 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*a1 + 24) & 0x1FFFFFFFFFFFFFFuLL))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if ((*(_QWORD *)(v20 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(v21 + 24) & 0x1FFFFFFFFFFFFFFuLL))
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if ((*(_QWORD *)(*v19 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFuLL))
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if ((*(_QWORD *)(v22 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v17 + 24) & 0x1FFFFFFFFFFFFFFuLL))
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if ((*(_QWORD *)(v22 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*a1 + 24) & 0x1FFFFFFFFFFFFFFuLL))
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::DWARFRecordSectionSplitter::operator()(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Symbol **>(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if ((*(_QWORD *)(*v9 + 24) & 0x1FFFFFFFFFFFFFFuLL) > (*(_QWORD *)(*v8 + 24) & 0x1FFFFFFFFFFFFFFuLL))
    {
      v14 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if ((*(_QWORD *)(v12 + 24) & 0x1FFFFFFFFFFFFFFuLL) <= (*(_QWORD *)(v13 + 24) & 0x1FFFFFFFFFFFFFFuLL))
        {
          v16 = (uint64_t *)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

llvm::raw_ostream *llvm::format_provider<long long,void>::format(unint64_t *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  unsigned int v13;
  size_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  size_t v18;

  v16 = a3;
  v17 = a4;
  v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      v12 = 0;
      v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78)
            goto LABEL_19;
          goto LABEL_16;
        }
LABEL_17:
        v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100)
        goto LABEL_17;
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      v12 = 0;
    }
LABEL_19:
    v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6))
      v14 = 0;
    else
      v14 = v18;
    return llvm::write_integer(a2, *a1, v14, v12);
  }
  v7 = v15;
  v18 = 0;
  v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  v9 = v18;
  if (v8)
    v9 = 0;
  if ((v7 & 0xFFFFFFFE) == 2)
    v10 = v9 + 2;
  else
    v10 = v9;
  return llvm::write_hex(a2, *a1, v7, v10, 1);
}

void llvm::detail::provider_format_adapter<unsigned char>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned char>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned char,void>::format((unsigned __int8 *)(a1 + 8), a2, a3, a4);
}

void llvm::jitlink::JITLinkerBase::~JITLinkerBase(llvm::jitlink::JITLinkerBase *this)
{
  uint64_t v2;
  uint64_t v3;
  void **v4;

  *(_QWORD *)this = off_251C15778;
  v2 = *((_QWORD *)this + 18);
  *((_QWORD *)this + 18) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  v4 = (void **)((char *)this + 120);
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = (void **)((char *)this + 96);
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = (void **)((char *)this + 72);
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = (void **)((char *)this + 48);
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v4);
  v4 = (void **)((char *)this + 24);
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](&v4);
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 2, 0);
  v3 = *((_QWORD *)this + 1);
  *((_QWORD *)this + 1) = 0;
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
}

_QWORD *llvm::jitlink::JITLinkerBase::linkPhase1(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *i;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  char *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t v43;
  char *v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  uint64_t v53;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  char *v68;
  char *v69;
  char *v70;
  uint64_t v71;
  char *v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  _QWORD *v77;
  __n128 v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  char *v87;
  char *v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  _QWORD *v105;
  uint64_t *v106;
  _QWORD *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  char *v111;
  char *v112;
  _QWORD v113[8];
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124[2];
  int v125;
  char *v126;
  char *v127;
  char *v128;
  uint64_t v129;
  _QWORD v130[4];
  uint64_t v131;
  char v132;
  uint64_t v133;

  v133 = *MEMORY[0x24BDAC8D0];
  llvm::jitlink::JITLinkerBase::runPasses((uint64_t)&v118, a1, *(_QWORD **)(a1 + 24), *(_QWORD **)(a1 + 32));
  if ((_QWORD)v118)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v109 = v118;
    *(_QWORD *)&v118 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 24))(v4, &v109);
    v5 = v109;
    if (!v109)
      goto LABEL_4;
    goto LABEL_3;
  }
  v106 = a2;
  v7 = *(_QWORD *)(a1 + 16);
  v126 = 0;
  v127 = 0;
  v128 = 0;
  v124[0] = 0;
  v124[1] = 0;
  v125 = 0;
  llvm::jitlink::LinkGraph::defined_symbols((llvm::jitlink::LinkGraph *)v7, &v118);
  v114 = v118;
  v115 = v119;
  v116 = v120;
  v117 = v121;
  v8 = v122;
  v9 = v123;
  v10 = (uint64_t *)v121;
  if ((_QWORD)v118 != v122 || (_QWORD)v121 != v123)
  {
    do
    {
      v11 = *v10;
      if ((*(_BYTE *)(*v10 + 31) & 0x10) != 0)
      {
        v12 = v127;
        if (v127 >= v128)
        {
          v14 = (v127 - v126) >> 3;
          if ((unint64_t)(v14 + 1) >> 61)
LABEL_171:
            abort();
          v15 = (v128 - v126) >> 2;
          if (v15 <= v14 + 1)
            v15 = v14 + 1;
          if ((unint64_t)(v128 - v126) >= 0x7FFFFFFFFFFFFFF8)
            v16 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v16 = v15;
          if (v16)
            v17 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v128, v16);
          else
            v17 = 0;
          v18 = &v17[8 * v14];
          *(_QWORD *)v18 = v11;
          v13 = v18 + 8;
          v20 = v126;
          v19 = v127;
          if (v127 != v126)
          {
            do
            {
              v21 = *((_QWORD *)v19 - 1);
              v19 -= 8;
              *((_QWORD *)v18 - 1) = v21;
              v18 -= 8;
            }
            while (v19 != v20);
            v19 = v126;
          }
          v126 = v18;
          v127 = v13;
          v128 = &v17[8 * v16];
          if (v19)
            operator delete(v19);
        }
        else
        {
          *(_QWORD *)v127 = v11;
          v13 = v12 + 8;
        }
        v127 = v13;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v114, (uint64_t)v113);
      v10 = (uint64_t *)v117;
    }
    while ((_QWORD)v114 != v8 || (_QWORD)v117 != v9);
    for (i = v127; v126 != v127; i = v127)
    {
      v24 = *((_QWORD *)i - 1);
      v127 = i - 8;
      v25 = *(_QWORD *)(v24 + 16);
      *(_QWORD *)&v118 = v25;
      *(_QWORD *)&v114 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v124, &v118, &v114) & 1) == 0)
      {
        *(_QWORD *)&v114 = v25;
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)v124, &v114, (uint64_t)&v118);
        v26 = *(_QWORD *)(v24 + 16);
        v27 = *(uint64_t **)(v26 + 40);
        v28 = *(uint64_t **)(v26 + 48);
        while (v27 != v28)
        {
          v29 = *v27;
          if ((*(_BYTE *)(*(_QWORD *)(*v27 + 16) + 8) & 1) != 0 && (*(_BYTE *)(v29 + 31) & 0x10) == 0)
          {
            v30 = v127;
            if (v127 >= v128)
            {
              v32 = (v127 - v126) >> 3;
              if ((unint64_t)(v32 + 1) >> 61)
                goto LABEL_171;
              v33 = (v128 - v126) >> 2;
              if (v33 <= v32 + 1)
                v33 = v32 + 1;
              if ((unint64_t)(v128 - v126) >= 0x7FFFFFFFFFFFFFF8)
                v34 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v34 = v33;
              if (v34)
                v35 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v128, v34);
              else
                v35 = 0;
              v36 = &v35[8 * v32];
              *(_QWORD *)v36 = v29;
              v31 = v36 + 8;
              v38 = v126;
              v37 = v127;
              if (v127 != v126)
              {
                do
                {
                  v39 = *((_QWORD *)v37 - 1);
                  v37 -= 8;
                  *((_QWORD *)v36 - 1) = v39;
                  v36 -= 8;
                }
                while (v37 != v38);
                v37 = v126;
              }
              v126 = v36;
              v127 = v31;
              v128 = &v35[8 * v34];
              if (v37)
                operator delete(v37);
            }
            else
            {
              *(_QWORD *)v127 = v29;
              v31 = v30 + 8;
            }
            v127 = v31;
            v29 = *v27;
          }
          *(_QWORD *)(v29 + 24) |= 0x1000000000000000uLL;
          v27 += 4;
        }
      }
    }
  }
  v110 = 0;
  v111 = 0;
  v112 = 0;
  llvm::jitlink::LinkGraph::defined_symbols((llvm::jitlink::LinkGraph *)v7, &v118);
  v114 = v118;
  v115 = v119;
  v116 = v120;
  v117 = v121;
  v40 = v122;
  v41 = v123;
  v42 = (uint64_t *)v121;
  if ((_QWORD)v118 != v122 || (_QWORD)v121 != v123)
  {
    do
    {
      v43 = *v42;
      if ((*(_BYTE *)(*v42 + 31) & 0x10) == 0)
      {
        v44 = v111;
        if (v111 >= v112)
        {
          v46 = (v111 - v110) >> 3;
          if ((unint64_t)(v46 + 1) >> 61)
            goto LABEL_171;
          v47 = (v112 - v110) >> 2;
          if (v47 <= v46 + 1)
            v47 = v46 + 1;
          if ((unint64_t)(v112 - v110) >= 0x7FFFFFFFFFFFFFF8)
            v48 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v48 = v47;
          if (v48)
            v49 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v112, v48);
          else
            v49 = 0;
          v50 = &v49[8 * v46];
          *(_QWORD *)v50 = v43;
          v45 = v50 + 8;
          v52 = v110;
          v51 = v111;
          if (v111 != v110)
          {
            do
            {
              v53 = *((_QWORD *)v51 - 1);
              v51 -= 8;
              *((_QWORD *)v50 - 1) = v53;
              v50 -= 8;
            }
            while (v51 != v52);
            v51 = v110;
          }
          v110 = v50;
          v111 = v45;
          v112 = &v49[8 * v48];
          if (v51)
            operator delete(v51);
        }
        else
        {
          *(_QWORD *)v111 = v43;
          v45 = v44 + 8;
        }
        v111 = v45;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v114, (uint64_t)v113);
      v42 = (uint64_t *)v117;
    }
    while ((_QWORD)v114 != v40 || (_QWORD)v117 != v41);
  }
  v55 = v110;
  if (v110 != v111)
  {
    do
    {
      v56 = *(_QWORD *)v55;
      v55 += 8;
      v57 = *(_QWORD *)(*(_QWORD *)(v56 + 16) + 16) + 56;
      *(_QWORD *)&v118 = v56;
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v57, &v118);
    }
    while (v55 != v111);
    v55 = v110;
  }
  if (v55)
  {
    v111 = v55;
    operator delete(v55);
  }
  v110 = 0;
  v111 = 0;
  v112 = 0;
  llvm::jitlink::LinkGraph::blocks((llvm::jitlink::LinkGraph *)v7, &v118);
  v114 = v118;
  v115 = v119;
  v116 = v120;
  v117 = v121;
  v58 = v122;
  v59 = v123;
  v60 = (uint64_t *)v121;
  if ((_QWORD)v118 != v122 || (_QWORD)v121 != v123)
  {
    do
    {
      v61 = *v60;
      v113[0] = *v60;
      v129 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v124, v113, &v129) & 1) == 0)
      {
        v62 = v111;
        if (v111 >= v112)
        {
          v64 = (v111 - v110) >> 3;
          if ((unint64_t)(v64 + 1) >> 61)
            goto LABEL_171;
          v65 = (v112 - v110) >> 2;
          if (v65 <= v64 + 1)
            v65 = v64 + 1;
          if ((unint64_t)(v112 - v110) >= 0x7FFFFFFFFFFFFFF8)
            v66 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v66 = v65;
          if (v66)
            v67 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v112, v66);
          else
            v67 = 0;
          v68 = &v67[8 * v64];
          *(_QWORD *)v68 = v61;
          v63 = v68 + 8;
          v70 = v110;
          v69 = v111;
          if (v111 != v110)
          {
            do
            {
              v71 = *((_QWORD *)v69 - 1);
              v69 -= 8;
              *((_QWORD *)v68 - 1) = v71;
              v68 -= 8;
            }
            while (v69 != v70);
            v69 = v110;
          }
          v110 = v68;
          v111 = v63;
          v112 = &v67[8 * v66];
          if (v69)
            operator delete(v69);
        }
        else
        {
          *(_QWORD *)v111 = v61;
          v63 = v62 + 8;
        }
        v111 = v63;
      }
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)&v114, (uint64_t)v113);
      v60 = (uint64_t *)v117;
    }
    while ((_QWORD)v114 != v58 || (_QWORD)v117 != v59);
  }
  v73 = v110;
  if (v110 != v111)
  {
    do
    {
      v74 = *(_QWORD **)v73;
      v73 += 8;
      llvm::jitlink::LinkGraph::removeBlock(v7, v74);
    }
    while (v73 != v111);
    v73 = v110;
  }
  if (v73)
  {
    v111 = v73;
    operator delete(v73);
  }
  v118 = 0uLL;
  v75 = v7 + 208;
  *(_QWORD *)&v119 = 0;
  v76 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v7 + 208);
  v79 = *(_QWORD *)(v7 + 208) + 8 * *(unsigned int *)(v7 + 224);
  if ((_QWORD *)v79 != v76)
  {
    v80 = v76;
    v81 = v77;
    v82 = 0;
    do
    {
      v83 = *v80;
      if ((*(_BYTE *)(*v80 + 31) & 0x10) != 0)
        goto LABEL_138;
      if ((unint64_t)v82 >= (unint64_t)v119)
      {
        v84 = (uint64_t)((uint64_t)v82 - v118) >> 3;
        if ((unint64_t)(v84 + 1) >> 61)
          goto LABEL_171;
        v85 = (uint64_t)(v119 - v118) >> 2;
        if (v85 <= v84 + 1)
          v85 = v84 + 1;
        if ((_QWORD)v119 - (_QWORD)v118 >= 0x7FFFFFFFFFFFFFF8uLL)
          v86 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v86 = v85;
        if (v86)
          v87 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)&v119, v86);
        else
          v87 = 0;
        v88 = &v87[8 * v84];
        *(_QWORD *)v88 = v83;
        v82 = (uint64_t *)(v88 + 8);
        v89 = (char *)*((_QWORD *)&v118 + 1);
        v90 = (char *)v118;
        if (*((_QWORD *)&v118 + 1) != (_QWORD)v118)
        {
          do
          {
            v91 = *((_QWORD *)v89 - 1);
            v89 -= 8;
            *((_QWORD *)v88 - 1) = v91;
            v88 -= 8;
          }
          while (v89 != v90);
          v89 = (char *)v118;
        }
        *(_QWORD *)&v118 = v88;
        *((_QWORD *)&v118 + 1) = v82;
        *(_QWORD *)&v119 = &v87[8 * v86];
        if (v89)
          operator delete(v89);
      }
      else
      {
        *v82++ = v83;
      }
      *((_QWORD *)&v118 + 1) = v82;
LABEL_138:
      while (++v80 != v81)
      {
        if ((*v80 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_142;
      }
      v80 = v81;
LABEL_142:
      ;
    }
    while (v80 != (_QWORD *)v79);
    v92 = (uint64_t *)v118;
    if ((uint64_t *)v118 != v82)
    {
      do
      {
        v93 = *v92++;
        *(_QWORD *)&v114 = v93;
        v78.n128_u64[0] = (unint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase(v75, &v114);
      }
      while (v92 != v82);
      v82 = (uint64_t *)v118;
    }
    if (v82)
    {
      *((_QWORD *)&v118 + 1) = v82;
      operator delete(v82);
    }
  }
  MEMORY[0x24BD1B398](v124[0], 8, v78);
  if (v126)
  {
    v127 = v126;
    operator delete(v126);
  }
  llvm::jitlink::JITLinkerBase::runPasses((uint64_t)&v118, a1, *(_QWORD **)(a1 + 48), *(_QWORD **)(a1 + 56));
  if ((_QWORD)v118)
  {
    v94 = *(_QWORD *)(a1 + 8);
    v108 = v118;
    *(_QWORD *)&v118 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v94 + 24))(v94, &v108);
    v5 = v108;
    if (!v108)
    {
LABEL_4:
      result = (_QWORD *)v118;
      if (!(_QWORD)v118)
        return result;
      return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
    }
LABEL_3:
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
    goto LABEL_4;
  }
  v95 = *(_QWORD *)(a1 + 16);
  if (*(_QWORD *)(v95 + 256) != *(_QWORD *)(v95 + 264))
  {
LABEL_154:
    v96 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
    v97 = *(_QWORD *)(a1 + 16);
    v98 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
    v99 = *v106;
    *v106 = 0;
    v130[0] = v99;
    v130[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>>::CallbacksHolder<llvm::jitlink::JITLinkerBase::linkPhase1(std::unique_ptr<llvm::jitlink::JITLinkerBase>)::$_1,llvm::jitlink::JITLinkerBase::linkPhase1(std::unique_ptr<llvm::jitlink::JITLinkerBase>)::$_1,void>::Callbacks
            + 6;
    (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v96 + 16))(v96, v98, v97, v130);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v130);
  }
  if (*(_DWORD *)(v95 + 192))
  {
    v100 = *(_QWORD *)(v95 + 184);
    v101 = *(unsigned int *)(v95 + 200);
    if ((_DWORD)v101)
    {
      v102 = 24 * v101;
      v103 = *(_QWORD **)(v95 + 184);
      while (*v103 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v103 += 3;
        v102 -= 24;
        if (!v102)
          goto LABEL_160;
      }
    }
    else
    {
      v103 = *(_QWORD **)(v95 + 184);
    }
    v105 = (_QWORD *)(v100 + 24 * v101);
LABEL_166:
    if (v103 != v105)
    {
      if (*(_DWORD *)(v103[2] + 20) != 2)
        goto LABEL_154;
      while (1)
      {
        v103 += 3;
        if (v103 == v105)
          break;
        if (*v103 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_166;
      }
    }
  }
LABEL_160:
  v104 = *v106;
  *v106 = 0;
  v107 = (_QWORD *)v104;
  v132 = 0;
  v131 = 0;
  llvm::jitlink::JITLinkerBase::linkPhase2(a1, (uint64_t *)&v107, &v131);
  if (v131)
    (*(void (**)(uint64_t))(*(_QWORD *)v131 + 8))(v131);
  result = v107;
  if (v107)
    return (_QWORD *)(*(uint64_t (**)(_QWORD *))(*result + 8))(result);
  return result;
}

uint64_t llvm::jitlink::JITLinkerBase::runPasses(uint64_t result, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _QWORD *v4;
  _QWORD *v6;
  uint64_t v8;
  _QWORD *v9;

  v4 = (_QWORD *)result;
  if (a3 == a4)
  {
LABEL_7:
    *v4 = 0;
  }
  else
  {
    v6 = a3;
    while (1)
    {
      v8 = v6[3];
      v9 = v6;
      if ((v8 & 2) == 0)
        v9 = (_QWORD *)*v6;
      result = (*(uint64_t (**)(_QWORD *, _QWORD))(v8 & 0xFFFFFFFFFFFFFFF8))(v9, *(_QWORD *)(a2 + 16));
      if (*v4)
        break;
      v6 += 4;
      if (v6 == a4)
        goto LABEL_7;
    }
  }
  return result;
}

uint64_t llvm::jitlink::JITLinkerBase::linkPhase2(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  __int128 *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32[2];
  int v33;
  char v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if ((a3[1] & 1) != 0)
  {
    v11 = *(_QWORD *)(a1 + 8);
    v12 = *a3;
    *a3 = 0;
    v30 = v12;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 24))(v11, &v30);
    result = v30;
    if (!v30)
      return result;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  }
  v5 = *a3;
  *a3 = 0;
  v6 = *(_QWORD *)(a1 + 144);
  *(_QWORD *)(a1 + 144) = v5;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  llvm::jitlink::JITLinkerBase::runPasses((uint64_t)&v31, a1, *(_QWORD **)(a1 + 72), *(_QWORD **)(a1 + 80));
  v7 = v31;
  if (!(_QWORD)v31)
  {
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(&v31, *(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
    v7 = v31;
    if (!(_QWORD)v31)
    {
      v13 = *(_QWORD *)(a1 + 16);
      v35 = 0;
      v36 = 0;
      v37 = 0;
      v14 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v13 + 208);
      v18 = *(_QWORD *)(v13 + 208) + 8 * *(unsigned int *)(v13 + 224);
      if ((_QWORD *)v18 == v14)
        goto LABEL_22;
      v19 = v14;
      v20 = v15;
      do
      {
        v21 = (__int128 *)*v19++;
        v22 = (*((_QWORD *)v21 + 3) >> 62) & 1;
        v31 = *v21;
        *((_DWORD *)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::FindAndConstruct(&v35, &v31, v16, v17)+ 4) = v22;
        while (v19 != v20)
        {
          if ((*v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_18;
          ++v19;
        }
        v19 = v20;
LABEL_18:
        ;
      }
      while (v19 != (_QWORD *)v18);
      if (!(_DWORD)v36)
      {
LABEL_22:
        v27 = *a2;
        *a2 = 0;
        v29 = v27;
        v34 = 0;
        v32[0] = 0;
        v32[1] = 0;
        v33 = 0;
        llvm::jitlink::JITLinkerBase::linkPhase3(v27, &v29, (uint64_t)v32);
        llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(v32);
        MEMORY[0x24BD1B398](0, 8);
        v26 = v29;
        if (!v29)
          return MEMORY[0x24BD1B398](v35, 8);
      }
      else
      {
        v23 = *(_QWORD *)(a1 + 8);
        v24 = *a2;
        *a2 = 0;
        v25 = (_QWORD *)operator new();
        *v25 = &off_251C157A0;
        v25[1] = v24;
        v28 = v25;
        (*(void (**)(uint64_t, uint64_t *, _QWORD **))(*(_QWORD *)v23 + 32))(v23, &v35, &v28);
        v26 = (uint64_t)v28;
        v28 = 0;
        if (!v26)
          return MEMORY[0x24BD1B398](v35, 8);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
      return MEMORY[0x24BD1B398](v35, 8);
    }
  }
  v8 = *a2;
  *a2 = 0;
  *(_QWORD *)&v31 = 0;
  v9 = *(_QWORD *)(a1 + 144);
  v35 = v8;
  v36 = v7;
  v38 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,void>::Callbacks
      + 6;
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v35);
  llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v35);
  result = v31;
  if (!(_QWORD)v31)
    return result;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
}

_QWORD *llvm::jitlink::JITLinkerBase::linkPhase3(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  size_t v7;
  char *v8;
  const void *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;
  uint64_t v13;
  _QWORD *v14;
  _OWORD **v15;
  unint64_t *v16;
  uint64_t v17;
  _OWORD **v18;
  _OWORD **v19;
  __int128 *v20;
  int v21;
  char *v22;
  unint64_t v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t (*v27)(void);
  uint64_t v28;
  uint64_t v29;
  char *v30;
  uint64_t v31;
  int v32;
  char *v33;
  _QWORD v34[4];
  uint64_t v35;
  char v36;
  __int128 v37;
  char *v38;
  uint64_t v39;

  v39 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a3 + 24) & 1) != 0)
  {
    v9 = 0;
    v10 = *a2;
    *a2 = 0;
    if ((*(_BYTE *)(a3 + 24) & 1) != 0)
    {
      v9 = *(const void **)a3;
      *(_QWORD *)a3 = 0;
    }
    v11 = *(_QWORD *)(a1 + 144);
    *(_QWORD *)&v37 = v10;
    *((_QWORD *)&v37 + 1) = v9;
    v38 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,void>::Callbacks
        + 6;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v11 + 16))(v11, &v37);
    return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v37);
  }
  else
  {
    v30 = 0;
    v31 = 0;
    MEMORY[0x24BD1B398](0, 8);
    v6 = *(unsigned int *)(a3 + 16);
    v32 = v6;
    if ((_DWORD)v6)
    {
      v7 = 32 * v6;
      v8 = (char *)operator new(32 * v6, (std::align_val_t)8uLL);
      v30 = v8;
      v31 = *(_QWORD *)(a3 + 8);
      memcpy(v8, *(const void **)a3, v7);
    }
    else
    {
      v8 = 0;
      v30 = 0;
      v31 = 0;
    }
    v13 = *(_QWORD *)(a1 + 16);
    v14 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v13 + 208);
    v17 = *(_QWORD *)(v13 + 208) + 8 * *(unsigned int *)(v13 + 224);
    if ((_QWORD *)v17 != v14)
    {
      v18 = (_OWORD **)v14;
      v19 = v15;
      do
      {
        v20 = *v18;
        v37 = **v18;
        v33 = 0;
        v21 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>,llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>::LookupBucketFor<llvm::StringRef>((uint64_t *)&v30, (uint64_t)&v37, &v33, v16);
        v8 = v30;
        if (v21)
        {
          v22 = v33;
          if (v33 != &v30[32 * v32])
          {
            **((_QWORD **)v20 + 2) = *((_QWORD *)v33 + 2);
            v23 = *((_QWORD *)v20 + 3) & 0xFDFFFFFFFFFFFFFFLL | ((unint64_t)((v22[25] & 2) != 0) << 57);
            *((_QWORD *)v20 + 3) = v23;
            *((_QWORD *)v20 + 3) = v23 & 0xF3FFFFFFFFFFFFFFLL | ((unint64_t)(((v22[25] >> 4) & 1) == 0) << 58);
          }
        }
        while (++v18 != v19)
        {
          if (((unint64_t)*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_17;
        }
        v18 = v19;
LABEL_17:
        ;
      }
      while (v18 != (_OWORD **)v17);
    }
    MEMORY[0x24BD1B398](v8, 8);
    llvm::jitlink::JITLinkerBase::runPasses((uint64_t)&v33, a1, *(_QWORD **)(a1 + 96), *(_QWORD **)(a1 + 104));
    v24 = v33;
    if (v33
      || ((*(void (**)(char **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(&v33, a1, *(_QWORD *)(a1 + 16)), (v24 = v33) != 0)|| (llvm::jitlink::JITLinkerBase::runPasses((uint64_t)&v33, a1, *(_QWORD **)(a1 + 120), *(_QWORD **)(a1 + 128)), (v24 = v33) != 0))
    {
      v25 = *a2;
      *a2 = 0;
      v33 = 0;
      v26 = *(_QWORD *)(a1 + 144);
      *(_QWORD *)&v37 = v25;
      *((_QWORD *)&v37 + 1) = v24;
      v38 = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallbacksHolder<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0,void>::Callbacks
          + 6;
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v26 + 16))(v26, &v37);
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v37);
      result = v33;
      if (!v33)
        return result;
      v27 = *(uint64_t (**)(void))(*(_QWORD *)v33 + 8);
      return (_QWORD *)v27();
    }
    v28 = *(_QWORD *)(a1 + 144);
    v29 = *a2;
    *a2 = 0;
    if (v28)
    {
      v34[0] = v29;
      v34[3] = (char *)llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>::CallbacksHolder<llvm::jitlink::JITLinkerBase::linkPhase3(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)::$_0,llvm::jitlink::JITLinkerBase::linkPhase3(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)::$_0,void>::Callbacks
             + 6;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v28 + 24))(v28, v34);
      return llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v34);
    }
    v36 = 0;
    v35 = -1;
    result = (_QWORD *)llvm::jitlink::JITLinkerBase::linkPhase4(*(_QWORD *)(a1 + 8), &v35);
    if ((v36 & 1) != 0)
    {
      result = (_QWORD *)v35;
      if (v35)
        result = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v35 + 8))(v35);
    }
    if (v29)
    {
      v27 = *(uint64_t (**)(void))(*(_QWORD *)v29 + 8);
      return (_QWORD *)v27();
    }
  }
  return result;
}

uint64_t llvm::jitlink::JITLinkerBase::linkPhase4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;

  if ((a2[1] & 1) != 0)
  {
    v3 = *a2;
    *a2 = 0;
    v5 = v3;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 24))(a1, &v5);
    result = v5;
    if (v5)
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v4 = *a2;
    *a2 = -1;
    return (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 48))(a1, &v4);
  }
  return result;
}

void std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = v2;
    if (v4 != v2)
    {
      do
        v4 = llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(v4 - 4);
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>>::CallImpl<llvm::jitlink::JITLinkerBase::linkPhase1(std::unique_ptr<llvm::jitlink::JITLinkerBase>)::$_1>(uint64_t *a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v2 = *(_BYTE *)(a2 + 8) & 1;
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  v4 = *a1;
  *a1 = 0;
  v6 = v4;
  v7 = v3;
  v8 = v2;
  llvm::jitlink::JITLinkerBase::linkPhase2(v4, &v6, &v7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(void))(*(_QWORD *)v6 + 8))();
  return result;
}

_QWORD *llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>>::MoveImpl<llvm::jitlink::JITLinkerBase::linkPhase1(std::unique_ptr<llvm::jitlink::JITLinkerBase>)::$_1>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>>::DestroyImpl<llvm::jitlink::JITLinkerBase::linkPhase1(std::unique_ptr<llvm::jitlink::JITLinkerBase>)::$_1>(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::jitlink::createLookupContinuation<llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0>(llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0)::Impl::~Impl(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void llvm::jitlink::createLookupContinuation<llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0>(llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0)::Impl::~Impl(uint64_t a1)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t *llvm::jitlink::createLookupContinuation<llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0>(llvm::jitlink::JITLinkerBase::linkPhase2(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<std::unique_ptr<llvm::jitlink::JITLinkMemoryManager::InFlightAlloc>>)::$_0)::Impl::run(uint64_t a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9[2];
  int v10;
  char v11;
  uint64_t v12[2];
  int v13;
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v11 = *(_BYTE *)(a2 + 24) & 1;
  v2 = v11;
  v3 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  if (v2)
  {
    v5 = *(_QWORD *)(a1 + 8);
  }
  else
  {
    v4 = *(_DWORD *)(a2 + 16);
    *(_DWORD *)(a2 + 16) = 0;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)(a2 + 8) = 0;
    v12[1] = v6;
    v9[1] = 0;
    v13 = v4;
    v10 = 0;
  }
  *(_QWORD *)(a1 + 8) = 0;
  v8 = v5;
  v9[0] = 0;
  v14 = v2;
  v12[0] = v3;
  llvm::jitlink::JITLinkerBase::linkPhase3(v5, &v8, (uint64_t)v12);
  llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(v12);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>::~Expected(v9);
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>::CallImpl<llvm::jitlink::JITLinkerBase::linkPhase3(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)::$_0>(uint64_t **a1, uint64_t a2)
{
  char v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v6;
  char v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  if ((*(_BYTE *)(a2 + 8) & 1) != 0)
  {
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = 0;
    v2 = 1;
  }
  else
  {
    v2 = 0;
    v3 = *(_QWORD *)a2;
    *(_QWORD *)a2 = -1;
  }
  v4 = *a1;
  *a1 = 0;
  v7 = v2;
  v6 = v3;
  llvm::jitlink::JITLinkerBase::linkPhase4(v4[1], &v6);
  if ((v7 & 1) != 0 && v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return (*(uint64_t (**)(uint64_t *))(*v4 + 8))(v4);
}

_QWORD *llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>::MoveImpl<llvm::jitlink::JITLinkerBase::linkPhase3(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)::$_0>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Expected<llvm::jitlink::JITLinkMemoryManager::FinalizedAlloc>>::DestroyImpl<llvm::jitlink::JITLinkerBase::linkPhase3(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Expected<llvm::DenseMap<llvm::StringRef,llvm::orc::ExecutorSymbolDef,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::orc::ExecutorSymbolDef>>>)::$_0>(uint64_t *a1)
{
  uint64_t result;

  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::FindAndConstruct(uint64_t *a1, _OWORD *a2, uint64_t a3, unint64_t *a4)
{
  char v6;
  _QWORD *v7;
  _QWORD *v9;

  v9 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(a1, (uint64_t)a2, &v9, a4);
  v7 = v9;
  if ((v6 & 1) == 0)
  {
    v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, v9);
    *(_OWORD *)v7 = *a2;
    *((_DWORD *)v7 + 4) = 0;
  }
  return v7;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::InsertIntoBucketImpl<llvm::StringRef>(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  unint64_t *v9;
  _QWORD *v10;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::grow(a1, v7);
  v10 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, a3, &v10, v9);
  a4 = v10;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::moveFromOldBuckets(a1, v4, v4 + 24 * v3, v10);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v11 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v11)
  {
    v12 = 24 * v11;
    do
    {
      *result = xmmword_24AA2AC20;
      result = (_OWORD *)((char *)result + 24);
      v12 -= 24;
    }
    while (v12);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>,llvm::StringRef,llvm::jitlink::SymbolLookupFlags,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::SymbolLookupFlags>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  uint64_t v6;
  uint64_t v7;
  _OWORD *v8;
  uint64_t v9;
  _OWORD *v10;
  _OWORD *v11;

  v6 = result;
  *(_QWORD *)(result + 8) = 0;
  v7 = *(unsigned int *)(result + 16);
  if ((_DWORD)v7)
  {
    v8 = *(_OWORD **)result;
    v9 = 24 * v7;
    do
    {
      *v8 = xmmword_24AA2AC20;
      v8 = (_OWORD *)((char *)v8 + 24);
      v9 -= 24;
    }
    while (v9);
  }
  while (a2 != a3)
  {
    if (*(_QWORD *)a2 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v11 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)v6, a2, &v11, a4);
      v10 = v11;
      *v11 = *(_OWORD *)a2;
      *((_DWORD *)v10 + 4) = *(_DWORD *)(a2 + 16);
      ++*(_DWORD *)(v6 + 8);
    }
    a2 += 24;
  }
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::CallImpl<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0>(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  v2 = *a2;
  *a2 = 0;
  v3 = a1[1];
  v4 = *(_QWORD *)(*a1 + 8);
  a1[1] = 0;
  v7 = v2;
  v8 = v3;
  llvm::ErrorList::join(&v8, &v7, &v6);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  if (v8)
    (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v4 + 24))(v4, &v6);
  result = v6;
  if (v6)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  return result;
}

_QWORD *llvm::detail::UniqueFunctionBase<void,llvm::Error>::MoveImpl<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0>(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;

  v2 = *a2;
  *a2 = 0;
  *result = v2;
  result[1] = 0;
  result[1] = a2[1];
  a2[1] = 0;
  return result;
}

uint64_t llvm::detail::UniqueFunctionBase<void,llvm::Error>::DestroyImpl<llvm::jitlink::JITLinkerBase::abandonAllocAndBailOut(std::unique_ptr<llvm::jitlink::JITLinkerBase>,llvm::Error)::$_0>(uint64_t *a1)
{
  uint64_t v2;
  uint64_t result;

  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  result = *a1;
  *a1 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

llvm::jitlink::BasicLayout *llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::BasicLayout *this, llvm::jitlink::LinkGraph *a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *i;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  unsigned __int8 *v12;
  unsigned __int8 *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  unsigned __int8 *v16;
  unsigned int v17;
  unsigned __int8 *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  __int128 v30;
  unsigned int v31;
  unint64_t v32;
  _BOOL4 v34;
  unsigned __int8 *v35;
  __int128 v36;
  __int128 v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  __int128 v41;
  __int128 v42;
  _QWORD *v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  _QWORD *v50;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  char *v59;
  char *v60;
  uint64_t v61;
  unint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  char *v73;
  uint64_t v74;
  unsigned int v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t v78;
  _QWORD *v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  _QWORD *v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t *v87;
  uint64_t v88;
  unsigned __int8 v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned __int8 v95;
  uint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v101;
  uint64_t v102;
  _BYTE v103[9];
  __int128 v104;
  _BYTE v105[31];
  __int128 v106;
  __int128 v107;
  __int128 v108;
  _BYTE v109[47];
  uint64_t v110;

  v110 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = (char *)this + 24;
  v3 = (char *)this + 8;
  *((_QWORD *)this + 2) = 0x400000000;
  if (*((_DWORD *)a2 + 48))
  {
    v4 = *((unsigned int *)a2 + 50);
    if ((_DWORD)v4)
    {
      v5 = 24 * v4;
      for (i = (_QWORD *)*((_QWORD *)a2 + 23); *i >= 0xFFFFFFFFFFFFFFFELL; i += 3)
      {
        v5 -= 24;
        if (!v5)
          return this;
      }
    }
    else
    {
      i = (_QWORD *)*((_QWORD *)a2 + 23);
    }
    v7 = *((_QWORD *)a2 + 23) + 24 * v4;
    if (i != (_QWORD *)v7)
    {
      while (1)
      {
        v8 = i[2];
        if ((_QWORD *)(*(_QWORD *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48)) != llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32)
          && *(_DWORD *)(v8 + 20) != 2)
        {
          break;
        }
        do
        {
LABEL_81:
          i += 3;
          if (i == (_QWORD *)v7)
            goto LABEL_84;
        }
        while (*i >= 0xFFFFFFFFFFFFFFFELL);
        if (i == (_QWORD *)v7)
        {
LABEL_84:
          v75 = *((_DWORD *)this + 4);
          if (v75)
          {
            v76 = *((_QWORD *)this + 1);
            v77 = v76 + 104 * v75;
            do
            {
              v78 = *(_QWORD *)(v76 + 56);
              v79 = *(_QWORD **)(v76 + 64);
              v80 = 126 - 2 * __clz((uint64_t)((uint64_t)v79 - v78) >> 3);
              if (v79 == (_QWORD *)v78)
                v81 = 0;
              else
                v81 = v80;
              std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(v78, v79, v81, 1);
              v82 = *(_QWORD *)(v76 + 80);
              v83 = *(_QWORD **)(v76 + 88);
              v84 = 126 - 2 * __clz((uint64_t)((uint64_t)v83 - v82) >> 3);
              if (v83 == (_QWORD *)v82)
                v85 = 0;
              else
                v85 = v84;
              std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(v82, v83, v85, 1);
              v86 = *(uint64_t **)(v76 + 56);
              v87 = *(uint64_t **)(v76 + 64);
              v88 = *(_QWORD *)(v76 + 16);
              if (v86 != v87)
              {
                v89 = *(_BYTE *)(v76 + 8);
                do
                {
                  v90 = *v86++;
                  v88 += *(_QWORD *)(v90 + 32)
                       + (((*(_QWORD *)(v90 + 8) >> 8) - v88) & ~(-1 << (*(_QWORD *)(v90 + 8) >> 3)));
                  *(_QWORD *)(v76 + 16) = v88;
                  v91 = __clz(1 << (*(_QWORD *)(v90 + 8) >> 3)) ^ 0x3F;
                  if (v89 <= v91)
                    v89 = v91;
                  *(_BYTE *)(v76 + 8) = v89;
                }
                while (v86 != v87);
              }
              v92 = *(uint64_t **)(v76 + 80);
              v93 = *(uint64_t **)(v76 + 88);
              v94 = v88;
              if (v92 != v93)
              {
                v95 = *(_BYTE *)(v76 + 8);
                v94 = v88;
                do
                {
                  v96 = *v92++;
                  v97 = *(_QWORD *)(v96 + 8);
                  v98 = (v97 >> 8) - v94;
                  LOBYTE(v97) = v97 >> 3;
                  v94 += *(_QWORD *)(v96 + 32) + (v98 & ~(-1 << v97));
                  v99 = __clz(1 << v97) ^ 0x3F;
                  if (v95 <= v99)
                    v95 = v99;
                  *(_BYTE *)(v76 + 8) = v95;
                }
                while (v92 != v93);
              }
              *(_QWORD *)(v76 + 24) = v94 - v88;
              v76 += 104;
            }
            while (v76 != v77);
          }
          return this;
        }
      }
      v9 = *(unsigned __int8 *)(v8 + 16) | (8 * (*(_DWORD *)(v8 + 20) & 0x1F));
      v10 = *((_QWORD *)this + 1);
      v11 = *((unsigned int *)this + 4);
      v12 = (unsigned __int8 *)(v10 + 104 * v11);
      if ((_DWORD)v11)
      {
        v13 = (unsigned __int8 *)*((_QWORD *)this + 1);
        do
        {
          v14 = v11 >> 1;
          v15 = &v13[104 * (v11 >> 1)];
          v17 = *v15;
          v16 = v15 + 104;
          v11 += ~(v11 >> 1);
          if (v17 < v9)
            v13 = v16;
          else
            v11 = v14;
        }
        while (v11);
        v18 = v12;
        if (v13 != v12)
        {
          v18 = v13;
          if (*v13 == v9)
          {
LABEL_38:
            v43 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
            v45 = *(_QWORD *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
            if ((_QWORD *)v45 == v43)
              goto LABEL_81;
            v46 = v43;
            v47 = v44;
            while (1)
            {
              v48 = *v46;
              if (*(_QWORD *)(*v46 + 24))
                break;
              v63 = (_QWORD *)*((_QWORD *)v13 + 11);
              v62 = *((_QWORD *)v13 + 12);
              if ((unint64_t)v63 >= v62)
              {
                v65 = *((_QWORD *)v13 + 10);
                v66 = ((uint64_t)v63 - v65) >> 3;
                if ((unint64_t)(v66 + 1) >> 61)
                  goto LABEL_104;
                v67 = v62 - v65;
                v68 = v67 >> 2;
                if (v67 >> 2 <= (unint64_t)(v66 + 1))
                  v68 = v66 + 1;
                if ((unint64_t)v67 >= 0x7FFFFFFFFFFFFFF8)
                  v69 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v69 = v68;
                if (v69)
                  v70 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(v13 + 96), v69);
                else
                  v70 = 0;
                v71 = &v70[8 * v66];
                *(_QWORD *)v71 = v48;
                v64 = v71 + 8;
                v73 = (char *)*((_QWORD *)v13 + 10);
                v72 = (char *)*((_QWORD *)v13 + 11);
                if (v72 != v73)
                {
                  do
                  {
                    v74 = *((_QWORD *)v72 - 1);
                    v72 -= 8;
                    *((_QWORD *)v71 - 1) = v74;
                    v71 -= 8;
                  }
                  while (v72 != v73);
                  v72 = (char *)*((_QWORD *)v13 + 10);
                }
                *((_QWORD *)v13 + 10) = v71;
                *((_QWORD *)v13 + 11) = v64;
                *((_QWORD *)v13 + 12) = &v70[8 * v69];
                if (v72)
                  operator delete(v72);
              }
              else
              {
                *v63 = v48;
                v64 = v63 + 1;
              }
              *((_QWORD *)v13 + 11) = v64;
LABEL_58:
              while (++v46 != v47)
              {
                if ((*v46 | 0x1000) != 0xFFFFFFFFFFFFF000)
                  goto LABEL_62;
              }
              v46 = v47;
LABEL_62:
              if (v46 == (_QWORD *)v45)
                goto LABEL_81;
            }
            v50 = (_QWORD *)*((_QWORD *)v13 + 8);
            v49 = *((_QWORD *)v13 + 9);
            if ((unint64_t)v50 >= v49)
            {
              v52 = *((_QWORD *)v13 + 7);
              v53 = ((uint64_t)v50 - v52) >> 3;
              if ((unint64_t)(v53 + 1) >> 61)
LABEL_104:
                abort();
              v54 = v49 - v52;
              v55 = v54 >> 2;
              if (v54 >> 2 <= (unint64_t)(v53 + 1))
                v55 = v53 + 1;
              if ((unint64_t)v54 >= 0x7FFFFFFFFFFFFFF8)
                v56 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v56 = v55;
              if (v56)
                v57 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<std::unique_ptr<llvm::orc::ObjectLinkingLayer::Plugin>>>((uint64_t)(v13 + 72), v56);
              else
                v57 = 0;
              v58 = &v57[8 * v53];
              *(_QWORD *)v58 = v48;
              v51 = v58 + 8;
              v60 = (char *)*((_QWORD *)v13 + 7);
              v59 = (char *)*((_QWORD *)v13 + 8);
              if (v59 != v60)
              {
                do
                {
                  v61 = *((_QWORD *)v59 - 1);
                  v59 -= 8;
                  *((_QWORD *)v58 - 1) = v61;
                  v58 -= 8;
                }
                while (v59 != v60);
                v59 = (char *)*((_QWORD *)v13 + 7);
              }
              *((_QWORD *)v13 + 7) = v58;
              *((_QWORD *)v13 + 8) = v51;
              *((_QWORD *)v13 + 9) = &v57[8 * v56];
              if (v59)
                operator delete(v59);
            }
            else
            {
              *v50 = v48;
              v51 = v50 + 1;
            }
            *((_QWORD *)v13 + 8) = v51;
            goto LABEL_58;
          }
        }
      }
      else
      {
        v18 = (unsigned __int8 *)*((_QWORD *)this + 1);
      }
      memset(&v109[7], 0, 40);
      v103[0] = v9;
      v103[8] = 0;
      v104 = *(_OWORD *)v109;
      *(_OWORD *)v105 = *(_OWORD *)&v109[16];
      *(_OWORD *)&v105[15] = *(_OWORD *)&v109[31];
      v106 = 0u;
      v107 = 0u;
      v108 = 0u;
      if (v12 == v18)
      {
        v39 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>>((uint64_t)v3, (unint64_t)v103);
        v40 = *((_QWORD *)this + 1) + 104 * *((unsigned int *)this + 4);
        *(_BYTE *)v40 = *(_BYTE *)v39;
        v41 = *(_OWORD *)(v39 + 24);
        v42 = *(_OWORD *)(v39 + 8);
        *(_OWORD *)(v40 + 40) = *(_OWORD *)(v39 + 40);
        *(_OWORD *)(v40 + 8) = v42;
        *(_OWORD *)(v40 + 24) = v41;
        *(_QWORD *)(v40 + 64) = 0;
        *(_QWORD *)(v40 + 72) = 0;
        *(_QWORD *)(v40 + 56) = 0;
        *(_OWORD *)(v40 + 56) = *(_OWORD *)(v39 + 56);
        *(_QWORD *)(v40 + 72) = *(_QWORD *)(v39 + 72);
        *(_QWORD *)(v39 + 56) = 0;
        *(_QWORD *)(v39 + 64) = 0;
        *(_QWORD *)(v39 + 72) = 0;
        *(_QWORD *)(v40 + 88) = 0;
        *(_QWORD *)(v40 + 96) = 0;
        *(_QWORD *)(v40 + 80) = 0;
        *(_OWORD *)(v40 + 80) = *(_OWORD *)(v39 + 80);
        *(_QWORD *)(v40 + 96) = *(_QWORD *)(v39 + 96);
        *(_QWORD *)(v39 + 80) = 0;
        *(_QWORD *)(v39 + 88) = 0;
        *(_QWORD *)(v39 + 96) = 0;
        LODWORD(v40) = *((_DWORD *)this + 4) + 1;
        *((_DWORD *)this + 4) = v40;
        v13 = (unsigned __int8 *)(*((_QWORD *)this + 1) + 104 * v40 - 104);
      }
      else
      {
        v19 = (uint64_t)&v18[-v10];
        v20 = llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>>((uint64_t)v3, (unint64_t)v103);
        v21 = *((_QWORD *)this + 1);
        v22 = v21 + 104 * *((unsigned int *)this + 4);
        v23 = *(_OWORD *)(v22 - 48);
        *(_OWORD *)(v22 + 40) = *(_OWORD *)(v22 - 64);
        v24 = *(_OWORD *)(v22 - 96);
        *(_OWORD *)(v22 + 24) = *(_OWORD *)(v22 - 80);
        *(_OWORD *)(v22 + 8) = v24;
        v102 = v19;
        v13 = (unsigned __int8 *)(v21 + v19);
        *(_BYTE *)v22 = *(_BYTE *)(v22 - 104);
        *(_OWORD *)(v22 + 56) = v23;
        *(_QWORD *)(v22 + 72) = *(_QWORD *)(v22 - 32);
        *(_QWORD *)(v22 - 48) = 0;
        *(_QWORD *)(v22 - 40) = 0;
        *(_QWORD *)(v22 + 88) = 0;
        *(_QWORD *)(v22 + 96) = 0;
        *(_OWORD *)(v22 + 80) = *(_OWORD *)(v22 - 24);
        *(_QWORD *)(v22 + 96) = *(_QWORD *)(v22 - 8);
        *(_QWORD *)(v22 - 32) = 0;
        *(_QWORD *)(v22 - 24) = 0;
        *(_QWORD *)(v22 - 16) = 0;
        *(_QWORD *)(v22 - 8) = 0;
        v25 = *((_QWORD *)this + 1);
        v26 = *((_DWORD *)this + 4);
        v27 = v25 + 104 * v26 - 104;
        if ((unsigned __int8 *)v27 != v13)
        {
          v101 = v21;
          v28 = v25 + 104 * v26 - 104;
          do
          {
            v29 = *(_BYTE *)(v28 - 104);
            v28 -= 104;
            *(_BYTE *)v27 = v29;
            v30 = *(_OWORD *)(v27 - 80);
            *(_OWORD *)(v27 + 8) = *(_OWORD *)(v27 - 96);
            *(_OWORD *)(v27 + 24) = v30;
            *(_OWORD *)(v27 + 40) = *(_OWORD *)(v27 - 64);
            std::vector<llvm::jitlink::Block *>::__move_assign(v27 + 56, (__n128 *)(v27 - 48));
            std::vector<llvm::jitlink::Block *>::__move_assign(v27 + 80, (__n128 *)(v27 - 24));
            v27 = v28;
          }
          while ((unsigned __int8 *)v28 != v13);
          v26 = *((_DWORD *)this + 4);
          v25 = *((_QWORD *)this + 1);
          v21 = v101;
        }
        v31 = v26 + 1;
        *((_DWORD *)this + 4) = v31;
        v32 = v25 + 104 * v31;
        v34 = v20 >= (unint64_t)v13 && v20 < v32;
        v35 = (unsigned __int8 *)(v20 + 104 * v34);
        *v13 = *v35;
        v36 = *(_OWORD *)(v35 + 8);
        v37 = *(_OWORD *)(v35 + 24);
        v38 = v21 + 8 * (v102 >> 3);
        *(_OWORD *)(v38 + 40) = *(_OWORD *)(v35 + 40);
        *(_OWORD *)(v38 + 24) = v37;
        *(_OWORD *)(v38 + 8) = v36;
        std::vector<llvm::jitlink::Block *>::__move_assign(v38 + 56, (__n128 *)(v35 + 56));
        std::vector<llvm::jitlink::Block *>::__move_assign(v38 + 80, (__n128 *)v35 + 5);
      }
      if (*((_QWORD *)&v107 + 1))
      {
        *(_QWORD *)&v108 = *((_QWORD *)&v107 + 1);
        operator delete(*((void **)&v107 + 1));
      }
      if ((_QWORD)v106)
      {
        *((_QWORD *)&v106 + 1) = v106;
        operator delete((void *)v106);
      }
      goto LABEL_38;
    }
  }
  return this;
}

void llvm::jitlink::BasicLayout::getContiguousPageBasedLayoutSizes(llvm::jitlink::BasicLayout *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  unsigned int v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13[2];
  uint64_t v14;

  v4 = *((_DWORD *)this + 4);
  if (v4)
  {
    v5 = 0;
    v6 = 0;
    v7 = 104 * v4;
    v8 = (_QWORD *)(*((_QWORD *)this + 1) + 16);
    while (a2 >> *((_BYTE *)v8 - 8))
    {
      v9 = (a2 - 1 + *v8 + v8[1]) / a2 * a2;
      v10 = *((unsigned __int8 *)v8 - 16);
      v11 = v10 >= 8;
      if (v10 >= 8)
        v12 = (a2 - 1 + *v8 + v8[1]) / a2 * a2;
      else
        v12 = 0;
      v6 += v12;
      if (v11)
        v9 = 0;
      v5 += v9;
      v8 += 13;
      v7 -= 104;
      if (!v7)
        goto LABEL_13;
    }
    getErrorErrorCat();
    v13[0] = 3;
    v13[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Segment alignment greater than page size", v13, &v14);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v14;
  }
  else
  {
    v6 = 0;
    v5 = 0;
LABEL_13:
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v5;
    *(_QWORD *)(a3 + 8) = v6;
  }
}

_DWORD *llvm::jitlink::BasicLayout::apply@<X0>(_DWORD *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t **v6;
  uint64_t **v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  const void *v13;
  size_t v14;
  uint64_t v15;
  _QWORD **v16;
  _QWORD **v17;
  uint64_t v18;
  _QWORD **v19;
  _QWORD *v20;
  uint64_t v21;

  v3 = this[4];
  if (v3)
  {
    v4 = (_QWORD *)*((_QWORD *)this + 1);
    v5 = &v4[13 * v3];
    do
    {
      v6 = (uint64_t **)v4[7];
      v7 = (uint64_t **)v4[8];
      if (v6 != v7)
      {
        v8 = v4[6];
        do
        {
          v9 = *v6++;
          v10 = v4[5];
          v11 = ((((unint64_t)v9[1] >> 8) - v4[4]) & ~(-1 << (v9[1] >> 3))) + v4[4];
          v4[4] = v11;
          v12 = ((((unint64_t)v9[1] >> 8) - v8) & ~(-1 << (v9[1] >> 3))) + v8;
          *v9 = v11;
          v13 = (const void *)v9[3];
          v14 = v9[4];
          v4[4] += v14;
          v4[6] = v12;
          this = memcpy((void *)(v10 + v12), v13, v14);
          v15 = v9[4];
          v9[3] = v4[5] + v4[6];
          v9[1] |= 4uLL;
          v8 = v4[6] + v15;
          v4[6] = v8;
        }
        while (v6 != v7);
      }
      v16 = (_QWORD **)v4[10];
      v17 = (_QWORD **)v4[11];
      if (v16 != v17)
      {
        v18 = v4[4];
        v19 = (_QWORD **)v4[10];
        do
        {
          v20 = *v19++;
          v21 = (((v20[1] >> 8) - v18) & ~(-1 << (v20[1] >> 3))) + v18;
          v4[4] = v21;
          *v20 = v21;
          v18 = v4[4] + v20[4];
          v4[4] = v18;
        }
        while (v19 != v17);
      }
      v4[8] = v4[7];
      v4[11] = v16;
      v4 += 13;
    }
    while (v4 != v5);
  }
  *a2 = 0;
  return this;
}

uint64_t llvm::jitlink::InProcessMemoryManager::allocate(int8x8_t *a1, int a2, llvm::jitlink::LinkGraph *a3, _QWORD *a4)
{
  uint8x8_t v5;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  const std::error_category *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t result;
  uint64_t v17;
  void *v18;
  char *v19;
  _QWORD *v20;
  _QWORD *v21;
  char *v22;
  char *v23;
  unsigned int v24;
  char *v25;
  int8x8_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  void *v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  const std::error_category *v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  void *v39;
  char v40;
  _QWORD *v41;
  char v42;
  void *v43;
  char v44;
  char *v45;
  uint64_t v46;
  char v47;
  void *v48;
  _QWORD *v49;
  unsigned int v50;
  uint64_t v51;
  char v52;
  void *v53;
  size_t v54;
  uint64_t v55;
  _QWORD v56[54];

  v56[52] = *MEMORY[0x24BDAC8D0];
  v5 = (uint8x8_t)vcnt_s8(a1[1]);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] == 1)
  {
    llvm::jitlink::BasicLayout::BasicLayout((llvm::jitlink::BasicLayout *)&v48, a3);
    llvm::jitlink::BasicLayout::getContiguousPageBasedLayoutSizes((llvm::jitlink::BasicLayout *)&v48, *(_QWORD *)&a1[1], (uint64_t)&v45);
    if ((v47 & 1) != 0)
    {
      v44 = -1;
      v43 = v45;
      v17 = a4[3];
      if ((v17 & 2) == 0)
        a4 = (_QWORD *)*a4;
      (*(void (**)(_QWORD *, void **))(v17 & 0xFFFFFFFFFFFFFFF8))(a4, &v43);
      v18 = v43;
      v43 = 0;
      if (!v18)
        return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v49);
    }
    else
    {
      v9 = v45;
      v8 = v46;
      v10 = (uint64_t)&v45[v46];
      LODWORD(v34) = 0;
      v35 = std::system_category();
      llvm::sys::Memory::allocateMappedMemory(v10, 0, 50331648, (uint64_t)&v34, (uint64_t)&v53);
      if ((_DWORD)v34)
      {
        v11 = v34;
        v12 = v35;
        v13 = (_QWORD *)operator new();
        *v13 = &off_251C12820;
        v13[1] = v11;
        v13[2] = v12;
        v42 = -1;
        v41 = v13;
        v29 = a4[3];
        if ((v29 & 2) == 0)
          a4 = (_QWORD *)*a4;
        (*(void (**)(_QWORD *, _QWORD **))(v29 & 0xFFFFFFFFFFFFFFF8))(a4, &v41);
        v18 = v41;
        v41 = 0;
        if (!v18)
          return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v49);
      }
      else
      {
        v19 = (char *)v53;
        bzero(v53, v54);
        if (v50)
        {
          v20 = v49;
          v21 = &v49[13 * v50];
          v22 = &v9[(_QWORD)v19];
          v23 = v19;
          do
          {
            v24 = *(unsigned __int8 *)v20;
            if (v24 >= 8)
              v25 = v22;
            else
              v25 = v23;
            v20[4] = v25;
            v26 = a1[1];
            v27 = v20[2] + v20[3] + *(_QWORD *)&v26 - 1;
            v20[5] = v25;
            if (v24 >= 8)
              v22 = &v25[v27 / *(_QWORD *)&v26 * *(_QWORD *)&v26];
            else
              v23 = &v25[v27 / *(_QWORD *)&v26 * *(_QWORD *)&v26];
            v20 += 13;
          }
          while (v20 != v21);
        }
        llvm::jitlink::BasicLayout::apply(&v48, &v53);
        if (v53)
        {
          v40 = -1;
          v39 = v53;
          v28 = a4[3];
          if ((v28 & 2) == 0)
            a4 = (_QWORD *)*a4;
          (*(void (**)(_QWORD *, void **))(v28 & 0xFFFFFFFFFFFFFFF8))(a4, &v39);
          v18 = v39;
          v39 = 0;
          if (!v18)
            return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v49);
        }
        else
        {
          v30 = operator new();
          v31 = v48;
          v53 = v48;
          v54 = (size_t)v56;
          v55 = 0x400000000;
          if (v50)
          {
            llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=((uint64_t)&v54, (uint64_t)&v49);
            v31 = v53;
            v32 = (_DWORD)v55 == 0;
          }
          else
          {
            v32 = 1;
          }
          *(_QWORD *)v30 = &off_251C15800;
          *(_QWORD *)(v30 + 8) = a1;
          *(_QWORD *)(v30 + 16) = a3;
          *(_QWORD *)(v30 + 24) = v31;
          *(_QWORD *)(v30 + 32) = v30 + 48;
          *(_QWORD *)(v30 + 40) = 0x400000000;
          if (!v32)
            llvm::SmallVectorImpl<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>>::operator=(v30 + 32, (uint64_t)&v54);
          *(_QWORD *)(v30 + 464) = v19;
          *(_QWORD *)(v30 + 472) = v9;
          *(_DWORD *)(v30 + 480) = 0;
          *(_QWORD *)(v30 + 488) = &v9[(_QWORD)v19];
          *(_QWORD *)(v30 + 496) = v8;
          *(_DWORD *)(v30 + 504) = 0;
          llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v54);
          v38 = 0;
          v37 = v30;
          v33 = a4[3];
          if ((v33 & 2) == 0)
            a4 = (_QWORD *)*a4;
          (*(void (**)(_QWORD *, uint64_t *))(v33 & 0xFFFFFFFFFFFFFFF8))(a4, &v37);
          v18 = (void *)v37;
          v37 = 0;
          if (!v18)
            return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v49);
        }
      }
    }
    (*(void (**)(void *))(*(_QWORD *)v18 + 8))(v18);
    return llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)&v49);
  }
  getErrorErrorCat();
  v53 = (void *)3;
  v54 = (size_t)&getErrorErrorCat(void)::ErrorErrorCat;
  llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Page size is not a power of 2", (uint64_t *)&v53, &v36);
  v52 = -1;
  v51 = v36;
  v36 = 0;
  v14 = a4[3];
  if ((v14 & 2) == 0)
    a4 = (_QWORD *)*a4;
  (*(void (**)(_QWORD *, uint64_t *))(v14 & 0xFFFFFFFFFFFFFFF8))(a4, &v51);
  v15 = v51;
  v51 = 0;
  if (v15)
    (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  result = v36;
  if (v36)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  return result;
}

void llvm::jitlink::InProcessMemoryManager::deallocate(uint64_t a1, __int128 ***a2, _QWORD *a3)
{
  uint64_t v5;
  std::mutex *v6;
  __int128 **v7;
  void **v8;
  void **v9;
  void **v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  __int128 *v14;
  __int128 v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  _QWORD *v25;
  unint64_t v26;
  char *v27;
  char *v28;
  void **v29;
  char *v30;
  __int128 v31;
  void **v32;
  void **v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  void *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  std::mutex *v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  __int128 **v48;
  char *v49;
  void **v50;
  void **v51;
  void **v52;
  _QWORD *v53;
  void **v54;

  v5 = a1;
  v6 = (std::mutex *)(a1 + 16);
  std::mutex::lock((std::mutex *)(a1 + 16));
  v7 = *a2;
  v48 = a2[1];
  if (*a2 == v48)
  {
    std::mutex::unlock(v6);
    v11 = 0;
    v8 = 0;
    v32 = 0;
  }
  else
  {
    v44 = v6;
    v45 = a3;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 0;
    v46 = v5;
    do
    {
      v14 = *v7;
      *v7 = (__int128 *)-1;
      if (v12 >= v13)
      {
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - (_QWORD)v11) >> 3) + 1;
        if (v16 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_76;
        v17 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v13 - (_QWORD)v11) >> 3);
        if (2 * v17 > v16)
          v16 = 2 * v17;
        if (v17 >= 0x555555555555555)
          v18 = 0xAAAAAAAAAAAAAAALL;
        else
          v18 = v16;
        if (v18)
        {
          if (v18 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_77;
          v19 = (char *)operator new(24 * v18);
        }
        else
        {
          v19 = 0;
        }
        v20 = *v14;
        v21 = &v19[8 * ((uint64_t)(v12 - (_QWORD)v11) >> 3)];
        *((_QWORD *)v21 + 2) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v21 = v20;
        if ((char *)v12 == v11)
        {
          v24 = &v19[8 * ((uint64_t)(v12 - (_QWORD)v11) >> 3)];
        }
        else
        {
          v22 = &v19[8 * ((uint64_t)(v12 - (_QWORD)v11) >> 3)];
          do
          {
            v23 = *(_OWORD *)(v12 - 24);
            v24 = v22 - 24;
            *((_DWORD *)v22 - 2) = *(_DWORD *)(v12 - 8);
            *(_OWORD *)(v22 - 24) = v23;
            v12 -= 24;
            v22 -= 24;
          }
          while ((char *)v12 != v11);
        }
        v49 = &v19[24 * v18];
        v12 = (unint64_t)(v21 + 24);
        if (v11)
          operator delete(v11);
        v11 = v24;
      }
      else
      {
        v49 = (char *)v13;
        v15 = *v14;
        *(_QWORD *)(v12 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v12 = v15;
        v12 += 24;
      }
      v25 = (_QWORD *)v14 + 3;
      if (*((_QWORD *)v14 + 3) != *((_QWORD *)v14 + 4))
      {
        if (v9 >= v10)
        {
          v26 = 0xAAAAAAAAAAAAAAABLL * (v9 - v8) + 1;
          if (v26 > 0xAAAAAAAAAAAAAAALL)
LABEL_76:
            abort();
          if (0x5555555555555556 * (v10 - v8) > v26)
            v26 = 0x5555555555555556 * (v10 - v8);
          if (0xAAAAAAAAAAAAAAABLL * (v10 - v8) >= 0x555555555555555)
            v26 = 0xAAAAAAAAAAAAAAALL;
          if (v26 > 0xAAAAAAAAAAAAAAALL)
LABEL_77:
            std::__throw_bad_array_new_length[abi:nn180100]();
          v47 = 3 * v26;
          v27 = (char *)operator new(24 * v26);
          v28 = &v27[8 * (v9 - v8)];
          *((_QWORD *)v28 + 1) = 0;
          *((_QWORD *)v28 + 2) = 0;
          *(_OWORD *)v28 = *(__int128 *)((char *)v14 + 24);
          *((_QWORD *)v28 + 2) = *((_QWORD *)v14 + 5);
          *v25 = 0;
          *((_QWORD *)v14 + 4) = 0;
          *((_QWORD *)v14 + 5) = 0;
          if (v9 == v8)
          {
            v30 = &v27[8 * (v9 - v8)];
          }
          else
          {
            v29 = v9;
            v30 = &v27[8 * (v9 - v8)];
            do
            {
              *((_QWORD *)v30 - 3) = 0;
              *((_QWORD *)v30 - 2) = 0;
              v30 -= 24;
              *((_QWORD *)v30 + 2) = 0;
              v31 = *(_OWORD *)(v29 - 3);
              v29 -= 3;
              *(_OWORD *)v30 = v31;
              *((_QWORD *)v30 + 2) = v29[2];
              *v29 = 0;
              v29[1] = 0;
              v29[2] = 0;
            }
            while (v29 != v8);
            do
            {
              v9 -= 3;
              v54 = v9;
              std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v54);
            }
            while (v9 != v8);
          }
          v10 = (void **)&v27[8 * v47];
          v9 = (void **)(v28 + 24);
          if (v8)
            operator delete(v8);
          v8 = (void **)v30;
          v5 = v46;
        }
        else
        {
          *v9 = 0;
          v9[1] = 0;
          v9[2] = 0;
          *(_OWORD *)v9 = *(__int128 *)((char *)v14 + 24);
          v9[2] = (void *)*((_QWORD *)v14 + 5);
          *v25 = 0;
          *((_QWORD *)v14 + 4) = 0;
          *((_QWORD *)v14 + 5) = 0;
          v9 += 3;
        }
      }
      v54 = (void **)v14 + 3;
      std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v54);
      *(_QWORD *)v14 = *(_QWORD *)(v5 + 80);
      *(_QWORD *)(v5 + 80) = v14;
      ++v7;
      v13 = (unint64_t)v49;
    }
    while (v7 != v48);
    std::mutex::unlock(v44);
    if (v8 == v9)
    {
      v32 = 0;
    }
    else
    {
      v32 = 0;
      v33 = v9;
      do
      {
        v35 = (uint64_t)*(v33 - 3);
        v34 = (uint64_t)*(v33 - 2);
        v33 -= 3;
        while (v35 != v34)
        {
          llvm::orc::shared::WrapperFunctionCall::runWithSPSRetErrorMerged((llvm::orc::shared::WrapperFunctionCall *)(v34 - 56), (uint64_t *)&v52);
          v36 = (uint64_t)v52;
          if (v52)
          {
            v52 = 0;
            v53 = (_QWORD *)v36;
            v54 = v32;
            llvm::ErrorList::join((uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v51);
            if (v53)
              (*(void (**)(_QWORD *))(*v53 + 8))(v53);
            if (v54)
              (*((void (**)(void **))*v54 + 1))(v54);
            v32 = v51;
            if (v52)
              (*((void (**)(void **))*v52 + 1))(v52);
          }
          v37 = (uint64_t)*(v9 - 2);
          v38 = *(void **)(v37 - 48);
          if (v38 != (void *)(v37 - 24))
            free(v38);
          v34 = v37 - 56;
          *(v9 - 2) = (void *)(v37 - 56);
          v35 = (uint64_t)*(v9 - 3);
        }
        v12 -= 24;
        v40 = llvm::sys::Memory::releaseMappedMemory(v12);
        if ((_DWORD)v40)
        {
          v41 = v39;
          v42 = (_QWORD *)operator new();
          *v42 = &off_251C12820;
          v42[1] = v40;
          v42[2] = v41;
          v53 = v42;
          v54 = v32;
          llvm::ErrorList::join((uint64_t *)&v54, (uint64_t *)&v53, (uint64_t *)&v52);
          if (v53)
            (*(void (**)(_QWORD *))(*v53 + 8))(v53);
          if (v54)
            (*((void (**)(void **))*v54 + 1))(v54);
          v32 = v52;
        }
        v54 = v33;
        std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v54);
        v9 = v33;
      }
      while (v8 != v33);
    }
    a3 = v45;
  }
  v50 = v32;
  v43 = a3[3];
  if ((v43 & 2) == 0)
    a3 = (_QWORD *)*a3;
  (*(void (**)(_QWORD *, void ***))(v43 & 0xFFFFFFFFFFFFFFF8))(a3, &v50);
  if (v50)
    (*((void (**)(void **))*v50 + 1))(v50);
  if (v8)
    operator delete(v8);
  if (v11)
    operator delete(v11);
}

void llvm::orc::shared::WrapperFunctionCall::runWithSPSRetErrorMerged(llvm::orc::shared::WrapperFunctionCall *this@<X0>, uint64_t *a2@<X8>)
{
  void *__p[2];
  uint64_t v4;
  _BYTE v5[8];
  __int128 v6;
  uint64_t v7;
  uint64_t v8[2];

  v5[0] = 0;
  v7 = 0;
  v6 = 0uLL;
  llvm::orc::shared::WrapperFunctionCall::runWithSPSRet<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError>((uint64_t)this, (uint64_t)v5, a2);
  if (!*a2)
  {
    *(_OWORD *)__p = v6;
    v4 = v7;
    v6 = 0uLL;
    v7 = 0;
    if (v5[0])
    {
      getErrorErrorCat();
      v8[0] = 3;
      v8[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,std::string,std::error_code>((llvm::formatv_object_base *)__p, v8, a2);
    }
    else
    {
      *a2 = 0;
    }
    if (SHIBYTE(v4) < 0)
      operator delete(__p[0]);
  }
  if (SHIBYTE(v7) < 0)
    operator delete((void *)v6);
}

void llvm::jitlink::InProcessMemoryManager::~InProcessMemoryManager(llvm::jitlink::InProcessMemoryManager *this)
{
  *(_QWORD *)this = &off_251C157D0;
  *((_QWORD *)this + 10) = 0;
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 88);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
}

{
  *(_QWORD *)this = &off_251C157D0;
  *((_QWORD *)this + 10) = 0;
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 88);
  std::mutex::~mutex((std::mutex *)((char *)this + 16));
  JUMPOUT(0x24BD1B3A4);
}

void std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](void ***a1)
{
  void **v2;

  v2 = *a1;
  if (*v2)
  {
    std::vector<llvm::orc::shared::WrapperFunctionCall>::__clear[abi:nn180100]((char **)v2);
    operator delete(**a1);
  }
}

void std::vector<llvm::orc::shared::WrapperFunctionCall>::__clear[abi:nn180100](char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;
  char *v6;

  v3 = *a1;
  v2 = a1[1];
  if (v2 != *a1)
  {
    v4 = v2 - 24;
    do
    {
      v5 = (char *)*((_QWORD *)v4 - 3);
      if (v4 != v5)
        free(v5);
      v6 = v4 - 32;
      v4 -= 56;
    }
    while (v6 != v3);
  }
  a1[1] = v3;
}

void llvm::orc::shared::WrapperFunctionCall::runWithSPSRet<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::formatv_object_base *v5;
  unint64_t v6;
  llvm::formatv_object_base *v7;
  llvm::formatv_object_base *v8;
  unint64_t v9;
  llvm::formatv_object_base *v10[2];
  uint64_t v11;
  _UNKNOWN **v12;
  llvm::formatv_object_base *v13;
  unint64_t v14;

  v5 = (llvm::formatv_object_base *)(*(uint64_t (**)(_QWORD, _QWORD))a1)(*(_QWORD *)(a1 + 8), *(_QWORD *)(a1 + 16));
  v7 = v5;
  v13 = v5;
  v14 = v6;
  if (v6)
  {
    v8 = (llvm::formatv_object_base *)&v13;
    if (v6 > 8)
      v8 = v5;
  }
  else
  {
    v10[0] = v5;
    if (v5)
    {
      getErrorErrorCat();
      v11 = 3;
      v12 = &getErrorErrorCat(void)::ErrorErrorCat;
      llvm::make_error<llvm::StringError,char const*&,std::error_code>(v10, &v11, a3);
      v9 = 0;
      goto LABEL_10;
    }
    v8 = (llvm::formatv_object_base *)&v13;
  }
  v11 = (uint64_t)v8;
  v12 = (_UNKNOWN **)v6;
  if (llvm::orc::shared::SPSSerializationTraits<llvm::orc::shared::SPSError,llvm::orc::shared::detail::SPSSerializableError,void>::deserialize(&v11, a2))
  {
    *a3 = 0;
  }
  else
  {
    getErrorErrorCat();
    v10[0] = (llvm::formatv_object_base *)3;
    v10[1] = (llvm::formatv_object_base *)&getErrorErrorCat(void)::ErrorErrorCat;
    llvm::make_error<llvm::StringError,char const(&)[51],std::error_code>((llvm::formatv_object_base *)"Could not deserialize result from serialized wrapper function call", (uint64_t *)v10, a3);
  }
  v7 = v13;
  v9 = v14;
  if (v14 > 8)
    goto LABEL_12;
LABEL_10:
  if (!v9 && v7)
LABEL_12:
    free(v7);
}

unint64_t llvm::SmallVectorTemplateCommon<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,void>::reserveForParamAndGetAddressImpl<llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>>(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 104 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::grow(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorTemplateBase<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,false>::grow(a1, v5);
    }
  }
  return a2;
}

unint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(unint64_t result, _QWORD *a2, uint64_t a3, char a4)
{
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  _QWORD *v17;
  unsigned int v18;
  BOOL v19;
  uint64_t j;
  _QWORD *v21;
  unsigned int v22;
  BOOL v23;
  _QWORD *v24;
  unint64_t v25;
  _QWORD *k;
  _QWORD *v27;
  unsigned int v28;
  BOOL v29;
  _QWORD *v30;
  unsigned int v31;
  _QWORD *v32;
  unint64_t v33;
  _QWORD *v34;
  unsigned int v35;
  unsigned int v36;
  BOOL v37;
  _QWORD *v38;
  unsigned int v39;
  BOOL v40;
  BOOL v41;
  _QWORD *v42;
  unsigned int v43;
  BOOL v44;
  _QWORD *v45;
  unsigned int v46;
  BOOL v47;
  _QWORD *v48;
  unsigned int v49;
  BOOL v50;
  _QWORD **i;
  BOOL v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  _QWORD *v59;
  unsigned int v60;
  BOOL v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  unsigned int v65;
  unsigned int v66;
  BOOL v67;
  _QWORD *v68;
  BOOL v70;
  uint64_t v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  unsigned int v76;
  unsigned int v77;
  BOOL v78;
  _QWORD *v79;
  uint64_t v80;
  _QWORD *v81;
  unsigned int v82;
  unsigned int v83;
  BOOL v84;
  int64_t v85;
  int64_t v86;
  int64_t v87;
  uint64_t v88;
  unint64_t **v89;
  unint64_t *v90;
  unint64_t *v91;
  unsigned int v92;
  BOOL v93;
  unint64_t *v94;
  unint64_t *v95;
  unsigned int v96;
  unsigned int v97;
  BOOL v98;
  unint64_t **v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t *v103;
  unsigned int v104;
  unsigned int v105;
  BOOL v106;
  unint64_t *v107;
  unsigned int v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t *v117;
  unint64_t *v118;
  unsigned int v119;
  BOOL v120;
  uint64_t v121;
  unint64_t v122;
  unint64_t v123;
  _QWORD *v124;
  _QWORD *v125;
  unsigned int v126;
  unsigned int v127;
  BOOL v128;
  unint64_t v129;
  _QWORD *v130;
  unsigned int v131;
  unsigned int v132;
  BOOL v133;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  unsigned int v138;
  unsigned int v139;
  BOOL v140;
  _QWORD *v141;
  _QWORD *v142;
  unsigned int v143;
  unsigned int v144;
  BOOL v145;

  v7 = (_QWORD *)result;
LABEL_2:
  v8 = a2 - 1;
  v9 = (unint64_t)v7;
  while (2)
  {
    v7 = (_QWORD *)v9;
    v10 = (uint64_t)a2 - v9;
    v11 = (uint64_t)((uint64_t)a2 - v9) >> 3;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v63 = (_QWORD *)*(a2 - 1);
        v64 = *(_QWORD **)v9;
        v65 = *(_DWORD *)(v63[2] + 24);
        v66 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 16) + 24);
        v67 = v65 >= v66;
        if (v65 == v66)
        {
          v67 = *v63 >= *v64;
          if (*v63 == *v64)
            v67 = v63[4] >= v64[4];
        }
        if (!v67)
        {
          *(_QWORD *)v9 = v63;
          *(a2 - 1) = v64;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(v9, v9 + 8, (uint64_t)(a2 - 1));
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(v9, v9 + 8, v9 + 16, (uint64_t)(a2 - 1));
      case 5uLL:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,0>(v9, v9 + 8, v9 + 16, v9 + 24, (uint64_t)(a2 - 1));
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if ((_QWORD *)v9 == a2)
              return result;
            v85 = (v11 - 2) >> 1;
            v86 = v85;
            do
            {
              v87 = v86;
              if (v85 >= v86)
              {
                v88 = (2 * v86) | 1;
                v89 = (unint64_t **)(v9 + 8 * v88);
                if (2 * v87 + 2 < (uint64_t)v11)
                {
                  v90 = v89[1];
                  v91 = *v89;
                  result = *(unsigned int *)((*v89)[2] + 24);
                  v92 = *(_DWORD *)(v90[2] + 24);
                  v93 = result >= v92;
                  if ((_DWORD)result == v92)
                  {
                    result = *v91;
                    v93 = *v91 >= *v90;
                    if (*v91 == *v90)
                      v93 = v91[4] >= v90[4];
                  }
                  if (!v93)
                  {
                    ++v89;
                    v88 = 2 * v87 + 2;
                  }
                }
                v94 = *(unint64_t **)(v9 + 8 * v87);
                v95 = *v89;
                v96 = *(_DWORD *)((*v89)[2] + 24);
                v97 = *(_DWORD *)(v94[2] + 24);
                v98 = v96 >= v97;
                if (v96 == v97)
                {
                  v98 = *v95 >= *v94;
                  if (*v95 == *v94)
                    v98 = v95[4] >= v94[4];
                }
                if (v98)
                {
                  *(_QWORD *)(v9 + 8 * v87) = v95;
                  while (1)
                  {
                    if (v85 < v88)
                      goto LABEL_169;
                    v99 = v89;
                    v100 = 2 * v88;
                    v88 = (2 * v88) | 1;
                    v89 = (unint64_t **)(v9 + 8 * v88);
                    v101 = v100 + 2;
                    if (v101 < (uint64_t)v11)
                    {
                      v102 = v89[1];
                      v103 = *v89;
                      v104 = *(_DWORD *)((*v89)[2] + 24);
                      v105 = *(_DWORD *)(v102[2] + 24);
                      v106 = v104 >= v105;
                      if (v104 == v105)
                      {
                        v106 = *v103 >= *v102;
                        if (*v103 == *v102)
                          v106 = v103[4] >= v102[4];
                      }
                      if (!v106)
                      {
                        ++v89;
                        v88 = v101;
                      }
                    }
                    v107 = *v89;
                    v108 = *(_DWORD *)((*v89)[2] + 24);
                    result = *(unsigned int *)(v94[2] + 24);
                    v109 = v108 >= result;
                    if (v108 == (_DWORD)result)
                    {
                      result = *v94;
                      v109 = *v107 >= *v94;
                      if (*v107 == *v94)
                      {
                        result = v94[4];
                        v109 = v107[4] >= result;
                      }
                    }
                    if (!v109)
                      break;
                    *v99 = v107;
                  }
                  v89 = v99;
LABEL_169:
                  *v89 = v94;
                }
              }
              v86 = v87 - 1;
            }
            while (v87);
            v110 = (unint64_t)v10 >> 3;
            while (1)
            {
              v111 = 0;
              v112 = *(_QWORD **)v9;
              v113 = (_QWORD *)v9;
              do
              {
                v114 = v113;
                v113 += v111 + 1;
                v115 = 2 * v111;
                v111 = (2 * v111) | 1;
                v116 = v115 + 2;
                if (v116 < v110)
                {
                  v117 = (unint64_t *)v113[1];
                  v118 = (unint64_t *)*v113;
                  result = *(unsigned int *)(*(_QWORD *)(*v113 + 16) + 24);
                  v119 = *(_DWORD *)(v117[2] + 24);
                  v120 = result >= v119;
                  if ((_DWORD)result == v119)
                  {
                    result = *v118;
                    v120 = *v118 >= *v117;
                    if (*v118 == *v117)
                      v120 = v118[4] >= v117[4];
                  }
                  if (!v120)
                  {
                    ++v113;
                    v111 = v116;
                  }
                }
                *v114 = *v113;
              }
              while (v111 <= (uint64_t)((unint64_t)(v110 - 2) >> 1));
              if (v113 != --a2)
              {
                *v113 = *a2;
                *a2 = v112;
                v121 = (uint64_t)v113 - v9 + 8;
                if (v121 < 9)
                  goto LABEL_194;
                v122 = ((unint64_t)v121 >> 3) - 2;
                v123 = v122 >> 1;
                v124 = (_QWORD *)(v9 + 8 * (v122 >> 1));
                v125 = (_QWORD *)*v124;
                v112 = (_QWORD *)*v113;
                v126 = *(_DWORD *)(*(_QWORD *)(*v124 + 16) + 24);
                v127 = *(_DWORD *)(*(_QWORD *)(*v113 + 16) + 24);
                v128 = v126 >= v127;
                if (v126 == v127)
                {
                  v128 = *v125 >= *v112;
                  if (*v125 == *v112)
                    v128 = v125[4] >= v112[4];
                }
                if (v128)
                  goto LABEL_194;
                *v113 = v125;
                if (v122 >= 2)
                {
                  while (1)
                  {
                    v129 = v123 - 1;
                    v123 = (v123 - 1) >> 1;
                    v113 = (_QWORD *)(v9 + 8 * v123);
                    v130 = (_QWORD *)*v113;
                    v131 = *(_DWORD *)(*(_QWORD *)(*v113 + 16) + 24);
                    v132 = *(_DWORD *)(v112[2] + 24);
                    v133 = v131 >= v132;
                    if (v131 == v132)
                    {
                      v133 = *v130 >= *v112;
                      if (*v130 == *v112)
                        v133 = v130[4] >= v112[4];
                    }
                    if (v133)
                      break;
                    *v124 = v130;
                    v124 = (_QWORD *)(v9 + 8 * v123);
                    if (v129 <= 1)
                      goto LABEL_193;
                  }
                }
                v113 = v124;
              }
LABEL_193:
              *v113 = v112;
LABEL_194:
              if (v110-- <= 2)
                return result;
            }
          }
          v12 = v11 >> 1;
          v13 = (_QWORD *)(v9 + 8 * (v11 >> 1));
          if ((unint64_t)v10 < 0x401)
          {
            result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)&v7[v11 >> 1], (uint64_t)v7, (uint64_t)(a2 - 1));
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)v7, (uint64_t)&v7[v11 >> 1], (uint64_t)(a2 - 1));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)(v7 + 1), (uint64_t)(v13 - 1), (uint64_t)(a2 - 2));
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)(v7 + 2), (uint64_t)&v7[v12 + 1], (uint64_t)(a2 - 3));
            result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)(v13 - 1), (uint64_t)v13, (uint64_t)&v7[v12 + 1]);
            v14 = (_QWORD *)*v7;
            *v7 = *v13;
            *v13 = v14;
          }
          --a3;
          v15 = (_QWORD *)*v7;
          if ((a4 & 1) == 0)
          {
            v17 = (_QWORD *)*(v7 - 1);
            v16 = *(_DWORD *)(v17[2] + 24);
            v18 = *(_DWORD *)(v15[2] + 24);
            v19 = v16 >= v18;
            if (v16 == v18)
            {
              v19 = *v17 >= *v15;
              if (*v17 == *v15)
                v19 = v17[4] >= v15[4];
            }
            else
            {
              v16 = *(_DWORD *)(v15[2] + 24);
            }
            if (!v19)
              goto LABEL_16;
            v42 = (_QWORD *)*v8;
            v43 = *(_DWORD *)(*(_QWORD *)(*v8 + 16) + 24);
            v44 = v18 >= v43;
            if (v18 == v43)
            {
              v44 = *v15 >= *v42;
              if (*v15 == *v42)
                v44 = v15[4] >= v42[4];
            }
            v9 = (unint64_t)(v7 + 1);
            if (v44)
            {
              while (v9 < (unint64_t)a2)
              {
                v48 = *(_QWORD **)v9;
                v49 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 16) + 24);
                v50 = v18 >= v49;
                if (v18 == v49)
                {
                  v50 = *v15 >= *v48;
                  if (*v15 == *v48)
                    v50 = v15[4] >= v48[4];
                }
                if (!v50)
                  break;
                v9 += 8;
              }
            }
            else
            {
              while (1)
              {
                v45 = *(_QWORD **)v9;
                v46 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 16) + 24);
                v47 = v18 >= v46;
                if (v18 == v46)
                {
                  v47 = *v15 >= *v45;
                  if (*v15 == *v45)
                    v47 = v15[4] >= v45[4];
                }
                if (!v47)
                  break;
                v9 += 8;
              }
            }
            i = (_QWORD **)a2;
            if (v9 < (unint64_t)a2)
            {
              for (i = (_QWORD **)(a2 - 1); ; --i)
              {
                v52 = v18 >= v43;
                if (v18 == v43)
                {
                  v52 = *v15 >= *v42;
                  if (*v15 == *v42)
                    v52 = v15[4] >= v42[4];
                }
                if (v52)
                  break;
                v53 = *(i - 1);
                v42 = v53;
                v43 = *(_DWORD *)(v53[2] + 24);
              }
            }
            if (v9 < (unint64_t)i)
            {
              v54 = *(_QWORD **)v9;
              v55 = *i;
              do
              {
                *(_QWORD *)v9 = v55;
                v9 += 8;
                *i = v54;
                v56 = *(_DWORD *)(v15[2] + 24);
                while (1)
                {
                  v54 = *(_QWORD **)v9;
                  v57 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v9 + 16) + 24);
                  v58 = v56 >= v57;
                  if (v56 == v57)
                  {
                    v58 = *v15 >= *v54;
                    if (*v15 == *v54)
                      v58 = v15[4] >= v54[4];
                  }
                  if (!v58)
                    break;
                  v9 += 8;
                }
                do
                {
                  v59 = *--i;
                  v55 = v59;
                  v60 = *(_DWORD *)(v59[2] + 24);
                  v61 = v56 >= v60;
                  if (v56 == v60)
                  {
                    v61 = *v15 >= *v55;
                    if (*v15 == *v55)
                      v61 = v15[4] >= v55[4];
                  }
                }
                while (!v61);
              }
              while (v9 < (unint64_t)i);
            }
            v62 = (_QWORD *)(v9 - 8);
            if ((_QWORD *)(v9 - 8) != v7)
              *v7 = *v62;
            a4 = 0;
            *v62 = v15;
            continue;
          }
          v16 = *(_DWORD *)(v15[2] + 24);
LABEL_16:
          for (j = 0; ; ++j)
          {
            v21 = (_QWORD *)v7[j + 1];
            v22 = *(_DWORD *)(v21[2] + 24);
            v23 = v22 >= v16;
            if (v22 == v16)
            {
              v23 = *v21 >= *v15;
              if (*v21 == *v15)
                v23 = v21[4] >= v15[4];
            }
            if (v23)
              break;
          }
          v24 = &v7[j];
          v25 = (unint64_t)&v7[j + 1];
          k = a2 - 1;
          if (j * 8)
          {
            while (1)
            {
              v27 = (_QWORD *)*k;
              v28 = *(_DWORD *)(*(_QWORD *)(*k + 16) + 24);
              v29 = v28 >= v16;
              if (v28 == v16)
              {
                v29 = *v27 >= *v15;
                if (*v27 == *v15)
                  v29 = v27[4] >= v15[4];
              }
              if (!v29)
                break;
              --k;
            }
          }
          else
          {
            k = a2;
            if (v25 < (unint64_t)a2)
            {
              for (k = a2 - 1; ; --k)
              {
                v30 = (_QWORD *)*k;
                v31 = *(_DWORD *)(*(_QWORD *)(*k + 16) + 24);
                if (v31 == v16)
                {
                  if (*v30 == *v15)
                  {
                    if (v25 >= (unint64_t)k || v30[4] < v15[4])
                      break;
                  }
                  else if (v25 >= (unint64_t)k || *v30 < *v15)
                  {
                    break;
                  }
                }
                else if (v25 >= (unint64_t)k || v31 < v16)
                {
                  break;
                }
              }
            }
          }
          if (v25 < (unint64_t)k)
          {
            v32 = (_QWORD *)*k;
            v33 = v25;
            v34 = k;
            do
            {
              *(_QWORD *)v33 = v32;
              v33 += 8;
              *v34 = v21;
              v35 = *(_DWORD *)(v15[2] + 24);
              while (1)
              {
                v21 = *(_QWORD **)v33;
                v36 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v33 + 16) + 24);
                v37 = v36 >= v35;
                if (v36 == v35)
                {
                  v37 = *v21 >= *v15;
                  if (*v21 == *v15)
                    v37 = v21[4] >= v15[4];
                }
                if (v37)
                  break;
                v33 += 8;
              }
              do
              {
                v38 = (_QWORD *)*--v34;
                v32 = v38;
                v39 = *(_DWORD *)(v38[2] + 24);
                v40 = v39 >= v35;
                if (v39 == v35)
                {
                  v40 = *v32 >= *v15;
                  if (*v32 == *v15)
                    v40 = v32[4] >= v15[4];
                }
              }
              while (v40);
            }
            while (v33 < (unint64_t)v34);
            v24 = (_QWORD *)(v33 - 8);
          }
          if (v24 != v7)
            *v7 = *v24;
          *v24 = v15;
          if (v25 < (unint64_t)k)
          {
LABEL_61:
            result = std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,false>(v7, v24, a3, a4 & 1);
            a4 = 0;
            v9 = (unint64_t)(v24 + 1);
            continue;
          }
          v41 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)v7, (uint64_t)v24);
          v9 = (unint64_t)(v24 + 1);
          result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>((uint64_t)(v24 + 1), (uint64_t)a2);
          if (!(_DWORD)result)
          {
            if (v41)
              continue;
            goto LABEL_61;
          }
          a2 = v24;
          if (v41)
            return result;
          goto LABEL_2;
        }
        v68 = (_QWORD *)(v9 + 8);
        v70 = (_QWORD *)v9 == a2 || v68 == a2;
        if ((a4 & 1) == 0)
        {
          if (!v70)
          {
            do
            {
              v135 = v7;
              v7 = v68;
              v137 = (_QWORD *)*v135;
              v136 = (_QWORD *)v135[1];
              v138 = *(_DWORD *)(v136[2] + 24);
              v139 = *(_DWORD *)(*(_QWORD *)(*v135 + 16) + 24);
              v140 = v138 >= v139;
              if (v138 == v139)
              {
                v140 = *v136 >= *v137;
                if (*v136 == *v137)
                  v140 = v136[4] >= v137[4];
              }
              if (!v140)
              {
                do
                {
                  v141 = v135;
                  v142 = (_QWORD *)*--v135;
                  v135[2] = v137;
                  v137 = v142;
                  v143 = *(_DWORD *)(v136[2] + 24);
                  v144 = *(_DWORD *)(v142[2] + 24);
                  v145 = v143 >= v144;
                  if (v143 == v144)
                  {
                    v145 = *v136 >= *v137;
                    if (*v136 == *v137)
                      v145 = v136[4] >= v137[4];
                  }
                }
                while (!v145);
                *v141 = v136;
              }
              v68 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (v70)
          return result;
        v71 = 0;
        v72 = (_QWORD *)v9;
        do
        {
          v73 = v72;
          v72 = v68;
          v75 = (_QWORD *)*v73;
          v74 = (_QWORD *)v73[1];
          v76 = *(_DWORD *)(v74[2] + 24);
          v77 = *(_DWORD *)(*(_QWORD *)(*v73 + 16) + 24);
          v78 = v76 >= v77;
          if (v76 == v77)
          {
            v78 = *v74 >= *v75;
            if (*v74 == *v75)
              v78 = v74[4] >= v75[4];
          }
          if (v78)
            goto LABEL_139;
          v73[1] = v75;
          v79 = (_QWORD *)v9;
          if (v73 == (_QWORD *)v9)
            goto LABEL_138;
          v80 = v71;
          while (1)
          {
            v81 = *(_QWORD **)(v9 + v80 - 8);
            v82 = *(_DWORD *)(v74[2] + 24);
            v83 = *(_DWORD *)(v81[2] + 24);
            v84 = v82 >= v83;
            if (v82 == v83)
            {
              v84 = *v74 >= *v81;
              if (*v74 == *v81)
              {
                if (v74[4] >= v81[4])
                {
                  v79 = (_QWORD *)(v9 + v80);
                  goto LABEL_138;
                }
                goto LABEL_135;
              }
            }
            if (v84)
              break;
LABEL_135:
            --v73;
            *(_QWORD *)(v9 + v80) = v81;
            v80 -= 8;
            if (!v80)
            {
              v79 = (_QWORD *)v9;
              goto LABEL_138;
            }
          }
          v79 = v73;
LABEL_138:
          *v79 = v74;
LABEL_139:
          v68 = v72 + 1;
          v71 += 8;
        }
        while (v72 + 1 != a2);
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,0>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  _QWORD *v11;
  _QWORD *v12;
  unsigned int v13;
  unsigned int v14;
  BOOL v15;
  _QWORD *v16;
  _QWORD *v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  _QWORD *v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int v28;
  unsigned int v29;
  BOOL v30;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(a1, a2, a3, a4);
  v11 = *(_QWORD **)a5;
  v12 = *(_QWORD **)a4;
  v13 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a5 + 16) + 24);
  v14 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 16) + 24);
  v15 = v13 >= v14;
  if (v13 == v14)
  {
    v15 = *v11 >= *v12;
    if (*v11 == *v12)
      v15 = v11[4] >= v12[4];
  }
  if (!v15)
  {
    *(_QWORD *)a4 = v11;
    *(_QWORD *)a5 = v12;
    v16 = *(_QWORD **)a4;
    v17 = *(_QWORD **)a3;
    v18 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 16) + 24);
    v19 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 24);
    v20 = v18 >= v19;
    if (v18 == v19)
    {
      v20 = *v16 >= *v17;
      if (*v16 == *v17)
        v20 = v16[4] >= v17[4];
    }
    if (!v20)
    {
      *(_QWORD *)a3 = v16;
      *(_QWORD *)a4 = v17;
      v21 = *(_QWORD **)a3;
      v22 = *(_QWORD **)a2;
      v23 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 24);
      v24 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 24);
      v25 = v23 >= v24;
      if (v23 == v24)
      {
        v25 = *v21 >= *v22;
        if (*v21 == *v22)
          v25 = v21[4] >= v22[4];
      }
      if (!v25)
      {
        *(_QWORD *)a2 = v21;
        *(_QWORD *)a3 = v22;
        v26 = *(_QWORD **)a2;
        v27 = *(_QWORD **)a1;
        v28 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 24);
        v29 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 24);
        v30 = v28 >= v29;
        if (v28 == v29)
        {
          v30 = *v26 >= *v27;
          if (*v26 == *v27)
            v30 = v26[4] >= v27[4];
        }
        if (!v30)
        {
          *(_QWORD *)a1 = v26;
          *(_QWORD *)a2 = v27;
        }
      }
    }
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(uint64_t result, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unsigned int v5;
  unsigned int v6;
  BOOL v7;
  _QWORD *v8;
  unsigned int v9;
  BOOL v10;
  _QWORD *v11;
  unsigned int v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  _QWORD *v19;
  unsigned int v20;
  unsigned int v21;
  BOOL v22;

  v3 = *(_QWORD **)a2;
  v4 = *(_QWORD **)result;
  v5 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 24);
  v6 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 16) + 24);
  v7 = v5 >= v6;
  if (v5 == v6)
  {
    v7 = *v3 >= *v4;
    if (*v3 == *v4)
      v7 = v3[4] >= v4[4];
  }
  if (v7)
  {
    v11 = *(_QWORD **)a3;
    v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 24);
    v13 = v12 >= v5;
    if (v12 == v5)
    {
      v13 = *v11 >= *v3;
      if (*v11 == *v3)
        v13 = v11[4] >= v3[4];
    }
    if (!v13)
    {
      *(_QWORD *)a2 = v11;
      *(_QWORD *)a3 = v3;
      v14 = *(_QWORD **)a2;
      v15 = *(_QWORD **)result;
      v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 24);
      v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)result + 16) + 24);
      v18 = v16 >= v17;
      if (v16 == v17)
      {
        v18 = *v14 >= *v15;
        if (*v14 == *v15)
          v18 = v14[4] >= v15[4];
      }
      if (!v18)
      {
        *(_QWORD *)result = v14;
        *(_QWORD *)a2 = v15;
      }
    }
  }
  else
  {
    v8 = *(_QWORD **)a3;
    v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 24);
    v10 = v9 >= v5;
    if (v9 == v5)
    {
      v10 = *v8 >= *v3;
      if (*v8 == *v3)
        v10 = v8[4] >= v3[4];
    }
    if (!v10)
    {
      *(_QWORD *)result = v8;
LABEL_25:
      *(_QWORD *)a3 = v4;
      return result;
    }
    *(_QWORD *)result = v3;
    *(_QWORD *)a2 = v4;
    v19 = *(_QWORD **)a3;
    v20 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 24);
    v21 = *(_DWORD *)(v4[2] + 24);
    v22 = v20 >= v21;
    if (v20 == v21)
    {
      v22 = *v19 >= *v4;
      if (*v19 == *v4)
        v22 = v19[4] >= v4[4];
    }
    if (!v22)
    {
      *(_QWORD *)a2 = v19;
      goto LABEL_25;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  BOOL v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  unsigned int v18;
  BOOL v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  unsigned int v24;
  BOOL v25;

  v4 = (a2 - a1) >> 3;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD **)(a2 - 8);
      v7 = *(_QWORD **)a1;
      v8 = *(_DWORD *)(v6[2] + 24);
      v9 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 24);
      v10 = v8 >= v9;
      if (v8 == v9)
      {
        v10 = *v6 >= *v7;
        if (*v6 == *v7)
          v10 = v6[4] >= v7[4];
      }
      if (!v10)
      {
        *(_QWORD *)a1 = v6;
        *(_QWORD *)(a2 - 8) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(a1, a1 + 8, a2 - 8);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(a1, a1 + 8, a1 + 16, a2 - 8);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **,0>(a1, a1 + 8, a1 + 16, a1 + 24, a2 - 8);
      return 1;
    default:
      v11 = (_QWORD *)(a1 + 16);
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(a1, a1 + 8, a1 + 16);
      v12 = a1 + 24;
      if (a1 + 24 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  do
  {
    v15 = *(_QWORD **)v12;
    v16 = (_QWORD *)*v11;
    v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 + 16) + 24);
    v18 = *(_DWORD *)(*(_QWORD *)(*v11 + 16) + 24);
    v19 = v17 >= v18;
    if (v17 == v18)
    {
      v19 = *v15 >= *v16;
      if (*v15 == *v16)
        v19 = v15[4] >= v16[4];
    }
    if (v19)
      goto LABEL_26;
    *(_QWORD *)v12 = v16;
    v20 = (_QWORD *)a1;
    if (v11 == (_QWORD *)a1)
      goto LABEL_25;
    v21 = v13;
    while (1)
    {
      v22 = *(_QWORD **)(a1 + v21 + 8);
      v23 = *(_DWORD *)(v15[2] + 24);
      v24 = *(_DWORD *)(v22[2] + 24);
      v25 = v23 >= v24;
      if (v23 != v24)
        goto LABEL_18;
      if (*v15 == *v22)
      {
        v25 = v15[4] >= v22[4];
LABEL_18:
        if (v25)
        {
          v20 = v11;
          goto LABEL_25;
        }
        goto LABEL_22;
      }
      if (*v15 >= *v22)
        break;
LABEL_22:
      --v11;
      *(_QWORD *)(a1 + v21 + 16) = v22;
      v21 -= 8;
      if (v21 == -16)
      {
        v20 = (_QWORD *)a1;
        goto LABEL_25;
      }
    }
    v20 = (_QWORD *)(a1 + v21 + 16);
LABEL_25:
    *v20 = v15;
    if (++v14 == 8)
      return v12 + 8 == a2;
LABEL_26:
    v11 = (_QWORD *)v12;
    v13 += 8;
    v12 += 8;
  }
  while (v12 != a2);
  return 1;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  unsigned int v11;
  unsigned int v12;
  BOOL v13;
  _QWORD *v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  BOOL v18;
  _QWORD *v19;
  _QWORD *v20;
  unsigned int v21;
  unsigned int v22;
  BOOL v23;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::BasicLayout::BasicLayout(llvm::jitlink::LinkGraph &)::$_0 &,llvm::jitlink::Block **>(a1, a2, a3);
  v9 = *(_QWORD **)a4;
  v10 = *(_QWORD **)a3;
  v11 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a4 + 16) + 24);
  v12 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 24);
  v13 = v11 >= v12;
  if (v11 == v12)
  {
    v13 = *v9 >= *v10;
    if (*v9 == *v10)
      v13 = v9[4] >= v10[4];
  }
  if (!v13)
  {
    *(_QWORD *)a3 = v9;
    *(_QWORD *)a4 = v10;
    v14 = *(_QWORD **)a3;
    v15 = *(_QWORD **)a2;
    v16 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 16) + 24);
    v17 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 24);
    v18 = v16 >= v17;
    if (v16 == v17)
    {
      v18 = *v14 >= *v15;
      if (*v14 == *v15)
        v18 = v14[4] >= v15[4];
    }
    if (!v18)
    {
      *(_QWORD *)a2 = v14;
      *(_QWORD *)a3 = v15;
      v19 = *(_QWORD **)a2;
      v20 = *(_QWORD **)a1;
      v21 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a2 + 16) + 24);
      v22 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 16) + 24);
      v23 = v21 >= v22;
      if (v21 == v22)
      {
        v23 = *v19 >= *v20;
        if (*v19 == *v20)
          v23 = v19[4] >= v20[4];
      }
      if (!v23)
      {
        *(_QWORD *)a1 = v19;
        *(_QWORD *)a2 = v20;
      }
    }
  }
  return result;
}

void llvm::jitlink::InProcessMemoryManager::IPInFlightAlloc::~IPInFlightAlloc(llvm::jitlink::InProcessMemoryManager::IPInFlightAlloc *this)
{
  *(_QWORD *)this = &off_251C15800;
  llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)this + 32);
}

{
  *(_QWORD *)this = &off_251C15800;
  llvm::SmallVector<std::pair<llvm::orc::AllocGroup,llvm::jitlink::BasicLayout::Segment>,4u>::~SmallVector((uint64_t)this + 32);
  JUMPOUT(0x24BD1B3A4);
}

uint64_t llvm::jitlink::InProcessMemoryManager::IPInFlightAlloc::abandon(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;

  v5 = llvm::sys::Memory::releaseMappedMemory(a1 + 488);
  if ((_DWORD)v5)
  {
    v6 = v4;
    v7 = (_QWORD *)operator new();
    *v7 = &off_251C12820;
    v7[1] = v5;
    v7[2] = v6;
    v17 = v7;
    v18 = 0;
    llvm::ErrorList::join(&v18, (uint64_t *)&v17, &v16);
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v8 = v16;
  }
  else
  {
    v8 = 0;
  }
  v10 = llvm::sys::Memory::releaseMappedMemory(a1 + 464);
  if ((_DWORD)v10)
  {
    v11 = v9;
    v12 = (_QWORD *)operator new();
    *v12 = &off_251C12820;
    v12[1] = v10;
    v12[2] = v11;
    v17 = v12;
    v18 = v8;
    llvm::ErrorList::join(&v18, (uint64_t *)&v17, &v16);
    if (v17)
      (*(void (**)(_QWORD *))(*v17 + 8))(v17);
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    v8 = v16;
  }
  v15 = v8;
  v13 = a2[3];
  if ((v13 & 2) == 0)
    a2 = (_QWORD *)*a2;
  (*(void (**)(_QWORD *, uint64_t *))(v13 & 0xFFFFFFFFFFFFFFF8))(a2, &v15);
  result = v15;
  if (v15)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
  return result;
}

void llvm::jitlink::InProcessMemoryManager::IPInFlightAlloc::finalize(uint64_t a1, _QWORD *a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  __int128 v28;
  _QWORD v29[3];
  __int128 v30;
  uint64_t v31;
  void **v32;
  unint64_t v33;
  char v34;
  _QWORD *v35;
  char v36;
  _QWORD *v37;
  char v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  _QWORD *v42;
  char v43;
  uint64_t v44;

  v44 = *MEMORY[0x24BDAC8D0];
  v4 = *(_DWORD *)(a1 + 40);
  if (v4)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = v5 + 104 * v4;
    while (1)
    {
      v7 = *(_BYTE *)v5 & 7;
      v8 = (unint64_t)(*(_QWORD *)(v5 + 16) + *(_QWORD *)(v5 + 24) + *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8) - 1)
         / *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8)
         * *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)&v39 = *(_QWORD *)(v5 + 40);
      *((_QWORD *)&v39 + 1) = v8;
      LODWORD(v40) = 0;
      v10 = llvm::sys::Memory::protectMappedMemory((uint64_t)&v39, v7 << 24);
      if ((_DWORD)v10)
        break;
      if (v7 >= 4)
        sys_icache_invalidate((void *)v39, *((size_t *)&v39 + 1));
      v5 += 104;
      if (v5 == v6)
        goto LABEL_7;
    }
    v19 = v9;
    v20 = (_QWORD *)operator new();
    *v20 = &off_251C12820;
    v20[1] = v10;
    v20[2] = v19;
    v43 = -1;
    v42 = v20;
    v21 = a2[3];
    if ((v21 & 2) == 0)
      a2 = (_QWORD *)*a2;
    (*(void (**)(_QWORD *, _QWORD **))(v21 & 0xFFFFFFFFFFFFFFF8))(a2, &v42);
    if ((v43 & 1) == 0)
      return;
    v22 = v42;
    v42 = 0;
    if (!v22)
      return;
LABEL_36:
    (*(void (**)(_QWORD *))(*v22 + 8))(v22);
    return;
  }
LABEL_7:
  llvm::orc::shared::runFinalizeActions((_QWORD *)(*(_QWORD *)(a1 + 16) + 256), (uint64_t)&v39);
  if ((v41 & 1) != 0)
  {
    v17 = (_QWORD *)v39;
    *(_QWORD *)&v39 = 0;
    v38 = -1;
    v37 = v17;
    v18 = a2[3];
    if ((v18 & 2) == 0)
      a2 = (_QWORD *)*a2;
    (*(void (**)(_QWORD *, _QWORD **))(v18 & 0xFFFFFFFFFFFFFFF8))(a2, &v37);
    if ((v38 & 1) != 0)
    {
      v16 = v37;
      v37 = 0;
      if (v16)
        goto LABEL_18;
    }
  }
  else
  {
    v12 = llvm::sys::Memory::releaseMappedMemory(a1 + 488);
    if ((_DWORD)v12)
    {
      v13 = v11;
      v14 = (_QWORD *)operator new();
      *v14 = &off_251C12820;
      v14[1] = v12;
      v14[2] = v13;
      v36 = -1;
      v35 = v14;
      v15 = a2[3];
      if ((v15 & 2) == 0)
        a2 = (_QWORD *)*a2;
      (*(void (**)(_QWORD *, _QWORD **))(v15 & 0xFFFFFFFFFFFFFFF8))(a2, &v35);
      if ((v36 & 1) == 0)
        goto LABEL_33;
      v16 = v35;
      v35 = 0;
      if (!v16)
        goto LABEL_33;
LABEL_18:
      (*(void (**)(_QWORD *))(*v16 + 8))(v16);
      goto LABEL_33;
    }
    v23 = *(_QWORD *)(a1 + 8);
    v30 = *(_OWORD *)(a1 + 464);
    v31 = *(_QWORD *)(a1 + 480);
    v28 = v39;
    v24 = v40;
    v39 = 0uLL;
    v40 = 0;
    std::mutex::lock((std::mutex *)(v23 + 16));
    v25 = *(_QWORD *)(v23 + 80);
    if (v25)
      *(_QWORD *)(v23 + 80) = *(_QWORD *)v25;
    else
      v25 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v23 + 88, 48, 3);
    *(_OWORD *)v25 = v30;
    *(_DWORD *)(v25 + 16) = v31;
    *(_OWORD *)(v25 + 24) = v28;
    *(_QWORD *)(v25 + 40) = v24;
    memset(v29, 0, sizeof(v29));
    std::mutex::unlock((std::mutex *)(v23 + 16));
    v34 = 0;
    v33 = v25;
    v26 = a2[3];
    if ((v26 & 2) == 0)
      a2 = (_QWORD *)*a2;
    (*(void (**)(_QWORD *, unint64_t *))(v26 & 0xFFFFFFFFFFFFFFF8))(a2, &v33);
    if ((v34 & 1) != 0)
    {
      v27 = v33;
      v33 = 0;
      if (v27)
        (*(void (**)(unint64_t))(*(_QWORD *)v27 + 8))(v27);
    }
    v32 = (void **)v29;
    std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v32);
  }
LABEL_33:
  if ((v41 & 1) == 0)
  {
    v32 = (void **)&v39;
    std::vector<llvm::orc::shared::WrapperFunctionCall>::__destroy_vector::operator()[abi:nn180100](&v32);
    return;
  }
  v22 = (_QWORD *)v39;
  *(_QWORD *)&v39 = 0;
  if (v22)
    goto LABEL_36;
}

uint64_t llvm::jitlink::ObjCStubsBuilderBase::initialize@<X0>(llvm::jitlink::ObjCStubsBuilderBase *this@<X0>, unint64_t *a2@<X3>, uint64_t *a3@<X8>)
{
  unint64_t *v5;
  llvm::jitlink::LinkGraph *SectionByName;
  llvm::jitlink::Section *v7;
  llvm::jitlink *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  llvm::jitlink::Section *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  llvm::jitlink *v29;
  llvm::jitlink::LinkGraph *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  unint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  std::string *v42;
  std::string::size_type v43;
  uint64_t v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;
  uint64_t v50;
  _QWORD *v51;
  _QWORD *v52;
  uint64_t *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  unint64_t *v57;
  uint64_t v58;
  char v59;
  _QWORD *v60;
  int v61;
  unsigned int v62;
  unint64_t *v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v70;
  uint64_t v71;
  _QWORD **v72;
  _QWORD *v73;
  uint64_t v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t v79;
  std::string *v81;
  const char *v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  const char *v86;
  void *v87;
  uint64_t v88;
  uint64_t v89;
  std::string *v91;
  const char *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  const char *v96;
  std::string *v97;
  const char *v98;
  uint64_t v99;
  std::string *v100;
  const char *v101;
  uint64_t v102;
  std::string *v103;
  const char *v104;
  uint64_t v105;
  _QWORD v106[2];
  __int128 *v107;
  __int16 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  std::string v113;
  void *v114[2];
  std::string::size_type v115;
  std::string v116;
  uint64_t v117;
  __int16 v118;
  void *v119[2];
  const char *v120;
  __int16 v121;
  std::string v122;
  uint64_t v123;
  __int16 v124;
  void *__p[2];
  const char *v126;
  __int16 v127;
  uint64_t v128;
  uint64_t v129[2];
  unsigned int v130;
  __int128 v131;
  __int128 v132;
  __int128 v133;
  __int128 v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;

  v137 = *MEMORY[0x24BDAC8D0];
  *((_QWORD *)this + 4) = llvm::jitlink::LinkGraph::findSectionByName(*((_QWORD *)this + 3), (uint64_t)"__TEXT,__objc_methname", 22, a2);
  v129[0] = 0;
  v129[1] = 0;
  v130 = 0;
  SectionByName = (llvm::jitlink::LinkGraph *)llvm::jitlink::LinkGraph::findSectionByName(*((_QWORD *)this + 3), (uint64_t)"__DATA,__objc_selrefs", 21, v5);
  *((_QWORD *)this + 5) = SectionByName;
  v8 = (llvm::jitlink *)*((_QWORD *)this + 3);
  if (SectionByName)
  {
    llvm::jitlink::addBlockStartSymbols(v8, SectionByName, v7);
    v9 = *((_QWORD *)this + 5);
    v10 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v9 + 56);
    v13 = *(_QWORD *)(v9 + 56) + 8 * *(unsigned int *)(v9 + 72);
    if ((uint64_t *)v13 != v10)
    {
      v14 = v10;
      v15 = v11;
      while (1)
      {
        v128 = 0;
        v16 = *v14;
        v128 = v16;
        v17 = *(uint64_t **)(v16 + 16);
        v18 = v17[5];
        v19 = v17[6];
        if (v18 != v19)
        {
          v20 = *(_QWORD *)(v16 + 24) & 0x1FFFFFFFFFFFFFFLL;
          while (v20 != *(_DWORD *)(v18 + 8))
          {
            v18 += 32;
            if (v18 == v19)
              goto LABEL_39;
          }
        }
        if (v18 == v19)
          break;
        if (*(unsigned __int8 *)(v18 + 24) != *((unsigned __int8 *)this + 16))
        {
          std::operator+<char>();
          v100 = std::string::append(&v116, ", edge for ");
          v101 = (const char *)v100->__r_.__value_.__r.__words[2];
          *(_OWORD *)v119 = *(_OWORD *)&v100->__r_.__value_.__l.__data_;
          v120 = v101;
          v100->__r_.__value_.__l.__size_ = 0;
          v100->__r_.__value_.__r.__words[2] = 0;
          v100->__r_.__value_.__r.__words[0] = 0;
          v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
          v122.__r_.__value_.__r.__words[2] = (std::string::size_type)"__DATA,__objc_selrefs";
          v123 = 21;
          v124 = 1284;
          __p[0] = &v122;
          v126 = " block at ";
          v127 = 770;
          v102 = *v17;
          *(_QWORD *)&v131 = "{0:x}";
          *((_QWORD *)&v131 + 1) = 5;
          *(_QWORD *)&v132 = &v134;
          *((_QWORD *)&v132 + 1) = 1;
          *(_QWORD *)&v133 = &off_251C151F0;
          *((_QWORD *)&v133 + 1) = v102;
          *(_QWORD *)&v134 = &v133;
          v106[0] = __p;
          v107 = &v131;
          v108 = 1538;
          v94 = operator new();
          v95 = v94;
          v96 = "has non-pointer kind";
          goto LABEL_123;
        }
        if (*(_QWORD *)(v18 + 16))
        {
          std::operator+<char>();
          v103 = std::string::append(&v116, ", edge for ");
          v104 = (const char *)v103->__r_.__value_.__r.__words[2];
          *(_OWORD *)v119 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
          v120 = v104;
          v103->__r_.__value_.__l.__size_ = 0;
          v103->__r_.__value_.__r.__words[2] = 0;
          v103->__r_.__value_.__r.__words[0] = 0;
          v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
          v122.__r_.__value_.__r.__words[2] = (std::string::size_type)"__DATA,__objc_selrefs";
          v123 = 21;
          v124 = 1284;
          __p[0] = &v122;
          v126 = " block at ";
          v127 = 770;
          v105 = *v17;
          *(_QWORD *)&v131 = "{0:x}";
          *((_QWORD *)&v131 + 1) = 5;
          *(_QWORD *)&v132 = &v134;
          *((_QWORD *)&v132 + 1) = 1;
          *(_QWORD *)&v133 = &off_251C151F0;
          *((_QWORD *)&v133 + 1) = v105;
          *(_QWORD *)&v134 = &v133;
          v106[0] = __p;
          v107 = &v131;
          v108 = 1538;
          v94 = operator new();
          v95 = v94;
          v96 = "has non-zero addend";
LABEL_123:
          *(_QWORD *)&v109 = v106;
          *(_QWORD *)&v110 = v96;
          LOWORD(v111) = 770;
          *(_QWORD *)v94 = off_251C15728;
          llvm::Twine::str((llvm::formatv_object_base **)&v109, (std::string *)(v94 + 8));
          *a3 = v95;
          if (SHIBYTE(v120) < 0)
            operator delete(v119[0]);
          if ((SHIBYTE(v116.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            return MEMORY[0x24BD1B398](v129[0], 8);
          v87 = (void *)v116.__r_.__value_.__r.__words[0];
LABEL_115:
          operator delete(v87);
          return MEMORY[0x24BD1B398](v129[0], 8);
        }
        v21 = *(_QWORD *)v18;
        v22 = *(_QWORD *)(*(_QWORD *)v18 + 16);
        if ((*(_BYTE *)(v22 + 8) & 1) == 0 || *(_QWORD *)(v22 + 16) != *((_QWORD *)this + 4))
        {
          std::operator+<char>();
          v91 = std::string::append(&v116, ", edge for ");
          v92 = (const char *)v91->__r_.__value_.__r.__words[2];
          *(_OWORD *)v119 = *(_OWORD *)&v91->__r_.__value_.__l.__data_;
          v120 = v92;
          v91->__r_.__value_.__l.__size_ = 0;
          v91->__r_.__value_.__r.__words[2] = 0;
          v91->__r_.__value_.__r.__words[0] = 0;
          v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
          v122.__r_.__value_.__r.__words[2] = (std::string::size_type)"__DATA,__objc_selrefs";
          v123 = 21;
          v124 = 1284;
          __p[0] = &v122;
          v126 = " block at ";
          v127 = 770;
          v93 = *v17;
          *(_QWORD *)&v131 = "{0:x}";
          *((_QWORD *)&v131 + 1) = 5;
          *(_QWORD *)&v132 = &v134;
          *((_QWORD *)&v132 + 1) = 1;
          *(_QWORD *)&v133 = &off_251C151F0;
          *((_QWORD *)&v133 + 1) = v93;
          *(_QWORD *)&v134 = &v133;
          v106[0] = __p;
          v107 = &v131;
          v108 = 1538;
          v94 = operator new();
          v95 = v94;
          v96 = " does not point to __objc_methname";
          goto LABEL_123;
        }
        v109 = 0uLL;
        llvm::jitlink::cStringFromSymbol((uint64_t)&v131, *((_QWORD *)this + 3), v21);
        if ((v132 & 1) != 0)
        {
          v23 = v131;
          *a3 = v131;
          if (v23)
            return MEMORY[0x24BD1B398](v129[0], 8);
        }
        else
        {
          v109 = v131;
          *a3 = 0;
        }
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::FindAndConstruct(v129, &v128)[1] = v21;
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 8, &v109, v24, v25)[2] = v21;
        v26 = v128;
        llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 11, &v109, v27, v28)[2] = v26;
        while (++v14 != v15)
        {
          if ((*v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_22;
        }
        v14 = v15;
LABEL_22:
        if (v14 == (uint64_t *)v13)
          goto LABEL_25;
      }
LABEL_39:
      std::operator+<char>();
      v42 = std::string::append(&v113, ", ");
      v43 = v42->__r_.__value_.__r.__words[2];
      *(_OWORD *)v114 = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
      v115 = v43;
      v42->__r_.__value_.__l.__size_ = 0;
      v42->__r_.__value_.__r.__words[2] = 0;
      v42->__r_.__value_.__r.__words[0] = 0;
      v116.__r_.__value_.__r.__words[0] = (std::string::size_type)v114;
      v116.__r_.__value_.__r.__words[2] = (std::string::size_type)"__DATA,__objc_selrefs";
      v117 = 21;
      v118 = 1284;
      v119[0] = &v116;
      v120 = " selector symbol ";
      v121 = 770;
      v44 = *(_QWORD *)(v128 + 8);
      if (v44)
      {
        v45 = *(const char **)v128;
      }
      else
      {
        v45 = "<unnamed>";
        v44 = 9;
      }
      v122.__r_.__value_.__r.__words[0] = (std::string::size_type)v119;
      v122.__r_.__value_.__r.__words[2] = (std::string::size_type)v45;
      v123 = v44;
      v124 = 1282;
      __p[0] = &v122;
      __p[1] = (void *)v44;
      v126 = " at ";
      v127 = 770;
      v88 = (*(_QWORD *)(v128 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(v128 + 16);
      *(_QWORD *)&v131 = "{0:x}";
      *((_QWORD *)&v131 + 1) = 5;
      *(_QWORD *)&v132 = &v134;
      *((_QWORD *)&v132 + 1) = 1;
      *(_QWORD *)&v133 = &off_251C151F0;
      *((_QWORD *)&v133 + 1) = v88;
      *(_QWORD *)&v134 = &v133;
      v106[0] = __p;
      v106[1] = v44;
      v107 = &v131;
      v108 = 1538;
      v89 = operator new();
      *(_QWORD *)&v109 = v106;
      *((_QWORD *)&v109 + 1) = v44;
      *(_QWORD *)&v110 = " has no corresponding edge";
      LOWORD(v111) = 770;
      *(_QWORD *)v89 = off_251C15728;
      llvm::Twine::str((llvm::formatv_object_base **)&v109, (std::string *)(v89 + 8));
      *a3 = v89;
      if (SHIBYTE(v115) < 0)
        operator delete(v114[0]);
      if ((SHIBYTE(v113.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        return MEMORY[0x24BD1B398](v129[0], 8);
      v87 = (void *)v113.__r_.__value_.__r.__words[0];
      goto LABEL_115;
    }
  }
  else
  {
    *((_QWORD *)this + 5) = llvm::jitlink::LinkGraph::createSection((uint64_t)v8, (uint64_t)"__DATA,__objc_selrefs", 21, 3);
  }
LABEL_25:
  v29 = (llvm::jitlink *)*((_QWORD *)this + 3);
  v30 = (llvm::jitlink::LinkGraph *)*((_QWORD *)this + 4);
  if (v30)
  {
    llvm::jitlink::addBlockStartSymbols(v29, v30, v12);
    v31 = *((_QWORD *)this + 4);
    v32 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v31 + 56);
    v35 = *(_QWORD *)(v31 + 56) + 8 * *(unsigned int *)(v31 + 72);
    if ((uint64_t *)v35 != v32)
    {
      v36 = v32;
      v37 = v33;
      do
      {
        v38 = *v36;
        v109 = 0uLL;
        llvm::jitlink::cStringFromSymbol((uint64_t)&v131, *((_QWORD *)this + 3), v38);
        if ((v132 & 1) != 0)
        {
          v40 = v131;
          *a3 = v131;
          if (v40)
            return MEMORY[0x24BD1B398](v129[0], 8);
        }
        else
        {
          v109 = v131;
          *a3 = 0;
        }
        *(_QWORD *)&v131 = 0;
        if ((llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)this + 8, (uint64_t)&v109, &v131, v39) & 1) == 0)llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct((uint64_t *)this + 8, &v109, v41, v34)[2] = v38;
        while (++v36 != v37)
        {
          if ((*v36 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_37;
        }
        v36 = v37;
LABEL_37:
        ;
      }
      while (v36 != (uint64_t *)v35);
    }
  }
  else
  {
    *((_QWORD *)this + 4) = llvm::jitlink::LinkGraph::createSection((uint64_t)v29, (uint64_t)"__TEXT,__objc_methname", 22, 5);
  }
  v46 = llvm::jitlink::LinkGraph::findSectionByName(*((_QWORD *)this + 3), (uint64_t)"__TEXT,__objc_stubs", 19, v34);
  *((_QWORD *)this + 6) = v46;
  if (!v46)
  {
    *((_QWORD *)this + 6) = llvm::jitlink::LinkGraph::createSection(*((_QWORD *)this + 3), (uint64_t)"__TEXT,__objc_stubs", 19, 5);
LABEL_69:
    v64 = *((_QWORD *)this + 3);
    v65 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v64 + 208);
    v67 = *(_QWORD *)(v64 + 208) + 8 * *(unsigned int *)(v64 + 224);
    if ((_QWORD *)v67 == v65)
    {
LABEL_80:
      llvm::jitlink::LinkGraph::defined_symbols(*((llvm::jitlink::LinkGraph **)this + 3), &v131);
      v109 = v131;
      v110 = v132;
      v111 = v133;
      v112 = v134;
      v70 = v135;
      v71 = v136;
      v72 = (_QWORD **)v134;
      if ((_QWORD)v131 != v135 || (_QWORD)v134 != v136)
      {
        while (1)
        {
          v73 = *v72;
          if (v73[1] == 13
            && *(_QWORD *)*v73 == 0x736D5F636A626F5FLL
            && *(_QWORD *)(*v73 + 5) == 0x646E655367736D5FLL)
          {
            break;
          }
          llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Symbol *,llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>>::Iterator,llvm::jitlink::Symbol *,&llvm::jitlink::LinkGraph::getSectionSymbols>::operator++((uint64_t)&v109, (uint64_t)v106);
          v72 = (_QWORD **)v112;
          if ((_QWORD)v109 == v70 && (_QWORD)v112 == v71)
            goto LABEL_92;
        }
        *((_QWORD *)this + 7) = v73;
        goto LABEL_117;
      }
LABEL_92:
      v76 = *((_QWORD *)this + 3);
      v77 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v76 + 232);
      v79 = *(_QWORD *)(v76 + 232) + 8 * *(unsigned int *)(v76 + 248);
      if ((_QWORD *)v79 == v77)
      {
LABEL_103:
        *((_QWORD *)this + 7) = llvm::jitlink::LinkGraph::addExternalSymbol(*((_QWORD *)this + 3), (uint64_t)"_objc_msgSend", 13, 0, 0);
LABEL_117:
        *a3 = 0;
        return MEMORY[0x24BD1B398](v129[0], 8);
      }
      while (1)
      {
        v68 = *v77;
        if (*(_QWORD *)(*v77 + 8) == 13
          && **(_QWORD **)v68 == 0x736D5F636A626F5FLL
          && *(_QWORD *)(*(_QWORD *)v68 + 5) == 0x646E655367736D5FLL)
        {
          break;
        }
        while (++v77 != v78)
        {
          if ((*v77 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_102;
        }
        v77 = v78;
LABEL_102:
        if (v77 == (_QWORD *)v79)
          goto LABEL_103;
      }
    }
    else
    {
      while (1)
      {
        v68 = *v65;
        if (*(_QWORD *)(*v65 + 8) == 13
          && **(_QWORD **)v68 == 0x736D5F636A626F5FLL
          && *(_QWORD *)(*(_QWORD *)v68 + 5) == 0x646E655367736D5FLL)
        {
          break;
        }
        while (++v65 != v66)
        {
          if ((*v65 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_79;
        }
        v65 = v66;
LABEL_79:
        if (v65 == (_QWORD *)v67)
          goto LABEL_80;
      }
    }
    *((_QWORD *)this + 7) = v68;
    goto LABEL_117;
  }
  v47 = v46;
  v48 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v46 + 32);
  v50 = *(_QWORD *)(v47 + 32) + 8 * *(unsigned int *)(v47 + 48);
  if ((_QWORD *)v50 == v48)
    goto LABEL_69;
  v51 = v48;
  v52 = v49;
  while (1)
  {
    v53 = (uint64_t *)*v51;
    v54 = *(_QWORD **)(*v51 + 40);
    v55 = *(_QWORD **)(*v51 + 48);
    if (v54 == v55)
      break;
    v56 = 0;
    do
    {
      *(_QWORD *)&v109 = *v54;
      *(_QWORD *)&v131 = 0;
      if (llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseMapPair<llvm::jitlink::Symbol *,llvm::jitlink::Symbol *>>::LookupBucketFor<llvm::jitlink::Symbol *>(v129, &v109, &v131)&& (_QWORD)v131 != v129[0] + 16 * v130)
      {
        if (v56)
        {
          std::operator+<char>();
          v81 = std::string::append(&v122, ", existing stub at ");
          v82 = (const char *)v81->__r_.__value_.__r.__words[2];
          *(_OWORD *)__p = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
          v126 = v82;
          v81->__r_.__value_.__l.__size_ = 0;
          v81->__r_.__value_.__r.__words[2] = 0;
          v81->__r_.__value_.__r.__words[0] = 0;
          v83 = *v53;
          *(_QWORD *)&v131 = "{0:x}";
          *((_QWORD *)&v131 + 1) = 5;
          *(_QWORD *)&v132 = &v134;
          *((_QWORD *)&v132 + 1) = 1;
          *(_QWORD *)&v133 = &off_251C151F0;
          *((_QWORD *)&v133 + 1) = v83;
          *(_QWORD *)&v134 = &v133;
          v106[0] = __p;
          v107 = &v131;
          v108 = 1540;
          v84 = operator new();
          v85 = v84;
          v86 = " has multiple selector references";
          goto LABEL_105;
        }
        v56 = *(_QWORD **)(v131 + 8);
      }
      v54 += 4;
    }
    while (v54 != v55);
    if (!v56)
      break;
    v58 = v56[4] - 1;
    *(_QWORD *)&v131 = *(_QWORD *)(v56[2] + 24) + (v56[3] & 0x1FFFFFFFFFFFFFFLL);
    *((_QWORD *)&v131 + 1) = v58;
    *(_QWORD *)&v109 = 0;
    v59 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)this + 14, (uint64_t)&v131, &v109, v57);
    v60 = (_QWORD *)v109;
    if ((v59 & 1) != 0)
      goto LABEL_59;
    v61 = *((_DWORD *)this + 30);
    v62 = *((_DWORD *)this + 32);
    if (4 * v61 + 4 >= 3 * v62)
    {
      v62 *= 2;
LABEL_67:
      llvm::DenseMap<llvm::StringRef,llvm::jitlink::Block *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Block *>>::grow((uint64_t)this + 112, v62);
      *(_QWORD *)&v109 = 0;
      llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)this + 14, (uint64_t)&v131, &v109, v63);
      v60 = (_QWORD *)v109;
      goto LABEL_56;
    }
    if (v62 + ~v61 - *((_DWORD *)this + 31) <= v62 >> 3)
      goto LABEL_67;
LABEL_56:
    ++*((_DWORD *)this + 30);
    if (*v60 != -1)
      --*((_DWORD *)this + 31);
    *(_OWORD *)v60 = v131;
    v60[2] = 0;
LABEL_59:
    v60[2] = v53;
    while (++v51 != v52)
    {
      if ((*v51 | 0x1000) != 0xFFFFFFFFFFFFF000)
        goto LABEL_64;
    }
    v51 = v52;
LABEL_64:
    if (v51 == (_QWORD *)v50)
      goto LABEL_69;
  }
  std::operator+<char>();
  v97 = std::string::append(&v122, ", existing stub at ");
  v98 = (const char *)v97->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
  v126 = v98;
  v97->__r_.__value_.__l.__size_ = 0;
  v97->__r_.__value_.__r.__words[2] = 0;
  v97->__r_.__value_.__r.__words[0] = 0;
  v99 = *v53;
  *(_QWORD *)&v131 = "{0:x}";
  *((_QWORD *)&v131 + 1) = 5;
  *(_QWORD *)&v132 = &v134;
  *((_QWORD *)&v132 + 1) = 1;
  *(_QWORD *)&v133 = &off_251C151F0;
  *((_QWORD *)&v133 + 1) = v99;
  *(_QWORD *)&v134 = &v133;
  v106[0] = __p;
  v107 = &v131;
  v108 = 1540;
  v84 = operator new();
  v85 = v84;
  v86 = " has no selector reference";
LABEL_105:
  *(_QWORD *)&v109 = v106;
  *(_QWORD *)&v110 = v86;
  LOWORD(v111) = 770;
  *(_QWORD *)v84 = off_251C15728;
  llvm::Twine::str((llvm::formatv_object_base **)&v109, (std::string *)(v84 + 8));
  *a3 = v85;
  if (SHIBYTE(v126) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v122.__r_.__value_.__r.__words[2]) < 0)
  {
    v87 = (void *)v122.__r_.__value_.__r.__words[0];
    goto LABEL_115;
  }
  return MEMORY[0x24BD1B398](v129[0], 8);
}

uint64_t llvm::jitlink::addBlockStartSymbols(llvm::jitlink *this, llvm::jitlink::LinkGraph *a2, llvm::jitlink::Section *a3)
{
  char *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  _QWORD *v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t *v26;
  int v27;
  int v28;
  _QWORD v29[3];

  v5 = (char *)a2 + 32;
  v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)a2 + 32);
  v8 = v7;
  llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)v5);
  v9 = *((_QWORD *)a2 + 4) + 8 * *((unsigned int *)a2 + 12);
  if ((_QWORD *)v9 == v6)
  {
    llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::init(&v26, 0);
  }
  else
  {
    v10 = 0;
    v11 = v6;
    do
    {
      v12 = v10;
      while (++v11 != v8)
      {
        if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_8;
      }
      v11 = v8;
LABEL_8:
      ++v10;
    }
    while (v11 != (_QWORD *)v9);
    v13 = v12 | (v12 >> 1) | ((v12 | (v12 >> 1)) >> 2);
    v14 = v13 | (v13 >> 4) | ((v13 | (v13 >> 4)) >> 8);
    llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::init(&v26, (((v14 | (v14 >> 16)) >> 32) | v14 | (v14 >> 16)) + 1);
    do
    {
      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>((uint64_t)&v26, v6, (uint64_t)v29);
      while (++v6 != v8)
      {
        if ((*v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_15;
      }
      v6 = v8;
LABEL_15:
      ;
    }
    while (v6 != (_QWORD *)v9);
  }
  v15 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin((uint64_t)a2 + 56);
  v17 = *((_QWORD *)a2 + 7) + 8 * *((unsigned int *)a2 + 18);
  if ((_QWORD *)v17 != v15)
  {
    v18 = v15;
    v19 = v16;
    do
    {
      if ((*(_QWORD *)(*v18 + 24) & 0x1FFFFFFFFFFFFFFLL) == 0)
      {
        v29[0] = *(_QWORD *)(*v18 + 16);
        llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::erase((uint64_t)&v26, v29);
      }
      while (++v18 != v19)
      {
        if ((*v18 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_26;
      }
      v18 = v19;
LABEL_26:
      ;
    }
    while (v18 != (_QWORD *)v17);
  }
  v20 = v26;
  if (v27)
  {
    v21 = v26;
    if (v28)
    {
      v22 = 0;
      while ((v26[v22] | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if (v28 == ++v22)
          return MEMORY[0x24BD1B398](v20, 8);
      }
      v21 = &v26[v22];
    }
    v23 = &v26[v28];
    if (v21 != v23)
    {
      v24 = *v21;
LABEL_36:
      llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, v24, 0, *(_QWORD *)(v24 + 32), 0, 0);
      while (++v21 != v23)
      {
        v24 = *v21;
        if ((*v21 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          if (v21 != v23)
            goto LABEL_36;
          break;
        }
      }
      v20 = v26;
    }
  }
  return MEMORY[0x24BD1B398](v20, 8);
}

void llvm::jitlink::cStringFromSymbol(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[2];

  v15[0] = a2;
  v15[1] = a3;
  v4 = *(_QWORD *)(a3 + 16);
  if ((*(_BYTE *)(v4 + 8) & 1) != 0)
  {
    v6 = *(_QWORD *)(v4 + 32);
    if (v6)
    {
      v7 = *(_QWORD *)(v4 + 24);
      if (!v7)
      {
        *(_BYTE *)(a1 + 16) &= ~1u;
        *(_QWORD *)a1 = "";
        *(_QWORD *)(a1 + 8) = 0;
        return;
      }
      v8 = *(_QWORD *)(a3 + 24) & 0x1FFFFFFFFFFFFFFLL;
      v9 = v7 + v8;
      v10 = v6 - v8;
      v11 = strnlen((const char *)(v7 + v8), v6 - v8);
      if (v11 != v10)
      {
        *(_BYTE *)(a1 + 16) &= ~1u;
        *(_QWORD *)a1 = v9;
        *(_QWORD *)(a1 + 8) = v11;
        return;
      }
      llvm::jitlink::cStringFromSymbol(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)::$_0::operator()(&v12, (uint64_t)v15, (llvm::formatv_object_base *)"is missing null terminator", (llvm::formatv_object_base *)0x1A);
      *(_BYTE *)(a1 + 16) |= 1u;
      v5 = v12;
    }
    else
    {
      llvm::jitlink::cStringFromSymbol(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)::$_0::operator()(&v13, (uint64_t)v15, (llvm::formatv_object_base *)"was in an empty block", (llvm::formatv_object_base *)0x15);
      *(_BYTE *)(a1 + 16) |= 1u;
      v5 = v13;
    }
  }
  else
  {
    llvm::jitlink::cStringFromSymbol(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)::$_0::operator()(&v14, (uint64_t)v15, (llvm::formatv_object_base *)"was not defined", (llvm::formatv_object_base *)0xF);
    *(_BYTE *)(a1 + 16) |= 1u;
    v5 = v14;
  }
  *(_QWORD *)a1 = v5;
}

_QWORD *llvm::jitlink::ObjCStubsBuilderBase::getOrCreateMethName(uint64_t a1, const void *a2, size_t a3, unint64_t *a4)
{
  size_t v6;
  const void *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19[2];

  v14 = a2;
  v15 = a3;
  v19[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 64), (uint64_t)&v14, v19, a4)&& v19[0] != *(_QWORD *)(a1 + 64) + 24 * *(unsigned int *)(a1 + 80))
  {
    return *(_QWORD **)(v19[0] + 16);
  }
  v7 = v14;
  v6 = v15;
  v8 = v15 + 1;
  v9 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(*(_QWORD *)(a1 + 24), v15 + 1, 0);
  v10 = (uint64_t)v9;
  if (v6)
    memmove(v9, v7, v6);
  *(_BYTE *)(v10 + v6) = 0;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = *(_QWORD *)(a1 + 32);
  v19[0] = v10;
  v19[1] = v8;
  v17 = 1;
  v18 = 0;
  v16 = 0;
  v13 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v11, v12, v19, &v18, &v17, &v16);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(*(_QWORD *)(a1 + 24), (uint64_t)v13, 0, v13[4], 0, 0);
}

_QWORD *llvm::jitlink::ObjCStubsBuilderBase::getOrCreateSelector(uint64_t a1, const void *a2, size_t a3, unint64_t *a4)
{
  unint64_t *v5;
  _QWORD *MethName;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  const void *v12;
  size_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17[2];

  v12 = a2;
  v13 = a3;
  v17[0] = 0;
  if (llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 88), (uint64_t)&v12, v17, a4)&& v17[0] != *(_QWORD *)(a1 + 88) + 24 * *(unsigned int *)(a1 + 104))
  {
    return *(_QWORD **)(v17[0] + 16);
  }
  MethName = llvm::jitlink::ObjCStubsBuilderBase::getOrCreateMethName(a1, v12, v13, v5);
  v8 = *(_QWORD *)(a1 + 24);
  v9 = *(_QWORD *)(a1 + 40);
  v10 = *(_QWORD *)(a1 + 8);
  v17[0] = *(_QWORD *)a1;
  v17[1] = v10;
  v15 = v10;
  v16 = 0;
  v14 = 0;
  v11 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v8, v9, v17, &v16, (unint64_t *)&v15, &v14);
  llvm::jitlink::Block::addEdge(v11, *(_BYTE *)(a1 + 16), 0, (uint64_t)MethName, 0);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(*(_QWORD *)(a1 + 24), (uint64_t)v11, 0, *(_QWORD *)(a1 + 8), 0, 0);
}

void llvm::jitlink::cStringFromSymbol(llvm::jitlink::LinkGraph &,llvm::jitlink::Symbol &)::$_0::operator()(uint64_t *a1, uint64_t a2, llvm::formatv_object_base *a3, llvm::formatv_object_base *a4)
{
  std::string *v8;
  std::string::size_type v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  _QWORD v16[2];
  _QWORD *v17;
  std::string v18;
  void *__p[2];
  std::string::size_type v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  llvm::formatv_object_base *v29[4];
  __int16 v30;

  std::operator+<char>();
  v8 = std::string::append(&v18, " string symbol ");
  v9 = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v20 = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(_QWORD *)(v10 + 8);
  if (v11)
  {
    v12 = *(const char **)v10;
  }
  else
  {
    v12 = "<unnamed>";
    v11 = 9;
  }
  v21[0] = __p;
  v21[2] = v12;
  v21[3] = v11;
  v22 = 1284;
  v23[0] = v21;
  v23[2] = " at ";
  v24 = 770;
  v13 = (*(_QWORD *)(v10 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(v10 + 16);
  v15[0] = "{0:x}";
  v15[1] = 5;
  v15[2] = &v17;
  v15[3] = 1;
  v16[0] = &off_251C151F0;
  v16[1] = v13;
  v17 = v16;
  v25[0] = v23;
  v25[2] = v15;
  v26 = 1538;
  v27[0] = v25;
  v27[2] = " ";
  v28 = 770;
  v14 = operator new();
  v29[0] = (llvm::formatv_object_base *)v27;
  v29[1] = a4;
  v29[2] = a3;
  v29[3] = a4;
  v30 = 1282;
  *(_QWORD *)v14 = off_251C15728;
  llvm::Twine::str(v29, (std::string *)(v14 + 8));
  *a1 = v14;
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::FindAndConstruct(uint64_t *a1, _OWORD *a2, uint64_t a3, unint64_t *a4)
{
  char v6;
  _QWORD *v7;
  _QWORD *v9;

  v9 = 0;
  v6 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(a1, (uint64_t)a2, &v9, a4);
  v7 = v9;
  if ((v6 & 1) == 0)
  {
    v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::InsertIntoBucketImpl<llvm::StringRef>((uint64_t)a1, (uint64_t)a2, (uint64_t)a2, v9);
    *(_OWORD *)v7 = *a2;
    v7[2] = 0;
  }
  return v7;
}

_OWORD *llvm::DenseMap<llvm::StringRef,llvm::jitlink::Block *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Block *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  unint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _OWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _OWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v11 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v11)
    {
      v12 = 24 * v11;
      do
      {
        *result = xmmword_24AA2AC20;
        result = (_OWORD *)((char *)result + 24);
        v12 -= 24;
      }
      while (v12);
    }
    if ((_DWORD)v3)
    {
      v13 = 24 * v3;
      v14 = v4;
      do
      {
        if (*(_QWORD *)v14 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, v14, &v18, v10);
          v15 = v18;
          *v18 = *(_OWORD *)v14;
          *((_QWORD *)v15 + 2) = *(_QWORD *)(v14 + 16);
          ++*(_DWORD *)(a1 + 8);
        }
        v14 += 24;
        v13 -= 24;
      }
      while (v13);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 24 * v16;
    do
    {
      *result = xmmword_24AA2AC20;
      result = (_OWORD *)((char *)result + 24);
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

void llvm::jitlink::createLinkGraphFromMachOObject(unint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int16 v8;
  int v9;
  uint64_t v11;
  unsigned int v13;
  unsigned int v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  _OWORD v18[2];
  _OWORD v19[2];
  uint64_t v20;
  _QWORD v21[4];
  __int16 v22;
  llvm::formatv_object_base *v23[4];
  __int16 v24;

  v3 = a1[1];
  if (v3 <= 3)
    goto LABEL_2;
  v9 = *(_DWORD *)*a1;
  if (v9 == -17958194 || v9 == -822415874)
  {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"MachO 32-bit platforms not supported", &v20);
    *(_BYTE *)(a2 + 8) |= 1u;
    v11 = v20;
  }
  else
  {
    if (v9 != -17958193 && v9 != -805638658)
    {
      v6 = operator new();
      v7 = v6;
      v23[0] = (llvm::formatv_object_base *)"Unrecognized MachO magic value";
      v8 = 259;
      goto LABEL_3;
    }
    if (v3 <= 0x1F)
    {
LABEL_2:
      v4 = a1[2];
      v5 = a1[3];
      v22 = 1283;
      v21[0] = "Truncated MachO buffer \"";
      v21[2] = v4;
      v21[3] = v5;
      v6 = operator new();
      v7 = v6;
      v23[0] = (llvm::formatv_object_base *)v21;
      v23[2] = (llvm::formatv_object_base *)"\"";
      v8 = 770;
LABEL_3:
      v24 = v8;
      *(_QWORD *)v6 = off_251C15728;
      llvm::Twine::str(v23, (std::string *)(v6 + 8));
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v7;
      return;
    }
    v13 = *(_DWORD *)(*a1 + 4);
    v14 = bswap32(v13);
    if (v9 == -805638658)
      v13 = v14;
    if (v13 == 16777223)
    {
      v16 = *((_OWORD *)a1 + 1);
      v18[0] = *(_OWORD *)a1;
      v18[1] = v16;
      llvm::jitlink::createLinkGraphFromMachOObject_x86_64(v18, a2);
      return;
    }
    if (v13 == 16777228)
    {
      v15 = *((_OWORD *)a1 + 1);
      v19[0] = *(_OWORD *)a1;
      v19[1] = v15;
      llvm::jitlink::createLinkGraphFromMachOObject_arm64(v19, a2);
      return;
    }
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"MachO-64 CPU type not valid", &v17);
    *(_BYTE *)(a2 + 8) |= 1u;
    v11 = v17;
  }
  *(_QWORD *)a2 = v11;
}

llvm::jitlink::LinkGraph *llvm::jitlink::link_MachO(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  llvm::jitlink::LinkGraph *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  llvm::jitlink::LinkGraph *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::jitlink::LinkGraph *v10;
  uint64_t v11;
  llvm::jitlink::LinkGraph *v12;
  uint64_t v13;
  llvm::jitlink::LinkGraph *v14;

  v2 = *a1;
  v3 = *((_DWORD *)*a1 + 36);
  if (v3 == 38)
  {
    *a1 = 0;
    v12 = v2;
    v7 = *a2;
    *a2 = 0;
    v11 = v7;
    llvm::jitlink::link_MachO_x86_64(&v12, &v11);
    v8 = v11;
    v11 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    result = v12;
    v12 = 0;
    if (result)
      goto LABEL_10;
  }
  else
  {
    if (v3 == 3)
    {
      *a1 = 0;
      v14 = v2;
      v4 = *a2;
      *a2 = 0;
      v13 = v4;
      llvm::jitlink::link_MachO_arm64(&v14, &v13);
      v5 = v13;
      v13 = 0;
      if (v5)
        (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
      result = v14;
      v14 = 0;
      if (!result)
        return result;
LABEL_10:
      llvm::jitlink::LinkGraph::~LinkGraph(result);
      return (llvm::jitlink::LinkGraph *)MEMORY[0x24BD1B3A4]();
    }
    v9 = *a2;
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"MachO-64 CPU type not valid", (uint64_t *)&v10);
    (*(void (**)(uint64_t, llvm::jitlink::LinkGraph **))(*(_QWORD *)v9 + 24))(v9, &v10);
    result = v10;
    if (v10)
      return (llvm::jitlink::LinkGraph *)(*(uint64_t (**)(llvm::jitlink::LinkGraph *))(*(_QWORD *)v10 + 8))(v10);
  }
  return result;
}

uint64_t llvm::jitlink::buildTables_MachO_arm64@<X0>(llvm::jitlink *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  _QWORD v12[2];
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD v16[2];
  int v17;
  uint64_t v18;
  _OWORD v19[8];
  _OWORD v20[4];
  _OWORD v21[8];
  _OWORD v22[4];
  uint64_t *v23;
  uint64_t *v24;

  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0;
  v12[0] = 0;
  v12[1] = 0;
  v13 = 0;
  v14 = v16;
  v15 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v21);
  v22[0] = v21[0];
  v22[1] = v21[1];
  v22[2] = v21[2];
  v22[3] = v21[3];
  llvm::jitlink::LinkGraph::blocks(this, v19);
  v20[0] = v19[4];
  v20[1] = v19[5];
  v20[2] = v19[6];
  v20[3] = v19[7];
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v23, v22, (uint64_t *)v20);
  v5 = v23;
  v6 = v24;
  if (v23 != v24)
  {
    do
    {
      v7 = *v5;
      v8 = *(_QWORD *)(*v5 + 40);
      v9 = *(_QWORD *)(*v5 + 48);
      while (v8 != v9)
      {
        if ((llvm::jitlink::aarch64::GOTTableManager::visitEdge((uint64_t)v16, (uint64_t)this, v7, v8) & 1) == 0
          && *(_BYTE *)(v8 + 24) == 9
          && (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v8 + 16) + 8) & 1) == 0)
        {
          *(_QWORD *)v8 = llvm::jitlink::TableManager<llvm::jitlink::aarch64::PLTTableManager>::getEntryForTarget((uint64_t)v12, (uint64_t)this, *(_OWORD **)v8, v10);
        }
        v8 += 32;
      }
      ++v5;
    }
    while (v5 != v6);
    v5 = v23;
  }
  if (v5)
  {
    v24 = v5;
    operator delete(v5);
  }
  *a2 = 0;
  MEMORY[0x24BD1B398](v12[0], 8);
  return MEMORY[0x24BD1B398](v16[0], 8);
}

uint64_t llvm::jitlink::createLinkGraphFromMachOObject_arm64@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t result;
  _QWORD *v5;
  const char *v6;
  _QWORD *v7;
  __int128 *v8;
  int v9;
  _OWORD v10[2];
  char v11[12];
  int v12;
  std::string __p[2];
  llvm::formatv_object_base *v14[4];
  __int16 v15;
  int v16;
  _QWORD *v17;
  char v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v10[0] = *a1;
  v10[1] = v3;
  result = llvm::object::ObjectFile::createMachOObjectFile((uint64_t)v10, 0, 0, (uint64_t)&v17);
  if ((v18 & 1) != 0)
  {
    v7 = v17;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v7;
  }
  else
  {
    v5 = v17;
    if ((*(_DWORD *)(v17[2] + 8) & 0xFFFFFF) == 2)
      v6 = "arm64e-apple-darwin";
    else
      v6 = "arm64-apple-darwin";
    v14[0] = (llvm::formatv_object_base *)v6;
    v15 = 259;
    llvm::Triple::Triple(__p, v14);
    llvm::jitlink::MachOLinkGraphBuilder::MachOLinkGraphBuilder((uint64_t)v14, (uint64_t)v5, (__int128 *)__p, (uint64_t)llvm::jitlink::aarch64::getEdgeKindName);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v14[0] = (llvm::formatv_object_base *)&off_251C15830;
    v8 = (__int128 *)v5[34];
    if (v8)
    {
      getStruct<llvm::MachO::symtab_command>((uint64_t)v5, v8, (uint64_t)v11);
      v9 = v12;
    }
    else
    {
      v9 = 0;
    }
    v16 = v9;
    llvm::jitlink::MachOLinkGraphBuilder::buildGraph((llvm::jitlink::MachOLinkGraphBuilder *)v14, a2);
    llvm::jitlink::MachOLinkGraphBuilder::~MachOLinkGraphBuilder((llvm::jitlink::MachOLinkGraphBuilder *)v14);
    return (*(uint64_t (**)(_QWORD *))(*v5 + 8))(v5);
  }
  return result;
}

void llvm::jitlink::link_MachO_arm64(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  int64x2_t v17;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  int64x2_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t v29;
  __int128 *v30;
  uint64_t v31;
  int64x2_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  uint64_t v39;
  __int128 *v40;
  uint64_t v41;
  int64x2_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  uint64_t v50;
  __int128 *v51;
  uint64_t v52;
  int64x2_t v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  __int128 *v62;
  __int128 *v63;
  uint64_t v64;
  int64x2_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t v72;
  __int128 *v73;
  __int128 *v74;
  uint64_t v75;
  int64x2_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  unint64_t v81;
  char *v82;
  uint64_t v83;
  __int128 *v84;
  __int128 *v85;
  uint64_t v86;
  int64x2_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  __int128 *v95;
  __int128 *v96;
  uint64_t v97;
  int64x2_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  _QWORD *v102;
  uint64_t v103;
  llvm::jitlink::LinkGraph *v104;
  uint64_t v105;
  int64x2_t v106;
  uint64_t v107;
  __int128 v108;
  uint64_t v109;
  __int128 v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  _QWORD *v115;
  llvm::jitlink::LinkGraph *v116;
  uint64_t v117;
  uint64_t v118;
  int64x2_t v119;
  _OWORD v120[2];
  __int128 v121;
  _OWORD v122[2];
  __int128 v123;
  uint64_t v124;
  _BYTE v125[24];
  __int128 v126;
  uint64_t v127;
  __int128 v128;
  uint64_t v129;
  __int128 v130;
  uint64_t v131;
  __int128 v132;
  uint64_t v133;
  llvm::jitlink::LinkGraph *v134;
  uint64_t v135;
  _BYTE v136[47];
  __int128 v137;
  char *v138;
  const char *v139;
  __int128 v140;
  _QWORD v141[3];
  _QWORD v142[3];
  _QWORD v143[3];
  _QWORD v144[6];

  v144[3] = *MEMORY[0x24BDAC8D0];
  v124 = 0;
  v123 = 0u;
  v121 = 0u;
  memset(v122, 0, sizeof(v122));
  memset(v120, 0, sizeof(v120));
  v119 = 0u;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, (uint64_t)*a1 + 120))
  {
    (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 64))(&v139, *a2, (uint64_t)*a1 + 120);
    if (v141[0] < 8uLL)
    {
      *(_QWORD *)&v137 = llvm::jitlink::markAllSymbolsLive;
      v138 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
      if (v119.i64[1] >= *(_QWORD *)&v120[0])
      {
        v10 = (v119.i64[1] - v119.i64[0]) >> 5;
        if ((unint64_t)(v10 + 1) >> 59)
          goto LABEL_164;
        v11 = (*(_QWORD *)&v120[0] - v119.i64[0]) >> 4;
        if (v11 <= v10 + 1)
          v11 = v10 + 1;
        v12 = *(_QWORD *)&v120[0] - v119.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v11;
        *((_QWORD *)&v126 + 1) = v120;
        v13 = v12
            ? (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v120, v12): 0;
        v18 = (uint64_t)&v13[32 * v10];
        *(_QWORD *)v125 = v13;
        *(_QWORD *)&v125[8] = v18;
        *(_QWORD *)&v126 = &v13[32 * v12];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v18, &v137);
        v5 = v18 + 32;
        *(_QWORD *)&v125[16] = v18 + 32;
        v19 = (__int128 *)v119.i64[1];
        v20 = *(_QWORD *)&v125[8];
        if (v119.i64[1] == v119.i64[0])
        {
          v21 = vdupq_n_s64(v119.u64[1]);
        }
        else
        {
          do
          {
            v19 -= 2;
            v20 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v20 - 32, v19);
          }
          while (v19 != (__int128 *)v119.i64[0]);
          v21 = v119;
          v5 = *(_QWORD *)&v125[16];
        }
        v119.i64[0] = v20;
        v119.i64[1] = v5;
        *(int64x2_t *)&v125[8] = v21;
        v23 = *(_QWORD *)&v120[0];
        *(_QWORD *)&v120[0] = v126;
        *(_QWORD *)&v126 = v23;
        *(_QWORD *)v125 = v21.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v125);
      }
      else
      {
        v5 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v119.i64[1], &v137)+ 32;
      }
      v119.i64[1] = v5;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v137);
    }
    else
    {
      if (v119.i64[1] >= *(_QWORD *)&v120[0])
      {
        v6 = (v119.i64[1] - v119.i64[0]) >> 5;
        if ((unint64_t)(v6 + 1) >> 59)
          goto LABEL_164;
        v7 = (*(_QWORD *)&v120[0] - v119.i64[0]) >> 4;
        if (v7 <= v6 + 1)
          v7 = v6 + 1;
        v8 = *(_QWORD *)&v120[0] - v119.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v7;
        *((_QWORD *)&v126 + 1) = v120;
        v9 = v8
           ? (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v120, v8): 0;
        v14 = (uint64_t)&v9[32 * v6];
        *(_QWORD *)v125 = v9;
        *(_QWORD *)&v125[8] = v14;
        *(_QWORD *)&v126 = &v9[32 * v8];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v14, (__int128 *)&v139);
        v4 = v14 + 32;
        *(_QWORD *)&v125[16] = v14 + 32;
        v15 = (__int128 *)v119.i64[1];
        v16 = *(_QWORD *)&v125[8];
        if (v119.i64[1] == v119.i64[0])
        {
          v17 = vdupq_n_s64(v119.u64[1]);
        }
        else
        {
          do
          {
            v15 -= 2;
            v16 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v16 - 32, v15);
          }
          while (v15 != (__int128 *)v119.i64[0]);
          v17 = v119;
          v4 = *(_QWORD *)&v125[16];
        }
        v119.i64[0] = v16;
        v119.i64[1] = v4;
        *(int64x2_t *)&v125[8] = v17;
        v22 = *(_QWORD *)&v120[0];
        *(_QWORD *)&v120[0] = v126;
        *(_QWORD *)&v126 = v22;
        *(_QWORD *)v125 = v17.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v125);
      }
      else
      {
        v4 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v119.i64[1], (__int128 *)&v139)+ 32;
      }
      v119.i64[1] = v4;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v139);
    v139 = "__LD,__compact_unwind";
    *(_QWORD *)&v140 = 21;
    v141[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::CompactUnwindSplitter,llvm::jitlink::CompactUnwindSplitter,void>::Callbacks
            + 2;
    if (v119.i64[1] >= *(_QWORD *)&v120[0])
    {
      v25 = (v119.i64[1] - v119.i64[0]) >> 5;
      if ((unint64_t)(v25 + 1) >> 59)
        goto LABEL_164;
      v26 = (*(_QWORD *)&v120[0] - v119.i64[0]) >> 4;
      if (v26 <= v25 + 1)
        v26 = v25 + 1;
      v27 = *(_QWORD *)&v120[0] - v119.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v26;
      *((_QWORD *)&v126 + 1) = v120;
      v28 = v27
          ? (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v120, v27): 0;
      v29 = (uint64_t)&v28[32 * v25];
      *(_QWORD *)v125 = v28;
      *(_QWORD *)&v125[8] = v29;
      *(_QWORD *)&v126 = &v28[32 * v27];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v29, (__int128 *)&v139);
      v24 = v29 + 32;
      *(_QWORD *)&v125[16] = v29 + 32;
      v30 = (__int128 *)v119.i64[1];
      v31 = *(_QWORD *)&v125[8];
      if (v119.i64[1] == v119.i64[0])
      {
        v32 = vdupq_n_s64(v119.u64[1]);
      }
      else
      {
        do
        {
          v30 -= 2;
          v31 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v31 - 32, v30);
        }
        while (v30 != (__int128 *)v119.i64[0]);
        v32 = v119;
        v24 = *(_QWORD *)&v125[16];
      }
      v119.i64[0] = v31;
      v119.i64[1] = v24;
      *(int64x2_t *)&v125[8] = v32;
      v33 = *(_QWORD *)&v120[0];
      *(_QWORD *)&v120[0] = v126;
      *(_QWORD *)&v126 = v33;
      *(_QWORD *)v125 = v32.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v125);
    }
    else
    {
      v24 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v119.i64[1], (__int128 *)&v139)+ 32;
    }
    v119.i64[1] = v24;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v139);
    v139 = "__TEXT,__eh_frame";
    *(_QWORD *)&v140 = 17;
    v141[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DWARFRecordSectionSplitter,llvm::jitlink::DWARFRecordSectionSplitter,void>::Callbacks
            + 2;
    if (v24 >= *(_QWORD *)&v120[0])
    {
      v35 = (v119.i64[1] - v119.i64[0]) >> 5;
      if ((unint64_t)(v35 + 1) >> 59)
        goto LABEL_164;
      v36 = (*(_QWORD *)&v120[0] - v119.i64[0]) >> 4;
      if (v36 <= v35 + 1)
        v36 = v35 + 1;
      v37 = *(_QWORD *)&v120[0] - v119.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v36;
      *((_QWORD *)&v126 + 1) = v120;
      v38 = v37
          ? (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v120, v37): 0;
      v39 = (uint64_t)&v38[32 * v35];
      *(_QWORD *)v125 = v38;
      *(_QWORD *)&v125[8] = v39;
      *(_QWORD *)&v126 = &v38[32 * v37];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v39, (__int128 *)&v139);
      v34 = v39 + 32;
      *(_QWORD *)&v125[16] = v39 + 32;
      v40 = (__int128 *)v119.i64[1];
      v41 = *(_QWORD *)&v125[8];
      if (v119.i64[1] == v119.i64[0])
      {
        v42 = vdupq_n_s64(v119.u64[1]);
      }
      else
      {
        do
        {
          v40 -= 2;
          v41 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v41 - 32, v40);
        }
        while (v40 != (__int128 *)v119.i64[0]);
        v42 = v119;
        v34 = *(_QWORD *)&v125[16];
      }
      v119.i64[0] = v41;
      v119.i64[1] = v34;
      *(int64x2_t *)&v125[8] = v42;
      v43 = *(_QWORD *)&v120[0];
      *(_QWORD *)&v120[0] = v126;
      *(_QWORD *)&v126 = v43;
      *(_QWORD *)v125 = v42.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v125);
    }
    else
    {
      v34 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v24, (__int128 *)&v139)+ 32;
    }
    v119.i64[1] = v34;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v139);
    v44 = operator new(0x20uLL, (std::align_val_t)8uLL);
    v140 = xmmword_24AA2ACD0;
    *v44 = "__TEXT,__eh_frame";
    v44[1] = 17;
    *((_DWORD *)v44 + 4) = 8;
    *((_DWORD *)v44 + 5) = 84279812;
    *((_BYTE *)v44 + 24) = 8;
    v139 = (const char *)v44;
    v141[0] = &llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameEdgeFixer,llvm::jitlink::EHFrameEdgeFixer,void>::Callbacks;
    if (v119.i64[1] >= *(_QWORD *)&v120[0])
    {
      v46 = (v119.i64[1] - v119.i64[0]) >> 5;
      if ((unint64_t)(v46 + 1) >> 59)
        goto LABEL_164;
      v47 = (*(_QWORD *)&v120[0] - v119.i64[0]) >> 4;
      if (v47 <= v46 + 1)
        v47 = v46 + 1;
      v48 = *(_QWORD *)&v120[0] - v119.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v47;
      *((_QWORD *)&v126 + 1) = v120;
      v49 = v48
          ? (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v120, v48): 0;
      v50 = (uint64_t)&v49[32 * v46];
      *(_QWORD *)v125 = v49;
      *(_QWORD *)&v125[8] = v50;
      *(_QWORD *)&v126 = &v49[32 * v48];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v50, (__int128 *)&v139);
      v45 = v50 + 32;
      *(_QWORD *)&v125[16] = v50 + 32;
      v51 = (__int128 *)v119.i64[1];
      v52 = *(_QWORD *)&v125[8];
      if (v119.i64[1] == v119.i64[0])
      {
        v53 = vdupq_n_s64(v119.u64[1]);
      }
      else
      {
        do
        {
          v51 -= 2;
          v52 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v52 - 32, v51);
        }
        while (v51 != (__int128 *)v119.i64[0]);
        v53 = v119;
        v45 = *(_QWORD *)&v125[16];
      }
      v119.i64[0] = v52;
      v119.i64[1] = v45;
      *(int64x2_t *)&v125[8] = v53;
      v54 = *(_QWORD *)&v120[0];
      *(_QWORD *)&v120[0] = v126;
      *(_QWORD *)&v126 = v54;
      *(_QWORD *)v125 = v53.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v125);
    }
    else
    {
      v45 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v119.i64[1], (__int128 *)&v139)+ 32;
    }
    v119.i64[1] = v45;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v139);
    memset(&v136[7], 0, 40);
    v141[0] = 0;
    v55 = (char *)operator new(0x90uLL, (std::align_val_t)8uLL);
    v140 = xmmword_24AA2DD80;
    *(_QWORD *)v55 = &llvm::jitlink::aarch64::NullPointerContent;
    *((_QWORD *)v55 + 1) = 8;
    v55[16] = 2;
    *(_OWORD *)(v55 + 17) = *(_OWORD *)v136;
    *(_OWORD *)(v55 + 33) = *(_OWORD *)&v136[16];
    *((_OWORD *)v55 + 3) = *(_OWORD *)&v136[31];
    *((_QWORD *)v55 + 8) = 0;
    *((_QWORD *)v55 + 9) = 0;
    *((_DWORD *)v55 + 20) = 0;
    *((_QWORD *)v55 + 11) = 0;
    *((_QWORD *)v55 + 12) = 0;
    *((_DWORD *)v55 + 26) = 0;
    *((_DWORD *)v55 + 32) = 0;
    *((_QWORD *)v55 + 14) = 0;
    *((_QWORD *)v55 + 15) = 0;
    *((_QWORD *)v55 + 17) = llvm::jitlink::makeObjCMsgSendStub;
    v139 = v55;
    v141[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::ObjCStubsBuilder<llvm::jitlink::Block & (*)(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)>,llvm::jitlink::ObjCStubsBuilder<llvm::jitlink::Block & (*)(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)>,void>::Callbacks
            + 4;
    MEMORY[0x24BD1B398](0, 8);
    MEMORY[0x24BD1B398](0, 8);
    MEMORY[0x24BD1B398](0, 8);
    if (*(_QWORD *)&v120[1] >= *((_QWORD *)&v120[1] + 1))
    {
      v57 = (uint64_t)(*(_QWORD *)&v120[1] - *((_QWORD *)&v120[0] + 1)) >> 5;
      if ((unint64_t)(v57 + 1) >> 59)
        goto LABEL_164;
      v58 = (uint64_t)(*((_QWORD *)&v120[1] + 1) - *((_QWORD *)&v120[0] + 1)) >> 4;
      if (v58 <= v57 + 1)
        v58 = v57 + 1;
      v59 = *((_QWORD *)&v120[1] + 1) - *((_QWORD *)&v120[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v58;
      *((_QWORD *)&v126 + 1) = (char *)&v120[1] + 8;
      v60 = v59
          ? (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v120[1] + 8, v59): 0;
      v61 = (uint64_t)&v60[32 * v57];
      *(_QWORD *)v125 = v60;
      *(_QWORD *)&v125[8] = v61;
      *(_QWORD *)&v126 = &v60[32 * v59];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v61, (__int128 *)&v139);
      v56 = v61 + 32;
      *(_QWORD *)&v125[16] = v61 + 32;
      v63 = (__int128 *)*((_QWORD *)&v120[0] + 1);
      v62 = *(__int128 **)&v120[1];
      v64 = *(_QWORD *)&v125[8];
      if (*(_QWORD *)&v120[1] == *((_QWORD *)&v120[0] + 1))
      {
        v65 = vdupq_n_s64(*(unint64_t *)&v120[1]);
      }
      else
      {
        do
        {
          v62 -= 2;
          v64 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v64 - 32, v62);
        }
        while (v62 != v63);
        v65 = *(int64x2_t *)((char *)v120 + 8);
        v56 = *(_QWORD *)&v125[16];
      }
      *((_QWORD *)&v120[0] + 1) = v64;
      *(_QWORD *)&v120[1] = v56;
      *(int64x2_t *)&v125[8] = v65;
      v66 = *((_QWORD *)&v120[1] + 1);
      *((_QWORD *)&v120[1] + 1) = v126;
      *(_QWORD *)&v126 = v66;
      *(_QWORD *)v125 = v65.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v125);
    }
    else
    {
      v56 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v120[1], (__int128 *)&v139)+ 32;
    }
    *(_QWORD *)&v120[1] = v56;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v139);
    MEMORY[0x24BD1B398](0, 8);
    MEMORY[0x24BD1B398](0, 8);
    MEMORY[0x24BD1B398](0, 8);
    v139 = (const char *)llvm::jitlink::buildTables_MachO_arm64;
    v141[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
            + 2;
    if (*(_QWORD *)&v120[1] >= *((_QWORD *)&v120[1] + 1))
    {
      v68 = (uint64_t)(*(_QWORD *)&v120[1] - *((_QWORD *)&v120[0] + 1)) >> 5;
      if ((unint64_t)(v68 + 1) >> 59)
        goto LABEL_164;
      v69 = (uint64_t)(*((_QWORD *)&v120[1] + 1) - *((_QWORD *)&v120[0] + 1)) >> 4;
      if (v69 <= v68 + 1)
        v69 = v68 + 1;
      v70 = *((_QWORD *)&v120[1] + 1) - *((_QWORD *)&v120[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL ? 0x7FFFFFFFFFFFFFFLL : v69;
      *((_QWORD *)&v126 + 1) = (char *)&v120[1] + 8;
      v71 = v70
          ? (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v120[1] + 8, v70): 0;
      v72 = (uint64_t)&v71[32 * v68];
      *(_QWORD *)v125 = v71;
      *(_QWORD *)&v125[8] = v72;
      *(_QWORD *)&v126 = &v71[32 * v70];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v72, (__int128 *)&v139);
      v67 = v72 + 32;
      *(_QWORD *)&v125[16] = v72 + 32;
      v74 = (__int128 *)*((_QWORD *)&v120[0] + 1);
      v73 = *(__int128 **)&v120[1];
      v75 = *(_QWORD *)&v125[8];
      if (*(_QWORD *)&v120[1] == *((_QWORD *)&v120[0] + 1))
      {
        v76 = vdupq_n_s64(*(unint64_t *)&v120[1]);
      }
      else
      {
        do
        {
          v73 -= 2;
          v75 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v75 - 32, v73);
        }
        while (v73 != v74);
        v76 = *(int64x2_t *)((char *)v120 + 8);
        v67 = *(_QWORD *)&v125[16];
      }
      *((_QWORD *)&v120[0] + 1) = v75;
      *(_QWORD *)&v120[1] = v67;
      *(int64x2_t *)&v125[8] = v76;
      v77 = *((_QWORD *)&v120[1] + 1);
      *((_QWORD *)&v120[1] + 1) = v126;
      *(_QWORD *)&v126 = v77;
      *(_QWORD *)v125 = v76.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v125);
    }
    else
    {
      v67 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v120[1], (__int128 *)&v139)+ 32;
    }
    *(_QWORD *)&v120[1] = v67;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v139);
    if (*((_DWORD *)*a1 + 36) == 3 && *((_DWORD *)*a1 + 37) == 33)
    {
      v139 = (const char *)llvm::jitlink::aarch64::createEmptyPointerSigningFunction;
      v141[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
              + 2;
      if (*(_QWORD *)&v120[1] >= *((_QWORD *)&v120[1] + 1))
      {
        v79 = (uint64_t)(*(_QWORD *)&v120[1] - *((_QWORD *)&v120[0] + 1)) >> 5;
        if ((unint64_t)(v79 + 1) >> 59)
          goto LABEL_164;
        v80 = (uint64_t)(*((_QWORD *)&v120[1] + 1) - *((_QWORD *)&v120[0] + 1)) >> 4;
        if (v80 <= v79 + 1)
          v80 = v79 + 1;
        if (*((_QWORD *)&v120[1] + 1) - *((_QWORD *)&v120[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
          v81 = 0x7FFFFFFFFFFFFFFLL;
        else
          v81 = v80;
        *((_QWORD *)&v126 + 1) = (char *)&v120[1] + 8;
        if (v81)
          v82 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v120[1] + 8, v81);
        else
          v82 = 0;
        v83 = (uint64_t)&v82[32 * v79];
        *(_QWORD *)v125 = v82;
        *(_QWORD *)&v125[8] = v83;
        *(_QWORD *)&v126 = &v82[32 * v81];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v83, (__int128 *)&v139);
        v78 = v83 + 32;
        *(_QWORD *)&v125[16] = v83 + 32;
        v85 = (__int128 *)*((_QWORD *)&v120[0] + 1);
        v84 = *(__int128 **)&v120[1];
        v86 = *(_QWORD *)&v125[8];
        if (*(_QWORD *)&v120[1] == *((_QWORD *)&v120[0] + 1))
        {
          v87 = vdupq_n_s64(*(unint64_t *)&v120[1]);
        }
        else
        {
          do
          {
            v84 -= 2;
            v86 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v86 - 32, v84);
          }
          while (v84 != v85);
          v87 = *(int64x2_t *)((char *)v120 + 8);
          v78 = *(_QWORD *)&v125[16];
        }
        *((_QWORD *)&v120[0] + 1) = v86;
        *(_QWORD *)&v120[1] = v78;
        *(int64x2_t *)&v125[8] = v87;
        v88 = *((_QWORD *)&v120[1] + 1);
        *((_QWORD *)&v120[1] + 1) = v126;
        *(_QWORD *)&v126 = v88;
        *(_QWORD *)v125 = v87.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v125);
      }
      else
      {
        v78 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v120[1], (__int128 *)&v139)+ 32;
      }
      *(_QWORD *)&v120[1] = v78;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v139);
      v139 = (const char *)llvm::jitlink::aarch64::lowerPointer64AuthEdgesToSigningFunction;
      v141[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
              + 2;
      if (*(_QWORD *)&v122[1] < *((_QWORD *)&v122[1] + 1))
      {
        v89 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v122[1], (__int128 *)&v139)+ 32;
LABEL_151:
        *(_QWORD *)&v122[1] = v89;
        llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v139);
        goto LABEL_152;
      }
      v90 = (uint64_t)(*(_QWORD *)&v122[1] - *((_QWORD *)&v122[0] + 1)) >> 5;
      if (!((unint64_t)(v90 + 1) >> 59))
      {
        v91 = (uint64_t)(*((_QWORD *)&v122[1] + 1) - *((_QWORD *)&v122[0] + 1)) >> 4;
        if (v91 <= v90 + 1)
          v91 = v90 + 1;
        if (*((_QWORD *)&v122[1] + 1) - *((_QWORD *)&v122[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
          v92 = 0x7FFFFFFFFFFFFFFLL;
        else
          v92 = v91;
        *((_QWORD *)&v126 + 1) = (char *)&v122[1] + 8;
        if (v92)
          v93 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v122[1] + 8, v92);
        else
          v93 = 0;
        v94 = (uint64_t)&v93[32 * v90];
        *(_QWORD *)v125 = v93;
        *(_QWORD *)&v125[8] = v94;
        *(_QWORD *)&v126 = &v93[32 * v92];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v94, (__int128 *)&v139);
        v89 = v94 + 32;
        *(_QWORD *)&v125[16] = v94 + 32;
        v96 = (__int128 *)*((_QWORD *)&v122[0] + 1);
        v95 = *(__int128 **)&v122[1];
        v97 = *(_QWORD *)&v125[8];
        if (*(_QWORD *)&v122[1] == *((_QWORD *)&v122[0] + 1))
        {
          v98 = vdupq_n_s64(*(unint64_t *)&v122[1]);
        }
        else
        {
          do
          {
            v95 -= 2;
            v97 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v97 - 32, v95);
          }
          while (v95 != v96);
          v98 = *(int64x2_t *)((char *)v122 + 8);
          v89 = *(_QWORD *)&v125[16];
        }
        *((_QWORD *)&v122[0] + 1) = v97;
        *(_QWORD *)&v122[1] = v89;
        *(int64x2_t *)&v125[8] = v98;
        v99 = *((_QWORD *)&v122[1] + 1);
        *((_QWORD *)&v122[1] + 1) = v126;
        *(_QWORD *)&v126 = v99;
        *(_QWORD *)v125 = v98.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v125);
        goto LABEL_151;
      }
LABEL_164:
      abort();
    }
  }
LABEL_152:
  (*(void (**)(_BYTE *__return_ptr))(*(_QWORD *)*a2 + 72))(v125);
  if (*(_QWORD *)v125)
  {
    v100 = *a2;
    v118 = *(_QWORD *)v125;
    *(_QWORD *)v125 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v100 + 24))(v100, &v118);
    if (v118)
      (*(void (**)(uint64_t))(*(_QWORD *)v118 + 8))(v118);
    v101 = *(_QWORD *)v125;
    if (*(_QWORD *)v125)
LABEL_156:
      (*(void (**)(uint64_t))(*(_QWORD *)v101 + 8))(v101);
  }
  else
  {
    v102 = (_QWORD *)operator new();
    v103 = *a2;
    *a2 = 0;
    v104 = *a1;
    *a1 = 0;
    v105 = *(_QWORD *)&v120[0];
    v106 = v119;
    v119 = 0uLL;
    v107 = *((_QWORD *)&v120[1] + 1);
    v108 = *(_OWORD *)((char *)v120 + 8);
    memset(v120, 0, sizeof(v120));
    v109 = *(_QWORD *)&v122[0];
    v110 = v121;
    v121 = 0uLL;
    v111 = *((_QWORD *)&v122[1] + 1);
    v112 = *(_OWORD *)((char *)v122 + 8);
    memset(v122, 0, sizeof(v122));
    v113 = v124;
    v114 = v123;
    v123 = 0uLL;
    v124 = 0;
    v134 = v104;
    v135 = v103;
    *(int64x2_t *)v125 = v106;
    v139 = 0;
    v140 = 0uLL;
    v126 = v108;
    *(_QWORD *)&v125[16] = v105;
    v127 = v107;
    memset(v141, 0, sizeof(v141));
    v128 = v110;
    memset(v142, 0, sizeof(v142));
    v130 = v112;
    v129 = v109;
    v131 = v111;
    memset(v143, 0, sizeof(v143));
    v132 = v114;
    v133 = v113;
    memset(v144, 0, 24);
    llvm::jitlink::JITLinkerBase::JITLinkerBase(v102, &v135, (uint64_t *)&v134, (uint64_t)v125);
    *v115 = &off_251C158B0;
    *(_QWORD *)&v137 = &v132;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v137);
    *(_QWORD *)&v137 = &v130;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v137);
    *(_QWORD *)&v137 = &v128;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v137);
    *(_QWORD *)&v137 = &v126;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v137);
    *(_QWORD *)&v137 = v125;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v137);
    v116 = v134;
    v134 = 0;
    if (v116)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v116);
      MEMORY[0x24BD1B3A4]();
    }
    v117 = v135;
    v135 = 0;
    if (v117)
      (*(void (**)(uint64_t))(*(_QWORD *)v117 + 8))(v117);
    *v102 = &off_251C15888;
    v102[19] = 0;
    *(_QWORD *)v125 = v144;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v125);
    *(_QWORD *)v125 = v143;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v125);
    *(_QWORD *)v125 = v142;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v125);
    *(_QWORD *)v125 = v141;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v125);
    *(_QWORD *)v125 = &v139;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v125);
    *(_QWORD *)v125 = v102;
    llvm::jitlink::JITLinkerBase::linkPhase1((uint64_t)v102, (uint64_t *)v125);
    v101 = *(_QWORD *)v125;
    *(_QWORD *)v125 = 0;
    if (v101)
      goto LABEL_156;
  }
  *(_QWORD *)v125 = &v123;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v125);
  *(_QWORD *)v125 = (char *)v122 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v125);
  *(_QWORD *)v125 = &v121;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v125);
  *(_QWORD *)v125 = (char *)v120 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v125);
  *(_QWORD *)v125 = &v119;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v125);
}

_QWORD *llvm::jitlink::makeObjCMsgSendStub(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v6;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11[2];

  v11[0] = (uint64_t)&llvm::jitlink::makeObjCMsgSendStub(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)::StubBytes;
  v11[1] = 32;
  v9 = 4;
  v10 = 0;
  v8 = 0;
  v6 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a1, a2, v11, &v10, &v9, &v8);
  llvm::jitlink::Block::addEdge(v6, 12, 0, a3, 0);
  llvm::jitlink::Block::addEdge(v6, 13, 4, a3, 0);
  llvm::jitlink::Block::addEdge(v6, 14, 8, a4, 0);
  llvm::jitlink::Block::addEdge(v6, 15, 12, a4, 0);
  return v6;
}

void `anonymous namespace'::MachOLinkGraphBuilder_arm64::~MachOLinkGraphBuilder_arm64(_anonymous_namespace_::MachOLinkGraphBuilder_arm64 *this)
{
  llvm::jitlink::MachOLinkGraphBuilder::~MachOLinkGraphBuilder(this);
  JUMPOUT(0x24BD1B3A4);
}

void `anonymous namespace'::MachOLinkGraphBuilder_arm64::addRelocations(_anonymous_namespace_::MachOLinkGraphBuilder_arm64 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  const char *v25;
  const char *v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  unint64_t v34;
  relocation_info Relocation;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::formatv_object_base *v40;
  uint64_t v41;
  const char *v42;
  uint64_t v43;
  _QWORD v44[2];
  _QWORD *v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  char v49;
  llvm::formatv_object_base *v50[4];
  __int16 v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 13);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 352))(v4);
  v7 = v6;
  v33 = v4;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 360))(v4);
  v38 = v5;
  v39 = v7;
  if (v7 != v9 || v5 != v8)
  {
    v11 = v8;
    v12 = v9;
    v31 = v8;
    v32 = a2;
    v30 = v9;
    while (1)
    {
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 152))(v7, v5);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 224))(v39, v38))
        break;
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 272))(v39, v38);
      if (v14 != (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 280))(v39, v38))
      {
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Virtual section contains relocations", a2);
        return;
      }
LABEL_61:
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v39 + 136))(v39, &v38);
      v5 = v38;
      v7 = v39;
      if (v39 == v12 && v38 == v11)
        goto LABEL_63;
    }
    v15 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v33 + 160))(v33, v38);
    llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(this, v15, (uint64_t)&v48);
    if ((v49 & 1) != 0)
    {
      v19 = v48;
      v48 = 0;
      *a2 = v19;
      v18 = 1;
    }
    else
    {
      if (*(_QWORD *)(v48 + 80))
      {
        v36 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 272))(v39, v38);
        v37 = v16;
        v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v39 + 280))(v39, v38);
        if (v36 == v17)
        {
          v18 = 0;
LABEL_55:
          v12 = v30;
          v11 = v31;
          goto LABEL_56;
        }
        v20 = v17;
        Relocation = 0;
        Relocation = (relocation_info)llvm::object::MachOObjectFile::getRelocation(*((_QWORD *)this + 13), v36);
        v21 = v47;
        if ((v47 & 1) != 0)
        {
          *a2 = v46;
          v18 = 1;
          goto LABEL_55;
        }
        v34 = v13 + Relocation.r_address;
        llvm::jitlink::MachOLinkGraphBuilder::findSymbolByAddress((uint64_t)this, v48, v34, (uint64_t)&v40);
        if ((v41 & 1) != 0)
        {
          *a2 = (uint64_t)v40;
          v18 = 1;
        }
        else
        {
          if ((1 << (((unint64_t)*((unsigned int *)&Relocation + 1) >> 25) & 3)) + v34 <= *(_QWORD *)(*((_QWORD *)v40 + 2) + 32) + **((_QWORD **)v40 + 2))
          {
            v23 = v46;
            if (v46 != 14)
LABEL_28:
              __asm { BR              X9 }
            if (v36 == v20)
            {
              v40 = (llvm::formatv_object_base *)"{0:x16}";
              v41 = 7;
              v18 = 1;
              v42 = (const char *)&v45;
              v43 = 1;
              v44[0] = &off_251C144D8;
              v44[1] = &v34;
              v45 = v44;
              v24 = operator new();
              v50[0] = (llvm::formatv_object_base *)"Unpaired Addend reloc at ";
              v50[2] = (llvm::formatv_object_base *)&v40;
              v51 = 1539;
              *(_QWORD *)v24 = off_251C15728;
              llvm::Twine::str(v50, (std::string *)(v24 + 8));
              a2 = v32;
              *v32 = v24;
              goto LABEL_21;
            }
            (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)v37 + 296))(v37, &v36);
            Relocation = (relocation_info)llvm::object::MachOObjectFile::getRelocation(*((_QWORD *)this + 13), v36);
            v21 = v21 & 0xFE | v41 & 1;
            v47 = v21;
            if ((v41 & 1) != 0)
            {
              v46 = 0;
              a2 = v32;
              *v32 = (uint64_t)v40;
            }
            else
            {
              v23 = v40;
              LOBYTE(v46) = (_BYTE)v40;
              v25 = "MachOPointer64";
              switch((char)v40)
              {
                case 2:
                case 7:
                case 8:
                  if (v13 + Relocation.r_address == v34)
                    goto LABEL_28;
                  a2 = v32;
                  llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Paired relocation points at different target", v32);
                  break;
                case 4:
                  goto LABEL_53;
                case 5:
                  v25 = "MachOPointer64Anon";
                  goto LABEL_53;
                case 6:
                  v25 = "MachOPointer64Authenticated";
                  goto LABEL_53;
                case 9:
                  v25 = "MachOGOTPage21";
                  goto LABEL_53;
                case 10:
                  v25 = "MachOGOTPageOffset12";
                  goto LABEL_53;
                case 11:
                  v25 = "MachOTLVPage21";
                  goto LABEL_53;
                case 12:
                  v25 = "MachOTLVPageOffset12";
                  goto LABEL_53;
                case 13:
                  v25 = "MachOPointerToGOT";
                  goto LABEL_53;
                case 14:
                  v25 = "MachOPairedAddend";
                  goto LABEL_53;
                case 15:
                  v25 = "MachOLDRLiteral19";
                  goto LABEL_53;
                case 16:
                  v25 = "MachODelta32";
                  goto LABEL_53;
                case 17:
                  v25 = "MachODelta64";
                  goto LABEL_53;
                case 18:
                  v25 = "MachONegDelta32";
                  goto LABEL_53;
                case 19:
                  v25 = "MachONegDelta64";
                  goto LABEL_53;
                default:
                  v26 = "<Unrecognized edge kind>";
                  if (v40 == 1)
                    v26 = "Keep-Alive";
                  if ((_BYTE)v40)
                    v25 = v26;
                  else
                    v25 = "INVALID RELOCATION";
LABEL_53:
                  v27 = strlen(v25);
                  v28 = operator new();
                  v40 = (llvm::formatv_object_base *)"Invalid relocation pair: Addend + ";
                  v42 = v25;
                  v43 = v27;
                  LOWORD(v44[0]) = 1283;
                  *(_QWORD *)v28 = off_251C15728;
                  llvm::Twine::str(&v40, (std::string *)(v28 + 8));
                  a2 = v32;
                  *v32 = v28;
                  break;
              }
            }
          }
          else
          {
            v22 = operator new();
            v40 = (llvm::formatv_object_base *)"Relocation content extends past end of fixup block";
            LOWORD(v44[0]) = 259;
            *(_QWORD *)v22 = off_251C15728;
            llvm::Twine::str(&v40, (std::string *)(v22 + 8));
            *a2 = v22;
          }
          v18 = 1;
        }
LABEL_21:
        if ((v21 & 1) != 0 && v46)
          (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
        goto LABEL_55;
      }
      v18 = 5;
    }
LABEL_56:
    if ((v49 & 1) != 0)
    {
      v29 = v48;
      v48 = 0;
      if (v29)
        (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    }
    if (v18 != 5 && v18)
      return;
    goto LABEL_61;
  }
LABEL_63:
  *a2 = 0;
}

void llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(llvm::jitlink::MachOLinkGraphBuilder *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD v8[2];
  _QWORD *v9;
  int v10;
  llvm::formatv_object_base *v11[4];
  __int16 v12;

  v10 = a2;
  v7[0] = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>((uint64_t *)this + 16, &v10, v7)|| v7[0] == *((_QWORD *)this + 16) + 120 * *((unsigned int *)this + 36))
  {
    v7[0] = "{0:d}";
    v7[1] = 5;
    v7[2] = &v9;
    v7[3] = 1;
    v8[0] = &off_251C158D8;
    v8[1] = &v10;
    v9 = v8;
    v5 = operator new();
    v11[0] = (llvm::formatv_object_base *)"No section recorded for index ";
    v11[2] = (llvm::formatv_object_base *)v7;
    v12 = 1539;
    *(_QWORD *)v5 = off_251C15728;
    llvm::Twine::str(v11, (std::string *)(v5 + 8));
    v6 = *(_BYTE *)(a3 + 8) | 1;
  }
  else
  {
    v5 = v7[0] + 8;
    v6 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  *(_BYTE *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v5;
}

void `anonymous namespace'::MachOLinkGraphBuilder_arm64::getRelocationKind(_anonymous_namespace_::MachOLinkGraphBuilder_arm64 *this, const relocation_info *a2)
{
  unsigned int v3;
  int v4;
  char v5;
  int v6;
  const char *v7;
  const char *v8;
  uint64_t v9;
  char v10;
  __int128 *v11;
  char v12;
  const char *v13;
  __int128 *v14;
  uint64_t v15;
  int v16;
  _QWORD v17[4];
  _QWORD v18[2];
  _QWORD *v19;
  unsigned int v20;
  _QWORD v21[4];
  _QWORD v22[2];
  _QWORD *v23;
  int v24;
  _QWORD v25[4];
  _QWORD v26[2];
  _QWORD *v27;
  _QWORD v28[4];
  _QWORD v29[2];
  _QWORD *v30;
  _QWORD v31[4];
  __int16 v32;
  _QWORD v33[4];
  __int16 v34;
  _QWORD v35[4];
  __int16 v36;
  _QWORD v37[4];
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  __int128 v51;
  uint64_t v52;
  _QWORD v53[4];
  char v54;
  char v55;
  int v56;
  __int16 v57;
  llvm::formatv_object_base *v58[4];
  char v59;
  char v60;
  int v61;
  __int16 v62;

  v3 = *((_DWORD *)a2 + 1);
  switch(v3 >> 28)
  {
    case 0u:
      if ((v3 & 0x1000000) != 0)
        goto LABEL_33;
      v4 = (v3 >> 25) & 3;
      if (v4 == 2)
      {
        *((_BYTE *)this + 8) &= ~1u;
        v5 = 3;
      }
      else
      {
        if (v4 != 3)
          goto LABEL_33;
        if ((v3 & 0x8000000) != 0)
          v5 = 4;
        else
          v5 = 5;
        *((_BYTE *)this + 8) &= ~1u;
      }
      goto LABEL_59;
    case 1u:
      if ((v3 & 0x9000000) != 0x8000000)
        goto LABEL_33;
      v6 = (v3 >> 25) & 3;
      if (v6 == 3)
      {
        *((_BYTE *)this + 8) &= ~1u;
        v5 = 17;
        goto LABEL_59;
      }
      if (v6 == 2)
      {
        *((_BYTE *)this + 8) &= ~1u;
        v5 = 16;
LABEL_59:
        *(_BYTE *)this = v5;
        return;
      }
LABEL_33:
      v28[1] = 6;
      v28[2] = &v30;
      v28[3] = 1;
      v29[0] = &off_251C15858;
      v29[1] = a2;
      v30 = v29;
      v31[0] = "Unsupported arm64 relocation: address=";
      v31[2] = v28;
      v32 = 1539;
      v33[0] = v31;
      v33[2] = ", symbolnum=";
      v34 = 770;
      v24 = v3 & 0xFFFFFF;
      v25[0] = "{0:x6}";
      v25[1] = 6;
      v25[2] = &v27;
      v25[3] = 1;
      v26[0] = &off_251C12BB8;
      v26[1] = &v24;
      v27 = v26;
      v28[0] = "{0:x8}";
      v35[0] = v33;
      v35[2] = v25;
      v36 = 1538;
      v37[0] = v35;
      v37[2] = ", kind=";
      v38 = 770;
      v20 = v3 >> 28;
      v21[0] = "{0:x1}";
      v21[1] = 6;
      v21[2] = &v23;
      v21[3] = 1;
      v22[0] = &off_251C12BB8;
      v22[1] = &v20;
      v23 = v22;
      v39[0] = v37;
      v39[2] = v21;
      v40 = 1538;
      *(_QWORD *)&v41 = v39;
      *(_QWORD *)&v42 = ", pc_rel=";
      LOWORD(v43) = 770;
      v7 = "false";
      if ((v3 & 0x1000000) != 0)
        v8 = "true";
      else
        v8 = "false";
      v9 = *(unsigned __int8 *)v8;
      if (*v8)
      {
        *(_QWORD *)&v44 = &v41;
        *(_QWORD *)&v45 = v8;
        v10 = 2;
        v11 = &v44;
        LOWORD(v46) = 770;
        goto LABEL_38;
      }
      v44 = v41;
      v45 = v42;
      v46 = v43;
      if (v43 != 1)
      {
        v9 = *((_QWORD *)&v44 + 1);
        v11 = (__int128 *)v44;
        if (BYTE1(v46) == 1)
        {
          v10 = v43;
        }
        else
        {
          v11 = &v44;
          v10 = 2;
        }
LABEL_38:
        *(_QWORD *)&v47 = v11;
        *((_QWORD *)&v47 + 1) = v9;
        *(_QWORD *)&v48 = ", extern=";
        LOBYTE(v49) = v10;
        BYTE1(v49) = 3;
        if ((v3 & 0x8000000) != 0)
          v7 = "true";
        if (*v7)
        {
          v12 = 2;
          v13 = (const char *)&v47;
LABEL_42:
          *(_QWORD *)&v50 = v13;
          *(_QWORD *)&v51 = v7;
          LOBYTE(v52) = v12;
          BYTE1(v52) = 3;
          goto LABEL_49;
        }
        goto LABEL_48;
      }
      v13 = ", extern=";
      *(_QWORD *)&v47 = ", extern=";
      LOWORD(v49) = 259;
      if ((v3 & 0x8000000) != 0)
        v7 = "true";
      if (*v7)
      {
        v12 = 3;
        goto LABEL_42;
      }
LABEL_48:
      v50 = v47;
      v51 = v48;
      v52 = v49;
      v12 = v49;
LABEL_49:
      if (BYTE1(v52) != 1)
        v12 = 2;
      v14 = &v50;
      if (BYTE1(v52) == 1)
        v14 = (__int128 *)v50;
      v53[0] = v14;
      v53[1] = *((_QWORD *)&v50 + 1);
      v53[2] = ", length=";
      v54 = v12;
      v55 = 3;
      v16 = (v3 >> 25) & 3;
      v17[0] = "{0:d}";
      v17[1] = 5;
      v17[2] = &v19;
      v17[3] = 1;
      v18[0] = &off_251C12BB8;
      v18[1] = &v16;
      v19 = v18;
      v15 = operator new();
      v58[0] = (llvm::formatv_object_base *)v53;
      v58[2] = (llvm::formatv_object_base *)v17;
      v59 = 2;
      v60 = 6;
      v61 = v56;
      v62 = v57;
      *(_QWORD *)v15 = off_251C15728;
      llvm::Twine::str(v58, (std::string *)(v15 + 8));
      *((_BYTE *)this + 8) |= 1u;
      *(_QWORD *)this = v15;
      return;
    case 2u:
      if ((v3 & 0xF000000) != 0xD000000)
        goto LABEL_33;
      *((_BYTE *)this + 8) &= ~1u;
      v5 = 2;
      goto LABEL_59;
    case 3u:
      if ((v3 & 0xF000000) != 0xD000000)
        goto LABEL_33;
      *((_BYTE *)this + 8) &= ~1u;
      v5 = 7;
      goto LABEL_59;
    case 4u:
      if ((v3 & 0xF000000) != 0xC000000)
        goto LABEL_33;
      *((_BYTE *)this + 8) &= ~1u;
      v5 = 8;
      goto LABEL_59;
    case 5u:
      if ((v3 & 0xF000000) != 0xD000000)
        goto LABEL_33;
      *((_BYTE *)this + 8) &= ~1u;
      v5 = 9;
      goto LABEL_59;
    case 6u:
      if ((v3 & 0xF000000) != 0xC000000)
        goto LABEL_33;
      *((_BYTE *)this + 8) &= ~1u;
      v5 = 10;
      goto LABEL_59;
    case 7u:
      if ((v3 & 0xF000000) != 0xD000000)
        goto LABEL_33;
      *((_BYTE *)this + 8) &= ~1u;
      v5 = 13;
      goto LABEL_59;
    case 8u:
      if ((v3 & 0xF000000) != 0xD000000)
        goto LABEL_33;
      *((_BYTE *)this + 8) &= ~1u;
      v5 = 11;
      goto LABEL_59;
    case 9u:
      if ((v3 & 0xF000000) != 0xC000000)
        goto LABEL_33;
      *((_BYTE *)this + 8) &= ~1u;
      v5 = 12;
      goto LABEL_59;
    case 0xAu:
      if ((v3 & 0xF000000) != 0x4000000)
        goto LABEL_33;
      *((_BYTE *)this + 8) &= ~1u;
      v5 = 14;
      goto LABEL_59;
    case 0xBu:
      if ((v3 & 0xF000000) != 0xE000000)
        goto LABEL_33;
      *((_BYTE *)this + 8) &= ~1u;
      v5 = 6;
      goto LABEL_59;
    default:
      goto LABEL_33;
  }
}

void llvm::jitlink::MachOLinkGraphBuilder::findSymbolByAddress(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t SymbolByAddress;
  uint64_t v7;
  _QWORD v8[4];
  _QWORD v9[2];
  _QWORD *v10;
  unint64_t v11;
  llvm::formatv_object_base *v12[4];
  __int16 v13;

  v11 = a3;
  SymbolByAddress = llvm::jitlink::MachOLinkGraphBuilder::getSymbolByAddress(a1, a2, a3);
  if (SymbolByAddress
    && (*(_QWORD *)(SymbolByAddress + 24) & 0x1FFFFFFFFFFFFFFuLL)
     + *(_QWORD *)(SymbolByAddress + 32)
     + **(_QWORD **)(SymbolByAddress + 16) >= a3)
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = SymbolByAddress;
  }
  else
  {
    v8[0] = "{0:x16}";
    v8[1] = 7;
    v8[2] = &v10;
    v8[3] = 1;
    v9[0] = &off_251C144D8;
    v9[1] = &v11;
    v10 = v9;
    v7 = operator new();
    v12[0] = (llvm::formatv_object_base *)"No symbol covering address ";
    v12[2] = (llvm::formatv_object_base *)v8;
    v13 = 1539;
    *(_QWORD *)v7 = off_251C15728;
    llvm::Twine::str(v12, (std::string *)(v7 + 8));
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v7;
  }
}

void llvm::jitlink::MachOLinkGraphBuilder::findSymbolByIndex(llvm::jitlink::MachOLinkGraphBuilder *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  _QWORD v7[4];
  _QWORD v8[2];
  _QWORD *v9;
  uint64_t v10;
  llvm::formatv_object_base *v11[4];
  __int16 v12;

  v10 = a2;
  LODWORD(v11[0]) = a2;
  v7[0] = 0;
  if (!llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)this + 20, v11, v7)|| v7[0] == *((_QWORD *)this + 20) + 16 * *((unsigned int *)this + 44))
  {
    v7[0] = "{0:d}";
    v7[1] = 5;
    v7[2] = &v9;
    v7[3] = 1;
    v8[0] = &off_251C14EA8;
    v8[1] = &v10;
    v9 = v8;
    v5 = operator new();
    v11[0] = (llvm::formatv_object_base *)"No symbol at index ";
    v11[2] = (llvm::formatv_object_base *)v7;
    v12 = 1539;
    *(_QWORD *)v5 = off_251C15728;
    llvm::Twine::str(v11, (std::string *)(v5 + 8));
    v6 = *(_BYTE *)(a3 + 8) | 1;
  }
  else
  {
    v5 = *(_QWORD *)(v7[0] + 8);
    v6 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  *(_BYTE *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v5;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_DWORD *)(*a1 + 120 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_DWORD *)(v4 + 120 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

void llvm::detail::provider_format_adapter<unsigned int &>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<unsigned int &>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<unsigned int,void>::format(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

void llvm::detail::provider_format_adapter<int const&>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<int const&>::format(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  return llvm::format_provider<int,void>::format(*(unsigned int **)(a1 + 8), a2, a3, a4);
}

llvm::raw_ostream *llvm::format_provider<int,void>::format(unsigned int *a1, llvm::raw_ostream *a2, unsigned __int8 *a3, uint64_t a4)
{
  unint64_t *v6;
  int v7;
  int v8;
  unint64_t v9;
  unint64_t v10;
  int v12;
  unsigned int v13;
  size_t v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  size_t v18;

  v16 = a3;
  v17 = a4;
  v15 = 0;
  if (!llvm::detail::HelperFunctions::consumeHexStyle((const void **)&v16, &v15))
  {
    if (v17)
    {
      v12 = 0;
      v13 = *v16;
      if (v13 <= 0x63)
      {
        if (v13 != 68)
        {
          if (v13 != 78)
            goto LABEL_19;
          goto LABEL_16;
        }
LABEL_17:
        v12 = 0;
        ++v16;
        goto LABEL_18;
      }
      if (v13 == 100)
        goto LABEL_17;
      if (v13 == 110)
      {
LABEL_16:
        ++v16;
        v12 = 1;
LABEL_18:
        --v17;
      }
    }
    else
    {
      v12 = 0;
    }
LABEL_19:
    v18 = 0;
    if (llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6))
      v14 = 0;
    else
      v14 = v18;
    return llvm::write_integer(a2, *a1, v14, v12);
  }
  v7 = v15;
  v18 = 0;
  v8 = llvm::consumeUnsignedInteger((llvm *)&v16, (llvm::StringRef *)0xA, &v18, v6);
  v9 = v18;
  if (v8)
    v9 = 0;
  if ((v7 & 0xFFFFFFFE) == 2)
    v10 = v9 + 2;
  else
    v10 = v9;
  return llvm::write_hex(a2, (int)*a1, v7, v10, 1);
}

uint64_t llvm::jitlink::MachOLinkGraphBuilder::getSymbolByAddress(uint64_t a1, uint64_t a2, unint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  unint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;

  v3 = (_QWORD *)(a2 + 96);
  v4 = *(_QWORD **)(a2 + 96);
  if (v4)
  {
    do
    {
      v5 = v4[4];
      v6 = v5 > a3;
      if (v5 <= a3)
        v7 = v4 + 1;
      else
        v7 = v4;
      if (v6)
        v3 = v4;
      v4 = (_QWORD *)*v7;
    }
    while (*v7);
  }
  if (v3 == *(_QWORD **)(a2 + 88))
    return 0;
  v8 = (_QWORD *)*v3;
  if (*v3)
  {
    do
    {
      v9 = v8;
      v8 = (_QWORD *)v8[1];
    }
    while (v8);
  }
  else
  {
    do
    {
      v9 = (_QWORD *)v3[2];
      v10 = *v9 == (_QWORD)v3;
      v3 = v9;
    }
    while (v10);
  }
  return v9[5];
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(uint64_t *a1, _DWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _DWORD *v7;
  int v8;
  uint64_t result;
  _DWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = (37 * *a2) & (v3 - 1);
    v7 = (_DWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -1)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -2;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_DWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(_QWORD *a1, _OWORD *a2, uint64_t *a3)
{
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  _OWORD v17[4];
  _OWORD v18[4];
  _OWORD v19[3];
  __int128 v20;
  _BYTE v21[64];

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v6 = a2[1];
  v19[0] = *a2;
  v19[1] = v6;
  v7 = a2[3];
  v19[2] = a2[2];
  v20 = v7;
  v8 = *a3;
  v9 = a3[6];
  if (*(_QWORD *)&v19[0] != *a3 || (v10 = 0, (_QWORD)v20 != v9))
  {
    v10 = 0;
    do
    {
      ++v10;
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v19, (uint64_t)v21);
    }
    while (*(_QWORD *)&v19[0] != v8 || (_QWORD)v20 != v9);
  }
  v12 = a2[1];
  v18[0] = *a2;
  v18[1] = v12;
  v13 = a2[3];
  v18[2] = a2[2];
  v18[3] = v13;
  v14 = *((_OWORD *)a3 + 1);
  v17[0] = *(_OWORD *)a3;
  v17[1] = v14;
  v15 = *((_OWORD *)a3 + 3);
  v17[2] = *((_OWORD *)a3 + 2);
  v17[3] = v15;
  std::vector<llvm::jitlink::Block *>::__init_with_size[abi:nn180100]<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>>(a1, v18, v17, v10);
  return a1;
}

_QWORD *std::vector<llvm::jitlink::Block *>::__init_with_size[abi:nn180100]<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>>(_QWORD *result, _OWORD *a2, _OWORD *a3, unint64_t a4)
{
  _QWORD *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  _OWORD v11[4];
  _OWORD v12[4];

  if (a4)
  {
    v6 = result;
    std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](result, a4);
    v7 = a2[1];
    v12[0] = *a2;
    v12[1] = v7;
    v8 = a2[3];
    v12[2] = a2[2];
    v12[3] = v8;
    v9 = a3[1];
    v11[0] = *a3;
    v11[1] = v9;
    v10 = a3[3];
    v11[2] = a3[2];
    v11[3] = v10;
    result = std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<llvm::jitlink::Block *>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::Block **>((uint64_t)(v6 + 2), v12, (uint64_t *)v11, (_QWORD *)v6[1]);
    v6[1] = result;
  }
  return result;
}

_QWORD *std::__uninitialized_allocator_copy[abi:nn180100]<std::allocator<llvm::jitlink::Block *>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,llvm::jitlink::Block **>(uint64_t a1, _OWORD *a2, uint64_t *a3, _QWORD *a4)
{
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _OWORD v12[3];
  __int128 v13;
  _BYTE v14[64];

  v5 = a2[1];
  v12[0] = *a2;
  v12[1] = v5;
  v6 = a2[3];
  v12[2] = a2[2];
  v13 = v6;
  v7 = *a3;
  v8 = a3[6];
  v9 = (_QWORD *)v6;
  if (*(_QWORD *)&v12[0] != *a3 || (_QWORD)v6 != v8)
  {
    do
    {
      *a4++ = *v9;
      llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>::operator++((uint64_t)v12, (uint64_t)v14);
      v9 = (_QWORD *)v13;
    }
    while (*(_QWORD *)&v12[0] != v7 || (_QWORD)v13 != v8);
  }
  return a4;
}

uint64_t llvm::jitlink::aarch64::GOTTableManager::visitEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char v4;
  uint64_t result;

  v4 = 12;
  switch(*(_BYTE *)(a4 + 24))
  {
    case 0xE:
    case 0x11:
      goto LABEL_5;
    case 0xF:
    case 0x12:
      v4 = 13;
      goto LABEL_5;
    case 0x10:
      v4 = 6;
LABEL_5:
      *(_BYTE *)(a4 + 24) = v4;
      *(_QWORD *)a4 = llvm::jitlink::TableManager<llvm::jitlink::aarch64::GOTTableManager>::getEntryForTarget(a1, a2, *(_OWORD **)a4, (unint64_t *)a4);
      result = 1;
      break;
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::aarch64::GOTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  int v7;
  uint64_t v8;
  _QWORD *Entry;
  unint64_t *v10;
  __int128 v12;
  _QWORD *v13;
  _OWORD v14[2];

  v14[0] = *a3;
  *(_QWORD *)&v12 = 0;
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v14, &v12, a4);
  v8 = v12;
  if (!v7)
    v8 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  if (v8 == *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    Entry = llvm::jitlink::aarch64::GOTTableManager::createEntry(a1, a2, (uint64_t)a3);
    v12 = *a3;
    v13 = Entry;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v12, &v13, v10, (uint64_t)v14);
    v8 = *(_QWORD *)&v14[0];
  }
  return *(_QWORD *)(v8 + 16);
}

_QWORD *llvm::jitlink::aarch64::GOTTableManager::createEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Section;
  _QWORD *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12[2];

  Section = *(_QWORD *)(a1 + 24);
  if (!Section)
  {
    Section = llvm::jitlink::LinkGraph::createSection(a2, (uint64_t)"$__GOT", 6, 5);
    *(_QWORD *)(a1 + 24) = Section;
  }
  v12[0] = (uint64_t)&llvm::jitlink::aarch64::NullPointerContent;
  v12[1] = 8;
  v10 = 8;
  v11 = -8;
  v9 = 0;
  v7 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, Section, v12, &v11, &v10, &v9);
  llvm::jitlink::Block::addEdge(v7, 2, 0, a3, 0);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v7, 0, 8, 0, 0);
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::aarch64::PLTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  int v7;
  unint64_t *v8;
  uint64_t v9;
  _QWORD *Entry;
  unint64_t *v11;
  __int128 v13;
  _QWORD *v14;
  _OWORD v15[2];

  v15[0] = *a3;
  *(_QWORD *)&v13 = 0;
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v15, &v13, a4);
  v9 = v13;
  if (!v7)
    v9 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  if (v9 == *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    Entry = llvm::jitlink::aarch64::PLTTableManager::createEntry(a1, a2, a3, v8);
    v13 = *a3;
    v14 = Entry;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v13, &v14, v11, (uint64_t)v15);
    v9 = *(_QWORD *)&v15[0];
  }
  return *(_QWORD *)(v9 + 16);
}

_QWORD *llvm::jitlink::aarch64::PLTTableManager::createEntry(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  uint64_t Section;
  uint64_t EntryForTarget;
  _QWORD *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14[2];

  Section = *(_QWORD *)(a1 + 32);
  if (!Section)
  {
    Section = llvm::jitlink::LinkGraph::createSection(a2, (uint64_t)"$__STUBS", 8, 5);
    *(_QWORD *)(a1 + 32) = Section;
  }
  EntryForTarget = llvm::jitlink::TableManager<llvm::jitlink::aarch64::GOTTableManager>::getEntryForTarget(*(_QWORD *)(a1 + 24), a2, a3, a4);
  v14[0] = (uint64_t)&llvm::jitlink::aarch64::PointerJumpStubContent;
  v14[1] = 12;
  v12 = 4;
  v13 = -12;
  v11 = 0;
  v9 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, Section, v14, &v13, &v12, &v11);
  llvm::jitlink::Block::addEdge(v9, 12, 0, EntryForTarget, 0);
  llvm::jitlink::Block::addEdge(v9, 13, 4, EntryForTarget, 0);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v9, 0, 12, 1, 0);
}

uint64_t llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::Error (*)(llvm::jitlink::LinkGraph &)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallImpl<llvm::jitlink::ObjCStubsBuilder<llvm::jitlink::Block & (*)(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)>>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t *v6;
  uint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unint64_t *v14;
  char *v15;
  uint64_t v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  _QWORD *Selector;
  const void *v23;
  size_t v24;
  uint64_t v25;
  void *v26;
  uint64_t v27;
  _QWORD v28[7];

  v28[6] = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)(a1 + 24) = a2;
  v26 = v28;
  v27 = 0x600000000;
  v6 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(a2 + 208);
  v9 = *(_QWORD *)(a2 + 208) + 8 * *(unsigned int *)(a2 + 224);
  if ((uint64_t *)v9 != v6)
  {
    v10 = v6;
    v11 = v7;
    do
    {
      v12 = *v10;
      if (*(_QWORD *)(*v10 + 8) >= 0xEuLL
        && **(_QWORD **)v12 == 0x736D5F636A626F5FLL
        && *(_QWORD *)(*(_QWORD *)v12 + 6) == 0x24646E655367736DLL)
      {
        llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v26, v12);
      }
      while (++v10 != v11)
      {
        if ((*v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
          goto LABEL_14;
      }
      v10 = v11;
LABEL_14:
      ;
    }
    while (v10 != (uint64_t *)v9);
  }
  if ((_DWORD)v27)
  {
    llvm::jitlink::ObjCStubsBuilderBase::initialize((llvm::jitlink::ObjCStubsBuilderBase *)a1, v8, a3);
    v15 = (char *)v26;
    if (*a3)
      goto LABEL_28;
    if ((_DWORD)v27)
    {
      v16 = 8 * v27;
      do
      {
        v17 = *(_QWORD **)v15;
        v18 = *(_QWORD *)(*(_QWORD *)v15 + 8);
        if (v18 >= 0xE)
          v19 = 14;
        else
          v19 = *(_QWORD *)(*(_QWORD *)v15 + 8);
        v23 = (const void *)(**(_QWORD **)v15 + v19);
        v24 = v18 - v19;
        v25 = 0;
        if (!llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)(a1 + 112), (uint64_t)&v23, &v25, v14)|| v25 == *(_QWORD *)(a1 + 112) + 24 * *(unsigned int *)(a1 + 128))
        {
          Selector = llvm::jitlink::ObjCStubsBuilderBase::getOrCreateSelector(a1, v23, v24, v20);
          v21 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD *, _QWORD))(a1 + 136))(a2, *(_QWORD *)(a1 + 48), Selector, *(_QWORD *)(a1 + 56));
        }
        else
        {
          v21 = *(_QWORD *)(v25 + 16);
        }
        llvm::jitlink::LinkGraph::makeDefined(a2, v17, v21, 0, *(_QWORD *)(v21 + 32), 0, 2, 0);
        v15 += 8;
        v16 -= 8;
      }
      while (v16);
    }
  }
  *a3 = 0;
  v15 = (char *)v26;
LABEL_28:
  if (v15 != (char *)v28)
    free(v15);
}

__n128 llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::MoveImpl<llvm::jitlink::ObjCStubsBuilder<llvm::jitlink::Block & (*)(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)>>(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;
  int v5;
  int v6;
  int v7;
  int v8;
  int v9;
  int v10;

  result = *(__n128 *)a2;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v4;
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
  *(_QWORD *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  *(_DWORD *)(a2 + 72) = 0;
  v5 = *(_DWORD *)(a1 + 76);
  *(_DWORD *)(a1 + 76) = *(_DWORD *)(a2 + 76);
  *(_DWORD *)(a2 + 76) = v5;
  v6 = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(_DWORD *)(a2 + 80) = v6;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0;
  *(_DWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 88) = 0;
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  *(_DWORD *)(a2 + 96) = 0;
  v7 = *(_DWORD *)(a1 + 100);
  *(_DWORD *)(a1 + 100) = *(_DWORD *)(a2 + 100);
  *(_DWORD *)(a2 + 100) = v7;
  v8 = *(_DWORD *)(a1 + 104);
  *(_DWORD *)(a1 + 104) = *(_DWORD *)(a2 + 104);
  *(_DWORD *)(a2 + 104) = v8;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a2 + 112);
  *(_QWORD *)(a2 + 112) = 0;
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  *(_DWORD *)(a2 + 120) = 0;
  v9 = *(_DWORD *)(a1 + 124);
  *(_DWORD *)(a1 + 124) = *(_DWORD *)(a2 + 124);
  *(_DWORD *)(a2 + 124) = v9;
  v10 = *(_DWORD *)(a1 + 128);
  *(_DWORD *)(a1 + 128) = *(_DWORD *)(a2 + 128);
  *(_DWORD *)(a2 + 128) = v10;
  *(_QWORD *)(a1 + 136) = *(_QWORD *)(a2 + 136);
  return result;
}

void llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::DestroyImpl<llvm::jitlink::ObjCStubsBuilder<llvm::jitlink::Block & (*)(llvm::jitlink::LinkGraph &,llvm::jitlink::Section &,llvm::jitlink::Symbol &,llvm::jitlink::Symbol &)>>(uint64_t a1)
{
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 112), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 88), 8);
  JUMPOUT(0x24BD1B398);
}

void llvm::jitlink::MachOJITLinker_arm64::~MachOJITLinker_arm64(llvm::jitlink::MachOJITLinker_arm64 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::JITLinker<llvm::jitlink::MachOJITLinker_arm64>::fixUpBlocks(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__src;
  int v21;

  if (*(_DWORD *)(a1 + 192))
  {
    v4 = *(unsigned int *)(a1 + 200);
    if ((_DWORD)v4)
    {
      v5 = 24 * v4;
      v6 = *(_QWORD **)(a1 + 184);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(_QWORD **)(a1 + 184);
    }
    v7 = *(_QWORD *)(a1 + 184) + 24 * v4;
LABEL_10:
    if (v6 != (_QWORD *)v7)
    {
      v8 = v6[2];
      v21 = *(_DWORD *)(v8 + 20);
      v9 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
      v11 = *(_QWORD *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
      if ((uint64_t **)v11 == v9)
        goto LABEL_28;
      v12 = v9;
      v13 = v10;
      do
      {
        v14 = *v12;
        if (v21 == 2 && (v14[1] & 4) == 0)
        {
          v15 = v14[4];
          __src = (void *)v14[3];
          v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v15, 0);
          v17 = (uint64_t)v16;
          if (v15)
            memmove(v16, __src, v15);
          v14[3] = v17;
          v14[4] = v15;
          v14[1] |= 4uLL;
        }
        v18 = v14[5];
        v19 = v14[6];
        while (v18 != v19)
        {
          if (*(unsigned __int8 *)(v18 + 24) >= 2u)
          {
            llvm::jitlink::aarch64::applyFixup(a1, v14, v18, a2);
            if (*a2)
              return;
          }
          v18 += 32;
        }
        while (++v12 != v13)
        {
          if (((unint64_t)*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_27;
        }
        v12 = v13;
LABEL_27:
        ;
      }
      while (v12 != (uint64_t **)v11);
LABEL_28:
      while (1)
      {
        v6 += 3;
        if (v6 == (_QWORD *)v7)
          break;
        if (*v6 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_10;
      }
    }
  }
LABEL_6:
  *a2 = 0;
}

__n128 llvm::jitlink::JITLinkerBase::JITLinkerBase(_QWORD *a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  __n128 result;

  v4 = *a2;
  *a2 = 0;
  *a1 = off_251C15778;
  a1[1] = v4;
  v5 = *a3;
  *a3 = 0;
  a1[2] = v5;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)a4;
  a1[5] = *(_QWORD *)(a4 + 16);
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a4 + 24);
  a1[8] = *(_QWORD *)(a4 + 40);
  *(_QWORD *)(a4 + 24) = 0;
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a4 + 48);
  a1[11] = *(_QWORD *)(a4 + 64);
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a4 + 72);
  a1[14] = *(_QWORD *)(a4 + 88);
  *(_QWORD *)(a4 + 72) = 0;
  *(_QWORD *)(a4 + 80) = 0;
  *(_QWORD *)(a4 + 88) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  result = *(__n128 *)(a4 + 96);
  *(__n128 *)(a1 + 15) = result;
  a1[17] = *(_QWORD *)(a4 + 112);
  *(_QWORD *)(a4 + 96) = 0;
  *(_QWORD *)(a4 + 104) = 0;
  *(_QWORD *)(a4 + 112) = 0;
  a1[18] = 0;
  return result;
}

void llvm::jitlink::JITLinker<llvm::jitlink::MachOJITLinker_arm64>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::aarch64::applyFixup(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  std::string *v12;
  std::string::size_type v13;
  __int128 v14;
  const char *EdgeKindName;
  llvm::formatv_object_base *v16;
  llvm::formatv_object_base *v17;
  uint64_t v18;
  unsigned int v19;
  char v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  int v28;
  uint64_t v29;
  std::string v30;
  void *__p[2];
  std::string::size_type v32;
  _QWORD v33[2];
  __int128 v34;
  __int16 v35;
  _QWORD v36[4];
  __int16 v37;
  int v38;
  __int16 v39;
  int v40;
  __int16 v41;
  llvm::formatv_object_base *v42[4];
  __int16 v43;
  int v44;
  __int16 v45;

  v7 = *(unsigned __int8 *)(a3 + 24);
  v8 = a2[3];
  v9 = *(unsigned int *)(a3 + 8);
  v10 = *a2 + v9;
  switch(*(_BYTE *)(a3 + 24))
  {
    case 2:
      v11 = (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + *(_QWORD *)(a3 + 16)
          + **(_QWORD **)(*(_QWORD *)a3 + 16);
      goto LABEL_9;
    case 4:
      v11 = (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + *(_QWORD *)(a3 + 16)
          + **(_QWORD **)(*(_QWORD *)a3 + 16);
      if (!HIDWORD(v11))
        goto LABEL_13;
      goto LABEL_34;
    case 5:
    case 6:
    case 7:
    case 8:
      if ((v7 - 5) > 1)
      {
        v11 = v10
            - (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
            - **(_QWORD **)(*(_QWORD *)a3 + 16)
            + *(_QWORD *)(a3 + 16);
        if (v7 != 8)
        {
LABEL_9:
          *(_QWORD *)(v8 + v9) = v11;
          goto LABEL_44;
        }
      }
      else
      {
        v11 = **(_QWORD **)(*(_QWORD *)a3 + 16)
            - v10
            + (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
            + *(_QWORD *)(a3 + 16);
        if (v7 != 6)
          goto LABEL_9;
      }
      if (v11 != (int)v11)
        goto LABEL_34;
LABEL_13:
      *(_DWORD *)(v8 + v9) = v11;
LABEL_44:
      *a4 = 0;
      return;
    case 9:
      v18 = **(_QWORD **)(*(_QWORD *)a3 + 16)
          - v10
          + (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + *(_QWORD *)(a3 + 16);
      if ((v18 & 3) != 0)
      {
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"BranchPCRel26 target is not 32-bit aligned", a4);
        return;
      }
      if ((unint64_t)(v18 - 0x8000000) <= 0xFFFFFFFFEFFFFFFFLL)
        goto LABEL_34;
      v28 = *(_DWORD *)(v8 + v9) | (v18 >> 2) & 0x3FFFFFF;
      goto LABEL_43;
    case 0xA:
      v19 = *(_DWORD *)(v8 + v9);
      if ((v19 & 0x5F9FFFE0) == 0x52800000)
        v20 = (v19 >> 17) & 0x30;
      else
        v20 = 0;
      v21 = 32
          * (unsigned __int16)(((*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFuLL)
                              + *(_QWORD *)(a3 + 16)
                              + **(_QWORD **)(*(_QWORD *)a3 + 16)) >> v20);
      goto LABEL_42;
    case 0xB:
      v22 = (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + **(_QWORD **)(*(_QWORD *)a3 + 16) - v10;
      if ((v22 & 3) != 0)
      {
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"LDR literal target is not 32-bit aligned", a4);
        return;
      }
      if ((unint64_t)(v22 - 0x100000) <= 0xFFFFFFFFFFDFFFFFLL)
      {
LABEL_34:
        llvm::jitlink::makeTargetOutOfRangeError(a1, a2, a3, a4);
        return;
      }
      v19 = *(_DWORD *)(v8 + v9);
      v21 = (8 * v22) & 0xFFFFE0;
LABEL_42:
      v28 = v21 | v19;
      goto LABEL_43;
    case 0xC:
      v23 = (((*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
            + *(_QWORD *)(a3 + 16)
            + **(_QWORD **)(*(_QWORD *)a3 + 16)) & 0xFFFFFFFFFFFFF000)
          - (v10 & 0xFFFFFFFFFFFFF000);
      if ((v23 + 0x100000000) >> 33)
        goto LABEL_34;
      v19 = *(_DWORD *)(v8 + v9);
      v21 = (v23 >> 9) & 0xFFFFE0 | (((v23 >> 12) & 3) << 29);
      goto LABEL_42;
    case 0xD:
      v24 = *(_QWORD *)(*(_QWORD *)a3 + 24) + *(_QWORD *)(a3 + 16) + **(_QWORD **)(*(_QWORD *)a3 + 16);
      v25 = *(_DWORD *)(v8 + v9);
      v26 = v25 >> 30;
      if (!(v25 >> 30))
        v26 = (4 * ((~v25 & 0x4800000) == 0));
      if ((v25 & 0x3B000000) == 0x39000000)
        v27 = v26;
      else
        v27 = 0;
      if ((v24 & ~(-1 << v27)) != 0)
      {
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"PAGEOFF12 target is not aligned", a4);
        return;
      }
      v28 = v25 | ((unint64_t)(v24 & 0xFFF) >> v27 << 10);
LABEL_43:
      *(_DWORD *)(v8 + v9) = v28;
      goto LABEL_44;
    default:
      std::operator+<char>();
      v12 = std::string::append(&v30, ", section ");
      v13 = v12->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
      v32 = v13;
      v12->__r_.__value_.__l.__size_ = 0;
      v12->__r_.__value_.__r.__words[2] = 0;
      v12->__r_.__value_.__r.__words[0] = 0;
      v14 = *(_OWORD *)a2[2];
      v33[0] = __p;
      v34 = v14;
      v35 = 1284;
      v36[0] = v33;
      v36[2] = " unsupported edge kind ";
      v37 = 770;
      EdgeKindName = llvm::jitlink::aarch64::getEdgeKindName((llvm::jitlink::aarch64 *)*(unsigned __int8 *)(a3 + 24));
      if (*EdgeKindName)
      {
        v16 = (llvm::formatv_object_base *)EdgeKindName;
        v17 = (llvm::formatv_object_base *)v36;
      }
      else
      {
        v17 = (llvm::formatv_object_base *)v33;
        v40 = v38;
        v41 = v39;
        v16 = (llvm::formatv_object_base *)" unsupported edge kind ";
      }
      v29 = operator new();
      v42[0] = v17;
      v42[2] = v16;
      v43 = 770;
      v44 = v40;
      v45 = v41;
      *(_QWORD *)v29 = off_251C15728;
      llvm::Twine::str(v42, (std::string *)(v29 + 8));
      *a4 = v29;
      if (SHIBYTE(v32) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      return;
  }
}

uint64_t llvm::jitlink::createLinkGraphFromMachOObject_x86_64@<X0>(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _OWORD v7[2];
  llvm::formatv_object_base *v8;
  __int16 v9;
  std::string __p[2];
  _QWORD v11[26];
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v7[0] = *a1;
  v7[1] = v3;
  result = llvm::object::ObjectFile::createMachOObjectFile((uint64_t)v7, 0, 0, (uint64_t)&v12);
  if ((v13 & 1) != 0)
  {
    v6 = v12;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v6;
  }
  else
  {
    v5 = v12;
    v8 = (llvm::formatv_object_base *)"x86_64-apple-darwin";
    v9 = 259;
    llvm::Triple::Triple(__p, &v8);
    llvm::jitlink::MachOLinkGraphBuilder::MachOLinkGraphBuilder((uint64_t)v11, v5, (__int128 *)__p, (uint64_t)llvm::jitlink::x86_64::getEdgeKindName);
    if (SHIBYTE(__p[0].__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p[0].__r_.__value_.__l.__data_);
    v11[0] = &off_251C15908;
    llvm::jitlink::MachOLinkGraphBuilder::buildGraph((llvm::jitlink::MachOLinkGraphBuilder *)v11, a2);
    llvm::jitlink::MachOLinkGraphBuilder::~MachOLinkGraphBuilder((llvm::jitlink::MachOLinkGraphBuilder *)v11);
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  return result;
}

void llvm::jitlink::link_MachO_x86_64(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  int64x2_t v8;
  uint64_t v9;
  _QWORD *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 *v17;
  uint64_t v18;
  int64x2_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t v26;
  __int128 *v27;
  uint64_t v28;
  int64x2_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  uint64_t v41;
  __int128 *v42;
  uint64_t v43;
  int64x2_t v44;
  uint64_t v45;
  __int128 *v46;
  uint64_t v47;
  int64x2_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  uint64_t v56;
  __int128 *v57;
  __int128 *v58;
  uint64_t v59;
  int64x2_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  uint64_t v67;
  __int128 *v68;
  __int128 *v69;
  uint64_t v70;
  int64x2_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  llvm::jitlink::LinkGraph *v77;
  uint64_t v78;
  int64x2_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;
  __int128 v87;
  _QWORD *v88;
  llvm::jitlink::LinkGraph *v89;
  uint64_t v90;
  uint64_t v91;
  int64x2_t v92;
  _OWORD v93[2];
  __int128 v94;
  _OWORD v95[2];
  __int128 v96;
  uint64_t v97;
  _BYTE v98[24];
  __int128 v99;
  uint64_t v100;
  __int128 v101;
  uint64_t v102;
  __int128 v103;
  uint64_t v104;
  __int128 v105;
  uint64_t v106;
  llvm::jitlink::LinkGraph *v107;
  uint64_t v108;
  __int128 v109;
  char *v110;
  const char *v111;
  __int128 v112;
  _QWORD v113[3];
  _QWORD v114[3];
  _QWORD v115[3];
  _QWORD v116[6];

  v116[3] = *MEMORY[0x24BDAC8D0];
  v97 = 0;
  v96 = 0u;
  v94 = 0u;
  memset(v95, 0, sizeof(v95));
  memset(v93, 0, sizeof(v93));
  v92 = 0u;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, (uint64_t)*a1 + 120))
  {
    v111 = "__TEXT,__eh_frame";
    *(_QWORD *)&v112 = 17;
    v113[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DWARFRecordSectionSplitter,llvm::jitlink::DWARFRecordSectionSplitter,void>::Callbacks
            + 2;
    *((_QWORD *)&v99 + 1) = v93;
    *(_QWORD *)v98 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v93, 1uLL);
    *(_QWORD *)&v98[8] = *(_QWORD *)v98;
    *(_QWORD *)&v99 = *(_QWORD *)v98 + 32 * v4;
    v5 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)v98, (__int128 *)&v111)+ 32;
    *(_QWORD *)&v98[16] = v5;
    v6 = (__int128 *)v92.i64[1];
    v7 = *(_QWORD *)&v98[8];
    if (v92.i64[1] == v92.i64[0])
    {
      v8 = vdupq_n_s64(v92.u64[1]);
    }
    else
    {
      do
      {
        v6 -= 2;
        v7 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v7 - 32, v6);
      }
      while (v6 != (__int128 *)v92.i64[0]);
      v8 = v92;
      v5 = *(_QWORD *)&v98[16];
    }
    v92.i64[0] = v7;
    *(int64x2_t *)&v98[8] = v8;
    v9 = *(_QWORD *)&v93[0];
    *(_QWORD *)&v93[0] = v99;
    *(_QWORD *)&v99 = v9;
    *(_QWORD *)v98 = v8.i64[0];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v98);
    v92.i64[1] = v5;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v111);
    v10 = operator new(0x20uLL, (std::align_val_t)8uLL);
    v112 = xmmword_24AA2ACD0;
    *v10 = "__TEXT,__eh_frame";
    v10[1] = 17;
    *((_DWORD *)v10 + 4) = 8;
    *((_DWORD *)v10 + 5) = 101122563;
    *((_BYTE *)v10 + 24) = 9;
    v111 = (const char *)v10;
    v113[0] = &llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameEdgeFixer,llvm::jitlink::EHFrameEdgeFixer,void>::Callbacks;
    if (v92.i64[1] >= *(_QWORD *)&v93[0])
    {
      v12 = (v92.i64[1] - v92.i64[0]) >> 5;
      if ((unint64_t)(v12 + 1) >> 59)
        goto LABEL_118;
      v13 = (*(_QWORD *)&v93[0] - v92.i64[0]) >> 4;
      if (v13 <= v12 + 1)
        v13 = v12 + 1;
      if (*(_QWORD *)&v93[0] - v92.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v14 = 0x7FFFFFFFFFFFFFFLL;
      else
        v14 = v13;
      *((_QWORD *)&v99 + 1) = v93;
      if (v14)
        v15 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v93, v14);
      else
        v15 = 0;
      v16 = (uint64_t)&v15[32 * v12];
      *(_QWORD *)v98 = v15;
      *(_QWORD *)&v98[8] = v16;
      *(_QWORD *)&v99 = &v15[32 * v14];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v16, (__int128 *)&v111);
      v11 = v16 + 32;
      *(_QWORD *)&v98[16] = v16 + 32;
      v17 = (__int128 *)v92.i64[1];
      v18 = *(_QWORD *)&v98[8];
      if (v92.i64[1] == v92.i64[0])
      {
        v19 = vdupq_n_s64(v92.u64[1]);
      }
      else
      {
        do
        {
          v17 -= 2;
          v18 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v18 - 32, v17);
        }
        while (v17 != (__int128 *)v92.i64[0]);
        v19 = v92;
        v11 = *(_QWORD *)&v98[16];
      }
      v92.i64[0] = v18;
      v92.i64[1] = v11;
      *(int64x2_t *)&v98[8] = v19;
      v20 = *(_QWORD *)&v93[0];
      *(_QWORD *)&v93[0] = v99;
      *(_QWORD *)&v99 = v20;
      *(_QWORD *)v98 = v19.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v98);
    }
    else
    {
      v11 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v92.i64[1], (__int128 *)&v111)+ 32;
    }
    v92.i64[1] = v11;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v111);
    v111 = "__LD,__compact_unwind";
    *(_QWORD *)&v112 = 21;
    v113[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::CompactUnwindSplitter,llvm::jitlink::CompactUnwindSplitter,void>::Callbacks
            + 2;
    if (v11 >= *(_QWORD *)&v93[0])
    {
      v22 = (v92.i64[1] - v92.i64[0]) >> 5;
      if ((unint64_t)(v22 + 1) >> 59)
        goto LABEL_118;
      v23 = (*(_QWORD *)&v93[0] - v92.i64[0]) >> 4;
      if (v23 <= v22 + 1)
        v23 = v22 + 1;
      if (*(_QWORD *)&v93[0] - v92.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v24 = 0x7FFFFFFFFFFFFFFLL;
      else
        v24 = v23;
      *((_QWORD *)&v99 + 1) = v93;
      if (v24)
        v25 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v93, v24);
      else
        v25 = 0;
      v26 = (uint64_t)&v25[32 * v22];
      *(_QWORD *)v98 = v25;
      *(_QWORD *)&v98[8] = v26;
      *(_QWORD *)&v99 = &v25[32 * v24];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v26, (__int128 *)&v111);
      v21 = v26 + 32;
      *(_QWORD *)&v98[16] = v26 + 32;
      v27 = (__int128 *)v92.i64[1];
      v28 = *(_QWORD *)&v98[8];
      if (v92.i64[1] == v92.i64[0])
      {
        v29 = vdupq_n_s64(v92.u64[1]);
      }
      else
      {
        do
        {
          v27 -= 2;
          v28 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v28 - 32, v27);
        }
        while (v27 != (__int128 *)v92.i64[0]);
        v29 = v92;
        v21 = *(_QWORD *)&v98[16];
      }
      v92.i64[0] = v28;
      v92.i64[1] = v21;
      *(int64x2_t *)&v98[8] = v29;
      v30 = *(_QWORD *)&v93[0];
      *(_QWORD *)&v93[0] = v99;
      *(_QWORD *)&v99 = v30;
      *(_QWORD *)v98 = v29.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v98);
    }
    else
    {
      v21 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v11, (__int128 *)&v111)+ 32;
    }
    v92.i64[1] = v21;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v111);
    (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 64))(&v111, *a2, (uint64_t)*a1 + 120);
    if (v113[0] < 8uLL)
    {
      *(_QWORD *)&v109 = llvm::jitlink::markAllSymbolsLive;
      v110 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
      if (v92.i64[1] >= *(_QWORD *)&v93[0])
      {
        v37 = (v92.i64[1] - v92.i64[0]) >> 5;
        if ((unint64_t)(v37 + 1) >> 59)
          goto LABEL_118;
        v38 = (*(_QWORD *)&v93[0] - v92.i64[0]) >> 4;
        if (v38 <= v37 + 1)
          v38 = v37 + 1;
        if (*(_QWORD *)&v93[0] - v92.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v39 = 0x7FFFFFFFFFFFFFFLL;
        else
          v39 = v38;
        *((_QWORD *)&v99 + 1) = v93;
        if (v39)
          v40 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v93, v39);
        else
          v40 = 0;
        v45 = (uint64_t)&v40[32 * v37];
        *(_QWORD *)v98 = v40;
        *(_QWORD *)&v98[8] = v45;
        *(_QWORD *)&v99 = &v40[32 * v39];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v45, &v109);
        v32 = v45 + 32;
        *(_QWORD *)&v98[16] = v45 + 32;
        v46 = (__int128 *)v92.i64[1];
        v47 = *(_QWORD *)&v98[8];
        if (v92.i64[1] == v92.i64[0])
        {
          v48 = vdupq_n_s64(v92.u64[1]);
        }
        else
        {
          do
          {
            v46 -= 2;
            v47 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v47 - 32, v46);
          }
          while (v46 != (__int128 *)v92.i64[0]);
          v48 = v92;
          v32 = *(_QWORD *)&v98[16];
        }
        v92.i64[0] = v47;
        v92.i64[1] = v32;
        *(int64x2_t *)&v98[8] = v48;
        v50 = *(_QWORD *)&v93[0];
        *(_QWORD *)&v93[0] = v99;
        *(_QWORD *)&v99 = v50;
        *(_QWORD *)v98 = v48.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v98);
      }
      else
      {
        v32 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v92.i64[1], &v109)+ 32;
      }
      v92.i64[1] = v32;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v109);
    }
    else
    {
      if (v92.i64[1] >= *(_QWORD *)&v93[0])
      {
        v33 = (v92.i64[1] - v92.i64[0]) >> 5;
        if ((unint64_t)(v33 + 1) >> 59)
          goto LABEL_118;
        v34 = (*(_QWORD *)&v93[0] - v92.i64[0]) >> 4;
        if (v34 <= v33 + 1)
          v34 = v33 + 1;
        if (*(_QWORD *)&v93[0] - v92.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v35 = 0x7FFFFFFFFFFFFFFLL;
        else
          v35 = v34;
        *((_QWORD *)&v99 + 1) = v93;
        if (v35)
          v36 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v93, v35);
        else
          v36 = 0;
        v41 = (uint64_t)&v36[32 * v33];
        *(_QWORD *)v98 = v36;
        *(_QWORD *)&v98[8] = v41;
        *(_QWORD *)&v99 = &v36[32 * v35];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v41, (__int128 *)&v111);
        v31 = v41 + 32;
        *(_QWORD *)&v98[16] = v41 + 32;
        v42 = (__int128 *)v92.i64[1];
        v43 = *(_QWORD *)&v98[8];
        if (v92.i64[1] == v92.i64[0])
        {
          v44 = vdupq_n_s64(v92.u64[1]);
        }
        else
        {
          do
          {
            v42 -= 2;
            v43 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v43 - 32, v42);
          }
          while (v42 != (__int128 *)v92.i64[0]);
          v44 = v92;
          v31 = *(_QWORD *)&v98[16];
        }
        v92.i64[0] = v43;
        v92.i64[1] = v31;
        *(int64x2_t *)&v98[8] = v44;
        v49 = *(_QWORD *)&v93[0];
        *(_QWORD *)&v93[0] = v99;
        *(_QWORD *)&v99 = v49;
        *(_QWORD *)v98 = v44.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v98);
      }
      else
      {
        v31 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v92.i64[1], (__int128 *)&v111)+ 32;
      }
      v92.i64[1] = v31;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v111);
    v113[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
            + 2;
    if (*(_QWORD *)&v93[1] >= *((_QWORD *)&v93[1] + 1))
    {
      v52 = (uint64_t)(*(_QWORD *)&v93[1] - *((_QWORD *)&v93[0] + 1)) >> 5;
      if ((unint64_t)(v52 + 1) >> 59)
        goto LABEL_118;
      v53 = (uint64_t)(*((_QWORD *)&v93[1] + 1) - *((_QWORD *)&v93[0] + 1)) >> 4;
      if (v53 <= v52 + 1)
        v53 = v52 + 1;
      if (*((_QWORD *)&v93[1] + 1) - *((_QWORD *)&v93[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
        v54 = 0x7FFFFFFFFFFFFFFLL;
      else
        v54 = v53;
      *((_QWORD *)&v99 + 1) = (char *)&v93[1] + 8;
      if (v54)
        v55 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v93[1] + 8, v54);
      else
        v55 = 0;
      v56 = (uint64_t)&v55[32 * v52];
      *(_QWORD *)v98 = v55;
      *(_QWORD *)&v98[8] = v56;
      *(_QWORD *)&v99 = &v55[32 * v54];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v56, (__int128 *)&v111);
      v51 = v56 + 32;
      *(_QWORD *)&v98[16] = v56 + 32;
      v58 = (__int128 *)*((_QWORD *)&v93[0] + 1);
      v57 = *(__int128 **)&v93[1];
      v59 = *(_QWORD *)&v98[8];
      if (*(_QWORD *)&v93[1] == *((_QWORD *)&v93[0] + 1))
      {
        v60 = vdupq_n_s64(*(unint64_t *)&v93[1]);
      }
      else
      {
        do
        {
          v57 -= 2;
          v59 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v59 - 32, v57);
        }
        while (v57 != v58);
        v60 = *(int64x2_t *)((char *)v93 + 8);
        v51 = *(_QWORD *)&v98[16];
      }
      *((_QWORD *)&v93[0] + 1) = v59;
      *(_QWORD *)&v93[1] = v51;
      *(int64x2_t *)&v98[8] = v60;
      v61 = *((_QWORD *)&v93[1] + 1);
      *((_QWORD *)&v93[1] + 1) = v99;
      *(_QWORD *)&v99 = v61;
      *(_QWORD *)v98 = v60.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v98);
    }
    else
    {
      v51 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v93[1], (__int128 *)&v111)+ 32;
    }
    *(_QWORD *)&v93[1] = v51;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v111);
    v111 = (const char *)llvm::jitlink::x86_64::optimizeGOTAndStubAccesses;
    v113[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
            + 2;
    if (*(_QWORD *)&v95[1] < *((_QWORD *)&v95[1] + 1))
    {
      v62 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v95[1], (__int128 *)&v111)+ 32;
LABEL_105:
      *(_QWORD *)&v95[1] = v62;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v111);
      goto LABEL_106;
    }
    v63 = (uint64_t)(*(_QWORD *)&v95[1] - *((_QWORD *)&v95[0] + 1)) >> 5;
    if (!((unint64_t)(v63 + 1) >> 59))
    {
      v64 = (uint64_t)(*((_QWORD *)&v95[1] + 1) - *((_QWORD *)&v95[0] + 1)) >> 4;
      if (v64 <= v63 + 1)
        v64 = v63 + 1;
      if (*((_QWORD *)&v95[1] + 1) - *((_QWORD *)&v95[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
        v65 = 0x7FFFFFFFFFFFFFFLL;
      else
        v65 = v64;
      *((_QWORD *)&v99 + 1) = (char *)&v95[1] + 8;
      if (v65)
        v66 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v95[1] + 8, v65);
      else
        v66 = 0;
      v67 = (uint64_t)&v66[32 * v63];
      *(_QWORD *)v98 = v66;
      *(_QWORD *)&v98[8] = v67;
      *(_QWORD *)&v99 = &v66[32 * v65];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v67, (__int128 *)&v111);
      v62 = v67 + 32;
      *(_QWORD *)&v98[16] = v67 + 32;
      v69 = (__int128 *)*((_QWORD *)&v95[0] + 1);
      v68 = *(__int128 **)&v95[1];
      v70 = *(_QWORD *)&v98[8];
      if (*(_QWORD *)&v95[1] == *((_QWORD *)&v95[0] + 1))
      {
        v71 = vdupq_n_s64(*(unint64_t *)&v95[1]);
      }
      else
      {
        do
        {
          v68 -= 2;
          v70 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v70 - 32, v68);
        }
        while (v68 != v69);
        v71 = *(int64x2_t *)((char *)v95 + 8);
        v62 = *(_QWORD *)&v98[16];
      }
      *((_QWORD *)&v95[0] + 1) = v70;
      *(_QWORD *)&v95[1] = v62;
      *(int64x2_t *)&v98[8] = v71;
      v72 = *((_QWORD *)&v95[1] + 1);
      *((_QWORD *)&v95[1] + 1) = v99;
      *(_QWORD *)&v99 = v72;
      *(_QWORD *)v98 = v71.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v98);
      goto LABEL_105;
    }
LABEL_118:
    abort();
  }
LABEL_106:
  (*(void (**)(_BYTE *__return_ptr, uint64_t, llvm::jitlink::LinkGraph *, int64x2_t *))(*(_QWORD *)*a2 + 72))(v98, *a2, *a1, &v92);
  if (*(_QWORD *)v98)
  {
    v73 = *a2;
    v91 = *(_QWORD *)v98;
    *(_QWORD *)v98 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v73 + 24))(v73, &v91);
    if (v91)
      (*(void (**)(uint64_t))(*(_QWORD *)v91 + 8))(v91);
    v74 = *(_QWORD *)v98;
    if (*(_QWORD *)v98)
LABEL_110:
      (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
  }
  else
  {
    v75 = (_QWORD *)operator new();
    v76 = *a2;
    *a2 = 0;
    v77 = *a1;
    *a1 = 0;
    v78 = *(_QWORD *)&v93[0];
    v79 = v92;
    v92 = 0uLL;
    v80 = *((_QWORD *)&v93[1] + 1);
    v81 = *(_OWORD *)((char *)v93 + 8);
    memset(v93, 0, sizeof(v93));
    v82 = *(_QWORD *)&v95[0];
    v83 = v94;
    v94 = 0uLL;
    v84 = *((_QWORD *)&v95[1] + 1);
    v85 = *(_OWORD *)((char *)v95 + 8);
    memset(v95, 0, sizeof(v95));
    v86 = v97;
    v87 = v96;
    v96 = 0uLL;
    v97 = 0;
    v107 = v77;
    v108 = v76;
    *(int64x2_t *)v98 = v79;
    v111 = 0;
    v112 = 0uLL;
    v99 = v81;
    *(_QWORD *)&v98[16] = v78;
    v100 = v80;
    memset(v113, 0, sizeof(v113));
    v101 = v83;
    memset(v114, 0, sizeof(v114));
    v103 = v85;
    v102 = v82;
    v104 = v84;
    memset(v115, 0, sizeof(v115));
    v105 = v87;
    v106 = v86;
    memset(v116, 0, 24);
    llvm::jitlink::JITLinkerBase::JITLinkerBase(v75, &v108, (uint64_t *)&v107, (uint64_t)v98);
    *v88 = &off_251C15958;
    *(_QWORD *)&v109 = &v105;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v109);
    *(_QWORD *)&v109 = &v103;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v109);
    *(_QWORD *)&v109 = &v101;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v109);
    *(_QWORD *)&v109 = &v99;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v109);
    *(_QWORD *)&v109 = v98;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v109);
    v89 = v107;
    v107 = 0;
    if (v89)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v89);
      MEMORY[0x24BD1B3A4]();
    }
    v90 = v108;
    v108 = 0;
    if (v90)
      (*(void (**)(uint64_t))(*(_QWORD *)v90 + 8))(v90);
    *v75 = &off_251C15930;
    *(_QWORD *)v98 = v116;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
    *(_QWORD *)v98 = v115;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
    *(_QWORD *)v98 = v114;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
    *(_QWORD *)v98 = v113;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
    *(_QWORD *)v98 = &v111;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
    *(_QWORD *)v98 = v75;
    llvm::jitlink::JITLinkerBase::linkPhase1((uint64_t)v75, (uint64_t *)v98);
    v74 = *(_QWORD *)v98;
    *(_QWORD *)v98 = 0;
    if (v74)
      goto LABEL_110;
  }
  *(_QWORD *)v98 = &v96;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
  *(_QWORD *)v98 = (char *)v95 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
  *(_QWORD *)v98 = &v94;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
  *(_QWORD *)v98 = (char *)v93 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
  *(_QWORD *)v98 = &v92;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v98);
}

uint64_t `anonymous namespace'::buildGOTAndStubs_MachO_x86_64@<X0>(_anonymous_namespace_ *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v5;
  uint64_t *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  _QWORD v11[2];
  int v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD v15[2];
  int v16;
  uint64_t v17;
  _OWORD v18[8];
  _OWORD v19[4];
  _OWORD v20[8];
  _OWORD v21[4];
  uint64_t *v22;
  uint64_t *v23;

  v15[0] = 0;
  v15[1] = 0;
  v16 = 0;
  v17 = 0;
  v11[0] = 0;
  v11[1] = 0;
  v12 = 0;
  v13 = v15;
  v14 = 0;
  llvm::jitlink::LinkGraph::blocks(this, v20);
  v21[0] = v20[0];
  v21[1] = v20[1];
  v21[2] = v20[2];
  v21[3] = v20[3];
  llvm::jitlink::LinkGraph::blocks(this, v18);
  v19[0] = v18[4];
  v19[1] = v18[5];
  v19[2] = v18[6];
  v19[3] = v18[7];
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v22, v21, (uint64_t *)v19);
  v5 = v22;
  v6 = v23;
  if (v22 != v23)
  {
    do
    {
      v7 = *v5;
      v8 = *(unint64_t **)(*v5 + 40);
      v9 = *(unint64_t **)(*v5 + 48);
      while (v8 != v9)
      {
        if ((llvm::jitlink::x86_64::GOTTableManager::visitEdge((uint64_t)v15, (uint64_t)this, v7, (uint64_t)v8) & 1) == 0)
          llvm::jitlink::x86_64::PLTTableManager::visitEdge((uint64_t)v11, (uint64_t)this, v7, v8);
        v8 += 4;
      }
      ++v5;
    }
    while (v5 != v6);
    v5 = v22;
  }
  if (v5)
  {
    v23 = v5;
    operator delete(v5);
  }
  *a2 = 0;
  MEMORY[0x24BD1B398](v11[0], 8);
  return MEMORY[0x24BD1B398](v15[0], 8);
}

void `anonymous namespace'::MachOLinkGraphBuilder_x86_64::~MachOLinkGraphBuilder_x86_64(_anonymous_namespace_::MachOLinkGraphBuilder_x86_64 *this)
{
  llvm::jitlink::MachOLinkGraphBuilder::~MachOLinkGraphBuilder(this);
  JUMPOUT(0x24BD1B3A4);
}

void `anonymous namespace'::MachOLinkGraphBuilder_x86_64::addRelocations(_anonymous_namespace_::MachOLinkGraphBuilder_x86_64 *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  int v23;
  uint64_t v24;
  const char *v25;
  __int128 *v26;
  char v27;
  int v28;
  char v29;
  const char *v30;
  uint64_t v31;
  char v32;
  __int128 *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t Relocation;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  _QWORD v44[4];
  _QWORD v45[2];
  _QWORD *v46;
  int v47;
  _QWORD v48[4];
  _QWORD v49[2];
  _QWORD *v50;
  int v51;
  _QWORD v52[3];
  __int16 v53;
  _QWORD v54[4];
  __int16 v55;
  _QWORD v56[4];
  __int16 v57;
  _QWORD v58[4];
  __int16 v59;
  _QWORD v60[4];
  __int16 v61;
  __int128 v62;
  __int128 v63;
  uint64_t v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  __int128 v69;
  uint64_t v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  _QWORD v74[4];
  char v75;
  char v76;
  int v77;
  __int16 v78;
  llvm::formatv_object_base *v79[4];
  char v80;
  char v81;
  int v82;
  __int16 v83;
  uint64_t v84;
  char v85;
  _QWORD v86[4];
  _QWORD v87[2];
  _QWORD *v88;
  const char *v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD v93[2];
  _QWORD v94[4];

  v94[1] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 13);
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 352))(v4);
  v7 = v6;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 360))(v4);
  v41 = v5;
  v42 = v7;
  v37 = v8;
  v10 = v7 == v9 && v5 == v8;
  if (!v10)
  {
    v11 = v9;
    v36 = a2;
    v35 = v4;
    while (1)
    {
      v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 152))(v7, v5);
      if (!(*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 224))(v42, v41))
        break;
      v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 272))(v42, v41);
      if (v13 != (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 280))(v42, v41))
      {
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Virtual section contains relocations", a2);
        return;
      }
LABEL_73:
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v42 + 136))(v42, &v41);
      v5 = v41;
      v7 = v42;
      if (v42 == v11 && v41 == v37)
        goto LABEL_84;
    }
    v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 160))(v4, v41);
    llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(this, v14, (uint64_t)&v84);
    if ((v85 & 1) == 0)
    {
      if (!*(_QWORD *)(v84 + 80))
      {
        v17 = 5;
        goto LABEL_68;
      }
      v39 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 272))(v42, v41);
      v40 = v15;
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v42 + 280))(v42, v41);
      if (v39 == v16)
      {
        v17 = 0;
        a2 = v36;
LABEL_67:
        v4 = v35;
        goto LABEL_68;
      }
      Relocation = 0;
      Relocation = llvm::object::MachOObjectFile::getRelocation(*((_QWORD *)this + 13), v39);
      v18 = v12 + Relocation;
      llvm::jitlink::MachOLinkGraphBuilder::findSymbolByAddress((uint64_t)this, v84, v18, (uint64_t)&v89);
      if ((v90 & 1) != 0)
      {
        a2 = v36;
        *v36 = (uint64_t)v89;
      }
      else
      {
        v19 = ((unint64_t)HIDWORD(Relocation) >> 25) & 3;
        if ((1 << v19) + v18 <= *(_QWORD *)(*((_QWORD *)v89 + 2) + 32) + **((_QWORD **)v89 + 2))
        {
          switch(HIDWORD(Relocation) >> 28)
          {
            case 0u:
              if ((Relocation & 0x100000000000000) != 0)
                break;
              if ((_DWORD)v19 == 3)
              {
                v20 = 2;
                if ((Relocation & 0x800000000000000) == 0)
                  v20 = 3;
LABEL_43:
                v21 = v20;
LABEL_44:
                __asm { BR              X10 }
              }
              if ((Relocation & 0x800000000000000) != 0 && (_DWORD)v19 == 2)
              {
                v21 = 1;
                goto LABEL_44;
              }
              break;
            case 1u:
              if ((HIDWORD(Relocation) & 0x7000000) != 0x5000000)
                break;
              v20 = 8;
              if ((Relocation & 0x800000000000000) != 0)
                v20 = 4;
              goto LABEL_43;
            case 2u:
              if ((HIDWORD(Relocation) & 0xF000000) != 0xD000000)
                break;
              v21 = 0;
              goto LABEL_44;
            case 3u:
              if ((HIDWORD(Relocation) & 0xF000000) != 0xD000000)
                break;
              v21 = 12;
              goto LABEL_44;
            case 4u:
              if ((HIDWORD(Relocation) & 0xF000000) != 0xD000000)
                break;
              v21 = 13;
              goto LABEL_44;
            case 5u:
              if ((HIDWORD(Relocation) & 0x9000000) != 0x8000000)
                break;
              if ((_DWORD)v19 == 3)
              {
                v21 = 16;
                goto LABEL_44;
              }
              if ((_DWORD)v19 == 2)
              {
                v21 = 15;
                goto LABEL_44;
              }
              break;
            case 6u:
              if ((HIDWORD(Relocation) & 0x7000000) != 0x5000000)
                break;
              v22 = (Relocation & 0x800000000000000) == 0;
              v20 = 5;
              v23 = 9;
              goto LABEL_41;
            case 7u:
              if ((HIDWORD(Relocation) & 0x7000000) != 0x5000000)
                break;
              v22 = (Relocation & 0x800000000000000) == 0;
              v20 = 6;
              v23 = 10;
              goto LABEL_41;
            case 8u:
              if ((HIDWORD(Relocation) & 0x7000000) != 0x5000000)
                break;
              v22 = (Relocation & 0x800000000000000) == 0;
              v20 = 7;
              v23 = 11;
LABEL_41:
              if (v22)
                v20 = v23;
              goto LABEL_43;
            case 9u:
              if ((HIDWORD(Relocation) & 0xF000000) != 0xD000000)
                break;
              v21 = 14;
              goto LABEL_44;
            default:
              break;
          }
          v89 = "{0:x8}";
          v90 = 6;
          v91 = v94;
          v92 = 1;
          v93[0] = &off_251C15858;
          v93[1] = &Relocation;
          v94[0] = v93;
          v52[0] = "Unsupported x86-64 relocation: address=";
          v52[2] = &v89;
          v53 = 1539;
          v54[0] = v52;
          v54[2] = ", symbolnum=";
          v55 = 770;
          v51 = HIDWORD(Relocation) & 0xFFFFFF;
          v86[0] = "{0:x6}";
          v86[1] = 6;
          v86[2] = &v88;
          v86[3] = 1;
          v87[0] = &off_251C12BB8;
          v87[1] = &v51;
          v88 = v87;
          v56[0] = v54;
          v56[2] = v86;
          v57 = 1538;
          v58[0] = v56;
          v58[2] = ", kind=";
          v59 = 770;
          v47 = HIDWORD(Relocation) >> 28;
          v48[0] = "{0:x1}";
          v48[1] = 6;
          v48[2] = &v50;
          v48[3] = 1;
          v49[0] = &off_251C12BB8;
          v49[1] = &v47;
          v50 = v49;
          v60[0] = v58;
          v60[2] = v48;
          v61 = 1538;
          *(_QWORD *)&v62 = v60;
          *(_QWORD *)&v63 = ", pc_rel=";
          LOWORD(v64) = 770;
          v25 = "true";
          if ((Relocation & 0x100000000000000) == 0)
            v25 = "false";
          if (*v25)
          {
            v26 = &v62;
            *(_QWORD *)&v65 = &v62;
            *(_QWORD *)&v66 = v25;
            LOWORD(v67) = 770;
            v27 = 2;
            v28 = 3;
          }
          else
          {
            v65 = v62;
            v66 = v63;
            v67 = v64;
            v27 = v64;
            v28 = BYTE1(v64);
            v26 = (__int128 *)v62;
          }
          v10 = v28 == 1;
          v29 = 2;
          if (!v10)
          {
            v27 = 2;
            v26 = &v65;
          }
          *(_QWORD *)&v68 = v26;
          *((_QWORD *)&v68 + 1) = *((_QWORD *)&v65 + 1);
          *(_QWORD *)&v69 = ", extern=";
          LOBYTE(v70) = v27;
          BYTE1(v70) = 3;
          v30 = "true";
          if ((Relocation & 0x800000000000000) == 0)
            v30 = "false";
          v4 = v35;
          a2 = v36;
          if (*v30)
          {
            *(_QWORD *)&v71 = &v68;
            *(_QWORD *)&v72 = v30;
            LOWORD(v73) = 770;
          }
          else
          {
            v71 = v68;
            v72 = v69;
            v73 = v70;
            v29 = v70;
          }
          if (BYTE1(v73) == 1)
            v32 = v29;
          else
            v32 = 2;
          v33 = &v71;
          if (BYTE1(v73) == 1)
            v33 = (__int128 *)v71;
          v74[0] = v33;
          v74[1] = *((_QWORD *)&v71 + 1);
          v74[2] = ", length=";
          v75 = v32;
          v76 = 3;
          v43 = (HIDWORD(Relocation) >> 25) & 3;
          v44[0] = "{0:d}";
          v44[1] = 5;
          v44[2] = &v46;
          v44[3] = 1;
          v45[0] = &off_251C12BB8;
          v45[1] = &v43;
          v46 = v45;
          v34 = operator new();
          v79[0] = (llvm::formatv_object_base *)v74;
          v79[2] = (llvm::formatv_object_base *)v44;
          v80 = 2;
          v81 = 6;
          v82 = v77;
          v83 = v78;
          *(_QWORD *)v34 = off_251C15728;
          llvm::Twine::str(v79, (std::string *)(v34 + 8));
          *v36 = v34;
          goto LABEL_52;
        }
        a2 = v36;
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Relocation extends past end of fixup block", v36);
      }
      v17 = 1;
      goto LABEL_67;
    }
    v24 = v84;
    v84 = 0;
    *a2 = v24;
LABEL_52:
    v17 = 1;
LABEL_68:
    if ((v85 & 1) != 0)
    {
      v31 = v84;
      v84 = 0;
      if (v31)
        (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
    }
    if (v17 != 5 && v17)
      return;
    goto LABEL_73;
  }
LABEL_84:
  *a2 = 0;
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[67]>(uint64_t *a1)
{
  uint64_t v2;
  llvm::formatv_object_base *v3;
  __int16 v4;

  v2 = operator new();
  v3 = (llvm::formatv_object_base *)"x86_64 SUBTRACTOR and paired UNSIGNED point to different addresses";
  v4 = 259;
  *(_QWORD *)v2 = off_251C15728;
  llvm::Twine::str(&v3, (std::string *)(v2 + 8));
  *a1 = v2;
}

void llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[65]>(uint64_t *a1)
{
  uint64_t v2;
  llvm::formatv_object_base *v3;
  __int16 v4;

  v2 = operator new();
  v3 = (llvm::formatv_object_base *)"length of x86_64 SUBTRACTOR and paired UNSIGNED reloc must match";
  v4 = 259;
  *(_QWORD *)v2 = off_251C15728;
  llvm::Twine::str(&v3, (std::string *)(v2 + 8));
  *a1 = v2;
}

uint64_t llvm::jitlink::x86_64::GOTTableManager::visitEdge(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v6;
  uint64_t Section;

  result = 0;
  v6 = 19;
  switch(*(_BYTE *)(a4 + 24))
  {
    case 0xA:
      if (*(_QWORD *)(a1 + 24))
        return 0;
      Section = llvm::jitlink::LinkGraph::createSection(a2, (uint64_t)"$__GOT", 6, 1);
      result = 0;
      *(_QWORD *)(a1 + 24) = Section;
      return result;
    case 0xF:
      v6 = 7;
      goto LABEL_8;
    case 0x10:
      v6 = 6;
      goto LABEL_8;
    case 0x11:
      v6 = 10;
      goto LABEL_8;
    case 0x14:
      goto LABEL_8;
    case 0x15:
      v6 = 18;
LABEL_8:
      *(_BYTE *)(a4 + 24) = v6;
      *(_QWORD *)a4 = llvm::jitlink::TableManager<llvm::jitlink::x86_64::GOTTableManager>::getEntryForTarget(a1, a2, *(_OWORD **)a4, (unint64_t *)a4);
      result = 1;
      break;
    default:
      return result;
  }
  return result;
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::x86_64::GOTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  int v7;
  uint64_t v8;
  _QWORD *Entry;
  unint64_t *v10;
  __int128 v12;
  _QWORD *v13;
  _OWORD v14[2];

  v14[0] = *a3;
  *(_QWORD *)&v12 = 0;
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v14, &v12, a4);
  v8 = v12;
  if (!v7)
    v8 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  if (v8 == *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    Entry = llvm::jitlink::x86_64::GOTTableManager::createEntry(a1, a2, (uint64_t)a3);
    v12 = *a3;
    v13 = Entry;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v12, &v13, v10, (uint64_t)v14);
    v8 = *(_QWORD *)&v14[0];
  }
  return *(_QWORD *)(v8 + 16);
}

_QWORD *llvm::jitlink::x86_64::GOTTableManager::createEntry(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t Section;
  _QWORD *v7;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12[2];

  Section = *(_QWORD *)(a1 + 24);
  if (!Section)
  {
    Section = llvm::jitlink::LinkGraph::createSection(a2, (uint64_t)"$__GOT", 6, 1);
    *(_QWORD *)(a1 + 24) = Section;
  }
  v12[0] = (uint64_t)&llvm::jitlink::x86_64::NullPointerContent;
  v12[1] = 8;
  v10 = 8;
  v11 = -8;
  v9 = 0;
  v7 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, Section, v12, &v11, &v10, &v9);
  llvm::jitlink::Block::addEdge(v7, 2, 0, a3, 0);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v7, 0, 8, 0, 0);
}

uint64_t llvm::jitlink::x86_64::PLTTableManager::visitEdge(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t *a4)
{
  _OWORD *v4;

  if (*((_BYTE *)a4 + 24) != 11)
    return 0;
  v4 = (_OWORD *)*a4;
  if ((*(_BYTE *)(*(_QWORD *)(*a4 + 16) + 8) & 1) != 0)
    return 0;
  *((_BYTE *)a4 + 24) = 14;
  *a4 = llvm::jitlink::TableManager<llvm::jitlink::x86_64::PLTTableManager>::getEntryForTarget(a1, a2, v4, a4);
  return 1;
}

uint64_t llvm::jitlink::TableManager<llvm::jitlink::x86_64::PLTTableManager>::getEntryForTarget(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  int v7;
  unint64_t *v8;
  uint64_t v9;
  _QWORD *Entry;
  unint64_t *v11;
  __int128 v13;
  _QWORD *v14;
  _OWORD v15[2];

  v15[0] = *a3;
  *(_QWORD *)&v13 = 0;
  v7 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>((uint64_t *)a1, (uint64_t)v15, &v13, a4);
  v9 = v13;
  if (!v7)
    v9 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  if (v9 == *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16))
  {
    Entry = llvm::jitlink::x86_64::PLTTableManager::createEntry(a1, a2, a3, v8);
    v13 = *a3;
    v14 = Entry;
    llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>(a1, &v13, &v14, v11, (uint64_t)v15);
    v9 = *(_QWORD *)&v15[0];
  }
  return *(_QWORD *)(v9 + 16);
}

_QWORD *llvm::jitlink::x86_64::PLTTableManager::createEntry(uint64_t a1, uint64_t a2, _OWORD *a3, unint64_t *a4)
{
  uint64_t Section;
  uint64_t EntryForTarget;
  _QWORD *v9;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14[2];

  Section = *(_QWORD *)(a1 + 32);
  if (!Section)
  {
    Section = llvm::jitlink::LinkGraph::createSection(a2, (uint64_t)"$__STUBS", 8, 5);
    *(_QWORD *)(a1 + 32) = Section;
  }
  EntryForTarget = llvm::jitlink::TableManager<llvm::jitlink::x86_64::GOTTableManager>::getEntryForTarget(*(_QWORD *)(a1 + 24), a2, a3, a4);
  v14[0] = (uint64_t)&llvm::jitlink::x86_64::PointerJumpStubContent;
  v14[1] = 6;
  v12 = 1;
  v13 = -6;
  v11 = 0;
  v9 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(a2, Section, v14, &v13, &v12, &v11);
  llvm::jitlink::Block::addEdge(v9, 7, 2, EntryForTarget, -4);
  return llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v9, 0, 6, 1, 0);
}

void llvm::jitlink::MachOJITLinker_x86_64::~MachOJITLinker_x86_64(llvm::jitlink::MachOJITLinker_x86_64 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::JITLinker<llvm::jitlink::MachOJITLinker_x86_64>::fixUpBlocks(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t *v14;
  size_t v15;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__src;
  int v21;

  if (*(_DWORD *)(a1 + 192))
  {
    v4 = *(unsigned int *)(a1 + 200);
    if ((_DWORD)v4)
    {
      v5 = 24 * v4;
      v6 = *(_QWORD **)(a1 + 184);
      while (*v6 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v6 += 3;
        v5 -= 24;
        if (!v5)
          goto LABEL_6;
      }
    }
    else
    {
      v6 = *(_QWORD **)(a1 + 184);
    }
    v7 = *(_QWORD *)(a1 + 184) + 24 * v4;
LABEL_10:
    if (v6 != (_QWORD *)v7)
    {
      v8 = v6[2];
      v21 = *(_DWORD *)(v8 + 20);
      v9 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v8 + 32);
      v11 = *(_QWORD *)(v8 + 32) + 8 * *(unsigned int *)(v8 + 48);
      if ((uint64_t **)v11 == v9)
        goto LABEL_28;
      v12 = v9;
      v13 = v10;
      do
      {
        v14 = *v12;
        if (v21 == 2 && (v14[1] & 4) == 0)
        {
          v15 = v14[4];
          __src = (void *)v14[3];
          v16 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a1, v15, 0);
          v17 = (uint64_t)v16;
          if (v15)
            memmove(v16, __src, v15);
          v14[3] = v17;
          v14[4] = v15;
          v14[1] |= 4uLL;
        }
        v18 = v14[5];
        v19 = v14[6];
        while (v18 != v19)
        {
          if (*(unsigned __int8 *)(v18 + 24) >= 2u)
          {
            llvm::jitlink::x86_64::applyFixup(a1, v14, v18, 0, a2);
            if (*a2)
              return;
          }
          v18 += 32;
        }
        while (++v12 != v13)
        {
          if (((unint64_t)*v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_27;
        }
        v12 = v13;
LABEL_27:
        ;
      }
      while (v12 != (uint64_t **)v11);
LABEL_28:
      while (1)
      {
        v6 += 3;
        if (v6 == (_QWORD *)v7)
          break;
        if (*v6 < 0xFFFFFFFFFFFFFFFELL)
          goto LABEL_10;
      }
    }
  }
LABEL_6:
  *a2 = 0;
}

void llvm::jitlink::JITLinker<llvm::jitlink::MachOJITLinker_x86_64>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::x86_64::applyFixup(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::string *v17;
  std::string::size_type v18;
  __int128 v19;
  const char *EdgeKindName;
  llvm::formatv_object_base *v21;
  llvm::formatv_object_base *v22;
  uint64_t v23;
  std::string v24;
  void *__p[2];
  std::string::size_type v26;
  _QWORD v27[2];
  __int128 v28;
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  int v32;
  __int16 v33;
  int v34;
  __int16 v35;
  llvm::formatv_object_base *v36[4];
  __int16 v37;
  int v38;
  __int16 v39;

  v8 = a2[3];
  v9 = *(unsigned int *)(a3 + 8);
  v10 = *a2 + v9;
  switch(*(_BYTE *)(a3 + 24))
  {
    case 2:
      v12 = **(_QWORD **)(*(_QWORD *)a3 + 16);
      v13 = (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)(a3 + 16);
      goto LABEL_10;
    case 3:
      v11 = (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + *(_QWORD *)(a3 + 16)
          + **(_QWORD **)(*(_QWORD *)a3 + 16);
      if (HIDWORD(v11))
        goto LABEL_28;
      goto LABEL_16;
    case 4:
      v14 = **(_QWORD **)(*(_QWORD *)a3 + 16);
      v15 = (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)(a3 + 16);
      goto LABEL_12;
    case 5:
      if (((*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFuLL)
          + *(_QWORD *)(a3 + 16)
          + **(_QWORD **)(*(_QWORD *)a3 + 16)) >> 16)
        goto LABEL_28;
      *(_WORD *)(v8 + v9) = *(_WORD *)(*(_QWORD *)a3 + 24) + *(_WORD *)(a3 + 16) + **(_WORD **)(*(_QWORD *)a3 + 16);
      goto LABEL_19;
    case 6:
      v13 = **(_QWORD **)(*(_QWORD *)a3 + 16) - v10;
      v12 = (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)(a3 + 16);
LABEL_10:
      v16 = v13 + v12;
      goto LABEL_18;
    case 7:
      v15 = **(_QWORD **)(*(_QWORD *)a3 + 16) - v10;
      v14 = (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)(a3 + 16);
LABEL_12:
      v11 = v15 + v14;
      goto LABEL_15;
    case 8:
      v16 = v10
          - (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          - **(_QWORD **)(*(_QWORD *)a3 + 16)
          + *(_QWORD *)(a3 + 16);
      goto LABEL_18;
    case 9:
      v11 = v10
          - (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          - **(_QWORD **)(*(_QWORD *)a3 + 16)
          + *(_QWORD *)(a3 + 16);
      goto LABEL_15;
    case 0xA:
      v16 = (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + **(_QWORD **)(*(_QWORD *)a3 + 16)
          - (**(_QWORD **)(a4 + 16)
           + (*(_QWORD *)(a4 + 24) & 0x1FFFFFFFFFFFFFFLL))
          + *(_QWORD *)(a3 + 16);
LABEL_18:
      *(_QWORD *)(v8 + v9) = v16;
      goto LABEL_19;
    case 0xB:
    case 0xC:
    case 0xD:
    case 0xE:
    case 0x12:
    case 0x13:
    case 0x16:
      v11 = **(_QWORD **)(*(_QWORD *)a3 + 16)
          - v10
          + (*(_QWORD *)(*(_QWORD *)a3 + 24) & 0x1FFFFFFFFFFFFFFLL)
          + *(_QWORD *)(a3 + 16)
          - 4;
LABEL_15:
      if (v11 == (int)v11)
      {
LABEL_16:
        *(_DWORD *)(v8 + v9) = v11;
LABEL_19:
        *a5 = 0;
      }
      else
      {
LABEL_28:
        llvm::jitlink::makeTargetOutOfRangeError(a1, a2, a3, a5);
      }
      return;
    default:
      std::operator+<char>();
      v17 = std::string::append(&v24, ", section ");
      v18 = v17->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
      v26 = v18;
      v17->__r_.__value_.__l.__size_ = 0;
      v17->__r_.__value_.__r.__words[2] = 0;
      v17->__r_.__value_.__r.__words[0] = 0;
      v19 = *(_OWORD *)a2[2];
      v27[0] = __p;
      v28 = v19;
      v29 = 1284;
      v30[0] = v27;
      v30[2] = " unsupported edge kind ";
      v31 = 770;
      EdgeKindName = llvm::jitlink::x86_64::getEdgeKindName((llvm::jitlink::x86_64 *)*(unsigned __int8 *)(a3 + 24));
      if (*EdgeKindName)
      {
        v21 = (llvm::formatv_object_base *)EdgeKindName;
        v22 = (llvm::formatv_object_base *)v30;
      }
      else
      {
        v22 = (llvm::formatv_object_base *)v27;
        v34 = v32;
        v35 = v33;
        v21 = (llvm::formatv_object_base *)" unsupported edge kind ";
      }
      v23 = operator new();
      v36[0] = v22;
      v36[2] = v21;
      v37 = 770;
      v38 = v34;
      v39 = v35;
      *(_QWORD *)v23 = off_251C15728;
      llvm::Twine::str(v36, (std::string *)(v23 + 8));
      *a5 = v23;
      if (SHIBYTE(v26) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v24.__r_.__value_.__l.__data_);
      return;
  }
}

void llvm::jitlink::MachOLinkGraphBuilder::~MachOLinkGraphBuilder(llvm::jitlink::MachOLinkGraphBuilder *this)
{
  *(_QWORD *)this = off_251C15980;
  llvm::StringMap<std::function<llvm::Error ()(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &)>,llvm::MallocAllocator>::~StringMap((uint64_t)this + 184);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 20), 8);
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::destroyAll((uint64_t)this + 128);
  MEMORY[0x24BD1B398](*((_QWORD *)this + 16), 8);
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)this + 14, 0);
  llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::~BumpPtrAllocatorImpl((uint64_t)this + 8);
}

void llvm::jitlink::MachOLinkGraphBuilder::buildGraph(llvm::jitlink::MachOLinkGraphBuilder *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (((*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 440))(*((_QWORD *)this + 13)) & 1) != 0)
  {
    llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(this, &v5);
    v4 = v5;
    if (v5)
      goto LABEL_7;
    llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSymbols(this, &v5);
    v4 = v5;
    if (v5
      || (llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(this, &v5), (v4 = v5) != 0)
      || (llvm::jitlink::MachOLinkGraphBuilder::graphifySectionsWithCustomParsers((uint64_t)this, &v5), (v4 = v5) != 0)
      || ((*(void (**)(uint64_t *__return_ptr, llvm::jitlink::MachOLinkGraphBuilder *))(*(_QWORD *)this + 16))(&v5, this), (v4 = v5) != 0))
    {
LABEL_7:
      *(_BYTE *)(a2 + 8) |= 1u;
    }
    else
    {
      *(_BYTE *)(a2 + 8) &= ~1u;
      v4 = *((_QWORD *)this + 14);
      *((_QWORD *)this + 14) = 0;
    }
  }
  else
  {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Object is not a relocatable MachO", &v6);
    *(_BYTE *)(a2 + 8) |= 1u;
    v4 = v6;
  }
  *(_QWORD *)a2 = v4;
}

void llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(llvm::jitlink::MachOLinkGraphBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  size_t v20;
  void *Content;
  uint64_t v22;
  uint64_t Section;
  _QWORD *v24;
  char *v25;
  _QWORD **v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  _QWORD *v34;
  uint64_t v35;
  char *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  _DWORD *v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  _DWORD *v47;
  uint64_t v48;
  unint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  int v60;
  __int128 *v61;
  char v62;
  __int128 *v63;
  char v64;
  const char *v65;
  __int128 *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  _QWORD v74[4];
  __int16 v75;
  __int128 v76;
  __int128 v77;
  uint64_t v78;
  __int128 v79;
  __int128 v80;
  uint64_t v81;
  __int128 v82;
  __int128 v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  _OWORD *v88;
  uint64_t v89;
  const char *v90;
  char v91;
  char v92;
  int v93;
  __int16 v94;
  __int128 v95;
  __int128 v96;
  uint64_t v97;
  const char *v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  uint64_t v104;
  char *v105;
  _QWORD *v106;
  char *v107;
  char *v108;
  _BYTE v109[40];
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  _BYTE *v114;
  _QWORD *v115;
  char *v116;
  char *v117;
  __int128 v118;
  _BYTE v119[32];
  __int128 v120;
  __int128 v121;
  uint64_t v122;
  char *v123;
  _QWORD *v124;
  char *v125;
  uint64_t v126;

  v126 = *MEMORY[0x24BDAC8D0];
  v3 = *((_QWORD *)this + 13);
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 352))(v3);
  v6 = v5;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 360))(v3);
  v88 = (_OWORD *)v4;
  v89 = v6;
  v73 = v8;
  v71 = v7;
  if (v6 != v8 || v4 != v7)
  {
    v72 = (uint64_t *)((char *)this + 128);
    while (1)
    {
      v124 = 0;
      v125 = 0;
      v120 = 0uLL;
      *(_QWORD *)&v119[24] = 0;
      LODWORD(v121) = 0;
      *((_QWORD *)&v121 + 1) = 0;
      v122 = 0;
      v123 = (char *)&v124;
      v10 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)this + 13) + 160))(*((_QWORD *)this + 13), v4);
      if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)this + 13) + 64))(*((_QWORD *)this + 13)))
      {
        getStruct<llvm::MachO::section_64>(*((_QWORD *)this + 13), *(_OWORD **)(*(_QWORD *)(*((_QWORD *)this + 13) + 80) + 8 * v88), (uint64_t)v109);
        v118 = *(_OWORD *)v109;
        *(_OWORD *)&v119[1] = *(_OWORD *)&v109[16];
        v11 = *(_QWORD *)&v109[32];
        v12 = v110;
        v13 = DWORD2(v111);
        v14 = BYTE12(v110);
        v15 = DWORD2(v110);
      }
      else
      {
        getStruct<llvm::MachO::section>(*((_QWORD *)this + 13), *(_QWORD *)(*(_QWORD *)(*((_QWORD *)this + 13) + 80) + 8 * v88), (uint64_t)v109);
        v118 = *(_OWORD *)v109;
        *(_OWORD *)&v119[1] = *(_OWORD *)&v109[16];
        v11 = *(unsigned int *)&v109[32];
        v12 = *(unsigned int *)&v109[36];
        v13 = v111;
        v14 = BYTE4(v110);
        v15 = v110;
      }
      v119[0] = 0;
      v119[17] = 0;
      *(_QWORD *)&v119[24] = v11;
      *(_QWORD *)&v120 = v12;
      *((_QWORD *)&v120 + 1) = 1 << v14;
      LODWORD(v121) = v13;
      if (v13 > 0x12u || ((1 << v13) & 0x41002) == 0)
      {
        v16 = v12 + v15;
        v17 = *((_QWORD *)this + 13);
        if (v16 > *(_QWORD *)(v17 + 24))
        {
          llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Section data extends past end of file", a2);
          std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)&v123, v124);
          return;
        }
        *((_QWORD *)&v121 + 1) = *(_QWORD *)(v17 + 16) + v15;
      }
      if (v13 < 0)
        v18 = 5;
      else
        v18 = 3;
      v19 = *((_QWORD *)this + 14);
      v20 = strlen(&v119[1]);
      *(_WORD *)&v109[32] = 773;
      *(_QWORD *)v109 = &v119[1];
      *(_QWORD *)&v109[8] = v20;
      *(_QWORD *)&v109[16] = ",";
      if ((_BYTE)v118)
      {
        *(_QWORD *)&v95 = v109;
        *(_QWORD *)&v96 = &v118;
        LOWORD(v97) = 770;
      }
      else
      {
        v95 = *(_OWORD *)v109;
        v96 = *(_OWORD *)&v109[16];
        v97 = *(_QWORD *)&v109[32];
      }
      Content = llvm::jitlink::LinkGraph::allocateContent(v19, (unsigned __int8 *)&v95);
      Section = llvm::jitlink::LinkGraph::createSection(*((_QWORD *)this + 14), (uint64_t)Content, v22, v18);
      v122 = Section;
      if ((BYTE3(v121) & 2) != 0)
        *(_DWORD *)(Section + 20) = 2;
      v101 = *(_OWORD *)&v119[16];
      v102 = v120;
      v103 = v121;
      v104 = v122;
      v99 = v118;
      v100 = *(_OWORD *)v119;
      v98 = (const char *)v10;
      v24 = v124;
      v25 = v125;
      v105 = v123;
      v106 = v124;
      v107 = v125;
      if (v125)
      {
        v124[2] = &v106;
        v123 = (char *)&v124;
        v124 = 0;
        v125 = 0;
        v26 = (_QWORD **)v105;
        v24 = v106;
        v25 = v107;
      }
      else
      {
        v105 = (char *)&v106;
        v26 = &v106;
      }
      *(_DWORD *)v109 = v10;
      v110 = v101;
      v111 = v102;
      v112 = v103;
      v113 = v104;
      *(_OWORD *)&v109[8] = v99;
      *(_OWORD *)&v109[24] = v100;
      v114 = v26;
      v115 = v24;
      v116 = v25;
      if (v25)
      {
        v24[2] = &v115;
        v105 = (char *)&v106;
        v106 = 0;
        v107 = 0;
      }
      else
      {
        v114 = &v115;
      }
      *(_QWORD *)&v85 = 0;
      if ((llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>(v72, v109, &v85) & 1) == 0)break;
LABEL_35:
      std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)&v114, v115);
      std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)&v105, v106);
      std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)&v123, v124);
      (*(void (**)(uint64_t, _OWORD **))(*(_QWORD *)v89 + 136))(v89, &v88);
      v4 = (uint64_t)v88;
      if (v89 == v73 && v88 == (_OWORD *)v71)
        goto LABEL_40;
    }
    v27 = *((_DWORD *)this + 34);
    v28 = *((_DWORD *)this + 36);
    if (4 * v27 + 4 >= 3 * v28)
    {
      v28 *= 2;
    }
    else if (v28 + ~v27 - *((_DWORD *)this + 35) > v28 >> 3)
    {
LABEL_30:
      v29 = v85;
      ++*((_DWORD *)this + 34);
      if (*(_DWORD *)v29 != -1)
        --*((_DWORD *)this + 35);
      *(_DWORD *)v29 = *(_DWORD *)v109;
      v30 = *(_OWORD *)&v109[8];
      *(_OWORD *)(v29 + 24) = *(_OWORD *)&v109[24];
      *(_OWORD *)(v29 + 8) = v30;
      v31 = v110;
      v32 = v111;
      v33 = v112;
      *(_QWORD *)(v29 + 88) = v113;
      *(_OWORD *)(v29 + 72) = v33;
      *(_OWORD *)(v29 + 56) = v32;
      *(_OWORD *)(v29 + 40) = v31;
      *(_QWORD *)(v29 + 96) = v114;
      v34 = v115;
      *(_QWORD *)(v29 + 104) = v115;
      v35 = v29 + 104;
      v36 = v116;
      *(_QWORD *)(v29 + 112) = v116;
      if (v36)
      {
        v34[2] = v35;
        v114 = &v115;
        v115 = 0;
        v116 = 0;
      }
      else
      {
        *(_QWORD *)(v29 + 96) = v35;
      }
      goto LABEL_35;
    }
    llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::grow((uint64_t)v72, v28);
    *(_QWORD *)&v85 = 0;
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>(v72, v109, &v85);
    goto LABEL_30;
  }
LABEL_40:
  v37 = *((unsigned int *)this + 34);
  if (!(_DWORD)v37)
  {
    *a2 = 0;
    return;
  }
  v38 = (uint64_t *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v37);
  v40 = v38;
  if (*((_DWORD *)this + 34))
  {
    v41 = *((unsigned int *)this + 36);
    if ((_DWORD)v41)
    {
      v42 = 120 * v41;
      v43 = (_DWORD *)*((_QWORD *)this + 16);
      while (*v43 >= 0xFFFFFFFE)
      {
        v43 += 30;
        v42 -= 120;
        if (!v42)
          goto LABEL_80;
      }
    }
    else
    {
      v43 = (_DWORD *)*((_QWORD *)this + 16);
    }
    v44 = *((_QWORD *)this + 16) + 120 * v41;
    if (v43 != (_DWORD *)v44)
    {
      v45 = v38;
      v46 = &v38[v39];
LABEL_51:
      v47 = v43 + 2;
      if (v45 >= v46)
      {
        v48 = v45 - v40;
        v49 = v48 + 1;
        if ((unint64_t)(v48 + 1) >> 61)
          abort();
        if (((char *)v46 - (char *)v40) >> 2 > v49)
          v49 = ((char *)v46 - (char *)v40) >> 2;
        if ((unint64_t)((char *)v46 - (char *)v40) >= 0x7FFFFFFFFFFFFFF8)
          v50 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v50 = v49;
        if (v50)
          v50 = (unint64_t)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::IntrusiveRefCntPtr<llvm::orc::ResourceTracker>>>(v50);
        else
          v51 = 0;
        v52 = (uint64_t *)(v50 + 8 * v48);
        *v52 = (uint64_t)v47;
        v53 = v52 + 1;
        while (v45 != v40)
        {
          v54 = *--v45;
          *--v52 = v54;
        }
        v46 = (uint64_t *)(v50 + 8 * v51);
        if (v40)
          operator delete(v40);
        v40 = v52;
        v45 = v53;
      }
      else
      {
        *v45++ = (uint64_t)v47;
      }
      while (1)
      {
        v43 += 30;
        if (v43 == (_DWORD *)v44)
          break;
        if (*v43 < 0xFFFFFFFE)
        {
          if (v43 != (_DWORD *)v44)
            goto LABEL_51;
          break;
        }
      }
      if (v40 != v45)
      {
        v55 = 1;
        std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **,false>(v40, v45, 126 - 2 * __clz(v45 - v40), 1);
        do
        {
          if (((unint64_t)((char *)v45 - (char *)v40) >> 3) == v55)
            goto LABEL_80;
          v56 = v40[v55 - 1];
          v57 = v40[v55];
          v58 = *(_QWORD *)(v56 + 48) + *(_QWORD *)(v56 + 40);
          v59 = *(_QWORD *)(v57 + 40);
          ++v55;
        }
        while (v59 >= v58);
        *(_QWORD *)v109 = "\"{0}/{1}\" [ {2:x16} -- {3:x16} ] ";
        *(_QWORD *)&v109[8] = 33;
        *(_QWORD *)&v109[16] = &v114;
        *(_QWORD *)&v109[24] = 4;
        *(_QWORD *)&v109[32] = &off_251C159A8;
        *(_QWORD *)&v110 = v56 + 17;
        *((_QWORD *)&v110 + 1) = &off_251C159A8;
        *(_QWORD *)&v111 = v56;
        *((_QWORD *)&v111 + 1) = &off_251C144D8;
        *(_QWORD *)&v112 = v56 + 40;
        *((_QWORD *)&v112 + 1) = &off_251C151F0;
        v113 = v58;
        v114 = &v109[32];
        v115 = (_QWORD *)&v110 + 1;
        v116 = (char *)&v111 + 8;
        v117 = (char *)&v112 + 8;
        v74[0] = "Address range for section ";
        v74[2] = v109;
        v75 = 1539;
        LOWORD(v78) = 770;
        *(_QWORD *)&v77 = "overlaps section \"";
        v60 = *(unsigned __int8 *)(v57 + 17);
        *(_QWORD *)&v76 = v74;
        if (v60)
        {
          v61 = &v76;
          *(_QWORD *)&v79 = &v76;
          *(_QWORD *)&v80 = v57 + 17;
          LOWORD(v81) = 770;
          v62 = 2;
          v63 = &v79;
        }
        else
        {
          v79 = v76;
          v80 = v77;
          v81 = v78;
          v62 = v78;
          if (v78 == 1)
          {
            *(_QWORD *)&v82 = "/";
            LOWORD(v84) = 259;
            if (*(_BYTE *)v57)
            {
              v64 = 3;
              v65 = "/";
              v63 = (__int128 *)*((_QWORD *)&v82 + 1);
              goto LABEL_79;
            }
LABEL_87:
            v85 = v82;
            v86 = v83;
            v87 = v84;
            v64 = v84;
            goto LABEL_88;
          }
          v61 = (__int128 *)*((_QWORD *)&v79 + 1);
          v63 = &v79;
          if (BYTE1(v81) == 1)
            v63 = (__int128 *)v79;
          else
            v62 = 2;
        }
        *(_QWORD *)&v82 = v63;
        *((_QWORD *)&v82 + 1) = v61;
        *(_QWORD *)&v83 = "/";
        LOBYTE(v84) = v62;
        BYTE1(v84) = 3;
        if (*(_BYTE *)v57)
        {
          v64 = 2;
          v65 = (const char *)&v82;
LABEL_79:
          *(_QWORD *)&v85 = v65;
          *((_QWORD *)&v85 + 1) = v63;
          *(_QWORD *)&v86 = v57;
          LOBYTE(v87) = v64;
          BYTE1(v87) = 3;
LABEL_88:
          if (BYTE1(v87) != 1)
            v64 = 2;
          v66 = &v85;
          if (BYTE1(v87) == 1)
            v66 = (__int128 *)v85;
          v88 = v66;
          v89 = *((_QWORD *)&v85 + 1);
          v90 = "\"";
          v91 = v64;
          v92 = 3;
          v67 = *(_QWORD *)(v57 + 48) + v59;
          v98 = "\"{0}/{1}\" [ {2:x16} -- {3:x16} ] ";
          *(_QWORD *)&v99 = 33;
          *((_QWORD *)&v99 + 1) = &v105;
          *(_QWORD *)&v100 = 4;
          *((_QWORD *)&v100 + 1) = &off_251C159A8;
          *(_QWORD *)&v101 = v57 + 17;
          *((_QWORD *)&v101 + 1) = &off_251C159A8;
          *(_QWORD *)&v102 = v57;
          *((_QWORD *)&v102 + 1) = &off_251C144D8;
          *(_QWORD *)&v103 = v57 + 40;
          *((_QWORD *)&v103 + 1) = &off_251C151F0;
          v104 = v67;
          v105 = (char *)&v100 + 8;
          v106 = (_QWORD *)&v101 + 1;
          v107 = (char *)&v102 + 8;
          v108 = (char *)&v103 + 8;
          v68 = *((_QWORD *)&v85 + 1);
          v69 = operator new();
          *(_QWORD *)&v118 = &v88;
          *((_QWORD *)&v118 + 1) = v68;
          *(_QWORD *)v119 = &v98;
          v119[16] = 2;
          v119[17] = 6;
          *(_DWORD *)&v119[18] = v93;
          *(_WORD *)&v119[22] = v94;
          *(_QWORD *)v69 = off_251C15728;
          llvm::Twine::str((llvm::formatv_object_base **)&v118, (std::string *)(v69 + 8));
          *a2 = v69;
          goto LABEL_81;
        }
        goto LABEL_87;
      }
    }
  }
LABEL_80:
  *a2 = 0;
  if (v40)
LABEL_81:
    operator delete(v40);
}

void llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSymbols(llvm::jitlink::MachOLinkGraphBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t Symbol64TableEntry;
  unint64_t v13;
  unint64_t v14;
  unsigned int v15;
  char v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  char v20;
  unint64_t v21;
  unint64_t v22;
  char v23;
  char *v24;
  int v25;
  unsigned int v26;
  uint64_t v27;
  char *v28;
  const char *v29;
  uint64_t v30;
  uint64_t *v32;
  uint64_t v33;
  _QWORD v34[4];
  __int16 v35;
  _QWORD v36[4];
  __int16 v37;
  _QWORD v38[2];
  const char **v39;
  uint64_t v40;
  __int16 v41;
  unint64_t v42;
  int SymbolIndex;
  uint64_t *v44;
  uint64_t v45;
  llvm::formatv_object_base *v46[2];
  const char *v47;
  __int16 v48;
  const char *v49;
  char v50;
  const char *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t (**v55)(llvm::detail::format_adapter *__hidden);
  uint64_t *p_SymbolIndex;
  _QWORD v57[3];

  v57[1] = *MEMORY[0x24BDAC8D0];
  v4 = *((_QWORD *)this + 13);
  v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 48))(v4);
  v7 = v6;
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  v44 = v5;
  v45 = v7;
  if (v5 == (uint64_t *)v8)
  {
LABEL_2:
    *a2 = 0;
    return;
  }
  v9 = (uint64_t *)v8;
  v32 = (uint64_t *)((char *)this + 160);
  while (1)
  {
    SymbolIndex = 0;
    SymbolIndex = llvm::object::MachOObjectFile::getSymbolIndex(*((_QWORD **)this + 13), (uint64_t)v5);
    v10 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 13) + 64))(*((_QWORD *)this + 13));
    v11 = *((_QWORD *)this + 13);
    if (v10)
    {
      Symbol64TableEntry = llvm::object::MachOObjectFile::getSymbol64TableEntry(v11, v44);
      v14 = v13;
    }
    else
    {
      Symbol64TableEntry = llvm::object::MachOObjectFile::getSymbolTableEntry(v11, v44);
      v14 = v15;
    }
    v42 = v14;
    v16 = BYTE4(Symbol64TableEntry);
    if (BYTE4(Symbol64TableEntry) > 0x1Fu)
      goto LABEL_33;
    if ((_DWORD)Symbol64TableEntry)
    {
      (*(void (**)(const char **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v45 + 80))(&v51, v45, v44);
      if ((v53 & 1) != 0)
      {
        v29 = v51;
LABEL_42:
        *a2 = (uint64_t)v29;
        return;
      }
      v2 = (unint64_t)v51;
      v33 = v52;
    }
    else
    {
      if ((Symbol64TableEntry & 0x100000000) != 0)
      {
        v51 = "{0}";
        v52 = 3;
        v53 = v57;
        v54 = 1;
        v55 = &off_251C158D8;
        p_SymbolIndex = (uint64_t *)&SymbolIndex;
        v57[0] = &v55;
        v38[0] = "Symbol at index ";
        v39 = &v51;
        v41 = 1539;
        v30 = operator new();
        v46[0] = (llvm::formatv_object_base *)v38;
        v47 = " has no name (string table index 0), but N_EXT bit is set";
        v48 = 770;
        *(_QWORD *)v30 = off_251C15728;
        llvm::Twine::str(v46, (std::string *)(v30 + 8));
        *a2 = v30;
        return;
      }
      v2 &= 0xFFFFFFFFFFFFFF00;
    }
    if (!BYTE5(Symbol64TableEntry))
      goto LABEL_19;
    llvm::jitlink::MachOLinkGraphBuilder::findSectionByIndex(this, BYTE5(Symbol64TableEntry) - 1, (uint64_t)&v49);
    if ((v50 & 1) != 0)
    {
      v29 = v49;
      goto LABEL_42;
    }
    v17 = *((_QWORD *)v49 + 5);
    if (v14 < v17 || v14 > *((_QWORD *)v49 + 6) + v17)
      break;
    if (*((_QWORD *)v49 + 10))
    {
LABEL_19:
      v18 = HIWORD(Symbol64TableEntry);
      v19 = (Symbol64TableEntry & 0xC0000000000000) != 0;
      if ((Symbol64TableEntry & 0x100000000) != 0)
      {
        if ((Symbol64TableEntry & 0x1000000000) != 0)
        {
          v20 = 1;
        }
        else if (v33)
        {
          v20 = *(_BYTE *)v2 == 108;
        }
        else
        {
          v20 = 0;
        }
      }
      else
      {
        v20 = 2;
      }
      v21 = Symbol64TableEntry >> 40;
      v22 = llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this + 8, 48, 3);
      *(_QWORD *)v22 = v2;
      *(_QWORD *)(v22 + 8) = v33;
      *(_BYTE *)(v22 + 16) = 1;
      *(_QWORD *)(v22 + 24) = v14;
      *(_BYTE *)(v22 + 32) = v16;
      *(_BYTE *)(v22 + 33) = v21;
      *(_WORD *)(v22 + 34) = v18;
      *(_BYTE *)(v22 + 36) = v19;
      *(_BYTE *)(v22 + 37) = v20;
      *(_QWORD *)(v22 + 40) = 0;
      v51 = 0;
      v23 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(v32, &SymbolIndex, &v51);
      v24 = (char *)v51;
      if ((v23 & 1) == 0)
      {
        v25 = *((_DWORD *)this + 42);
        v26 = *((_DWORD *)this + 44);
        if (4 * v25 + 4 >= 3 * v26)
        {
          v26 *= 2;
        }
        else if (v26 + ~v25 - *((_DWORD *)this + 43) > v26 >> 3)
        {
          goto LABEL_29;
        }
        llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::grow((uint64_t)v32, v26);
        v51 = 0;
        llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(v32, &SymbolIndex, &v51);
        v24 = (char *)v51;
LABEL_29:
        ++*((_DWORD *)this + 42);
        if (*(_DWORD *)v24 != -1)
          --*((_DWORD *)this + 43);
        *(_DWORD *)v24 = SymbolIndex;
        *((_QWORD *)v24 + 1) = 0;
      }
      *((_QWORD *)v24 + 1) = v22;
    }
LABEL_33:
    (*(void (**)(uint64_t, uint64_t **))(*(_QWORD *)v45 + 24))(v45, &v44);
    v5 = v44;
    if (v44 == v9)
      goto LABEL_2;
  }
  v51 = "{0:x}";
  v52 = 5;
  v53 = v57;
  v54 = 1;
  v55 = &off_251C14EA8;
  p_SymbolIndex = (uint64_t *)&v42;
  v57[0] = &v55;
  v34[0] = "Address ";
  v34[2] = &v51;
  v35 = 1539;
  v36[0] = v34;
  v36[2] = " for symbol ";
  v37 = 770;
  v38[0] = v36;
  v39 = (const char **)v2;
  v40 = v33;
  v41 = 1282;
  v27 = operator new();
  v46[0] = (llvm::formatv_object_base *)v38;
  v47 = " does not fall within section";
  v48 = 770;
  *(_QWORD *)v27 = off_251C15728;
  llvm::Twine::str(v46, (std::string *)(v27 + 8));
  *a2 = v27;
  if ((v50 & 1) != 0)
  {
    v28 = (char *)v49;
    v49 = 0;
    if (v28)
      (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
  }
}

void llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(llvm::jitlink::MachOLinkGraphBuilder *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t Section;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _BYTE *v16;
  uint64_t v17;
  char v18;
  char *v19;
  unint64_t v20;
  char *v21;
  unint64_t v22;
  char *v23;
  _QWORD *v24;
  char **v25;
  char *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  int Key;
  int v41;
  char *v42;
  uint64_t *v43;
  uint64_t *v44;
  const char **v45;
  const char *v46;
  const char *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t **v51;
  uint64_t *v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  _QWORD *v66;
  unint64_t v67;
  _QWORD *v68;
  unsigned int v69;
  char v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  uint64_t *StandardGraphSymbol;
  uint64_t v76;
  _BOOL4 v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  uint64_t *v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t *v96;
  unint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  void *v105;
  const char *v106;
  const char *v107;
  char v108;
  char v109;
  uint64_t *v110;
  uint64_t **v111;
  char v112;
  char v113;
  uint64_t *v114;
  char v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  const char *v119;
  const char **v120;
  const char *v121;
  const char *v122;
  uint64_t v123;
  uint64_t v124;
  const char *v125;
  uint64_t v126;
  __int16 v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t *v130;
  char *__p;
  uint64_t *v132;
  unint64_t v133;
  unint64_t v134;
  _QWORD v135[4];
  __int16 v136;
  _QWORD v137[4];
  char v138;
  char v139;
  uint64_t v140[2];
  uint64_t v141;
  uint64_t v142;
  __int16 v143;
  unint64_t v144;
  uint64_t v145;
  const char *v146;
  __int16 v147;
  uint64_t v148[2];
  void *v149;
  uint64_t v150;
  char v151;
  char v152;
  uint64_t v153[2];
  const char *v154;
  const char *v155;
  __int16 v156;
  uint64_t *v157;
  uint64_t v158;
  _QWORD v159[2];
  __int16 v160;
  uint64_t v161;

  v161 = *MEMORY[0x24BDAC8D0];
  __p = (char *)operator new(0x1800uLL);
  bzero(__p, 0x1800uLL);
  if (!*((_DWORD *)this + 42))
    goto LABEL_50;
  v5 = *((unsigned int *)this + 44);
  if ((_DWORD)v5)
  {
    v6 = 16 * v5;
    v2 = *((_QWORD *)this + 20);
    while (*(_DWORD *)v2 >= 0xFFFFFFFE)
    {
      v2 += 16;
      v6 -= 16;
      if (!v6)
        goto LABEL_50;
    }
  }
  else
  {
    v2 = *((_QWORD *)this + 20);
  }
  v7 = *((_QWORD *)this + 20) + 16 * v5;
  if (v2 == v7)
  {
LABEL_50:
    if (!*((_DWORD *)this + 34))
      goto LABEL_132;
    v34 = *((unsigned int *)this + 36);
    if ((_DWORD)v34)
    {
      v35 = 120 * v34;
      v36 = *((_QWORD *)this + 16);
      while (*(_DWORD *)v36 >= 0xFFFFFFFE)
      {
        v36 += 120;
        v35 -= 120;
        if (!v35)
          goto LABEL_132;
      }
    }
    else
    {
      v36 = *((_QWORD *)this + 16);
    }
    v37 = *((_QWORD *)this + 16) + 120 * v34;
    if (v36 == v37)
    {
LABEL_132:
      *a2 = 0;
      goto LABEL_133;
    }
    v38 = *(_DWORD *)v36;
    v128 = v37;
    v130 = a2;
    while (1)
    {
      v39 = *(_QWORD *)(v36 + 88);
      if (v39)
      {
        Key = llvm::StringMapImpl::FindKey((uint64_t *)this + 23, *(uint64_t **)v39, *(_QWORD *)(v39 + 8));
        if (Key == -1 || Key == (unint64_t)*((unsigned int *)this + 48))
        {
          v41 = *(_DWORD *)(v36 + 72);
          v42 = &__p[24 * v38];
          if (v41 == 2)
          {
            v43 = *(uint64_t **)v42;
            v44 = (uint64_t *)*((_QWORD *)v42 + 1);
            *((_QWORD *)v42 + 1) = 0;
            *((_QWORD *)v42 + 2) = 0;
            *(_QWORD *)v42 = 0;
            if (*(_BYTE *)(*(_QWORD *)(v36 + 56) + *(_QWORD *)(v36 + 80) - 1))
            {
              v45 = *(const char ***)(v36 + 88);
              v47 = *v45;
              v46 = v45[1];
              v156 = 1283;
              v153[0] = (uint64_t)"C string literal section ";
              v154 = v47;
              v155 = v46;
              v48 = operator new();
              v157 = v153;
              v159[0] = " does not end with null terminator";
              v160 = 770;
              *(_QWORD *)v48 = off_251C15728;
              llvm::Twine::str((llvm::formatv_object_base **)&v157, (std::string *)(v48 + 8));
              *v130 = v48;
              if (v43)
                goto LABEL_65;
              goto LABEL_66;
            }
            v79 = 126 - 2 * __clz(v44 - v43);
            if (v44 == v43)
              v80 = 0;
            else
              v80 = v79;
            std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,false>((uint64_t)v43, v44, v80, 1);
            if (!*(_QWORD *)(v36 + 56))
            {
LABEL_130:
              v48 = 0;
              *v130 = 0;
              if (v43)
LABEL_65:
                operator delete(v43);
LABEL_66:
              if (v48)
                goto LABEL_133;
              goto LABEL_124;
            }
            v81 = 0;
            v82 = 0;
            v83 = *(_DWORD *)(v36 + 72);
            while (2)
            {
              v84 = *(_QWORD *)(v36 + 80);
              if (*(unsigned __int8 *)(v84 + v81++))
              {
                v86 = v44;
                goto LABEL_111;
              }
              v87 = v81 - v82;
              v88 = *((_QWORD *)this + 14);
              v89 = *(_QWORD *)(v36 + 88);
              v90 = *(_QWORD *)(v36 + 48) + v82;
              v91 = *(_QWORD *)(v36 + 64);
              v157 = (uint64_t *)(v84 + v82);
              v158 = v81 - v82;
              v153[0] = v90;
              v148[0] = v91;
              v144 = v82 % v91;
              v92 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v88, v89, (uint64_t *)&v157, v153, (unint64_t *)v148, (uint64_t *)&v144);
              v93 = v92;
              if (v43 != v44 && (v94 = *(_QWORD *)(*(v44 - 1) + 24), v94 == *v92))
              {
LABEL_117:
                v133 = v81;
                v96 = v43;
                v97 = v94 + v87;
                v98 = v44;
                while (1)
                {
                  v100 = *--v98;
                  v99 = v100;
                  v101 = *(_QWORD *)(v100 + 24);
                  v102 = *v93 + v87;
                  if (v102 <= v101)
                    break;
                  llvm::jitlink::MachOLinkGraphBuilder::createStandardGraphSymbol((uint64_t)this, v99, v93, v102 - v101, v83 < 0, (*(_WORD *)(v99 + 34) & 0x20 | v83 & 0x10000000) != 0, v97 != v101);
                  v44 = v98;
                  v97 = v101;
                  if (v98 == v96)
                  {
                    v43 = v96;
                    v86 = v96;
                    v81 = v133;
                    v82 = v133;
                    goto LABEL_111;
                  }
                }
                v86 = v44;
                v82 = v133;
                v43 = v96;
                v81 = v133;
              }
              else
              {
                v95 = llvm::jitlink::LinkGraph::addAnonymousSymbol(*((_QWORD *)this + 14), (uint64_t)v92, 0, v87, 0, 0);
                v157 = (uint64_t *)((v95[3] & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)v95[2]);
                std::__tree<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>>::__emplace_unique_key_args<llvm::orc::ExecutorAddr,std::piecewise_construct_t const&,std::tuple<llvm::orc::ExecutorAddr&&>,std::tuple<>>((uint64_t **)(v36 + 96), (unint64_t)v157, &v157)[5] = v95;
                v86 = v43;
                v82 = v81;
                if (v43 != v44)
                {
                  v94 = *v93;
                  goto LABEL_117;
                }
              }
LABEL_111:
              v44 = v86;
              if (v81 == *(_QWORD *)(v36 + 56))
                goto LABEL_130;
              continue;
            }
          }
          v49 = *(_QWORD *)&__p[24 * v38];
          v52 = (uint64_t *)*((_QWORD *)v42 + 1);
          v51 = (uint64_t **)(v42 + 8);
          v50 = v52;
          if ((uint64_t *)v49 == v52)
          {
            v103 = *(uint64_t **)(v36 + 56);
            if (v103)
              llvm::jitlink::MachOLinkGraphBuilder::addSectionStartSymAndBlock((uint64_t)this, v38, *(_QWORD *)(v36 + 88), *(uint64_t **)(v36 + 48), *(uint64_t **)(v36 + 80), v103, *(_DWORD *)(v36 + 64), (v41 >> 28) & 1);
          }
          else
          {
            std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,false>(v49, v50, 126 - 2 * __clz(((uint64_t)v50 - v49) >> 3), 1);
            v53 = *(v50 - 1);
            if ((*(_WORD *)(v53 + 34) & 0x200) != 0)
            {
              v120 = *(const char ***)(v36 + 88);
              v122 = *v120;
              v121 = v120[1];
              v156 = 1283;
              v153[0] = (uint64_t)"First symbol in ";
              v154 = v122;
              v155 = v121;
              v123 = operator new();
              v157 = v153;
              v159[0] = " is alt-entry";
              v160 = 770;
              *(_QWORD *)v123 = off_251C15728;
              llvm::Twine::str((llvm::formatv_object_base **)&v157, (std::string *)(v123 + 8));
              *v130 = v123;
              goto LABEL_133;
            }
            v54 = *(uint64_t **)(v53 + 24);
            v55 = *(uint64_t **)(v36 + 48);
            if (v54 != v55)
              llvm::jitlink::MachOLinkGraphBuilder::addSectionStartSymAndBlock((uint64_t)this, v38, *(_QWORD *)(v36 + 88), v55, *(uint64_t **)(v36 + 80), (uint64_t *)((char *)v54 - (char *)v55), *(_DWORD *)(v36 + 64), (v41 >> 28) & 1);
            do
            {
              v157 = v159;
              v158 = 0x800000000;
              llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v157, *(v50 - 1));
              *v51 = v50 - 1;
              if ((uint64_t *)v49 == v50 - 1)
              {
LABEL_80:
                v58 = *(_QWORD *)(v36 + 56) + *(_QWORD *)(v36 + 48);
                v59 = v157;
                v132 = (uint64_t *)v49;
              }
              else
              {
                v56 = v50 - 2;
                while (1)
                {
                  v57 = *v56;
                  if ((*(_WORD *)(*v56 + 34) & 0x200) == 0)
                  {
                    v58 = *(_QWORD *)(v57 + 24);
                    v59 = v157;
                    if (v58 != *(_QWORD *)(v157[v158 - 1] + 24))
                    {
                      if (*((_BYTE *)this + 120))
                        break;
                    }
                  }
                  llvm::SmallVectorTemplateBase<void *,true>::push_back((unsigned int *)&v157, v57);
                  *v51 = v56;
                  if (v56-- == (uint64_t *)v49)
                    goto LABEL_80;
                }
                v132 = v56 + 1;
              }
              v61 = *(_QWORD *)(*v59 + 24);
              v62 = *(_QWORD *)(v36 + 80);
              v63 = *((_QWORD *)this + 14);
              v64 = *(_QWORD *)(v36 + 88);
              if (v62)
              {
                v65 = *(_QWORD *)(v36 + 64);
                v153[0] = v62 + v61 - *(_QWORD *)(v36 + 48);
                v153[1] = v58 - v61;
                v148[0] = v61;
                v144 = v65;
                v140[0] = v61 % v65;
                v66 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v63, v64, v153, v148, &v144, v140);
              }
              else
              {
                v67 = *(_QWORD *)(v36 + 64);
                v153[0] = v61;
                v148[0] = v58 - v61;
                v144 = v67;
                v140[0] = v61 % v67;
                v66 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v63, v64, v148, v153, &v144, v140);
              }
              v68 = v66;
              v2 &= 0xFFFFFFFFFFFFFF00;
              v69 = v158;
              if ((_DWORD)v158)
              {
                v70 = 0;
                do
                {
                  v71 = v157[v69 - 1];
                  v72 = v41 & 0x10000000 | *(_WORD *)(v71 + 34) & 0x20;
                  LODWORD(v158) = v69 - 1;
                  v73 = *(_QWORD *)(v71 + 24);
                  v74 = v2 != v73 || v70 == 0;
                  StandardGraphSymbol = llvm::jitlink::MachOLinkGraphBuilder::createStandardGraphSymbol((uint64_t)this, v71, v68, v58 - v73, v41 < 0, v72 != 0, v74);
                  v76 = (StandardGraphSymbol[3] & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)StandardGraphSymbol[2];
                  v77 = v2 != v76 || v70 == 0;
                  if (v2 == v76)
                    v78 = v58;
                  else
                    v78 = v2;
                  if (v70)
                    v58 = v78;
                  if (v77)
                  {
                    v70 = 1;
                    v2 = (StandardGraphSymbol[3] & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)StandardGraphSymbol[2];
                  }
                  v69 = v158;
                }
                while ((_DWORD)v158);
              }
              if (v157 != v159)
                free(v157);
              v50 = v132;
            }
            while ((uint64_t *)v49 != v132);
          }
        }
      }
LABEL_124:
      v36 += 120;
      a2 = v130;
      if (v36 != v128)
      {
        while (1)
        {
          v38 = *(_DWORD *)v36;
          if (*(_DWORD *)v36 < 0xFFFFFFFE)
            break;
          v36 += 120;
          if (v36 == v128)
            goto LABEL_132;
        }
        if (v36 != v128)
          continue;
      }
      goto LABEL_132;
    }
  }
  while (2)
  {
    v8 = *(_QWORD *)(v2 + 8);
    v9 = *(unsigned __int8 *)(v8 + 32);
    switch((v9 >> 1) & 7)
    {
      case 0u:
        v10 = *(_QWORD *)(v8 + 24);
        if (!v10)
        {
          if (*(_BYTE *)(v8 + 16))
          {
            v15 = llvm::jitlink::LinkGraph::addExternalSymbol(*((_QWORD *)this + 14), *(_QWORD *)v8, *(_QWORD *)(v8 + 8), 0, (*(unsigned __int16 *)(v8 + 34) >> 6) & 1);
            goto LABEL_46;
          }
          v116 = *(unsigned int *)v2;
          v117 = operator new();
          v118 = v117;
          v119 = "Anonymous external symbol at index ";
          goto LABEL_156;
        }
        if (!*(_BYTE *)(v8 + 16))
        {
          v116 = *(unsigned int *)v2;
          v117 = operator new();
          v118 = v117;
          v119 = "Anonymous common symbol at index ";
          goto LABEL_156;
        }
        v11 = *((_QWORD *)this + 14);
        Section = *((_QWORD *)this + 19);
        if (!Section)
        {
          Section = llvm::jitlink::LinkGraph::createSection(*((_QWORD *)this + 14), (uint64_t)"__common", 8, 3);
          *((_QWORD *)this + 19) = Section;
          v10 = *(_QWORD *)(v8 + 24);
        }
        v13 = 1 << (*(_BYTE *)(v8 + 35) & 0xF);
        v157 = 0;
        v153[0] = v10;
        v148[0] = v13;
        v144 = 0;
        v14 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v11, Section, v153, (uint64_t *)&v157, (unint64_t *)v148, (uint64_t *)&v144);
        v15 = llvm::jitlink::LinkGraph::addDefinedSymbol(v11, (uint64_t)v14, 0, *(_QWORD *)v8, *(_QWORD *)(v8 + 8), *(_QWORD *)(v8 + 24), 1, *(_BYTE *)(v8 + 37), 0, (*(_WORD *)(v8 + 34) & 0x20) != 0);
        goto LABEL_46;
      case 1u:
        if (*(_BYTE *)(v8 + 16))
        {
          v16 = *(_BYTE **)v8;
          v17 = *(_QWORD *)(v8 + 8);
          if ((v9 & 1) != 0)
          {
            if ((v9 & 0x10) != 0)
            {
              v18 = 1;
            }
            else if (v17)
            {
              v18 = *v16 == 108;
            }
            else
            {
              v18 = 0;
            }
          }
          else
          {
            v18 = 2;
          }
          v15 = llvm::jitlink::LinkGraph::addAbsoluteSymbol(*((_QWORD *)this + 14), (uint64_t)v16, v17, *(_QWORD *)(v8 + 24), 0, 0, v18, (*(unsigned __int16 *)(v8 + 34) >> 5) & 1);
LABEL_46:
          *(_QWORD *)(v8 + 40) = v15;
          do
          {
LABEL_47:
            v2 += 16;
            if (v2 == v7)
              goto LABEL_50;
          }
          while (*(_DWORD *)v2 >= 0xFFFFFFFE);
          if (v2 == v7)
            goto LABEL_50;
          continue;
        }
        v116 = *(unsigned int *)v2;
        v117 = operator new();
        v118 = v117;
        v119 = "Anonymous absolute symbol at index ";
LABEL_156:
        v157 = (uint64_t *)v119;
        v159[0] = v116;
        v127 = 2051;
LABEL_157:
        v160 = v127;
        *(_QWORD *)v117 = off_251C15728;
        llvm::Twine::str((llvm::formatv_object_base **)&v157, (std::string *)(v117 + 8));
        *a2 = v118;
LABEL_133:
        v104 = 6144;
        do
        {
          v105 = *(void **)&__p[v104 - 24];
          if (v105)
          {
            *(_QWORD *)&__p[v104 - 16] = v105;
            operator delete(v105);
          }
          v104 -= 24;
        }
        while (v104);
        operator delete(__p);
        return;
      case 5u:
        if (*(_BYTE *)(v8 + 16))
        {
          v143 = 1283;
          v140[0] = (uint64_t)"\"";
          v141 = *(_QWORD *)v8;
          v142 = *(_QWORD *)(v8 + 8);
          v110 = v140;
          v146 = "\"";
          v111 = (uint64_t **)&v144;
          v112 = 2;
          v113 = 3;
        }
        else
        {
          v110 = (uint64_t *)"<anon>";
          v113 = 1;
          v112 = 3;
          v111 = (uint64_t **)"<anon>";
        }
        HIBYTE(v147) = v113;
        v144 = (unint64_t)v110;
        LOBYTE(v147) = v112;
        v124 = v145;
        v125 = "Unupported N_INDR symbol ";
        goto LABEL_153;
      case 6u:
        if (*(_BYTE *)(v8 + 16))
        {
          v143 = 1283;
          v140[0] = (uint64_t)"\"";
          v141 = *(_QWORD *)v8;
          v142 = *(_QWORD *)(v8 + 8);
          v114 = v140;
          v146 = "\"";
          v111 = (uint64_t **)&v144;
          v112 = 2;
          v115 = 3;
        }
        else
        {
          v114 = (uint64_t *)"<anon>";
          v115 = 1;
          v112 = 3;
          v111 = (uint64_t **)"<anon>";
        }
        HIBYTE(v147) = v115;
        v144 = (unint64_t)v114;
        LOBYTE(v147) = v112;
        v124 = v145;
        v125 = "Unupported N_PBUD symbol ";
LABEL_153:
        v148[0] = (uint64_t)v125;
        v149 = v111;
        v150 = v124;
        v151 = 3;
        v152 = v112;
        v153[0] = (uint64_t)v148;
        v154 = " at index ";
        goto LABEL_154;
      case 7u:
        v19 = &__p[24 * *(unsigned __int8 *)(v8 + 33)];
        v22 = *((_QWORD *)v19 - 1);
        v21 = v19 - 8;
        v20 = v22;
        v23 = (char *)*((_QWORD *)v21 - 1);
        if ((unint64_t)v23 >= v22)
        {
          v129 = a2;
          v25 = (char **)(v21 - 16);
          v26 = (char *)*((_QWORD *)v21 - 2);
          v27 = (v23 - v26) >> 3;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
            abort();
          v29 = v20 - (_QWORD)v26;
          if (v29 >> 2 > v28)
            v28 = v29 >> 2;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v28 = 0x1FFFFFFFFFFFFFFFLL;
          v134 = v28;
          if (v28)
          {
            if (v28 >> 61)
              std::__throw_bad_array_new_length[abi:nn180100]();
            v30 = (char *)operator new(8 * v28);
          }
          else
          {
            v30 = 0;
          }
          v31 = &v30[8 * v27];
          *(_QWORD *)v31 = v8;
          v24 = v31 + 8;
          if (v23 == v26)
          {
            v32 = v134;
          }
          else
          {
            v32 = v134;
            do
            {
              v33 = *((_QWORD *)v23 - 1);
              v23 -= 8;
              *((_QWORD *)v31 - 1) = v33;
              v31 -= 8;
            }
            while (v23 != v26);
            v23 = *v25;
          }
          *v25 = v31;
          *(_QWORD *)v21 = &v30[8 * v32];
          if (v23)
            operator delete(v23);
          a2 = v129;
        }
        else
        {
          *(_QWORD *)v23 = v8;
          v24 = v23 + 8;
        }
        *((_QWORD *)v21 - 1) = v24;
        goto LABEL_47;
      default:
        v140[0] = (uint64_t)"Unrecognized symbol type ";
        v141 = v9 & 0xE;
        v143 = 2307;
        v144 = (unint64_t)v140;
        v146 = " for symbol ";
        v147 = 770;
        if (*(_BYTE *)(v8 + 16))
        {
          v136 = 1283;
          v135[0] = "\"";
          v135[2] = *(_QWORD *)v8;
          v135[3] = *(_QWORD *)(v8 + 8);
          v106 = (const char *)v135;
          v137[2] = "\"";
          v107 = (const char *)v137;
          v108 = 2;
          v109 = 3;
        }
        else
        {
          v106 = "<anon>";
          v108 = 3;
          v109 = 1;
          v107 = "<anon>";
        }
        v139 = v109;
        v137[0] = v106;
        v138 = v108;
        v148[0] = (uint64_t)&v144;
        v149 = (void *)v107;
        v150 = v137[1];
        v151 = 2;
        v152 = v108;
        v153[0] = (uint64_t)v148;
        v154 = " at index ";
LABEL_154:
        v156 = 770;
        v126 = *(unsigned int *)v2;
        v117 = operator new();
        v118 = v117;
        v157 = v153;
        v159[0] = v126;
        v127 = 2050;
        goto LABEL_157;
    }
  }
}

uint64_t llvm::jitlink::MachOLinkGraphBuilder::graphifySectionsWithCustomParsers@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (!*(_DWORD *)(this + 136))
    goto LABEL_18;
  v3 = this;
  v4 = *(unsigned int *)(this + 144);
  if ((_DWORD)v4)
  {
    v5 = 120 * v4;
    v6 = *(_QWORD *)(this + 128);
    while (*(_DWORD *)v6 >= 0xFFFFFFFE)
    {
      v6 += 120;
      v5 -= 120;
      if (!v5)
        goto LABEL_18;
    }
  }
  else
  {
    v6 = *(_QWORD *)(this + 128);
  }
  v7 = *(_QWORD *)(this + 128) + 120 * v4;
  if (v6 == v7)
    goto LABEL_18;
  v8 = (_QWORD *)(this + 184);
LABEL_10:
  v9 = *(_QWORD *)(v6 + 88);
  if (!v9
    || (this = llvm::StringMapImpl::FindKey((uint64_t *)(v3 + 184), *(uint64_t **)v9, *(_QWORD *)(v9 + 8)),
        (_DWORD)this == -1)
    || (int)this == (unint64_t)*(unsigned int *)(v3 + 192))
  {
LABEL_15:
    while (1)
    {
      v6 += 120;
      if (v6 == v7)
        break;
      if (*(_DWORD *)v6 < 0xFFFFFFFE)
      {
        if (v6 != v7)
          goto LABEL_10;
        break;
      }
    }
LABEL_18:
    *a2 = 0;
    return this;
  }
  v10 = *(_QWORD *)(*(_QWORD *)(*v8 + 8 * (int)this) + 32);
  if (v10)
  {
    this = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v6 + 8);
    if (!*a2)
      goto LABEL_15;
  }
  else
  {
    v11 = std::__throw_bad_function_call[abi:nn180100]();
    return llvm::jitlink::MachOLinkGraphBuilder::MachOLinkGraphBuilder(v11);
  }
  return this;
}

uint64_t llvm::jitlink::MachOLinkGraphBuilder::MachOLinkGraphBuilder(uint64_t a1, uint64_t a2, __int128 *a3, uint64_t a4)
{
  size_t v4;
  const void *v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  __int128 __dst;
  unint64_t v19;
  void *__p[2];
  unint64_t v21;

  *(_QWORD *)a1 = off_251C15980;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = a1 + 40;
  *(_QWORD *)(a1 + 32) = 0x400000000;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 72) = a1 + 88;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 96) = 1;
  *(_QWORD *)(a1 + 104) = a2;
  v4 = *(_QWORD *)(a2 + 40);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v9 = *(const void **)(a2 + 32);
  if (v4 >= 0x17)
  {
    v11 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v11 = v4 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v4;
    v19 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  HIBYTE(v19) = *(_QWORD *)(a2 + 40);
  p_dst = &__dst;
  if (v4)
LABEL_8:
    memmove(p_dst, v9, v4);
  *((_BYTE *)p_dst + v4) = 0;
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2))
    v13 = 8;
  else
    v13 = 4;
  v14 = *(_DWORD *)(a2 + 8) - 11;
  if (v14 > 9)
    v15 = 1;
  else
    v15 = dword_24AA2DE84[v14];
  v16 = operator new();
  *(_OWORD *)__p = __dst;
  v21 = v19;
  *(_QWORD *)(a1 + 112) = llvm::jitlink::LinkGraph::LinkGraph(v16, (__int128 *)__p, a3, v13, v15, a4);
  if (SHIBYTE(v21) < 0)
    operator delete(__p[0]);
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0x2800000000;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_DWORD *)(a1 + 176) = 0;
  *(_BYTE *)(a1 + 120) = (*(_DWORD *)(a2 + 72) & 0x2000) != 0;
  return a1;
}

uint64_t **llvm::jitlink::MachOLinkGraphBuilder::addSectionStartSymAndBlock(uint64_t a1, int a2, uint64_t a3, uint64_t *a4, uint64_t *a5, uint64_t *a6, unsigned int a7, int a8)
{
  uint64_t v11;
  _QWORD *v12;
  uint64_t *v13;
  int v14;
  uint64_t *v15;
  uint64_t **result;
  int v17;
  uint64_t *v18[2];
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;

  v17 = a2;
  v11 = *(_QWORD *)(a1 + 112);
  if (a5)
  {
    v18[0] = a5;
    v18[1] = a6;
    v20 = a7;
    v21 = a4;
    v19 = 0;
    v12 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v11, a3, (uint64_t *)v18, (uint64_t *)&v21, &v20, &v19);
  }
  else
  {
    v18[0] = a4;
    v20 = a7;
    v21 = a6;
    v19 = 0;
    v12 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v11, a3, (uint64_t *)&v21, (uint64_t *)v18, &v20, &v19);
  }
  v13 = llvm::jitlink::LinkGraph::addAnonymousSymbol(*(_QWORD *)(a1 + 112), (uint64_t)v12, 0, (uint64_t)a6, 0, a8);
  v18[0] = 0;
  v14 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>((uint64_t *)(a1 + 128), &v17, v18);
  v15 = v18[0];
  if (!v14)
    v15 = (uint64_t *)(*(_QWORD *)(a1 + 128) + 120 * *(unsigned int *)(a1 + 144));
  v18[0] = (uint64_t *)((v13[3] & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)v13[2]);
  result = std::__tree<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>>::__emplace_unique_key_args<llvm::orc::ExecutorAddr,std::piecewise_construct_t const&,std::tuple<llvm::orc::ExecutorAddr&&>,std::tuple<>>((uint64_t **)v15 + 12, (unint64_t)v18[0], v18);
  result[5] = v13;
  return result;
}

uint64_t *llvm::jitlink::MachOLinkGraphBuilder::createStandardGraphSymbol(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, char a5, char a6, int a7)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  uint64_t *v16;
  int v18;
  uint64_t *v19;

  v11 = *(_QWORD *)(a2 + 24) - *a3;
  v12 = *(_QWORD *)(a1 + 112);
  if (*(_BYTE *)(a2 + 16))
    v13 = llvm::jitlink::LinkGraph::addDefinedSymbol(v12, (uint64_t)a3, v11, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), a4, *(_BYTE *)(a2 + 36), *(_BYTE *)(a2 + 37), a5, a6);
  else
    v13 = llvm::jitlink::LinkGraph::addAnonymousSymbol(v12, (uint64_t)a3, v11, a4, a5, a6);
  v14 = v13;
  *(_QWORD *)(a2 + 40) = v13;
  if (a7)
  {
    v18 = *(unsigned __int8 *)(a2 + 33) - 1;
    v19 = 0;
    v15 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>((uint64_t *)(a1 + 128), &v18, &v19);
    v16 = v19;
    if (!v15)
      v16 = (uint64_t *)(*(_QWORD *)(a1 + 128) + 120 * *(unsigned int *)(a1 + 144));
    v19 = (uint64_t *)((v14[3] & 0x1FFFFFFFFFFFFFFLL) + *(_QWORD *)v14[2]);
    std::__tree<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>>::__emplace_unique_key_args<llvm::orc::ExecutorAddr,std::piecewise_construct_t const&,std::tuple<llvm::orc::ExecutorAddr&&>,std::tuple<>>((uint64_t **)v16 + 12, (unint64_t)v19, &v19)[5] = v14;
  }
  return v14;
}

void llvm::jitlink::CompactUnwindSplitter::operator()(uint64_t *a1@<X0>, uint64_t a2@<X1>, unint64_t *a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t SectionByName;
  int v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t *v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int **v25;
  int *v26;
  int *v27;
  char v28;
  int v29;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  int *v34;
  _QWORD *v35;
  std::string *v36;
  llvm::formatv_object_base **v37;
  int *v38;
  _QWORD *v39;
  int *v40;
  __int128 v41;
  std::string *v42;
  std::string::size_type v43;
  int v44;
  const std::string::value_type *v45;
  std::string::size_type v46;
  std::string *v47;
  uint64_t (****v48)(llvm::detail::format_adapter *__hidden);
  uint64_t v49;
  void *v50;
  std::string *v51;
  uint64_t (****v52)(llvm::detail::format_adapter *__hidden);
  uint64_t ArchName;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  std::string *v57;
  std::string::size_type v58;
  uint64_t v59;
  int *v60;
  uint64_t v61;
  std::string v62;
  uint64_t v63;
  uint64_t (**v64)(llvm::detail::format_adapter *__hidden);
  int *v65;
  _QWORD v66[2];
  void *__p[2];
  uint64_t (****v68)(llvm::detail::format_adapter *__hidden);
  uint64_t v69;
  uint64_t (**v70)(llvm::detail::format_adapter *__hidden);
  int *v71;
  uint64_t (***v72)(llvm::detail::format_adapter *__hidden);
  std::string v73;
  void *v74[2];
  std::string::size_type v75;
  _QWORD v76[4];
  __int16 v77;
  _QWORD v78[4];
  __int16 v79;
  _QWORD v80[4];
  __int16 v81;
  _QWORD v82[2];
  void **v83;
  __int16 v84;
  _QWORD v85[2];
  std::string *v86;
  __int16 v87;
  _QWORD *v88;
  _QWORD *v89;
  uint64_t v90;
  int v91;
  _BYTE v92[32];
  __int16 v93;
  void **v94;
  uint64_t v95;
  _QWORD **v96;
  uint64_t v97;
  _QWORD v98[2];
  _QWORD *v99;
  char v100;
  uint64_t v101;

  v101 = *MEMORY[0x24BDAC8D0];
  SectionByName = llvm::jitlink::LinkGraph::findSectionByName(a2, *a1, a1[1], a3);
  if (!SectionByName)
  {
    *a4 = 0;
    return;
  }
  if (*(_DWORD *)(a2 + 164) != 5)
  {
    std::operator+<char>();
    v42 = std::string::append((std::string *)v92, ": compact unwind splitting not supported on non-macho target ");
    v43 = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v62.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v62.__r_.__value_.__r.__words[2] = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    v44 = *(char *)(a2 + 143);
    if (v44 >= 0)
      v45 = (const std::string::value_type *)(a2 + 120);
    else
      v45 = *(const std::string::value_type **)(a2 + 120);
    if (v44 >= 0)
      v46 = *(unsigned __int8 *)(a2 + 143);
    else
      v46 = *(_QWORD *)(a2 + 128);
    v47 = std::string::append(&v62, v45, v46);
    v48 = (uint64_t (****)(llvm::detail::format_adapter *__hidden))v47->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
    v68 = v48;
    v47->__r_.__value_.__l.__size_ = 0;
    v47->__r_.__value_.__r.__words[2] = 0;
    v47->__r_.__value_.__r.__words[0] = 0;
    v49 = operator new();
    LOWORD(v98[0]) = 260;
    v94 = __p;
    *(_QWORD *)v49 = off_251C15728;
    llvm::Twine::str((llvm::formatv_object_base **)&v94, (std::string *)(v49 + 8));
    *a4 = v49;
    if (SHIBYTE(v68) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v62.__r_.__value_.__l.__data_);
    if ((v92[23] & 0x80000000) != 0)
    {
      v50 = *(void **)v92;
      goto LABEL_75;
    }
    return;
  }
  v7 = *(_DWORD *)(a2 + 144);
  if (v7 != 38 && v7 != 3)
  {
    std::operator+<char>();
    v51 = std::string::append(&v62, ": compact unwind splitting not supported on ");
    v52 = (uint64_t (****)(llvm::detail::format_adapter *__hidden))v51->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v51->__r_.__value_.__l.__data_;
    v68 = v52;
    v51->__r_.__value_.__l.__size_ = 0;
    v51->__r_.__value_.__r.__words[2] = 0;
    v51->__r_.__value_.__r.__words[0] = 0;
    ArchName = llvm::Triple::getArchName((llvm::Triple *)(a2 + 120));
    v55 = v54;
    v56 = operator new();
    v94 = __p;
    v95 = v55;
    v96 = (_QWORD **)ArchName;
    v97 = v55;
    LOWORD(v98[0]) = 1284;
    *(_QWORD *)v56 = off_251C15728;
    llvm::Twine::str((llvm::formatv_object_base **)&v94, (std::string *)(v56 + 8));
    *a4 = v56;
    if (SHIBYTE(v68) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0)
    {
      v50 = (void *)v62.__r_.__value_.__r.__words[0];
LABEL_75:
      operator delete(v50);
    }
    return;
  }
  v9 = SectionByName;
  v91 = 32;
  v10 = SectionByName + 32;
  v11 = llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(SectionByName + 32);
  v13 = v12;
  llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v10);
  v14 = *(_QWORD *)(v9 + 32) + 8 * *(unsigned int *)(v9 + 48);
  v89 = 0;
  v90 = 0;
  v88 = 0;
  if ((uint64_t *)v14 == v11)
    goto LABEL_68;
  v15 = 0;
  v16 = v11;
  do
  {
    do
    {
      if (++v16 == v13)
      {
        v16 = v13;
        break;
      }
    }
    while ((*v16 | 0x1000) == 0xFFFFFFFFFFFFF000);
    ++v15;
  }
  while (v16 != (uint64_t *)v14);
  std::vector<llvm::orc::ExecutorAddr>::__vallocate[abi:nn180100](&v88, v15);
  v17 = v89;
  do
  {
    v18 = *v11++;
    *v17 = v18;
    while (v11 != v13)
    {
      if ((*v11 | 0x1000) != 0xFFFFFFFFFFFFF000)
        goto LABEL_21;
      ++v11;
    }
    v11 = v13;
LABEL_21:
    ++v17;
  }
  while (v11 != (uint64_t *)v14);
  v89 = v17;
  v19 = v88;
  if (v88 == v17)
  {
LABEL_68:
    *a4 = 0;
    goto LABEL_69;
  }
  while (2)
  {
    v21 = (uint64_t *)*--v17;
    v20 = v21;
    v89 = v17;
    v22 = v21[4];
    if (!v22)
    {
LABEL_50:
      if (v19 == v17)
        goto LABEL_68;
      continue;
    }
    break;
  }
  if ((v22 & 0x1F) == 0)
  {
    v23 = v22 >> 5;
    LOBYTE(v94) = 0;
    v100 = 0;
    if ((v22 >> 5))
    {
      v24 = 0;
      while (2)
      {
        v25 = (int **)llvm::jitlink::LinkGraph::splitBlock(a2, (uint64_t)v20, 0x20uLL, (void **)&v94);
        v26 = v25[5];
        v27 = v25[6];
        if (v26 == v27)
        {
LABEL_52:
          v38 = *v25;
          __p[0] = "{0:x}";
          __p[1] = (void *)5;
          v68 = &v72;
          v69 = 1;
          v70 = &off_251C151F0;
          v71 = v38;
          v72 = &v70;
          *(_QWORD *)v92 = "Error adding keep-alive edge for compact unwind record at ";
          *(_QWORD *)&v92[16] = __p;
          v93 = 1539;
          v39 = (_QWORD *)operator new();
          v35 = v39;
          v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
          v62.__r_.__value_.__r.__words[2] = (std::string::size_type)": no outgoing target edge at offset 0";
          LOWORD(v64) = 770;
LABEL_53:
          *v39 = off_251C15728;
          v36 = (std::string *)(v39 + 1);
          v37 = (llvm::formatv_object_base **)&v62;
LABEL_44:
          llvm::Twine::str(v37, v36);
          v33 = 0;
          *a4 = (uint64_t)v35;
        }
        else
        {
          v28 = 0;
          do
          {
            while (1)
            {
              v29 = v26[2];
              if (v29 == 16 || v29 == 24)
                break;
              if (v29)
              {
                __p[0] = "{0:x}";
                __p[1] = (void *)5;
                v68 = &v72;
                v69 = 1;
                v70 = &off_251C15650;
                LODWORD(v71) = v29;
                v72 = &v70;
                v82[0] = "Unexpected edge at offset ";
                v83 = __p;
                v84 = 1539;
                v85[0] = v82;
                v86 = (std::string *)" in compact unwind record at ";
                v87 = 770;
                v34 = *v25;
                v62.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0:x}";
                v62.__r_.__value_.__l.__size_ = 5;
                v62.__r_.__value_.__r.__words[2] = (std::string::size_type)v66;
                v63 = 1;
                v64 = &off_251C151F0;
                v65 = v34;
                v66[0] = &v64;
                v35 = (_QWORD *)operator new();
                *(_QWORD *)v92 = v85;
                *(_QWORD *)&v92[16] = &v62;
                v93 = 1538;
                *v35 = off_251C15728;
                v36 = (std::string *)(v35 + 1);
                v37 = (llvm::formatv_object_base **)v92;
                goto LABEL_44;
              }
              v31 = *(_QWORD *)(*(_QWORD *)v26 + 16);
              if ((*(_BYTE *)(v31 + 8) & 3) == 0)
              {
                v40 = *v25;
                __p[0] = "{0:x}";
                __p[1] = (void *)5;
                v68 = &v72;
                v69 = 1;
                v70 = &off_251C151F0;
                v71 = v40;
                v72 = &v70;
                v82[0] = "Error adding keep-alive edge for compact unwind record at ";
                v83 = __p;
                v84 = 1539;
                v85[0] = v82;
                v86 = (std::string *)": target ";
                v87 = 770;
                v41 = *(_OWORD *)*(_QWORD *)v26;
                *(_QWORD *)v92 = v85;
                *(_OWORD *)&v92[16] = v41;
                v93 = 1282;
                v39 = (_QWORD *)operator new();
                v35 = v39;
                v62.__r_.__value_.__r.__words[0] = (std::string::size_type)v92;
                v62.__r_.__value_.__r.__words[2] = (std::string::size_type)" is an external symbol";
                LOWORD(v64) = 770;
                goto LABEL_53;
              }
              v32 = llvm::jitlink::LinkGraph::addAnonymousSymbol(a2, (uint64_t)v25, 0, 32, 0, 0);
              v28 = 1;
              llvm::jitlink::Block::addEdge((_QWORD *)v31, 1, 0, (uint64_t)v32, 0);
              v26 += 8;
              if (v26 == v27)
                goto LABEL_41;
            }
            v26 += 8;
          }
          while (v26 != v27);
          if ((v28 & 1) == 0)
            goto LABEL_52;
LABEL_41:
          if (++v24 != (_DWORD)v23)
            continue;
          v33 = 1;
        }
        break;
      }
      if (v100 && v94 != (void **)&v96)
        free(v94);
      if (!v33)
        goto LABEL_69;
      v19 = v88;
      v17 = v89;
    }
    goto LABEL_50;
  }
  std::operator+<char>();
  v57 = std::string::append(&v73, ": block at ");
  v58 = v57->__r_.__value_.__r.__words[2];
  *(_OWORD *)v74 = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
  v75 = v58;
  v57->__r_.__value_.__l.__size_ = 0;
  v57->__r_.__value_.__r.__words[2] = 0;
  v57->__r_.__value_.__r.__words[0] = 0;
  v59 = *v20;
  v94 = (void **)"{0:x}";
  v95 = 5;
  v96 = &v99;
  v97 = 1;
  v98[0] = &off_251C151F0;
  v98[1] = v59;
  v99 = v98;
  v76[0] = v74;
  v76[2] = &v94;
  v77 = 1540;
  v78[0] = v76;
  v78[2] = " has size ";
  v79 = 770;
  v60 = (int *)v20[4];
  __p[0] = "{0:x}";
  __p[1] = (void *)5;
  v68 = &v72;
  v69 = 1;
  v70 = &off_251C14508;
  v71 = v60;
  v72 = &v70;
  v80[0] = v78;
  v80[2] = __p;
  v81 = 1538;
  v82[0] = v80;
  v83 = (void **)" (not a multiple of CU record size of ";
  v84 = 770;
  v62.__r_.__value_.__r.__words[0] = (std::string::size_type)"{0:x}";
  v62.__r_.__value_.__l.__size_ = 5;
  v62.__r_.__value_.__r.__words[2] = (std::string::size_type)v66;
  v63 = 1;
  v64 = &off_251C158D8;
  v65 = &v91;
  v66[0] = &v64;
  v85[0] = v82;
  v86 = &v62;
  v87 = 1538;
  v61 = operator new();
  *(_QWORD *)v92 = v85;
  *(_QWORD *)&v92[16] = ")";
  v93 = 770;
  *(_QWORD *)v61 = off_251C15728;
  llvm::Twine::str((llvm::formatv_object_base **)v92, (std::string *)(v61 + 8));
  *a4 = v61;
  if (SHIBYTE(v75) < 0)
    operator delete(v74[0]);
  if (SHIBYTE(v73.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v73.__r_.__value_.__l.__data_);
LABEL_69:
  v50 = v88;
  if (v88)
  {
    v89 = v88;
    goto LABEL_75;
  }
}

uint64_t **std::__tree<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::__map_value_compare<llvm::orc::ExecutorAddr,std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>,std::less<llvm::orc::ExecutorAddr>,true>,std::allocator<std::__value_type<llvm::orc::ExecutorAddr,llvm::jitlink::Symbol *>>>::__emplace_unique_key_args<llvm::orc::ExecutorAddr,std::piecewise_construct_t const&,std::tuple<llvm::orc::ExecutorAddr&&>,std::tuple<>>(uint64_t **a1, unint64_t a2, uint64_t **a3)
{
  uint64_t *v5;
  uint64_t **v6;
  uint64_t **v7;
  unint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;

  v6 = a1 + 1;
  v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        v7 = (uint64_t **)v5;
        v8 = v5[4];
        if (v8 <= a2)
          break;
        v5 = *v7;
        v6 = v7;
        if (!*v7)
          goto LABEL_9;
      }
      if (v8 >= a2)
        break;
      v5 = v7[1];
      if (!v5)
      {
        v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    v7 = a1 + 1;
LABEL_9:
    v9 = (uint64_t *)v7;
    v7 = (uint64_t **)operator new(0x30uLL);
    v7[4] = *a3;
    v7[5] = 0;
    *v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *v6 = (uint64_t *)v7;
    v10 = (uint64_t *)**a1;
    v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:nn180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::destroyAll(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = 120 * v1;
    v3 = *(_QWORD *)a1 + 96;
    do
    {
      if (*(_DWORD *)(v3 - 96) <= 0xFFFFFFFD)
        std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy(v3, *(_QWORD **)(v3 + 8));
      v3 += 120;
      v2 -= 120;
    }
    while (v2);
  }
}

uint64_t llvm::StringMap<std::function<llvm::Error ()(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &)>,llvm::MallocAllocator>::~StringMap(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;

  if (*(_DWORD *)(a1 + 12))
  {
    v2 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      while (1)
      {
        v5 = *(_QWORD *)(*(_QWORD *)a1 + v3);
        if (v5 == -8 || v5 == 0)
          goto LABEL_14;
        v7 = *(_QWORD **)(v5 + 32);
        if (v7 == (_QWORD *)(v5 + 8))
          break;
        if (v7)
        {
          v8 = 5;
LABEL_12:
          (*(void (**)(void))(*v7 + 8 * v8))();
        }
        MEMORY[0x24BD1B398](v5, 8);
LABEL_14:
        v3 += 8;
        if (v4 == v3)
          goto LABEL_15;
      }
      v7 = (_QWORD *)(v5 + 8);
      v8 = 4;
      goto LABEL_12;
    }
  }
LABEL_15:
  free(*(void **)a1);
  return a1;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _DWORD *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  _DWORD *v29;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(120 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 120 * v10;
      do
      {
        *result = -1;
        result += 30;
        v11 -= 120;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = 120 * v3;
      do
      {
        v14 = v4 + v12;
        if (*(_DWORD *)(v4 + v12) <= 0xFFFFFFFD)
        {
          v29 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)(v4 + v12), &v29);
          v15 = v29;
          *v29 = *(_DWORD *)v14;
          v16 = *(_OWORD *)(v14 + 8);
          *(_OWORD *)(v15 + 6) = *(_OWORD *)(v14 + 24);
          *(_OWORD *)(v15 + 2) = v16;
          v17 = *(_OWORD *)(v14 + 40);
          v18 = *(_OWORD *)(v14 + 56);
          v19 = *(_OWORD *)(v14 + 72);
          *((_QWORD *)v15 + 11) = *(_QWORD *)(v14 + 88);
          *(_OWORD *)(v15 + 18) = v19;
          *(_OWORD *)(v15 + 14) = v18;
          *(_OWORD *)(v15 + 10) = v17;
          v20 = (_QWORD *)(v14 + 96);
          *((_QWORD *)v15 + 12) = *(_QWORD *)(v14 + 96);
          v23 = *(_QWORD *)(v14 + 104);
          v22 = (_QWORD *)(v14 + 104);
          v21 = v23;
          *((_QWORD *)v15 + 13) = v23;
          v24 = v15 + 26;
          v25 = v22[1];
          *((_QWORD *)v15 + 14) = v25;
          if (v25)
          {
            v26 = 0;
            *(_QWORD *)(v21 + 16) = v24;
            *v20 = v22;
            *v22 = 0;
            v22[1] = 0;
          }
          else
          {
            *((_QWORD *)v15 + 12) = v24;
            v26 = (_QWORD *)*v22;
          }
          ++*(_DWORD *)(a1 + 8);
          std::__tree<std::__value_type<llvm::StringRef,llvm::StringRef>,std::__map_value_compare<llvm::StringRef,std::__value_type<llvm::StringRef,llvm::StringRef>,std::less<llvm::StringRef>,true>,std::allocator<std::__value_type<llvm::StringRef,llvm::StringRef>>>::destroy((uint64_t)v20, v26);
        }
        v12 += 120;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v27 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v27)
  {
    v28 = 120 * v27;
    do
    {
      *result = -1;
      result += 30;
      v28 -= 120;
    }
    while (v28);
  }
  return result;
}

uint64_t *std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **,false>(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;
  uint64_t k;
  uint64_t v25;
  unint64_t v26;
  BOOL v27;
  uint64_t *v28;
  unint64_t v29;
  uint64_t *m;
  unint64_t v31;
  unint64_t v32;
  BOOL v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  BOOL v42;
  unint64_t v43;
  BOOL v44;
  uint64_t *j;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  BOOL v60;
  uint64_t *v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  BOOL v73;
  uint64_t v74;
  unint64_t v75;
  BOOL v76;
  uint64_t v77;
  unint64_t v78;
  BOOL v79;
  uint64_t *v80;
  BOOL v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  unint64_t v89;
  BOOL v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  unint64_t v94;
  int64_t v95;
  int64_t v96;
  int64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t *v101;
  BOOL v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  BOOL v107;
  uint64_t *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t v113;
  BOOL v114;
  uint64_t v115;
  BOOL v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t *v125;
  BOOL v126;
  uint64_t v127;
  unint64_t v128;
  unint64_t v129;
  uint64_t *v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  BOOL v134;
  unint64_t v135;
  uint64_t v136;
  unint64_t v137;
  BOOL v138;
  uint64_t *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  unint64_t v144;
  BOOL v145;
  uint64_t *v146;
  uint64_t v147;
  unint64_t v148;
  BOOL v149;

  v7 = result;
LABEL_2:
  v8 = a2 - 1;
  i = v7;
  while (2)
  {
    v7 = i;
    v10 = (char *)a2 - (char *)i;
    v11 = a2 - i;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v56 = *(a2 - 1);
        v57 = *i;
        v58 = *(_QWORD *)(v56 + 40);
        v59 = *(_QWORD *)(*i + 40);
        v60 = v58 >= v59;
        if (v58 == v59)
          v60 = *(_QWORD *)(v56 + 48) >= *(_QWORD *)(v57 + 48);
        if (!v60)
        {
          *i = v56;
          *(a2 - 1) = v57;
        }
        return result;
      case 3uLL:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(i, i + 1, a2 - 1);
      case 4uLL:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(i, i + 1, i + 2, a2 - 1);
      case 5uLL:
        v61 = i + 1;
        v62 = i + 2;
        v63 = i + 3;
        result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(i, i + 1, i + 2, i + 3);
        v64 = *(a2 - 1);
        v65 = i[3];
        v66 = *(_QWORD *)(v64 + 40);
        v67 = *(_QWORD *)(v65 + 40);
        v68 = v66 >= v67;
        if (v66 == v67)
          v68 = *(_QWORD *)(v64 + 48) >= *(_QWORD *)(v65 + 48);
        if (!v68)
        {
          *v63 = v64;
          *(a2 - 1) = v65;
          v69 = *v63;
          v70 = *v62;
          v71 = *(_QWORD *)(*v63 + 40);
          v72 = *(_QWORD *)(*v62 + 40);
          v73 = v71 >= v72;
          if (v71 == v72)
            v73 = *(_QWORD *)(v69 + 48) >= *(_QWORD *)(v70 + 48);
          if (!v73)
          {
            *v62 = v69;
            *v63 = v70;
            v74 = *v61;
            v75 = *(_QWORD *)(*v61 + 40);
            v76 = v71 >= v75;
            if (v71 == v75)
              v76 = *(_QWORD *)(v69 + 48) >= *(_QWORD *)(v74 + 48);
            if (!v76)
            {
              i[1] = v69;
              i[2] = v74;
              v77 = *i;
              v78 = *(_QWORD *)(*i + 40);
              v79 = v71 >= v78;
              if (v71 == v78)
                v79 = *(_QWORD *)(v69 + 48) >= *(_QWORD *)(v77 + 48);
              if (!v79)
              {
                *i = v69;
                i[1] = v77;
              }
            }
          }
        }
        return result;
      default:
        if (v10 > 191)
        {
          if (!a3)
          {
            if (i == a2)
              return result;
            v95 = (v11 - 2) >> 1;
            v96 = v95;
            do
            {
              v97 = v96;
              if (v95 >= v96)
              {
                v98 = (2 * v96) | 1;
                v99 = &i[v98];
                if (2 * v97 + 2 < (uint64_t)v11)
                {
                  v100 = v99[1];
                  result = *(uint64_t **)(*v99 + 40);
                  v101 = *(uint64_t **)(v100 + 40);
                  v102 = result >= v101;
                  if (result == v101)
                    v102 = *(_QWORD *)(*v99 + 48) >= *(_QWORD *)(v100 + 48);
                  if (!v102)
                  {
                    ++v99;
                    v98 = 2 * v97 + 2;
                  }
                }
                v103 = *v99;
                v104 = i[v97];
                v105 = *(uint64_t **)(*v99 + 40);
                v106 = *(uint64_t **)(v104 + 40);
                v107 = v105 >= v106;
                if (v105 == v106)
                {
                  result = *(uint64_t **)(v104 + 48);
                  v107 = *(_QWORD *)(v103 + 48) >= (unint64_t)result;
                }
                if (v107)
                {
                  i[v97] = v103;
                  if (v95 >= v98)
                  {
                    while (1)
                    {
                      v109 = 2 * v98;
                      v98 = (2 * v98) | 1;
                      v108 = &i[v98];
                      v110 = v109 + 2;
                      if (v110 < (uint64_t)v11)
                      {
                        v111 = v108[1];
                        v112 = *(_QWORD *)(*v108 + 40);
                        v113 = *(_QWORD *)(v111 + 40);
                        v114 = v112 >= v113;
                        if (v112 == v113)
                          v114 = *(_QWORD *)(*v108 + 48) >= *(_QWORD *)(v111 + 48);
                        if (!v114)
                        {
                          ++v108;
                          v98 = v110;
                        }
                      }
                      v115 = *v108;
                      result = *(uint64_t **)(*v108 + 40);
                      v116 = result >= v106;
                      if (result == v106)
                      {
                        result = *(uint64_t **)(v115 + 48);
                        v116 = (unint64_t)result >= *(_QWORD *)(v104 + 48);
                      }
                      if (!v116)
                        break;
                      *v99 = v115;
                      v99 = v108;
                      if (v95 < v98)
                        goto LABEL_159;
                    }
                  }
                  v108 = v99;
LABEL_159:
                  *v108 = v104;
                }
              }
              v96 = v97 - 1;
            }
            while (v97);
            v117 = (unint64_t)v10 >> 3;
            while (1)
            {
              v118 = 0;
              v119 = *i;
              v120 = i;
              do
              {
                v121 = v120;
                v120 += v118 + 1;
                v122 = 2 * v118;
                v118 = (2 * v118) | 1;
                v123 = v122 + 2;
                if (v123 < v117)
                {
                  v124 = v120[1];
                  result = *(uint64_t **)(*v120 + 40);
                  v125 = *(uint64_t **)(v124 + 40);
                  v126 = result >= v125;
                  if (result == v125)
                    v126 = *(_QWORD *)(*v120 + 48) >= *(_QWORD *)(v124 + 48);
                  if (!v126)
                  {
                    ++v120;
                    v118 = v123;
                  }
                }
                *v121 = *v120;
              }
              while (v118 <= (uint64_t)((unint64_t)(v117 - 2) >> 1));
              if (v120 != --a2)
              {
                *v120 = *a2;
                *a2 = v119;
                v127 = (char *)v120 - (char *)i + 8;
                if (v127 < 9)
                  goto LABEL_181;
                v128 = ((unint64_t)v127 >> 3) - 2;
                v129 = v128 >> 1;
                v130 = &i[v128 >> 1];
                v131 = *v130;
                v119 = *v120;
                v132 = *(_QWORD *)(*v130 + 40);
                v133 = *(_QWORD *)(*v120 + 40);
                v134 = v132 >= v133;
                if (v132 == v133)
                  v134 = *(_QWORD *)(v131 + 48) >= *(_QWORD *)(v119 + 48);
                if (v134)
                  goto LABEL_181;
                *v120 = v131;
                if (v128 >= 2)
                {
                  while (1)
                  {
                    v135 = v129 - 1;
                    v129 = (v129 - 1) >> 1;
                    v120 = &i[v129];
                    v136 = *v120;
                    v137 = *(_QWORD *)(*v120 + 40);
                    v138 = v137 >= v133;
                    if (v137 == v133)
                      v138 = *(_QWORD *)(v136 + 48) >= *(_QWORD *)(v119 + 48);
                    if (v138)
                      break;
                    *v130 = v136;
                    v130 = &i[v129];
                    if (v135 <= 1)
                      goto LABEL_180;
                  }
                }
                v120 = v130;
              }
LABEL_180:
              *v120 = v119;
LABEL_181:
              if (v117-- <= 2)
                return result;
            }
          }
          v12 = v11 >> 1;
          v13 = &i[v11 >> 1];
          if ((unint64_t)v10 < 0x401)
          {
            result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(&v7[v11 >> 1], v7, a2 - 1);
          }
          else
          {
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v7, &v7[v11 >> 1], a2 - 1);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v7 + 1, v13 - 1, a2 - 2);
            std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v7 + 2, &v7[v12 + 1], a2 - 3);
            result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v13 - 1, v13, &v7[v12 + 1]);
            v14 = *v7;
            *v7 = *v13;
            *v13 = v14;
          }
          --a3;
          v15 = *v7;
          if ((a4 & 1) == 0)
          {
            v17 = *(v7 - 1);
            v16 = *(_QWORD *)(v17 + 40);
            v18 = *(_QWORD *)(v15 + 40);
            v19 = v16 >= v18;
            if (v16 == v18)
            {
              if (*(_QWORD *)(v17 + 48) < *(_QWORD *)(v15 + 48))
                goto LABEL_23;
            }
            else
            {
              v16 = *(_QWORD *)(v15 + 40);
              if (!v19)
                goto LABEL_23;
            }
            v20 = *v8;
            v21 = *(_QWORD *)(*v8 + 40);
            if (v18 == v21)
            {
              if (*(_QWORD *)(v15 + 48) >= *(_QWORD *)(v20 + 48))
                goto LABEL_15;
            }
            else if (v18 >= v21)
            {
LABEL_15:
              for (i = v7 + 1; i < a2; ++i)
              {
                v22 = *(_QWORD *)(*i + 40);
                v23 = v18 >= v22;
                if (v18 == v22)
                  v23 = *(_QWORD *)(v15 + 48) >= *(_QWORD *)(*i + 48);
                if (!v23)
                  break;
              }
              goto LABEL_67;
            }
            for (i = v7 + 1; ; ++i)
            {
              v43 = *(_QWORD *)(*i + 40);
              v44 = v18 >= v43;
              if (v18 == v43)
                v44 = *(_QWORD *)(v15 + 48) >= *(_QWORD *)(*i + 48);
              if (!v44)
                break;
            }
LABEL_67:
            j = a2;
            if (i < a2)
            {
              for (j = a2 - 1; ; --j)
              {
                v46 = v18 >= v21;
                if (v18 == v21)
                  v46 = *(_QWORD *)(v15 + 48) >= *(_QWORD *)(v20 + 48);
                if (v46)
                  break;
                v47 = *(j - 1);
                v20 = v47;
                v21 = *(_QWORD *)(v47 + 40);
              }
            }
            if (i < j)
            {
              v48 = *i;
              v49 = *j;
              do
              {
                *i++ = v49;
                *j = v48;
                while (1)
                {
                  v48 = *i;
                  v50 = *(_QWORD *)(*i + 40);
                  v51 = v18 >= v50;
                  if (v18 == v50)
                    v51 = *(_QWORD *)(v15 + 48) >= *(_QWORD *)(v48 + 48);
                  if (!v51)
                    break;
                  ++i;
                }
                do
                {
                  v52 = *--j;
                  v49 = v52;
                  v53 = *(_QWORD *)(v52 + 40);
                  v54 = v18 >= v53;
                  if (v18 == v53)
                    v54 = *(_QWORD *)(v15 + 48) >= *(_QWORD *)(v49 + 48);
                }
                while (!v54);
              }
              while (i < j);
            }
            v55 = i - 1;
            if (i - 1 != v7)
              *v7 = *v55;
            a4 = 0;
            *v55 = v15;
            continue;
          }
          v16 = *(_QWORD *)(v15 + 40);
LABEL_23:
          for (k = 0; ; ++k)
          {
            v25 = v7[k + 1];
            v26 = *(_QWORD *)(v25 + 40);
            v27 = v26 >= v16;
            if (v26 == v16)
              v27 = *(_QWORD *)(v25 + 48) >= *(_QWORD *)(v15 + 48);
            if (v27)
              break;
          }
          v28 = &v7[k];
          v29 = (unint64_t)&v7[k + 1];
          m = a2 - 1;
          if (k * 8)
          {
            while (1)
            {
              v32 = *(_QWORD *)(*m + 40);
              v33 = v32 >= v16;
              if (v32 == v16)
                v33 = *(_QWORD *)(*m + 48) >= *(_QWORD *)(v15 + 48);
              if (!v33)
                break;
              --m;
            }
          }
          else
          {
            m = a2;
            if (v29 < (unint64_t)a2)
            {
              for (m = a2 - 1; ; --m)
              {
                v31 = *(_QWORD *)(*m + 40);
                if (v31 == v16)
                {
                  if (v29 >= (unint64_t)m || *(_QWORD *)(*m + 48) < *(_QWORD *)(v15 + 48))
                    break;
                }
                else if (v29 >= (unint64_t)m || v31 < v16)
                {
                  break;
                }
              }
            }
          }
          if (v29 < (unint64_t)m)
          {
            v34 = *m;
            v35 = (unint64_t)&v7[k + 1];
            v36 = m;
            do
            {
              *(_QWORD *)v35 = v34;
              v35 += 8;
              *v36 = v25;
              while (1)
              {
                v25 = *(_QWORD *)v35;
                v37 = *(_QWORD *)(*(_QWORD *)v35 + 40);
                v38 = v37 >= v16;
                if (v37 == v16)
                  v38 = *(_QWORD *)(v25 + 48) >= *(_QWORD *)(v15 + 48);
                if (v38)
                  break;
                v35 += 8;
              }
              do
              {
                v39 = *--v36;
                v34 = v39;
                v40 = *(_QWORD *)(v39 + 40);
                v41 = v40 >= v16;
                if (v40 == v16)
                  v41 = *(_QWORD *)(v34 + 48) >= *(_QWORD *)(v15 + 48);
              }
              while (v41);
            }
            while (v35 < (unint64_t)v36);
            v28 = (uint64_t *)(v35 - 8);
          }
          if (v28 != v7)
            *v7 = *v28;
          *v28 = v15;
          if (v29 < (unint64_t)m)
          {
LABEL_59:
            result = (uint64_t *)std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **,false>(v7, v28, a3, a4 & 1);
            a4 = 0;
            i = v28 + 1;
            continue;
          }
          v42 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v7, v28);
          i = v28 + 1;
          result = (uint64_t *)std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(v28 + 1, a2);
          if (!(_DWORD)result)
          {
            if (v42)
              continue;
            goto LABEL_59;
          }
          a2 = v28;
          if (v42)
            return result;
          goto LABEL_2;
        }
        v80 = i + 1;
        v82 = i == a2 || v80 == a2;
        if ((a4 & 1) == 0)
        {
          if (!v82)
          {
            do
            {
              v140 = v7;
              v7 = v80;
              v142 = *v140;
              v141 = v140[1];
              v143 = *(_QWORD *)(v141 + 40);
              v144 = *(_QWORD *)(*v140 + 40);
              v145 = v143 >= v144;
              if (v143 == v144)
                v145 = *(_QWORD *)(v141 + 48) >= *(_QWORD *)(v142 + 48);
              if (!v145)
              {
                do
                {
                  v146 = v140;
                  v147 = *--v140;
                  v140[2] = v142;
                  v142 = v147;
                  v148 = *(_QWORD *)(v147 + 40);
                  v149 = v143 >= v148;
                  if (v143 == v148)
                    v149 = *(_QWORD *)(v141 + 48) >= *(_QWORD *)(v142 + 48);
                }
                while (!v149);
                *v146 = v141;
              }
              v80 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (v82)
          return result;
        v83 = 0;
        v84 = i;
        do
        {
          v85 = v84;
          v84 = v80;
          v87 = *v85;
          v86 = v85[1];
          v88 = *(_QWORD *)(v86 + 40);
          v89 = *(_QWORD *)(*v85 + 40);
          v90 = v88 >= v89;
          if (v88 == v89)
            v90 = *(_QWORD *)(v86 + 48) >= *(_QWORD *)(v87 + 48);
          if (v90)
            goto LABEL_133;
          v85[1] = v87;
          v91 = i;
          if (v85 == i)
            goto LABEL_132;
          v92 = v83;
          while (1)
          {
            v93 = *(uint64_t *)((char *)i + v92 - 8);
            v94 = *(_QWORD *)(v93 + 40);
            if (v88 == v94)
            {
              if (*(_QWORD *)(v86 + 48) >= *(_QWORD *)(v93 + 48))
              {
                v91 = (uint64_t *)((char *)i + v92);
                goto LABEL_132;
              }
              goto LABEL_129;
            }
            if (v88 >= v94)
              break;
LABEL_129:
            --v85;
            *(uint64_t *)((char *)i + v92) = v93;
            v92 -= 8;
            if (!v92)
            {
              v91 = i;
              goto LABEL_132;
            }
          }
          v91 = v85;
LABEL_132:
          *v91 = v86;
LABEL_133:
          v80 = v84 + 1;
          v83 += 8;
        }
        while (v84 + 1 != a2);
        return result;
    }
  }
}

uint64_t *std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  unint64_t v20;
  BOOL v21;

  v3 = *a2;
  v4 = *result;
  v5 = *(_QWORD *)(*a2 + 40);
  v6 = *(_QWORD *)(*result + 40);
  v7 = v5 >= v6;
  if (v5 == v6)
    v7 = *(_QWORD *)(v3 + 48) >= *(_QWORD *)(v4 + 48);
  if (v7)
  {
    v11 = *a3;
    v12 = *(_QWORD *)(*a3 + 40);
    v13 = v12 >= v5;
    if (v12 == v5)
      v13 = *(_QWORD *)(v11 + 48) >= *(_QWORD *)(v3 + 48);
    if (!v13)
    {
      *a2 = v11;
      *a3 = v3;
      v14 = *a2;
      v15 = *result;
      v16 = *(_QWORD *)(*a2 + 40);
      v17 = *(_QWORD *)(*result + 40);
      v18 = v16 >= v17;
      if (v16 == v17)
        v18 = *(_QWORD *)(v14 + 48) >= *(_QWORD *)(v15 + 48);
      if (!v18)
      {
        *result = v14;
        *a2 = v15;
      }
    }
  }
  else
  {
    v8 = *a3;
    v9 = *(_QWORD *)(*a3 + 40);
    v10 = v9 >= v5;
    if (v9 == v5)
      v10 = *(_QWORD *)(v8 + 48) >= *(_QWORD *)(v3 + 48);
    if (!v10)
    {
      *result = v8;
LABEL_19:
      *a3 = v4;
      return result;
    }
    *result = v3;
    *a2 = v4;
    v19 = *a3;
    v20 = *(_QWORD *)(*a3 + 40);
    v21 = v20 >= v6;
    if (v20 == v6)
      v21 = *(_QWORD *)(v19 + 48) >= *(_QWORD *)(v4 + 48);
    if (!v21)
    {
      *a2 = v19;
      goto LABEL_19;
    }
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  BOOL v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  BOOL v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(_QWORD *)(v6 + 40);
      v9 = *(_QWORD *)(*a1 + 40);
      v10 = v8 >= v9;
      if (v8 == v9)
        v10 = *(_QWORD *)(v6 + 48) >= *(_QWORD *)(v7 + 48);
      if (!v10)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v24 = a1 + 1;
      v25 = a1 + 2;
      v26 = a1 + 3;
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(a1, a1 + 1, a1 + 2, a1 + 3);
      v27 = *(a2 - 1);
      v28 = a1[3];
      v29 = *(_QWORD *)(v27 + 40);
      v30 = *(_QWORD *)(v28 + 40);
      v31 = v29 >= v30;
      if (v29 == v30)
        v31 = *(_QWORD *)(v27 + 48) >= *(_QWORD *)(v28 + 48);
      if (!v31)
      {
        *v26 = v27;
        *(a2 - 1) = v28;
        v32 = *v26;
        v33 = *v25;
        v34 = *(_QWORD *)(*v26 + 40);
        v35 = *(_QWORD *)(*v25 + 40);
        v36 = v34 >= v35;
        if (v34 == v35)
          v36 = *(_QWORD *)(v32 + 48) >= *(_QWORD *)(v33 + 48);
        if (!v36)
        {
          *v25 = v32;
          *v26 = v33;
          v37 = *v24;
          v38 = *(_QWORD *)(*v24 + 40);
          v39 = v34 >= v38;
          if (v34 == v38)
            v39 = *(_QWORD *)(v32 + 48) >= *(_QWORD *)(v37 + 48);
          if (!v39)
          {
            a1[1] = v32;
            a1[2] = v37;
            v40 = *a1;
            v41 = *(_QWORD *)(*a1 + 40);
            v42 = v34 >= v41;
            if (v34 == v41)
              v42 = *(_QWORD *)(v32 + 48) >= *(_QWORD *)(v40 + 48);
            if (!v42)
            {
              *a1 = v32;
              a1[1] = v40;
            }
          }
        }
      }
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(a1, a1 + 1, a1 + 2);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  do
  {
    v15 = *v12;
    v16 = *v11;
    v17 = *(_QWORD *)(*v12 + 40);
    v18 = *(_QWORD *)(*v11 + 40);
    v19 = v17 >= v18;
    if (v17 == v18)
      v19 = *(_QWORD *)(v15 + 48) >= *(_QWORD *)(v16 + 48);
    if (v19)
      goto LABEL_22;
    *v12 = v16;
    v20 = a1;
    if (v11 == a1)
      goto LABEL_21;
    v21 = v13;
    while (1)
    {
      v22 = *(uint64_t *)((char *)a1 + v21 + 8);
      v23 = *(_QWORD *)(v22 + 40);
      if (v17 == v23)
      {
        if (*(_QWORD *)(v15 + 48) >= *(_QWORD *)(v22 + 48))
        {
          v20 = v11;
          goto LABEL_21;
        }
        goto LABEL_18;
      }
      if (v17 >= v23)
        break;
LABEL_18:
      --v11;
      *(uint64_t *)((char *)a1 + v21 + 16) = v22;
      v21 -= 8;
      if (v21 == -16)
      {
        v20 = a1;
        goto LABEL_21;
      }
    }
    v20 = (uint64_t *)((char *)a1 + v21 + 16);
LABEL_21:
    *v20 = v15;
    if (++v14 == 8)
      return v12 + 1 == a2;
LABEL_22:
    v11 = v12;
    v13 += 8;
    ++v12;
  }
  while (v12 != a2);
  return 1;
}

uint64_t *std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  BOOL v23;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::createNormalizedSections(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection **>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = *(_QWORD *)(*a4 + 40);
  v12 = *(_QWORD *)(*a3 + 40);
  v13 = v11 >= v12;
  if (v11 == v12)
    v13 = *(_QWORD *)(v9 + 48) >= *(_QWORD *)(v10 + 48);
  if (!v13)
  {
    *a3 = v9;
    *a4 = v10;
    v14 = *a3;
    v15 = *a2;
    v16 = *(_QWORD *)(*a3 + 40);
    v17 = *(_QWORD *)(*a2 + 40);
    v18 = v16 >= v17;
    if (v16 == v17)
      v18 = *(_QWORD *)(v14 + 48) >= *(_QWORD *)(v15 + 48);
    if (!v18)
    {
      *a2 = v14;
      *a3 = v15;
      v19 = *a2;
      v20 = *a1;
      v21 = *(_QWORD *)(*a2 + 40);
      v22 = *(_QWORD *)(*a1 + 40);
      v23 = v21 >= v22;
      if (v21 == v22)
        v23 = *(_QWORD *)(v19 + 48) >= *(_QWORD *)(v20 + 48);
      if (!v23)
      {
        *a1 = v19;
        *a2 = v20;
      }
    }
  }
  return result;
}

void llvm::detail::provider_format_adapter<char (&)[17]>::~provider_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::provider_format_adapter<char (&)[17]>::format(uint64_t a1, llvm::raw_ostream *a2, uint64_t a3, unint64_t *a4)
{
  const char *v5;
  int v6;
  int v7;
  unint64_t v8;
  size_t v9;
  size_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t *v14;

  v5 = *(const char **)(a1 + 8);
  if (a4)
  {
    v12 = 0;
    v13 = a3;
    v14 = a4;
    v6 = llvm::consumeUnsignedInteger((llvm *)&v13, (llvm::StringRef *)0xA, &v12, a4);
    if (v14)
      v7 = 1;
    else
      v7 = v6;
    if (v7)
      v8 = -1;
    else
      v8 = v12;
    if (v5)
      goto LABEL_9;
  }
  else
  {
    v8 = -1;
    if (v5)
    {
LABEL_9:
      v9 = strlen(v5);
      goto LABEL_12;
    }
  }
  v9 = 0;
LABEL_12:
  if (v9 >= v8)
    v10 = v8;
  else
    v10 = v9;
  return llvm::raw_ostream::operator<<(a2, v5, v10);
}

_DWORD *llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 16 * v3;
      v13 = v4;
      do
      {
        if (*(_DWORD *)v13 <= 0xFFFFFFFD)
        {
          v17 = 0;
          llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, (_DWORD *)v13, &v17);
          v14 = v17;
          *v17 = *(_DWORD *)v13;
          *((_QWORD *)v14 + 1) = *(_QWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 16;
        v12 -= 16;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v15 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v15)
  {
    v16 = 16 * v15;
    do
    {
      *result = -1;
      result += 4;
      v16 -= 16;
    }
    while (v16);
  }
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *j;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  uint64_t k;
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t *v26;
  unint64_t v27;
  uint64_t *m;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  char v41;
  unint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  int v48;
  unsigned int v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  int v55;
  unsigned int v56;
  unsigned int v57;
  BOOL v58;
  unsigned int v59;
  unsigned int v60;
  uint64_t v61;
  unint64_t v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  unint64_t v66;
  int v67;
  unsigned int v68;
  unsigned int v69;
  uint64_t v70;
  unint64_t v71;
  unint64_t v72;
  int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v79;
  unsigned int v80;
  unsigned int v81;
  uint64_t v82;
  uint64_t v83;
  unint64_t v84;
  unint64_t v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  uint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  int v93;
  unsigned int v94;
  unsigned int v95;
  uint64_t *v96;
  unsigned int v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  unint64_t v101;
  int v102;
  uint64_t *v103;
  BOOL v104;
  char v105;
  uint64_t v106;
  uint64_t *v107;
  __int128 **v108;
  uint64_t v109;
  __int128 *v110;
  unint64_t v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  unsigned int v115;
  _QWORD *v116;
  uint64_t v117;
  uint64_t *v118;
  uint64_t v119;
  unint64_t v120;
  unint64_t v121;
  int v122;
  unsigned int v123;
  unsigned int v124;
  int64_t v125;
  int64_t v126;
  int64_t v127;
  uint64_t v128;
  uint64_t *v129;
  uint64_t v130;
  uint64_t v131;
  unint64_t v132;
  unint64_t v133;
  int v134;
  uint64_t v135;
  unint64_t v136;
  unint64_t v137;
  int v138;
  uint64_t *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  int v146;
  unint64_t v147;
  unint64_t v148;
  int v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  char v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  char v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  int v170;
  unsigned int v171;
  unsigned int v172;
  uint64_t *v173;
  uint64_t v174;
  unint64_t v175;
  unint64_t v176;
  uint64_t *v177;
  uint64_t v178;
  unint64_t v179;
  unint64_t v180;
  int v181;
  uint64_t *v182;
  unint64_t v183;
  unint64_t v184;
  unint64_t v185;
  int v186;
  unsigned int v187;
  unsigned int v188;
  unsigned int v189;
  unsigned int v190;
  __int128 **v192;
  uint64_t v193;
  uint64_t v194;
  unint64_t v195;
  unint64_t v196;
  int v197;
  unsigned int v198;
  unsigned int v199;
  _QWORD *v200;
  uint64_t v201;
  uint64_t v202;
  unint64_t v203;
  unint64_t v204;
  int v205;
  unsigned int v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;

  v6 = (uint64_t *)result;
LABEL_2:
  j = a2;
  v8 = a2 - 1;
  i = v6;
  while (2)
  {
    v6 = i;
    v10 = (char *)j - (char *)i;
    v11 = v10 >> 3;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        result = *(a2 - 1);
        v99 = *v6;
        v100 = *(_QWORD *)(result + 24);
        v101 = *(_QWORD *)(*v6 + 24);
        if (v100 == v101)
        {
          v102 = *(unsigned __int16 *)(v99 + 34);
          if (((*(unsigned __int16 *)(result + 34) ^ v102) & 0x200) != 0)
          {
            if ((v102 & 0x200) == 0)
              return result;
          }
          else
          {
            v208 = *(unsigned __int8 *)(result + 37);
            v209 = *(unsigned __int8 *)(v99 + 37);
            if (v208 == v209)
            {
              result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v99);
              if (!(_DWORD)result)
                return result;
              v99 = *v6;
              result = *(a2 - 1);
            }
            else if (v208 >= v209)
            {
              return result;
            }
          }
        }
        else if (v100 <= v101)
        {
          return result;
        }
        *v6 = result;
        *(a2 - 1) = v99;
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v6, v6 + 1, v8);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v6, v6 + 1, v6 + 2, v8);
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>(v6, v6 + 1, v6 + 2, v6 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v103 = v6 + 1;
          v104 = v6 == j || v103 == j;
          v105 = v104;
          if ((a4 & 1) == 0)
          {
            if ((v105 & 1) != 0)
              return result;
            while (1)
            {
              v192 = (__int128 **)v6;
              v6 = v103;
              v193 = (uint64_t)*v192;
              v194 = (uint64_t)v192[1];
              v195 = *(_QWORD *)(v194 + 24);
              v196 = *((_QWORD *)*v192 + 3);
              if (v195 == v196)
              {
                v197 = *(unsigned __int16 *)(v193 + 34);
                if (((*(unsigned __int16 *)(v194 + 34) ^ v197) & 0x200) != 0)
                {
                  if ((v197 & 0x200) != 0)
                    goto LABEL_323;
                }
                else
                {
                  v198 = *(unsigned __int8 *)(v194 + 37);
                  v199 = *(unsigned __int8 *)(v193 + 37);
                  if (v198 == v199)
                  {
                    result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(v192[1], v193);
                    if ((_DWORD)result)
                    {
                      v194 = *v6;
                      goto LABEL_323;
                    }
                  }
                  else if (v198 < v199)
                  {
                    do
                    {
                      while (1)
                      {
                        while (1)
                        {
LABEL_323:
                          while (1)
                          {
                            v200 = v192;
                            v192[1] = *v192;
                            v202 = (uint64_t)*--v192;
                            v201 = v202;
                            v203 = *(_QWORD *)(v194 + 24);
                            v204 = *(_QWORD *)(v202 + 24);
                            if (v203 == v204)
                              break;
                            if (v203 <= v204)
                              goto LABEL_333;
                          }
                          v205 = *(unsigned __int16 *)(v201 + 34);
                          if (((*(unsigned __int16 *)(v194 + 34) ^ v205) & 0x200) == 0)
                            break;
                          if ((v205 & 0x200) == 0)
                            goto LABEL_333;
                        }
                        v206 = *(unsigned __int8 *)(v194 + 37);
                        v207 = *(unsigned __int8 *)(v201 + 37);
                        if (v206 != v207)
                          break;
                        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v194, v201);
                        if ((result & 1) == 0)
                          goto LABEL_333;
                      }
                    }
                    while (v206 < v207);
LABEL_333:
                    *v200 = v194;
                  }
                }
              }
              else if (v195 > v196)
              {
                goto LABEL_323;
              }
              v103 = v6 + 1;
              if (v6 + 1 == a2)
                return result;
            }
          }
          if ((v105 & 1) != 0)
            return result;
          v106 = 0;
          v107 = v6;
LABEL_181:
          v108 = (__int128 **)v107;
          v107 = v103;
          v109 = (uint64_t)*v108;
          v110 = v108[1];
          v111 = *((_QWORD *)v110 + 3);
          v112 = *((_QWORD *)*v108 + 3);
          if (v111 == v112)
          {
            v113 = *(unsigned __int16 *)(v109 + 34);
            if (((*((unsigned __int16 *)v110 + 17) ^ v113) & 0x200) != 0)
            {
              if ((v113 & 0x200) == 0)
                goto LABEL_207;
            }
            else
            {
              v114 = *((unsigned __int8 *)v110 + 37);
              v115 = *(unsigned __int8 *)(v109 + 37);
              if (v114 == v115)
              {
                result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(v108[1], v109);
                if (!(_DWORD)result)
                  goto LABEL_207;
                v110 = (__int128 *)*v107;
                v109 = (uint64_t)*v108;
              }
              else if (v114 >= v115)
              {
                goto LABEL_207;
              }
            }
          }
          else if (v111 <= v112)
          {
            goto LABEL_207;
          }
          v108[1] = (__int128 *)v109;
          v116 = v6;
          if (v108 == (__int128 **)v6)
            goto LABEL_206;
          v117 = v106;
          while (1)
          {
            v118 = (uint64_t *)((char *)v6 + v117);
            v119 = *(uint64_t *)((char *)v6 + v117 - 8);
            v120 = *((_QWORD *)v110 + 3);
            v121 = *(_QWORD *)(v119 + 24);
            if (v120 == v121)
            {
              v122 = *(unsigned __int16 *)(v119 + 34);
              if (((*((unsigned __int16 *)v110 + 17) ^ v122) & 0x200) != 0)
              {
                if ((v122 & 0x200) == 0)
                {
                  v116 = (uint64_t *)((char *)v6 + v117);
                  goto LABEL_206;
                }
              }
              else
              {
                v123 = *((unsigned __int8 *)v110 + 37);
                v124 = *(unsigned __int8 *)(v119 + 37);
                if (v123 == v124)
                {
                  result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(v110, v119);
                  if (!(_DWORD)result)
                    goto LABEL_205;
                  v119 = *(v118 - 1);
                }
                else if (v123 >= v124)
                {
LABEL_205:
                  v116 = v108;
LABEL_206:
                  *v116 = v110;
LABEL_207:
                  v103 = v107 + 1;
                  v106 += 8;
                  if (v107 + 1 == a2)
                    return result;
                  goto LABEL_181;
                }
              }
            }
            else if (v120 <= v121)
            {
              goto LABEL_205;
            }
            --v108;
            *v118 = v119;
            v117 -= 8;
            if (!v117)
            {
              v116 = v6;
              goto LABEL_206;
            }
          }
        }
        if (!a3)
        {
          if (v6 == j)
            return result;
          v125 = (unint64_t)(v11 - 2) >> 1;
          v126 = v125;
          while (1)
          {
            v127 = v126;
            if (v125 < v126)
              goto LABEL_259;
            v128 = (2 * v126) | 1;
            v129 = &v6[v128];
            if (2 * v126 + 2 >= v11)
              goto LABEL_219;
            v130 = *v129;
            v131 = v129[1];
            v132 = *(_QWORD *)(*v129 + 24);
            v133 = *(_QWORD *)(v131 + 24);
            if (v132 == v133)
              break;
            if (v132 > v133)
              goto LABEL_218;
LABEL_219:
            result = *v129;
            v135 = v6[v127];
            v136 = *(_QWORD *)(*v129 + 24);
            v137 = *(_QWORD *)(v135 + 24);
            if (v136 == v137)
            {
              v138 = *(unsigned __int16 *)(v135 + 34);
              if (((*(unsigned __int16 *)(result + 34) ^ v138) & 0x200) != 0)
              {
                if ((v138 & 0x200) != 0)
                  goto LABEL_259;
              }
              else
              {
                v155 = *(unsigned __int8 *)(result + 37);
                v156 = *(unsigned __int8 *)(v135 + 37);
                if (v155 == v156)
                {
                  result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v6[v127]);
                  v125 = (unint64_t)(v11 - 2) >> 1;
                  if ((result & 1) != 0)
                    goto LABEL_259;
                  v135 = v6[v127];
                  result = *v129;
                }
                else if (v155 < v156)
                {
                  goto LABEL_259;
                }
              }
            }
            else if (v136 > v137)
            {
              goto LABEL_259;
            }
            v6[v127] = result;
            while (1)
            {
              if (v125 < v128)
                goto LABEL_258;
              v139 = v129;
              v140 = 2 * v128;
              v128 = (2 * v128) | 1;
              v129 = &v6[v128];
              v141 = v140 + 2;
              if (v140 + 2 < v11)
              {
                v142 = *v129;
                v143 = v129[1];
                v144 = *(_QWORD *)(*v129 + 24);
                v145 = *(_QWORD *)(v143 + 24);
                if (v144 != v145)
                {
                  if (v144 <= v145)
                    goto LABEL_233;
LABEL_232:
                  ++v129;
                  v128 = v141;
                  goto LABEL_233;
                }
                v146 = *(unsigned __int16 *)(v143 + 34);
                if (((*(unsigned __int16 *)(v142 + 34) ^ v146) & 0x200) != 0)
                {
                  if ((v146 & 0x200) != 0)
                    goto LABEL_232;
                }
                else
                {
                  v152 = *(unsigned __int8 *)(v142 + 37);
                  v153 = *(unsigned __int8 *)(v143 + 37);
                  if (v152 == v153)
                  {
                    v154 = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v142, v143);
                    v125 = (unint64_t)(v11 - 2) >> 1;
                    if ((v154 & 1) != 0)
                      goto LABEL_232;
                  }
                  else if (v152 < v153)
                  {
                    goto LABEL_232;
                  }
                }
              }
LABEL_233:
              result = *v129;
              v147 = *(_QWORD *)(*v129 + 24);
              v148 = *(_QWORD *)(v135 + 24);
              if (v147 != v148)
              {
                if (v147 > v148)
                  goto LABEL_257;
                goto LABEL_238;
              }
              v149 = *(unsigned __int16 *)(v135 + 34);
              if (((*(unsigned __int16 *)(result + 34) ^ v149) & 0x200) != 0)
              {
                if ((v149 & 0x200) != 0)
                  goto LABEL_257;
                goto LABEL_238;
              }
              v150 = *(unsigned __int8 *)(result + 37);
              v151 = *(unsigned __int8 *)(v135 + 37);
              if (v150 == v151)
                break;
              if (v150 < v151)
              {
LABEL_257:
                v129 = v139;
                goto LABEL_258;
              }
LABEL_238:
              *v139 = result;
            }
            result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v135);
            if ((result & 1) == 0)
            {
              result = *v129;
              v125 = (unint64_t)(v11 - 2) >> 1;
              goto LABEL_238;
            }
            v129 = v139;
            v125 = (unint64_t)(v11 - 2) >> 1;
LABEL_258:
            *v129 = v135;
LABEL_259:
            v126 = v127 - 1;
            if (!v127)
            {
              v160 = (unint64_t)v10 >> 3;
              while (1)
              {
                v161 = 0;
                v162 = *v6;
                v163 = v6;
                do
                {
                  v164 = v163;
                  v163 += v161 + 1;
                  v165 = 2 * v161;
                  v161 = (2 * v161) | 1;
                  v166 = v165 + 2;
                  if (v165 + 2 >= v160)
                    goto LABEL_272;
                  result = *v163;
                  v167 = v163[1];
                  v168 = *(_QWORD *)(*v163 + 24);
                  v169 = *(_QWORD *)(v167 + 24);
                  if (v168 != v169)
                  {
                    if (v168 <= v169)
                      goto LABEL_272;
LABEL_271:
                    ++v163;
                    v161 = v166;
                    goto LABEL_272;
                  }
                  v170 = *(unsigned __int16 *)(v167 + 34);
                  if (((*(unsigned __int16 *)(result + 34) ^ v170) & 0x200) != 0)
                  {
                    if ((v170 & 0x200) != 0)
                      goto LABEL_271;
                  }
                  else
                  {
                    v171 = *(unsigned __int8 *)(result + 37);
                    v172 = *(unsigned __int8 *)(v167 + 37);
                    if (v171 == v172)
                    {
                      result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v167);
                      if ((result & 1) != 0)
                        goto LABEL_271;
                    }
                    else if (v171 < v172)
                    {
                      goto LABEL_271;
                    }
                  }
LABEL_272:
                  *v164 = *v163;
                }
                while (v161 <= (uint64_t)((unint64_t)(v160 - 2) >> 1));
                v173 = a2 - 1;
                v104 = v163 == --a2;
                if (v104)
                {
                  *v163 = v162;
                  goto LABEL_305;
                }
                *v163 = *v173;
                *v173 = v162;
                v174 = (char *)v163 - (char *)v6 + 8;
                if (v174 >= 9)
                {
                  v175 = ((unint64_t)v174 >> 3) - 2;
                  v176 = v175 >> 1;
                  v177 = &v6[v175 >> 1];
                  result = *v177;
                  v178 = *v163;
                  v179 = *(_QWORD *)(*v177 + 24);
                  v180 = *(_QWORD *)(*v163 + 24);
                  if (v179 == v180)
                  {
                    v181 = *(unsigned __int16 *)(v178 + 34);
                    if (((*(unsigned __int16 *)(result + 34) ^ v181) & 0x200) != 0)
                    {
                      if ((v181 & 0x200) == 0)
                        goto LABEL_305;
                    }
                    else
                    {
                      v189 = *(unsigned __int8 *)(result + 37);
                      v190 = *(unsigned __int8 *)(v178 + 37);
                      if (v189 == v190)
                      {
                        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, *v163);
                        if (!(_DWORD)result)
                          goto LABEL_305;
                        v178 = *v163;
                        result = *v177;
                      }
                      else if (v189 >= v190)
                      {
                        goto LABEL_305;
                      }
                    }
                  }
                  else if (v179 <= v180)
                  {
                    goto LABEL_305;
                  }
                  *v163 = result;
                  if (v175 < 2)
                    goto LABEL_304;
                  while (1)
                  {
                    v182 = v177;
                    v183 = v176 - 1;
                    v176 = (v176 - 1) >> 1;
                    v177 = &v6[v176];
                    result = *v177;
                    v184 = *(_QWORD *)(*v177 + 24);
                    v185 = *(_QWORD *)(v178 + 24);
                    if (v184 == v185)
                    {
                      v186 = *(unsigned __int16 *)(v178 + 34);
                      if (((*(unsigned __int16 *)(result + 34) ^ v186) & 0x200) != 0)
                      {
                        if ((v186 & 0x200) == 0)
                          goto LABEL_303;
                      }
                      else
                      {
                        v187 = *(unsigned __int8 *)(result + 37);
                        v188 = *(unsigned __int8 *)(v178 + 37);
                        if (v187 == v188)
                        {
                          result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v178);
                          if (!(_DWORD)result)
                            goto LABEL_303;
                          result = *v177;
                        }
                        else if (v187 >= v188)
                        {
LABEL_303:
                          v177 = v182;
LABEL_304:
                          *v177 = v178;
                          break;
                        }
                      }
                    }
                    else if (v184 <= v185)
                    {
                      goto LABEL_303;
                    }
                    *v182 = result;
                    if (v183 <= 1)
                      goto LABEL_304;
                  }
                }
LABEL_305:
                if (v160-- <= 2)
                  return result;
              }
            }
          }
          v134 = *(unsigned __int16 *)(v131 + 34);
          if (((*(unsigned __int16 *)(v130 + 34) ^ v134) & 0x200) != 0)
          {
            if ((v134 & 0x200) == 0)
              goto LABEL_219;
          }
          else
          {
            v157 = *(unsigned __int8 *)(v130 + 37);
            v158 = *(unsigned __int8 *)(v131 + 37);
            if (v157 == v158)
            {
              v159 = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v130, v131);
              v125 = (unint64_t)(v11 - 2) >> 1;
              if ((v159 & 1) == 0)
                goto LABEL_219;
            }
            else if (v157 >= v158)
            {
              goto LABEL_219;
            }
          }
LABEL_218:
          ++v129;
          v128 = 2 * v127 + 2;
          goto LABEL_219;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v6[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v13, v6, v8);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v6, v13, v8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v6 + 1, v13 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v6 + 2, &v6[v12 + 1], a2 - 3);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v13 - 1, v13, &v6[v12 + 1]);
          v14 = *v6;
          *v6 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v6;
        if ((a4 & 1) == 0)
        {
          result = *(v6 - 1);
          v16 = *(_QWORD *)(result + 24);
          v17 = *(_QWORD *)(v15 + 24);
          if (v16 == v17)
          {
            v18 = *(unsigned __int16 *)(v15 + 34);
            if (((*(unsigned __int16 *)(result + 34) ^ v18) & 0x200) != 0)
            {
              if ((v18 & 0x200) != 0)
                goto LABEL_16;
            }
            else
            {
              v59 = *(unsigned __int8 *)(result + 37);
              v60 = *(unsigned __int8 *)(v15 + 37);
              if (v59 == v60)
              {
                result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, *v6);
                v15 = *v6;
                if ((result & 1) != 0)
                  goto LABEL_16;
                v16 = *(_QWORD *)(v15 + 24);
              }
              else if (v59 < v60)
              {
                goto LABEL_16;
              }
            }
          }
          else
          {
            if (v16 > v17)
              goto LABEL_16;
            v16 = *(_QWORD *)(v15 + 24);
          }
          v61 = *v8;
          v62 = *(_QWORD *)(*v8 + 24);
          if (v16 == v62)
          {
            v63 = *(unsigned __int16 *)(v61 + 34);
            if (((*(unsigned __int16 *)(v15 + 34) ^ v63) & 0x200) != 0)
            {
              if ((v63 & 0x200) != 0)
                goto LABEL_107;
            }
            else
            {
              v97 = *(unsigned __int8 *)(v15 + 37);
              v98 = *(unsigned __int8 *)(v61 + 37);
              if (v97 == v98)
              {
                result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v15, v61);
                if ((result & 1) != 0)
                  goto LABEL_107;
              }
              else if (v97 < v98)
              {
LABEL_107:
                for (i = v6 + 1; ; ++i)
                {
                  v70 = *i;
                  v71 = *(_QWORD *)(v15 + 24);
                  v72 = *(_QWORD *)(*i + 24);
                  if (v71 == v72)
                  {
                    v73 = *(unsigned __int16 *)(v70 + 34);
                    if (((*(unsigned __int16 *)(v15 + 34) ^ v73) & 0x200) != 0)
                    {
                      if ((v73 & 0x200) != 0)
                        goto LABEL_118;
                    }
                    else
                    {
                      v74 = *(unsigned __int8 *)(v15 + 37);
                      v75 = *(unsigned __int8 *)(v70 + 37);
                      if (v74 == v75)
                      {
                        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v15, v70);
                        if ((result & 1) != 0)
                          goto LABEL_118;
                      }
                      else if (v74 < v75)
                      {
                        goto LABEL_118;
                      }
                    }
                  }
                  else if (v71 > v72)
                  {
                    goto LABEL_118;
                  }
                }
              }
            }
          }
          else if (v16 > v62)
          {
            goto LABEL_107;
          }
          for (i = v6 + 1; i < j; ++i)
          {
            v64 = *i;
            v65 = *(_QWORD *)(v15 + 24);
            v66 = *(_QWORD *)(*i + 24);
            if (v65 == v66)
            {
              v67 = *(unsigned __int16 *)(v64 + 34);
              if (((*(unsigned __int16 *)(v15 + 34) ^ v67) & 0x200) != 0)
              {
                if ((v67 & 0x200) != 0)
                  break;
              }
              else
              {
                v68 = *(unsigned __int8 *)(v15 + 37);
                v69 = *(unsigned __int8 *)(v64 + 37);
                if (v68 == v69)
                {
                  result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v15, v64);
                  if ((result & 1) != 0)
                    break;
                }
                else if (v68 < v69)
                {
                  break;
                }
              }
            }
            else if (v65 > v66)
            {
              break;
            }
          }
LABEL_118:
          if (i >= j)
            goto LABEL_152;
          for (j = a2 - 1; ; --j)
          {
            v76 = *j;
            v77 = *(_QWORD *)(v15 + 24);
            v78 = *(_QWORD *)(*j + 24);
            if (v77 != v78)
            {
              if (v77 <= v78)
                goto LABEL_152;
              continue;
            }
            v79 = *(unsigned __int16 *)(v76 + 34);
            if (((*(unsigned __int16 *)(v15 + 34) ^ v79) & 0x200) != 0)
            {
              if ((v79 & 0x200) == 0)
                goto LABEL_152;
              continue;
            }
            v80 = *(unsigned __int8 *)(v15 + 37);
            v81 = *(unsigned __int8 *)(v76 + 37);
            if (v80 != v81)
              break;
            result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v15, v76);
            if ((result & 1) == 0)
              goto LABEL_152;
LABEL_125:
            ;
          }
          if (v80 < v81)
            goto LABEL_125;
LABEL_152:
          if (i < j)
          {
            v82 = *i;
            *i++ = *j;
            *j = v82;
            while (1)
            {
              v83 = *i;
              v84 = *(_QWORD *)(v15 + 24);
              v85 = *(_QWORD *)(*i + 24);
              if (v84 == v85)
              {
                v86 = *(unsigned __int16 *)(v83 + 34);
                if (((*(unsigned __int16 *)(v15 + 34) ^ v86) & 0x200) != 0)
                {
                  if ((v86 & 0x200) != 0)
                    goto LABEL_142;
                }
                else
                {
                  v87 = *(unsigned __int8 *)(v15 + 37);
                  v88 = *(unsigned __int8 *)(v83 + 37);
                  if (v87 == v88)
                  {
                    result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v15, v83);
                    if ((result & 1) != 0)
                    {
                      do
                      {
                        while (1)
                        {
                          while (1)
                          {
LABEL_142:
                            while (1)
                            {
                              v90 = *--j;
                              v89 = v90;
                              v91 = *(_QWORD *)(v15 + 24);
                              v92 = *(_QWORD *)(v90 + 24);
                              if (v91 == v92)
                                break;
                              if (v91 <= v92)
                                goto LABEL_152;
                            }
                            v93 = *(unsigned __int16 *)(v89 + 34);
                            if (((*(unsigned __int16 *)(v15 + 34) ^ v93) & 0x200) == 0)
                              break;
                            if ((v93 & 0x200) == 0)
                              goto LABEL_152;
                          }
                          v94 = *(unsigned __int8 *)(v15 + 37);
                          v95 = *(unsigned __int8 *)(v89 + 37);
                          if (v94 != v95)
                            break;
                          result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v15, v89);
                          if ((result & 1) == 0)
                            goto LABEL_152;
                        }
                      }
                      while (v94 < v95);
                      goto LABEL_152;
                    }
                  }
                  else if (v87 < v88)
                  {
                    goto LABEL_142;
                  }
                }
              }
              else if (v84 > v85)
              {
                goto LABEL_142;
              }
              ++i;
            }
          }
          v96 = i - 1;
          if (i - 1 != v6)
            *v6 = *v96;
          a4 = 0;
          *v96 = v15;
          j = a2;
          continue;
        }
LABEL_16:
        for (k = 0; ; ++k)
        {
          v20 = v6[k + 1];
          v21 = *(_QWORD *)(v20 + 24);
          v22 = *(_QWORD *)(v15 + 24);
          if (v21 != v22)
          {
            if (v21 <= v22)
              goto LABEL_27;
            continue;
          }
          v23 = *(unsigned __int16 *)(v15 + 34);
          if (((*(unsigned __int16 *)(v20 + 34) ^ v23) & 0x200) != 0)
          {
            if ((v23 & 0x200) == 0)
              goto LABEL_27;
            continue;
          }
          v24 = *(unsigned __int8 *)(v20 + 37);
          v25 = *(unsigned __int8 *)(v15 + 37);
          if (v24 != v25)
            break;
          if ((std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v20, v15) & 1) == 0)
            goto LABEL_27;
LABEL_22:
          ;
        }
        if (v24 < v25)
          goto LABEL_22;
LABEL_27:
        v26 = &v6[k];
        v27 = (unint64_t)&v6[k + 1];
        m = a2 - 1;
        if (k * 8)
        {
          while (1)
          {
            v29 = *m;
            v30 = *(_QWORD *)(*m + 24);
            v31 = *(_QWORD *)(v15 + 24);
            if (v30 == v31)
            {
              v32 = *(unsigned __int16 *)(v15 + 34);
              if (((*(unsigned __int16 *)(v29 + 34) ^ v32) & 0x200) != 0)
              {
                if ((v32 & 0x200) != 0)
                  goto LABEL_55;
              }
              else
              {
                v33 = *(unsigned __int8 *)(v29 + 37);
                v34 = *(unsigned __int8 *)(v15 + 37);
                if (v33 == v34)
                {
                  if ((std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v29, v15) & 1) != 0)
                    goto LABEL_55;
                }
                else if (v33 < v34)
                {
                  goto LABEL_55;
                }
              }
            }
            else if (v30 > v31)
            {
              goto LABEL_55;
            }
            --m;
          }
        }
        m = j;
        if (v27 < (unint64_t)j)
        {
          for (m = a2 - 1; ; --m)
          {
            v35 = *m;
            v36 = *(_QWORD *)(*m + 24);
            v37 = *(_QWORD *)(v15 + 24);
            if (v36 == v37)
            {
              v38 = *(unsigned __int16 *)(v15 + 34);
              if (((*(unsigned __int16 *)(v35 + 34) ^ v38) & 0x200) != 0)
              {
                if (v27 >= (unint64_t)m || (v38 & 0x200) != 0)
                  break;
              }
              else
              {
                v39 = *(unsigned __int8 *)(v35 + 37);
                v40 = *(unsigned __int8 *)(v15 + 37);
                if (v39 == v40)
                {
                  v41 = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v35, v15);
                  if (v27 >= (unint64_t)m || (v41 & 1) != 0)
                    break;
                }
                else if (v27 >= (unint64_t)m || v39 < v40)
                {
                  break;
                }
              }
            }
            else if (v27 >= (unint64_t)m || v36 > v37)
            {
              break;
            }
          }
        }
LABEL_55:
        if (v27 >= (unint64_t)m)
          goto LABEL_80;
        v42 = (unint64_t)&v6[k + 1];
        v43 = m;
        while (2)
        {
          v44 = *(_QWORD *)v42;
          *(_QWORD *)v42 = *v43;
          v42 += 8;
          *v43 = v44;
          while (2)
          {
            v45 = *(_QWORD *)v42;
            v46 = *(_QWORD *)(*(_QWORD *)v42 + 24);
            v47 = *(_QWORD *)(v15 + 24);
            if (v46 != v47)
            {
              if (v46 <= v47)
                goto LABEL_68;
LABEL_63:
              v42 += 8;
              continue;
            }
            break;
          }
          v48 = *(unsigned __int16 *)(v15 + 34);
          if (((*(unsigned __int16 *)(v45 + 34) ^ v48) & 0x200) != 0)
          {
            if ((v48 & 0x200) == 0)
              goto LABEL_68;
            goto LABEL_63;
          }
          v49 = *(unsigned __int8 *)(v45 + 37);
          v50 = *(unsigned __int8 *)(v15 + 37);
          if (v49 != v50)
          {
            if (v49 >= v50)
              goto LABEL_68;
            goto LABEL_63;
          }
          if ((std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v45, v15) & 1) != 0)
            goto LABEL_63;
          do
          {
            while (1)
            {
              while (1)
              {
LABEL_68:
                while (1)
                {
                  v52 = *--v43;
                  v51 = v52;
                  v53 = *(_QWORD *)(v52 + 24);
                  v54 = *(_QWORD *)(v15 + 24);
                  if (v53 == v54)
                    break;
                  if (v53 > v54)
                    goto LABEL_78;
                }
                v55 = *(unsigned __int16 *)(v15 + 34);
                if (((*(unsigned __int16 *)(v51 + 34) ^ v55) & 0x200) == 0)
                  break;
                if ((v55 & 0x200) != 0)
                  goto LABEL_78;
              }
              v56 = *(unsigned __int8 *)(v51 + 37);
              v57 = *(unsigned __int8 *)(v15 + 37);
              if (v56 != v57)
                break;
              if ((std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v51, v15) & 1) != 0)
                goto LABEL_78;
            }
          }
          while (v56 >= v57);
LABEL_78:
          if (v42 < (unint64_t)v43)
            continue;
          break;
        }
        v26 = (uint64_t *)(v42 - 8);
        j = a2;
LABEL_80:
        if (v26 != v6)
          *v6 = *v26;
        *v26 = v15;
        if (v27 < (unint64_t)m)
        {
LABEL_85:
          result = std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,false>(v6, v26, a3, a4 & 1);
          a4 = 0;
          i = v26 + 1;
          continue;
        }
        v58 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v6, v26);
        i = v26 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v26 + 1, j);
        if (!(_DWORD)result)
        {
          if (v58)
            continue;
          goto LABEL_85;
        }
        a2 = v26;
        if (!v58)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;

  std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a2, a3, a4);
  result = *a5;
  v11 = *a4;
  v12 = *(_QWORD *)(*a5 + 24);
  v13 = *(_QWORD *)(*a4 + 24);
  if (v12 == v13)
  {
    v14 = *(unsigned __int16 *)(v11 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v14) & 0x200) != 0)
    {
      if ((v14 & 0x200) == 0)
        return result;
    }
    else
    {
      v19 = *(unsigned __int8 *)(result + 37);
      v20 = *(unsigned __int8 *)(v11 + 37);
      if (v19 == v20)
      {
        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v11);
        if (!(_DWORD)result)
          return result;
        v11 = *a4;
        result = *a5;
      }
      else if (v19 >= v20)
      {
        return result;
      }
    }
  }
  else if (v12 <= v13)
  {
    return result;
  }
  *a4 = result;
  *a5 = v11;
  result = *a4;
  v15 = *a3;
  v16 = *(_QWORD *)(*a4 + 24);
  v17 = *(_QWORD *)(*a3 + 24);
  if (v16 == v17)
  {
    v18 = *(unsigned __int16 *)(v15 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v18) & 0x200) != 0)
    {
      if ((v18 & 0x200) == 0)
        return result;
    }
    else
    {
      v25 = *(unsigned __int8 *)(result + 37);
      v26 = *(unsigned __int8 *)(v15 + 37);
      if (v25 == v26)
      {
        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v15);
        if (!(_DWORD)result)
          return result;
        v15 = *a3;
        result = *a4;
      }
      else if (v25 >= v26)
      {
        return result;
      }
    }
  }
  else if (v16 <= v17)
  {
    return result;
  }
  *a3 = result;
  *a4 = v15;
  result = *a3;
  v21 = *a2;
  v22 = *(_QWORD *)(*a3 + 24);
  v23 = *(_QWORD *)(*a2 + 24);
  if (v22 == v23)
  {
    v24 = *(unsigned __int16 *)(v21 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v24) & 0x200) != 0)
    {
      if ((v24 & 0x200) == 0)
        return result;
    }
    else
    {
      v31 = *(unsigned __int8 *)(result + 37);
      v32 = *(unsigned __int8 *)(v21 + 37);
      if (v31 == v32)
      {
        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v21);
        if (!(_DWORD)result)
          return result;
        v21 = *a2;
        result = *a3;
      }
      else if (v31 >= v32)
      {
        return result;
      }
    }
  }
  else if (v22 <= v23)
  {
    return result;
  }
  *a2 = result;
  *a3 = v21;
  result = *a2;
  v27 = *a1;
  v28 = *(_QWORD *)(*a2 + 24);
  v29 = *(_QWORD *)(*a1 + 24);
  if (v28 == v29)
  {
    v30 = *(unsigned __int16 *)(v27 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v30) & 0x200) != 0)
    {
      if ((v30 & 0x200) == 0)
        return result;
    }
    else
    {
      v33 = *(unsigned __int8 *)(result + 37);
      v34 = *(unsigned __int8 *)(v27 + 37);
      if (v33 == v34)
      {
        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v27);
        if (!(_DWORD)result)
          return result;
        v27 = *a1;
        result = *a2;
      }
      else if (v33 >= v34)
      {
        return result;
      }
    }
LABEL_41:
    *a1 = result;
    *a2 = v27;
    return result;
  }
  if (v28 > v29)
    goto LABEL_41;
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t result;
  unint64_t v12;
  int v13;
  unint64_t v14;
  int v15;
  unsigned int v16;
  unsigned int v17;
  char v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  int v33;
  unsigned int v34;
  unsigned int v35;

  v6 = *a2;
  v7 = *a1;
  v8 = *(_QWORD *)(v6 + 24);
  v9 = *(_QWORD *)(*a1 + 24);
  if (v8 != v9)
  {
    if (v8 <= v9)
      goto LABEL_4;
LABEL_9:
    result = *a3;
    v14 = *(_QWORD *)(*a3 + 24);
    if (v14 == v8)
    {
      v15 = *(unsigned __int16 *)(v6 + 34);
      if (((*(unsigned __int16 *)(result + 34) ^ v15) & 0x200) != 0)
      {
        if ((v15 & 0x200) == 0)
          goto LABEL_41;
      }
      else
      {
        v26 = *(unsigned __int8 *)(result + 37);
        v27 = *(unsigned __int8 *)(v6 + 37);
        if (v26 == v27)
        {
          if (!std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v6))
          {
            v6 = *a2;
            goto LABEL_41;
          }
          result = *a3;
        }
        else if (v26 >= v27)
        {
LABEL_41:
          v30 = *a1;
          *a1 = v6;
          *a2 = v30;
          result = *a3;
          v31 = *(_QWORD *)(*a3 + 24);
          v32 = *(_QWORD *)(v30 + 24);
          if (v31 == v32)
          {
            v33 = *(unsigned __int16 *)(v30 + 34);
            if (((*(unsigned __int16 *)(result + 34) ^ v33) & 0x200) != 0)
            {
              if ((v33 & 0x200) == 0)
                return result;
            }
            else
            {
              v34 = *(unsigned __int8 *)(result + 37);
              v35 = *(unsigned __int8 *)(v30 + 37);
              if (v34 == v35)
              {
                result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v30);
                if (!(_DWORD)result)
                  return result;
                v30 = *a2;
                result = *a3;
              }
              else if (v34 >= v35)
              {
                return result;
              }
            }
          }
          else if (v31 <= v32)
          {
            return result;
          }
          *a2 = result;
          *a3 = v30;
          return result;
        }
      }
    }
    else if (v14 <= v8)
    {
      goto LABEL_41;
    }
    v23 = *a1;
    *a1 = result;
    *a3 = v23;
    return result;
  }
  v10 = *(unsigned __int16 *)(v7 + 34);
  if (((*(unsigned __int16 *)(v6 + 34) ^ v10) & 0x200) == 0)
  {
    v16 = *(unsigned __int8 *)(v6 + 37);
    v17 = *(unsigned __int8 *)(v7 + 37);
    if (v16 == v17)
    {
      v18 = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v6, v7);
      v6 = *a2;
      v8 = *(_QWORD *)(*a2 + 24);
      if ((v18 & 1) == 0)
        goto LABEL_4;
    }
    else if (v16 >= v17)
    {
      goto LABEL_4;
    }
    goto LABEL_9;
  }
  if ((v10 & 0x200) != 0)
    goto LABEL_9;
LABEL_4:
  result = *a3;
  v12 = *(_QWORD *)(*a3 + 24);
  if (v12 == v8)
  {
    v13 = *(unsigned __int16 *)(v6 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v13) & 0x200) != 0)
    {
      if ((v13 & 0x200) == 0)
        return result;
    }
    else
    {
      v24 = *(unsigned __int8 *)(result + 37);
      v25 = *(unsigned __int8 *)(v6 + 37);
      if (v24 == v25)
      {
        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v6);
        if (!(_DWORD)result)
          return result;
        v6 = *a2;
        result = *a3;
      }
      else if (v24 >= v25)
      {
        return result;
      }
    }
  }
  else if (v12 <= v8)
  {
    return result;
  }
  *a2 = result;
  *a3 = v6;
  result = *a2;
  v19 = *a1;
  v20 = *(_QWORD *)(*a2 + 24);
  v21 = *(_QWORD *)(*a1 + 24);
  if (v20 == v21)
  {
    v22 = *(unsigned __int16 *)(v19 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v22) & 0x200) != 0)
    {
      if ((v22 & 0x200) == 0)
        return result;
    }
    else
    {
      v28 = *(unsigned __int8 *)(result + 37);
      v29 = *(unsigned __int8 *)(v19 + 37);
      if (v28 == v29)
      {
        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v19);
        if (!(_DWORD)result)
          return result;
        v19 = *a1;
        result = *a2;
      }
      else if (v28 >= v29)
      {
        return result;
      }
    }
LABEL_51:
    *a1 = result;
    *a2 = v19;
    return result;
  }
  if (v20 > v21)
    goto LABEL_51;
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  int v10;
  uint64_t *v11;
  __int128 **v12;
  uint64_t v13;
  int v14;
  __int128 *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  _QWORD *v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(_QWORD *)(v6 + 24);
      v9 = *(_QWORD *)(*a1 + 24);
      if (v8 == v9)
      {
        v10 = *(unsigned __int16 *)(v7 + 34);
        if (((*(unsigned __int16 *)(v6 + 34) ^ v10) & 0x200) != 0)
        {
          if ((v10 & 0x200) == 0)
            return 1;
        }
        else
        {
          v31 = *(unsigned __int8 *)(v6 + 37);
          v32 = *(unsigned __int8 *)(v7 + 37);
          if (v31 == v32)
          {
            if (!std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)v6, v7))
              return 1;
            v7 = *a1;
            v6 = *(a2 - 1);
          }
          else if (v31 >= v32)
          {
            return 1;
          }
        }
      }
      else if (v8 <= v9)
      {
        return 1;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v11 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a1 + 1, a1 + 2);
      v12 = (__int128 **)(a1 + 3);
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  do
  {
    v15 = *v12;
    v16 = *v11;
    v17 = *((_QWORD *)*v12 + 3);
    v18 = *(_QWORD *)(*v11 + 24);
    if (v17 == v18)
    {
      v19 = *(unsigned __int16 *)(v16 + 34);
      if (((*((unsigned __int16 *)v15 + 17) ^ v19) & 0x200) != 0)
      {
        if ((v19 & 0x200) == 0)
          goto LABEL_32;
      }
      else
      {
        v29 = *((unsigned __int8 *)v15 + 37);
        v30 = *(unsigned __int8 *)(v16 + 37);
        if (v29 == v30)
        {
          if (!std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(*v12, v16))
            goto LABEL_32;
          v15 = *v12;
          v16 = *v11;
        }
        else if (v29 >= v30)
        {
          goto LABEL_32;
        }
      }
    }
    else if (v17 <= v18)
    {
      goto LABEL_32;
    }
    *v12 = (__int128 *)v16;
    v20 = a1;
    if (v11 == a1)
      goto LABEL_31;
    v21 = v13;
    while (1)
    {
      v22 = (char *)a1 + v21;
      v23 = *(uint64_t *)((char *)a1 + v21 + 8);
      v24 = *((_QWORD *)v15 + 3);
      v25 = *(_QWORD *)(v23 + 24);
      if (v24 != v25)
      {
        if (v24 <= v25)
          goto LABEL_27;
        goto LABEL_21;
      }
      v26 = *(unsigned __int16 *)(v23 + 34);
      if (((*((unsigned __int16 *)v15 + 17) ^ v26) & 0x200) != 0)
      {
        if ((v26 & 0x200) == 0)
          goto LABEL_27;
        goto LABEL_21;
      }
      v27 = *((unsigned __int8 *)v15 + 37);
      v28 = *(unsigned __int8 *)(v23 + 37);
      if (v27 == v28)
        break;
      if (v27 >= v28)
      {
LABEL_27:
        v20 = v11;
        goto LABEL_31;
      }
LABEL_21:
      --v11;
      *((_QWORD *)v22 + 2) = v23;
      v21 -= 8;
      if (v21 == -16)
      {
        v20 = a1;
        goto LABEL_31;
      }
    }
    if (std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(v15, v23))
    {
      v23 = *((_QWORD *)v22 + 1);
      goto LABEL_21;
    }
    v20 = (uint64_t *)((char *)a1 + v21 + 16);
LABEL_31:
    *v20 = v15;
    if (++v14 == 8)
      return v12 + 1 == (__int128 **)a2;
LABEL_32:
    v11 = (uint64_t *)v12;
    v13 += 8;
    ++v12;
  }
  while (v12 != (__int128 **)a2);
  return 1;
}

uint64_t std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>(__int128 *a1, uint64_t a2)
{
  size_t v2;
  const void *v3;
  __int128 v5;

  if (!*(_BYTE *)(a2 + 16))
    return 0;
  if (!*((_BYTE *)a1 + 16))
    return 1;
  v3 = *(const void **)a2;
  v2 = *(_QWORD *)(a2 + 8);
  v5 = *a1;
  return llvm::StringRef::compare((uint64_t)&v5, v3, v2) >> 31;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;

  std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyRegularSymbols(void)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a2, a3);
  result = *a4;
  v9 = *a3;
  v10 = *(_QWORD *)(*a4 + 24);
  v11 = *(_QWORD *)(*a3 + 24);
  if (v10 == v11)
  {
    v12 = *(unsigned __int16 *)(v9 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v12) & 0x200) != 0)
    {
      if ((v12 & 0x200) == 0)
        return result;
    }
    else
    {
      v17 = *(unsigned __int8 *)(result + 37);
      v18 = *(unsigned __int8 *)(v9 + 37);
      if (v17 == v18)
      {
        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v9);
        if (!(_DWORD)result)
          return result;
        v9 = *a3;
        result = *a4;
      }
      else if (v17 >= v18)
      {
        return result;
      }
    }
  }
  else if (v10 <= v11)
  {
    return result;
  }
  *a3 = result;
  *a4 = v9;
  result = *a3;
  v13 = *a2;
  v14 = *(_QWORD *)(*a3 + 24);
  v15 = *(_QWORD *)(*a2 + 24);
  if (v14 == v15)
  {
    v16 = *(unsigned __int16 *)(v13 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v16) & 0x200) != 0)
    {
      if ((v16 & 0x200) == 0)
        return result;
    }
    else
    {
      v23 = *(unsigned __int8 *)(result + 37);
      v24 = *(unsigned __int8 *)(v13 + 37);
      if (v23 == v24)
      {
        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v13);
        if (!(_DWORD)result)
          return result;
        v13 = *a2;
        result = *a3;
      }
      else if (v23 >= v24)
      {
        return result;
      }
    }
  }
  else if (v14 <= v15)
  {
    return result;
  }
  *a2 = result;
  *a3 = v13;
  result = *a2;
  v19 = *a1;
  v20 = *(_QWORD *)(*a2 + 24);
  v21 = *(_QWORD *)(*a1 + 24);
  if (v20 == v21)
  {
    v22 = *(unsigned __int16 *)(v19 + 34);
    if (((*(unsigned __int16 *)(result + 34) ^ v22) & 0x200) != 0)
    {
      if ((v22 & 0x200) == 0)
        return result;
    }
    else
    {
      v25 = *(unsigned __int8 *)(result + 37);
      v26 = *(unsigned __int8 *)(v19 + 37);
      if (v25 == v26)
      {
        result = std::operator<[abi:nn180100]<llvm::StringRef,llvm::StringRef>((__int128 *)result, v19);
        if (!(_DWORD)result)
          return result;
        v19 = *a1;
        result = *a2;
      }
      else if (v25 >= v26)
      {
        return result;
      }
    }
LABEL_31:
    *a1 = result;
    *a2 = v19;
    return result;
  }
  if (v20 > v21)
    goto LABEL_31;
  return result;
}

uint64_t std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,false>(uint64_t result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v6;
  uint64_t *j;
  uint64_t *v8;
  uint64_t *i;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  __int128 *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned int v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  const void *v24;
  size_t v25;
  uint64_t k;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  const void *v35;
  size_t v36;
  uint64_t *v37;
  unint64_t v38;
  uint64_t *m;
  uint64_t v40;
  unint64_t v41;
  unint64_t v42;
  BOOL v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int v46;
  unsigned int v47;
  const void *v48;
  size_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unsigned int v53;
  unsigned int v54;
  const void *v55;
  size_t v56;
  int v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  __int128 *v61;
  unint64_t v62;
  unint64_t v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  const void *v69;
  size_t v70;
  __int128 *v71;
  __int128 *v72;
  unint64_t v73;
  unint64_t v74;
  BOOL v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  const void *v80;
  size_t v81;
  BOOL v82;
  uint64_t v83;
  unint64_t v84;
  BOOL v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  const void *v90;
  size_t v91;
  uint64_t v92;
  unint64_t v93;
  unint64_t v94;
  BOOL v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  unsigned int v99;
  const void *v100;
  size_t v101;
  uint64_t v102;
  unint64_t v103;
  unint64_t v104;
  BOOL v105;
  unsigned int v106;
  unsigned int v107;
  unsigned int v108;
  unsigned int v109;
  const void *v110;
  size_t v111;
  uint64_t v112;
  unint64_t v113;
  unint64_t v114;
  BOOL v115;
  unsigned int v116;
  unsigned int v117;
  unsigned int v118;
  unsigned int v119;
  const void *v120;
  size_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  unint64_t v125;
  BOOL v126;
  unsigned int v127;
  unsigned int v128;
  unsigned int v129;
  unsigned int v130;
  const void *v131;
  size_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  unint64_t v136;
  BOOL v137;
  unsigned int v138;
  unsigned int v139;
  unsigned int v140;
  unsigned int v141;
  const void *v142;
  size_t v143;
  uint64_t *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  unint64_t v148;
  BOOL v149;
  unsigned int v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  const void *v154;
  size_t v155;
  uint64_t *v156;
  BOOL v157;
  char v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  BOOL v166;
  unsigned int v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  const void *v171;
  size_t v172;
  uint64_t *v173;
  uint64_t v174;
  _QWORD *v175;
  uint64_t v176;
  unint64_t v177;
  unint64_t v178;
  unsigned int v179;
  unsigned int v180;
  BOOL v181;
  unsigned int v182;
  unsigned int v183;
  const void *v184;
  size_t v185;
  int64_t v186;
  int64_t v187;
  int64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  unint64_t v193;
  unint64_t v194;
  BOOL v195;
  unsigned int v196;
  unsigned int v197;
  unsigned int v198;
  unsigned int v199;
  const void *v200;
  size_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  unint64_t v205;
  BOOL v206;
  unsigned int v207;
  unsigned int v208;
  unsigned int v209;
  unsigned int v210;
  const void *v211;
  size_t v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  unint64_t v218;
  unint64_t v219;
  BOOL v220;
  unsigned int v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  const void *v225;
  size_t v226;
  uint64_t v227;
  unint64_t v228;
  unint64_t v229;
  BOOL v230;
  unsigned int v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  const void *v235;
  size_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t *v240;
  uint64_t *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t v246;
  unint64_t v247;
  BOOL v248;
  unsigned int v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  const void *v253;
  size_t v254;
  uint64_t *v255;
  uint64_t v256;
  unint64_t v257;
  unint64_t v258;
  uint64_t *v259;
  uint64_t v260;
  uint64_t v261;
  unint64_t v262;
  unint64_t v263;
  BOOL v264;
  unsigned int v265;
  unsigned int v266;
  unsigned int v267;
  unsigned int v268;
  const void *v269;
  size_t v270;
  uint64_t *v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  unint64_t v275;
  BOOL v276;
  unsigned int v277;
  unsigned int v278;
  unsigned int v279;
  unsigned int v280;
  const void *v281;
  size_t v282;
  uint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  unint64_t v286;
  unint64_t v287;
  BOOL v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  const void *v293;
  size_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  unint64_t v298;
  unint64_t v299;
  BOOL v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  unsigned int v304;
  const void *v305;
  size_t v306;
  __int128 v308;

  v6 = (uint64_t *)result;
LABEL_2:
  j = a2;
  v8 = a2 - 1;
  i = v6;
  while (2)
  {
    v6 = i;
    v10 = (char *)j - (char *)i;
    v11 = j - i;
    switch(v11)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v145 = *(a2 - 1);
        v146 = *v6;
        v147 = *(_QWORD *)(v145 + 24);
        v148 = *(_QWORD *)(*v6 + 24);
        v149 = v147 > v148;
        if (v147 == v148
          && (v150 = *(unsigned __int8 *)(v145 + 36),
              v151 = *(unsigned __int8 *)(v146 + 36),
              v149 = v150 > v151,
              v150 == v151)
          && (v152 = *(unsigned __int8 *)(v145 + 37),
              v153 = *(unsigned __int8 *)(v146 + 37),
              v149 = v152 > v153,
              v152 == v153))
        {
          if (!*(_BYTE *)(v146 + 16))
            return result;
          if (*(_BYTE *)(v145 + 16))
          {
            v154 = *(const void **)v146;
            v155 = *(_QWORD *)(v146 + 8);
            v308 = *(_OWORD *)v145;
            result = llvm::StringRef::compare((uint64_t)&v308, v154, v155);
            if ((int)result < 1)
              return result;
            v146 = *v6;
            v145 = *(a2 - 1);
          }
        }
        else if (!v149)
        {
          return result;
        }
        *v6 = v145;
        *(a2 - 1) = v146;
        return result;
      case 3:
        return std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)v6, v6 + 1, v8);
      case 4:
        return std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)v6, v6 + 1, v6 + 2, v8);
      case 5:
        return std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>((uint64_t)v6, v6 + 1, v6 + 2, v6 + 3, v8);
      default:
        if (v10 <= 191)
        {
          v156 = v6 + 1;
          v157 = v6 == j || v156 == j;
          v158 = v157;
          if ((a4 & 1) == 0)
          {
            if ((v158 & 1) != 0)
              return result;
            while (1)
            {
              v283 = v6;
              v6 = v156;
              v284 = *v283;
              v285 = v283[1];
              v286 = *(_QWORD *)(v285 + 24);
              v287 = *(_QWORD *)(*v283 + 24);
              v288 = v286 > v287;
              if (v286 == v287
                && (v289 = *(unsigned __int8 *)(v285 + 36),
                    v290 = *(unsigned __int8 *)(v284 + 36),
                    v288 = v289 > v290,
                    v289 == v290)
                && (v291 = *(unsigned __int8 *)(v285 + 37),
                    v292 = *(unsigned __int8 *)(v284 + 37),
                    v288 = v291 > v292,
                    v291 == v292))
              {
                if (*(_BYTE *)(v284 + 16))
                {
                  if (*(_BYTE *)(v285 + 16))
                  {
                    v293 = *(const void **)v284;
                    v294 = *(_QWORD *)(v284 + 8);
                    v308 = *(_OWORD *)v285;
                    result = llvm::StringRef::compare((uint64_t)&v308, v293, v294);
                    if ((int)result >= 1)
                    {
                      v285 = *v6;
                      goto LABEL_303;
                    }
                  }
                  else
                  {
                    while (1)
                    {
LABEL_303:
                      while (1)
                      {
                        v295 = v283;
                        v283[1] = *v283;
                        v297 = *--v283;
                        v296 = v297;
                        v298 = *(_QWORD *)(v285 + 24);
                        v299 = *(_QWORD *)(v297 + 24);
                        v300 = v298 > v299;
                        if (v298 == v299)
                        {
                          v301 = *(unsigned __int8 *)(v285 + 36);
                          v302 = *(unsigned __int8 *)(v296 + 36);
                          v300 = v301 > v302;
                          if (v301 == v302)
                          {
                            v303 = *(unsigned __int8 *)(v285 + 37);
                            v304 = *(unsigned __int8 *)(v296 + 37);
                            v300 = v303 > v304;
                            if (v303 == v304)
                              break;
                          }
                        }
                        if (!v300)
                          goto LABEL_311;
                      }
                      if (!*(_BYTE *)(v296 + 16))
                        break;
                      if (*(_BYTE *)(v285 + 16))
                      {
                        v305 = *(const void **)v296;
                        v306 = *(_QWORD *)(v296 + 8);
                        v308 = *(_OWORD *)v285;
                        result = llvm::StringRef::compare((uint64_t)&v308, v305, v306);
                        if ((int)result <= 0)
                          break;
                      }
                    }
LABEL_311:
                    *v295 = v285;
                  }
                }
              }
              else if (v288)
              {
                goto LABEL_303;
              }
              v156 = v6 + 1;
              if (v6 + 1 == a2)
                return result;
            }
          }
          if ((v158 & 1) != 0)
            return result;
          v159 = 0;
          v160 = v6;
LABEL_171:
          v161 = v160;
          v160 = v156;
          v162 = *v161;
          v163 = v161[1];
          v164 = *(_QWORD *)(v163 + 24);
          v165 = *(_QWORD *)(*v161 + 24);
          v166 = v164 > v165;
          if (v164 == v165
            && (v167 = *(unsigned __int8 *)(v163 + 36),
                v168 = *(unsigned __int8 *)(v162 + 36),
                v166 = v167 > v168,
                v167 == v168)
            && (v169 = *(unsigned __int8 *)(v163 + 37),
                v170 = *(unsigned __int8 *)(v162 + 37),
                v166 = v169 > v170,
                v169 == v170))
          {
            if (!*(_BYTE *)(v162 + 16))
              goto LABEL_197;
            if (*(_BYTE *)(v163 + 16))
            {
              v171 = *(const void **)v162;
              v172 = *(_QWORD *)(v162 + 8);
              v308 = *(_OWORD *)v163;
              result = llvm::StringRef::compare((uint64_t)&v308, v171, v172);
              if ((int)result < 1)
                goto LABEL_197;
              v163 = *v160;
              v162 = *v161;
            }
          }
          else if (!v166)
          {
            goto LABEL_197;
          }
          v161[1] = v162;
          v173 = v6;
          if (v161 == v6)
            goto LABEL_196;
          v174 = v159;
          while (1)
          {
            v175 = (uint64_t *)((char *)v6 + v174);
            v176 = *(uint64_t *)((char *)v6 + v174 - 8);
            v177 = *(_QWORD *)(v163 + 24);
            v178 = *(_QWORD *)(v176 + 24);
            if (v177 == v178)
            {
              v179 = *(unsigned __int8 *)(v163 + 36);
              v180 = *(unsigned __int8 *)(v176 + 36);
              v181 = v179 > v180;
              if (v179 == v180
                && (v182 = *(unsigned __int8 *)(v163 + 37),
                    v183 = *(unsigned __int8 *)(v176 + 37),
                    v181 = v182 > v183,
                    v182 == v183))
              {
                if (!*(_BYTE *)(v176 + 16))
                  goto LABEL_195;
                if (*(_BYTE *)(v163 + 16))
                {
                  v184 = *(const void **)v176;
                  v185 = *(_QWORD *)(v176 + 8);
                  v308 = *(_OWORD *)v163;
                  result = llvm::StringRef::compare((uint64_t)&v308, v184, v185);
                  if ((int)result < 1)
                    goto LABEL_195;
                  v176 = *(v175 - 1);
                }
              }
              else if (!v181)
              {
LABEL_195:
                v173 = v161;
LABEL_196:
                *v173 = v163;
LABEL_197:
                v156 = v160 + 1;
                v159 += 8;
                if (v160 + 1 == a2)
                  return result;
                goto LABEL_171;
              }
            }
            else if (v177 <= v178)
            {
              v173 = (uint64_t *)((char *)v6 + v174);
              goto LABEL_196;
            }
            --v161;
            *v175 = v176;
            v174 -= 8;
            if (!v174)
            {
              v173 = v6;
              goto LABEL_196;
            }
          }
        }
        if (!a3)
        {
          if (v6 == j)
            return result;
          v186 = (unint64_t)(v11 - 2) >> 1;
          v187 = v186;
          while (1)
          {
            v188 = v187;
            if (v186 < v187)
              goto LABEL_245;
            v189 = (2 * v187) | 1;
            v190 = &v6[v189];
            if (2 * v187 + 2 >= v11)
              goto LABEL_213;
            v191 = *v190;
            v192 = v190[1];
            v193 = *(_QWORD *)(*v190 + 24);
            v194 = *(_QWORD *)(v192 + 24);
            v195 = v193 > v194;
            if (v193 == v194)
            {
              v196 = *(unsigned __int8 *)(v191 + 36);
              v197 = *(unsigned __int8 *)(v192 + 36);
              v195 = v196 > v197;
              if (v196 == v197)
              {
                v198 = *(unsigned __int8 *)(v191 + 37);
                v199 = *(unsigned __int8 *)(v192 + 37);
                v195 = v198 > v199;
                if (v198 == v199)
                  break;
              }
            }
            if (v195)
              goto LABEL_212;
LABEL_213:
            v202 = *v190;
            v203 = v6[v188];
            v204 = *(_QWORD *)(*v190 + 24);
            v205 = *(_QWORD *)(v203 + 24);
            v206 = v204 > v205;
            if (v204 == v205
              && (v207 = *(unsigned __int8 *)(v202 + 36),
                  v208 = *(unsigned __int8 *)(v203 + 36),
                  v206 = v207 > v208,
                  v207 == v208)
              && (v209 = *(unsigned __int8 *)(v202 + 37),
                  v210 = *(unsigned __int8 *)(v203 + 37),
                  v206 = v209 > v210,
                  v209 == v210))
            {
              if (*(_BYTE *)(v203 + 16))
              {
                if (!*(_BYTE *)(v202 + 16))
                  goto LABEL_245;
                v211 = *(const void **)v203;
                v212 = *(_QWORD *)(v203 + 8);
                v308 = *(_OWORD *)v202;
                result = llvm::StringRef::compare((uint64_t)&v308, v211, v212);
                v186 = (unint64_t)(v11 - 2) >> 1;
                if ((int)result > 0)
                  goto LABEL_245;
                v203 = v6[v188];
                v202 = *v190;
              }
            }
            else if (v206)
            {
              goto LABEL_245;
            }
            v6[v188] = v202;
            while (1)
            {
              if (v186 < v189)
                goto LABEL_244;
              v213 = v190;
              v214 = 2 * v189;
              v189 = (2 * v189) | 1;
              v190 = &v6[v189];
              v215 = v214 + 2;
              if (v214 + 2 < v11)
              {
                v216 = *v190;
                v217 = v190[1];
                v218 = *(_QWORD *)(*v190 + 24);
                v219 = *(_QWORD *)(v217 + 24);
                v220 = v218 > v219;
                if (v218 != v219
                  || (v221 = *(unsigned __int8 *)(v216 + 36),
                      v222 = *(unsigned __int8 *)(v217 + 36),
                      v220 = v221 > v222,
                      v221 != v222)
                  || (v223 = *(unsigned __int8 *)(v216 + 37),
                      v224 = *(unsigned __int8 *)(v217 + 37),
                      v220 = v223 > v224,
                      v223 != v224))
                {
                  if (!v220)
                    goto LABEL_234;
LABEL_233:
                  ++v190;
                  v189 = v215;
                  goto LABEL_234;
                }
                if (*(_BYTE *)(v217 + 16))
                {
                  if (!*(_BYTE *)(v216 + 16))
                    goto LABEL_233;
                  v225 = *(const void **)v217;
                  v226 = *(_QWORD *)(v217 + 8);
                  v308 = *(_OWORD *)v216;
                  result = llvm::StringRef::compare((uint64_t)&v308, v225, v226);
                  v186 = (unint64_t)(v11 - 2) >> 1;
                  if ((int)result >= 1)
                    goto LABEL_233;
                }
              }
LABEL_234:
              v227 = *v190;
              v228 = *(_QWORD *)(*v190 + 24);
              v229 = *(_QWORD *)(v203 + 24);
              v230 = v228 > v229;
              if (v228 == v229)
              {
                v231 = *(unsigned __int8 *)(v227 + 36);
                v232 = *(unsigned __int8 *)(v203 + 36);
                v230 = v231 > v232;
                if (v231 == v232)
                {
                  v233 = *(unsigned __int8 *)(v227 + 37);
                  v234 = *(unsigned __int8 *)(v203 + 37);
                  v230 = v233 > v234;
                  if (v233 == v234)
                    break;
                }
              }
              if (v230)
              {
LABEL_243:
                v190 = v213;
                goto LABEL_244;
              }
LABEL_242:
              *v213 = v227;
            }
            if (!*(_BYTE *)(v203 + 16))
              goto LABEL_242;
            if (!*(_BYTE *)(v227 + 16))
              goto LABEL_243;
            v235 = *(const void **)v203;
            v236 = *(_QWORD *)(v203 + 8);
            v308 = *(_OWORD *)v227;
            result = llvm::StringRef::compare((uint64_t)&v308, v235, v236);
            if ((int)result <= 0)
            {
              v227 = *v190;
              v186 = (unint64_t)(v11 - 2) >> 1;
              goto LABEL_242;
            }
            v190 = v213;
            v186 = (unint64_t)(v11 - 2) >> 1;
LABEL_244:
            *v190 = v203;
LABEL_245:
            v187 = v188 - 1;
            if (!v188)
            {
              v237 = (unint64_t)v10 >> 3;
              while (1)
              {
                v238 = 0;
                v239 = *v6;
                v240 = v6;
                do
                {
                  v241 = v240;
                  v240 += v238 + 1;
                  v242 = 2 * v238;
                  v238 = (2 * v238) | 1;
                  v243 = v242 + 2;
                  if (v242 + 2 >= v237)
                    goto LABEL_263;
                  v244 = *v240;
                  v245 = v240[1];
                  v246 = *(_QWORD *)(*v240 + 24);
                  v247 = *(_QWORD *)(v245 + 24);
                  v248 = v246 > v247;
                  if (v246 == v247
                    && (v249 = *(unsigned __int8 *)(v244 + 36),
                        v250 = *(unsigned __int8 *)(v245 + 36),
                        v248 = v249 > v250,
                        v249 == v250)
                    && (v251 = *(unsigned __int8 *)(v244 + 37),
                        v252 = *(unsigned __int8 *)(v245 + 37),
                        v248 = v251 > v252,
                        v251 == v252))
                  {
                    if (*(_BYTE *)(v245 + 16))
                    {
                      if (!*(_BYTE *)(v244 + 16)
                        || (v253 = *(const void **)v245,
                            v254 = *(_QWORD *)(v245 + 8),
                            v308 = *(_OWORD *)v244,
                            result = llvm::StringRef::compare((uint64_t)&v308, v253, v254),
                            (int)result >= 1))
                      {
LABEL_262:
                        ++v240;
                        v238 = v243;
                      }
                    }
                  }
                  else if (v248)
                  {
                    goto LABEL_262;
                  }
LABEL_263:
                  *v241 = *v240;
                }
                while (v238 <= (uint64_t)((unint64_t)(v237 - 2) >> 1));
                v255 = a2 - 1;
                v157 = v240 == --a2;
                if (v157)
                {
                  *v240 = v239;
                  goto LABEL_290;
                }
                *v240 = *v255;
                *v255 = v239;
                v256 = (char *)v240 - (char *)v6 + 8;
                if (v256 >= 9)
                {
                  v257 = ((unint64_t)v256 >> 3) - 2;
                  v258 = v257 >> 1;
                  v259 = &v6[v257 >> 1];
                  v260 = *v259;
                  v261 = *v240;
                  v262 = *(_QWORD *)(*v259 + 24);
                  v263 = *(_QWORD *)(*v240 + 24);
                  v264 = v262 > v263;
                  if (v262 == v263
                    && (v265 = *(unsigned __int8 *)(v260 + 36),
                        v266 = *(unsigned __int8 *)(v261 + 36),
                        v264 = v265 > v266,
                        v265 == v266)
                    && (v267 = *(unsigned __int8 *)(v260 + 37),
                        v268 = *(unsigned __int8 *)(v261 + 37),
                        v264 = v267 > v268,
                        v267 == v268))
                  {
                    if (!*(_BYTE *)(v261 + 16))
                      goto LABEL_290;
                    if (*(_BYTE *)(v260 + 16))
                    {
                      v269 = *(const void **)v261;
                      v270 = *(_QWORD *)(v261 + 8);
                      v308 = *(_OWORD *)v260;
                      result = llvm::StringRef::compare((uint64_t)&v308, v269, v270);
                      if ((int)result < 1)
                        goto LABEL_290;
                      v261 = *v240;
                      v260 = *v259;
                    }
                  }
                  else if (!v264)
                  {
                    goto LABEL_290;
                  }
                  *v240 = v260;
                  if (v257 < 2)
                    goto LABEL_289;
                  while (1)
                  {
                    v271 = v259;
                    v272 = v258 - 1;
                    v258 = (v258 - 1) >> 1;
                    v259 = &v6[v258];
                    v273 = *v259;
                    v274 = *(_QWORD *)(*v259 + 24);
                    v275 = *(_QWORD *)(v261 + 24);
                    v276 = v274 > v275;
                    if (v274 == v275
                      && (v277 = *(unsigned __int8 *)(v273 + 36),
                          v278 = *(unsigned __int8 *)(v261 + 36),
                          v276 = v277 > v278,
                          v277 == v278)
                      && (v279 = *(unsigned __int8 *)(v273 + 37),
                          v280 = *(unsigned __int8 *)(v261 + 37),
                          v276 = v279 > v280,
                          v279 == v280))
                    {
                      if (!*(_BYTE *)(v261 + 16))
                        goto LABEL_288;
                      if (*(_BYTE *)(v273 + 16))
                      {
                        v281 = *(const void **)v261;
                        v282 = *(_QWORD *)(v261 + 8);
                        v308 = *(_OWORD *)v273;
                        result = llvm::StringRef::compare((uint64_t)&v308, v281, v282);
                        if ((int)result < 1)
                          goto LABEL_288;
                        v273 = *v259;
                      }
                    }
                    else if (!v276)
                    {
LABEL_288:
                      v259 = v271;
LABEL_289:
                      *v259 = v261;
                      break;
                    }
                    *v271 = v273;
                    if (v272 < 2)
                      goto LABEL_289;
                  }
                }
LABEL_290:
                v21 = v237-- <= 2;
                if (v21)
                  return result;
              }
            }
          }
          if (!*(_BYTE *)(v192 + 16))
            goto LABEL_213;
          if (*(_BYTE *)(v191 + 16))
          {
            v200 = *(const void **)v192;
            v201 = *(_QWORD *)(v192 + 8);
            v308 = *(_OWORD *)v191;
            result = llvm::StringRef::compare((uint64_t)&v308, v200, v201);
            v186 = (unint64_t)(v11 - 2) >> 1;
            if ((int)result < 1)
              goto LABEL_213;
          }
LABEL_212:
          ++v190;
          v189 = 2 * v188 + 2;
          goto LABEL_213;
        }
        v12 = (unint64_t)v11 >> 1;
        v13 = &v6[(unint64_t)v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)v13, v6, v8);
        }
        else
        {
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)v6, v13, v8);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)(v6 + 1), v13 - 1, a2 - 2);
          std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)(v6 + 2), &v6[v12 + 1], a2 - 3);
          result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)(v13 - 1), v13, &v6[v12 + 1]);
          v14 = *v6;
          *v6 = *v13;
          *v13 = v14;
        }
        --a3;
        v15 = *v6;
        if ((a4 & 1) == 0)
        {
          v16 = (__int128 *)*(v6 - 1);
          v17 = *((_QWORD *)v16 + 3);
          v18 = *(_QWORD *)(v15 + 24);
          if (v17 == v18)
          {
            v19 = *((unsigned __int8 *)v16 + 36);
            v20 = *(unsigned __int8 *)(v15 + 36);
            v21 = v19 > v20;
            if (v19 == v20
              && (v22 = *((unsigned __int8 *)v16 + 37), v23 = *(unsigned __int8 *)(v15 + 37),
                                                        v21 = v22 > v23,
                                                        v22 == v23))
            {
              if (*(_BYTE *)(v15 + 16))
              {
                if (!*((_BYTE *)v16 + 16))
                  goto LABEL_21;
                v24 = *(const void **)v15;
                v25 = *(_QWORD *)(v15 + 8);
                v308 = *v16;
                result = llvm::StringRef::compare((uint64_t)&v308, v24, v25);
                v15 = *v6;
                if ((int)result > 0)
                  goto LABEL_21;
                v17 = *(_QWORD *)(v15 + 24);
              }
            }
            else if (v21)
            {
              goto LABEL_21;
            }
          }
          else
          {
            if (v17 > v18)
              goto LABEL_21;
            v17 = *(_QWORD *)(v15 + 24);
          }
          v83 = *v8;
          v84 = *(_QWORD *)(*v8 + 24);
          v85 = v17 > v84;
          if (v17 == v84
            && (v86 = *(unsigned __int8 *)(v15 + 36), v87 = *(unsigned __int8 *)(v83 + 36), v85 = v86 > v87, v86 == v87)
            && (v88 = *(unsigned __int8 *)(v15 + 37), v89 = *(unsigned __int8 *)(v83 + 37), v85 = v88 > v89, v88 == v89))
          {
            if (*(_BYTE *)(v83 + 16))
            {
              if (!*(_BYTE *)(v15 + 16)
                || (v90 = *(const void **)v83,
                    v91 = *(_QWORD *)(v83 + 8),
                    v308 = *(_OWORD *)v15,
                    result = llvm::StringRef::compare((uint64_t)&v308, v90, v91),
                    (int)result >= 1))
              {
LABEL_93:
                for (i = v6 + 1; ; ++i)
                {
                  v92 = *i;
                  v93 = *(_QWORD *)(v15 + 24);
                  v94 = *(_QWORD *)(*i + 24);
                  v95 = v93 > v94;
                  if (v93 == v94
                    && (v96 = *(unsigned __int8 *)(v15 + 36),
                        v97 = *(unsigned __int8 *)(v92 + 36),
                        v95 = v96 > v97,
                        v96 == v97)
                    && (v98 = *(unsigned __int8 *)(v15 + 37),
                        v99 = *(unsigned __int8 *)(v92 + 37),
                        v95 = v98 > v99,
                        v98 == v99))
                  {
                    if (*(_BYTE *)(v92 + 16))
                    {
                      if (!*(_BYTE *)(v15 + 16))
                        goto LABEL_115;
                      v100 = *(const void **)v92;
                      v101 = *(_QWORD *)(v92 + 8);
                      v308 = *(_OWORD *)v15;
                      result = llvm::StringRef::compare((uint64_t)&v308, v100, v101);
                      if ((int)result > 0)
                        goto LABEL_115;
                    }
                  }
                  else if (v95)
                  {
                    goto LABEL_115;
                  }
                }
              }
            }
          }
          else if (v85)
          {
            goto LABEL_93;
          }
          for (i = v6 + 1; i < j; ++i)
          {
            v102 = *i;
            v103 = *(_QWORD *)(v15 + 24);
            v104 = *(_QWORD *)(*i + 24);
            v105 = v103 > v104;
            if (v103 == v104
              && (v106 = *(unsigned __int8 *)(v15 + 36),
                  v107 = *(unsigned __int8 *)(v102 + 36),
                  v105 = v106 > v107,
                  v106 == v107)
              && (v108 = *(unsigned __int8 *)(v15 + 37),
                  v109 = *(unsigned __int8 *)(v102 + 37),
                  v105 = v108 > v109,
                  v108 == v109))
            {
              if (*(_BYTE *)(v102 + 16))
              {
                if (!*(_BYTE *)(v15 + 16))
                  break;
                v110 = *(const void **)v102;
                v111 = *(_QWORD *)(v102 + 8);
                v308 = *(_OWORD *)v15;
                result = llvm::StringRef::compare((uint64_t)&v308, v110, v111);
                if ((int)result >= 1)
                  break;
              }
            }
            else if (v105)
            {
              break;
            }
          }
LABEL_115:
          if (i >= j)
            goto LABEL_145;
          for (j = a2 - 1; ; --j)
          {
            v112 = *j;
            v113 = *(_QWORD *)(v15 + 24);
            v114 = *(_QWORD *)(*j + 24);
            v115 = v113 > v114;
            if (v113 == v114)
            {
              v116 = *(unsigned __int8 *)(v15 + 36);
              v117 = *(unsigned __int8 *)(v112 + 36);
              v115 = v116 > v117;
              if (v116 == v117)
              {
                v118 = *(unsigned __int8 *)(v15 + 37);
                v119 = *(unsigned __int8 *)(v112 + 37);
                v115 = v118 > v119;
                if (v118 == v119)
                  break;
              }
            }
            if (!v115)
              goto LABEL_145;
LABEL_126:
            ;
          }
          if (*(_BYTE *)(v112 + 16))
          {
            if (!*(_BYTE *)(v15 + 16))
              goto LABEL_126;
            v120 = *(const void **)v112;
            v121 = *(_QWORD *)(v112 + 8);
            v308 = *(_OWORD *)v15;
            result = llvm::StringRef::compare((uint64_t)&v308, v120, v121);
            if ((int)result >= 1)
              goto LABEL_126;
          }
LABEL_145:
          while (i < j)
          {
            v122 = *i;
            *i++ = *j;
            *j = v122;
            while (1)
            {
              v123 = *i;
              v124 = *(_QWORD *)(v15 + 24);
              v125 = *(_QWORD *)(*i + 24);
              v126 = v124 > v125;
              if (v124 == v125)
              {
                v127 = *(unsigned __int8 *)(v15 + 36);
                v128 = *(unsigned __int8 *)(v123 + 36);
                v126 = v127 > v128;
                if (v127 == v128)
                {
                  v129 = *(unsigned __int8 *)(v15 + 37);
                  v130 = *(unsigned __int8 *)(v123 + 37);
                  v126 = v129 > v130;
                  if (v129 == v130)
                    break;
                }
              }
              if (v126)
                goto LABEL_139;
LABEL_136:
              ++i;
            }
            if (!*(_BYTE *)(v123 + 16))
              goto LABEL_136;
            if (*(_BYTE *)(v15 + 16))
            {
              v131 = *(const void **)v123;
              v132 = *(_QWORD *)(v123 + 8);
              v308 = *(_OWORD *)v15;
              result = llvm::StringRef::compare((uint64_t)&v308, v131, v132);
              if ((int)result <= 0)
                goto LABEL_136;
            }
            while (1)
            {
LABEL_139:
              while (1)
              {
                v134 = *--j;
                v133 = v134;
                v135 = *(_QWORD *)(v15 + 24);
                v136 = *(_QWORD *)(v134 + 24);
                v137 = v135 > v136;
                if (v135 == v136)
                {
                  v138 = *(unsigned __int8 *)(v15 + 36);
                  v139 = *(unsigned __int8 *)(v133 + 36);
                  v137 = v138 > v139;
                  if (v138 == v139)
                  {
                    v140 = *(unsigned __int8 *)(v15 + 37);
                    v141 = *(unsigned __int8 *)(v133 + 37);
                    v137 = v140 > v141;
                    if (v140 == v141)
                      break;
                  }
                }
                if (!v137)
                  goto LABEL_145;
              }
              if (!*(_BYTE *)(v133 + 16))
                break;
              if (*(_BYTE *)(v15 + 16))
              {
                v142 = *(const void **)v133;
                v143 = *(_QWORD *)(v133 + 8);
                v308 = *(_OWORD *)v15;
                result = llvm::StringRef::compare((uint64_t)&v308, v142, v143);
                if ((int)result < 1)
                  break;
              }
            }
          }
          v144 = i - 1;
          if (i - 1 != v6)
            *v6 = *v144;
          a4 = 0;
          *v144 = v15;
          j = a2;
          continue;
        }
LABEL_21:
        for (k = 0; ; ++k)
        {
          v27 = v6[k + 1];
          v28 = *(_QWORD *)(v27 + 24);
          v29 = *(_QWORD *)(v15 + 24);
          v30 = v28 > v29;
          if (v28 == v29)
          {
            v31 = *(unsigned __int8 *)(v27 + 36);
            v32 = *(unsigned __int8 *)(v15 + 36);
            v30 = v31 > v32;
            if (v31 == v32)
            {
              v33 = *(unsigned __int8 *)(v27 + 37);
              v34 = *(unsigned __int8 *)(v15 + 37);
              v30 = v33 > v34;
              if (v33 == v34)
                break;
            }
          }
          if (!v30)
            goto LABEL_32;
LABEL_31:
          ;
        }
        if (*(_BYTE *)(v15 + 16))
        {
          if (!*(_BYTE *)(v27 + 16))
            goto LABEL_31;
          v35 = *(const void **)v15;
          v36 = *(_QWORD *)(v15 + 8);
          v308 = *(_OWORD *)v27;
          if ((int)llvm::StringRef::compare((uint64_t)&v308, v35, v36) >= 1)
            goto LABEL_31;
        }
LABEL_32:
        v37 = &v6[k];
        v38 = (unint64_t)&v6[k + 1];
        m = a2 - 1;
        if (k * 8)
        {
          while (1)
          {
            v40 = *m;
            v41 = *(_QWORD *)(*m + 24);
            v42 = *(_QWORD *)(v15 + 24);
            v43 = v41 > v42;
            if (v41 == v42
              && (v44 = *(unsigned __int8 *)(v40 + 36), v45 = *(unsigned __int8 *)(v15 + 36),
                                                        v43 = v44 > v45,
                                                        v44 == v45)
              && (v46 = *(unsigned __int8 *)(v40 + 37), v47 = *(unsigned __int8 *)(v15 + 37),
                                                        v43 = v46 > v47,
                                                        v46 == v47))
            {
              if (*(_BYTE *)(v15 + 16))
              {
                if (!*(_BYTE *)(v40 + 16))
                  goto LABEL_59;
                v48 = *(const void **)v15;
                v49 = *(_QWORD *)(v15 + 8);
                v308 = *(_OWORD *)v40;
                if ((int)llvm::StringRef::compare((uint64_t)&v308, v48, v49) > 0)
                  goto LABEL_59;
              }
            }
            else if (v43)
            {
              goto LABEL_59;
            }
            --m;
          }
        }
        m = j;
        if (v38 < (unint64_t)j)
        {
          for (m = a2 - 1; ; --m)
          {
            v50 = *m;
            v51 = *(_QWORD *)(*m + 24);
            v52 = *(_QWORD *)(v15 + 24);
            if (v51 == v52)
            {
              v53 = *(unsigned __int8 *)(v50 + 36);
              v54 = *(unsigned __int8 *)(v15 + 36);
              if (v53 == v54
                && (v53 = *(unsigned __int8 *)(v50 + 37), v54 = *(unsigned __int8 *)(v15 + 37), v53 == v54))
              {
                if (*(_BYTE *)(v15 + 16))
                {
                  if (!*(_BYTE *)(v50 + 16))
                    break;
                  v55 = *(const void **)v15;
                  v56 = *(_QWORD *)(v15 + 8);
                  v308 = *(_OWORD *)v50;
                  v57 = llvm::StringRef::compare((uint64_t)&v308, v55, v56);
                  if (v38 >= (unint64_t)m || v57 > 0)
                    break;
                }
                else if (v38 >= (unint64_t)m)
                {
                  break;
                }
              }
              else if (v38 >= (unint64_t)m || v53 > v54)
              {
                break;
              }
            }
            else if (v38 >= (unint64_t)m || v51 > v52)
            {
              break;
            }
          }
        }
LABEL_59:
        if (v38 >= (unint64_t)m)
          goto LABEL_81;
        v58 = (unint64_t)&v6[k + 1];
        v59 = m;
        while (2)
        {
          v60 = *(_QWORD *)v58;
          *(_QWORD *)v58 = *v59;
          v58 += 8;
          *v59 = v60;
          while (2)
          {
            v61 = *(__int128 **)v58;
            v62 = *(_QWORD *)(*(_QWORD *)v58 + 24);
            v63 = *(_QWORD *)(v15 + 24);
            v64 = v62 > v63;
            if (v62 != v63
              || (v65 = *((unsigned __int8 *)v61 + 36), v66 = *(unsigned __int8 *)(v15 + 36),
                                                        v64 = v65 > v66,
                                                        v65 != v66)
              || (v67 = *((unsigned __int8 *)v61 + 37), v68 = *(unsigned __int8 *)(v15 + 37),
                                                        v64 = v67 > v68,
                                                        v67 != v68))
            {
              if (!v64)
                goto LABEL_73;
LABEL_71:
              v58 += 8;
              continue;
            }
            break;
          }
          if (*(_BYTE *)(v15 + 16))
          {
            if (!*((_BYTE *)v61 + 16))
              goto LABEL_71;
            v69 = *(const void **)v15;
            v70 = *(_QWORD *)(v15 + 8);
            v308 = *v61;
            if ((int)llvm::StringRef::compare((uint64_t)&v308, v69, v70) >= 1)
              goto LABEL_71;
          }
          while (1)
          {
LABEL_73:
            while (1)
            {
              v72 = (__int128 *)*--v59;
              v71 = v72;
              v73 = *((_QWORD *)v72 + 3);
              v74 = *(_QWORD *)(v15 + 24);
              v75 = v73 > v74;
              if (v73 == v74)
              {
                v76 = *((unsigned __int8 *)v71 + 36);
                v77 = *(unsigned __int8 *)(v15 + 36);
                v75 = v76 > v77;
                if (v76 == v77)
                {
                  v78 = *((unsigned __int8 *)v71 + 37);
                  v79 = *(unsigned __int8 *)(v15 + 37);
                  v75 = v78 > v79;
                  if (v78 == v79)
                    break;
                }
              }
              if (v75)
                goto LABEL_79;
            }
            if (*(_BYTE *)(v15 + 16))
            {
              if (!*((_BYTE *)v71 + 16))
                break;
              v80 = *(const void **)v15;
              v81 = *(_QWORD *)(v15 + 8);
              v308 = *v71;
              if ((int)llvm::StringRef::compare((uint64_t)&v308, v80, v81) > 0)
                break;
            }
          }
LABEL_79:
          if (v58 < (unint64_t)v59)
            continue;
          break;
        }
        v37 = (uint64_t *)(v58 - 8);
        j = a2;
LABEL_81:
        if (v37 != v6)
          *v6 = *v37;
        *v37 = v15;
        if (v38 < (unint64_t)m)
        {
LABEL_86:
          result = std::__introsort<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,false>(v6, v37, a3, a4 & 1);
          a4 = 0;
          i = v37 + 1;
          continue;
        }
        v82 = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v6, v37);
        i = v37 + 1;
        result = std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(v37 + 1, j);
        if (!(_DWORD)result)
        {
          if (v82)
            continue;
          goto LABEL_86;
        }
        a2 = v37;
        if (!v82)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  BOOL v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;
  const void *v20;
  size_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  BOOL v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  const void *v31;
  size_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  BOOL v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  const void *v42;
  size_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  BOOL v48;
  unsigned int v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  const void *v53;
  size_t v54;
  __int128 v55;

  result = std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a2, a3, a4);
  v11 = *a5;
  v12 = *a4;
  v13 = *(_QWORD *)(*a5 + 24);
  v14 = *(_QWORD *)(*a4 + 24);
  v15 = v13 > v14;
  if (v13 == v14
    && (v16 = *(unsigned __int8 *)(v11 + 36), v17 = *(unsigned __int8 *)(v12 + 36), v15 = v16 > v17, v16 == v17)
    && (v18 = *(unsigned __int8 *)(v11 + 37), v19 = *(unsigned __int8 *)(v12 + 37), v15 = v18 > v19, v18 == v19))
  {
    if (!*(_BYTE *)(v12 + 16))
      return result;
    if (*(_BYTE *)(v11 + 16))
    {
      v20 = *(const void **)v12;
      v21 = *(_QWORD *)(v12 + 8);
      v55 = *(_OWORD *)v11;
      result = llvm::StringRef::compare((uint64_t)&v55, v20, v21);
      if ((int)result < 1)
        return result;
      v12 = *a4;
      v11 = *a5;
    }
  }
  else if (!v15)
  {
    return result;
  }
  *a4 = v11;
  *a5 = v12;
  v22 = *a4;
  v23 = *a3;
  v24 = *(_QWORD *)(*a4 + 24);
  v25 = *(_QWORD *)(*a3 + 24);
  v26 = v24 > v25;
  if (v24 == v25
    && (v27 = *(unsigned __int8 *)(v22 + 36), v28 = *(unsigned __int8 *)(v23 + 36), v26 = v27 > v28, v27 == v28)
    && (v29 = *(unsigned __int8 *)(v22 + 37), v30 = *(unsigned __int8 *)(v23 + 37), v26 = v29 > v30, v29 == v30))
  {
    if (!*(_BYTE *)(v23 + 16))
      return result;
    if (*(_BYTE *)(v22 + 16))
    {
      v31 = *(const void **)v23;
      v32 = *(_QWORD *)(v23 + 8);
      v55 = *(_OWORD *)v22;
      result = llvm::StringRef::compare((uint64_t)&v55, v31, v32);
      if ((int)result < 1)
        return result;
      v23 = *a3;
      v22 = *a4;
    }
  }
  else if (!v26)
  {
    return result;
  }
  *a3 = v22;
  *a4 = v23;
  v33 = *a3;
  v34 = *a2;
  v35 = *(_QWORD *)(*a3 + 24);
  v36 = *(_QWORD *)(*a2 + 24);
  v37 = v35 > v36;
  if (v35 == v36
    && (v38 = *(unsigned __int8 *)(v33 + 36), v39 = *(unsigned __int8 *)(v34 + 36), v37 = v38 > v39, v38 == v39)
    && (v40 = *(unsigned __int8 *)(v33 + 37), v41 = *(unsigned __int8 *)(v34 + 37), v37 = v40 > v41, v40 == v41))
  {
    if (!*(_BYTE *)(v34 + 16))
      return result;
    if (*(_BYTE *)(v33 + 16))
    {
      v42 = *(const void **)v34;
      v43 = *(_QWORD *)(v34 + 8);
      v55 = *(_OWORD *)v33;
      result = llvm::StringRef::compare((uint64_t)&v55, v42, v43);
      if ((int)result < 1)
        return result;
      v34 = *a2;
      v33 = *a3;
    }
  }
  else if (!v37)
  {
    return result;
  }
  *a2 = v33;
  *a3 = v34;
  v44 = *a2;
  v45 = *(_QWORD *)a1;
  v46 = *(_QWORD *)(*a2 + 24);
  v47 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v48 = v46 > v47;
  if (v46 == v47)
  {
    v49 = *(unsigned __int8 *)(v44 + 36);
    v50 = *(unsigned __int8 *)(v45 + 36);
    v48 = v49 > v50;
    if (v49 == v50)
    {
      v51 = *(unsigned __int8 *)(v44 + 37);
      v52 = *(unsigned __int8 *)(v45 + 37);
      v48 = v51 > v52;
      if (v51 == v52)
      {
        if (!*(_BYTE *)(v45 + 16))
          return result;
        if (*(_BYTE *)(v44 + 16))
        {
          v53 = *(const void **)v45;
          v54 = *(_QWORD *)(v45 + 8);
          v55 = *(_OWORD *)v44;
          result = llvm::StringRef::compare((uint64_t)&v55, v53, v54);
          if ((int)result < 1)
            return result;
          v45 = *(_QWORD *)a1;
          v44 = *a2;
        }
        goto LABEL_37;
      }
    }
  }
  if (v48)
  {
LABEL_37:
    *(_QWORD *)a1 = v44;
    *a2 = v45;
  }
  return result;
}

uint64_t std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  __int128 *v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  const void *v15;
  size_t v16;
  __int128 *v17;
  unint64_t v18;
  BOOL v19;
  unsigned int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  const void *v24;
  size_t v25;
  __int128 *v26;
  unint64_t v27;
  BOOL v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unsigned int v32;
  const void *v33;
  size_t v34;
  __int128 *v35;
  __int128 *v36;
  unint64_t v37;
  unint64_t v38;
  BOOL v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  const void *v44;
  size_t v45;
  __int128 *v46;
  __int128 *v47;
  __int128 *v48;
  unint64_t v49;
  unint64_t v50;
  BOOL v51;
  unsigned int v52;
  unsigned int v53;
  unsigned int v54;
  unsigned int v55;
  const void *v56;
  size_t v57;
  __int128 v58;

  v5 = result;
  v6 = (__int128 *)*a2;
  v7 = *(_QWORD *)result;
  v8 = *(_QWORD *)(*a2 + 24);
  v9 = *(_QWORD *)(*(_QWORD *)result + 24);
  v10 = v8 > v9;
  if (v8 == v9)
  {
    v11 = *((unsigned __int8 *)v6 + 36);
    v12 = *(unsigned __int8 *)(v7 + 36);
    v10 = v11 > v12;
    if (v11 == v12)
    {
      v13 = *((unsigned __int8 *)v6 + 37);
      v14 = *(unsigned __int8 *)(v7 + 37);
      v10 = v13 > v14;
      if (v13 == v14)
      {
        if (*(_BYTE *)(v7 + 16))
        {
          if (!*((_BYTE *)v6 + 16))
            goto LABEL_7;
          v15 = *(const void **)v7;
          v16 = *(_QWORD *)(v7 + 8);
          v58 = *v6;
          result = llvm::StringRef::compare((uint64_t)&v58, v15, v16);
          v6 = (__int128 *)*a2;
          v8 = *(_QWORD *)(*a2 + 24);
          if ((int)result > 0)
            goto LABEL_7;
        }
LABEL_15:
        v26 = (__int128 *)*a3;
        v27 = *(_QWORD *)(*a3 + 24);
        v28 = v27 > v8;
        if (v27 == v8
          && (v29 = *((unsigned __int8 *)v26 + 36), v30 = *((unsigned __int8 *)v6 + 36), v28 = v29 > v30, v29 == v30)
          && (v31 = *((unsigned __int8 *)v26 + 37), v32 = *((unsigned __int8 *)v6 + 37), v28 = v31 > v32, v31 == v32))
        {
          if (!*((_BYTE *)v6 + 16))
            return result;
          if (*((_BYTE *)v26 + 16))
          {
            v33 = *(const void **)v6;
            v34 = *((_QWORD *)v6 + 1);
            v58 = *v26;
            result = llvm::StringRef::compare((uint64_t)&v58, v33, v34);
            if ((int)result < 1)
              return result;
            v6 = (__int128 *)*a2;
            v26 = (__int128 *)*a3;
          }
        }
        else if (!v28)
        {
          return result;
        }
        *a2 = (uint64_t)v26;
        *a3 = (uint64_t)v6;
        v35 = (__int128 *)*a2;
        v36 = *(__int128 **)v5;
        v37 = *(_QWORD *)(*a2 + 24);
        v38 = *(_QWORD *)(*(_QWORD *)v5 + 24);
        v39 = v37 > v38;
        if (v37 == v38
          && (v40 = *((unsigned __int8 *)v35 + 36), v41 = *((unsigned __int8 *)v36 + 36), v39 = v40 > v41, v40 == v41)
          && (v42 = *((unsigned __int8 *)v35 + 37), v43 = *((unsigned __int8 *)v36 + 37), v39 = v42 > v43, v42 == v43))
        {
          if (!*((_BYTE *)v36 + 16))
            return result;
          if (*((_BYTE *)v35 + 16))
          {
            v44 = *(const void **)v36;
            v45 = *((_QWORD *)v36 + 1);
            v58 = *v35;
            result = llvm::StringRef::compare((uint64_t)&v58, v44, v45);
            if ((int)result < 1)
              return result;
            v36 = *(__int128 **)v5;
            v35 = (__int128 *)*a2;
          }
        }
        else if (!v39)
        {
          return result;
        }
        *(_QWORD *)v5 = v35;
        *a2 = (uint64_t)v36;
        return result;
      }
    }
  }
  if (!v10)
    goto LABEL_15;
LABEL_7:
  v17 = (__int128 *)*a3;
  v18 = *(_QWORD *)(*a3 + 24);
  v19 = v18 > v8;
  if (v18 == v8
    && (v20 = *((unsigned __int8 *)v17 + 36), v21 = *((unsigned __int8 *)v6 + 36), v19 = v20 > v21, v20 == v21)
    && (v22 = *((unsigned __int8 *)v17 + 37), v23 = *((unsigned __int8 *)v6 + 37), v19 = v22 > v23, v22 == v23))
  {
    if (*((_BYTE *)v6 + 16))
    {
      if (!*((_BYTE *)v17 + 16))
      {
LABEL_33:
        v46 = *(__int128 **)v5;
        *(_QWORD *)v5 = v17;
        *a3 = (uint64_t)v46;
        return result;
      }
      v24 = *(const void **)v6;
      v25 = *((_QWORD *)v6 + 1);
      v58 = *v17;
      result = llvm::StringRef::compare((uint64_t)&v58, v24, v25);
      if ((int)result > 0)
      {
        v17 = (__int128 *)*a3;
        goto LABEL_33;
      }
      v6 = (__int128 *)*a2;
    }
  }
  else if (v19)
  {
    goto LABEL_33;
  }
  v47 = *(__int128 **)v5;
  *(_QWORD *)v5 = v6;
  *a2 = (uint64_t)v47;
  v48 = (__int128 *)*a3;
  v49 = *(_QWORD *)(*a3 + 24);
  v50 = *((_QWORD *)v47 + 3);
  v51 = v49 > v50;
  if (v49 == v50)
  {
    v52 = *((unsigned __int8 *)v48 + 36);
    v53 = *((unsigned __int8 *)v47 + 36);
    v51 = v52 > v53;
    if (v52 == v53)
    {
      v54 = *((unsigned __int8 *)v48 + 37);
      v55 = *((unsigned __int8 *)v47 + 37);
      v51 = v54 > v55;
      if (v54 == v55)
      {
        if (!*((_BYTE *)v47 + 16))
          return result;
        if (*((_BYTE *)v48 + 16))
        {
          v56 = *(const void **)v47;
          v57 = *((_QWORD *)v47 + 1);
          v58 = *v48;
          result = llvm::StringRef::compare((uint64_t)&v58, v56, v57);
          if ((int)result < 1)
            return result;
          v47 = (__int128 *)*a2;
          v48 = (__int128 *)*a3;
        }
        goto LABEL_47;
      }
    }
  }
  if (v51)
  {
LABEL_47:
    *a2 = (uint64_t)v48;
    *a3 = (uint64_t)v47;
  }
  return result;
}

BOOL std::__insertion_sort_incomplete[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  const void *v15;
  size_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  BOOL v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  const void *v30;
  size_t v31;
  uint64_t *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  BOOL v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  const void *v43;
  size_t v44;
  __int128 v45;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      v8 = *(_QWORD *)(v6 + 24);
      v9 = *(_QWORD *)(*a1 + 24);
      v10 = v8 > v9;
      if (v8 == v9
        && (v11 = *(unsigned __int8 *)(v6 + 36), v12 = *(unsigned __int8 *)(v7 + 36), v10 = v11 > v12, v11 == v12)
        && (v13 = *(unsigned __int8 *)(v6 + 37), v14 = *(unsigned __int8 *)(v7 + 37), v10 = v13 > v14, v13 == v14))
      {
        if (!*(_BYTE *)(v7 + 16))
          return result;
        if (*(_BYTE *)(v6 + 16))
        {
          v15 = *(const void **)v7;
          v16 = *(_QWORD *)(v7 + 8);
          v45 = *(_OWORD *)v6;
          if ((int)llvm::StringRef::compare((uint64_t)&v45, v15, v16) < 1)
            return 1;
          v7 = *a1;
          v6 = *(a2 - 1);
        }
      }
      else if (!v10)
      {
        return result;
      }
      *a1 = v6;
      *(a2 - 1) = v7;
      return 1;
    case 3:
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      std::__sort5_maybe_branchless[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **,0>((uint64_t)a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v17 = a1 + 2;
      std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>((uint64_t)a1, a1 + 1, a1 + 2);
      v18 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v19 = 0;
      v20 = 0;
      break;
  }
  do
  {
    v21 = *v18;
    v22 = *v17;
    v23 = *(_QWORD *)(*v18 + 24);
    v24 = *(_QWORD *)(*v17 + 24);
    v25 = v23 > v24;
    if (v23 == v24
      && (v26 = *(unsigned __int8 *)(v21 + 36), v27 = *(unsigned __int8 *)(v22 + 36), v25 = v26 > v27, v26 == v27)
      && (v28 = *(unsigned __int8 *)(v21 + 37), v29 = *(unsigned __int8 *)(v22 + 37), v25 = v28 > v29, v28 == v29))
    {
      if (!*(_BYTE *)(v22 + 16))
        goto LABEL_35;
      if (*(_BYTE *)(v21 + 16))
      {
        v30 = *(const void **)v22;
        v31 = *(_QWORD *)(v22 + 8);
        v45 = *(_OWORD *)v21;
        if ((int)llvm::StringRef::compare((uint64_t)&v45, v30, v31) < 1)
          goto LABEL_35;
        v21 = *v18;
        v22 = *v17;
      }
    }
    else if (!v25)
    {
      goto LABEL_35;
    }
    *v18 = v22;
    v32 = a1;
    if (v17 == a1)
      goto LABEL_34;
    v33 = v19;
    while (1)
    {
      v34 = (char *)a1 + v33;
      v35 = *(uint64_t *)((char *)a1 + v33 + 8);
      v36 = *(_QWORD *)(v21 + 24);
      v37 = *(_QWORD *)(v35 + 24);
      v38 = v36 > v37;
      if (v36 == v37)
      {
        v39 = *(unsigned __int8 *)(v21 + 36);
        v40 = *(unsigned __int8 *)(v35 + 36);
        v38 = v39 > v40;
        if (v39 == v40)
        {
          v41 = *(unsigned __int8 *)(v21 + 37);
          v42 = *(unsigned __int8 *)(v35 + 37);
          v38 = v41 > v42;
          if (v41 == v42)
            break;
        }
      }
      if (!v38)
      {
LABEL_33:
        v32 = v17;
        goto LABEL_34;
      }
LABEL_31:
      --v17;
      *((_QWORD *)v34 + 2) = v35;
      v33 -= 8;
      if (v33 == -16)
      {
        v32 = a1;
        goto LABEL_34;
      }
    }
    if (*(_BYTE *)(v35 + 16))
    {
      if (*(_BYTE *)(v21 + 16))
      {
        v43 = *(const void **)v35;
        v44 = *(_QWORD *)(v35 + 8);
        v45 = *(_OWORD *)v21;
        if ((int)llvm::StringRef::compare((uint64_t)&v45, v43, v44) < 1)
          goto LABEL_33;
        v35 = *((_QWORD *)v34 + 1);
      }
      goto LABEL_31;
    }
    v32 = (uint64_t *)((char *)a1 + v33 + 16);
LABEL_34:
    *v32 = v21;
    if (++v20 == 8)
      return v18 + 1 == a2;
LABEL_35:
    v17 = v18;
    v19 += 8;
    ++v18;
  }
  while (v18 != a2);
  return 1;
}

uint64_t std::__sort4[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t result;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  BOOL v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  const void *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  const void *v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  BOOL v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  const void *v40;
  size_t v41;
  __int128 v42;

  result = std::__sort3[abi:nn180100]<std::_ClassicAlgPolicy,llvm::jitlink::MachOLinkGraphBuilder::graphifyCStringSection(llvm::jitlink::MachOLinkGraphBuilder::NormalizedSection &,std::vector<llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>)::$_0 &,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol **>(a1, a2, a3);
  v9 = *a4;
  v10 = *a3;
  v11 = *(_QWORD *)(*a4 + 24);
  v12 = *(_QWORD *)(*a3 + 24);
  v13 = v11 > v12;
  if (v11 == v12
    && (v14 = *(unsigned __int8 *)(v9 + 36), v15 = *(unsigned __int8 *)(v10 + 36), v13 = v14 > v15, v14 == v15)
    && (v16 = *(unsigned __int8 *)(v9 + 37), v17 = *(unsigned __int8 *)(v10 + 37), v13 = v16 > v17, v16 == v17))
  {
    if (!*(_BYTE *)(v10 + 16))
      return result;
    if (*(_BYTE *)(v9 + 16))
    {
      v18 = *(const void **)v10;
      v19 = *(_QWORD *)(v10 + 8);
      v42 = *(_OWORD *)v9;
      result = llvm::StringRef::compare((uint64_t)&v42, v18, v19);
      if ((int)result < 1)
        return result;
      v10 = *a3;
      v9 = *a4;
    }
  }
  else if (!v13)
  {
    return result;
  }
  *a3 = v9;
  *a4 = v10;
  v20 = *a3;
  v21 = *a2;
  v22 = *(_QWORD *)(*a3 + 24);
  v23 = *(_QWORD *)(*a2 + 24);
  v24 = v22 > v23;
  if (v22 == v23
    && (v25 = *(unsigned __int8 *)(v20 + 36), v26 = *(unsigned __int8 *)(v21 + 36), v24 = v25 > v26, v25 == v26)
    && (v27 = *(unsigned __int8 *)(v20 + 37), v28 = *(unsigned __int8 *)(v21 + 37), v24 = v27 > v28, v27 == v28))
  {
    if (!*(_BYTE *)(v21 + 16))
      return result;
    if (*(_BYTE *)(v20 + 16))
    {
      v29 = *(const void **)v21;
      v30 = *(_QWORD *)(v21 + 8);
      v42 = *(_OWORD *)v20;
      result = llvm::StringRef::compare((uint64_t)&v42, v29, v30);
      if ((int)result < 1)
        return result;
      v21 = *a2;
      v20 = *a3;
    }
  }
  else if (!v24)
  {
    return result;
  }
  *a2 = v20;
  *a3 = v21;
  v31 = *a2;
  v32 = *(_QWORD *)a1;
  v33 = *(_QWORD *)(*a2 + 24);
  v34 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  v35 = v33 > v34;
  if (v33 == v34)
  {
    v36 = *(unsigned __int8 *)(v31 + 36);
    v37 = *(unsigned __int8 *)(v32 + 36);
    v35 = v36 > v37;
    if (v36 == v37)
    {
      v38 = *(unsigned __int8 *)(v31 + 37);
      v39 = *(unsigned __int8 *)(v32 + 37);
      v35 = v38 > v39;
      if (v38 == v39)
      {
        if (!*(_BYTE *)(v32 + 16))
          return result;
        if (*(_BYTE *)(v31 + 16))
        {
          v40 = *(const void **)v32;
          v41 = *(_QWORD *)(v32 + 8);
          v42 = *(_OWORD *)v31;
          result = llvm::StringRef::compare((uint64_t)&v42, v40, v41);
          if ((int)result < 1)
            return result;
          v32 = *(_QWORD *)a1;
          v31 = *a2;
        }
        goto LABEL_28;
      }
    }
  }
  if (v35)
  {
LABEL_28:
    *(_QWORD *)a1 = v31;
    *a2 = v32;
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create(llvm::formatv_object_base *a1@<X0>, llvm::formatv_object_base *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::formatv_object_base *v4[2];
  void *__p;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::formatv_object_base *v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t v19;
  unsigned int v20;

  if ((unint64_t)a2 > 0x3F)
  {
    v4[0] = a1;
    v4[1] = a2;
    __p = 0;
    v6 = 0;
    v7 = 0;
    v8 = &v11;
    v9 = 0;
    v10 = 0;
    llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a3, (uint64_t)v4);
    if (v8 != &v11)
      free(v8);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v12 = a2;
    v13[0] = "invalid buffer: the size (";
    v13[2] = &v12;
    v14 = 2563;
    v15[0] = v13;
    v15[2] = ") is smaller than an ELF header (";
    v16 = 770;
    v11 = 64;
    v17[0] = v15;
    v17[2] = &v11;
    v18 = 2562;
    v4[0] = (llvm::formatv_object_base *)v17;
    __p = ")";
    LOWORD(v7) = 770;
    v20 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v4, &v20, &v19);
    *(_BYTE *)(a3 + 64) |= 1u;
    *(_QWORD *)a3 = v19;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create(llvm::formatv_object_base *a1@<X0>, llvm::formatv_object_base *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::formatv_object_base *v4[2];
  void *__p;
  void *v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  llvm::formatv_object_base *v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t v19;
  unsigned int v20;

  if ((unint64_t)a2 > 0x33)
  {
    v4[0] = a1;
    v4[1] = a2;
    __p = 0;
    v6 = 0;
    v7 = 0;
    v8 = &v11;
    v9 = 0;
    v10 = 0;
    llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(a3, (uint64_t)v4);
    if (v8 != &v11)
      free(v8);
    if (__p)
    {
      v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    v12 = a2;
    v13[0] = "invalid buffer: the size (";
    v13[2] = &v12;
    v14 = 2563;
    v15[0] = v13;
    v15[2] = ") is smaller than an ELF header (";
    v16 = 770;
    v11 = 52;
    v17[0] = v15;
    v17[2] = &v11;
    v18 = 2562;
    v4[0] = (llvm::formatv_object_base *)v17;
    __p = ")";
    LOWORD(v7) = 770;
    v20 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v4, &v20, &v19);
    *(_BYTE *)(a3 + 64) |= 1u;
    *(_QWORD *)a3 = v19;
  }
}

void llvm::jitlink::createLinkGraphFromELFObject(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  llvm::formatv_object_base *v3;
  uint64_t v4;
  unsigned __int8 *v6;
  int v7;
  uint64_t v8;
  char v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20[2];
  __int128 v21[2];
  __int128 v22[2];
  __int128 v23[2];
  __int128 v24[2];
  __int128 v25[2];
  uint64_t v26;
  uint64_t v27;
  uint64_t v28[4];
  __int16 v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x24BDAC8D0];
  v3 = *(llvm::formatv_object_base **)(a1 + 8);
  if ((unint64_t)v3 > 3)
  {
    v6 = *(unsigned __int8 **)a1;
    if (*(_DWORD *)v6 != 1179403647)
    {
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"ELF magic not valid", &v26);
      *(_BYTE *)(a2 + 8) |= 1u;
      v4 = v26;
      goto LABEL_5;
    }
    if (v6[5] == 1)
    {
      v7 = v6[4];
      if (v7 == 1)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::create((llvm::formatv_object_base *)v6, v3, (uint64_t)v28);
        v8 = v28[0];
        if ((v30 & 1) != 0)
        {
          v28[0] = 0;
          v12 = -1;
        }
        else
        {
          v12 = 0;
          v8 = *(unsigned __int16 *)(v28[0] + 18);
        }
        llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected(v28);
        if ((v12 & 1) != 0)
          goto LABEL_34;
        goto LABEL_13;
      }
      if (v7 == 2)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::create((llvm::formatv_object_base *)v6, v3, (uint64_t)v28);
        v8 = v28[0];
        if ((v30 & 1) != 0)
        {
          v28[0] = 0;
          v9 = -1;
        }
        else
        {
          v9 = 0;
          v8 = *(unsigned __int16 *)(v28[0] + 18);
        }
        llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected(v28);
        if ((v9 & 1) != 0)
        {
LABEL_34:
          *(_BYTE *)(a2 + 8) |= 1u;
          *(_QWORD *)a2 = v8;
          return;
        }
LABEL_13:
        if ((unsigned __int16)v8 > 0xB6u)
        {
          switch((unsigned __int16)v8)
          {
            case 0x102u:
              v15 = *(_OWORD *)(a1 + 16);
              v23[0] = *(_OWORD *)a1;
              v23[1] = v15;
              llvm::jitlink::createLinkGraphFromELFObject_loongarch(v23, a2);
              return;
            case 0xF3u:
              v16 = *(_OWORD *)(a1 + 16);
              v22[0] = *(_OWORD *)a1;
              v22[1] = v16;
              llvm::jitlink::createLinkGraphFromELFObject_riscv(v22, a2);
              return;
            case 0xB7u:
              v11 = *(_OWORD *)(a1 + 16);
              v25[0] = *(_OWORD *)a1;
              v25[1] = v11;
              llvm::jitlink::createLinkGraphFromELFObject_aarch64(v25, a2);
              return;
          }
        }
        else
        {
          switch((unsigned __int16)v8)
          {
            case 3u:
              v13 = *(_OWORD *)(a1 + 16);
              v20[0] = *(_OWORD *)a1;
              v20[1] = v13;
              llvm::jitlink::createLinkGraphFromELFObject_i386(v20, a2);
              return;
            case 0x28u:
              v14 = *(_OWORD *)(a1 + 16);
              v24[0] = *(_OWORD *)a1;
              v24[1] = v14;
              llvm::jitlink::createLinkGraphFromELFObject_aarch32(v24, a2);
              return;
            case 0x3Eu:
              v10 = *(_OWORD *)(a1 + 16);
              v21[0] = *(_OWORD *)a1;
              v21[1] = v10;
              llvm::jitlink::createLinkGraphFromELFObject_x86_64(v21, a2);
              return;
          }
        }
        v17 = *(_QWORD *)(a1 + 16);
        v18 = *(_QWORD *)(a1 + 24);
        v29 = 1283;
        v28[0] = (uint64_t)"Unsupported target machine architecture in ELF object ";
        v28[2] = v17;
        v28[3] = v18;
        llvm::make_error<llvm::jitlink::JITLinkError,llvm::Twine>((uint64_t)v28, &v19);
        *(_BYTE *)(a2 + 8) |= 1u;
        v4 = v19;
        goto LABEL_5;
      }
    }
    LOWORD(v8) = 0;
    goto LABEL_13;
  }
  llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Truncated ELF buffer", &v27);
  *(_BYTE *)(a2 + 8) |= 1u;
  v4 = v27;
LABEL_5:
  *(_QWORD *)a2 = v4;
}

void llvm::jitlink::link_ELF(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  llvm::jitlink::LinkGraph *v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  llvm::jitlink::LinkGraph *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p;
  char v20;
  uint64_t v21;
  uint64_t v22;
  llvm::jitlink::LinkGraph *v23;
  uint64_t v24;
  llvm::jitlink::LinkGraph *v25;
  uint64_t v26;
  llvm::jitlink::LinkGraph *v27;
  uint64_t v28;
  llvm::jitlink::LinkGraph *v29;
  uint64_t v30;
  llvm::jitlink::LinkGraph *v31;
  uint64_t v32;
  llvm::jitlink::LinkGraph *v33;
  void **p_p;
  __int16 v35;

  v2 = *a1;
  v3 = *((_DWORD *)*a1 + 36);
  if (v3 > 26)
  {
    switch(v3)
    {
      case 27:
      case 28:
        *a1 = 0;
        v27 = v2;
        v4 = *a2;
        *a2 = 0;
        v26 = v4;
        llvm::jitlink::link_ELF_riscv(&v27, &v26);
        v5 = v26;
        v26 = 0;
        if (v5)
          (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
        v6 = v27;
        v27 = 0;
        if (v6)
          goto LABEL_29;
        break;
      case 35:
      case 36:
        goto LABEL_13;
      case 37:
        *a1 = 0;
        v23 = v2;
        v13 = *a2;
        *a2 = 0;
        v22 = v13;
        llvm::jitlink::link_ELF_i386(&v23, &v22);
        v14 = v22;
        v22 = 0;
        if (v14)
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        v6 = v23;
        v23 = 0;
        if (v6)
          goto LABEL_29;
        break;
      case 38:
        *a1 = 0;
        v25 = v2;
        v15 = *a2;
        *a2 = 0;
        v24 = v15;
        llvm::jitlink::link_ELF_x86_64(&v25, &v24);
        v16 = v24;
        v24 = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        v6 = v25;
        v25 = 0;
        if (v6)
          goto LABEL_29;
        break;
      default:
        goto LABEL_31;
    }
    return;
  }
  if ((v3 - 1) < 2)
  {
LABEL_13:
    *a1 = 0;
    v31 = v2;
    v9 = *a2;
    *a2 = 0;
    v30 = v9;
    llvm::jitlink::link_ELF_aarch32(&v31, &v30);
    v10 = v30;
    v30 = 0;
    if (v10)
      (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
    v6 = v31;
    v31 = 0;
    if (!v6)
      return;
    goto LABEL_29;
  }
  if ((v3 - 13) < 2)
  {
    *a1 = 0;
    v29 = v2;
    v7 = *a2;
    *a2 = 0;
    v28 = v7;
    llvm::jitlink::link_ELF_loongarch(&v29, &v28);
    v8 = v28;
    v28 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v6 = v29;
    v29 = 0;
    if (!v6)
      return;
LABEL_29:
    llvm::jitlink::LinkGraph::~LinkGraph(v6);
    MEMORY[0x24BD1B3A4]();
    return;
  }
  if (v3 != 3)
  {
LABEL_31:
    v17 = *a2;
    std::operator+<char>();
    v18 = operator new();
    v35 = 260;
    p_p = &__p;
    *(_QWORD *)v18 = off_251C15728;
    llvm::Twine::str((llvm::formatv_object_base **)&p_p, (std::string *)(v18 + 8));
    v21 = v18;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v17 + 24))(v17, &v21);
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
    if (v20 < 0)
      operator delete(__p);
    return;
  }
  *a1 = 0;
  v33 = v2;
  v11 = *a2;
  *a2 = 0;
  v32 = v11;
  llvm::jitlink::link_ELF_aarch64(&v33, &v32);
  v12 = v32;
  v32 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  v6 = v33;
  v33 = 0;
  if (v6)
    goto LABEL_29;
}

void llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(llvm::formatv_object_base **a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _UNKNOWN **v8;

  v6 = operator new();
  v7 = *a2;
  v8 = llvm::object::object_category((llvm::object *)v6);
  *(_QWORD *)v6 = off_251C127D0;
  llvm::Twine::str(a1, (std::string *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = v7;
  *(_QWORD *)(v6 + 40) = v8;
  *(_BYTE *)(v6 + 48) = 1;
  *a3 = v6;
}

uint64_t llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  *(_BYTE *)(a1 + 64) &= ~1u;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a1 + 64;
  v3 = a1 + 40;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  if (*(_QWORD *)(a2 + 48))
    llvm::SmallVectorImpl<char>::operator=(v3, (const void **)(a2 + 40));
  return a1;
}

uint64_t *llvm::Expected<llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>>::~Expected(uint64_t *a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  v2 = a1 + 8;
  if ((a1[8] & 1) != 0)
  {
    v5 = *a1;
    *a1 = 0;
    if (v5)
      (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  }
  else
  {
    v3 = (void *)a1[5];
    if (v3 != v2)
      free(v3);
    v4 = (void *)a1[2];
    if (v4)
    {
      a1[3] = (uint64_t)v4;
      operator delete(v4);
    }
  }
  return a1;
}

void llvm::jitlink::ELFLinkGraphBuilderBase::~ELFLinkGraphBuilderBase(llvm::jitlink::LinkGraph **this)
{
  *this = (llvm::jitlink::LinkGraph *)&off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100](this + 1, 0);
}

{
  *this = (llvm::jitlink::LinkGraph *)&off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100](this + 1, 0);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::getJITLinkEdgeKind(llvm::jitlink *this, signed int a2)
{
  char v3;
  llvm::formatv_object_base *ELFRelocationTypeName;
  llvm::formatv_object_base *v5;
  llvm::formatv_object_base *v6;
  uint64_t v7;
  _QWORD v8[4];
  _QWORD v9[2];
  _QWORD *v10;
  _QWORD v11[4];
  __int16 v12;
  signed int v13;
  llvm::formatv_object_base *v14[4];
  __int16 v15;

  v13 = a2;
  if (a2 <= 27)
  {
    switch(a2)
    {
      case 2:
        *((_BYTE *)this + 8) &= ~1u;
        v3 = 3;
        goto LABEL_18;
      case 3:
        *((_BYTE *)this + 8) &= ~1u;
        v3 = 2;
        goto LABEL_18;
      case 10:
        *((_BYTE *)this + 8) &= ~1u;
        v3 = 5;
        goto LABEL_18;
    }
LABEL_16:
    v8[0] = "{0:d}: ";
    v8[1] = 7;
    v8[2] = &v10;
    v8[3] = 1;
    v9[0] = &off_251C158D8;
    v9[1] = &v13;
    v10 = v9;
    v11[0] = "Unsupported aarch32 relocation ";
    v11[2] = v8;
    v12 = 1539;
    ELFRelocationTypeName = (llvm::formatv_object_base *)llvm::object::getELFRelocationTypeName((llvm::object *)0x28, a2);
    v6 = v5;
    v7 = operator new();
    v14[0] = (llvm::formatv_object_base *)v11;
    v14[1] = v6;
    v14[2] = ELFRelocationTypeName;
    v14[3] = v6;
    v15 = 1282;
    *(_QWORD *)v7 = off_251C15728;
    llvm::Twine::str(v14, (std::string *)(v7 + 8));
    *((_BYTE *)this + 8) |= 1u;
    *(_QWORD *)this = v7;
    return;
  }
  if (a2 > 46)
  {
    if (a2 == 47)
    {
      *((_BYTE *)this + 8) &= ~1u;
      v3 = 7;
      goto LABEL_18;
    }
    if (a2 == 48)
    {
      *((_BYTE *)this + 8) &= ~1u;
      v3 = 8;
      goto LABEL_18;
    }
    goto LABEL_16;
  }
  if (a2 == 28)
  {
    *((_BYTE *)this + 8) &= ~1u;
    v3 = 4;
    goto LABEL_18;
  }
  if (a2 != 30)
    goto LABEL_16;
  *((_BYTE *)this + 8) &= ~1u;
  v3 = 6;
LABEL_18:
  *(_BYTE *)this = v3;
}

const char *llvm::jitlink::getELFAArch32EdgeKindName(llvm::jitlink *this)
{
  char v1;
  const char *v2;

  v1 = (_BYTE)this - 2;
  if (((_DWORD)this - 2) < 7 && ((0x7Du >> v1) & 1) != 0)
    return off_251C15BB8[v1];
  v2 = "<Unrecognized edge kind>";
  if ((_DWORD)this == 1)
    v2 = "Keep-Alive";
  if ((_DWORD)this)
    return v2;
  else
    return "INVALID RELOCATION";
}

void llvm::jitlink::createLinkGraphFromELFObject_aarch32(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  __int128 v4;
  uint64_t ArchName;
  unint64_t v6;
  unsigned int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  llvm::object::ObjectFile *v12;
  char *CPUArchName;
  _QWORD *v14;
  uint64_t v15;
  llvm::object::ObjectFile *v16;
  void *v17;
  size_t v18;
  char *v19;
  void *v20;
  size_t v21;
  std::string::size_type v22;
  char v23;
  std::string::size_type v24;
  llvm::jitlink::LinkGraph *v25;
  llvm::jitlink::LinkGraph *v26;
  unsigned int *v27;
  uint64_t v28;
  int v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  llvm::jitlink::LinkGraph *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t *v39;
  unsigned int v40;
  uint64_t SectionByName;
  char v42;
  int v43;
  int v44;
  uint64_t Section;
  uint64_t v46;
  uint64_t v47;
  _QWORD *v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::jitlink::LinkGraph **v54;
  uint64_t v55;
  uint64_t v56;
  unsigned int v57;
  uint64_t v58;
  unint64_t v59;
  unsigned int v60;
  unsigned int v61;
  uint64_t v62;
  llvm::jitlink::LinkGraph *v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v76;
  char v77;
  char v78;
  _QWORD *v79;
  int v81;
  char v82;
  int v83;
  uint64_t GraphBlock;
  uint64_t v85;
  unsigned __int8 v86;
  uint64_t v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  llvm::jitlink::LinkGraph *v95;
  llvm::object::ObjectFile *v96;
  std::string v97;
  __int128 v98;
  uint64_t v99;
  std::string v100;
  __int128 v101;
  uint64_t v102;
  llvm::jitlink::LinkGraph *v103[2];
  const char *v104;
  _QWORD *v105;
  __int128 v106;
  _BYTE v107[24];
  char v108;
  uint64_t v109[2];
  int v110;
  uint64_t v111[2];
  int v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  uint64_t v116;
  uint64_t v117;
  std::string v118;
  __int128 v119;
  uint64_t v120;
  __int128 v121[2];
  uint64_t v122;
  uint64_t v123[2];
  uint64_t v124[4];
  __int16 v125;
  uint64_t v126[4];
  __int16 v127;
  uint64_t v128[4];
  __int16 v129;
  uint64_t v130[2];
  char v131;
  uint64_t v132;
  __int128 v133;
  uint64_t v134;
  __int16 v135;
  llvm::object::ObjectFile *v136;
  char v137;
  _BYTE __p[24];
  __int128 v139;
  uint64_t v140;
  _BYTE v141[30];
  __int16 v142;
  uint64_t v143;
  uint64_t v144;
  char v145;
  uint64_t v146[2];
  char v147;
  uint64_t v148;
  uint64_t v149;
  char v150;
  __int128 __dst;
  const char *v152;
  __int16 v153;
  uint64_t v154;

  v154 = *MEMORY[0x24BDAC8D0];
  v4 = a1[1];
  v121[0] = *a1;
  v121[1] = v4;
  llvm::object::ObjectFile::createELFObjectFile(v121, 1, (uint64_t)&v136);
  if ((v137 & 1) != 0)
  {
    v12 = v136;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v12;
    return;
  }
  llvm::object::ObjectFile::makeTriple(v136, (llvm::Triple *)&v118);
  ArchName = llvm::Triple::getArchName((llvm::Triple *)&v118);
  v7 = llvm::ARM::parseArch(ArchName, v6);
  if (!v7)
  {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Failed to build ELF link graph: Invalid ARM ArchKind", &v117);
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v117;
    v117 = 0;
    goto LABEL_183;
  }
  v8 = *((_DWORD *)&llvm::ARM::ARMArchNames + 18 * v7 + 17);
  if ((v8 | 4) != 0xE)
  {
    CPUArchName = llvm::jitlink::aarch32::getCPUArchName(v8);
    v14 = (_QWORD *)strlen(CPUArchName);
    v15 = operator new();
    v103[0] = (llvm::jitlink::LinkGraph *)"Failed to build ELF link graph: Unsupported CPU arch ";
    v104 = CPUArchName;
    v105 = v14;
    LOWORD(v106) = 1283;
    *(_QWORD *)v15 = off_251C15728;
    llvm::Twine::str(v103, (std::string *)(v15 + 8));
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v15;
    goto LABEL_183;
  }
  if (((v8 - 10) & 0xFFFFFFFB) != 0)
    v9 = 0;
  else
    v9 = 0x100000001;
  if ((int)v119 <= 34)
  {
    if ((_DWORD)v119 != 1)
    {
      if ((_DWORD)v119 != 2)
        goto LABEL_10;
LABEL_17:
      v16 = v136;
      v17 = (void *)*((_QWORD *)v136 + 4);
      v18 = *((_QWORD *)v136 + 5);
      if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
        std::string::__init_copy_ctor_external(&v97, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
      else
        v97 = v118;
      v98 = v119;
      v99 = v120;
      *(_QWORD *)v141 = v97.__r_.__value_.__l.__size_;
      v22 = v97.__r_.__value_.__r.__words[0];
      *(_QWORD *)&v141[7] = *(std::string::size_type *)((char *)&v97.__r_.__value_.__r.__words[1] + 7);
      v23 = HIBYTE(v97.__r_.__value_.__r.__words[2]);
      memset(&v97, 0, sizeof(v97));
      v133 = v119;
      v134 = v120;
      if (v17)
      {
        std::string::basic_string[abi:nn180100](&__dst, v17, v18);
      }
      else
      {
        __dst = 0uLL;
        v152 = 0;
      }
      *(_QWORD *)__p = v22;
      *(_QWORD *)&__p[8] = *(_QWORD *)v141;
      *(_QWORD *)&__p[15] = *(_QWORD *)&v141[7];
      __p[23] = v23;
      v139 = v133;
      v140 = v134;
      v26 = (llvm::jitlink::LinkGraph *)operator new();
      *(_OWORD *)v103 = __dst;
      v104 = v152;
      __dst = 0uLL;
      v152 = 0;
      llvm::jitlink::LinkGraph::LinkGraph((uint64_t)v26, (__int128 *)v103, (__int128 *)__p, 4, 0, (uint64_t)llvm::jitlink::getELFAArch32EdgeKindName);
      if (SHIBYTE(v104) < 0)
        operator delete(v103[0]);
      v103[0] = (llvm::jitlink::LinkGraph *)&off_251C159D8;
      v103[1] = v26;
      v104 = 0;
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (SHIBYTE(v152) < 0)
        operator delete((void *)__dst);
      v106 = 0u;
      memset(v107, 0, sizeof(v107));
      v108 = 1;
      v109[0] = 0;
      v109[1] = 0;
      v110 = 0;
      v111[0] = 0;
      v111[1] = 0;
      v112 = 0;
      v113 = 0;
      v114 = 0;
      v115 = 0;
      v105 = (_QWORD *)((char *)v16 + 56);
      v103[0] = (llvm::jitlink::LinkGraph *)&off_251C15B08;
      v116 = v9;
      if (*(_WORD *)(*((_QWORD *)v16 + 7) + 16) == 256)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections((_QWORD *)v16 + 7, (uint64_t)__p);
        if ((__p[16] & 1) != 0
          || (v106 = *(_OWORD *)__p,
              *(_QWORD *)&__dst = llvm::object::defaultWarningHandler,
              llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionStringTable(v105, *(uint64_t *)__p, *(unint64_t *)&__p[8], (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&__dst, (uint64_t)__p), (__p[16] & 1) != 0))
        {
LABEL_63:
          v35 = *(llvm::jitlink::LinkGraph **)__p;
          if (*(_QWORD *)__p)
            goto LABEL_176;
          goto LABEL_64;
        }
        *(_OWORD *)&v107[8] = *(_OWORD *)__p;
        if (!*((_QWORD *)&v106 + 1))
          goto LABEL_64;
        v27 = (unsigned int *)(v106 + 24);
        v28 = 40 * *((_QWORD *)&v106 + 1);
        while (1)
        {
          v29 = *(v27 - 5);
          if (v29 != 0x2000000)
            goto LABEL_46;
          if (*(_QWORD *)v107)
            break;
          *(_QWORD *)v107 = v27 - 6;
          v29 = *(v27 - 5);
LABEL_46:
          if (v29 == 301989888)
          {
            v30 = bswap32(*v27);
            if (*((_QWORD *)&v106 + 1) <= v30)
            {
              llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"sh_link is out of bound", (uint64_t *)v141);
              goto LABEL_175;
            }
            llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable(v105, v27 - 6, (uint64_t)__p);
            if ((__p[16] & 1) != 0)
              goto LABEL_63;
            v31 = v106 + 40 * v30;
            __dst = *(_OWORD *)__p;
            *(_QWORD *)&v133 = 0;
            if ((llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(v113, v115, v31, &v133) & 1) == 0)
            {
              v32 = v115;
              if (4 * (int)v114 + 4 >= 3 * v115)
              {
                v32 = 2 * v115;
              }
              else if (v115 + ~(_DWORD)v114 - HIDWORD(v114) > v115 >> 3)
              {
                goto LABEL_52;
              }
              llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>>>::grow((uint64_t)&v113, v32);
              *(_QWORD *)&v133 = 0;
              llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(v113, v115, v31, &v133);
LABEL_52:
              v33 = v133;
              LODWORD(v114) = v114 + 1;
              if (*(_QWORD *)v133 != -4096)
                --HIDWORD(v114);
              *(_QWORD *)v133 = v31;
              *(_OWORD *)(v33 + 8) = __dst;
            }
            if ((__p[16] & 1) != 0)
            {
              v34 = *(_QWORD *)__p;
              *(_QWORD *)__p = 0;
              if (v34)
                (*(void (**)(uint64_t))(*(_QWORD *)v34 + 8))(v34);
            }
          }
          v27 += 10;
          v28 -= 40;
          if (!v28)
            goto LABEL_64;
        }
        std::operator+<char>();
        v92 = operator new();
        WORD4(v139) = 260;
        *(_QWORD *)__p = &__dst;
        *(_QWORD *)v92 = off_251C15728;
        llvm::Twine::str((llvm::formatv_object_base **)__p, (std::string *)(v92 + 8));
        *(_QWORD *)v141 = v92;
        if (SHIBYTE(v152) < 0)
          operator delete((void *)__dst);
LABEL_175:
        v35 = *(llvm::jitlink::LinkGraph **)v141;
        if (*(_QWORD *)v141)
        {
LABEL_176:
          *(_BYTE *)(a2 + 8) |= 1u;
          goto LABEL_177;
        }
LABEL_64:
        if (!*((_QWORD *)&v106 + 1))
          goto LABEL_97;
        v36 = 0;
        v37 = 0;
        while (2)
        {
          v38 = v106 + 40 * v36;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(v105, (unsigned int *)v38, *(uint64_t *)&v107[8], *(unint64_t *)&v107[16], (uint64_t)__p);
          if ((__p[16] & 1) != 0)
          {
            v2 = *(_QWORD *)__p;
            *(_QWORD *)__p = 0;
          }
          else
          {
            if ((*((BOOL (**)(uint64_t, uint64_t))v103[0] + 5))((uint64_t)v103, v38)
              || !*(_DWORD *)(v38 + 4)
              || !v108
              && (__dst = *(_OWORD *)__p,
                  std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&__dst) != (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278]))
            {
              v49 = 6;
              goto LABEL_87;
            }
            v40 = *(_DWORD *)(v38 + 8);
            SectionByName = llvm::jitlink::LinkGraph::findSectionByName((uint64_t)v103[1], *(uint64_t *)__p, *(uint64_t *)&__p[8], v39);
            if (!SectionByName)
            {
              v42 = bswap32(v40);
              v43 = v42 & 4;
              v44 = (v42 & 1) != 0 ? 3 : 1;
              Section = llvm::jitlink::LinkGraph::createSection((uint64_t)v103[1], *(uint64_t *)__p, *(uint64_t *)&__p[8], v44 | v43);
              SectionByName = Section;
              if ((*(_BYTE *)(v38 + 11) & 2) == 0)
                *(_DWORD *)(Section + 20) = 2;
            }
            if (*(_DWORD *)(v38 + 4) == 0x8000000)
            {
              v46 = bswap32(*(_DWORD *)(v38 + 20));
              v47 = bswap32(*(_DWORD *)(v38 + 32));
              *(_QWORD *)&__dst = bswap32(*(_DWORD *)(v38 + 12));
              *(_QWORD *)&v133 = v46;
              *(_QWORD *)v141 = v47;
              v128[0] = 0;
              v48 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)v103[1], SectionByName, (uint64_t *)&v133, (uint64_t *)&__dst, (unint64_t *)v141, v128);
              goto LABEL_78;
            }
            llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<char>(v105, v38, (uint64_t)&__dst);
            if ((v152 & 1) == 0)
            {
              v50 = bswap32(*(_DWORD *)(v38 + 12));
              v51 = bswap32(*(_DWORD *)(v38 + 32));
              v133 = __dst;
              *(_QWORD *)v141 = v50;
              v128[0] = v51;
              v126[0] = 0;
              v48 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)v103[1], SectionByName, (uint64_t *)&v133, (uint64_t *)v141, (unint64_t *)v128, v126);
              if ((v152 & 1) != 0)
              {
                v52 = __dst;
                *(_QWORD *)&__dst = 0;
                if (v52)
                  (*(void (**)(uint64_t))(*(_QWORD *)v52 + 8))(v52);
              }
LABEL_78:
              LODWORD(__dst) = v37;
              v49 = 0;
              *((_QWORD *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v109, &__dst)+ 1) = v48;
LABEL_87:
              if ((__p[16] & 1) != 0)
              {
                v53 = *(_QWORD *)__p;
                *(_QWORD *)__p = 0;
                if (v53)
                  (*(void (**)(uint64_t))(*(_QWORD *)v53 + 8))(v53);
              }
              if (v49 == 6 || !v49)
              {
                v36 = ++v37;
                if (*((_QWORD *)&v106 + 1) == v37)
                  goto LABEL_97;
                continue;
              }
              if (v2)
              {
                *(_BYTE *)(a2 + 8) |= 1u;
                *(_QWORD *)a2 = v2;
                goto LABEL_178;
              }
LABEL_97:
              if (*(_QWORD *)v107)
              {
                v54 = (llvm::jitlink::LinkGraph **)&v148;
                llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(v105, *(unsigned int **)v107, (uint64_t)&v148);
                if ((v150 & 1) == 0)
                {
                  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTableForSymtab(v105, *(uint64_t *)v107, v106, *((unint64_t *)&v106 + 1), (uint64_t)v146);
                  if ((v147 & 1) != 0)
                  {
                    v55 = v146[0];
                    v146[0] = 0;
                    goto LABEL_163;
                  }
                  v55 = v149;
                  if (v149)
                  {
                    v56 = 0;
                    v57 = 0;
                    while (1)
                    {
                      v58 = v148 + 16 * v56;
                      if ((*(_BYTE *)(v58 + 12) & 0xF) != 4)
                        break;
LABEL_116:
                      v56 = ++v57;
                      if (v149 == v57)
                      {
                        v55 = 0;
                        goto LABEL_163;
                      }
                    }
                    llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getName((unsigned int *)v58, v146[0], v146[1], (uint64_t)&v143);
                    if ((v145 & 1) != 0)
                    {
                      v73 = v143;
                      v143 = 0;
LABEL_110:
                      v122 = v73;
                      goto LABEL_111;
                    }
                    v59 = *(unsigned __int8 *)(v58 + 12);
                    v60 = v59 & 0xF;
                    if (v60 == 5 || (v61 = *(unsigned __int16 *)(v58 + 14), v61 == 62207))
                    {
                      v63 = v103[1];
                      v62 = (uint64_t)v104;
                      if (!v104)
                      {
                        v62 = llvm::jitlink::LinkGraph::createSection((uint64_t)v103[1], (uint64_t)llvm::jitlink::ELFLinkGraphBuilderBase::CommonSectionName, unk_25795D190, 3);
                        v104 = (const char *)v62;
                      }
                      v64 = bswap32(*(_DWORD *)(v58 + 8));
                      v65 = bswap32(*(_DWORD *)(v58 + 4));
                      *(_QWORD *)__p = 0;
                      *(_QWORD *)&__dst = v64;
                      *(_QWORD *)&v133 = v65;
                      *(_QWORD *)v141 = 0;
                      v66 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)v63, v62, (uint64_t *)&__dst, (uint64_t *)__p, (unint64_t *)&v133, (uint64_t *)v141);
                      v67 = v143;
                      v68 = v144;
                      v69 = bswap32(*(_DWORD *)(v58 + 8));
                      v70 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)v63, 40, 3);
                      *v70 = v67;
                      v70[1] = v68;
                      v70[2] = v66;
                      v70[3] = 0x200000000000000;
                      v70[4] = v69;
                      v71 = v66[2] + 56;
                      *(_QWORD *)&__dst = v70;
                      llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v71, &__dst, (uint64_t)__p);
                      *(_DWORD *)__p = v57;
                      *((_QWORD *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v111, __p)+ 1) = v70;
                      v72 = 8;
LABEL_112:
                      if ((v145 & 1) != 0)
                      {
                        v74 = v143;
                        v143 = 0;
                        if (v74)
                          (*(void (**)(uint64_t))(*(_QWORD *)v74 + 8))(v74);
                      }
                      if ((v72 | 8) != 8)
                        goto LABEL_164;
                      goto LABEL_116;
                    }
                    if (!*(_WORD *)(v58 + 14))
                    {
                      if (v59 < 0x10)
                        goto LABEL_147;
                      if ((v59 >> 4) - 1 < 2)
                      {
                        v79 = llvm::jitlink::LinkGraph::addExternalSymbol((uint64_t)v103[1], v143, v144, bswap32(*(_DWORD *)(v58 + 8)), v59 >> 4 == 2);
LABEL_158:
                        *(_DWORD *)__p = v57;
                        v72 = 0;
                        *((_QWORD *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v111, __p)+ 1) = v79;
                        goto LABEL_112;
                      }
                      *(_QWORD *)v141 = "Invalid symbol binding ";
                      v142 = 259;
                      v91 = *(unsigned __int8 *)(v58 + 12) >> 4;
                      v129 = 265;
                      LODWORD(v128[0]) = v91;
                      llvm::operator+((uint64_t *)v141, v128, (uint64_t)&v133);
                      v126[0] = (uint64_t)" for external symbol ";
                      v127 = 259;
                      llvm::operator+((uint64_t *)&v133, v126, (uint64_t)&__dst);
                      v125 = 261;
                      v124[0] = v143;
                      v124[1] = v144;
                      llvm::operator+((uint64_t *)&__dst, v124, (uint64_t)__p);
                      getErrorErrorCat();
                      v123[0] = 3;
                      v123[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
                      llvm::make_error<llvm::StringError,llvm::Twine,std::error_code>((llvm::formatv_object_base **)__p, v123, &v122);
LABEL_111:
                      v72 = 1;
                      goto LABEL_112;
                    }
                    if (v60 >= 4 && v60 != 6)
                      goto LABEL_147;
                    v76 = v59 >> 4;
                    if ((int)v76 > 1)
                    {
                      if ((_DWORD)v76 == 2 || (_DWORD)v76 == 10)
                      {
                        v77 = 0;
                        LOBYTE(v76) = 1;
                        v78 = 1;
                        goto LABEL_138;
                      }
                    }
                    else
                    {
                      if (!(_DWORD)v76)
                      {
                        v78 = 0;
                        LOBYTE(v76) = 2;
                        v77 = 2;
                        goto LABEL_138;
                      }
                      if ((_DWORD)v76 == 1)
                      {
                        v77 = 0;
                        v78 = 0;
LABEL_138:
                        v81 = *(_BYTE *)(v58 + 13) & 3;
                        if (v81 != 1)
                        {
                          if (v81 == 2)
                            v82 = v76;
                          else
                            v82 = v77;
                          if (v61 != 0xFFFF)
                          {
                            v83 = __rev16(v61);
                            goto LABEL_144;
                          }
                          *(_QWORD *)__p = 0;
                          v72 = 8;
                          if (!llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(v113, v115, *(uint64_t *)v107, __p)|| *(_QWORD *)__p == v113 + 24 * v115)
                          {
                            goto LABEL_112;
                          }
                          v90 = *(_QWORD *)(*(_QWORD *)__p + 16);
                          v130[0] = *(_QWORD *)(*(_QWORD *)__p + 8);
                          v130[1] = v90;
                          v131 = 1;
                          v132 = 0;
                          llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)0,false>>(v57, v130, (uint64_t)__p);
                          if ((__p[8] & 1) == 0)
                          {
                            v83 = *(_DWORD *)__p;
LABEL_144:
                            GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock((uint64_t)v103, v83);
                            if (GraphBlock)
                            {
                              v85 = GraphBlock;
                              v86 = (*((uint64_t (**)(uint64_t, uint64_t))v103[0] + 3))((uint64_t)v103, v58);
                              v87 = (*((uint64_t (**)(uint64_t, uint64_t))v103[0] + 4))((uint64_t)v103, v58);
                              if (v144)
                                v88 = llvm::jitlink::LinkGraph::addDefinedSymbol((uint64_t)v103[1], v85, v87, v143, v144, bswap32(*(_DWORD *)(v58 + 8)), v78, v82, (*(_BYTE *)(v58 + 12) & 0xF) == 2, 0);
                              else
                                v88 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)v103[1], v85, v87, bswap32(*(_DWORD *)(v58 + 8)), 0, 0);
                              v79 = v88;
                              v88[3] = v88[3] & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)v86 << 63);
                              goto LABEL_158;
                            }
LABEL_147:
                            v72 = 0;
                            goto LABEL_112;
                          }
                          v73 = *(_QWORD *)__p;
                          goto LABEL_110;
                        }
                        *(_QWORD *)&v133 = "Unrecognized symbol visibility ";
                        v134 = 1;
                        v135 = 2307;
                        *(_QWORD *)&__dst = &v133;
                        v152 = " for ";
                        v153 = 770;
                        *(_QWORD *)__p = &__dst;
                        *(_QWORD *)&__p[16] = v143;
                        *(_QWORD *)&v139 = v144;
                        WORD4(v139) = 1282;
                        getErrorErrorCat();
                        v89 = operator new();
                        *(_QWORD *)v89 = off_251C127D0;
                        llvm::Twine::str((llvm::formatv_object_base **)__p, (std::string *)(v89 + 8));
                        *(_QWORD *)(v89 + 32) = 3;
                        *(_QWORD *)(v89 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
                        *(_BYTE *)(v89 + 48) = 1;
LABEL_150:
                        v122 = v89;
                        goto LABEL_111;
                      }
                    }
                    *(_QWORD *)&v133 = "Unrecognized symbol binding ";
                    v134 = v76;
                    v135 = 2307;
                    *(_QWORD *)&__dst = &v133;
                    v152 = " for ";
                    v153 = 770;
                    *(_QWORD *)__p = &__dst;
                    *(_QWORD *)&__p[16] = v143;
                    *(_QWORD *)&v139 = v144;
                    WORD4(v139) = 1282;
                    getErrorErrorCat();
                    v89 = operator new();
                    *(_QWORD *)v89 = off_251C127D0;
                    llvm::Twine::str((llvm::formatv_object_base **)__p, (std::string *)(v89 + 8));
                    *(_QWORD *)(v89 + 32) = 3;
                    *(_QWORD *)(v89 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
                    *(_BYTE *)(v89 + 48) = 1;
                    goto LABEL_150;
                  }
LABEL_163:
                  v122 = v55;
LABEL_164:
                  if ((v147 & 1) != 0)
                  {
                    v93 = v146[0];
                    v146[0] = 0;
                    if (v93)
                      (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
                  }
                  if ((v150 & 1) != 0)
                  {
                    v94 = v148;
                    v148 = 0;
                    if (v94)
                      (*(void (**)(uint64_t))(*(_QWORD *)v94 + 8))(v94);
                  }
                  v54 = (llvm::jitlink::LinkGraph **)&v122;
                }
                v35 = *v54;
                if (*v54)
                  goto LABEL_176;
              }
              (*((void (**)(uint64_t@<X0>, unsigned int **@<X8>))v103[0] + 2))((uint64_t)v103, (unsigned int **)__p);
              v35 = *(llvm::jitlink::LinkGraph **)__p;
              if (*(_QWORD *)__p)
                goto LABEL_176;
              *(_BYTE *)(a2 + 8) &= ~1u;
              v35 = v103[1];
              v103[1] = 0;
LABEL_177:
              *(_QWORD *)a2 = v35;
LABEL_178:
              v103[0] = (llvm::jitlink::LinkGraph *)off_251C15A38;
              MEMORY[0x24BD1B398](v113, 8);
              MEMORY[0x24BD1B398](v111[0], 8);
              MEMORY[0x24BD1B398](v109[0], 8);
              v95 = v103[1];
              v103[0] = (llvm::jitlink::LinkGraph *)&off_251C159D8;
              v103[1] = 0;
              if (v95)
              {
                llvm::jitlink::LinkGraph::~LinkGraph(v95);
                MEMORY[0x24BD1B3A4]();
              }
              if ((SHIBYTE(v97.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_183;
              v11 = (void *)v97.__r_.__value_.__r.__words[0];
              goto LABEL_182;
            }
            v2 = __dst;
          }
          break;
        }
        v49 = 1;
        goto LABEL_87;
      }
      llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Object is not a relocatable ELF file", (uint64_t *)__p);
      *(_BYTE *)(a2 + 8) |= 1u;
      v35 = *(llvm::jitlink::LinkGraph **)__p;
      goto LABEL_177;
    }
LABEL_19:
    v19 = (char *)v136 + 56;
    v20 = (void *)*((_QWORD *)v136 + 4);
    v21 = *((_QWORD *)v136 + 5);
    if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
      std::string::__init_copy_ctor_external(&v100, v118.__r_.__value_.__l.__data_, v118.__r_.__value_.__l.__size_);
    else
      v100 = v118;
    v101 = v119;
    v102 = v120;
    *(_OWORD *)__p = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
    v24 = v100.__r_.__value_.__r.__words[2];
    memset(&v100, 0, sizeof(v100));
    v139 = v119;
    *(_QWORD *)&__p[16] = v24;
    v140 = v120;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder((uint64_t)v103, (uint64_t)v19, (uint64_t)__p, v20, v21, (uint64_t)llvm::jitlink::getELFAArch32EdgeKindName);
    if ((__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    v103[0] = (llvm::jitlink::LinkGraph *)&off_251C15A78;
    v116 = v9;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::buildGraph((uint64_t)v103, a2);
    v103[0] = (llvm::jitlink::LinkGraph *)off_251C159F8;
    MEMORY[0x24BD1B398](v113, 8);
    MEMORY[0x24BD1B398](v111[0], 8);
    MEMORY[0x24BD1B398](v109[0], 8);
    v25 = v103[1];
    v103[0] = (llvm::jitlink::LinkGraph *)&off_251C159D8;
    v103[1] = 0;
    if (v25)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v25);
      MEMORY[0x24BD1B3A4]();
    }
    if ((SHIBYTE(v100.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_183;
    v11 = (void *)v100.__r_.__value_.__r.__words[0];
    goto LABEL_182;
  }
  if ((_DWORD)v119 == 35)
    goto LABEL_19;
  if ((_DWORD)v119 == 36)
    goto LABEL_17;
LABEL_10:
  std::operator+<char>();
  v10 = operator new();
  LOWORD(v106) = 260;
  v103[0] = (llvm::jitlink::LinkGraph *)__p;
  *(_QWORD *)v10 = off_251C15728;
  llvm::Twine::str(v103, (std::string *)(v10 + 8));
  *(_BYTE *)(a2 + 8) |= 1u;
  *(_QWORD *)a2 = v10;
  if ((__p[23] & 0x80000000) != 0)
  {
    v11 = *(void **)__p;
LABEL_182:
    operator delete(v11);
  }
LABEL_183:
  if (SHIBYTE(v118.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v118.__r_.__value_.__l.__data_);
  v96 = v136;
  v136 = 0;
  if (v96)
    (*(void (**)(llvm::object::ObjectFile *))(*(_QWORD *)v96 + 8))(v96);
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::buildGraph(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_WORD *)(**(_QWORD **)(a1 + 24) + 16) == 1)
  {
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::prepare(a1, &v5);
    v4 = v5;
    if (v5
      || (llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::graphifySections(a1, &v5), (v4 = v5) != 0)|| (llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::graphifySymbols(a1, &v5), (v4 = v5) != 0)|| ((*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v5, a1), (v4 = v5) != 0))
    {
      *(_BYTE *)(a2 + 8) |= 1u;
    }
    else
    {
      *(_BYTE *)(a2 + 8) &= ~1u;
      v4 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  else
  {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Object is not a relocatable ELF file", &v6);
    *(_BYTE *)(a2 + 8) |= 1u;
    v4 = v6;
  }
  *(_QWORD *)a2 = v4;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::~ELFLinkGraphBuilder_aarch32(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C159F8;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::~ELFLinkGraphBuilder_aarch32(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15A38;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

void llvm::jitlink::link_ELF_aarch32(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  llvm::Triple *v4;
  uint64_t ArchName;
  unint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  int64x2_t v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  int64x2_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  unint64_t v32;
  char *v33;
  uint64_t v34;
  __int128 *v35;
  __int128 *v36;
  uint64_t v37;
  int64x2_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  llvm::jitlink::LinkGraph *v44;
  uint64_t v45;
  int64x2_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  __int128 v54;
  _QWORD *v55;
  llvm::jitlink::LinkGraph *v56;
  uint64_t v57;
  uint64_t v58;
  int64x2_t v59;
  _OWORD v60[2];
  __int128 v61;
  _OWORD v62[2];
  __int128 v63;
  uint64_t v64;
  _BYTE v65[24];
  __int128 v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  __int128 v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v73;
  llvm::jitlink::LinkGraph *v74;
  uint64_t v75;
  __int128 v76;
  char *v77;
  __int128 v78;
  uint64_t v79;
  _QWORD v80[3];
  _QWORD v81[3];
  _QWORD v82[3];
  _QWORD v83[6];

  v83[3] = *MEMORY[0x24BDAC8D0];
  v4 = (llvm::jitlink::LinkGraph *)((char *)*a1 + 120);
  ArchName = llvm::Triple::getArchName(v4);
  v7 = (*((_DWORD *)&llvm::ARM::ARMArchNames + 18 * llvm::ARM::parseArch(ArchName, v6) + 17) - 10) & 0xFFFFFFFB;
  if (v7)
    v8 = 0;
  else
    v8 = 0x100000001;
  v64 = 0;
  v63 = 0u;
  v61 = 0u;
  memset(v62, 0, sizeof(v62));
  memset(v60, 0, sizeof(v60));
  v59 = 0u;
  if ((*(unsigned int (**)(uint64_t, llvm::Triple *))(*(_QWORD *)*a2 + 56))(*a2, v4))
  {
    (*(void (**)(__int128 *__return_ptr, uint64_t, llvm::Triple *))(*(_QWORD *)*a2 + 64))(&v78, *a2, v4);
    if (v80[0] < 8uLL)
    {
      *(_QWORD *)&v76 = llvm::jitlink::markAllSymbolsLive;
      v77 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
          + 2;
      if (v59.i64[1] >= *(_QWORD *)&v60[0])
      {
        v15 = (v59.i64[1] - v59.i64[0]) >> 5;
        if ((unint64_t)(v15 + 1) >> 59)
          goto LABEL_70;
        v16 = (*(_QWORD *)&v60[0] - v59.i64[0]) >> 4;
        if (v16 <= v15 + 1)
          v16 = v15 + 1;
        if (*(_QWORD *)&v60[0] - v59.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v17 = 0x7FFFFFFFFFFFFFFLL;
        else
          v17 = v16;
        *((_QWORD *)&v66 + 1) = v60;
        if (v17)
          v18 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v60, v17);
        else
          v18 = 0;
        v23 = (uint64_t)&v18[32 * v15];
        *(_QWORD *)v65 = v18;
        *(_QWORD *)&v65[8] = v23;
        *(_QWORD *)&v66 = &v18[32 * v17];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v23, &v76);
        v10 = v23 + 32;
        *(_QWORD *)&v65[16] = v23 + 32;
        v24 = (__int128 *)v59.i64[1];
        v25 = *(_QWORD *)&v65[8];
        if (v59.i64[1] == v59.i64[0])
        {
          v26 = vdupq_n_s64(v59.u64[1]);
        }
        else
        {
          do
          {
            v24 -= 2;
            v25 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v25 - 32, v24);
          }
          while (v24 != (__int128 *)v59.i64[0]);
          v26 = v59;
          v10 = *(_QWORD *)&v65[16];
        }
        v59.i64[0] = v25;
        v59.i64[1] = v10;
        *(int64x2_t *)&v65[8] = v26;
        v28 = *(_QWORD *)&v60[0];
        *(_QWORD *)&v60[0] = v66;
        *(_QWORD *)&v66 = v28;
        *(_QWORD *)v65 = v26.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v65);
      }
      else
      {
        v10 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v59.i64[1], &v76)+ 32;
      }
      v59.i64[1] = v10;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v76);
    }
    else
    {
      if (v59.i64[1] >= *(_QWORD *)&v60[0])
      {
        v11 = (v59.i64[1] - v59.i64[0]) >> 5;
        if ((unint64_t)(v11 + 1) >> 59)
          goto LABEL_70;
        v12 = (*(_QWORD *)&v60[0] - v59.i64[0]) >> 4;
        if (v12 <= v11 + 1)
          v12 = v11 + 1;
        if (*(_QWORD *)&v60[0] - v59.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v13 = 0x7FFFFFFFFFFFFFFLL;
        else
          v13 = v12;
        *((_QWORD *)&v66 + 1) = v60;
        if (v13)
          v14 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v60, v13);
        else
          v14 = 0;
        v19 = (uint64_t)&v14[32 * v11];
        *(_QWORD *)v65 = v14;
        *(_QWORD *)&v65[8] = v19;
        *(_QWORD *)&v66 = &v14[32 * v13];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v19, &v78);
        v9 = v19 + 32;
        *(_QWORD *)&v65[16] = v19 + 32;
        v20 = (__int128 *)v59.i64[1];
        v21 = *(_QWORD *)&v65[8];
        if (v59.i64[1] == v59.i64[0])
        {
          v22 = vdupq_n_s64(v59.u64[1]);
        }
        else
        {
          do
          {
            v20 -= 2;
            v21 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v21 - 32, v20);
          }
          while (v20 != (__int128 *)v59.i64[0]);
          v22 = v59;
          v9 = *(_QWORD *)&v65[16];
        }
        v59.i64[0] = v21;
        v59.i64[1] = v9;
        *(int64x2_t *)&v65[8] = v22;
        v27 = *(_QWORD *)&v60[0];
        *(_QWORD *)&v60[0] = v66;
        *(_QWORD *)&v66 = v27;
        *(_QWORD *)v65 = v22.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v65);
      }
      else
      {
        v9 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v59.i64[1], &v78)+ 32;
      }
      v59.i64[1] = v9;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v78);
    if (v7)
      goto LABEL_58;
    *(_QWORD *)&v78 = llvm::jitlink::buildTables_ELF_aarch32<(llvm::jitlink::aarch32::StubsFlavor)1>;
    v80[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
    if (*(_QWORD *)&v60[1] < *((_QWORD *)&v60[1] + 1))
    {
      v29 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v60[1], &v78)+ 32;
LABEL_57:
      *(_QWORD *)&v60[1] = v29;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v78);
      goto LABEL_58;
    }
    v30 = (uint64_t)(*(_QWORD *)&v60[1] - *((_QWORD *)&v60[0] + 1)) >> 5;
    if (!((unint64_t)(v30 + 1) >> 59))
    {
      v31 = (uint64_t)(*((_QWORD *)&v60[1] + 1) - *((_QWORD *)&v60[0] + 1)) >> 4;
      if (v31 <= v30 + 1)
        v31 = v30 + 1;
      if (*((_QWORD *)&v60[1] + 1) - *((_QWORD *)&v60[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
        v32 = 0x7FFFFFFFFFFFFFFLL;
      else
        v32 = v31;
      *((_QWORD *)&v66 + 1) = (char *)&v60[1] + 8;
      if (v32)
        v33 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v60[1] + 8, v32);
      else
        v33 = 0;
      v34 = (uint64_t)&v33[32 * v30];
      *(_QWORD *)v65 = v33;
      *(_QWORD *)&v65[8] = v34;
      *(_QWORD *)&v66 = &v33[32 * v32];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v34, &v78);
      v29 = v34 + 32;
      *(_QWORD *)&v65[16] = v34 + 32;
      v36 = (__int128 *)*((_QWORD *)&v60[0] + 1);
      v35 = *(__int128 **)&v60[1];
      v37 = *(_QWORD *)&v65[8];
      if (*(_QWORD *)&v60[1] == *((_QWORD *)&v60[0] + 1))
      {
        v38 = vdupq_n_s64(*(unint64_t *)&v60[1]);
      }
      else
      {
        do
        {
          v35 -= 2;
          v37 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v37 - 32, v35);
        }
        while (v35 != v36);
        v38 = *(int64x2_t *)((char *)v60 + 8);
        v29 = *(_QWORD *)&v65[16];
      }
      *((_QWORD *)&v60[0] + 1) = v37;
      *(_QWORD *)&v60[1] = v29;
      *(int64x2_t *)&v65[8] = v38;
      v39 = *((_QWORD *)&v60[1] + 1);
      *((_QWORD *)&v60[1] + 1) = v66;
      *(_QWORD *)&v66 = v39;
      *(_QWORD *)v65 = v38.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v65);
      goto LABEL_57;
    }
LABEL_70:
    abort();
  }
LABEL_58:
  (*(void (**)(_BYTE *__return_ptr, uint64_t, llvm::jitlink::LinkGraph *, int64x2_t *))(*(_QWORD *)*a2 + 72))(v65, *a2, *a1, &v59);
  if (*(_QWORD *)v65)
  {
    v40 = *a2;
    v58 = *(_QWORD *)v65;
    *(_QWORD *)v65 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v40 + 24))(v40, &v58);
    if (v58)
      (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
    v41 = *(_QWORD *)v65;
    if (*(_QWORD *)v65)
LABEL_62:
      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
  }
  else
  {
    v42 = (_QWORD *)operator new();
    v43 = *a2;
    *a2 = 0;
    v44 = *a1;
    *a1 = 0;
    v45 = *(_QWORD *)&v60[0];
    v46 = v59;
    v59 = 0uLL;
    v47 = *((_QWORD *)&v60[1] + 1);
    v48 = *(_OWORD *)((char *)v60 + 8);
    memset(v60, 0, sizeof(v60));
    v49 = *(_QWORD *)&v62[0];
    v50 = v61;
    v61 = 0uLL;
    v51 = *((_QWORD *)&v62[1] + 1);
    v52 = *(_OWORD *)((char *)v62 + 8);
    memset(v62, 0, sizeof(v62));
    v53 = v64;
    v54 = v63;
    v63 = 0uLL;
    v64 = 0;
    v74 = v44;
    v75 = v43;
    *(int64x2_t *)v65 = v46;
    v78 = 0uLL;
    v66 = v48;
    *(_QWORD *)&v65[16] = v45;
    v67 = v47;
    v79 = 0;
    memset(v80, 0, sizeof(v80));
    v68 = v50;
    memset(v81, 0, sizeof(v81));
    v70 = v52;
    v69 = v49;
    v71 = v51;
    memset(v82, 0, sizeof(v82));
    v72 = v54;
    v73 = v53;
    memset(v83, 0, 24);
    llvm::jitlink::JITLinkerBase::JITLinkerBase(v42, &v75, (uint64_t *)&v74, (uint64_t)v65);
    *v55 = &off_251C15BA0;
    *(_QWORD *)&v76 = &v72;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v76);
    *(_QWORD *)&v76 = &v70;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v76);
    *(_QWORD *)&v76 = &v68;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v76);
    *(_QWORD *)&v76 = &v66;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v76);
    *(_QWORD *)&v76 = v65;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v76);
    v56 = v74;
    v74 = 0;
    if (v56)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v56);
      MEMORY[0x24BD1B3A4]();
    }
    v57 = v75;
    v75 = 0;
    if (v57)
      (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
    *v42 = &off_251C15B78;
    v42[19] = v8;
    *(_QWORD *)v65 = v83;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v65);
    *(_QWORD *)v65 = v82;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v65);
    *(_QWORD *)v65 = v81;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v65);
    *(_QWORD *)v65 = v80;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v65);
    *(_QWORD *)v65 = &v78;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v65);
    *(_QWORD *)v65 = v42;
    llvm::jitlink::JITLinkerBase::linkPhase1((uint64_t)v42, (uint64_t *)v65);
    v41 = *(_QWORD *)v65;
    *(_QWORD *)v65 = 0;
    if (v41)
      goto LABEL_62;
  }
  *(_QWORD *)v65 = &v63;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v65);
  *(_QWORD *)v65 = (char *)v62 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v65);
  *(_QWORD *)v65 = &v61;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v65);
  *(_QWORD *)v65 = (char *)v60 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v65);
  *(_QWORD *)v65 = &v59;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v65);
}

uint64_t llvm::jitlink::buildTables_ELF_aarch32<(llvm::jitlink::aarch32::StubsFlavor)1>@<X0>(llvm::jitlink::LinkGraph *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t *v4;
  char *v5;
  char *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  _OWORD *v9;
  int v10;
  uint64_t v11;
  _QWORD *Entry;
  unint64_t *v13;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  __int128 v18;
  _QWORD *v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  _OWORD v24[4];
  _OWORD v25[8];
  _OWORD v26[4];
  char *v27;
  char *v28;

  v16 = 0;
  v17 = 0;
  llvm::jitlink::LinkGraph::blocks(a1, v25);
  v26[0] = v25[0];
  v26[1] = v25[1];
  v26[2] = v25[2];
  v26[3] = v25[3];
  llvm::jitlink::LinkGraph::blocks(a1, &v18);
  v24[0] = v20;
  v24[1] = v21;
  v24[2] = v22;
  v24[3] = v23;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v27, v26, (uint64_t *)v24);
  v5 = v27;
  v6 = v28;
  if (v27 != v28)
  {
    do
    {
      v7 = *(unsigned __int8 **)(*(_QWORD *)v5 + 40);
      v8 = *(unsigned __int8 **)(*(_QWORD *)v5 + 48);
      while (v7 != v8)
      {
        v9 = *(_OWORD **)v7;
        if ((*(_BYTE *)(*(_QWORD *)(*(_QWORD *)v7 + 16) + 8) & 1) == 0 && v7[24] - 5 <= 1)
        {
          v25[0] = *v9;
          *(_QWORD *)&v18 = 0;
          v10 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(&v15, (uint64_t)v25, &v18, v4);
          v11 = v18;
          if (!v10)
            v11 = v15 + 24 * v16;
          if (v11 == v15 + 24 * v16)
          {
            Entry = llvm::jitlink::aarch32::StubsManager<(llvm::jitlink::aarch32::StubsFlavor)1>::createEntry((uint64_t)&v15, (uint64_t)a1, (uint64_t)v9);
            v18 = *v9;
            v19 = Entry;
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)&v15, &v18, &v19, v13, (uint64_t)v25);
            v11 = *(_QWORD *)&v25[0];
          }
          *(_QWORD *)v7 = *(_QWORD *)(v11 + 16);
        }
        v7 += 32;
      }
      v5 += 8;
    }
    while (v5 != v6);
    v5 = v27;
  }
  if (v5)
  {
    v28 = v5;
    operator delete(v5);
  }
  *a2 = 0;
  return MEMORY[0x24BD1B398](v15, 8);
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::makeTargetFlags()
{
  return 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRawOffset(uint64_t a1, uint64_t a2)
{
  return *(unsigned int *)(a2 + 4);
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::excludeSection()
{
  return 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)0,false>>::makeTargetFlags()
{
  return 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRawOffset(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4));
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)0,false>>::excludeSection()
{
  return 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFLinkGraphBuilder(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, size_t __len, uint64_t a6)
{
  uint64_t v10;
  void *__p[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *__dst[2];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (__src)
  {
    std::string::basic_string[abi:nn180100](__dst, __src, __len);
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    v17 = 0;
  }
  *(_OWORD *)__p = *(_OWORD *)a3;
  v13 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v14 = *(_OWORD *)(a3 + 24);
  v15 = *(_QWORD *)(a3 + 40);
  v10 = operator new();
  v18 = *(_OWORD *)__dst;
  v19 = v17;
  __dst[0] = 0;
  __dst[1] = 0;
  v17 = 0;
  llvm::jitlink::LinkGraph::LinkGraph(v10, &v18, (__int128 *)__p, 4, 1, a6);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
  *(_QWORD *)a1 = &off_251C159D8;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)a1 = off_251C159F8;
  *(_QWORD *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  return a1;
}

void llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::~ELFLinkGraphBuilder_aarch32(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C159F8;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::addRelocations(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t GraphBlock;
  _QWORD *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t i;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t GraphSymbol;
  uint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int *v30;
  unsigned __int8 *v31;
  __int128 v32;
  __int128 v33;
  _QWORD v34[2];
  _QWORD v35[2];
  uint64_t (**v36)(llvm::detail::format_adapter *__hidden);
  int v37;
  _QWORD v38[4];
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  char v44;
  unsigned int *v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  _UNKNOWN **v50;
  uint64_t v51;
  char v52;
  uint64_t v53;

  v53 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = *(unsigned int **)(a1 + 32);
    v6 = &v5[10 * v3];
    v31 = (unsigned __int8 *)(a1 + 152);
    do
    {
      if (v5[1] == 9)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(*(_QWORD **)(a1 + 24), v5[7], (uint64_t)&v45);
        if ((v46 & 1) != 0)
        {
          v25 = v45;
          *a2 = (uint64_t)v45;
        }
        else
        {
          v7 = *(_QWORD **)(a1 + 24);
          *(_QWORD *)&v32 = llvm::object::defaultWarningHandler;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(v7, v45, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v32, (uint64_t)&v43);
          if ((v44 & 1) != 0)
          {
            v26 = v43;
            *(_QWORD *)&v43 = 0;
            *a2 = v26;
          }
          else if ((*(_BYTE *)(a1 + 72)
                  || (v32 = v43,
                      std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&v32) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278]))&& !(*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 40))(a1, v45))
          {
            GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v5[7]);
            if (GraphBlock)
            {
              v9 = (_QWORD *)GraphBlock;
              llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>(*(_QWORD **)(a1 + 24), v5, (uint64_t)&v40);
              v10 = v40;
              if ((v42 & 1) != 0)
              {
                v40 = 0;
              }
              else
              {
                if (v41)
                {
                  v11 = (unsigned __int8 *)(v40 + 4);
                  for (i = 8 * v41; i; i -= 8)
                  {
                    v13 = v45;
                    v14 = *(_DWORD *)v11;
                    v15 = *(_DWORD *)v11 >> 8;
                    v39 = v15;
                    if (v14 > 0xFF)
                    {
                      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(*(_QWORD **)(a1 + 24), *(unsigned int **)(a1 + 48), v15, (uint64_t)&v51);
                      if ((v52 & 1) != 0)
                      {
                        v21 = v51;
                        v51 = 0;
LABEL_30:
                        *a2 = v21;
                        goto LABEL_31;
                      }
                    }
                    else
                    {
                      v52 = 0;
                      v51 = 0;
                    }
                    GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v15);
                    if (GraphSymbol)
                    {
                      v17 = GraphSymbol;
                      llvm::jitlink::getJITLinkEdgeKind((llvm::jitlink *)&v49, *v11);
                      if ((v50 & 1) != 0)
                      {
                        v21 = v49;
                        goto LABEL_30;
                      }
                      v18 = *((_DWORD *)v11 - 1) + v13[3] - *(_DWORD *)v9;
                      *(_QWORD *)&v32 = v17;
                      DWORD2(v32) = v18;
                      *(_QWORD *)&v33 = 0;
                      BYTE8(v33) = v49;
                      v19 = *(_QWORD *)(a1 + 8);
                      if (v49 > 3u)
                      {
                        if (v49 == 4)
                          llvm::jitlink::aarch32::readAddendArm(v19, (uint64_t)v9, (uint64_t)&v32, (uint64_t)&v47);
                        else
                          llvm::jitlink::aarch32::readAddendThumb(v19, (uint64_t)v9, (uint64_t)&v32, v31, (uint64_t)&v47);
                      }
                      else
                      {
                        llvm::jitlink::aarch32::readAddendData(v19, (uint64_t)v9, (uint64_t)&v32, (uint64_t)&v47);
                      }
                      if ((v48 & 1) != 0)
                      {
                        v21 = v47;
                        goto LABEL_30;
                      }
                      *(_QWORD *)&v33 = v47;
                      llvm::jitlink::Block::addEdge(v9, &v32);
                      v22 = v48;
                      *a2 = 0;
                      if ((v22 & 1) != 0)
                      {
                        v23 = v47;
                        v47 = 0;
                        if (v23)
                          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
                      }
                    }
                    else
                    {
                      v20 = *(_DWORD *)(a1 + 112);
                      *(_QWORD *)&v32 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {"
                                        "0}, shndx: {1} Size of table: {2}";
                      *((_QWORD *)&v32 + 1) = 113;
                      *(_QWORD *)&v33 = v38;
                      *((_QWORD *)&v33 + 1) = 3;
                      v34[0] = &off_251C158D8;
                      v34[1] = &v39;
                      v35[0] = &off_251C15AB8;
                      v35[1] = v51 + 14;
                      v36 = &off_251C15650;
                      v37 = v20;
                      v38[0] = v34;
                      v38[1] = v35;
                      v38[2] = &v36;
                      getErrorErrorCat();
                      v49 = 3;
                      v50 = &getErrorErrorCat(void)::ErrorErrorCat;
                      llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>((llvm::formatv_object_base *)&v32, &v49, a2);
                    }
LABEL_31:
                    if ((v52 & 1) != 0)
                    {
                      v24 = v51;
                      v51 = 0;
                      if (v24)
                        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
                    }
                    if (*a2)
                      goto LABEL_45;
                    v11 += 8;
                  }
                }
                v10 = 0;
              }
              *a2 = v10;
LABEL_45:
              if ((v42 & 1) != 0)
              {
                v28 = v40;
                v40 = 0;
                if (v28)
                  (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
              }
            }
            else
            {
              LOWORD(v34[0]) = 1283;
              *(_QWORD *)&v32 = "Refencing a section that wasn't added to the graph: ";
              v33 = v43;
              getErrorErrorCat();
              v27 = operator new();
              *(_QWORD *)v27 = off_251C127D0;
              llvm::Twine::str((llvm::formatv_object_base **)&v32, (std::string *)(v27 + 8));
              *(_QWORD *)(v27 + 32) = 3;
              *(_QWORD *)(v27 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
              *(_BYTE *)(v27 + 48) = 1;
              *a2 = v27;
            }
          }
          else
          {
            *a2 = 0;
          }
          if ((v44 & 1) != 0)
          {
            v29 = v43;
            *(_QWORD *)&v43 = 0;
            if (v29)
              (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
          }
          if ((v46 & 1) != 0)
          {
            v30 = v45;
            v45 = 0;
            if (v30)
              (*(void (**)(unsigned int *))(*(_QWORD *)v30 + 8))(v30);
          }
          v25 = (unsigned int *)*a2;
        }
        if (v25)
          return;
      }
      else
      {
        *a2 = 0;
      }
      v5 += 10;
    }
    while (v5 != v6);
  }
  *a2 = 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::makeTargetFlags(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) & 1;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::getRawOffset(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) & 0xFFFFFFFE;
}

BOOL llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)1>::excludeSection(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 1879048193;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  llvm::formatv_object_base *v8[4];
  __int16 v9;
  unsigned int v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v11);
  if ((v12 & 1) != 0)
  {
    v5 = v11[0];
    v6 = *(_BYTE *)(a3 + 8) | 1;
    goto LABEL_5;
  }
  if (v11[1] > (unint64_t)a2)
  {
    v5 = v11[0] + 40 * a2;
    v6 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a3 + 8) = v6;
    *(_QWORD *)a3 = v5;
    return;
  }
  v8[0] = (llvm::formatv_object_base *)"invalid section index: ";
  v8[2] = (llvm::formatv_object_base *)a2;
  v9 = 2051;
  v10 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v8, &v10, (uint64_t *)a3);
  *(_BYTE *)(a3 + 8) |= 1u;
  if ((v12 & 1) != 0)
  {
    v7 = v11[0];
    v11[0] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v11 = v16[0];
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v12 = v14[0];
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v10 = v14[0];
        v14[0] = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    if ((v17 & 1) != 0)
    {
      v13 = v16[0];
      v16[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void llvm::object::defaultWarningHandler(llvm::formatv_object_base **this@<X0>, uint64_t *a2@<X8>)
{
  unsigned int v3;

  v3 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(this, &v3, a2);
}

{
  unsigned int v3;

  v3 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(this, &v3, a2);
}

{
  unsigned int v3;

  v3 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(this, &v3, a2);
}

{
  unsigned int v3;

  v3 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(this, &v3, a2);
}

{
  unsigned int v3;

  v3 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(this, &v3, a2);
}

{
  unsigned int v3;

  v3 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(this, &v3, a2);
}

{
  unsigned int v3;

  v3 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(this, &v3, a2);
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(uint64_t a1, int a2)
{
  int v3;
  uint64_t result;
  int v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)(a1 + 80), &v5, &v6);
  result = 0;
  if (v3)
  {
    if (v6 != *(_QWORD *)(a1 + 80) + 16 * *(unsigned int *)(a1 + 96))
      return *(_QWORD *)(v6 + 8);
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  llvm::formatv_object_base *v16[2];
  uint64_t *v17;
  __int16 v18;
  uint64_t v19;
  unsigned int v20;

  v3 = *a1;
  v4 = *(unsigned int *)(*a1 + 32);
  if (!(_DWORD)v4)
  {
    v9 = a1[2];
    v10 = a1[3];
    if (v9 == v10)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = 0xCCCCCCCCCCCCCCCDLL * ((v10 - v9) >> 3);
    }
    return;
  }
  v5 = (uint64_t *)*(unsigned __int16 *)(v3 + 46);
  if (v5 != (uint64_t *)40)
  {
    v16[0] = (llvm::formatv_object_base *)"invalid e_shentsize in ELF header: ";
    v17 = v5;
    v18 = 2307;
    LODWORD(v14) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v16, (unsigned int *)&v14, &v19);
    *(_BYTE *)(a2 + 16) |= 1u;
    v8 = v19;
    goto LABEL_12;
  }
  v6 = a1[1];
  if (v4 > 0xFFFFFFD7 || v4 + 40 > v6)
  {
    v14 = *(unsigned int *)(*a1 + 32);
    v16[0] = (llvm::formatv_object_base *)"section header table goes past the end of the file: e_shoff = 0x";
    v17 = &v14;
    v18 = 3587;
    v20 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v16, &v20, &v15);
    *(_BYTE *)(a2 + 16) |= 1u;
    v8 = v15;
LABEL_12:
    *(_QWORD *)a2 = v8;
    return;
  }
  v11 = v3 + v4;
  v12 = *(unsigned __int16 *)(v3 + 48);
  if (!v12)
    v12 = *(_DWORD *)(v11 + 20);
  if (v4 + 40 * (unint64_t)v12 > v6)
  {
    v16[0] = (llvm::formatv_object_base *)"section table goes past the end of file";
    v18 = 259;
    LODWORD(v14) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v16, (unsigned int *)&v14, &v13);
    *(_BYTE *)(a2 + 16) |= 1u;
    v8 = v13;
    goto LABEL_12;
  }
  *(_BYTE *)(a2 + 16) &= ~1u;
  *(_QWORD *)a2 = v11;
  *(_QWORD *)(a2 + 8) = v12;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  llvm::formatv_object_base *v13[4];
  __int16 v14;
  uint64_t v15;
  unsigned int v16;

  v7 = *(unsigned __int16 *)(*a1 + 50);
  if (v7 != 0xFFFF)
  {
    if (*(_WORD *)(*a1 + 50))
    {
LABEL_3:
      if (a3 > v7)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(a1, a2 + 40 * v7, a4, a5, a6);
        return;
      }
      v10[0] = "section header string table index ";
      v10[2] = v7;
      v11 = 2051;
      v13[0] = (llvm::formatv_object_base *)v10;
      v13[2] = (llvm::formatv_object_base *)" does not exist";
      v14 = 770;
      v16 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v13, &v16, &v12);
      *(_BYTE *)(a6 + 16) |= 1u;
      v9 = v12;
      goto LABEL_10;
    }
LABEL_7:
    *(_BYTE *)(a6 + 16) &= ~1u;
    v8 = a1[6];
    *(_QWORD *)a6 = a1[5];
    *(_QWORD *)(a6 + 8) = v8;
    return;
  }
  if (a3)
  {
    v7 = *(_DWORD *)(a2 + 24);
    if (v7)
      goto LABEL_3;
    goto LABEL_7;
  }
  v13[0] = (llvm::formatv_object_base *)"e_shstrndx == SHN_XINDEX, but the section header table is empty";
  v14 = 259;
  LODWORD(v10[0]) = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v13, (unsigned int *)v10, &v15);
  *(_BYTE *)(a6 + 16) |= 1u;
  v9 = v15;
LABEL_10:
  *(_QWORD *)a6 = v9;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  std::string::size_type v17;
  _QWORD v18[4];
  __int16 v19;
  llvm::formatv_object_base *v20[4];
  __int16 v21;
  uint64_t v22;
  unsigned int v23;

  v6 = *a2;
  if ((_DWORD)v6)
  {
    if (a4 <= v6)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v14);
      v9 = std::string::insert(&v14, 0, "a section ");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v15, " has an invalid sh_name (0x");
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v17 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v13 = v6;
      v18[0] = __p;
      v18[2] = &v13;
      v19 = 3588;
      v20[0] = (llvm::formatv_object_base *)v18;
      v20[2] = (llvm::formatv_object_base *)") offset which goes past the end of the section name string table";
      v21 = 770;
      v23 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v20, &v23, &v22);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v22;
      v22 = 0;
      if (SHIBYTE(v17) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = (const char *)(a3 + v6);
      v8 = strlen(v7);
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v8;
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) &= ~1u;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  llvm::formatv_object_base *ELFSectionTypeName;
  llvm::formatv_object_base *v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  std::string v29;
  uint64_t v30;
  std::string v31;
  std::string v32;
  llvm::formatv_object_base *v33[4];
  __int16 v34;
  unsigned int v35;
  __int128 v36;
  std::string::size_type v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4) != 3)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, a2, &v31);
    v10 = std::string::insert(&v31, 0, "invalid sh_type for string table section ");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v32, ": expected SHT_STRTAB, but got ");
    v13 = v12->__r_.__value_.__r.__words[2];
    v36 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v37 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    ELFSectionTypeName = (llvm::formatv_object_base *)llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), *(_DWORD *)(a2 + 4));
    v33[0] = (llvm::formatv_object_base *)&v36;
    v33[2] = ELFSectionTypeName;
    v33[3] = v15;
    v34 = 1284;
    a3(&v29, a4, v33);
    if (SHIBYTE(v37) < 0)
      operator delete((void *)v36);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v16 = v29.__r_.__value_.__r.__words[0];
    if (v29.__r_.__value_.__r.__words[0])
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v16;
      return;
    }
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v36);
  v17 = v36;
  if ((v37 & 1) != 0)
  {
    *(_QWORD *)&v36 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v17;
  }
  else
  {
    v18 = *((_QWORD *)&v36 + 1);
    if (!*((_QWORD *)&v36 + 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, a2, &v29);
      v23 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v31, " is empty");
      v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = (llvm::formatv_object_base *)&v32;
      v35 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v33, &v35, &v30);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v30;
      v30 = 0;
      goto LABEL_16;
    }
    if (*(_BYTE *)(*((_QWORD *)&v36 + 1) + v36 - 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, a2, &v29);
      v19 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v31, " is non-null terminated");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = (llvm::formatv_object_base *)&v32;
      v35 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v33, &v35, &v28);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v28;
      v28 = 0;
LABEL_16:
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      goto LABEL_23;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v17;
    *(_QWORD *)(a5 + 8) = v18;
  }
LABEL_23:
  if ((v37 & 1) != 0)
  {
    v27 = v36;
    *(_QWORD *)&v36 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string v11;
  std::string v12;
  std::string::size_type v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v9 = v13[0];
    v13[0] = 0;
    v12.__r_.__value_.__r.__words[0] = v9;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v12);
    if (v12.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v12.__r_.__value_.__l.__data_ + 8))(v12.__r_.__value_.__r.__words[0]);
    std::string::basic_string[abi:nn180100]<0>(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v11, 0xCCCCCCCCCCCCCCCDLL * ((int64_t)(a2 - v13[0]) >> 3));
    v5 = std::string::insert(&v11, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v12, "]");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    a3[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  if ((v14 & 1) != 0)
  {
    v10 = v13[0];
    v13[0] = 0;
    if (v10)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v10 + 8))(v10);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<char>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  void *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  std::string::size_type v16;
  uint64_t v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string v20;
  std::string v21;
  std::string v22;
  __int16 v23;
  void *__p[2];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  std::string v28;
  _QWORD v29[2];
  std::string *v30;
  __int16 v31;
  _QWORD v32[2];
  const char *v33;
  __int16 v34;
  _QWORD v35[2];
  std::string *v36;
  __int16 v37;
  llvm::formatv_object_base *v38[2];
  const char *v39;
  __int16 v40;
  uint64_t v41;
  unsigned int v42;

  v6 = *(unsigned int *)(a2 + 16);
  v5 = *(unsigned int *)(a2 + 20);
  if (__CFADD__((_DWORD)v6, (_DWORD)v5))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, a2, &v28);
    v7 = std::string::insert(&v28, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v22, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v25 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v21.__r_.__value_.__r.__words[0] = v6;
    v29[0] = __p;
    v30 = &v21;
    v31 = 3588;
    v32[0] = v29;
    v33 = ") + sh_size (0x";
    v34 = 770;
    v20.__r_.__value_.__r.__words[0] = v5;
    v35[0] = v32;
    v36 = &v20;
    v37 = 3586;
    v38[0] = (llvm::formatv_object_base *)v35;
    v39 = ") that cannot be represented";
    v40 = 770;
    LODWORD(v19) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v38, (unsigned int *)&v19, &v41);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v41;
    v41 = 0;
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_16:
      operator delete(v11);
    }
  }
  else if (a1[1] >= (unint64_t)(v5 + v6))
  {
    v16 = *a1 + v6;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v5;
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, a2, &v20);
    v12 = std::string::insert(&v20, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v21, " has a sh_offset (0x");
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v18 = v5;
    v19 = v6;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    v22.__r_.__value_.__r.__words[2] = (std::string::size_type)&v19;
    v23 = 3588;
    __p[0] = &v22;
    v25 = ") + sh_size (0x";
    v26 = 770;
    v29[0] = __p;
    v30 = (std::string *)&v18;
    v31 = 3586;
    v32[0] = v29;
    v33 = ") that is greater than the file size (0x";
    v34 = 770;
    v17 = a1[1];
    v35[0] = v32;
    v36 = (std::string *)&v17;
    v37 = 3586;
    v38[0] = (llvm::formatv_object_base *)v35;
    v39 = ")";
    v40 = 770;
    v42 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v38, &v42, &v27);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v27;
    v27 = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = (void *)v20.__r_.__value_.__r.__words[0];
      goto LABEL_16;
    }
  }
}

uint64_t llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>(uint64_t (**a1)(uint64_t), uint64_t a2)
{
  return (*a1)(a2);
}

const char **std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>(const char **a1, const char **a2, uint64_t a3)
{
  const char **v3;
  const void *v5;
  size_t v6;

  v3 = a1;
  if (a1 != a2)
  {
    v5 = *(const void **)a3;
    v6 = *(_QWORD *)(a3 + 8);
    do
    {
      if (*v3)
      {
        if (strlen(*v3) == v6 && (!v6 || !memcmp(*v3, v5, v6)))
          return v3;
      }
      else if (!v6)
      {
        return v3;
      }
      ++v3;
    }
    while (v3 != a2);
    return a2;
  }
  return v3;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>,false>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  const char *v16;
  void *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string v31;
  std::string v32;
  std::string v33;
  __int16 v34;
  std::string v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  void *__p[2];
  std::string *v41;
  __int16 v42;
  uint64_t v43;
  _QWORD v44[2];
  std::string *v45;
  __int16 v46;
  _QWORD v47[2];
  std::string *v48;
  __int16 v49;
  llvm::formatv_object_base *v50[2];
  const char *v51;
  __int16 v52;
  uint64_t v53;
  unsigned int v54;

  if (a2[9] == 8)
  {
    v6 = a2[5];
    if ((v6 & 7) != 0)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v39);
      v7 = std::string::insert(&v39, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v33, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v35;
      v41 = (std::string *)v6;
      v42 = 2052;
      v44[0] = __p;
      v45 = (std::string *)") which is not a multiple of its sh_entsize (";
      v46 = 770;
      v11 = (std::string *)a2[9];
      v47[0] = v44;
      v48 = v11;
      v49 = 2050;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ")";
      v52 = 770;
      LODWORD(v32.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v43);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v43;
      v43 = 0;
    }
    else
    {
      v18 = a2[4];
      if (!__CFADD__((_DWORD)v18, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v18))
        {
          v27 = *a1 + v18;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v27;
          *(_QWORD *)(a3 + 8) = v6 >> 3;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v31);
        v23 = std::string::insert(&v31, 0, "section ");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v32, " has a sh_offset (0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v29 = v6;
        v30 = v18;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v30;
        v34 = 3588;
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
        v35.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v36 = 770;
        __p[0] = &v35;
        v41 = (std::string *)&v29;
        v42 = 3586;
        v44[0] = __p;
        v45 = (std::string *)") that is greater than the file size (0x";
        v46 = 770;
        v28 = a1[1];
        v47[0] = v44;
        v48 = (std::string *)&v28;
        v49 = 3586;
        v50[0] = (llvm::formatv_object_base *)v47;
        v51 = ")";
        v52 = 770;
        v54 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, &v54, &v37);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v37;
        v37 = 0;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v39);
      v19 = std::string::insert(&v39, 0, "section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v33, " has a sh_offset (0x");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v32.__r_.__value_.__r.__words[0] = v18;
      __p[0] = &v35;
      v41 = &v32;
      v42 = 3588;
      v44[0] = __p;
      v45 = (std::string *)") + sh_size (0x";
      v46 = 770;
      v31.__r_.__value_.__r.__words[0] = v6;
      v47[0] = v44;
      v48 = &v31;
      v49 = 3586;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ") that cannot be represented";
      v52 = 770;
      LODWORD(v30) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v30, &v38);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v38;
      v38 = 0;
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v39.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v33);
    v12 = std::string::insert(&v33, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v35, " has invalid sh_entsize: expected ");
    v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v41 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 8;
    v44[0] = __p;
    v45 = &v39;
    v46 = 2564;
    v47[0] = v44;
    v48 = (std::string *)", but got ";
    v49 = 770;
    v16 = (const char *)a2[9];
    v50[0] = (llvm::formatv_object_base *)v47;
    v51 = v16;
    v52 = 2050;
    LODWORD(v32.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v53);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v53;
    v53 = 0;
    if (SHIBYTE(v41) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v17);
    }
  }
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(uint64_t a1, int a2)
{
  int v3;
  uint64_t result;
  int v5;
  uint64_t v6;

  v5 = a2;
  v6 = 0;
  v3 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)(a1 + 104), &v5, &v6);
  result = 0;
  if (v3)
  {
    if (v6 != *(_QWORD *)(a1 + 104) + 16 * *(unsigned int *)(a1 + 120))
      return *(_QWORD *)(v6 + 8);
  }
  return result;
}

void llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>(llvm::formatv_object_base *a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  llvm::formatv_object_base *v9;
  __int16 v10;

  v6 = operator new();
  v10 = 262;
  v9 = a1;
  v8 = *a2;
  v7 = a2[1];
  *(_QWORD *)v6 = off_251C127D0;
  llvm::Twine::str(&v9, (std::string *)(v6 + 8));
  *(_QWORD *)(v6 + 32) = v8;
  *(_QWORD *)(v6 + 40) = v7;
  *(_BYTE *)(v6 + 48) = 1;
  *a3 = v6;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v7 = v22[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 16 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v11 = 16 * a3;
  v12[0] = "can't read an entry at 0x";
  v12[2] = &v11;
  v13 = 3587;
  v14[0] = v12;
  v14[2] = ": it goes past the end of the section (0x";
  v15 = 770;
  v10 = a2[5];
  v16[0] = v14;
  v16[2] = &v10;
  v17 = 3586;
  v18[0] = (llvm::formatv_object_base *)v16;
  v18[2] = (llvm::formatv_object_base *)")";
  v19 = 770;
  v21 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, &v21, &v20);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v20;
  v20 = 0;
  if ((v23 & 1) != 0)
  {
    v9 = v22[0];
    v22[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  const char *v16;
  void *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string v31;
  std::string v32;
  std::string v33;
  __int16 v34;
  std::string v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  void *__p[2];
  std::string *v41;
  __int16 v42;
  uint64_t v43;
  _QWORD v44[2];
  std::string *v45;
  __int16 v46;
  _QWORD v47[2];
  std::string *v48;
  __int16 v49;
  llvm::formatv_object_base *v50[2];
  const char *v51;
  __int16 v52;
  uint64_t v53;
  unsigned int v54;

  if (a2[9] == 16)
  {
    v6 = a2[5];
    if ((v6 & 0xF) != 0)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v39);
      v7 = std::string::insert(&v39, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v33, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v35;
      v41 = (std::string *)v6;
      v42 = 2052;
      v44[0] = __p;
      v45 = (std::string *)") which is not a multiple of its sh_entsize (";
      v46 = 770;
      v11 = (std::string *)a2[9];
      v47[0] = v44;
      v48 = v11;
      v49 = 2050;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ")";
      v52 = 770;
      LODWORD(v32.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v43);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v43;
      v43 = 0;
    }
    else
    {
      v18 = a2[4];
      if (!__CFADD__((_DWORD)v18, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v18))
        {
          v27 = *a1 + v18;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v27;
          *(_QWORD *)(a3 + 8) = v6 >> 4;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v31);
        v23 = std::string::insert(&v31, 0, "section ");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v32, " has a sh_offset (0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v29 = v6;
        v30 = v18;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v30;
        v34 = 3588;
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
        v35.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v36 = 770;
        __p[0] = &v35;
        v41 = (std::string *)&v29;
        v42 = 3586;
        v44[0] = __p;
        v45 = (std::string *)") that is greater than the file size (0x";
        v46 = 770;
        v28 = a1[1];
        v47[0] = v44;
        v48 = (std::string *)&v28;
        v49 = 3586;
        v50[0] = (llvm::formatv_object_base *)v47;
        v51 = ")";
        v52 = 770;
        v54 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, &v54, &v37);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v37;
        v37 = 0;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v39);
      v19 = std::string::insert(&v39, 0, "section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v33, " has a sh_offset (0x");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v32.__r_.__value_.__r.__words[0] = v18;
      __p[0] = &v35;
      v41 = &v32;
      v42 = 3588;
      v44[0] = __p;
      v45 = (std::string *)") + sh_size (0x";
      v46 = 770;
      v31.__r_.__value_.__r.__words[0] = v6;
      v47[0] = v44;
      v48 = &v31;
      v49 = 3586;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ") that cannot be represented";
      v52 = 770;
      LODWORD(v30) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v30, &v38);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v38;
      v38 = 0;
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v39.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v33);
    v12 = std::string::insert(&v33, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v35, " has invalid sh_entsize: expected ");
    v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v41 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 16;
    v44[0] = __p;
    v45 = &v39;
    v46 = 2564;
    v47[0] = v44;
    v48 = (std::string *)", but got ";
    v49 = 770;
    v16 = (const char *)a2[9];
    v50[0] = (llvm::formatv_object_base *)v47;
    v51 = v16;
    v52 = 2050;
    LODWORD(v32.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v53);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v53;
    v53 = 0;
    if (SHIBYTE(v41) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v17);
    }
  }
}

void llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>::~stream_operator_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::write_integer(a2, **(unsigned __int16 **)(a1 + 8), 0, 0);
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::prepare(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  _QWORD *v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int *v9;
  unsigned int *v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *__p;
  __int128 v17;
  __int128 v18;
  char v19;
  __int16 v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(*(_QWORD **)(a1 + 24), (uint64_t)&v18);
  if ((v19 & 1) != 0
    || (*(_OWORD *)(a1 + 32) = v18,
        v4 = *(_QWORD **)(a1 + 24),
        v5 = *(_QWORD *)(a1 + 32),
        v6 = *(_QWORD *)(a1 + 40),
        __p = llvm::object::defaultWarningHandler,
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionStringTable(v4, v5, v6, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&__p, (uint64_t)&v18), (v19 & 1) != 0))
  {
LABEL_16:
    *a2 = v18;
    return;
  }
  *(_OWORD *)(a1 + 56) = v18;
  v7 = *(_QWORD *)(a1 + 40);
  if (!v7)
  {
LABEL_15:
    *a2 = 0;
    return;
  }
  v8 = 40 * v7;
  v9 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 24);
  while (1)
  {
    v10 = v9 - 6;
    v11 = *(v9 - 5);
    if (v11 != 2)
      goto LABEL_8;
    if (*(_QWORD *)(a1 + 48))
      break;
    *(_QWORD *)(a1 + 48) = v10;
    v11 = *(v9 - 5);
LABEL_8:
    if (v11 == 18)
    {
      v12 = *v9;
      if (*(_QWORD *)(a1 + 40) <= v12)
      {
        llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"sh_link is out of bound", a2);
        return;
      }
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(*(_QWORD **)(a1 + 24), v10, (uint64_t)&v18);
      if ((v19 & 1) != 0)
        goto LABEL_16;
      __p = (void *)(*(_QWORD *)(a1 + 32) + 40 * v12);
      v17 = v18;
      llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>(a1 + 128, &__p, &v17, (uint64_t)&v15);
      if ((v19 & 1) != 0)
      {
        v13 = v18;
        *(_QWORD *)&v18 = 0;
        if (v13)
          (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
      }
    }
    v9 += 10;
    v8 -= 40;
    if (!v8)
      goto LABEL_15;
  }
  std::operator+<char>();
  v14 = operator new();
  v20 = 260;
  *(_QWORD *)&v18 = &__p;
  *(_QWORD *)v14 = off_251C15728;
  llvm::Twine::str((llvm::formatv_object_base **)&v18, (std::string *)(v14 + 8));
  *a2 = v14;
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::graphifySections(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t *v5;
  unsigned int v6;
  unsigned int *v7;
  unint64_t *v8;
  unsigned int v9;
  uint64_t SectionByName;
  int v11;
  uint64_t Section;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  char v30;
  __int128 v31;
  char v32;
  uint64_t v33;

  v33 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a1 + 40))
  {
    v4 = 0;
    v5 = (uint64_t *)(a1 + 80);
    v6 = 1;
    do
    {
      v7 = (unsigned int *)(*(_QWORD *)(a1 + 32) + 40 * v4);
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(*(_QWORD **)(a1 + 24), v7, *(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 64), (uint64_t)&v31);
      if ((v32 & 1) != 0)
      {
        v17 = v31;
        *(_QWORD *)&v31 = 0;
      }
      else
      {
        if (((*(uint64_t (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 40))(a1, v7) & 1) != 0
          || !v7[1]
          || !*(_BYTE *)(a1 + 72)
          && (v29 = v31,
              std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&v29) != (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278]))
        {
          v18 = 6;
          goto LABEL_24;
        }
        v9 = v7[2];
        SectionByName = llvm::jitlink::LinkGraph::findSectionByName(*(_QWORD *)(a1 + 8), v31, *((uint64_t *)&v31 + 1), v8);
        if (!SectionByName)
        {
          v11 = (v9 & 1) != 0 ? 3 : 1;
          Section = llvm::jitlink::LinkGraph::createSection(*(_QWORD *)(a1 + 8), v31, *((uint64_t *)&v31 + 1), v11 | v9 & 4);
          SectionByName = Section;
          if ((v7[2] & 2) == 0)
            *(_DWORD *)(Section + 20) = 2;
        }
        if (v7[1] == 8)
        {
          v13 = *(_QWORD *)(a1 + 8);
          v14 = v7[5];
          v15 = v7[3];
          v28 = v7[8];
          *(_QWORD *)&v29 = v15;
          *(_QWORD *)&v26 = v14;
          v27 = 0;
          v16 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v13, SectionByName, (uint64_t *)&v26, (uint64_t *)&v29, (unint64_t *)&v28, &v27);
LABEL_21:
          LODWORD(v29) = v6 - 1;
          v18 = 0;
          *((_QWORD *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v5, &v29)+ 1) = v16;
          goto LABEL_24;
        }
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<char>(*(_QWORD **)(a1 + 24), (uint64_t)v7, (uint64_t)&v29);
        if ((v30 & 1) == 0)
        {
          v19 = *(_QWORD *)(a1 + 8);
          v20 = v7[3];
          v21 = v7[8];
          v26 = v29;
          v27 = v21;
          v28 = v20;
          v25 = 0;
          v16 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v19, SectionByName, (uint64_t *)&v26, &v28, (unint64_t *)&v27, &v25);
          if ((v30 & 1) != 0)
          {
            v22 = v29;
            *(_QWORD *)&v29 = 0;
            if (v22)
              (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
          }
          goto LABEL_21;
        }
        v17 = v29;
      }
      *a2 = v17;
      v18 = 1;
LABEL_24:
      if ((v32 & 1) != 0)
      {
        v23 = v31;
        *(_QWORD *)&v31 = 0;
        if (v23)
          (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
      }
      if (v18 != 6 && v18)
        return;
      v4 = v6;
    }
    while (*(_QWORD *)(a1 + 40) != v6++);
  }
  *a2 = 0;
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::graphifySymbols(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  unsigned int *v3;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t CommonSection;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  llvm::formatv_object_base *v22;
  uint64_t v23;
  BOOL v24;
  char v25;
  char v26;
  int v27;
  uint64_t GraphBlock;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  unsigned int v34;
  _QWORD *v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  uint64_t v41[2];
  uint64_t v42[4];
  __int16 v43;
  const char *v44;
  __int16 v45;
  uint64_t v46[4];
  __int16 v47;
  uint64_t v48[4];
  __int16 v49;
  uint64_t v50[5];
  uint64_t v51[5];
  uint64_t v52[2];
  char v53;
  uint64_t v54;
  llvm::formatv_object_base *v55;
  char v56;
  llvm::formatv_object_base *v57;
  uint64_t v58;
  char v59;
  uint64_t v60[2];
  char v61;
  uint64_t v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v3 = *(unsigned int **)(a1 + 48);
  if (v3)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>>(*(_QWORD **)(a1 + 24), v3, (uint64_t)&v62);
    if ((v64 & 1) != 0)
    {
      *a2 = v62;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTableForSymtab(*(_QWORD **)(a1 + 24), *(_QWORD *)(a1 + 48), *(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 40), (uint64_t)v60);
      if ((v61 & 1) != 0)
      {
        v5 = v60[0];
        v60[0] = 0;
        goto LABEL_48;
      }
      v5 = v63;
      if (v63)
      {
        v6 = 0;
        v40 = (uint64_t *)(a1 + 104);
        v7 = 1;
        while (1)
        {
          v8 = v62 + 16 * v6;
          if ((*(_BYTE *)(v8 + 12) & 0xF) != 4)
            break;
LABEL_18:
          v6 = v7;
          v24 = v63 == v7++;
          if (v24)
          {
            v5 = 0;
            goto LABEL_48;
          }
        }
        llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getName((llvm::object *)v8, v60[0], v60[1], (uint64_t)&v57);
        if ((v59 & 1) != 0)
        {
          v22 = v57;
          v57 = 0;
        }
        else
        {
          v9 = *(unsigned __int8 *)(v8 + 12);
          v10 = v9 & 0xF;
          if (v10 == 5 || *(unsigned __int16 *)(v8 + 14) == 65522)
          {
            v11 = *(_QWORD *)(a1 + 8);
            CommonSection = llvm::jitlink::ELFLinkGraphBuilderBase::getCommonSection((llvm::jitlink::ELFLinkGraphBuilderBase *)a1);
            v14 = *(unsigned int *)(v8 + 4);
            v13 = *(unsigned int *)(v8 + 8);
            v55 = 0;
            v51[0] = v13;
            v50[0] = v14;
            v48[0] = 0;
            v15 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,unsigned long long &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>(v11, CommonSection, v51, (uint64_t *)&v55, (unint64_t *)v50, v48);
            v16 = (uint64_t)v57;
            v17 = v58;
            v18 = *(unsigned int *)(v8 + 8);
            v19 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(v11, 40, 3);
            *v19 = v16;
            v19[1] = v17;
            v19[2] = v15;
            v19[3] = 0x200000000000000;
            v19[4] = v18;
            v20 = v15[2] + 56;
            v51[0] = (uint64_t)v19;
            llvm::DenseMapBase<llvm::DenseMap<llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>,llvm::jitlink::Symbol *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Symbol *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Symbol *>>::try_emplace<llvm::detail::DenseSetEmpty&>(v20, v51, (uint64_t)&v55);
            LODWORD(v55) = v7 - 1;
            *((_QWORD *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v40, &v55)+ 1) = v19;
            v21 = 8;
            goto LABEL_14;
          }
          if (!*(_WORD *)(v8 + 14))
          {
            if (v9 < 0x10)
              goto LABEL_35;
            v34 = v9 >> 4;
            if (v34 - 1 < 2)
            {
              v35 = llvm::jitlink::LinkGraph::addExternalSymbol(*(_QWORD *)(a1 + 8), (uint64_t)v57, v58, *(unsigned int *)(v8 + 8), v34 == 2);
LABEL_44:
              LODWORD(v55) = v7 - 1;
              v21 = 0;
              *((_QWORD *)llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(v40, &v55)+ 1) = v35;
              goto LABEL_14;
            }
            v48[0] = (uint64_t)"Invalid symbol binding ";
            v49 = 259;
            v37 = *(unsigned __int8 *)(v8 + 12) >> 4;
            v47 = 265;
            LODWORD(v46[0]) = v37;
            llvm::operator+(v48, v46, (uint64_t)v50);
            v44 = " for external symbol ";
            v45 = 259;
            llvm::operator+(v50, (uint64_t *)&v44, (uint64_t)v51);
            v43 = 261;
            v42[0] = (uint64_t)v57;
            v42[1] = v58;
            llvm::operator+(v51, v42, (uint64_t)&v55);
            getErrorErrorCat();
            v41[0] = 3;
            v41[1] = (uint64_t)&getErrorErrorCat(void)::ErrorErrorCat;
            llvm::make_error<llvm::StringError,llvm::Twine,std::error_code>(&v55, v41, a2);
LABEL_13:
            v21 = 1;
            goto LABEL_14;
          }
          v24 = v10 < 4 || v10 == 6;
          if (!v24)
            goto LABEL_35;
          llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolLinkageAndScope(v8, (uint64_t)v57, v58, (uint64_t)&v55);
          if ((v56 & 1) == 0)
          {
            v25 = (char)v55;
            v26 = BYTE1(v55);
            v27 = *(unsigned __int16 *)(v8 + 14);
            if (v27 != 0xFFFF)
              goto LABEL_29;
            v51[0] = *(_QWORD *)(a1 + 48);
            v55 = 0;
            v21 = 8;
            if (!llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)(a1 + 128), v51, &v55)|| v55 == (llvm::formatv_object_base *)(*(_QWORD *)(a1 + 128) + 24 * *(unsigned int *)(a1 + 144)))
            {
LABEL_14:
              if ((v59 & 1) != 0)
              {
                v23 = (uint64_t)v57;
                v57 = 0;
                if (v23)
                  (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
              }
              if ((v21 | 8) != 8)
                goto LABEL_49;
              goto LABEL_18;
            }
            v36 = *((_QWORD *)v55 + 2);
            v52[0] = *((_QWORD *)v55 + 1);
            v52[1] = v36;
            v53 = 1;
            v54 = 0;
            llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)1,false>>(v7 - 1, v52, (uint64_t)&v55);
            if ((v56 & 1) == 0)
            {
              v27 = (int)v55;
LABEL_29:
              GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, v27);
              if (GraphBlock)
              {
                v29 = GraphBlock;
                v30 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 24))(a1, v8);
                v31 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v8, v30);
                v32 = *(_QWORD *)(a1 + 8);
                if (v58)
                  v33 = llvm::jitlink::LinkGraph::addDefinedSymbol(v32, v29, v31, (uint64_t)v57, v58, *(unsigned int *)(v8 + 8), v25, v26, (*(_BYTE *)(v8 + 12) & 0xF) == 2, 0);
                else
                  v33 = llvm::jitlink::LinkGraph::addAnonymousSymbol(v32, v29, v31, *(unsigned int *)(v8 + 8), 0, 0);
                v35 = v33;
                v33[3] = v33[3] & 0x7FFFFFFFFFFFFFFFLL | ((unint64_t)v30 << 63);
                goto LABEL_44;
              }
LABEL_35:
              v21 = 0;
              goto LABEL_14;
            }
          }
          v22 = v55;
        }
        *a2 = (uint64_t)v22;
        goto LABEL_13;
      }
LABEL_48:
      *a2 = v5;
LABEL_49:
      if ((v61 & 1) != 0)
      {
        v38 = v60[0];
        v60[0] = 0;
        if (v38)
          (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
      }
      if ((v64 & 1) != 0)
      {
        v39 = v62;
        v62 = 0;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
      }
    }
  }
  else
  {
    *a2 = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v15;
  const char *ELFSectionTypeName;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24[4];
  const char *v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  llvm::formatv_object_base *v29[2];
  unint64_t *v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>(a1, a2, (uint64_t)&v33);
  v10 = v33;
  if ((v35 & 1) != 0)
  {
    v33 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
LABEL_11:
    *(_QWORD *)a5 = v10;
    goto LABEL_14;
  }
  v11 = (unint64_t *)a2[6];
  if (a4 > (unint64_t)v11)
  {
    v12 = a3 + 40 * v11;
    v13 = *(_DWORD *)(v12 + 4);
    if (v13 != 2 && v13 != 11)
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), v13);
      v27 = 1283;
      *(_QWORD *)v24 = "SHT_SYMTAB_SHNDX section is linked with ";
      v25 = ELFSectionTypeName;
      v26 = v17;
      v29[0] = (llvm::formatv_object_base *)v24;
      v30 = (unint64_t *)" section (expected SHT_SYMTAB/SHT_DYNSYM)";
      v31 = 770;
      LODWORD(v20[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, (unsigned int *)v20, &v28);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v28;
      v28 = 0;
      goto LABEL_14;
    }
    v15 = v34;
    v23 = (unint64_t)*(unsigned int *)(v12 + 20) >> 4;
    if (v34 == v23)
    {
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)(a5 + 8) = v15;
    }
    else
    {
      v19 = v34;
      v20[0] = "SHT_SYMTAB_SHNDX has ";
      v20[2] = &v19;
      v21 = 2563;
      *(_QWORD *)v24 = v20;
      v25 = " entries, but the symbol table associated has ";
      v27 = 770;
      v29[0] = (llvm::formatv_object_base *)v24;
      v30 = &v23;
      v31 = 3074;
      v32 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, &v32, &v22);
      *(_BYTE *)(a5 + 16) |= 1u;
      v10 = v22;
      v22 = 0;
    }
    goto LABEL_11;
  }
  v29[0] = (llvm::formatv_object_base *)"invalid section index: ";
  v30 = v11;
  v31 = 2051;
  v24[0] = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, v24, (uint64_t *)a5);
  *(_BYTE *)(a5 + 16) |= 1u;
LABEL_14:
  if ((v35 & 1) != 0)
  {
    v18 = v33;
    v33 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  const char *v16;
  void *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string::size_type v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string v31;
  std::string v32;
  std::string v33;
  __int16 v34;
  std::string v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  void *__p[2];
  std::string *v41;
  __int16 v42;
  uint64_t v43;
  _QWORD v44[2];
  std::string *v45;
  __int16 v46;
  _QWORD v47[2];
  std::string *v48;
  __int16 v49;
  llvm::formatv_object_base *v50[2];
  const char *v51;
  __int16 v52;
  uint64_t v53;
  unsigned int v54;

  if (a2[9] == 4)
  {
    v6 = a2[5];
    if ((v6 & 3) != 0)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v39);
      v7 = std::string::insert(&v39, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v33, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v35;
      v41 = (std::string *)v6;
      v42 = 2052;
      v44[0] = __p;
      v45 = (std::string *)") which is not a multiple of its sh_entsize (";
      v46 = 770;
      v11 = (std::string *)a2[9];
      v47[0] = v44;
      v48 = v11;
      v49 = 2050;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ")";
      v52 = 770;
      LODWORD(v32.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v43);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v43;
      v43 = 0;
    }
    else
    {
      v18 = a2[4];
      if (!__CFADD__((_DWORD)v18, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v18))
        {
          v27 = *a1 + v18;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v27;
          *(_QWORD *)(a3 + 8) = v6 >> 2;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v31);
        v23 = std::string::insert(&v31, 0, "section ");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v32, " has a sh_offset (0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v29 = v6;
        v30 = v18;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v30;
        v34 = 3588;
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
        v35.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v36 = 770;
        __p[0] = &v35;
        v41 = (std::string *)&v29;
        v42 = 3586;
        v44[0] = __p;
        v45 = (std::string *)") that is greater than the file size (0x";
        v46 = 770;
        v28 = a1[1];
        v47[0] = v44;
        v48 = (std::string *)&v28;
        v49 = 3586;
        v50[0] = (llvm::formatv_object_base *)v47;
        v51 = ")";
        v52 = 770;
        v54 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, &v54, &v37);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v37;
        v37 = 0;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v39);
      v19 = std::string::insert(&v39, 0, "section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v33, " has a sh_offset (0x");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v32.__r_.__value_.__r.__words[0] = v18;
      __p[0] = &v35;
      v41 = &v32;
      v42 = 3588;
      v44[0] = __p;
      v45 = (std::string *)") + sh_size (0x";
      v46 = 770;
      v31.__r_.__value_.__r.__words[0] = v6;
      v47[0] = v44;
      v48 = &v31;
      v49 = 3586;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ") that cannot be represented";
      v52 = 770;
      LODWORD(v30) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v30, &v38);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v38;
      v38 = 0;
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v39.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,false>>(a1, (uint64_t)a2, &v33);
    v12 = std::string::insert(&v33, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v35, " has invalid sh_entsize: expected ");
    v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v41 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 4;
    v44[0] = __p;
    v45 = &v39;
    v46 = 2564;
    v47[0] = v44;
    v48 = (std::string *)", but got ";
    v49 = 770;
    v16 = (const char *)a2[9];
    v50[0] = (llvm::formatv_object_base *)v47;
    v51 = v16;
    v52 = 2050;
    LODWORD(v32.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v53);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v53;
    v53 = 0;
    if (SHIBYTE(v41) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v17);
    }
  }
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::try_emplace<llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _OWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::InsertIntoBucketImpl<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_OWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 24 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 24 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_5;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::InsertIntoBucketImpl<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::grow(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::moveFromOldBuckets(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = -4096;
      result += 3;
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = -4096;
      v7 += 3;
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>,llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>>>::LookupBucketFor<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>> const*>((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *(_OWORD *)(v9 + 1) = *(_OWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 24;
  }
  return result;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::FindAndConstruct(uint64_t *a1, _DWORD *a2)
{
  char v4;
  _DWORD *inserted;
  _DWORD *v7;

  v7 = 0;
  v4 = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(a1, a2, &v7);
  inserted = v7;
  if ((v4 & 1) == 0)
  {
    inserted = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::InsertIntoBucketImpl<unsigned int>((uint64_t)a1, (uint64_t)a2, a2, v7);
    *inserted = *a2;
    *((_QWORD *)inserted + 1) = 0;
  }
  return inserted;
}

_DWORD *llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::InsertIntoBucketImpl<unsigned int>(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4)
{
  int v6;
  unsigned int v7;
  _DWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::grow(a1, v7);
  v9 = 0;
  llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_DWORD *llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::moveFromOldBuckets(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -1;
      result += 4;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>,unsigned int,llvm::jitlink::Block *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::Block *>>::moveFromOldBuckets(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  _DWORD *v9;
  _DWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_DWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -1;
      v7 += 4;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if (*(_DWORD *)a2 <= 0xFFFFFFFD)
    {
      v10 = 0;
      result = llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>((uint64_t *)v5, (_DWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_DWORD *)a2;
      *((_QWORD *)v9 + 1) = *(_QWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTableForSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6;
  llvm::formatv_object_base *v8;
  uint64_t v9;
  llvm::formatv_object_base *v10[4];
  __int16 v11;
  unsigned int v12;

  v6 = *(_DWORD *)(a2 + 4);
  if (v6 == 2 || v6 == 11)
  {
    v8 = (llvm::formatv_object_base *)*(unsigned int *)(a2 + 24);
    if (a4 <= (unint64_t)v8)
    {
      v10[0] = (llvm::formatv_object_base *)"invalid section index: ";
      v10[2] = v8;
      v11 = 2051;
      v12 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v10, &v12, (uint64_t *)a5);
      *(_BYTE *)(a5 + 16) |= 1u;
    }
    else
    {
      v10[0] = (llvm::formatv_object_base *)llvm::object::defaultWarningHandler;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(a1, a3 + 40 * v8, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)v10, a5);
    }
  }
  else
  {
    v10[0] = (llvm::formatv_object_base *)"invalid sh_type for symbol table, expected SHT_SYMTAB or SHT_DYNSYM";
    v11 = 259;
    v12 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v10, &v12, &v9);
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v9;
  }
}

void llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getName(llvm::object *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  _UNKNOWN **v9;
  llvm::formatv_object_base *v10;
  uint64_t v11;
  void (**v12)(llvm::raw_string_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *__p[2];
  uint64_t v22;
  llvm::formatv_object_base *v23[2];
  int v24;
  unint64_t v25;
  __int16 v26;

  v5 = *(unsigned int *)a1;
  if (a3 <= v5)
  {
    v9 = llvm::object::object_category(a1);
    __p[0] = 0;
    __p[1] = 0;
    v22 = 0;
    v13 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v12 = &off_251C13AC0;
    v20 = __p;
    llvm::raw_ostream::SetUnbuffered(&v12);
    v23[0] = (llvm::formatv_object_base *)&off_251C15AE8;
    v23[1] = (llvm::formatv_object_base *)"st_name (0x%x) is past the end of the string table of size 0x%zx";
    v24 = v5;
    v25 = a3;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v12, (uint64_t)v23);
    v10 = (llvm::formatv_object_base *)v20;
    v11 = operator new();
    v26 = 260;
    v23[0] = v10;
    *(_QWORD *)v11 = off_251C127D0;
    llvm::Twine::str(v23, (std::string *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v9;
    *(_BYTE *)(v11 + 48) = 1;
    v12 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
    if (v19 == 1 && v14)
      MEMORY[0x24BD1B380](v14, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v11;
  }
  else
  {
    v6 = a2 + v5;
    if (a2)
      v7 = strlen((const char *)(a2 + v5));
    else
      v7 = 0;
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v6;
    *(_QWORD *)(a4 + 8) = v7;
  }
}

uint64_t llvm::jitlink::ELFLinkGraphBuilderBase::getCommonSection(llvm::jitlink::ELFLinkGraphBuilderBase *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 2);
  if (!result)
  {
    result = llvm::jitlink::LinkGraph::createSection(*((_QWORD *)this + 1), (uint64_t)llvm::jitlink::ELFLinkGraphBuilderBase::CommonSectionName, unk_25795D190, 3);
    *((_QWORD *)this + 2) = result;
  }
  return result;
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbolLinkageAndScope(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  unint64_t v5;
  __int16 v6;
  __int16 v7;
  uint64_t v9;
  int v10;
  _QWORD v11[2];
  uint64_t v12;
  __int16 v13;
  _QWORD v14[2];
  const char *v15;
  __int16 v16;
  llvm::formatv_object_base *v17[2];
  uint64_t v18;
  uint64_t v19;
  __int16 v20;

  v5 = (unint64_t)*(unsigned __int8 *)(a1 + 12) >> 4;
  if ((int)v5 > 1)
  {
    if ((_DWORD)v5 != 2 && (_DWORD)v5 != 10)
      goto LABEL_11;
    v6 = 0;
    LOWORD(v5) = 1;
    v7 = 1;
  }
  else
  {
    if ((_DWORD)v5)
    {
      if ((_DWORD)v5 == 1)
      {
        v6 = 0;
        v7 = 0;
        goto LABEL_13;
      }
LABEL_11:
      v11[0] = "Unrecognized symbol binding ";
      v12 = v5;
      v13 = 2307;
      v14[0] = v11;
      v15 = " for ";
      v16 = 770;
      v17[0] = (llvm::formatv_object_base *)v14;
      v18 = a2;
      v19 = a3;
      v20 = 1282;
      getErrorErrorCat();
      v9 = operator new();
      *(_QWORD *)v9 = off_251C127D0;
      llvm::Twine::str(v17, (std::string *)(v9 + 8));
      *(_QWORD *)(v9 + 32) = 3;
      *(_QWORD *)(v9 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
      *(_BYTE *)(v9 + 48) = 1;
LABEL_18:
      *(_BYTE *)(a4 + 8) |= 1u;
      *(_QWORD *)a4 = v9;
      return;
    }
    v7 = 0;
    LOWORD(v5) = 2;
    v6 = 2;
  }
LABEL_13:
  v10 = *(_BYTE *)(a1 + 13) & 3;
  if (v10 == 1)
  {
    v11[0] = "Unrecognized symbol visibility ";
    v12 = 1;
    v13 = 2307;
    v14[0] = v11;
    v15 = " for ";
    v16 = 770;
    v17[0] = (llvm::formatv_object_base *)v14;
    v18 = a2;
    v19 = a3;
    v20 = 1282;
    getErrorErrorCat();
    v9 = operator new();
    *(_QWORD *)v9 = off_251C127D0;
    llvm::Twine::str(v17, (std::string *)(v9 + 8));
    *(_QWORD *)(v9 + 32) = 3;
    *(_QWORD *)(v9 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
    *(_BYTE *)(v9 + 48) = 1;
    goto LABEL_18;
  }
  if (v10 != 2)
    LOWORD(v5) = v6;
  *(_BYTE *)(a4 + 8) &= ~1u;
  *(_WORD *)a4 = v7 | ((_WORD)v5 << 8);
}

void llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)1,false>>(unsigned int a1@<W1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string __p;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  _QWORD v12[2];
  unint64_t v13;
  __int16 v14;
  llvm::formatv_object_base *v15[2];
  std::string *p_p;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    v4 = a1;
    llvm::object::DataRegion<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>::operator[](a2, a1, (uint64_t)&v20);
    if ((v21 & 1) != 0)
    {
      v9[0] = "unable to read an extended symbol table at index ";
      v9[2] = v4;
      v10 = 2051;
      v12[0] = v9;
      v13 = (unint64_t)": ";
      v14 = 770;
      v5 = v20;
      v20 = 0;
      v7 = v5;
      llvm::toString(&v7, &__p);
      v15[0] = (llvm::formatv_object_base *)v12;
      p_p = &__p;
      v17 = 1026;
      v19 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v15, &v19, &v11);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v11;
      v11 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      if ((v21 & 1) != 0)
      {
        v6 = v20;
        v20 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = v20;
    }
  }
  else
  {
    v12[0] = "found an extended symbol index (";
    v13 = a1;
    v14 = 2051;
    v15[0] = (llvm::formatv_object_base *)v12;
    p_p = (std::string *)"), but unable to locate the extended symbol index table";
    v17 = 770;
    LODWORD(v9[0]) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v15, (unsigned int *)v9, &v18);
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v18;
  }
}

uint64_t llvm::format_object<unsigned int,unsigned long>::snprint(uint64_t a1, char *__str, size_t __size)
{
  return snprintf(__str, __size, *(const char **)(a1 + 8), *(unsigned int *)(a1 + 16), *(_QWORD *)(a1 + 24));
}

void llvm::object::DataRegion<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>::operator[](uint64_t *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;
  llvm::formatv_object_base *v9[4];
  __int16 v10;
  uint64_t v11;
  unsigned int v12;

  if (*((_BYTE *)a1 + 16))
  {
    if (a1[1] > a2)
    {
      v4 = *a1;
LABEL_6:
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = *(_DWORD *)(v4 + 4 * a2);
      return;
    }
    v7[0] = "the index is greater than or equal to the number of entries (";
    v7[2] = a1 + 1;
    v8 = 3075;
    v9[0] = (llvm::formatv_object_base *)v7;
    v9[2] = (llvm::formatv_object_base *)")";
    v10 = 770;
    v12 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v9, &v12, &v11);
    *(_BYTE *)(a3 + 8) |= 1u;
    v5 = v11;
  }
  else
  {
    v4 = *a1;
    if (*a1 + 4 * a2 + 4 <= a1[3])
      goto LABEL_6;
    v9[0] = (llvm::formatv_object_base *)"can't read past the end of the file";
    v10 = 259;
    LODWORD(v7[0]) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v9, (unsigned int *)v7, &v6);
    *(_BYTE *)(a3 + 8) |= 1u;
    v5 = v6;
  }
  *(_QWORD *)a3 = v5;
}

void llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::~ELFLinkGraphBuilder_aarch32(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15A38;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::addRelocations(uint64_t a1@<X0>, unsigned int **a2@<X8>)
{
  uint64_t v3;
  unsigned int *v5;
  unsigned int *v6;
  _QWORD *v7;
  uint64_t GraphBlock;
  _QWORD *v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t i;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  char v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned __int8 *v26;
  uint64_t *v27;
  __int128 v28;
  __int128 v29;
  _QWORD v30[2];
  _QWORD v31[2];
  uint64_t (**v32)(llvm::detail::format_adapter *__hidden);
  int v33;
  _QWORD v34[4];
  unsigned int v35;
  unsigned int *v36;
  uint64_t v37;
  char v38;
  __int128 v39;
  char v40;
  unsigned int *v41;
  char v42;
  unsigned int *v43;
  char v44;
  unsigned int *v45;
  char v46;
  llvm::formatv_object_base *v47;
  char v48;
  __int16 v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = *(unsigned int **)(a1 + 32);
    v6 = &v5[10 * v3];
    v27 = (uint64_t *)(a1 + 104);
    v26 = (unsigned __int8 *)(a1 + 152);
    while (v5[1] != 150994944)
    {
      *a2 = 0;
LABEL_59:
      v5 += 10;
      if (v5 == v6)
        goto LABEL_60;
    }
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(*(_QWORD **)(a1 + 24), bswap32(v5[7]), (uint64_t)&v41);
    if ((v42 & 1) != 0)
    {
      v10 = v41;
      *a2 = v41;
      goto LABEL_58;
    }
    v7 = *(_QWORD **)(a1 + 24);
    *(_QWORD *)&v28 = llvm::object::defaultWarningHandler;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(v7, v41, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v28, (uint64_t)&v39);
    if ((v40 & 1) != 0)
    {
      v10 = (unsigned int *)v39;
      *(_QWORD *)&v39 = 0;
    }
    else
    {
      if (!*(_BYTE *)(a1 + 72)
        && (v28 = v39,
            std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&v28) != (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278])|| (*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 40))(a1, v41))
      {
        v10 = 0;
        *a2 = 0;
LABEL_52:
        if ((v40 & 1) != 0)
        {
          v24 = v39;
          *(_QWORD *)&v39 = 0;
          if (v24)
            (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
        }
        if ((v42 & 1) != 0)
        {
          v25 = v41;
          v41 = 0;
          if (v25)
            (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
        }
LABEL_58:
        if (v10)
          return;
        goto LABEL_59;
      }
      GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, bswap32(v5[7]));
      if (GraphBlock)
      {
        v9 = (_QWORD *)GraphBlock;
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>(*(_QWORD **)(a1 + 24), v5, (uint64_t)&v36);
        v10 = v36;
        if ((v38 & 1) != 0)
        {
          v36 = 0;
        }
        else
        {
          if (v37)
          {
            v11 = v36 + 1;
            for (i = 8 * v37; i; i -= 8)
            {
              v13 = v41;
              v14 = bswap32(*v11);
              v15 = v14 >> 8;
              v35 = v14 >> 8;
              if (v14 > 0xFF)
              {
                llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(*(_QWORD **)(a1 + 24), *(unsigned int **)(a1 + 48), v15, (uint64_t)&v45);
                if ((v46 & 1) != 0)
                {
                  v10 = v45;
                  v45 = 0;
                  goto LABEL_33;
                }
              }
              else
              {
                v46 = 0;
                v45 = 0;
              }
              LODWORD(v47) = v15;
              *(_QWORD *)&v28 = 0;
              if (!llvm::DenseMapBase<llvm::DenseMap<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>,unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *,llvm::DenseMapInfo<unsigned int,void>,llvm::detail::DenseMapPair<unsigned int,llvm::jitlink::MachOLinkGraphBuilder::NormalizedSymbol *>>::LookupBucketFor<unsigned int>(v27, &v47, &v28)|| (_QWORD)v28 == *(_QWORD *)(a1 + 104) + 16 * *(unsigned int *)(a1 + 120)|| (v16 = *(_QWORD *)(v28 + 8)) == 0)
              {
                v19 = *(_DWORD *)(a1 + 112);
                *(_QWORD *)&v28 = "Could not find symbol at given index, did you add it to JITSymbolTable? index: {0}, sh"
                                  "ndx: {1} Size of table: {2}";
                *((_QWORD *)&v28 + 1) = 113;
                *(_QWORD *)&v29 = v34;
                *((_QWORD *)&v29 + 1) = 3;
                v30[0] = &off_251C158D8;
                v30[1] = &v35;
                v31[0] = &off_251C15B48;
                v31[1] = (char *)v45 + 14;
                v32 = &off_251C15650;
                v33 = v19;
                v34[0] = v30;
                v34[1] = v31;
                v34[2] = &v32;
                getErrorErrorCat();
                v10 = (unsigned int *)operator new();
                v49 = 262;
                v47 = (llvm::formatv_object_base *)&v28;
                *(_QWORD *)v10 = off_251C127D0;
                llvm::Twine::str(&v47, (std::string *)(v10 + 2));
                *((_QWORD *)v10 + 4) = 3;
                *((_QWORD *)v10 + 5) = &getErrorErrorCat(void)::ErrorErrorCat;
                *((_BYTE *)v10 + 48) = 1;
LABEL_33:
                *a2 = v10;
                goto LABEL_34;
              }
              llvm::jitlink::getJITLinkEdgeKind((llvm::jitlink *)&v47, *((unsigned __int8 *)v11 + 3));
              if ((v48 & 1) != 0)
              {
                v10 = (unsigned int *)v47;
                goto LABEL_33;
              }
              v17 = bswap32(*(v11 - 1)) + bswap32(v13[3]) - *(_DWORD *)v9;
              *(_QWORD *)&v28 = v16;
              DWORD2(v28) = v17;
              *(_QWORD *)&v29 = 0;
              BYTE8(v29) = (_BYTE)v47;
              v18 = *(_QWORD *)(a1 + 8);
              if (v47 > 3u)
              {
                if (v47 == 4)
                  llvm::jitlink::aarch32::readAddendArm(v18, (uint64_t)v9, (uint64_t)&v28, (uint64_t)&v43);
                else
                  llvm::jitlink::aarch32::readAddendThumb(v18, (uint64_t)v9, (uint64_t)&v28, v26, (uint64_t)&v43);
              }
              else
              {
                llvm::jitlink::aarch32::readAddendData(v18, (uint64_t)v9, (uint64_t)&v28, (uint64_t)&v43);
              }
              if ((v44 & 1) != 0)
              {
                v10 = v43;
                goto LABEL_33;
              }
              *(_QWORD *)&v29 = v43;
              llvm::jitlink::Block::addEdge(v9, &v28);
              v10 = 0;
              v20 = v44;
              *a2 = 0;
              if ((v20 & 1) != 0)
              {
                v21 = v43;
                v43 = 0;
                if (v21)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v21 + 8))(v21);
                v10 = 0;
              }
LABEL_34:
              if ((v46 & 1) != 0)
              {
                v22 = v45;
                v45 = 0;
                if (v22)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v22 + 8))(v22);
              }
              if (v10)
                goto LABEL_49;
              v11 += 2;
            }
          }
          v10 = 0;
        }
        *a2 = v10;
LABEL_49:
        if ((v38 & 1) != 0)
        {
          v23 = v36;
          v36 = 0;
          if (v23)
            (*(void (**)(unsigned int *))(*(_QWORD *)v23 + 8))(v23);
        }
        goto LABEL_52;
      }
      LOWORD(v30[0]) = 1283;
      *(_QWORD *)&v28 = "Refencing a section that wasn't added to the graph: ";
      v29 = v39;
      getErrorErrorCat();
      v10 = (unsigned int *)operator new();
      *(_QWORD *)v10 = off_251C127D0;
      llvm::Twine::str((llvm::formatv_object_base **)&v28, (std::string *)(v10 + 2));
      *((_QWORD *)v10 + 4) = 3;
      *((_QWORD *)v10 + 5) = &getErrorErrorCat(void)::ErrorErrorCat;
      *((_BYTE *)v10 + 48) = 1;
    }
    *a2 = v10;
    goto LABEL_52;
  }
LABEL_60:
  *a2 = 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::makeTargetFlags(uint64_t a1, uint64_t a2)
{
  return HIBYTE(*(_DWORD *)(a2 + 4)) & 1;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::getRawOffset(uint64_t a1, uint64_t a2)
{
  return bswap32(*(_DWORD *)(a2 + 4) & 0xFEFFFFFF);
}

BOOL llvm::jitlink::ELFLinkGraphBuilder_aarch32<(llvm::support::endianness)0>::excludeSection(uint64_t a1, uint64_t a2)
{
  return *(_DWORD *)(a2 + 4) == 16777328;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  uint64_t v7;
  llvm::formatv_object_base *v8[4];
  __int16 v9;
  unsigned int v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v11);
  if ((v12 & 1) != 0)
  {
    v5 = v11[0];
    v6 = *(_BYTE *)(a3 + 8) | 1;
    goto LABEL_5;
  }
  if (v11[1] > (unint64_t)a2)
  {
    v5 = v11[0] + 40 * a2;
    v6 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a3 + 8) = v6;
    *(_QWORD *)a3 = v5;
    return;
  }
  v8[0] = (llvm::formatv_object_base *)"invalid section index: ";
  v8[2] = (llvm::formatv_object_base *)a2;
  v9 = 2051;
  v10 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v8, &v10, (uint64_t *)a3);
  *(_BYTE *)(a3 + 8) |= 1u;
  if ((v12 & 1) != 0)
  {
    v7 = v11[0];
    v11[0] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v11 = v16[0];
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v12 = v14[0];
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v10 = v14[0];
        v14[0] = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    if ((v17 & 1) != 0)
    {
      v13 = v16[0];
      v16[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  llvm::formatv_object_base *v18[2];
  uint64_t *v19;
  __int16 v20;
  uint64_t v21;
  unsigned int v22;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 32);
  if (!v4)
  {
    v10 = a1[2];
    v11 = a1[3];
    if (v10 == v11)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v10;
      *(_QWORD *)(a2 + 8) = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v10) >> 3);
    }
    return;
  }
  v5 = *(unsigned __int16 *)(v3 + 46);
  if (v5 != 10240)
  {
    v18[0] = (llvm::formatv_object_base *)"invalid e_shentsize in ELF header: ";
    v19 = (uint64_t *)__rev16(v5);
    v20 = 2307;
    LODWORD(v16) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, (unsigned int *)&v16, &v21);
    *(_BYTE *)(a2 + 16) |= 1u;
    v9 = v21;
    goto LABEL_12;
  }
  v6 = bswap32(v4);
  v7 = a1[1];
  if (v6 > 0xFFFFFFD7 || v6 + 40 > v7)
  {
    v16 = v6;
    v18[0] = (llvm::formatv_object_base *)"section header table goes past the end of the file: e_shoff = 0x";
    v19 = &v16;
    v20 = 3587;
    v22 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, &v22, &v17);
    *(_BYTE *)(a2 + 16) |= 1u;
    v9 = v17;
LABEL_12:
    *(_QWORD *)a2 = v9;
    return;
  }
  v12 = v3 + v6;
  v13 = *(unsigned __int16 *)(v3 + 48);
  if (v13)
    v14 = __rev16(v13);
  else
    v14 = bswap32(*(_DWORD *)(v12 + 20));
  if (v6 + 40 * (unint64_t)v14 > v7)
  {
    v18[0] = (llvm::formatv_object_base *)"section table goes past the end of file";
    v20 = 259;
    LODWORD(v16) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, (unsigned int *)&v16, &v15);
    *(_BYTE *)(a2 + 16) |= 1u;
    v9 = v15;
    goto LABEL_12;
  }
  *(_BYTE *)(a2 + 16) &= ~1u;
  *(_QWORD *)a2 = v12;
  *(_QWORD *)(a2 + 8) = v14;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;
  llvm::formatv_object_base *v14[4];
  __int16 v15;
  uint64_t v16;
  unsigned int v17;

  v7 = *(unsigned __int16 *)(*a1 + 50);
  if (v7 != 0xFFFF)
  {
    v8 = __rev16(v7);
    if (v8)
    {
LABEL_3:
      if (a3 > v8)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(a1, a2 + 40 * v8, a4, a5, a6);
        return;
      }
      v11[0] = "section header string table index ";
      v11[2] = v8;
      v12 = 2051;
      v14[0] = (llvm::formatv_object_base *)v11;
      v14[2] = (llvm::formatv_object_base *)" does not exist";
      v15 = 770;
      v17 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v14, &v17, &v13);
      *(_BYTE *)(a6 + 16) |= 1u;
      v10 = v13;
      goto LABEL_10;
    }
LABEL_7:
    *(_BYTE *)(a6 + 16) &= ~1u;
    v9 = a1[6];
    *(_QWORD *)a6 = a1[5];
    *(_QWORD *)(a6 + 8) = v9;
    return;
  }
  if (a3)
  {
    v8 = bswap32(*(_DWORD *)(a2 + 24));
    if (v8)
      goto LABEL_3;
    goto LABEL_7;
  }
  v14[0] = (llvm::formatv_object_base *)"e_shstrndx == SHN_XINDEX, but the section header table is empty";
  v15 = 259;
  LODWORD(v11[0]) = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v14, (unsigned int *)v11, &v16);
  *(_BYTE *)(a6 + 16) |= 1u;
  v10 = v16;
LABEL_10:
  *(_QWORD *)a6 = v10;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  std::string::size_type v17;
  _QWORD v18[4];
  __int16 v19;
  llvm::formatv_object_base *v20[4];
  __int16 v21;
  uint64_t v22;
  unsigned int v23;

  if (*a2)
  {
    v6 = bswap32(*a2);
    if (a4 <= v6)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v14);
      v9 = std::string::insert(&v14, 0, "a section ");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v15, " has an invalid sh_name (0x");
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v17 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v13 = v6;
      v18[0] = __p;
      v18[2] = &v13;
      v19 = 3588;
      v20[0] = (llvm::formatv_object_base *)v18;
      v20[2] = (llvm::formatv_object_base *)") offset which goes past the end of the section name string table";
      v21 = 770;
      v23 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v20, &v23, &v22);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v22;
      v22 = 0;
      if (SHIBYTE(v17) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = (const char *)(a3 + v6);
      v8 = strlen(v7);
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v8;
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) &= ~1u;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  llvm::formatv_object_base *ELFSectionTypeName;
  llvm::formatv_object_base *v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  std::string v29;
  uint64_t v30;
  std::string v31;
  std::string v32;
  llvm::formatv_object_base *v33[4];
  __int16 v34;
  unsigned int v35;
  __int128 v36;
  std::string::size_type v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4) != 50331648)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, a2, &v31);
    v10 = std::string::insert(&v31, 0, "invalid sh_type for string table section ");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v32, ": expected SHT_STRTAB, but got ");
    v13 = v12->__r_.__value_.__r.__words[2];
    v36 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v37 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    ELFSectionTypeName = (llvm::formatv_object_base *)llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(*(_DWORD *)(a2 + 4)));
    v33[0] = (llvm::formatv_object_base *)&v36;
    v33[2] = ELFSectionTypeName;
    v33[3] = v15;
    v34 = 1284;
    a3(&v29, a4, v33);
    if (SHIBYTE(v37) < 0)
      operator delete((void *)v36);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v16 = v29.__r_.__value_.__r.__words[0];
    if (v29.__r_.__value_.__r.__words[0])
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v16;
      return;
    }
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v36);
  v17 = v36;
  if ((v37 & 1) != 0)
  {
    *(_QWORD *)&v36 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v17;
  }
  else
  {
    v18 = *((_QWORD *)&v36 + 1);
    if (!*((_QWORD *)&v36 + 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, a2, &v29);
      v23 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v31, " is empty");
      v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = (llvm::formatv_object_base *)&v32;
      v35 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v33, &v35, &v30);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v30;
      v30 = 0;
      goto LABEL_16;
    }
    if (*(_BYTE *)(*((_QWORD *)&v36 + 1) + v36 - 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, a2, &v29);
      v19 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v31, " is non-null terminated");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = (llvm::formatv_object_base *)&v32;
      v35 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v33, &v35, &v28);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v28;
      v28 = 0;
LABEL_16:
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      goto LABEL_23;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v17;
    *(_QWORD *)(a5 + 8) = v18;
  }
LABEL_23:
  if ((v37 & 1) != 0)
  {
    v27 = v36;
    *(_QWORD *)&v36 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string v11;
  std::string v12;
  std::string::size_type v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v9 = v13[0];
    v13[0] = 0;
    v12.__r_.__value_.__r.__words[0] = v9;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v12);
    if (v12.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v12.__r_.__value_.__l.__data_ + 8))(v12.__r_.__value_.__r.__words[0]);
    std::string::basic_string[abi:nn180100]<0>(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v11, 0xCCCCCCCCCCCCCCCDLL * ((int64_t)(a2 - v13[0]) >> 3));
    v5 = std::string::insert(&v11, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v12, "]");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    a3[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  if ((v14 & 1) != 0)
  {
    v10 = v13[0];
    v13[0] = 0;
    if (v10)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v10 + 8))(v10);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<char>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  void *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  std::string::size_type v18;
  std::string::size_type v19;
  std::string v20;
  std::string v21;
  std::string v22;
  __int16 v23;
  void *__p[2];
  const char *v25;
  __int16 v26;
  uint64_t v27;
  std::string v28;
  _QWORD v29[2];
  std::string *v30;
  __int16 v31;
  _QWORD v32[2];
  const char *v33;
  __int16 v34;
  _QWORD v35[2];
  std::string *v36;
  __int16 v37;
  llvm::formatv_object_base *v38[2];
  const char *v39;
  __int16 v40;
  uint64_t v41;
  unsigned int v42;

  v5 = bswap32(*(_DWORD *)(a2 + 16));
  v6 = bswap32(*(_DWORD *)(a2 + 20));
  if (__CFADD__((_DWORD)v5, (_DWORD)v6))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, a2, &v28);
    v7 = std::string::insert(&v28, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v22.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v22.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v22, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v25 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v21.__r_.__value_.__r.__words[0] = v5;
    v29[0] = __p;
    v30 = &v21;
    v31 = 3588;
    v32[0] = v29;
    v33 = ") + sh_size (0x";
    v34 = 770;
    v20.__r_.__value_.__r.__words[0] = v6;
    v35[0] = v32;
    v36 = &v20;
    v37 = 3586;
    v38[0] = (llvm::formatv_object_base *)v35;
    v39 = ") that cannot be represented";
    v40 = 770;
    LODWORD(v19) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v38, (unsigned int *)&v19, &v41);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v41;
    v41 = 0;
    if (SHIBYTE(v25) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v22.__r_.__value_.__l.__data_);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = (void *)v28.__r_.__value_.__r.__words[0];
LABEL_16:
      operator delete(v11);
    }
  }
  else if (a1[1] >= (unint64_t)(v6 + v5))
  {
    v16 = *a1 + v5;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v6;
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, a2, &v20);
    v12 = std::string::insert(&v20, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v21.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v21, " has a sh_offset (0x");
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v18 = v6;
    v19 = v5;
    v22.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
    v22.__r_.__value_.__r.__words[2] = (std::string::size_type)&v19;
    v23 = 3588;
    __p[0] = &v22;
    v25 = ") + sh_size (0x";
    v26 = 770;
    v29[0] = __p;
    v30 = (std::string *)&v18;
    v31 = 3586;
    v32[0] = v29;
    v33 = ") that is greater than the file size (0x";
    v34 = 770;
    v17 = a1[1];
    v35[0] = v32;
    v36 = (std::string *)&v17;
    v37 = 3586;
    v38[0] = (llvm::formatv_object_base *)v35;
    v39 = ")";
    v40 = 770;
    v42 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v38, &v42, &v27);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v27;
    v27 = 0;
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v21.__r_.__value_.__l.__data_);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = (void *)v20.__r_.__value_.__r.__words[0];
      goto LABEL_16;
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>,false>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  const char *v16;
  void *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string v31;
  std::string v32;
  std::string v33;
  __int16 v34;
  std::string v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  void *__p[2];
  std::string *v41;
  __int16 v42;
  uint64_t v43;
  _QWORD v44[2];
  std::string *v45;
  __int16 v46;
  _QWORD v47[2];
  std::string *v48;
  __int16 v49;
  llvm::formatv_object_base *v50[2];
  const char *v51;
  __int16 v52;
  uint64_t v53;
  unsigned int v54;

  if (a2[9] == 0x8000000)
  {
    v6 = bswap32(a2[5]);
    if ((v6 & 7) != 0)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v39);
      v7 = std::string::insert(&v39, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v33, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v35;
      v41 = (std::string *)v6;
      v42 = 2052;
      v44[0] = __p;
      v45 = (std::string *)") which is not a multiple of its sh_entsize (";
      v46 = 770;
      v11 = (std::string *)bswap32(a2[9]);
      v47[0] = v44;
      v48 = v11;
      v49 = 2050;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ")";
      v52 = 770;
      LODWORD(v32.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v43);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v43;
      v43 = 0;
    }
    else
    {
      v18 = bswap32(a2[4]);
      if (!__CFADD__((_DWORD)v18, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v18))
        {
          v27 = *a1 + v18;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v27;
          *(_QWORD *)(a3 + 8) = v6 >> 3;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v31);
        v23 = std::string::insert(&v31, 0, "section ");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v32, " has a sh_offset (0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v29 = v6;
        v30 = v18;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v30;
        v34 = 3588;
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
        v35.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v36 = 770;
        __p[0] = &v35;
        v41 = (std::string *)&v29;
        v42 = 3586;
        v44[0] = __p;
        v45 = (std::string *)") that is greater than the file size (0x";
        v46 = 770;
        v28 = a1[1];
        v47[0] = v44;
        v48 = (std::string *)&v28;
        v49 = 3586;
        v50[0] = (llvm::formatv_object_base *)v47;
        v51 = ")";
        v52 = 770;
        v54 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, &v54, &v37);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v37;
        v37 = 0;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v39);
      v19 = std::string::insert(&v39, 0, "section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v33, " has a sh_offset (0x");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v32.__r_.__value_.__r.__words[0] = v18;
      __p[0] = &v35;
      v41 = &v32;
      v42 = 3588;
      v44[0] = __p;
      v45 = (std::string *)") + sh_size (0x";
      v46 = 770;
      v31.__r_.__value_.__r.__words[0] = v6;
      v47[0] = v44;
      v48 = &v31;
      v49 = 3586;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ") that cannot be represented";
      v52 = 770;
      LODWORD(v30) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v30, &v38);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v38;
      v38 = 0;
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v39.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v33);
    v12 = std::string::insert(&v33, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v35, " has invalid sh_entsize: expected ");
    v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v41 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 8;
    v44[0] = __p;
    v45 = &v39;
    v46 = 2564;
    v47[0] = v44;
    v48 = (std::string *)", but got ";
    v49 = 770;
    v16 = (const char *)bswap32(a2[9]);
    v50[0] = (llvm::formatv_object_base *)v47;
    v51 = v16;
    v52 = 2050;
    LODWORD(v32.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v53);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v53;
    v53 = 0;
    if (SHIBYTE(v41) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v17);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getEntry<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  llvm::formatv_object_base *v18[4];
  __int16 v19;
  uint64_t v20;
  unsigned int v21;
  _QWORD v22[2];
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(a1, a2, (uint64_t)v22);
  if ((v23 & 1) != 0)
  {
    v7 = v22[0];
    v8 = *(_BYTE *)(a4 + 8) | 1;
    goto LABEL_5;
  }
  if (v22[1] > (unint64_t)a3)
  {
    v7 = v22[0] + 16 * a3;
    v8 = *(_BYTE *)(a4 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a4 + 8) = v8;
    *(_QWORD *)a4 = v7;
    return;
  }
  v11 = 16 * a3;
  v12[0] = "can't read an entry at 0x";
  v12[2] = &v11;
  v13 = 3587;
  v14[0] = v12;
  v14[2] = ": it goes past the end of the section (0x";
  v15 = 770;
  v10 = bswap32(a2[5]);
  v16[0] = v14;
  v16[2] = &v10;
  v17 = 3586;
  v18[0] = (llvm::formatv_object_base *)v16;
  v18[2] = (llvm::formatv_object_base *)")";
  v19 = 770;
  v21 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v18, &v21, &v20);
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v20;
  v20 = 0;
  if ((v23 & 1) != 0)
  {
    v9 = v22[0];
    v22[0] = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  const char *v16;
  void *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string v31;
  std::string v32;
  std::string v33;
  __int16 v34;
  std::string v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  void *__p[2];
  std::string *v41;
  __int16 v42;
  uint64_t v43;
  _QWORD v44[2];
  std::string *v45;
  __int16 v46;
  _QWORD v47[2];
  std::string *v48;
  __int16 v49;
  llvm::formatv_object_base *v50[2];
  const char *v51;
  __int16 v52;
  uint64_t v53;
  unsigned int v54;

  if (a2[9] == 0x10000000)
  {
    v6 = bswap32(a2[5]);
    if ((v6 & 0xF) != 0)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v39);
      v7 = std::string::insert(&v39, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v33, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v35;
      v41 = (std::string *)v6;
      v42 = 2052;
      v44[0] = __p;
      v45 = (std::string *)") which is not a multiple of its sh_entsize (";
      v46 = 770;
      v11 = (std::string *)bswap32(a2[9]);
      v47[0] = v44;
      v48 = v11;
      v49 = 2050;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ")";
      v52 = 770;
      LODWORD(v32.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v43);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v43;
      v43 = 0;
    }
    else
    {
      v18 = bswap32(a2[4]);
      if (!__CFADD__((_DWORD)v18, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v18))
        {
          v27 = *a1 + v18;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v27;
          *(_QWORD *)(a3 + 8) = v6 >> 4;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v31);
        v23 = std::string::insert(&v31, 0, "section ");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v32, " has a sh_offset (0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v29 = v6;
        v30 = v18;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v30;
        v34 = 3588;
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
        v35.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v36 = 770;
        __p[0] = &v35;
        v41 = (std::string *)&v29;
        v42 = 3586;
        v44[0] = __p;
        v45 = (std::string *)") that is greater than the file size (0x";
        v46 = 770;
        v28 = a1[1];
        v47[0] = v44;
        v48 = (std::string *)&v28;
        v49 = 3586;
        v50[0] = (llvm::formatv_object_base *)v47;
        v51 = ")";
        v52 = 770;
        v54 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, &v54, &v37);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v37;
        v37 = 0;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v39);
      v19 = std::string::insert(&v39, 0, "section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v33, " has a sh_offset (0x");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v32.__r_.__value_.__r.__words[0] = v18;
      __p[0] = &v35;
      v41 = &v32;
      v42 = 3588;
      v44[0] = __p;
      v45 = (std::string *)") + sh_size (0x";
      v46 = 770;
      v31.__r_.__value_.__r.__words[0] = v6;
      v47[0] = v44;
      v48 = &v31;
      v49 = 3586;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ") that cannot be represented";
      v52 = 770;
      LODWORD(v30) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v30, &v38);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v38;
      v38 = 0;
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v39.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v33);
    v12 = std::string::insert(&v33, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v35, " has invalid sh_entsize: expected ");
    v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v41 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 16;
    v44[0] = __p;
    v45 = &v39;
    v46 = 2564;
    v47[0] = v44;
    v48 = (std::string *)", but got ";
    v49 = 770;
    v16 = (const char *)bswap32(a2[9]);
    v50[0] = (llvm::formatv_object_base *)v47;
    v51 = v16;
    v52 = 2050;
    LODWORD(v32.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v53);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v53;
    v53 = 0;
    if (SHIBYTE(v41) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v17);
    }
  }
}

void llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)0,1ul,1ul> const&>::~stream_operator_format_adapter()
{
  JUMPOUT(0x24BD1B3A4);
}

llvm::raw_ostream *llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)0,1ul,1ul> const&>::format(uint64_t a1, llvm::raw_ostream *a2)
{
  return llvm::write_integer(a2, bswap32(**(unsigned __int16 **)(a1 + 8)) >> 16, 0, 0);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSHNDXTable(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  const char *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v15;
  const char *ELFSectionTypeName;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24[4];
  const char *v25;
  uint64_t v26;
  __int16 v27;
  uint64_t v28;
  llvm::formatv_object_base *v29[2];
  const char *v30;
  __int16 v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;

  v36 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>(a1, a2, (uint64_t)&v33);
  v10 = v33;
  if ((v35 & 1) != 0)
  {
    v33 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
LABEL_11:
    *(_QWORD *)a5 = v10;
    goto LABEL_14;
  }
  v11 = (const char *)bswap32(a2[6]);
  if (a4 > (unint64_t)v11)
  {
    v12 = a3 + 40 * v11;
    v13 = *(_DWORD *)(v12 + 4);
    if (v13 != 0x2000000 && v13 != 184549376)
    {
      ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(v13));
      v27 = 1283;
      *(_QWORD *)v24 = "SHT_SYMTAB_SHNDX section is linked with ";
      v25 = ELFSectionTypeName;
      v26 = v17;
      v29[0] = (llvm::formatv_object_base *)v24;
      v30 = " section (expected SHT_SYMTAB/SHT_DYNSYM)";
      v31 = 770;
      LODWORD(v20[0]) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, (unsigned int *)v20, &v28);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v28;
      v28 = 0;
      goto LABEL_14;
    }
    v15 = v34;
    v23 = bswap32(*(_DWORD *)(v12 + 20)) >> 4;
    if (v34 == v23)
    {
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)(a5 + 8) = v15;
    }
    else
    {
      v19 = v34;
      v20[0] = "SHT_SYMTAB_SHNDX has ";
      v20[2] = &v19;
      v21 = 2563;
      *(_QWORD *)v24 = v20;
      v25 = " entries, but the symbol table associated has ";
      v27 = 770;
      v29[0] = (llvm::formatv_object_base *)v24;
      v30 = (const char *)&v23;
      v31 = 3074;
      v32 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, &v32, &v22);
      *(_BYTE *)(a5 + 16) |= 1u;
      v10 = v22;
      v22 = 0;
    }
    goto LABEL_11;
  }
  v29[0] = (llvm::formatv_object_base *)"invalid section index: ";
  v30 = v11;
  v31 = 2051;
  v24[0] = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v29, v24, (uint64_t *)a5);
  *(_BYTE *)(a5 + 16) |= 1u;
LABEL_14:
  if ((v35 & 1) != 0)
  {
    v18 = v33;
    v33 = 0;
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContentsAsArray<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string *v15;
  const char *v16;
  void *v17;
  std::string::size_type v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  std::string::size_type v29;
  std::string::size_type v30;
  std::string v31;
  std::string v32;
  std::string v33;
  __int16 v34;
  std::string v35;
  __int16 v36;
  uint64_t v37;
  uint64_t v38;
  std::string v39;
  void *__p[2];
  std::string *v41;
  __int16 v42;
  uint64_t v43;
  _QWORD v44[2];
  std::string *v45;
  __int16 v46;
  _QWORD v47[2];
  std::string *v48;
  __int16 v49;
  llvm::formatv_object_base *v50[2];
  const char *v51;
  __int16 v52;
  uint64_t v53;
  unsigned int v54;

  if (a2[9] == 0x4000000)
  {
    v6 = bswap32(a2[5]);
    if ((v6 & 3) != 0)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v39);
      v7 = std::string::insert(&v39, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v33, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v35;
      v41 = (std::string *)v6;
      v42 = 2052;
      v44[0] = __p;
      v45 = (std::string *)") which is not a multiple of its sh_entsize (";
      v46 = 770;
      v11 = (std::string *)bswap32(a2[9]);
      v47[0] = v44;
      v48 = v11;
      v49 = 2050;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ")";
      v52 = 770;
      LODWORD(v32.__r_.__value_.__l.__data_) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v43);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v43;
      v43 = 0;
    }
    else
    {
      v18 = bswap32(a2[4]);
      if (!__CFADD__((_DWORD)v18, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v18))
        {
          v27 = *a1 + v18;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v27;
          *(_QWORD *)(a3 + 8) = v6 >> 2;
          return;
        }
        llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v31);
        v23 = std::string::insert(&v31, 0, "section ");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v32.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v32, " has a sh_offset (0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        v39.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v29 = v6;
        v30 = v18;
        v33.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v33.__r_.__value_.__r.__words[2] = (std::string::size_type)&v30;
        v34 = 3588;
        v35.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
        v35.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v36 = 770;
        __p[0] = &v35;
        v41 = (std::string *)&v29;
        v42 = 3586;
        v44[0] = __p;
        v45 = (std::string *)") that is greater than the file size (0x";
        v46 = 770;
        v28 = a1[1];
        v47[0] = v44;
        v48 = (std::string *)&v28;
        v49 = 3586;
        v50[0] = (llvm::formatv_object_base *)v47;
        v51 = ")";
        v52 = 770;
        v54 = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, &v54, &v37);
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v37;
        v37 = 0;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v39.__r_.__value_.__l.__data_);
        if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v32.__r_.__value_.__l.__data_);
        if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        {
          v17 = (void *)v31.__r_.__value_.__r.__words[0];
          goto LABEL_19;
        }
        return;
      }
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v39);
      v19 = std::string::insert(&v39, 0, "section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v33.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v33, " has a sh_offset (0x");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v35.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v32.__r_.__value_.__r.__words[0] = v18;
      __p[0] = &v35;
      v41 = &v32;
      v42 = 3588;
      v44[0] = __p;
      v45 = (std::string *)") + sh_size (0x";
      v46 = 770;
      v31.__r_.__value_.__r.__words[0] = v6;
      v47[0] = v44;
      v48 = &v31;
      v49 = 3586;
      v50[0] = (llvm::formatv_object_base *)v47;
      v51 = ") that cannot be represented";
      v52 = 770;
      LODWORD(v30) = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v30, &v38);
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v38;
      v38 = 0;
    }
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v39.__r_.__value_.__r.__words[0];
      goto LABEL_19;
    }
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)0,false>>(a1, (uint64_t)a2, &v33);
    v12 = std::string::insert(&v33, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v35.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v35, " has invalid sh_entsize: expected ");
    v15 = (std::string *)v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v41 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v39.__r_.__value_.__r.__words[0] = 4;
    v44[0] = __p;
    v45 = &v39;
    v46 = 2564;
    v47[0] = v44;
    v48 = (std::string *)", but got ";
    v49 = 770;
    v16 = (const char *)bswap32(a2[9]);
    v50[0] = (llvm::formatv_object_base *)v47;
    v51 = v16;
    v52 = 2050;
    LODWORD(v32.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v50, (unsigned int *)&v32, &v53);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v53;
    v53 = 0;
    if (SHIBYTE(v41) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v35.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v17 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_19:
      operator delete(v17);
    }
  }
}

_QWORD *llvm::DenseMap<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>,llvm::DenseMapInfo<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>> const*,void>,llvm::detail::DenseMapPair<llvm::object::Elf_Shdr_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>> const*,llvm::ArrayRef<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)0,1ul,1ul>>>>::grow(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 24 * v10;
      do
      {
        *result = -4096;
        result += 3;
        v11 -= 24;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 24 * v3;
      v13 = v4;
      do
      {
        v14 = *(_QWORD *)v13;
        if ((*(_QWORD *)v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v18 = 0;
          llvm::DenseMapBase<llvm::DenseMap<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>,llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo,llvm::DenseMapInfo<llvm::orc::JITDylib *,void>,llvm::detail::DenseMapPair<llvm::orc::JITDylib *,llvm::orc::MachOPlatform::MachOPlatformPlugin::ObjCImageInfo>>::LookupBucketFor<llvm::orc::JITDylib const*>(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v18);
          v15 = v18;
          *v18 = *(_QWORD *)v13;
          *(_OWORD *)(v15 + 1) = *(_OWORD *)(v13 + 8);
          ++*(_DWORD *)(a1 + 8);
        }
        v13 += 24;
        v12 -= 24;
      }
      while (v12);
    }
    JUMPOUT(0x24BD1B398);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v16 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v16)
  {
    v17 = 24 * v16;
    do
    {
      *result = -4096;
      result += 3;
      v17 -= 24;
    }
    while (v17);
  }
  return result;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTableForSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6;
  llvm::formatv_object_base *v8;
  uint64_t v9;
  llvm::formatv_object_base *v10[4];
  __int16 v11;
  unsigned int v12;

  v6 = *(_DWORD *)(a2 + 4);
  if (v6 == 0x2000000 || v6 == 184549376)
  {
    v8 = (llvm::formatv_object_base *)bswap32(*(_DWORD *)(a2 + 24));
    if (a4 <= (unint64_t)v8)
    {
      v10[0] = (llvm::formatv_object_base *)"invalid section index: ";
      v10[2] = v8;
      v11 = 2051;
      v12 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v10, &v12, (uint64_t *)a5);
      *(_BYTE *)(a5 + 16) |= 1u;
    }
    else
    {
      v10[0] = (llvm::formatv_object_base *)llvm::object::defaultWarningHandler;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(a1, a3 + 40 * v8, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)v10, a5);
    }
  }
  else
  {
    v10[0] = (llvm::formatv_object_base *)"invalid sh_type for symbol table, expected SHT_SYMTAB or SHT_DYNSYM";
    v11 = 259;
    v12 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v10, &v12, &v9);
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v9;
  }
}

void llvm::object::Elf_Sym_Impl<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getName(unsigned int *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  size_t v7;
  _UNKNOWN **v9;
  llvm::formatv_object_base *v10;
  uint64_t v11;
  void (**v12)(llvm::raw_string_ostream *__hidden);
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *__p[2];
  uint64_t v22;
  llvm::formatv_object_base *v23[2];
  int v24;
  unint64_t v25;
  __int16 v26;

  v5 = bswap32(*a1);
  if (a3 <= v5)
  {
    v9 = llvm::object::object_category((llvm::object *)a1);
    __p[0] = 0;
    __p[1] = 0;
    v22 = 0;
    v13 = 0;
    v17 = 0;
    v18 = 0;
    v19 = 1;
    v15 = 0;
    v16 = 0;
    v14 = 0;
    v12 = &off_251C13AC0;
    v20 = __p;
    llvm::raw_ostream::SetUnbuffered(&v12);
    v23[0] = (llvm::formatv_object_base *)&off_251C15AE8;
    v23[1] = (llvm::formatv_object_base *)"st_name (0x%x) is past the end of the string table of size 0x%zx";
    v24 = v5;
    v25 = a3;
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v12, (uint64_t)v23);
    v10 = (llvm::formatv_object_base *)v20;
    v11 = operator new();
    v26 = 260;
    v23[0] = v10;
    *(_QWORD *)v11 = off_251C127D0;
    llvm::Twine::str(v23, (std::string *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v9;
    *(_BYTE *)(v11 + 48) = 1;
    v12 = (void (**)(llvm::raw_string_ostream *__hidden))off_251C13948;
    if (v19 == 1 && v14)
      MEMORY[0x24BD1B380](v14, 0x1000C8077774924);
    if (SHIBYTE(v22) < 0)
      operator delete(__p[0]);
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v11;
  }
  else
  {
    v6 = a2 + v5;
    if (a2)
      v7 = strlen((const char *)(a2 + v5));
    else
      v7 = 0;
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = v6;
    *(_QWORD *)(a4 + 8) = v7;
  }
}

void llvm::object::getExtendedSymbolTableIndex<llvm::object::ELFType<(llvm::support::endianness)0,false>>(unsigned int a1@<W1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  std::string __p;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  _QWORD v12[2];
  unint64_t v13;
  __int16 v14;
  llvm::formatv_object_base *v15[2];
  std::string *p_p;
  __int16 v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  char v21;
  uint64_t v22;

  v22 = *MEMORY[0x24BDAC8D0];
  if (*a2)
  {
    v4 = a1;
    llvm::object::DataRegion<llvm::support::detail::packed_endian_specific_integral<unsigned int,(llvm::support::endianness)1,1ul,1ul>>::operator[](a2, a1, (uint64_t)&v20);
    if ((v21 & 1) != 0)
    {
      v9[0] = "unable to read an extended symbol table at index ";
      v9[2] = v4;
      v10 = 2051;
      v12[0] = v9;
      v13 = (unint64_t)": ";
      v14 = 770;
      v5 = v20;
      v20 = 0;
      v7 = v5;
      llvm::toString(&v7, &__p);
      v15[0] = (llvm::formatv_object_base *)v12;
      p_p = &__p;
      v17 = 1026;
      v19 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v15, &v19, &v11);
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v11;
      v11 = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v7)
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
      if ((v21 & 1) != 0)
      {
        v6 = v20;
        v20 = 0;
        if (v6)
          (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = bswap32(v20);
    }
  }
  else
  {
    v12[0] = "found an extended symbol index (";
    v13 = a1;
    v14 = 2051;
    v15[0] = (llvm::formatv_object_base *)v12;
    p_p = (std::string *)"), but unable to locate the extended symbol index table";
    v17 = 770;
    LODWORD(v9[0]) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v15, (unsigned int *)v9, &v18);
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v18;
  }
}

void llvm::jitlink::ELFJITLinker_aarch32::~ELFJITLinker_aarch32(llvm::jitlink::ELFJITLinker_aarch32 *this)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(this);
  JUMPOUT(0x24BD1B3A4);
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_aarch32>::fixUpBlocks(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **v14;
  uint64_t *v15;
  size_t v16;
  const void *v17;
  void *v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  unsigned int v22;
  _BYTE *v23;
  uint64_t v24;
  int v25;

  if (*(_DWORD *)(a2 + 192))
  {
    v5 = *(unsigned int *)(a2 + 200);
    if ((_DWORD)v5)
    {
      v6 = 24 * v5;
      v7 = *(_QWORD **)(a2 + 184);
      while (*v7 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v7 += 3;
        v6 -= 24;
        if (!v6)
          goto LABEL_35;
      }
    }
    else
    {
      v7 = *(_QWORD **)(a2 + 184);
    }
    v8 = *(_QWORD *)(a2 + 184) + 24 * v5;
    if (v7 != (_QWORD *)v8)
    {
      v9 = (_BYTE *)(a1 + 152);
LABEL_10:
      v10 = v7[2];
      v25 = *(_DWORD *)(v10 + 20);
      v11 = (uint64_t **)llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::begin(v10 + 32);
      v24 = *(_QWORD *)(v10 + 32) + 8 * *(unsigned int *)(v10 + 48);
      if ((uint64_t **)v24 == v11)
        goto LABEL_32;
      v13 = v11;
      v14 = v12;
      v23 = v9;
      do
      {
        v15 = *v13;
        if (v25 == 2 && (v15[1] & 4) == 0)
        {
          v17 = (const void *)v15[3];
          v16 = v15[4];
          v18 = (void *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate(a2, v16, 0);
          v19 = (uint64_t)v18;
          if (v16)
            memmove(v18, v17, v16);
          v15[3] = v19;
          v15[4] = v16;
          v15[1] |= 4uLL;
          v9 = v23;
        }
        v20 = (unsigned __int8 *)v15[5];
        v21 = (unsigned __int8 *)v15[6];
        while (v20 != v21)
        {
          v22 = v20[24];
          if (v22 >= 2)
          {
            if (v22 > 3)
            {
              if (v22 == 4)
                llvm::jitlink::aarch32::applyFixupArm(a2, (uint64_t)v15, (uint64_t)v20, a3);
              else
                llvm::jitlink::aarch32::applyFixupThumb(a2, v15, (uint64_t)v20, v9, a3);
            }
            else
            {
              llvm::jitlink::aarch32::applyFixupData(a2, v15, v20, a3);
            }
            if (*a3)
              return;
          }
          v20 += 32;
        }
        while (++v13 != v14)
        {
          if (((unint64_t)*v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
            goto LABEL_31;
        }
        v13 = v14;
LABEL_31:
        ;
      }
      while (v13 != (uint64_t **)v24);
LABEL_32:
      while (1)
      {
        v7 += 3;
        if (v7 == (_QWORD *)v8)
          break;
        if (*v7 < 0xFFFFFFFFFFFFFFFELL)
        {
          if (v7 != (_QWORD *)v8)
            goto LABEL_10;
          break;
        }
      }
    }
  }
LABEL_35:
  *a3 = 0;
}

void llvm::jitlink::JITLinker<llvm::jitlink::ELFJITLinker_aarch32>::~JITLinker(llvm::jitlink::JITLinkerBase *a1)
{
  llvm::jitlink::JITLinkerBase::~JITLinkerBase(a1);
  JUMPOUT(0x24BD1B3A4);
}

llvm::object::ObjectFile *llvm::jitlink::createLinkGraphFromELFObject_aarch64@<X0>(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  llvm::object::ObjectFile *result;
  void *v5;
  size_t v6;
  char *v7;
  uint64_t v8;
  llvm::jitlink::LinkGraph *v9;
  void *__p[2];
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  void (**v14)();
  llvm::jitlink::LinkGraph *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19[2];
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  llvm::object::ObjectFile *v24;
  char v25;
  uint64_t v26;

  v26 = *MEMORY[0x24BDAC8D0];
  v3 = a1[1];
  v19[0] = *a1;
  v19[1] = v3;
  llvm::object::ObjectFile::createELFObjectFile(v19, 1, (uint64_t)&v24);
  result = v24;
  if ((v25 & 1) != 0)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = result;
  }
  else
  {
    v5 = (void *)*((_QWORD *)v24 + 4);
    v6 = *((_QWORD *)v24 + 5);
    v7 = (char *)v24 + 56;
    llvm::object::ObjectFile::makeTriple(v24, (llvm::Triple *)__p);
    v20 = *(_OWORD *)__p;
    v8 = v11;
    __p[0] = 0;
    __p[1] = 0;
    v11 = 0;
    v22 = v12;
    v21 = v8;
    v23 = v13;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFLinkGraphBuilder((uint64_t)&v14, (uint64_t)v7, (uint64_t)&v20, v5, v6, (uint64_t)llvm::jitlink::aarch64::getEdgeKindName);
    if (SHIBYTE(v21) < 0)
      operator delete((void *)v20);
    v14 = (void (**)())&off_251C15C40;
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::buildGraph((uint64_t)&v14, a2);
    v14 = off_251C15C00;
    MEMORY[0x24BD1B398](v18, 8);
    MEMORY[0x24BD1B398](v17, 8);
    MEMORY[0x24BD1B398](v16, 8);
    v9 = v15;
    v14 = (void (**)())&off_251C159D8;
    v15 = 0;
    if (v9)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v9);
      MEMORY[0x24BD1B3A4]();
    }
    if (SHIBYTE(v11) < 0)
      operator delete(__p[0]);
    result = v24;
    v24 = 0;
    if (result)
      return (llvm::object::ObjectFile *)(*(uint64_t (**)(llvm::object::ObjectFile *))(*(_QWORD *)result + 8))(result);
  }
  return result;
}

void llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::buildGraph(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (*(_WORD *)(**(_QWORD **)(a1 + 24) + 16) == 1)
  {
    llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::prepare(a1, &v5);
    v4 = v5;
    if (v5
      || (llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::graphifySections(a1, &v5), (v4 = v5) != 0)|| (llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::graphifySymbols(a1, &v5), (v4 = v5) != 0)|| ((*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a1 + 16))(&v5, a1), (v4 = v5) != 0))
    {
      *(_BYTE *)(a2 + 8) |= 1u;
    }
    else
    {
      *(_BYTE *)(a2 + 8) &= ~1u;
      v4 = *(_QWORD *)(a1 + 8);
      *(_QWORD *)(a1 + 8) = 0;
    }
  }
  else
  {
    llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"Object is not a relocatable ELF file", &v6);
    *(_BYTE *)(a2 + 8) |= 1u;
    v4 = v6;
  }
  *(_QWORD *)a2 = v4;
}

uint64_t `anonymous namespace'::ELFLinkGraphBuilder_aarch64<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_aarch64(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15C00;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  return a1;
}

void llvm::jitlink::link_ELF_aarch64(llvm::jitlink::LinkGraph **a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 *v7;
  uint64_t v8;
  int64x2_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  __int128 *v18;
  uint64_t v19;
  int64x2_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  __int128 *v28;
  uint64_t v29;
  int64x2_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  unint64_t v39;
  unint64_t v40;
  char *v41;
  uint64_t v42;
  __int128 *v43;
  uint64_t v44;
  int64x2_t v45;
  uint64_t v46;
  __int128 *v47;
  uint64_t v48;
  int64x2_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  uint64_t v57;
  __int128 *v58;
  __int128 *v59;
  uint64_t v60;
  int64x2_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  uint64_t v66;
  llvm::jitlink::LinkGraph *v67;
  uint64_t v68;
  int64x2_t v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  __int128 v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  _QWORD *v78;
  llvm::jitlink::LinkGraph *v79;
  uint64_t v80;
  uint64_t v81;
  int64x2_t v82;
  _OWORD v83[2];
  __int128 v84;
  _OWORD v85[2];
  __int128 v86;
  uint64_t v87;
  _BYTE v88[24];
  __int128 v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  __int128 v93;
  uint64_t v94;
  __int128 v95;
  uint64_t v96;
  llvm::jitlink::LinkGraph *v97;
  uint64_t v98;
  __int128 v99;
  char *v100;
  const char *v101;
  __int128 v102;
  _QWORD v103[3];
  _QWORD v104[3];
  _QWORD v105[3];
  _QWORD v106[6];

  v106[3] = *MEMORY[0x24BDAC8D0];
  v87 = 0;
  v86 = 0u;
  v84 = 0u;
  memset(v85, 0, sizeof(v85));
  memset(v83, 0, sizeof(v83));
  v82 = 0u;
  v4 = (uint64_t)*a1 + 120;
  if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)*a2 + 56))(*a2, v4))
  {
    v101 = ".eh_frame";
    *(_QWORD *)&v102 = 9;
    v103[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::DWARFRecordSectionSplitter,llvm::jitlink::DWARFRecordSectionSplitter,void>::Callbacks
            + 2;
    *((_QWORD *)&v89 + 1) = v83;
    *(_QWORD *)v88 = std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v83, 1uLL);
    *(_QWORD *)&v88[8] = *(_QWORD *)v88;
    *(_QWORD *)&v89 = *(_QWORD *)v88 + 32 * v5;
    v6 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)v88, (__int128 *)&v101)+ 32;
    *(_QWORD *)&v88[16] = v6;
    v7 = (__int128 *)v82.i64[1];
    v8 = *(_QWORD *)&v88[8];
    if (v82.i64[1] == v82.i64[0])
    {
      v9 = vdupq_n_s64(v82.u64[1]);
    }
    else
    {
      do
      {
        v7 -= 2;
        v8 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v8 - 32, v7);
      }
      while (v7 != (__int128 *)v82.i64[0]);
      v9 = v82;
      v6 = *(_QWORD *)&v88[16];
    }
    v82.i64[0] = v8;
    *(int64x2_t *)&v88[8] = v9;
    v10 = *(_QWORD *)&v83[0];
    *(_QWORD *)&v83[0] = v89;
    *(_QWORD *)&v89 = v10;
    *(_QWORD *)v88 = v9.i64[0];
    std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v88);
    v82.i64[1] = v6;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v101);
    v103[0] = 0;
    v11 = operator new(0x20uLL, (std::align_val_t)8uLL);
    v102 = xmmword_24AA2ACD0;
    *v11 = ".eh_frame";
    v11[1] = 9;
    *((_DWORD *)v11 + 4) = 8;
    *((_DWORD *)v11 + 5) = 84279812;
    *((_BYTE *)v11 + 24) = 8;
    v101 = (const char *)v11;
    v103[0] = &llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameEdgeFixer,llvm::jitlink::EHFrameEdgeFixer,void>::Callbacks;
    if (v82.i64[1] >= *(_QWORD *)&v83[0])
    {
      v13 = (v82.i64[1] - v82.i64[0]) >> 5;
      if ((unint64_t)(v13 + 1) >> 59)
        goto LABEL_102;
      v14 = (*(_QWORD *)&v83[0] - v82.i64[0]) >> 4;
      if (v14 <= v13 + 1)
        v14 = v13 + 1;
      if (*(_QWORD *)&v83[0] - v82.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v15 = 0x7FFFFFFFFFFFFFFLL;
      else
        v15 = v14;
      *((_QWORD *)&v89 + 1) = v83;
      if (v15)
        v16 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v83, v15);
      else
        v16 = 0;
      v17 = (uint64_t)&v16[32 * v13];
      *(_QWORD *)v88 = v16;
      *(_QWORD *)&v88[8] = v17;
      *(_QWORD *)&v89 = &v16[32 * v15];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v17, (__int128 *)&v101);
      v12 = v17 + 32;
      *(_QWORD *)&v88[16] = v17 + 32;
      v18 = (__int128 *)v82.i64[1];
      v19 = *(_QWORD *)&v88[8];
      if (v82.i64[1] == v82.i64[0])
      {
        v20 = vdupq_n_s64(v82.u64[1]);
      }
      else
      {
        do
        {
          v18 -= 2;
          v19 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v19 - 32, v18);
        }
        while (v18 != (__int128 *)v82.i64[0]);
        v20 = v82;
        v12 = *(_QWORD *)&v88[16];
      }
      v82.i64[0] = v19;
      v82.i64[1] = v12;
      *(int64x2_t *)&v88[8] = v20;
      v21 = *(_QWORD *)&v83[0];
      *(_QWORD *)&v83[0] = v89;
      *(_QWORD *)&v89 = v21;
      *(_QWORD *)v88 = v20.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v88);
    }
    else
    {
      v12 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v82.i64[1], (__int128 *)&v101)+ 32;
    }
    v82.i64[1] = v12;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v101);
    v101 = ".eh_frame";
    *(_QWORD *)&v102 = 9;
    v103[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::jitlink::EHFrameNullTerminator,llvm::jitlink::EHFrameNullTerminator,void>::Callbacks
            + 2;
    if (v12 >= *(_QWORD *)&v83[0])
    {
      v23 = (v82.i64[1] - v82.i64[0]) >> 5;
      if ((unint64_t)(v23 + 1) >> 59)
        goto LABEL_102;
      v24 = (*(_QWORD *)&v83[0] - v82.i64[0]) >> 4;
      if (v24 <= v23 + 1)
        v24 = v23 + 1;
      if (*(_QWORD *)&v83[0] - v82.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
        v25 = 0x7FFFFFFFFFFFFFFLL;
      else
        v25 = v24;
      *((_QWORD *)&v89 + 1) = v83;
      if (v25)
        v26 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v83, v25);
      else
        v26 = 0;
      v27 = (uint64_t)&v26[32 * v23];
      *(_QWORD *)v88 = v26;
      *(_QWORD *)&v88[8] = v27;
      *(_QWORD *)&v89 = &v26[32 * v25];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v27, (__int128 *)&v101);
      v22 = v27 + 32;
      *(_QWORD *)&v88[16] = v27 + 32;
      v28 = (__int128 *)v82.i64[1];
      v29 = *(_QWORD *)&v88[8];
      if (v82.i64[1] == v82.i64[0])
      {
        v30 = vdupq_n_s64(v82.u64[1]);
      }
      else
      {
        do
        {
          v28 -= 2;
          v29 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v29 - 32, v28);
        }
        while (v28 != (__int128 *)v82.i64[0]);
        v30 = v82;
        v22 = *(_QWORD *)&v88[16];
      }
      v82.i64[0] = v29;
      v82.i64[1] = v22;
      *(int64x2_t *)&v88[8] = v30;
      v31 = *(_QWORD *)&v83[0];
      *(_QWORD *)&v83[0] = v89;
      *(_QWORD *)&v89 = v31;
      *(_QWORD *)v88 = v30.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v88);
    }
    else
    {
      v22 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v12, (__int128 *)&v101)+ 32;
    }
    v82.i64[1] = v22;
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v101);
    (*(void (**)(const char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)*a2 + 64))(&v101, *a2, v4);
    if (v103[0] < 8uLL)
    {
      *(_QWORD *)&v99 = llvm::jitlink::markAllSymbolsLive;
      v100 = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
           + 2;
      if (v82.i64[1] >= *(_QWORD *)&v83[0])
      {
        v38 = (v82.i64[1] - v82.i64[0]) >> 5;
        if ((unint64_t)(v38 + 1) >> 59)
          goto LABEL_102;
        v39 = (*(_QWORD *)&v83[0] - v82.i64[0]) >> 4;
        if (v39 <= v38 + 1)
          v39 = v38 + 1;
        if (*(_QWORD *)&v83[0] - v82.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v40 = 0x7FFFFFFFFFFFFFFLL;
        else
          v40 = v39;
        *((_QWORD *)&v89 + 1) = v83;
        if (v40)
          v41 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v83, v40);
        else
          v41 = 0;
        v46 = (uint64_t)&v41[32 * v38];
        *(_QWORD *)v88 = v41;
        *(_QWORD *)&v88[8] = v46;
        *(_QWORD *)&v89 = &v41[32 * v40];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v46, &v99);
        v33 = v46 + 32;
        *(_QWORD *)&v88[16] = v46 + 32;
        v47 = (__int128 *)v82.i64[1];
        v48 = *(_QWORD *)&v88[8];
        if (v82.i64[1] == v82.i64[0])
        {
          v49 = vdupq_n_s64(v82.u64[1]);
        }
        else
        {
          do
          {
            v47 -= 2;
            v48 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v48 - 32, v47);
          }
          while (v47 != (__int128 *)v82.i64[0]);
          v49 = v82;
          v33 = *(_QWORD *)&v88[16];
        }
        v82.i64[0] = v48;
        v82.i64[1] = v33;
        *(int64x2_t *)&v88[8] = v49;
        v51 = *(_QWORD *)&v83[0];
        *(_QWORD *)&v83[0] = v89;
        *(_QWORD *)&v89 = v51;
        *(_QWORD *)v88 = v49.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v88);
      }
      else
      {
        v33 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v82.i64[1], &v99)+ 32;
      }
      v82.i64[1] = v33;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v99);
    }
    else
    {
      if (v82.i64[1] >= *(_QWORD *)&v83[0])
      {
        v34 = (v82.i64[1] - v82.i64[0]) >> 5;
        if ((unint64_t)(v34 + 1) >> 59)
          goto LABEL_102;
        v35 = (*(_QWORD *)&v83[0] - v82.i64[0]) >> 4;
        if (v35 <= v34 + 1)
          v35 = v34 + 1;
        if (*(_QWORD *)&v83[0] - v82.i64[0] >= 0x7FFFFFFFFFFFFFE0uLL)
          v36 = 0x7FFFFFFFFFFFFFFLL;
        else
          v36 = v35;
        *((_QWORD *)&v89 + 1) = v83;
        if (v36)
          v37 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)v83, v36);
        else
          v37 = 0;
        v42 = (uint64_t)&v37[32 * v34];
        *(_QWORD *)v88 = v37;
        *(_QWORD *)&v88[8] = v42;
        *(_QWORD *)&v89 = &v37[32 * v36];
        llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v42, (__int128 *)&v101);
        v32 = v42 + 32;
        *(_QWORD *)&v88[16] = v42 + 32;
        v43 = (__int128 *)v82.i64[1];
        v44 = *(_QWORD *)&v88[8];
        if (v82.i64[1] == v82.i64[0])
        {
          v45 = vdupq_n_s64(v82.u64[1]);
        }
        else
        {
          do
          {
            v43 -= 2;
            v44 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v44 - 32, v43);
          }
          while (v43 != (__int128 *)v82.i64[0]);
          v45 = v82;
          v32 = *(_QWORD *)&v88[16];
        }
        v82.i64[0] = v44;
        v82.i64[1] = v32;
        *(int64x2_t *)&v88[8] = v45;
        v50 = *(_QWORD *)&v83[0];
        *(_QWORD *)&v83[0] = v89;
        *(_QWORD *)&v89 = v50;
        *(_QWORD *)v88 = v45.i64[0];
        std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v88);
      }
      else
      {
        v32 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v82.i64[1], (__int128 *)&v101)+ 32;
      }
      v82.i64[1] = v32;
    }
    llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v101);
    v103[0] = (char *)llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::CallbacksHolder<llvm::Error (*)(llvm::jitlink::LinkGraph &),llvm::Error (*)(llvm::jitlink::LinkGraph &),void>::Callbacks
            + 2;
    if (*(_QWORD *)&v83[1] < *((_QWORD *)&v83[1] + 1))
    {
      v52 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(*(uint64_t *)&v83[1], (__int128 *)&v101)+ 32;
LABEL_89:
      *(_QWORD *)&v83[1] = v52;
      llvm::detail::UniqueFunctionBase<void,llvm::Error>::~UniqueFunctionBase(&v101);
      goto LABEL_90;
    }
    v53 = (uint64_t)(*(_QWORD *)&v83[1] - *((_QWORD *)&v83[0] + 1)) >> 5;
    if (!((unint64_t)(v53 + 1) >> 59))
    {
      v54 = (uint64_t)(*((_QWORD *)&v83[1] + 1) - *((_QWORD *)&v83[0] + 1)) >> 4;
      if (v54 <= v53 + 1)
        v54 = v53 + 1;
      if (*((_QWORD *)&v83[1] + 1) - *((_QWORD *)&v83[0] + 1) >= 0x7FFFFFFFFFFFFFE0uLL)
        v55 = 0x7FFFFFFFFFFFFFFLL;
      else
        v55 = v54;
      *((_QWORD *)&v89 + 1) = (char *)&v83[1] + 8;
      if (v55)
        v56 = (char *)std::__allocate_at_least[abi:nn180100]<std::allocator<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>>((uint64_t)&v83[1] + 8, v55);
      else
        v56 = 0;
      v57 = (uint64_t)&v56[32 * v53];
      *(_QWORD *)v88 = v56;
      *(_QWORD *)&v88[8] = v57;
      *(_QWORD *)&v89 = &v56[32 * v55];
      llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v57, (__int128 *)&v101);
      v52 = v57 + 32;
      *(_QWORD *)&v88[16] = v57 + 32;
      v59 = (__int128 *)*((_QWORD *)&v83[0] + 1);
      v58 = *(__int128 **)&v83[1];
      v60 = *(_QWORD *)&v88[8];
      if (*(_QWORD *)&v83[1] == *((_QWORD *)&v83[0] + 1))
      {
        v61 = vdupq_n_s64(*(unint64_t *)&v83[1]);
      }
      else
      {
        do
        {
          v58 -= 2;
          v60 = llvm::detail::UniqueFunctionBase<llvm::Error,llvm::jitlink::LinkGraph &>::UniqueFunctionBase(v60 - 32, v58);
        }
        while (v58 != v59);
        v61 = *(int64x2_t *)((char *)v83 + 8);
        v52 = *(_QWORD *)&v88[16];
      }
      *((_QWORD *)&v83[0] + 1) = v60;
      *(_QWORD *)&v83[1] = v52;
      *(int64x2_t *)&v88[8] = v61;
      v62 = *((_QWORD *)&v83[1] + 1);
      *((_QWORD *)&v83[1] + 1) = v89;
      *(_QWORD *)&v89 = v62;
      *(_QWORD *)v88 = v61.i64[0];
      std::__split_buffer<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::~__split_buffer((uint64_t)v88);
      goto LABEL_89;
    }
LABEL_102:
    abort();
  }
LABEL_90:
  (*(void (**)(_BYTE *__return_ptr, uint64_t, llvm::jitlink::LinkGraph *, int64x2_t *))(*(_QWORD *)*a2 + 72))(v88, *a2, *a1, &v82);
  if (*(_QWORD *)v88)
  {
    v63 = *a2;
    v81 = *(_QWORD *)v88;
    *(_QWORD *)v88 = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v63 + 24))(v63, &v81);
    if (v81)
      (*(void (**)(uint64_t))(*(_QWORD *)v81 + 8))(v81);
    v64 = *(_QWORD *)v88;
    if (*(_QWORD *)v88)
LABEL_94:
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  }
  else
  {
    v65 = (_QWORD *)operator new();
    v66 = *a2;
    *a2 = 0;
    v67 = *a1;
    *a1 = 0;
    v68 = *(_QWORD *)&v83[0];
    v69 = v82;
    v82 = 0uLL;
    v70 = *((_QWORD *)&v83[1] + 1);
    v71 = *(_OWORD *)((char *)v83 + 8);
    memset(v83, 0, sizeof(v83));
    v72 = *(_QWORD *)&v85[0];
    v73 = v84;
    v84 = 0uLL;
    v74 = *((_QWORD *)&v85[1] + 1);
    v75 = *(_OWORD *)((char *)v85 + 8);
    memset(v85, 0, sizeof(v85));
    v76 = v87;
    v77 = v86;
    v86 = 0uLL;
    v87 = 0;
    v97 = v67;
    v98 = v66;
    *(int64x2_t *)v88 = v69;
    v101 = 0;
    v102 = 0uLL;
    v89 = v71;
    *(_QWORD *)&v88[16] = v68;
    v90 = v70;
    memset(v103, 0, sizeof(v103));
    v91 = v73;
    memset(v104, 0, sizeof(v104));
    v93 = v75;
    v92 = v72;
    v94 = v74;
    memset(v105, 0, sizeof(v105));
    v95 = v77;
    v96 = v76;
    memset(v106, 0, 24);
    llvm::jitlink::JITLinkerBase::JITLinkerBase(v65, &v98, (uint64_t *)&v97, (uint64_t)v88);
    *v78 = &off_251C15CA8;
    *(_QWORD *)&v99 = &v95;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v99);
    *(_QWORD *)&v99 = &v93;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v99);
    *(_QWORD *)&v99 = &v91;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v99);
    *(_QWORD *)&v99 = &v89;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v99);
    *(_QWORD *)&v99 = v88;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)&v99);
    v79 = v97;
    v97 = 0;
    if (v79)
    {
      llvm::jitlink::LinkGraph::~LinkGraph(v79);
      MEMORY[0x24BD1B3A4]();
    }
    v80 = v98;
    v98 = 0;
    if (v80)
      (*(void (**)(uint64_t))(*(_QWORD *)v80 + 8))(v80);
    *v65 = &off_251C15C80;
    *(_QWORD *)v88 = v106;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v88);
    *(_QWORD *)v88 = v105;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v88);
    *(_QWORD *)v88 = v104;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v88);
    *(_QWORD *)v88 = v103;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v88);
    *(_QWORD *)v88 = &v101;
    std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v88);
    *(_QWORD *)v88 = v65;
    llvm::jitlink::JITLinkerBase::linkPhase1((uint64_t)v65, (uint64_t *)v88);
    v64 = *(_QWORD *)v88;
    *(_QWORD *)v88 = 0;
    if (v64)
      goto LABEL_94;
  }
  *(_QWORD *)v88 = &v86;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v88);
  *(_QWORD *)v88 = (char *)v85 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v88);
  *(_QWORD *)v88 = &v84;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v88);
  *(_QWORD *)v88 = (char *)v83 + 8;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v88);
  *(_QWORD *)v88 = &v82;
  std::vector<llvm::unique_function<llvm::Error ()(llvm::jitlink::LinkGraph &)>>::__destroy_vector::operator()[abi:nn180100]((void ***)v88);
}

uint64_t `anonymous namespace'::buildTables_ELF_aarch64@<X0>(_anonymous_namespace_ *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  unint64_t *v10;
  int v11;
  uint64_t EntryForTarget;
  char v13;
  _OWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t Section;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t *v20;
  unint64_t *v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  unint64_t *v29;
  _QWORD *v30;
  unint64_t *v31;
  _QWORD *v33;
  uint64_t *v34;
  uint64_t v35[2];
  unsigned int v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  _QWORD v40[2];
  int v41;
  uint64_t v42;
  _QWORD v43[2];
  int v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD v47[2];
  int v48;
  uint64_t v49;
  __int128 v50;
  _QWORD *v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;
  _OWORD v56[4];
  _OWORD v57[8];
  _OWORD v58[4];
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  unint64_t v62[3];

  v47[0] = 0;
  v47[1] = 0;
  v48 = 0;
  v49 = 0;
  v43[0] = 0;
  v43[1] = 0;
  v44 = 0;
  v45 = v47;
  v46 = 0;
  v40[0] = 0;
  v40[1] = 0;
  v41 = 0;
  v42 = 0;
  v35[0] = 0;
  v35[1] = 0;
  v36 = 0;
  v37 = 0;
  v38 = 0;
  v39 = v40;
  llvm::jitlink::LinkGraph::blocks(this, v57);
  v58[0] = v57[0];
  v58[1] = v57[1];
  v58[2] = v57[2];
  v58[3] = v57[3];
  llvm::jitlink::LinkGraph::blocks(this, &v50);
  v56[0] = v52;
  v56[1] = v53;
  v56[2] = v54;
  v56[3] = v55;
  std::vector<llvm::jitlink::Block *>::vector<llvm::jitlink::LinkGraph::nested_collection_iterator<llvm::mapped_iterator<llvm::DenseMapIterator<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>,false>,llvm::jitlink::LinkGraph::GetSectionMapEntryValue,llvm::jitlink::Section&>,llvm::detail::DenseSetImpl<llvm::jitlink::Block *,llvm::DenseMap<llvm::jitlink::Block *,llvm::detail::DenseSetEmpty,llvm::DenseMapInfo<llvm::jitlink::Block *,void>,llvm::detail::DenseSetPair<llvm::jitlink::Block *>>,llvm::DenseMapInfo<llvm::jitlink::Block *,void>>::Iterator,llvm::jitlink::Block *,&llvm::jitlink::LinkGraph::getSectionBlocks>,0>(&v59, v58, (uint64_t *)v56);
  v5 = v59;
  v34 = v60;
  if (v59 != v60)
  {
    v33 = a2;
    v6 = &v51;
    while (1)
    {
      v7 = *v5;
      v9 = *(uint64_t **)(*v5 + 40);
      v8 = *(uint64_t **)(*v5 + 48);
      while (v9 != v8)
      {
        if ((llvm::jitlink::aarch64::GOTTableManager::visitEdge((uint64_t)v47, (uint64_t)this, v7, (uint64_t)v9) & 1) != 0)
          goto LABEL_29;
        v11 = *((unsigned __int8 *)v9 + 24);
        if (v11 == 20)
        {
          v13 = 13;
          goto LABEL_13;
        }
        if (v11 == 19)
        {
          v13 = 12;
LABEL_13:
          *((_BYTE *)v9 + 24) = v13;
          v14 = (_OWORD *)*v9;
          v57[0] = *(_OWORD *)*v9;
          *(_QWORD *)&v50 = 0;
          v15 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v35, (uint64_t)v57, &v50, v10);
          v16 = v50;
          if (!v15)
            v16 = v35[0] + 24 * v36;
          if (v16 == v35[0] + 24 * v36)
          {
            Section = v37;
            if (!v37)
            {
              Section = llvm::jitlink::LinkGraph::createSection((uint64_t)this, (uint64_t)"$__TLSDESC", 10, 1);
              v37 = Section;
            }
            *((_QWORD *)&v57[0] + 1) = 16;
            *(_QWORD *)&v50 = 0;
            v61 = 0;
            v62[0] = 8;
            v18 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::ArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)this, Section, (uint64_t *)v57, (uint64_t *)&v50, v62, &v61);
            v19 = v38;
            if (!v38)
            {
              v19 = llvm::jitlink::LinkGraph::addExternalSymbol((uint64_t)this, (uint64_t)"__tlsdesc_resolver", 18, 8, 0);
              v38 = v19;
            }
            llvm::jitlink::Block::addEdge(v18, 2, 0, (uint64_t)v19, 0);
            v20 = v39;
            v57[0] = *v14;
            *(_QWORD *)&v50 = 0;
            v22 = llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>,llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,std::unique_ptr<llvm::jitlink::Section>>>::LookupBucketFor<llvm::StringRef>(v39, (uint64_t)v57, &v50, v21);
            v23 = v50;
            if (!v22)
              v23 = *v20 + 24 * *((unsigned int *)v20 + 4);
            if (v23 == *v20 + 24 * *((unsigned int *)v20 + 4))
            {
              v24 = v6;
              v25 = v20[3];
              if (!v25)
              {
                v25 = llvm::jitlink::LinkGraph::createSection((uint64_t)this, (uint64_t)"$__TLSINFO", 10, 1);
                v20[3] = v25;
              }
              v26 = (_QWORD *)llvm::BumpPtrAllocatorImpl<llvm::MallocAllocator,4096ul,4096ul,128ul>::Allocate((uint64_t)this, 16, 0);
              *v26 = 0;
              v26[1] = 0;
              *(_QWORD *)&v57[0] = v26;
              *((_QWORD *)&v57[0] + 1) = 16;
              *(_QWORD *)&v50 = 0;
              v61 = 0;
              v62[0] = 8;
              v27 = llvm::jitlink::LinkGraph::createBlock<llvm::jitlink::Section &,llvm::MutableArrayRef<char> &,llvm::orc::ExecutorAddr &,unsigned long long &,unsigned long long &>((uint64_t)this, v25, (uint64_t *)v57, (uint64_t *)&v50, v62, &v61);
              llvm::jitlink::Block::addEdge(v27, 2, 8, (uint64_t)v14, 0);
              v28 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, (uint64_t)v27, 0, 16, 0, 0);
              v50 = *v14;
              v51 = v28;
              v6 = v24;
              llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v20, &v50, v24, v29, (uint64_t)v57);
              v23 = *(_QWORD *)&v57[0];
            }
            llvm::jitlink::Block::addEdge(v18, 2, 8, *(_QWORD *)(v23 + 16), 0);
            v30 = llvm::jitlink::LinkGraph::addAnonymousSymbol((uint64_t)this, (uint64_t)v18, 0, 8, 0, 0);
            v50 = *v14;
            v51 = v30;
            llvm::DenseMapBase<llvm::DenseMap<llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>,llvm::StringRef,llvm::jitlink::Symbol *,llvm::DenseMapInfo<llvm::StringRef,void>,llvm::detail::DenseMapPair<llvm::StringRef,llvm::jitlink::Symbol *>>::try_emplace<llvm::jitlink::Symbol *>((uint64_t)v35, &v50, v6, v31, (uint64_t)v57);
            v16 = *(_QWORD *)&v57[0];
          }
          EntryForTarget = *(_QWORD *)(v16 + 16);
LABEL_28:
          *v9 = EntryForTarget;
          goto LABEL_29;
        }
        if (v11 == 9 && (*(_BYTE *)(*(_QWORD *)(*v9 + 16) + 8) & 1) == 0)
        {
          EntryForTarget = llvm::jitlink::TableManager<llvm::jitlink::aarch64::PLTTableManager>::getEntryForTarget((uint64_t)v43, (uint64_t)this, (_OWORD *)*v9, v10);
          goto LABEL_28;
        }
LABEL_29:
        v9 += 4;
      }
      if (++v5 == v34)
      {
        v5 = v59;
        a2 = v33;
        break;
      }
    }
  }
  if (v5)
  {
    v60 = v5;
    operator delete(v5);
  }
  *a2 = 0;
  MEMORY[0x24BD1B398](v35[0], 8);
  MEMORY[0x24BD1B398](v40[0], 8);
  MEMORY[0x24BD1B398](v43[0], 8);
  return MEMORY[0x24BD1B398](v47[0], 8);
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::makeTargetFlags()
{
  return 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRawOffset(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 8);
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::excludeSection()
{
  return 0;
}

uint64_t llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFLinkGraphBuilder(uint64_t a1, uint64_t a2, uint64_t a3, void *__src, size_t __len, uint64_t a6)
{
  uint64_t v10;
  void *__p[2];
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  void *__dst[2];
  uint64_t v17;
  __int128 v18;
  uint64_t v19;

  if (__src)
  {
    std::string::basic_string[abi:nn180100](__dst, __src, __len);
  }
  else
  {
    __dst[0] = 0;
    __dst[1] = 0;
    v17 = 0;
  }
  *(_OWORD *)__p = *(_OWORD *)a3;
  v13 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  v14 = *(_OWORD *)(a3 + 24);
  v15 = *(_QWORD *)(a3 + 40);
  v10 = operator new();
  v18 = *(_OWORD *)__dst;
  v19 = v17;
  __dst[0] = 0;
  __dst[1] = 0;
  v17 = 0;
  llvm::jitlink::LinkGraph::LinkGraph(v10, &v18, (__int128 *)__p, 8, 1, a6);
  if (SHIBYTE(v19) < 0)
    operator delete((void *)v18);
  *(_QWORD *)a1 = &off_251C159D8;
  *(_QWORD *)(a1 + 8) = v10;
  *(_QWORD *)(a1 + 16) = 0;
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v17) < 0)
    operator delete(__dst[0]);
  *(_QWORD *)a1 = off_251C15C00;
  *(_QWORD *)(a1 + 24) = a2;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_QWORD *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 72) = 1;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  return a1;
}

void `anonymous namespace'::ELFLinkGraphBuilder_aarch64<llvm::object::ELFType<(llvm::support::endianness)1,true>>::~ELFLinkGraphBuilder_aarch64(uint64_t a1)
{
  *(_QWORD *)a1 = off_251C15C00;
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 128), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 104), 8);
  MEMORY[0x24BD1B398](*(_QWORD *)(a1 + 80), 8);
  *(_QWORD *)a1 = &off_251C159D8;
  std::unique_ptr<llvm::jitlink::LinkGraph>::reset[abi:nn180100]((llvm::jitlink::LinkGraph **)(a1 + 8), 0);
  JUMPOUT(0x24BD1B3A4);
}

void `anonymous namespace'::ELFLinkGraphBuilder_aarch64<llvm::object::ELFType<(llvm::support::endianness)1,true>>::addRelocations(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t GraphBlock;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  unsigned int *v12;
  int v13;
  uint64_t GraphSymbol;
  signed int v15;
  char v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  const char *ELFRelocationTypeName;
  _UNKNOWN **v22;
  _UNKNOWN **v23;
  uint64_t v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  unsigned int v31;
  unsigned int *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned int *v38;
  __int128 v39;
  __int128 v40;
  uint64_t (**v41)(llvm::detail::format_adapter *__hidden);
  signed int *v42;
  _QWORD v43[2];
  uint64_t (**v44)(llvm::detail::format_adapter *__hidden);
  int v45;
  _QWORD v46[3];
  int v47;
  _QWORD v48[4];
  __int16 v49;
  signed int v50;
  uint64_t v51;
  _UNKNOWN **v52;
  const char *v53;
  _UNKNOWN **v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  __int128 v59;
  char v60;
  unsigned int *v61;
  char v62;
  uint64_t v63;
  char v64;
  uint64_t v65;

  v65 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 40);
  if (v3)
  {
    v5 = *(_QWORD *)(a1 + 32);
    v6 = v5 + (v3 << 6);
    do
    {
      if (*(_DWORD *)(v5 + 4) == 4)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(*(_QWORD **)(a1 + 24), *(_DWORD *)(v5 + 44), (uint64_t)&v61);
        if ((v62 & 1) != 0)
        {
          v33 = v61;
          *a2 = (uint64_t)v61;
          if (v33)
            return;
        }
        else
        {
          v7 = *(_QWORD **)(a1 + 24);
          *(_QWORD *)&v39 = llvm::object::defaultWarningHandler;
          llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(v7, v61, (void (*)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **))llvm::function_ref<llvm::Error ()(llvm::Twine const&)>::callback_fn<llvm::Error (*)(llvm::Twine const&)>, (uint64_t)&v39, (uint64_t)&v59);
          if ((v60 & 1) != 0)
          {
            v34 = v59;
            *(_QWORD *)&v59 = 0;
            *a2 = v34;
          }
          else if ((*(_BYTE *)(a1 + 72)
                  || (v39 = v59,
                      std::__find_impl[abi:nn180100]<char const* const*,char const* const*,llvm::StringRef,std::__identity>((const char **)llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames, (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278], (uint64_t)&v39) == (const char **)&llvm::jitlink::ELFLinkGraphBuilderBase::DwarfSectionNames[unk_25795D278]))&& !(*(unsigned int (**)(uint64_t, unsigned int *))(*(_QWORD *)a1 + 40))(a1, v61))
          {
            GraphBlock = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphBlock(a1, *(_DWORD *)(v5 + 44));
            if (GraphBlock)
            {
              v9 = (_QWORD *)GraphBlock;
              llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<llvm::object::Elf_Rel_Impl<llvm::object::ELFType<(llvm::support::endianness)1,true>,true>>(*(_QWORD **)(a1 + 24), (_QWORD *)v5, (uint64_t)&v56);
              v10 = v56;
              if ((v58 & 1) != 0)
              {
                v56 = 0;
              }
              else
              {
                if (v57)
                {
                  for (i = 24 * v57; i; i -= 24)
                  {
                    v12 = v61;
                    v13 = *(_DWORD *)(v10 + 12);
                    v47 = v13;
                    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(*(_QWORD **)(a1 + 24), v10, *(_QWORD **)(a1 + 48), (uint64_t)&v63);
                    if ((v64 & 1) != 0)
                    {
                      v17 = v63;
                      v63 = 0;
                      *a2 = v17;
                    }
                    else
                    {
                      GraphSymbol = llvm::jitlink::ELFLinkGraphBuilder<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getGraphSymbol(a1, v13);
                      if (GraphSymbol)
                      {
                        v15 = *(_DWORD *)(v10 + 8);
                        v50 = v15;
                        if (v15 <= 310)
                        {
                          switch(v15)
                          {
                            case 257:
                              v16 = 2;
                              goto LABEL_48;
                            case 258:
                              v16 = 4;
                              goto LABEL_48;
                            case 259:
                            case 262:
                            case 263:
                            case 265:
                            case 267:
                            case 270:
                            case 271:
                            case 272:
                            case 273:
                            case 274:
                            case 276:
                            case 279:
                            case 280:
                            case 281:
                              goto LABEL_33;
                            case 260:
                              v16 = 5;
                              goto LABEL_48;
                            case 261:
                              v16 = 6;
                              goto LABEL_48;
                            case 264:
                              v19 = (uint64_t *)(v10 + 16);
                              v20 = *(_QWORD *)v10 + *((_QWORD *)v12 + 2) - *v9;
                              if ((*(_DWORD *)(v9[3] + v20) & 0x5FFFFFE0) == 0x52800000)
                                goto LABEL_45;
                              llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[80]>(a2);
                              goto LABEL_51;
                            case 266:
                              v19 = (uint64_t *)(v10 + 16);
                              v20 = *(_QWORD *)v10 + *((_QWORD *)v12 + 2) - *v9;
                              if ((*(_DWORD *)(v9[3] + v20) & 0x5FFFFFE0) == 0x52A00000)
                                goto LABEL_45;
                              v25 = a2;
                              v26 = "R_AARCH64_MOVW_UABS_G1_NC target is not a MOVK/MOVZ (imm16, LSL #16) instruction";
                              goto LABEL_71;
                            case 268:
                              v19 = (uint64_t *)(v10 + 16);
                              v20 = *(_QWORD *)v10 + *((_QWORD *)v12 + 2) - *v9;
                              if ((*(_DWORD *)(v9[3] + v20) & 0x5FFFFFE0) == 0x52C00000)
                                goto LABEL_45;
                              v25 = a2;
                              v26 = "R_AARCH64_MOVW_UABS_G2_NC target is not a MOVK/MOVZ (imm16, LSL #32) instruction";
                              goto LABEL_71;
                            case 269:
                              v19 = (uint64_t *)(v10 + 16);
                              v20 = *(_QWORD *)v10 + *((_QWORD *)v12 + 2) - *v9;
                              if ((*(_DWORD *)(v9[3] + v20) & 0x5FFFFFE0) == 0x52E00000)
                              {
LABEL_45:
                                v16 = 10;
                                goto LABEL_49;
                              }
                              llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[78]>(a2);
                              goto LABEL_51;
                            case 275:
                              v16 = 12;
                              goto LABEL_48;
                            case 277:
                              v16 = 13;
                              goto LABEL_48;
                            case 278:
                              v19 = (uint64_t *)(v10 + 16);
                              v20 = *(_QWORD *)v10 + *((_QWORD *)v12 + 2) - *v9;
                              v29 = *(_DWORD *)(v9[3] + v20);
                              if ((~v29 & 0x4800000) != 0 && (v29 & 0xFB000000) == 956301312)
                                goto LABEL_72;
                              llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[74]>(a2);
                              goto LABEL_51;
                            case 282:
                            case 283:
                              v16 = 9;
                              goto LABEL_48;
                            case 284:
                              v19 = (uint64_t *)(v10 + 16);
                              v20 = *(_QWORD *)v10 + *((_QWORD *)v12 + 2) - *v9;
                              if ((*(_DWORD *)(v9[3] + v20) & 0xFB000000) == 0x79000000)
                                goto LABEL_72;
                              llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[53]>((llvm::formatv_object_base *)"R_AARCH64_LDST16_ABS_LO12_NC target is not a LDRH/STRH (imm12) instruction", a2);
                              goto LABEL_51;
                            case 285:
                              v19 = (uint64_t *)(v10 + 16);
                              v20 = *(_QWORD *)v10 + *((_QWORD *)v12 + 2) - *v9;
                              if ((*(_DWORD *)(v9[3] + v20) & 0xFB000000) == 0xB9000000)
                                goto LABEL_72;
                              v25 = a2;
                              v26 = "R_AARCH64_LDST32_ABS_LO12_NC target is not a LDR/STR (imm12, 32 bit) instruction";
                              goto LABEL_71;
                            case 286:
                              v19 = (uint64_t *)(v10 + 16);
                              v20 = *(_QWORD *)v10 + *((_QWORD *)v12 + 2) - *v9;
                              v31 = *(_DWORD *)(v9[3] + v20);
                              if (v31 >> 30 == 3 && (v31 & 0x3B000000) == 956301312)
                                goto LABEL_72;
                              v25 = a2;
                              v26 = "R_AARCH64_LDST64_ABS_LO12_NC target is not a LDR/STR (imm12, 64 bit) instruction";
LABEL_71:
                              llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[81]>(v25, (llvm::formatv_object_base *)v26);
                              goto LABEL_51;
                            default:
                              if (v15 != 299)
                                goto LABEL_33;
                              v19 = (uint64_t *)(v10 + 16);
                              v20 = *(_QWORD *)v10 + *((_QWORD *)v12 + 2) - *v9;
                              if (*(_DWORD *)(v9[3] + v20) >> 23 != 123)
                              {
                                llvm::make_error<llvm::jitlink::JITLinkError,char const(&)[83]>(a2);
                                goto LABEL_51;
                              }
LABEL_72:
                              v16 = 13;
                              break;
                          }
                          goto LABEL_49;
                        }
                        if (v15 > 562)
                        {
                          if ((v15 - 563) < 2)
                          {
                            v16 = 20;
                            goto LABEL_48;
                          }
                          if (v15 == 569)
                            goto LABEL_50;
                        }
                        else
                        {
                          switch(v15)
                          {
                            case 311:
                              v16 = 14;
                              goto LABEL_48;
                            case 312:
                              v16 = 15;
LABEL_48:
                              v19 = (uint64_t *)(v10 + 16);
                              v20 = *(_QWORD *)v10 + *((_QWORD *)v12 + 2) - *v9;
LABEL_49:
                              v27 = *v19;
                              *(_QWORD *)&v39 = GraphSymbol;
                              DWORD2(v39) = v20;
                              *(_QWORD *)&v40 = v27;
                              BYTE8(v40) = v16;
                              llvm::jitlink::Block::addEdge(v9, &v39);
LABEL_50:
                              *a2 = 0;
                              goto LABEL_51;
                            case 562:
                              v16 = 19;
                              goto LABEL_48;
                          }
                        }
LABEL_33:
                        *(_QWORD *)&v39 = "{0:d}: ";
                        *((_QWORD *)&v39 + 1) = 7;
                        *(_QWORD *)&v40 = v43;
                        *((_QWORD *)&v40 + 1) = 1;
                        v41 = &off_251C12BB8;
                        v42 = &v50;
                        v43[0] = &v41;
                        v48[0] = "Unsupported aarch64 relocation:";
                        v48[2] = &v39;
                        v49 = 1539;
                        ELFRelocationTypeName = llvm::object::getELFRelocationTypeName((llvm::object *)0xB7, v15);
                        v23 = v22;
                        v24 = operator new();
                        v51 = (uint64_t)v48;
                        v52 = v23;
                        v53 = ELFRelocationTypeName;
                        v54 = v23;
                        v55 = 1282;
                        *(_QWORD *)v24 = off_251C15728;
                        llvm::Twine::str((llvm::formatv_object_base **)&v51, (std::string *)(v24 + 8));
                        *a2 = v24;
                      }
                      else
                      {
                        v18 = *(_DWORD *)(a1 + 112);
                        *(_QWORD *)&v39 = "Could not find symbol at given index, did you add it to JITSymbolTable? index:"
                                          " {0}, shndx: {1} Size of table: {2}";
                        *((_QWORD *)&v39 + 1) = 113;
                        *(_QWORD *)&v40 = v46;
                        *((_QWORD *)&v40 + 1) = 3;
                        v41 = &off_251C158D8;
                        v42 = &v47;
                        v43[0] = &off_251C15AB8;
                        v43[1] = v63 + 6;
                        v44 = &off_251C15650;
                        v45 = v18;
                        v46[0] = &v41;
                        v46[1] = v43;
                        v46[2] = &v44;
                        getErrorErrorCat();
                        v51 = 3;
                        v52 = &getErrorErrorCat(void)::ErrorErrorCat;
                        llvm::make_error<llvm::StringError,llvm::formatv_object<std::tuple<llvm::detail::provider_format_adapter<unsigned int &>,llvm::detail::stream_operator_format_adapter<llvm::support::detail::packed_endian_specific_integral<unsigned short,(llvm::support::endianness)1,1ul,1ul> const&>,llvm::detail::provider_format_adapter<unsigned int>>>,std::error_code>((llvm::formatv_object_base *)&v39, &v51, a2);
                      }
                    }
LABEL_51:
                    if ((v64 & 1) != 0)
                    {
                      v28 = v63;
                      v63 = 0;
                      if (v28)
                        (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
                    }
                    if (*a2)
                      goto LABEL_84;
                    v10 += 24;
                  }
                }
                v10 = 0;
              }
              *a2 = v10;
LABEL_84:
              if ((v58 & 1) != 0)
              {
                v36 = v56;
                v56 = 0;
                if (v36)
                  (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
              }
            }
            else
            {
              LOWORD(v41) = 1283;
              *(_QWORD *)&v39 = "Refencing a section that wasn't added to the graph: ";
              v40 = v59;
              getErrorErrorCat();
              v35 = operator new();
              *(_QWORD *)v35 = off_251C127D0;
              llvm::Twine::str((llvm::formatv_object_base **)&v39, (std::string *)(v35 + 8));
              *(_QWORD *)(v35 + 32) = 3;
              *(_QWORD *)(v35 + 40) = &getErrorErrorCat(void)::ErrorErrorCat;
              *(_BYTE *)(v35 + 48) = 1;
              *a2 = v35;
            }
          }
          else
          {
            *a2 = 0;
          }
          if ((v60 & 1) != 0)
          {
            v37 = v59;
            *(_QWORD *)&v59 = 0;
            if (v37)
              (*(void (**)(uint64_t))(*(_QWORD *)v37 + 8))(v37);
          }
          if ((v62 & 1) != 0)
          {
            v38 = v61;
            v61 = 0;
            if (v38)
              (*(void (**)(unsigned int *))(*(_QWORD *)v38 + 8))(v38);
          }
          if (*a2)
            return;
        }
      }
      else
      {
        *a2 = 0;
      }
      v5 += 64;
    }
    while (v5 != v6);
  }
  *a2 = 0;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(_QWORD *a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  char v6;
  uint64_t v7;
  llvm::formatv_object_base *v8[4];
  __int16 v9;
  unsigned int v10;
  _QWORD v11[2];
  char v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v11);
  if ((v12 & 1) != 0)
  {
    v5 = v11[0];
    v6 = *(_BYTE *)(a3 + 8) | 1;
    goto LABEL_5;
  }
  if (v11[1] > (unint64_t)a2)
  {
    v5 = v11[0] + ((unint64_t)a2 << 6);
    v6 = *(_BYTE *)(a3 + 8) & 0xFE;
LABEL_5:
    *(_BYTE *)(a3 + 8) = v6;
    *(_QWORD *)a3 = v5;
    return;
  }
  v8[0] = (llvm::formatv_object_base *)"invalid section index: ";
  v8[2] = (llvm::formatv_object_base *)a2;
  v9 = 2051;
  v10 = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v8, &v10, (uint64_t *)a3);
  *(_BYTE *)(a3 + 8) |= 1u;
  if ((v12 & 1) != 0)
  {
    v7 = v11[0];
    v11[0] = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14[2];
  char v15;
  uint64_t v16[2];
  char v17;
  uint64_t v18;

  v18 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v16);
  if ((v17 & 1) != 0)
  {
    v11 = v16[0];
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v11;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionStringTable(a1, v16[0], v16[1], a3, a4, (uint64_t)v14);
    if ((v15 & 1) != 0)
    {
      v12 = v14[0];
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(a1, a2, v14[0], v14[1], a5);
      if ((v15 & 1) != 0)
      {
        v10 = v14[0];
        v14[0] = 0;
        if (v10)
          (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
      }
    }
    if ((v17 & 1) != 0)
    {
      v13 = v16[0];
      v16[0] = 0;
      if (v13)
        (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  const char *v5;
  unint64_t v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  BOOL v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  uint64_t v20;
  unsigned int v21[4];
  uint64_t *v22;
  __int16 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  llvm::formatv_object_base *v27[2];
  const char *v28;
  __int16 v29;
  uint64_t v30;
  unint64_t v31;
  unsigned int v32;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 40);
  v31 = v4;
  if (v4)
  {
    v5 = (const char *)*(unsigned __int16 *)(v3 + 58);
    if (v5 == (const char *)64)
    {
      v6 = a1[1];
      if (v4 > 0xFFFFFFFFFFFFFFBFLL || v4 + 64 > v6)
      {
        v27[0] = (llvm::formatv_object_base *)"section header table goes past the end of the file: e_shoff = 0x";
        v28 = (const char *)&v31;
        v29 = 3587;
        v21[0] = 3;
        llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v27, v21, &v26);
        *(_BYTE *)(a2 + 16) |= 1u;
        v8 = v26;
      }
      else
      {
        v11 = v3 + v4;
        v12 = *(unsigned __int16 *)(v3 + 60);
        v25 = v12;
        if (v12 || (v12 = *(_QWORD *)(v11 + 32), v25 = v12, !(v12 >> 58)))
        {
          v13 = __CFADD__(v4, v12 << 6);
          v14 = v4 + (v12 << 6);
          if (v13)
          {
            v16[0] = "invalid section header table offset (e_shoff = 0x";
            v16[2] = &v31;
            v17 = 3587;
            v18[0] = v16;
            v18[2] = ") or invalid number of sections specified in the first section header's sh_size field (0x";
            v19 = 770;
            *(_QWORD *)v21 = v18;
            v22 = (uint64_t *)&v25;
            v23 = 3586;
            v27[0] = (llvm::formatv_object_base *)v21;
            v28 = ")";
            v29 = 770;
            v32 = 3;
            llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v27, &v32, &v20);
            *(_BYTE *)(a2 + 16) |= 1u;
            v8 = v20;
          }
          else
          {
            if (v14 <= v6)
            {
              *(_BYTE *)(a2 + 16) &= ~1u;
              *(_QWORD *)a2 = v11;
              *(_QWORD *)(a2 + 8) = v12;
              return;
            }
            v27[0] = (llvm::formatv_object_base *)"section table goes past the end of file";
            v29 = 259;
            v21[0] = 3;
            llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v27, v21, &v15);
            *(_BYTE *)(a2 + 16) |= 1u;
            v8 = v15;
          }
        }
        else
        {
          *(_QWORD *)v21 = "invalid number of sections specified in the NULL section's sh_size field (";
          v22 = (uint64_t *)&v25;
          v23 = 3075;
          v27[0] = (llvm::formatv_object_base *)v21;
          v28 = ")";
          v29 = 770;
          LODWORD(v18[0]) = 3;
          llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v27, (unsigned int *)v18, &v24);
          *(_BYTE *)(a2 + 16) |= 1u;
          v8 = v24;
        }
      }
    }
    else
    {
      v27[0] = (llvm::formatv_object_base *)"invalid e_shentsize in ELF header: ";
      v28 = v5;
      v29 = 2307;
      v21[0] = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v27, v21, &v30);
      *(_BYTE *)(a2 + 16) |= 1u;
      v8 = v30;
    }
    *(_QWORD *)a2 = v8;
  }
  else
  {
    v9 = a1[2];
    v10 = a1[3];
    if (v9 == v10)
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) &= ~1u;
    }
    else
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = (v10 - v9) >> 6;
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, void (*a4)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  llvm::formatv_object_base *v13[4];
  __int16 v14;
  uint64_t v15;
  unsigned int v16;

  v7 = *(unsigned __int16 *)(*a1 + 62);
  if (v7 != 0xFFFF)
  {
    if (*(_WORD *)(*a1 + 62))
    {
LABEL_3:
      if (a3 > v7)
      {
        llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(a1, a2 + ((unint64_t)v7 << 6), a4, a5, a6);
        return;
      }
      v10[0] = "section header string table index ";
      v10[2] = v7;
      v11 = 2051;
      v13[0] = (llvm::formatv_object_base *)v10;
      v13[2] = (llvm::formatv_object_base *)" does not exist";
      v14 = 770;
      v16 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v13, &v16, &v12);
      *(_BYTE *)(a6 + 16) |= 1u;
      v9 = v12;
      goto LABEL_10;
    }
LABEL_7:
    *(_BYTE *)(a6 + 16) &= ~1u;
    v8 = a1[6];
    *(_QWORD *)a6 = a1[5];
    *(_QWORD *)(a6 + 8) = v8;
    return;
  }
  if (a3)
  {
    v7 = *(_DWORD *)(a2 + 40);
    if (v7)
      goto LABEL_3;
    goto LABEL_7;
  }
  v13[0] = (llvm::formatv_object_base *)"e_shstrndx == SHN_XINDEX, but the section header table is empty";
  v14 = 259;
  LODWORD(v10[0]) = 3;
  llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v13, (unsigned int *)v10, &v15);
  *(_BYTE *)(a6 + 16) |= 1u;
  v9 = v15;
LABEL_10:
  *(_QWORD *)a6 = v9;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  unint64_t v13;
  std::string v14;
  std::string v15;
  void *__p[2];
  std::string::size_type v17;
  _QWORD v18[4];
  __int16 v19;
  llvm::formatv_object_base *v20[4];
  __int16 v21;
  uint64_t v22;
  unsigned int v23;

  v6 = *a2;
  if ((_DWORD)v6)
  {
    if (a4 <= v6)
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, (uint64_t)a2, &v14);
      v9 = std::string::insert(&v14, 0, "a section ");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v15.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v15.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v15, " has an invalid sh_name (0x");
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v17 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v13 = v6;
      v18[0] = __p;
      v18[2] = &v13;
      v19 = 3588;
      v20[0] = (llvm::formatv_object_base *)v18;
      v20[2] = (llvm::formatv_object_base *)") offset which goes past the end of the section name string table";
      v21 = 770;
      v23 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v20, &v23, &v22);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v22;
      v22 = 0;
      if (SHIBYTE(v17) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v15.__r_.__value_.__l.__data_);
      if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v14.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = (const char *)(a3 + v6);
      v8 = strlen(v7);
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v8;
    }
  }
  else
  {
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
    *(_BYTE *)(a5 + 16) &= ~1u;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, llvm::formatv_object_base **)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  std::string::size_type v13;
  llvm::formatv_object_base *ELFSectionTypeName;
  llvm::formatv_object_base *v15;
  std::string::size_type v16;
  uint64_t v17;
  uint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  uint64_t v28;
  std::string v29;
  uint64_t v30;
  std::string v31;
  std::string v32;
  llvm::formatv_object_base *v33[4];
  __int16 v34;
  unsigned int v35;
  __int128 v36;
  std::string::size_type v37;
  uint64_t v38;

  v38 = *MEMORY[0x24BDAC8D0];
  if (*(_DWORD *)(a2 + 4) != 3)
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, a2, &v31);
    v10 = std::string::insert(&v31, 0, "invalid sh_type for string table section ");
    v11 = v10->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
    v32.__r_.__value_.__r.__words[2] = v11;
    v10->__r_.__value_.__l.__size_ = 0;
    v10->__r_.__value_.__r.__words[2] = 0;
    v10->__r_.__value_.__r.__words[0] = 0;
    v12 = std::string::append(&v32, ": expected SHT_STRTAB, but got ");
    v13 = v12->__r_.__value_.__r.__words[2];
    v36 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v37 = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    ELFSectionTypeName = (llvm::formatv_object_base *)llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), *(_DWORD *)(a2 + 4));
    v33[0] = (llvm::formatv_object_base *)&v36;
    v33[2] = ELFSectionTypeName;
    v33[3] = v15;
    v34 = 1284;
    a3(&v29, a4, v33);
    if (SHIBYTE(v37) < 0)
      operator delete((void *)v36);
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v16 = v29.__r_.__value_.__r.__words[0];
    if (v29.__r_.__value_.__r.__words[0])
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v16;
      return;
    }
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<char>(a1, a2, (uint64_t)&v36);
  v17 = v36;
  if ((v37 & 1) != 0)
  {
    *(_QWORD *)&v36 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v17;
  }
  else
  {
    v18 = *((_QWORD *)&v36 + 1);
    if (!*((_QWORD *)&v36 + 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, a2, &v29);
      v23 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v31, " is empty");
      v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = (llvm::formatv_object_base *)&v32;
      v35 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v33, &v35, &v30);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v30;
      v30 = 0;
      goto LABEL_16;
    }
    if (*(_BYTE *)(*((_QWORD *)&v36 + 1) + v36 - 1))
    {
      llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, a2, &v29);
      v19 = std::string::insert(&v29, 0, "SHT_STRTAB string table section ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v31, " is non-null terminated");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = (llvm::formatv_object_base *)&v32;
      v35 = 3;
      llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v33, &v35, &v28);
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v28;
      v28 = 0;
LABEL_16:
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v29.__r_.__value_.__l.__data_);
      goto LABEL_23;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v17;
    *(_QWORD *)(a5 + 8) = v18;
  }
LABEL_23:
  if ((v37 & 1) != 0)
  {
    v27 = v36;
    *(_QWORD *)&v36 = 0;
    if (v27)
      (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  }
}

void llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string::size_type v10;
  std::string v11;
  std::string v12;
  std::string::size_type v13[2];
  char v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v13);
  if ((v14 & 1) != 0)
  {
    v9 = v13[0];
    v13[0] = 0;
    v12.__r_.__value_.__r.__words[0] = v9;
    llvm::handleAllErrors<xojit::ReplacementManager::Plugin::Plugin(xojit::ReplacementManager&)::{lambda(llvm::ErrorInfoBase &)#1}>(&v12);
    if (v12.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v12.__r_.__value_.__l.__data_ + 8))(v12.__r_.__value_.__r.__words[0]);
    std::string::basic_string[abi:nn180100]<0>(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v11, (int64_t)(a2 - v13[0]) >> 6);
    v5 = std::string::insert(&v11, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v12.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v12.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v12, "]");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    a3[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v12.__r_.__value_.__l.__data_);
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
  }
  if ((v14 & 1) != 0)
  {
    v10 = v13[0];
    v13[0] = 0;
    if (v10)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v10 + 8))(v10);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContentsAsArray<char>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  void *v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  uint64_t v17;
  std::string v18;
  std::string v19;
  std::string v20;
  __int16 v21;
  void *__p[2];
  const char *v23;
  __int16 v24;
  uint64_t v25;
  std::string v26;
  _QWORD v27[2];
  uint64_t *v28;
  __int16 v29;
  _QWORD v30[2];
  const char *v31;
  __int16 v32;
  _QWORD v33[2];
  uint64_t *v34;
  __int16 v35;
  llvm::formatv_object_base *v36[2];
  const char *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unsigned int v42;

  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v40 = v5;
  v41 = v6;
  if (__CFADD__(v6, v5))
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, a2, &v26);
    v7 = std::string::insert(&v26, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v20, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v23 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v27[0] = __p;
    v28 = &v41;
    v29 = 3588;
    v30[0] = v27;
    v31 = ") + sh_size (0x";
    v32 = 770;
    v33[0] = v30;
    v34 = &v40;
    v35 = 3586;
    v36[0] = (llvm::formatv_object_base *)v33;
    v37 = ") that cannot be represented";
    v38 = 770;
    LODWORD(v19.__r_.__value_.__l.__data_) = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v36, (unsigned int *)&v19, &v39);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v39;
    v39 = 0;
    if (SHIBYTE(v23) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = (void *)v26.__r_.__value_.__r.__words[0];
LABEL_16:
      operator delete(v11);
    }
  }
  else if ((unint64_t)(v5 + v6) <= a1[1])
  {
    v16 = *a1 + v6;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v16;
    *(_QWORD *)(a3 + 8) = v5;
  }
  else
  {
    llvm::object::getSecIndexForError<llvm::object::ELFType<(llvm::support::endianness)1,true>>(a1, a2, &v18);
    v12 = std::string::insert(&v18, 0, "section ");
    v13 = v12->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v19.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    v19.__r_.__value_.__r.__words[2] = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    v14 = std::string::append(&v19, " has a sh_offset (0x");
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v20.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    v20.__r_.__value_.__r.__words[2] = (std::string::size_type)&v41;
    v21 = 3588;
    __p[0] = &v20;
    v23 = ") + sh_size (0x";
    v24 = 770;
    v27[0] = __p;
    v28 = &v40;
    v29 = 3586;
    v30[0] = v27;
    v31 = ") that is greater than the file size (0x";
    v32 = 770;
    v17 = a1[1];
    v33[0] = v30;
    v34 = &v17;
    v35 = 3586;
    v36[0] = (llvm::formatv_object_base *)v33;
    v37 = ")";
    v38 = 770;
    v42 = 3;
    llvm::make_error<llvm::StringError,llvm::Twine const&,llvm::object::object_error>(v36, &v42, &v25);
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v25;
    v25 = 0;
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    {
      v11 = (void *)v18.__r_.__value_.__r.__words[0];
      goto LABEL_16;
    }
  }
}

