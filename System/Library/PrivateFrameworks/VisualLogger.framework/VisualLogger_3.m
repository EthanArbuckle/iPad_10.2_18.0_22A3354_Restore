void sub_20B020230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B02029C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C402320;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B020310(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C402320;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C402418;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 19);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B0204E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0204FC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C402320;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B020570()
{
  return 19;
}

uint64_t sub_20B020578(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B020580@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B020598(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B020618(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02063C(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC438[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B0206E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE19EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE19EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE19EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE19EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B020750(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 19;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B020848(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 __p;
  uint64_t v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v41 = a1;
  v39 = 4;
  v40 = a3;
  v38 = 12;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (12 * *a2 <= a3)
  {
    HIDWORD(v8) = -1431655765 * a3;
    LODWORD(v8) = -1431655765 * a3;
    if ((v8 >> 2) >= 0x15555556)
    {
      v21 = 20;
      sub_20B0118AC("Image row byte stride ", &v40, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be a multiple of the pixel byte size (", &v38, (std::string *)").");
      v17 = *(_OWORD *)v22;
      v18 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v19 = 1;
      sub_20B099E24(&v17, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v9 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v10 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v10;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v9 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = (void *)v17;
      goto LABEL_47;
    }
    if ((a1 & 3) != 0)
    {
      v21 = 20;
      sub_20B011B64("Image base address ", &v41, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be aligned with the value type size (", &v39, (std::string *)").");
      *(_OWORD *)v14 = *(_OWORD *)v22;
      v15 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v16 = 1;
      sub_20B099E24((__int128 *)v14, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v11 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v12 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v12;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v11 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v16 || (SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = v14[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v20 = 12 * *a2;
  v21 = 20;
  sub_20B011428("Image row byte stride ", &v40, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v21, (std::string *)". It must be at least: pixel byte size (", &v38, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v20, (std::string *)".");
  v24 = *(_OWORD *)v22;
  v25 = v23;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v26 = 1;
  sub_20B099E24(&v24, (uint64_t)&v27);
  *(_OWORD *)a4 = v27;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v30;
    if (v30)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v29;
      v29 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v36)
    {
      v7 = v33;
      *(_QWORD *)(a4 + 64) = v32;
      *(_OWORD *)(a4 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v34;
      *(_QWORD *)(a4 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v29) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v26 || (SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_48;
  v13 = (void *)v24;
LABEL_47:
  operator delete(v13);
LABEL_48:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

void sub_20B020D00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B020D6C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C402468;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B020DE0(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C402468;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C402560;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 20);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B020FB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B020FCC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C402468;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B021040()
{
  return 20;
}

uint64_t sub_20B021048(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B021050@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B021068(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0210E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02110C(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC458[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B0211B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE20EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE20EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE20EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE20EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B021220(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 4 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 20;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B021318(unsigned int *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned int v32;

  v31 = 3;
  v32 = a2;
  if (*a1)
    v4 = a1[1] == 0;
  else
    v4 = 1;
  if (v4)
    goto LABEL_6;
  if (3 * *a1 <= a2)
  {
    if (-1431655765 * a2 >= 0x55555556)
    {
      v14 = 21;
      sub_20B0118AC("Image row byte stride ", &v32, (std::string *)" is invalid for pixel format ", &v14, (std::string *)". It must be a multiple of the pixel byte size (", &v31, (std::string *)").");
      *(_OWORD *)v10 = *(_OWORD *)v15;
      v11 = v16;
      v15[1] = 0;
      v16 = 0;
      v15[0] = 0;
      v12 = 1;
      sub_20B099E24((__int128 *)v10, (uint64_t)&v20);
      *(_OWORD *)a3 = v20;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v30)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v7 = v23;
        if (v23)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v22;
          v22 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v29)
        {
          v8 = v26;
          *(_QWORD *)(a3 + 64) = v25;
          *(_OWORD *)(a3 + 48) = v24;
          v24 = 0uLL;
          *(_QWORD *)(a3 + 72) = v8;
          *(_OWORD *)(a3 + 80) = v27;
          *(_QWORD *)(a3 + 96) = v28;
          v25 = 0;
          v27 = 0uLL;
          v28 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v7 && SHIBYTE(v22) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (!v12 || (SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_35;
      v9 = v10[0];
      goto LABEL_34;
    }
LABEL_6:
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v13 = 3 * *a1;
  v14 = 21;
  sub_20B011428("Image row byte stride ", &v32, (std::string *)" is invalid for the given size ", a1, (std::string *)" and pixel format ", &v14, (std::string *)". It must be at least: pixel byte size (", &v31, (std::string *)") x width (", a1, (std::string *)") = ", (unsigned int *)&v13, (std::string *)".");
  v17 = *(_OWORD *)v15;
  v18 = v16;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  v19 = 1;
  sub_20B099E24(&v17, (uint64_t)&v20);
  *(_OWORD *)a3 = v20;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v23;
    if (v23)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v29)
    {
      v6 = v26;
      *(_QWORD *)(a3 + 64) = v25;
      *(_OWORD *)(a3 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v27;
      *(_QWORD *)(a3 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v5 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
    goto LABEL_35;
  v9 = (void *)v17;
LABEL_34:
  operator delete(v9);
LABEL_35:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B02166C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0216BC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C4025B0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B021730(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C4025B0;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4026A8;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 21);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B021900(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B02191C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C4025B0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B021990()
{
  return 21;
}

uint64_t sub_20B021998(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0219A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0219B4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B021A34(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B021A58(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC478[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B021AFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE21EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE21EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE21EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE21EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B021B6C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 21;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B021C60(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 __p;
  uint64_t v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v41 = a1;
  v39 = 2;
  v40 = a3;
  v38 = 6;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (6 * *a2 <= a3)
  {
    HIDWORD(v8) = -1431655765 * a3;
    LODWORD(v8) = -1431655765 * a3;
    if ((v8 >> 1) >= 0x2AAAAAAB)
    {
      v21 = 22;
      sub_20B0118AC("Image row byte stride ", &v40, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be a multiple of the pixel byte size (", &v38, (std::string *)").");
      v17 = *(_OWORD *)v22;
      v18 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v19 = 1;
      sub_20B099E24(&v17, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v9 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v10 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v10;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v9 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = (void *)v17;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v21 = 22;
      sub_20B011B64("Image base address ", &v41, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be aligned with the value type size (", &v39, (std::string *)").");
      *(_OWORD *)v14 = *(_OWORD *)v22;
      v15 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v16 = 1;
      sub_20B099E24((__int128 *)v14, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v11 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v12 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v12;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v11 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v16 || (SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = v14[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v20 = 6 * *a2;
  v21 = 22;
  sub_20B011428("Image row byte stride ", &v40, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v21, (std::string *)". It must be at least: pixel byte size (", &v38, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v20, (std::string *)".");
  v24 = *(_OWORD *)v22;
  v25 = v23;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v26 = 1;
  sub_20B099E24(&v24, (uint64_t)&v27);
  *(_OWORD *)a4 = v27;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v30;
    if (v30)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v29;
      v29 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v36)
    {
      v7 = v33;
      *(_QWORD *)(a4 + 64) = v32;
      *(_OWORD *)(a4 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v34;
      *(_QWORD *)(a4 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v29) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v26 || (SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_48;
  v13 = (void *)v24;
LABEL_47:
  operator delete(v13);
LABEL_48:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

void sub_20B022114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B022180(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C4026F8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0221F4(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C4026F8;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4027F0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 22);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B0223C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0223E0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C4026F8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B022454()
{
  return 22;
}

uint64_t sub_20B02245C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B022464@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B02247C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0224FC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B022520(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC498[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B0225C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE22EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE22EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE22EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE22EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B022634(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 22;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B02272C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 __p;
  uint64_t v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v41 = a1;
  v39 = 2;
  v40 = a3;
  v38 = 6;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (6 * *a2 <= a3)
  {
    HIDWORD(v8) = -1431655765 * a3;
    LODWORD(v8) = -1431655765 * a3;
    if ((v8 >> 1) >= 0x2AAAAAAB)
    {
      v21 = 23;
      sub_20B0118AC("Image row byte stride ", &v40, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be a multiple of the pixel byte size (", &v38, (std::string *)").");
      v17 = *(_OWORD *)v22;
      v18 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v19 = 1;
      sub_20B099E24(&v17, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v9 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v10 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v10;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v9 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = (void *)v17;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v21 = 23;
      sub_20B011B64("Image base address ", &v41, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be aligned with the value type size (", &v39, (std::string *)").");
      *(_OWORD *)v14 = *(_OWORD *)v22;
      v15 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v16 = 1;
      sub_20B099E24((__int128 *)v14, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v11 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v12 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v12;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v11 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v16 || (SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = v14[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v20 = 6 * *a2;
  v21 = 23;
  sub_20B011428("Image row byte stride ", &v40, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v21, (std::string *)". It must be at least: pixel byte size (", &v38, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v20, (std::string *)".");
  v24 = *(_OWORD *)v22;
  v25 = v23;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v26 = 1;
  sub_20B099E24(&v24, (uint64_t)&v27);
  *(_OWORD *)a4 = v27;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v30;
    if (v30)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v29;
      v29 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v36)
    {
      v7 = v33;
      *(_QWORD *)(a4 + 64) = v32;
      *(_OWORD *)(a4 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v34;
      *(_QWORD *)(a4 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v29) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v26 || (SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_48;
  v13 = (void *)v24;
LABEL_47:
  operator delete(v13);
LABEL_48:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

void sub_20B022BE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B022C4C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C402840;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B022CC0(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C402840;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C402938;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 23);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B022E90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B022EAC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C402840;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B022F20()
{
  return 23;
}

uint64_t sub_20B022F28(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B022F30@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B022F48(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B022FC8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B022FEC(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC4B8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B023090(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE23EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE23EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE23EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE23EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B023100(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 23;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B0231F8(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 __p;
  uint64_t v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v41 = a1;
  v39 = 4;
  v40 = a3;
  v38 = 12;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (12 * *a2 <= a3)
  {
    HIDWORD(v8) = -1431655765 * a3;
    LODWORD(v8) = -1431655765 * a3;
    if ((v8 >> 2) >= 0x15555556)
    {
      v21 = 24;
      sub_20B0118AC("Image row byte stride ", &v40, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be a multiple of the pixel byte size (", &v38, (std::string *)").");
      v17 = *(_OWORD *)v22;
      v18 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v19 = 1;
      sub_20B099E24(&v17, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v9 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v10 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v10;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v9 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = (void *)v17;
      goto LABEL_47;
    }
    if ((a1 & 3) != 0)
    {
      v21 = 24;
      sub_20B011B64("Image base address ", &v41, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be aligned with the value type size (", &v39, (std::string *)").");
      *(_OWORD *)v14 = *(_OWORD *)v22;
      v15 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v16 = 1;
      sub_20B099E24((__int128 *)v14, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v11 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v12 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v12;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v11 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v16 || (SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = v14[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v20 = 12 * *a2;
  v21 = 24;
  sub_20B011428("Image row byte stride ", &v40, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v21, (std::string *)". It must be at least: pixel byte size (", &v38, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v20, (std::string *)".");
  v24 = *(_OWORD *)v22;
  v25 = v23;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v26 = 1;
  sub_20B099E24(&v24, (uint64_t)&v27);
  *(_OWORD *)a4 = v27;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v30;
    if (v30)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v29;
      v29 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v36)
    {
      v7 = v33;
      *(_QWORD *)(a4 + 64) = v32;
      *(_OWORD *)(a4 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v34;
      *(_QWORD *)(a4 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v29) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v26 || (SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_48;
  v13 = (void *)v24;
LABEL_47:
  operator delete(v13);
LABEL_48:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

void sub_20B0236B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B02371C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C402988;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B023790(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C402988;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C402A80;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 24);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B023960(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B02397C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C402988;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0239F0()
{
  return 24;
}

uint64_t sub_20B0239F8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B023A00@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B023A18(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B023A98(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B023ABC(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC4D8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B023B60(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE24EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE24EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE24EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE24EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B023BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 4 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 24;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B023CC8(unsigned int *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned int v32;

  v31 = 4;
  v32 = a2;
  if (*a1)
    v4 = a1[1] == 0;
  else
    v4 = 1;
  if (v4)
    goto LABEL_6;
  if (4 * *a1 <= a2)
  {
    if ((a2 & 3) != 0)
    {
      v14 = 25;
      sub_20B0118AC("Image row byte stride ", &v32, (std::string *)" is invalid for pixel format ", &v14, (std::string *)". It must be a multiple of the pixel byte size (", &v31, (std::string *)").");
      *(_OWORD *)v10 = *(_OWORD *)v15;
      v11 = v16;
      v15[1] = 0;
      v16 = 0;
      v15[0] = 0;
      v12 = 1;
      sub_20B099E24((__int128 *)v10, (uint64_t)&v20);
      *(_OWORD *)a3 = v20;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v30)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v7 = v23;
        if (v23)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v22;
          v22 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v29)
        {
          v8 = v26;
          *(_QWORD *)(a3 + 64) = v25;
          *(_OWORD *)(a3 + 48) = v24;
          v24 = 0uLL;
          *(_QWORD *)(a3 + 72) = v8;
          *(_OWORD *)(a3 + 80) = v27;
          *(_QWORD *)(a3 + 96) = v28;
          v25 = 0;
          v27 = 0uLL;
          v28 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v7 && SHIBYTE(v22) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (!v12 || (SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_35;
      v9 = v10[0];
      goto LABEL_34;
    }
LABEL_6:
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v13 = 4 * *a1;
  v14 = 25;
  sub_20B011428("Image row byte stride ", &v32, (std::string *)" is invalid for the given size ", a1, (std::string *)" and pixel format ", &v14, (std::string *)". It must be at least: pixel byte size (", &v31, (std::string *)") x width (", a1, (std::string *)") = ", (unsigned int *)&v13, (std::string *)".");
  v17 = *(_OWORD *)v15;
  v18 = v16;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  v19 = 1;
  sub_20B099E24(&v17, (uint64_t)&v20);
  *(_OWORD *)a3 = v20;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v23;
    if (v23)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v29)
    {
      v6 = v26;
      *(_QWORD *)(a3 + 64) = v25;
      *(_OWORD *)(a3 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v27;
      *(_QWORD *)(a3 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v5 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
    goto LABEL_35;
  v9 = (void *)v17;
LABEL_34:
  operator delete(v9);
LABEL_35:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B024008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B024058(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C402AD0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0240CC(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C402AD0;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C402BC8;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 25);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B02429C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0242B8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C402AD0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02432C()
{
  return 25;
}

uint64_t sub_20B024334(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B02433C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B024350(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0243D0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0243F4(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC4F8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B024498(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE25EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE25EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE25EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE25EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B024508(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 25;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B0245FC(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 8;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (8 * *a2 <= a3)
  {
    if ((a3 & 7) != 0)
    {
      v20 = 26;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 26;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 8 * *a2;
  v20 = 26;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B024A94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B024B00(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C402C18;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B024B74(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C402C18;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C402D10;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 26);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B024D44(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B024D60(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C402C18;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B024DD4()
{
  return 26;
}

uint64_t sub_20B024DDC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B024DE4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B024DFC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B024E7C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B024EA0(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC518[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B024F44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE26EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE26EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE26EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE26EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B024FB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 26;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B0250AC(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 8;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (8 * *a2 <= a3)
  {
    if ((a3 & 7) != 0)
    {
      v20 = 27;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 27;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 8 * *a2;
  v20 = 27;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B025544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0255B0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C402D60;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B025624(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C402D60;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C402E58;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 27);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B0257F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B025810(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C402D60;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B025884()
{
  return 27;
}

uint64_t sub_20B02588C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B025894@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0258AC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B02592C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B025950(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC538[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B0259F4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE27EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE27EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE27EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE27EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B025A64(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 27;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B025B5C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 4;
  v39 = a3;
  v37 = 16;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (16 * *a2 <= a3)
  {
    if ((a3 & 0xF) != 0)
    {
      v20 = 28;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 3) != 0)
    {
      v20 = 28;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 16 * *a2;
  v20 = 28;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B025FF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B026064(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C402EA8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0260D8(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C402EA8;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C402FA0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 28);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B0262A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0262C4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C402EA8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B026338()
{
  return 28;
}

uint64_t sub_20B026340(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B026348@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B026360(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0263E0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B026404(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC558[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B0264A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE28EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE28EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE28EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE28EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B026518(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 4 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 28;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B026610(unsigned int *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned int v32;

  v31 = 4;
  v32 = a2;
  if (*a1)
    v4 = a1[1] == 0;
  else
    v4 = 1;
  if (v4)
    goto LABEL_6;
  if (4 * *a1 <= a2)
  {
    if ((a2 & 3) != 0)
    {
      v14 = 29;
      sub_20B0118AC("Image row byte stride ", &v32, (std::string *)" is invalid for pixel format ", &v14, (std::string *)". It must be a multiple of the pixel byte size (", &v31, (std::string *)").");
      *(_OWORD *)v10 = *(_OWORD *)v15;
      v11 = v16;
      v15[1] = 0;
      v16 = 0;
      v15[0] = 0;
      v12 = 1;
      sub_20B099E24((__int128 *)v10, (uint64_t)&v20);
      *(_OWORD *)a3 = v20;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v30)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v7 = v23;
        if (v23)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v22;
          v22 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v29)
        {
          v8 = v26;
          *(_QWORD *)(a3 + 64) = v25;
          *(_OWORD *)(a3 + 48) = v24;
          v24 = 0uLL;
          *(_QWORD *)(a3 + 72) = v8;
          *(_OWORD *)(a3 + 80) = v27;
          *(_QWORD *)(a3 + 96) = v28;
          v25 = 0;
          v27 = 0uLL;
          v28 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v7 && SHIBYTE(v22) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (!v12 || (SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_35;
      v9 = v10[0];
      goto LABEL_34;
    }
LABEL_6:
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v13 = 4 * *a1;
  v14 = 29;
  sub_20B011428("Image row byte stride ", &v32, (std::string *)" is invalid for the given size ", a1, (std::string *)" and pixel format ", &v14, (std::string *)". It must be at least: pixel byte size (", &v31, (std::string *)") x width (", a1, (std::string *)") = ", (unsigned int *)&v13, (std::string *)".");
  v17 = *(_OWORD *)v15;
  v18 = v16;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  v19 = 1;
  sub_20B099E24(&v17, (uint64_t)&v20);
  *(_OWORD *)a3 = v20;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v23;
    if (v23)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v29)
    {
      v6 = v26;
      *(_QWORD *)(a3 + 64) = v25;
      *(_OWORD *)(a3 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v27;
      *(_QWORD *)(a3 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v5 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
    goto LABEL_35;
  v9 = (void *)v17;
LABEL_34:
  operator delete(v9);
LABEL_35:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B026950(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0269A0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C402FF0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B026A14(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C402FF0;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4030E8;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 29);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B026BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B026C00(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C402FF0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B026C74()
{
  return 29;
}

uint64_t sub_20B026C7C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B026C84@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B026C98(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B026D18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B026D3C(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC578[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B026DE0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE29EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE29EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE29EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE29EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B026E50(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 29;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B026F44(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 8;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (8 * *a2 <= a3)
  {
    if ((a3 & 7) != 0)
    {
      v20 = 30;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 30;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 8 * *a2;
  v20 = 30;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B0273DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B027448(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C403138;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0274BC(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C403138;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403230;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 30);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B02768C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0276A8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C403138;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02771C()
{
  return 30;
}

uint64_t sub_20B027724(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B02772C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B027744(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0277C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0277E8(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC598[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B02788C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE30EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE30EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE30EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE30EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0278FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 30;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B0279F4(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 8;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (8 * *a2 <= a3)
  {
    if ((a3 & 7) != 0)
    {
      v20 = 31;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 31;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 8 * *a2;
  v20 = 31;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B027E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B027EF8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C403280;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B027F6C(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C403280;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403378;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 31);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B02813C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B028158(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C403280;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0281CC()
{
  return 31;
}

uint64_t sub_20B0281D4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0281DC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0281F4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B028274(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B028298(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC5B8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B02833C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE31EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE31EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE31EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE31EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0283AC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 31;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B0284A4(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 4;
  v39 = a3;
  v37 = 16;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (16 * *a2 <= a3)
  {
    if ((a3 & 0xF) != 0)
    {
      v20 = 32;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 3) != 0)
    {
      v20 = 32;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 16 * *a2;
  v20 = 32;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B028940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0289AC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C4033C8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B028A20(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C4033C8;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4034C0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 32);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B028BF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B028C0C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C4033C8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B028C80()
{
  return 32;
}

uint64_t sub_20B028C88(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B028C90@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B028CA8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B028D28(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B028D4C(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC5D8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B028DF0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE32EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE32EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE32EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE32EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B028E60(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 4 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 32;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B028F58(unsigned int *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned int v32;

  v31 = 4;
  v32 = a2;
  if (*a1)
    v4 = a1[1] == 0;
  else
    v4 = 1;
  if (v4)
    goto LABEL_6;
  if (4 * *a1 <= a2)
  {
    if ((a2 & 3) != 0)
    {
      v14 = 33;
      sub_20B0118AC("Image row byte stride ", &v32, (std::string *)" is invalid for pixel format ", &v14, (std::string *)". It must be a multiple of the pixel byte size (", &v31, (std::string *)").");
      *(_OWORD *)v10 = *(_OWORD *)v15;
      v11 = v16;
      v15[1] = 0;
      v16 = 0;
      v15[0] = 0;
      v12 = 1;
      sub_20B099E24((__int128 *)v10, (uint64_t)&v20);
      *(_OWORD *)a3 = v20;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v30)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v7 = v23;
        if (v23)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v22;
          v22 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v29)
        {
          v8 = v26;
          *(_QWORD *)(a3 + 64) = v25;
          *(_OWORD *)(a3 + 48) = v24;
          v24 = 0uLL;
          *(_QWORD *)(a3 + 72) = v8;
          *(_OWORD *)(a3 + 80) = v27;
          *(_QWORD *)(a3 + 96) = v28;
          v25 = 0;
          v27 = 0uLL;
          v28 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v7 && SHIBYTE(v22) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (!v12 || (SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_35;
      v9 = v10[0];
      goto LABEL_34;
    }
LABEL_6:
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v13 = 4 * *a1;
  v14 = 33;
  sub_20B011428("Image row byte stride ", &v32, (std::string *)" is invalid for the given size ", a1, (std::string *)" and pixel format ", &v14, (std::string *)". It must be at least: pixel byte size (", &v31, (std::string *)") x width (", a1, (std::string *)") = ", (unsigned int *)&v13, (std::string *)".");
  v17 = *(_OWORD *)v15;
  v18 = v16;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  v19 = 1;
  sub_20B099E24(&v17, (uint64_t)&v20);
  *(_OWORD *)a3 = v20;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v23;
    if (v23)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v29)
    {
      v6 = v26;
      *(_QWORD *)(a3 + 64) = v25;
      *(_OWORD *)(a3 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v27;
      *(_QWORD *)(a3 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v5 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
    goto LABEL_35;
  v9 = (void *)v17;
LABEL_34:
  operator delete(v9);
LABEL_35:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B029298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0292E8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C403510;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B02935C(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C403510;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403608;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 33);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B02952C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B029548(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C403510;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0295BC()
{
  return 33;
}

uint64_t sub_20B0295C4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0295CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0295E0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B029660(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B029684(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC5F8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B029728(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE33EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE33EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE33EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE33EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B029798(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 33;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B02988C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 8;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (8 * *a2 <= a3)
  {
    if ((a3 & 7) != 0)
    {
      v20 = 34;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 34;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 8 * *a2;
  v20 = 34;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B029D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B029D90(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C403658;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B029E04(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C403658;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403750;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 34);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B029FD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B029FF0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C403658;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02A064()
{
  return 34;
}

uint64_t sub_20B02A06C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B02A074@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B02A08C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B02A10C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02A130(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC618[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B02A1D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE34EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE34EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE34EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE34EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B02A244(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 34;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B02A33C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 8;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (8 * *a2 <= a3)
  {
    if ((a3 & 7) != 0)
    {
      v20 = 35;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 35;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 8 * *a2;
  v20 = 35;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B02A7D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B02A840(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C4037A0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B02A8B4(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C4037A0;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403898;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 35);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B02AA84(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B02AAA0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C4037A0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02AB14()
{
  return 35;
}

uint64_t sub_20B02AB1C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B02AB24@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B02AB3C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B02ABBC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02ABE0(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC638[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B02AC84(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE35EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE35EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE35EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE35EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B02ACF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 35;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B02ADEC(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 4;
  v39 = a3;
  v37 = 16;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (16 * *a2 <= a3)
  {
    if ((a3 & 0xF) != 0)
    {
      v20 = 36;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 3) != 0)
    {
      v20 = 36;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 16 * *a2;
  v20 = 36;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B02B288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B02B2F4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C4038E8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B02B368(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C4038E8;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4039E0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 36);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B02B538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B02B554(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C4038E8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02B5C8()
{
  return 36;
}

uint64_t sub_20B02B5D0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B02B5D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B02B5F0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B02B670(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02B694(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC658[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B02B738(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE36EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE36EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE36EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE36EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B02B7A8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 4 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 36;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B02B8A0(unsigned int *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned int v32;

  v31 = 4;
  v32 = a2;
  if (*a1)
    v4 = a1[1] == 0;
  else
    v4 = 1;
  if (v4)
    goto LABEL_6;
  if (4 * *a1 <= a2)
  {
    if ((a2 & 3) != 0)
    {
      v14 = 37;
      sub_20B0118AC("Image row byte stride ", &v32, (std::string *)" is invalid for pixel format ", &v14, (std::string *)". It must be a multiple of the pixel byte size (", &v31, (std::string *)").");
      *(_OWORD *)v10 = *(_OWORD *)v15;
      v11 = v16;
      v15[1] = 0;
      v16 = 0;
      v15[0] = 0;
      v12 = 1;
      sub_20B099E24((__int128 *)v10, (uint64_t)&v20);
      *(_OWORD *)a3 = v20;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v30)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v7 = v23;
        if (v23)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v22;
          v22 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v29)
        {
          v8 = v26;
          *(_QWORD *)(a3 + 64) = v25;
          *(_OWORD *)(a3 + 48) = v24;
          v24 = 0uLL;
          *(_QWORD *)(a3 + 72) = v8;
          *(_OWORD *)(a3 + 80) = v27;
          *(_QWORD *)(a3 + 96) = v28;
          v25 = 0;
          v27 = 0uLL;
          v28 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v7 && SHIBYTE(v22) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (!v12 || (SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_35;
      v9 = v10[0];
      goto LABEL_34;
    }
LABEL_6:
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v13 = 4 * *a1;
  v14 = 37;
  sub_20B011428("Image row byte stride ", &v32, (std::string *)" is invalid for the given size ", a1, (std::string *)" and pixel format ", &v14, (std::string *)". It must be at least: pixel byte size (", &v31, (std::string *)") x width (", a1, (std::string *)") = ", (unsigned int *)&v13, (std::string *)".");
  v17 = *(_OWORD *)v15;
  v18 = v16;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  v19 = 1;
  sub_20B099E24(&v17, (uint64_t)&v20);
  *(_OWORD *)a3 = v20;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v23;
    if (v23)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v29)
    {
      v6 = v26;
      *(_QWORD *)(a3 + 64) = v25;
      *(_OWORD *)(a3 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v27;
      *(_QWORD *)(a3 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v5 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
    goto LABEL_35;
  v9 = (void *)v17;
LABEL_34:
  operator delete(v9);
LABEL_35:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B02BBE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B02BC30(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C403A30;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B02BCA4(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C403A30;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403B28;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 37);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B02BE74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B02BE90(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C403A30;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02BF04()
{
  return 37;
}

uint64_t sub_20B02BF0C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B02BF14@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B02BF28(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B02BFA8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02BFCC(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC678[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B02C070(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE37EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE37EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE37EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE37EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B02C0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 37;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B02C1D4(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 8;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (8 * *a2 <= a3)
  {
    if ((a3 & 7) != 0)
    {
      v20 = 38;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 38;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 8 * *a2;
  v20 = 38;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B02C66C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B02C6D8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C403B78;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B02C74C(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C403B78;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403C70;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 38);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B02C91C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B02C938(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C403B78;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02C9AC()
{
  return 38;
}

uint64_t sub_20B02C9B4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B02C9BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B02C9D4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B02CA54(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02CA78(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC698[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B02CB1C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE38EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE38EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE38EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE38EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B02CB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 38;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B02CC84(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 8;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (8 * *a2 <= a3)
  {
    if ((a3 & 7) != 0)
    {
      v20 = 39;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 39;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 8 * *a2;
  v20 = 39;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B02D11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B02D188(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C403CC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B02D1FC(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C403CC0;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403DB8;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 39);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B02D3CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B02D3E8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C403CC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02D45C()
{
  return 39;
}

uint64_t sub_20B02D464(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B02D46C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B02D484(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B02D504(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02D528(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC6B8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B02D5CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE39EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE39EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE39EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE39EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B02D63C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 39;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B02D734(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 4;
  v39 = a3;
  v37 = 16;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (16 * *a2 <= a3)
  {
    if ((a3 & 0xF) != 0)
    {
      v20 = 40;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 3) != 0)
    {
      v20 = 40;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 16 * *a2;
  v20 = 40;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B02DBD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B02DC3C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C403E08;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B02DCB0(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C403E08;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F00;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 40);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B02DE80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B02DE9C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C403E08;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02DF10()
{
  return 40;
}

uint64_t sub_20B02DF18(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B02DF20@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B02DF38(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B02DFB8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02DFDC(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC6D8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B02E080(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE40EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE40EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE40EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE40EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B02E0F0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 4 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 40;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

_DWORD *sub_20B02E1E8(_DWORD ***a1)
{
  return sub_20B02E204(**a1, (char *)(*a1)[1]);
}

void sub_20B02E1F4(uint64_t a1, uint64_t a2)
{
  sub_20B02E2F4((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20B02E204(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C400AC8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20B02E2F4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C400AC8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B02E4A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B02E4EC(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B02E5E4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B02E5DC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B02E5E4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B02E7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B02E7F4(uint64_t a1, uint64_t a2)
{
  int v2;
  uint64_t *v4;
  BOOL v5;
  int v6;
  unint64_t *v7;
  _BOOL4 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  uint64_t v15;
  int v16;
  __int16 v17;
  unint64_t v18;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  __int16 v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  _QWORD v38[2];
  std::__shared_weak_count *v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  int v43;
  __int16 v44;
  _QWORD v45[2];
  std::__shared_weak_count *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  __int16 v51;

  v2 = *(_DWORD *)(a1 + 48);
  if (v2 != *(_DWORD *)(a2 + 48))
    return 0;
  v4 = (uint64_t *)(a1 + 24);
  if (*(_DWORD *)(a1 + 24))
    v5 = *(_DWORD *)(a1 + 28) == 0;
  else
    v5 = 1;
  v6 = v5;
  v7 = (unint64_t *)(a2 + 24);
  if (*(_DWORD *)(a2 + 24))
  {
    v8 = *(_DWORD *)(a2 + 28) == 0;
    if (((v6 ^ v8) & 1) != 0)
      return 0;
    if ((v6 & v8) == 1)
    {
LABEL_11:
      v9 = *v4;
      if ((_DWORD)v9 == *v7)
        return HIDWORD(v9) == HIDWORD(*v7);
      return 0;
    }
  }
  else
  {
    if ((v6 & 1) == 0)
      return 0;
    if ((v6 & 1) == 1)
      goto LABEL_11;
  }
  v45[0] = &off_24C3FA3D0;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = *(std::__shared_weak_count **)(a1 + 16);
  if (v12)
  {
    p_shared_owners = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    v15 = *(_QWORD *)(a1 + 40);
    v16 = *(_DWORD *)(a1 + 48);
    v17 = *(_WORD *)(a1 + 52);
    do
      v18 = __ldxr(p_shared_owners);
    while (__stxr(v18 + 1, p_shared_owners));
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 40);
    v17 = *(_WORD *)(a1 + 52);
    v16 = v2;
  }
  v45[1] = v11;
  v46 = v12;
  v47 = *v4;
  v48 = *(_DWORD *)(a1 + 32);
  v49 = v15;
  v50 = v16;
  v51 = v17;
  if (v12)
  {
    v20 = (unint64_t *)&v12->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v38[0] = &off_24C3FA3D0;
  v22 = *(_QWORD *)(a2 + 8);
  v23 = *(std::__shared_weak_count **)(a2 + 16);
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
    v26 = *(_QWORD *)(a2 + 40);
    v27 = *(_DWORD *)(a2 + 48);
    v28 = *(_WORD *)(a2 + 52);
    do
      v29 = __ldxr(v24);
    while (__stxr(v29 + 1, v24));
  }
  else
  {
    v26 = *(_QWORD *)(a2 + 40);
    v27 = *(_DWORD *)(a2 + 48);
    v28 = *(_WORD *)(a2 + 52);
  }
  v38[1] = v22;
  v39 = v23;
  v40 = *v7;
  v41 = *((_DWORD *)v7 + 2);
  v42 = v26;
  v43 = v27;
  v44 = v28;
  if (v23)
  {
    v30 = (unint64_t *)&v23->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
      std::__shared_weak_count::__release_weak(v23);
    }
  }
  v10 = sub_20B460894(v2, (uint64_t)v45, (uint64_t)v38);
  v32 = v39;
  if (v39)
  {
    v33 = (unint64_t *)&v39->__shared_owners_;
    do
      v34 = __ldaxr(v33);
    while (__stlxr(v34 - 1, v33));
    if (!v34)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v35 = v46;
  if (v46)
  {
    v36 = (unint64_t *)&v46->__shared_owners_;
    do
      v37 = __ldaxr(v36);
    while (__stlxr(v37 - 1, v36));
    if (!v37)
    {
      ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
      std::__shared_weak_count::__release_weak(v35);
    }
  }
  return v10;
}

void sub_20B02EA8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  sub_20AF9E0BC((uint64_t)&a9);
  sub_20AF9E0BC((uint64_t)&a16);
  _Unwind_Resume(a1);
}

void sub_20B02EAA8(uint64_t a1@<X8>)
{
  size_t v2;
  size_t v3;
  size_t v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  __int16 v14;
  unint64_t *v15;
  unint64_t v16;
  __int128 v17;
  __int128 v18;
  _BYTE v19[28];
  size_t v20[3];
  __int128 v21;
  char v22;
  uint64_t v23;
  void *v24;

  v22 = 0;
  v19[24] = 0;
  memset(v19, 0, 17);
  v23 = 0;
  v24 = 0;
  sub_20B4C20F0(v20, &v23, &v24, 1, (void **)&v22, 1, 0);
  v18 = 0uLL;
  HIDWORD(v18) = (unsigned __int128)0 >> 96;
  v3 = v20[0];
  v2 = v20[1];
  v4 = v20[2];
  v17 = v21;
  v5 = operator new();
  *(_QWORD *)v5 = &off_24C3FCC50;
  *(_OWORD *)(v5 + 8) = v18;
  *(_OWORD *)(v5 + 20) = *(_OWORD *)&v19[12];
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v2;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 64) = v17;
  v6 = (std::__shared_weak_count *)operator new();
  v7 = v6;
  v6->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v6->__shared_owners_;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
  v6->__shared_weak_owners_ = 0;
  v6[1].__vftable = (std::__shared_weak_count_vtbl *)v5;
  *(_QWORD *)&v19[8] = v6;
  *(_QWORD *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 1;
  do
    v10 = __ldxr(p_shared_owners);
  while (__stxr(v10 + 1, p_shared_owners));
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v7);
  }
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
  v13 = v12 & 0xFFFFFF;
  v14 = v12 & 0xFF00;
  if ((v12 & 0xFF0000) == 0)
    v14 = 0;
  if (v13 <= 0x10000)
    LOBYTE(v13) = 0;
  *(_WORD *)(a1 + 44) = v14 & 0xFF00 | v13;
  if (*(_QWORD *)&v19[8])
  {
    v15 = (unint64_t *)(*(_QWORD *)&v19[8] + 8);
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)&v19[8] + 16))(*(_QWORD *)&v19[8]);
      std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v19[8]);
    }
  }
}

void sub_20B02ECA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  uint64_t v7;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  va_list va;

  va_start(va, a7);
  v9 = *(std::__shared_weak_count **)(v7 + 8);
  if (v9)
  {
    p_shared_owners = (unint64_t *)&v9->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B02ECEC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B02ED08(_Unwind_Exception *exception_object)
{
  void *v1;
  void *v2;

  v2 = v1;
  if (v2)
    free(v2);
  _Unwind_Resume(exception_object);
}

void sub_20B02ED28()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B02ED40(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B02ED64(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B02ED7C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img12IImageBufferEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

_QWORD *sub_20B02EDEC(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  int v12;
  __int16 v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t v16;
  _QWORD *result;
  __int128 v18;
  _BYTE v19[30];

  v6 = operator new();
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_DWORD *)(a2 + 48);
    v13 = *(_WORD *)(a2 + 52);
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 40);
    v12 = *(_DWORD *)(a2 + 48);
    v13 = *(_WORD *)(a2 + 52);
  }
  *(_QWORD *)&v18 = v7;
  *((_QWORD *)&v18 + 1) = v8;
  *(_QWORD *)v19 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)&v19[8] = *(_DWORD *)(a2 + 32);
  *(_QWORD *)&v19[16] = v11;
  *(_DWORD *)&v19[24] = v12;
  *(_WORD *)&v19[28] = v13;
  if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  *(_QWORD *)v6 = &off_24C3FA4C0;
  *(_QWORD *)(v6 + 8) = &off_24C3F2CB0;
  *(_OWORD *)(v6 + 16) = v18;
  *(_OWORD *)(v6 + 32) = *(_OWORD *)v19;
  *(_OWORD *)(v6 + 46) = *(_OWORD *)&v19[14];
  sub_20AF4CAF4(v6 + 64, a3);
  *(_QWORD *)v6 = &off_24C411FE8;
  *a1 = &off_24C411E78;
  a1[1] = v6;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a1[2] = result;
  return result;
}

void sub_20B02EF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_20AF9D008(&a9);
  _Unwind_Resume(a1);
}

void sub_20B02EFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20AEF0C34((uint64_t *)va);
  MEMORY[0x20BD3583C](v2, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

void sub_20B02F008(int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, unsigned int a4@<W3>, std::string::size_type a5@<X4>, int a6@<W5>, uint64_t a7@<X8>)
{
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  uint64_t v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  unint64_t v49;
  _BYTE *v50;
  uint64_t v51;
  std::__shared_weak_count *v52;
  unint64_t *v53;
  unint64_t v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  size_t v61;
  void **v62;
  unint64_t v63;
  unint64_t v64;
  const void **v65;
  unint64_t *p_shared_owners;
  unint64_t v67;
  int v68;
  __int128 v69;
  __int128 v70;
  _BYTE *v71;
  unsigned __int8 v72;
  __int128 *v73;
  int v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 v78;
  const void *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  void *v90;
  _QWORD *v91;
  _QWORD *exception;
  void *v93;
  __int128 v94;
  char v95;
  void *v96[2];
  uint64_t v97;
  char v98;
  std::string v99;
  char v100;
  void *v101;
  char v102;
  void *v103;
  char v104;
  char v105;
  char v106;
  __int128 v107;
  char v108;
  char v109;
  void *v110;
  char v111;
  void *v112;
  char v113;
  char v114;
  char v115;
  _BYTE v116[64];
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  char v121;
  char v122;
  _QWORD v123[6];
  _BYTE v124[56];
  char v125;
  void *v126;
  char v127;
  char v128;
  char v129;
  char v130;
  _BYTE v131[64];
  uint64_t (**v132)();
  _BYTE v133[46];
  char v134;
  char v135;
  __int128 v136;
  char v137;
  unsigned __int8 v138;
  __int128 v139;
  uint64_t v140;
  __int128 v141;
  uint64_t v142;
  char v143;
  int v144;
  std::string::size_type v145;
  unsigned int v146;
  unsigned int v147;
  char v148;
  std::string v149;
  int v150;
  void *__dst[2];
  unint64_t v152;
  _BYTE *v153;

  if (a4 >= 3)
  {
    *(_DWORD *)&v124[24] = 0;
    if (*(_DWORD *)&v124[24] == -1)
      sub_20AECFAB8();
    *(_QWORD *)&v107 = &v99;
    ((void (*)(_BYTE *__return_ptr, __int128 *, _BYTE *))off_24C404048[*(unsigned int *)&v124[24]])(v116, &v107, v124);
    if (*(_DWORD *)&v124[24] != -1)
      ((void (*)(__int128 *, _BYTE *))off_24C404000[*(unsigned int *)&v124[24]])(&v107, v124);
    *(_OWORD *)v96 = *(_OWORD *)v116;
    v97 = *(_QWORD *)&v116[16];
    memset(v116, 0, 24);
    v98 = 1;
    sub_20B099E24((__int128 *)v96, (uint64_t)v131);
    *(_OWORD *)a7 = *(_OWORD *)v131;
    *(_BYTE *)(a7 + 16) = 0;
    *(_BYTE *)(a7 + 112) = 0;
    if (v133[40])
    {
      *(_BYTE *)(a7 + 40) = 0;
      v8 = v131[40];
      if (v131[40])
      {
        *(_OWORD *)(a7 + 16) = *(_OWORD *)&v131[16];
        *(_QWORD *)(a7 + 32) = *(_QWORD *)&v131[32];
        memset(&v131[16], 0, 24);
        *(_BYTE *)(a7 + 40) = 1;
      }
      *(_BYTE *)(a7 + 48) = 0;
      *(_BYTE *)(a7 + 104) = 0;
      if (v133[32])
      {
        v9 = *(_QWORD *)v133;
        *(_QWORD *)(a7 + 64) = v132;
        *(_OWORD *)(a7 + 48) = *(_OWORD *)&v131[48];
        *(_QWORD *)&v131[48] = 0;
        *(_QWORD *)&v131[56] = 0;
        *(_QWORD *)(a7 + 72) = v9;
        *(_OWORD *)(a7 + 80) = *(_OWORD *)&v133[8];
        *(_QWORD *)(a7 + 96) = *(_QWORD *)&v133[24];
        v132 = 0;
        memset(&v133[8], 0, 24);
        *(_BYTE *)(a7 + 104) = 1;
      }
      *(_BYTE *)(a7 + 112) = 1;
      *(_BYTE *)(a7 + 160) = 0;
      if (v8 && (v131[39] & 0x80000000) != 0)
        operator delete(*(void **)&v131[16]);
    }
    else
    {
      *(_BYTE *)(a7 + 160) = 0;
    }
    if (v98 && SHIBYTE(v97) < 0)
      operator delete(v96[0]);
    if ((v116[23] & 0x80000000) != 0)
      operator delete(*(void **)v116);
    return;
  }
  if (a3 - 1 >= 0x28)
  {
    sub_20B030AC8(a3, (uint64_t)v131);
    *(_OWORD *)a7 = *(_OWORD *)v131;
    *(_BYTE *)(a7 + 16) = 0;
    *(_BYTE *)(a7 + 112) = 0;
    if (!v133[40])
    {
      *(_BYTE *)(a7 + 160) = 0;
      return;
    }
    *(_BYTE *)(a7 + 40) = 0;
    v24 = v131[40];
    if (v131[40])
    {
      *(_OWORD *)(a7 + 16) = *(_OWORD *)&v131[16];
      *(_QWORD *)(a7 + 32) = *(_QWORD *)&v131[32];
      memset(&v131[16], 0, 24);
      *(_BYTE *)(a7 + 40) = 1;
    }
    *(_BYTE *)(a7 + 48) = 0;
    *(_BYTE *)(a7 + 104) = 0;
    if (v133[32])
    {
      v25 = *(_QWORD *)v133;
      *(_QWORD *)(a7 + 64) = v132;
      *(_OWORD *)(a7 + 48) = *(_OWORD *)&v131[48];
      *(_QWORD *)&v131[48] = 0;
      *(_QWORD *)&v131[56] = 0;
      *(_QWORD *)(a7 + 72) = v25;
      *(_OWORD *)(a7 + 80) = *(_OWORD *)&v133[8];
      *(_QWORD *)(a7 + 96) = *(_QWORD *)&v133[24];
      v132 = 0;
      memset(&v133[8], 0, 24);
      *(_BYTE *)(a7 + 104) = 1;
    }
    *(_BYTE *)(a7 + 112) = 1;
    *(_BYTE *)(a7 + 160) = 0;
    if (!v24)
      return;
    goto LABEL_38;
  }
  if (a1 == 1)
  {
    v146 = a4;
    v147 = a3;
    v145 = a5;
    v144 = a6;
    if (a3 <= 0x26 && ((1 << a3) & 0x63A26201BELL) != 0)
    {
      v26 = 0;
      v27 = 0;
      switch(a3)
      {
        case 1u:
          break;
        case 2u:
          v26 = 0;
          v27 = 1;
          break;
        case 3u:
          v26 = 0;
          v27 = 2;
          break;
        case 4u:
          v26 = 0;
          v27 = 3;
          break;
        case 5u:
          v26 = 0;
          v27 = 4;
          break;
        default:
          v50 = &v131[56];
          goto LABEL_243;
      }
LABEL_86:
      v50 = &v131[4 * v27];
    }
    else
    {
      v50 = &v131[56];
      v26 = 1;
LABEL_243:
      v27 = 5;
      switch(a3)
      {
        case 7u:
          goto LABEL_86;
        case 8u:
          v27 = 6;
          goto LABEL_86;
        case 0x15u:
          v27 = 7;
          goto LABEL_86;
        case 0x16u:
          v27 = 8;
          goto LABEL_86;
        case 0x19u:
          v27 = 9;
          goto LABEL_86;
        case 0x1Fu:
          v27 = 10;
          goto LABEL_86;
        case 0x20u:
          v27 = 11;
          goto LABEL_86;
        case 0x25u:
          v27 = 12;
          goto LABEL_86;
        case 0x26u:
          v27 = 13;
          goto LABEL_86;
        default:
          break;
      }
    }
    if ((v26 & 1) == 0 && v50 - v131 != 56)
    {
      *(_QWORD *)v124 = &off_24C3F2D20;
      sub_20B02EAA8((uint64_t)&v124[8]);
      *(_QWORD *)v131 = &off_24C403F68;
      *(_QWORD *)&v131[8] = &off_24C3F2CB0;
      v51 = *(_QWORD *)&v124[8];
      v52 = *(std::__shared_weak_count **)&v124[16];
      if (*(_QWORD *)&v124[16])
      {
        v53 = (unint64_t *)(*(_QWORD *)&v124[16] + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
        v55 = *(_QWORD *)&v124[40];
        v56 = *(_DWORD *)&v124[48];
        v57 = *(_WORD *)&v124[52];
        do
          v58 = __ldxr(v53);
        while (__stxr(v58 + 1, v53));
      }
      else
      {
        v55 = *(_QWORD *)&v124[40];
        v56 = *(_DWORD *)&v124[48];
        v57 = *(_WORD *)&v124[52];
      }
      *(_QWORD *)&v131[16] = v51;
      *(_QWORD *)&v131[24] = v52;
      *(_QWORD *)&v131[32] = *(_QWORD *)&v124[24];
      *(_DWORD *)&v131[40] = *(_DWORD *)&v124[32];
      *(_QWORD *)&v131[48] = v55;
      *(_DWORD *)&v131[56] = v56;
      *(_WORD *)&v131[60] = v57;
      if (v52)
      {
        p_shared_owners = (unint64_t *)&v52->__shared_owners_;
        do
          v67 = __ldaxr(p_shared_owners);
        while (__stlxr(v67 - 1, p_shared_owners));
        if (!v67)
        {
          ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
          std::__shared_weak_count::__release_weak(v52);
        }
      }
      v132 = &off_24C3F2D20;
      *(_OWORD *)v133 = *(_OWORD *)&v124[8];
      *(_OWORD *)&v133[16] = *(_OWORD *)&v124[24];
      *(_OWORD *)&v133[30] = *(_OWORD *)&v124[38];
      v134 = 1;
      v135 = 0;
      v137 = 0;
      v138 = 1;
      v123[0] = &v147;
      v123[1] = &v146;
      v123[2] = v131;
      v123[3] = a2;
      v123[4] = &v145;
      v123[5] = &v144;
      *(_QWORD *)v116 = &off_24C4040A0;
      *(_QWORD *)&v116[8] = v123;
      sub_20B52A3E8((uint64_t)v116, (uint64_t)v124);
      if (v130)
      {
        *(_BYTE *)a7 = 0;
        v68 = v138;
        *(_BYTE *)(a7 + 160) = v138;
        if (v68)
        {
          *(_QWORD *)a7 = &off_24C403F68;
          *(_QWORD *)(a7 + 8) = &off_24C3F2CB0;
          v69 = *(_OWORD *)&v131[16];
          *(_QWORD *)&v131[16] = 0;
          *(_QWORD *)&v131[24] = 0;
          v70 = *(_OWORD *)&v131[32];
          *(_OWORD *)(a7 + 16) = v69;
          *(_OWORD *)(a7 + 32) = v70;
          *(_OWORD *)(a7 + 46) = *(_OWORD *)&v131[46];
          *(_BYTE *)(a7 + 64) = 0;
          *(_BYTE *)(a7 + 120) = 0;
          if (v134)
          {
            *(_QWORD *)(a7 + 64) = &off_24C3F2D20;
            *(_OWORD *)(a7 + 72) = *(_OWORD *)v133;
            *(_QWORD *)v133 = 0;
            *(_QWORD *)&v133[8] = 0;
            *(_OWORD *)(a7 + 88) = *(_OWORD *)&v133[16];
            *(_OWORD *)(a7 + 102) = *(_OWORD *)&v133[30];
            *(_BYTE *)(a7 + 120) = 1;
          }
          *(_BYTE *)(a7 + 152) = 0;
          v71 = (_BYTE *)(a7 + 152);
          *(_BYTE *)(a7 + 128) = 0;
          if (v137)
          {
            *(_QWORD *)(a7 + 128) = &off_24C4169B8;
            *(_OWORD *)(a7 + 136) = v136;
            v136 = 0uLL;
LABEL_198:
            *v71 = 1;
          }
        }
        else
        {
          *(_OWORD *)a7 = *(_OWORD *)v131;
          *(_BYTE *)(a7 + 16) = 0;
          *(_BYTE *)(a7 + 112) = 0;
          v71 = (_BYTE *)(a7 + 112);
          if (v133[40])
          {
            *(_BYTE *)(a7 + 40) = 0;
            if (v131[40])
            {
              *(_OWORD *)(a7 + 16) = *(_OWORD *)&v131[16];
              *(_QWORD *)(a7 + 32) = *(_QWORD *)&v131[32];
              memset(&v131[16], 0, 24);
              *(_BYTE *)(a7 + 40) = 1;
            }
            *(_BYTE *)(a7 + 48) = 0;
            *(_BYTE *)(a7 + 104) = 0;
            if (v133[32])
            {
              *(_OWORD *)(a7 + 48) = *(_OWORD *)&v131[48];
              *(_QWORD *)(a7 + 64) = v132;
              *(_QWORD *)&v131[56] = 0;
              v132 = 0;
              *(_QWORD *)&v131[48] = 0;
              *(_QWORD *)(a7 + 72) = *(_QWORD *)v133;
              *(_OWORD *)(a7 + 80) = *(_OWORD *)&v133[8];
              *(_QWORD *)(a7 + 96) = *(_QWORD *)&v133[24];
              memset(&v133[8], 0, 24);
              *(_BYTE *)(a7 + 104) = 1;
            }
            goto LABEL_198;
          }
        }
LABEL_221:
        if (!v130 && v129)
        {
          if (v128)
          {
            if (v127 < 0)
              operator delete(v126);
            if (v125 < 0)
              operator delete(*(void **)&v124[48]);
          }
          if (v124[40] && (v124[39] & 0x80000000) != 0)
            operator delete(*(void **)&v124[16]);
        }
        if (v138)
        {
          (**(void (***)(uint64_t))v131)((uint64_t)v131);
          return;
        }
        if (!v133[40])
          return;
        if (v133[32])
        {
          if ((v133[31] & 0x80000000) != 0)
            operator delete(*(void **)&v133[8]);
          if (SHIBYTE(v132) < 0)
            operator delete(*(void **)&v131[48]);
        }
        if (!v131[40])
          return;
LABEL_38:
        if ((v131[39] & 0x80000000) != 0)
          operator delete(*(void **)&v131[16]);
        return;
      }
      v72 = atomic_load((unsigned __int8 *)&qword_25463AE70);
      if ((v72 & 1) == 0 && __cxa_guard_acquire(&qword_25463AE70))
      {
        v91 = sub_20AEC0D64(&v149, "");
        sub_20B52B2CC((uint64_t)v91, (uint64_t)v116);
        xmmword_25463AE78 = *(_OWORD *)v116;
        sub_20AECCE40((uint64_t)v116);
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v149.__r_.__value_.__l.__data_);
        __cxa_guard_release(&qword_25463AE70);
      }
      if (v130)
      {
        exception = __cxa_allocate_exception(8uLL);
        *exception = &off_24C3F6160;
        __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
      }
      if (*(_QWORD *)&v124[8] == *((_QWORD *)&xmmword_25463AE78 + 1) && *(_DWORD *)v124 == (_DWORD)xmmword_25463AE78)
      {
        if (v129)
          v73 = (__int128 *)&v124[16];
        else
          v73 = (__int128 *)&unk_20B610E70;
        sub_20AFB2208(&v107, v73);
        sub_20AECCC3C(4u, &v107, (uint64_t)v116);
        *(_OWORD *)a7 = *(_OWORD *)v116;
        *(_BYTE *)(a7 + 16) = 0;
        *(_BYTE *)(a7 + 112) = 0;
        if (v122)
        {
          *(_BYTE *)(a7 + 40) = 0;
          v74 = v116[40];
          if (v116[40])
          {
            *(_OWORD *)(a7 + 16) = *(_OWORD *)&v116[16];
            *(_QWORD *)(a7 + 32) = *(_QWORD *)&v116[32];
            memset(&v116[16], 0, 24);
            *(_BYTE *)(a7 + 40) = 1;
          }
          *(_BYTE *)(a7 + 48) = 0;
          *(_BYTE *)(a7 + 104) = 0;
          if (v121)
          {
            v75 = v118;
            *(_QWORD *)(a7 + 64) = v117;
            *(_OWORD *)(a7 + 48) = *(_OWORD *)&v116[48];
            *(_QWORD *)&v116[48] = 0;
            *(_QWORD *)&v116[56] = 0;
            *(_QWORD *)(a7 + 72) = v75;
            *(_OWORD *)(a7 + 80) = v119;
            *(_QWORD *)(a7 + 96) = v120;
            v117 = 0;
            v119 = 0uLL;
            v120 = 0;
            *(_BYTE *)(a7 + 104) = 1;
          }
          *(_BYTE *)(a7 + 112) = 1;
          *(_BYTE *)(a7 + 160) = 0;
          if (v74 && (v116[39] & 0x80000000) != 0)
            operator delete(*(void **)&v116[16]);
        }
        else
        {
          *(_BYTE *)(a7 + 160) = 0;
        }
        if (!v115)
          goto LABEL_221;
        if (v114)
        {
          if (v113 < 0)
            operator delete(v112);
          if (v111 < 0)
            operator delete(v110);
        }
        if (!v109 || (v108 & 0x80000000) == 0)
          goto LABEL_221;
        v90 = (void *)v107;
      }
      else
      {
        sub_20B5287D4((uint64_t)v124, &v149);
        if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
          sub_20AEC60F4(&v99, v149.__r_.__value_.__l.__data_, v149.__r_.__value_.__l.__size_);
        else
          v99 = v149;
        v100 = 1;
        LOBYTE(v101) = 0;
        v105 = 0;
        v106 = 1;
        sub_20AECCC3C(4u, (__int128 *)&v99, (uint64_t)v116);
        *(_OWORD *)a7 = *(_OWORD *)v116;
        *(_BYTE *)(a7 + 16) = 0;
        *(_BYTE *)(a7 + 112) = 0;
        if (v122)
        {
          *(_BYTE *)(a7 + 40) = 0;
          v88 = v116[40];
          if (v116[40])
          {
            *(_OWORD *)(a7 + 16) = *(_OWORD *)&v116[16];
            *(_QWORD *)(a7 + 32) = *(_QWORD *)&v116[32];
            memset(&v116[16], 0, 24);
            *(_BYTE *)(a7 + 40) = 1;
          }
          *(_BYTE *)(a7 + 48) = 0;
          *(_BYTE *)(a7 + 104) = 0;
          if (v121)
          {
            v89 = v118;
            *(_QWORD *)(a7 + 64) = v117;
            *(_OWORD *)(a7 + 48) = *(_OWORD *)&v116[48];
            *(_QWORD *)&v116[48] = 0;
            *(_QWORD *)&v116[56] = 0;
            *(_QWORD *)(a7 + 72) = v89;
            *(_OWORD *)(a7 + 80) = v119;
            *(_QWORD *)(a7 + 96) = v120;
            v117 = 0;
            v119 = 0uLL;
            v120 = 0;
            *(_BYTE *)(a7 + 104) = 1;
          }
          *(_BYTE *)(a7 + 112) = 1;
          *(_BYTE *)(a7 + 160) = 0;
          if (v88 && (v116[39] & 0x80000000) != 0)
            operator delete(*(void **)&v116[16]);
        }
        else
        {
          *(_BYTE *)(a7 + 160) = 0;
        }
        if (v106)
        {
          if (v105)
          {
            if (v104 < 0)
              operator delete(v103);
            if (v102 < 0)
              operator delete(v101);
          }
          if (v100 && SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v99.__r_.__value_.__l.__data_);
        }
        if ((SHIBYTE(v149.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_221;
        v90 = (void *)v149.__r_.__value_.__r.__words[0];
      }
      operator delete(v90);
      goto LABEL_221;
    }
    *(_OWORD *)v124 = xmmword_20B5D1D5C;
    *(_OWORD *)&v124[16] = unk_20B5D1D6C;
    *(_OWORD *)&v124[32] = xmmword_20B5D1D7C;
    *(_QWORD *)&v124[48] = 0x2600000025;
    v150 = 0;
    sub_20B00222C(&v149, "invalid image format '");
    sub_20AF86710((uint64_t)&v148, (uint64_t)&v149, &v147);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = "' for image creation with buffer type '";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = "' for image creation with buffer type '";
    *(_QWORD *)&v116[32] = "' for image creation with buffer type '";
    if (v150 == -1)
      sub_20AECFAB8();
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404060[v150])(__dst, &v149);
    v59 = operator new();
    *(_QWORD *)(v59 + 272) = 0;
    *(_OWORD *)(v59 + 240) = 0u;
    *(_OWORD *)(v59 + 256) = 0u;
    *(_OWORD *)(v59 + 208) = 0u;
    *(_OWORD *)(v59 + 224) = 0u;
    *(_OWORD *)(v59 + 176) = 0u;
    *(_OWORD *)(v59 + 192) = 0u;
    *(_OWORD *)(v59 + 144) = 0u;
    *(_OWORD *)(v59 + 160) = 0u;
    *(_OWORD *)(v59 + 112) = 0u;
    *(_OWORD *)(v59 + 128) = 0u;
    *(_OWORD *)(v59 + 80) = 0u;
    *(_OWORD *)(v59 + 96) = 0u;
    *(_OWORD *)(v59 + 48) = 0u;
    *(_OWORD *)(v59 + 64) = 0u;
    *(_OWORD *)(v59 + 16) = 0u;
    *(_OWORD *)(v59 + 32) = 0u;
    *(_OWORD *)v59 = 0u;
    sub_20AEC0BD8(v59);
    *(_QWORD *)v116 = v59;
    sub_20AEC01D0((_QWORD *)(v59 + 16), (uint64_t)"IOSurfaceCVPixelBuffer", 22);
    v60 = *(_DWORD *)(v59 + 120);
    if ((v60 & 0x10) != 0)
    {
      v63 = *(_QWORD *)(v59 + 112);
      v64 = *(_QWORD *)(v59 + 72);
      if (v63 < v64)
      {
        *(_QWORD *)(v59 + 112) = v64;
        v63 = v64;
      }
      v65 = (const void **)(v59 + 64);
    }
    else
    {
      if ((v60 & 8) == 0)
      {
        v61 = 0;
        HIBYTE(v152) = 0;
        v62 = __dst;
        goto LABEL_153;
      }
      v65 = (const void **)(v59 + 40);
      v63 = *(_QWORD *)(v59 + 56);
    }
    v79 = *v65;
    v61 = v63 - (_QWORD)*v65;
    if (v61 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v61 >= 0x17)
    {
      v80 = (v61 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v61 | 7) != 0x17)
        v80 = v61 | 7;
      v81 = v80 + 1;
      v62 = (void **)operator new(v80 + 1);
      __dst[1] = (void *)v61;
      v152 = v81 | 0x8000000000000000;
      __dst[0] = v62;
    }
    else
    {
      HIBYTE(v152) = v63 - *(_BYTE *)v65;
      v62 = __dst;
      if (!v61)
        goto LABEL_153;
    }
    memmove(v62, v79, v61);
LABEL_153:
    *((_BYTE *)v62 + v61) = 0;
    v82 = *(_QWORD *)v116;
    if (*(_QWORD *)v116)
    {
      v83 = MEMORY[0x24BEDB7F0];
      v84 = *MEMORY[0x24BEDB7F0];
      **(_QWORD **)v116 = *MEMORY[0x24BEDB7F0];
      v85 = *(_QWORD *)(v83 + 72);
      *(_QWORD *)(v82 + *(_QWORD *)(v84 - 24)) = *(_QWORD *)(v83 + 64);
      *(_QWORD *)(v82 + 24) = MEMORY[0x24BEDB848] + 16;
      *(_QWORD *)(v82 + 16) = v85;
      if (*(char *)(v82 + 111) < 0)
        operator delete(*(void **)(v82 + 88));
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x20BD35758](v82 + 128);
      MEMORY[0x20BD3583C](v82, 0x10B2C40EED050F3);
    }
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = __dst;
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = __dst;
    *(_QWORD *)&v116[32] = __dst;
    if (v150 == -1)
      sub_20AECFAB8();
    v153 = v116;
    ((void (*)(_BYTE **, std::string *))off_24C404018[v150])(&v153, &v149);
    if (SHIBYTE(v152) < 0)
      operator delete(__dst[0]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[16] = &v149;
    if (v150 == -1)
      sub_20AECFAB8();
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404078[v150])(__dst, &v149);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = "{";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = "{";
    *(_QWORD *)&v116[32] = "{";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)v124);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[4]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[8]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)((unint64_t)v124 | 0xC));
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[16]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[20]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[24]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[28]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[32]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[36]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[40]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[44]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[48]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = ",";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = ",";
    *(_QWORD *)&v116[32] = ",";
    if (v150 == -1)
      goto LABEL_262;
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    sub_20AF86710((uint64_t)v116, (uint64_t)&v149, (unsigned int *)&v124[52]);
    *(_QWORD *)v116 = &v149;
    *(_QWORD *)&v116[8] = "}";
    *(_QWORD *)&v116[16] = &v149;
    *(_QWORD *)&v116[24] = "}";
    *(_QWORD *)&v116[32] = "}";
    if (v150 == -1)
LABEL_262:
      sub_20AECFAB8();
    __dst[0] = v116;
    ((void (*)(void **, std::string *))off_24C404030[v150])(__dst, &v149);
    if (v150 == -1)
      sub_20AECFAB8();
    *(_QWORD *)v116 = __dst;
    ((void (*)(__int128 *__return_ptr, _BYTE *, std::string *))off_24C404048[v150])(&v139, v116, &v149);
    if (v150 != -1)
      ((void (*)(_BYTE *, std::string *))off_24C404000[v150])(v116, &v149);
    v141 = v139;
    v142 = v140;
    v139 = 0uLL;
    v140 = 0;
    v143 = 1;
    sub_20B099E24(&v141, (uint64_t)v131);
    *(_OWORD *)a7 = *(_OWORD *)v131;
    *(_BYTE *)(a7 + 16) = 0;
    *(_BYTE *)(a7 + 112) = 0;
    if (v133[40])
    {
      *(_BYTE *)(a7 + 40) = 0;
      v86 = v131[40];
      if (v131[40])
      {
        *(_OWORD *)(a7 + 16) = *(_OWORD *)&v131[16];
        *(_QWORD *)(a7 + 32) = *(_QWORD *)&v131[32];
        memset(&v131[16], 0, 24);
        *(_BYTE *)(a7 + 40) = 1;
      }
      *(_BYTE *)(a7 + 48) = 0;
      *(_BYTE *)(a7 + 104) = 0;
      if (v133[32])
      {
        v87 = *(_QWORD *)v133;
        *(_QWORD *)(a7 + 64) = v132;
        *(_OWORD *)(a7 + 48) = *(_OWORD *)&v131[48];
        *(_QWORD *)&v131[48] = 0;
        *(_QWORD *)&v131[56] = 0;
        *(_QWORD *)(a7 + 72) = v87;
        *(_OWORD *)(a7 + 80) = *(_OWORD *)&v133[8];
        *(_QWORD *)(a7 + 96) = *(_QWORD *)&v133[24];
        v132 = 0;
        memset(&v133[8], 0, 24);
        *(_BYTE *)(a7 + 104) = 1;
      }
      *(_BYTE *)(a7 + 112) = 1;
      *(_BYTE *)(a7 + 160) = 0;
      if (v86 && (v131[39] & 0x80000000) != 0)
        operator delete(*(void **)&v131[16]);
    }
    else
    {
      *(_BYTE *)(a7 + 160) = 0;
    }
    if (v143 && SHIBYTE(v142) < 0)
      operator delete((void *)v141);
    if (SHIBYTE(v140) < 0)
      operator delete((void *)v139);
    return;
  }
  if (a1)
  {
    v93 = operator new(0x20uLL);
    v94 = xmmword_20B5B37B0;
    strcpy((char *)v93, "invalid VZBufferType value");
    v95 = 1;
    sub_20B099E24((__int128 *)&v93, (uint64_t)v131);
    *(_OWORD *)a7 = *(_OWORD *)v131;
    *(_BYTE *)(a7 + 16) = 0;
    *(_BYTE *)(a7 + 112) = 0;
    if (v133[40])
    {
      *(_BYTE *)(a7 + 40) = 0;
      v28 = v131[40];
      if (v131[40])
      {
        *(_OWORD *)(a7 + 16) = *(_OWORD *)&v131[16];
        *(_QWORD *)(a7 + 32) = *(_QWORD *)&v131[32];
        memset(&v131[16], 0, 24);
        *(_BYTE *)(a7 + 40) = 1;
      }
      *(_BYTE *)(a7 + 48) = 0;
      *(_BYTE *)(a7 + 104) = 0;
      if (v133[32])
      {
        v29 = *(_QWORD *)v133;
        *(_QWORD *)(a7 + 64) = v132;
        *(_OWORD *)(a7 + 48) = *(_OWORD *)&v131[48];
        *(_QWORD *)&v131[48] = 0;
        *(_QWORD *)&v131[56] = 0;
        *(_QWORD *)(a7 + 72) = v29;
        *(_OWORD *)(a7 + 80) = *(_OWORD *)&v133[8];
        *(_QWORD *)(a7 + 96) = *(_QWORD *)&v133[24];
        v132 = 0;
        memset(&v133[8], 0, 24);
        *(_BYTE *)(a7 + 104) = 1;
      }
      *(_BYTE *)(a7 + 112) = 1;
      *(_BYTE *)(a7 + 160) = 0;
      if (v28 && (v131[39] & 0x80000000) != 0)
        operator delete(*(void **)&v131[16]);
    }
    else
    {
      *(_BYTE *)(a7 + 160) = 0;
    }
    if (v95 && SHIBYTE(v94) < 0)
      operator delete(v93);
  }
  else
  {
    v99.__r_.__value_.__r.__words[0] = a5;
    LODWORD(v123[0]) = a6;
    if (a4 == 1)
    {
      *(_QWORD *)&v107 = a2;
      sub_20B49D13C(a3);
      *(_QWORD *)v116 = &off_24C3F2D20;
      sub_20B030D34((uint64_t)&v116[8], (uint64_t)v131);
      v30 = *(std::__shared_weak_count **)&v131[16];
      if (*(_QWORD *)&v131[16])
      {
        v31 = (unint64_t *)(*(_QWORD *)&v131[16] + 8);
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
          std::__shared_weak_count::__release_weak(v30);
        }
      }
      v34 = *(_QWORD *)&v116[8];
      v33 = *(std::__shared_weak_count **)&v116[16];
      if (*(_QWORD *)&v116[16])
      {
        v35 = (unint64_t *)(*(_QWORD *)&v116[16] + 8);
        do
          v36 = __ldxr(v35);
        while (__stxr(v36 + 1, v35));
        v37 = *(_QWORD *)&v116[40];
        v38 = *(_DWORD *)&v116[48];
        v39 = *(_WORD *)&v116[52];
        do
          v40 = __ldxr(v35);
        while (__stxr(v40 + 1, v35));
        *(_QWORD *)v131 = *(_QWORD *)&v116[24];
        *(_DWORD *)&v131[8] = *(_DWORD *)&v116[32];
        do
          v41 = __ldaxr(v35);
        while (__stlxr(v41 - 1, v35));
        if (!v41)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      else
      {
        v37 = *(_QWORD *)&v116[40];
        v38 = *(_DWORD *)&v116[48];
        v39 = *(_WORD *)&v116[52];
        *(_QWORD *)v131 = *(_QWORD *)&v116[24];
        *(_DWORD *)&v131[8] = *(_DWORD *)&v116[32];
      }
      *(_OWORD *)(a7 + 88) = *(_OWORD *)&v116[24];
      *(_OWORD *)(a7 + 102) = *(_OWORD *)&v116[38];
      *(_QWORD *)a7 = &off_24C403F68;
      *(_QWORD *)(a7 + 8) = &off_24C3F2CB0;
      *(_QWORD *)(a7 + 16) = v34;
      *(_QWORD *)(a7 + 24) = v33;
      *(_OWORD *)(a7 + 32) = *(_OWORD *)v131;
      *(_QWORD *)(a7 + 48) = v37;
      *(_DWORD *)(a7 + 56) = v38;
      *(_WORD *)(a7 + 60) = v39;
      *(_QWORD *)(a7 + 64) = &off_24C3F2D20;
      v78 = *(_OWORD *)&v116[8];
      goto LABEL_143;
    }
    if (!a4)
    {
      *(_QWORD *)&v107 = a2;
      sub_20B495718(a3);
      *(_QWORD *)v124 = &off_24C3F2D20;
      sub_20B030D34((uint64_t)&v124[8], (uint64_t)v131);
      v12 = *(std::__shared_weak_count **)&v131[16];
      if (*(_QWORD *)&v131[16])
      {
        v13 = (unint64_t *)(*(_QWORD *)&v131[16] + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v16 = *(_QWORD *)&v124[8];
      v15 = *(std::__shared_weak_count **)&v124[16];
      if (*(_QWORD *)&v124[16])
      {
        v17 = (unint64_t *)(*(_QWORD *)&v124[16] + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        v19 = *(_QWORD *)&v124[40];
        v20 = *(_DWORD *)&v124[48];
        v21 = *(_WORD *)&v124[52];
        do
          v22 = __ldxr(v17);
        while (__stxr(v22 + 1, v17));
        *(_QWORD *)v131 = *(_QWORD *)&v124[24];
        *(_DWORD *)&v131[8] = *(_DWORD *)&v124[32];
        do
          v23 = __ldaxr(v17);
        while (__stlxr(v23 - 1, v17));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      else
      {
        v19 = *(_QWORD *)&v124[40];
        v20 = *(_DWORD *)&v124[48];
        v21 = *(_WORD *)&v124[52];
        *(_QWORD *)v131 = *(_QWORD *)&v124[24];
        *(_DWORD *)&v131[8] = *(_DWORD *)&v124[32];
      }
      *(_OWORD *)(a7 + 88) = *(_OWORD *)&v124[24];
      *(_OWORD *)(a7 + 102) = *(_OWORD *)&v124[38];
      *(_QWORD *)a7 = &off_24C403F68;
      *(_QWORD *)(a7 + 8) = &off_24C3F2CB0;
      *(_QWORD *)(a7 + 16) = v16;
      *(_QWORD *)(a7 + 24) = v15;
      *(_OWORD *)(a7 + 32) = *(_OWORD *)v131;
      *(_QWORD *)(a7 + 48) = v19;
      *(_DWORD *)(a7 + 56) = v20;
      *(_WORD *)(a7 + 60) = v21;
      *(_QWORD *)(a7 + 64) = &off_24C3F2D20;
      v78 = *(_OWORD *)&v124[8];
LABEL_143:
      *(_OWORD *)(a7 + 72) = v78;
      *(_BYTE *)(a7 + 120) = 1;
      *(_BYTE *)(a7 + 128) = 0;
      *(_BYTE *)(a7 + 152) = 0;
      *(_BYTE *)(a7 + 160) = 1;
      return;
    }
    *(_QWORD *)v131 = &off_24C3F2D20;
    sub_20B02EAA8((uint64_t)&v131[8]);
    *(_QWORD *)a7 = &off_24C403F68;
    *(_QWORD *)(a7 + 8) = &off_24C3F2CB0;
    v42 = *(_QWORD *)&v131[8];
    v43 = *(std::__shared_weak_count **)&v131[16];
    if (*(_QWORD *)&v131[16])
    {
      v44 = (unint64_t *)(*(_QWORD *)&v131[16] + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
      v46 = *(_QWORD *)&v131[40];
      v47 = *(_DWORD *)&v131[48];
      v48 = *(_WORD *)&v131[52];
      do
        v49 = __ldxr(v44);
      while (__stxr(v49 + 1, v44));
    }
    else
    {
      v46 = *(_QWORD *)&v131[40];
      v47 = *(_DWORD *)&v131[48];
      v48 = *(_WORD *)&v131[52];
    }
    *(_QWORD *)(a7 + 16) = v42;
    *(_QWORD *)(a7 + 24) = v43;
    *(_QWORD *)(a7 + 32) = *(_QWORD *)&v131[24];
    *(_DWORD *)(a7 + 40) = *(_DWORD *)&v131[32];
    *(_QWORD *)(a7 + 48) = v46;
    *(_DWORD *)(a7 + 56) = v47;
    *(_WORD *)(a7 + 60) = v48;
    if (v43)
    {
      v76 = (unint64_t *)&v43->__shared_owners_;
      do
        v77 = __ldaxr(v76);
      while (__stlxr(v77 - 1, v76));
      if (!v77)
      {
        ((void (*)(std::__shared_weak_count *))v43->__on_zero_shared)(v43);
        std::__shared_weak_count::__release_weak(v43);
      }
    }
    *(_QWORD *)(a7 + 64) = &off_24C3F2D20;
    *(_OWORD *)(a7 + 72) = *(_OWORD *)&v131[8];
    *(_OWORD *)(a7 + 88) = *(_OWORD *)&v131[24];
    *(_OWORD *)(a7 + 102) = *(_OWORD *)&v131[38];
    *(_BYTE *)(a7 + 120) = 1;
    *(_BYTE *)(a7 + 128) = 0;
    *(_BYTE *)(a7 + 152) = 0;
    *(_BYTE *)(a7 + 160) = 1;
    *(_QWORD *)v131 = &v99;
    *(_QWORD *)&v131[8] = a2;
    *(_QWORD *)&v131[16] = v123;
    *(_QWORD *)&v131[24] = a7;
    sub_20B030F64(a3, (uint64_t **)v131);
  }
}

void sub_20B0308B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;

  if (*(char *)(v65 - 137) < 0)
    operator delete(*(void **)(v65 - 160));
  __cxa_guard_abort(&qword_25463AE70);
  sub_20AECD704((uint64_t)&a65);
  sub_20AEF07DC((uint64_t)&STACK[0x240]);
  _Unwind_Resume(a1);
}

void sub_20B0309EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  if (*(char *)(v1 - 105) < 0)
  {
    operator delete(*(void **)(v1 - 128));
    sub_20AECFA60(v1 - 160);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B030AB8);
}

void sub_20B030A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
    {
      operator delete(__p);
      _Unwind_Resume(a1);
    }
  }
  _Unwind_Resume(a1);
}

void sub_20B030A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44)
{
  uint64_t v44;

  sub_20B52CE84(&a44);
  sub_20AECFA60(v44 - 160);
  _Unwind_Resume(a1);
}

void sub_20B030A58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a19 && a18 < 0)
    operator delete(__p);
  if (a52 < 0)
    operator delete(a47);
  _Unwind_Resume(a1);
}

void sub_20B030A8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_20AECFA60((uint64_t)&a65);
  _Unwind_Resume(a1);
}

void sub_20B030AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;

  sub_20AECFA60((uint64_t)&a65);
  _Unwind_Resume(a1);
}

void sub_20B030AB4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECFA60(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_20B030AC8(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  char v8;

  v3 = a1;
  sub_20B030BA4("invalid VZPixelFormat value '", &v3, (std::string *)"'");
  *(_OWORD *)__p = *(_OWORD *)v4;
  v7 = v5;
  v4[1] = 0;
  v5 = 0;
  v4[0] = 0;
  v8 = 1;
  sub_20B099E24((__int128 *)__p, a2);
  if (v8 && SHIBYTE(v7) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_20B030B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a22 && a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B030BA4(char *__s, unsigned int *a2, std::string *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  std::string v8;
  std::string **v9;
  std::string *v10;
  std::string *v11;
  _DWORD *v12;
  std::string *v13;
  std::string *v14;

  v7 = 0;
  sub_20AFAE5CC(v6, __s);
  std::to_string(&v8, *a2);
  v10 = (std::string *)v6;
  v11 = &v8;
  v12 = v6;
  v13 = &v8;
  v14 = &v8;
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v10;
  ((void (*)(std::string ***, _DWORD *))off_24C404018[v7])(&v9, v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v10 = (std::string *)v6;
  v11 = a3;
  v12 = v6;
  v13 = a3;
  v14 = a3;
  if (v7 == -1)
    sub_20AECFAB8();
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  ((void (*)(std::string *, _DWORD *))off_24C404030[v7])(&v8, v6);
  if (v7 == -1)
    sub_20AECFAB8();
  v10 = &v8;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C404048[v7])(&v10, v6);
  if (v7 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C404000[v7])(&v10, v6);
  return result;
}

void sub_20B030CF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B030D10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B030D00);
}

void sub_20B030D34(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 48);
    v22 = *(_QWORD *)(a2 + 32);
    v23 = *(_DWORD *)(a2 + 40);
    v9 = *(_DWORD *)(a2 + 56);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v24 = 0;
    v8 = *(_QWORD *)(a2 + 48);
    v22 = *(_QWORD *)(a2 + 32);
    v23 = *(_DWORD *)(a2 + 40);
    v9 = *(_DWORD *)(a2 + 56);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v22;
  *(_DWORD *)(a1 + 24) = v23;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = v9;
  if (v4)
  {
    if (v3)
    {
      v11 = (unint64_t *)&v3->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v14 & 0xFFFFFFu) <= 0x10000)
      v15 = 0;
    else
      v15 = v14;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    v3 = v24;
    *(_WORD *)(a1 + 44) = v16 & 0xFF00 | v15;
    if (!v24)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v17 = (unint64_t *)&v3->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v19 = v25;
    if (!v25)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v19 = v25;
  if (!v25)
    return;
LABEL_29:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_20B030F10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B030F64(int a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  BOOL v35;
  uint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t *v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  BOOL v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  BOOL v75;
  uint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  unint64_t *v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  BOOL v86;
  uint64_t v87;
  std::__shared_weak_count *v88;
  unint64_t *v89;
  unint64_t v90;
  unint64_t *v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  BOOL v97;
  unint64_t v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  BOOL v108;
  uint64_t v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  BOOL v117;
  uint64_t v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  unint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  BOOL v128;
  uint64_t v129;
  std::__shared_weak_count *v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  BOOL v139;
  uint64_t v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  BOOL v150;
  uint64_t v151;
  std::__shared_weak_count *v152;
  unint64_t *v153;
  unint64_t v154;
  unint64_t *v155;
  unint64_t v156;
  uint64_t *v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  BOOL v161;
  uint64_t v162;
  std::__shared_weak_count *v163;
  unint64_t *v164;
  unint64_t v165;
  unint64_t *v166;
  unint64_t v167;
  uint64_t *v168;
  uint64_t v169;
  uint64_t v170;
  BOOL v171;
  uint64_t v172;
  std::__shared_weak_count *v173;
  unint64_t *v174;
  unint64_t v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  uint64_t v180;
  BOOL v181;
  uint64_t v182;
  std::__shared_weak_count *v183;
  unint64_t *v184;
  unint64_t v185;
  unint64_t *v186;
  unint64_t v187;
  uint64_t *v188;
  uint64_t v189;
  BOOL v190;
  uint64_t v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t *v195;
  unint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t v199;
  int v200;
  BOOL v201;
  uint64_t v202;
  std::__shared_weak_count *v203;
  unint64_t *v204;
  unint64_t v205;
  unint64_t *v206;
  unint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  BOOL v212;
  uint64_t v213;
  std::__shared_weak_count *v214;
  unint64_t *v215;
  unint64_t v216;
  unint64_t *v217;
  unint64_t v218;
  uint64_t *v219;
  uint64_t v220;
  BOOL v221;
  uint64_t v222;
  std::__shared_weak_count *v223;
  unint64_t *v224;
  unint64_t v225;
  unint64_t *v226;
  unint64_t v227;
  uint64_t *v228;
  uint64_t v229;
  BOOL v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t *v235;
  unint64_t v236;
  uint64_t *v237;
  uint64_t v238;
  BOOL v239;
  uint64_t v240;
  std::__shared_weak_count *v241;
  unint64_t *v242;
  unint64_t v243;
  unint64_t *v244;
  uint64_t *v245;
  uint64_t v246;
  BOOL v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  uint64_t *v253;
  uint64_t v254;
  uint64_t v255;
  int v256;
  BOOL v257;
  uint64_t v258;
  std::__shared_weak_count *v259;
  unint64_t *v260;
  unint64_t v261;
  unint64_t *v262;
  uint64_t *v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  BOOL v267;
  uint64_t v268;
  std::__shared_weak_count *v269;
  unint64_t *v270;
  unint64_t v271;
  unint64_t *v272;
  uint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  int v276;
  BOOL v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  uint64_t *v283;
  uint64_t v284;
  BOOL v285;
  uint64_t v286;
  std::__shared_weak_count *v287;
  unint64_t *v288;
  unint64_t v289;
  unint64_t *v290;
  uint64_t *v291;
  uint64_t v292;
  BOOL v293;
  uint64_t v294;
  std::__shared_weak_count *v295;
  unint64_t *v296;
  unint64_t v297;
  unint64_t *v298;
  uint64_t *v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  BOOL v303;
  uint64_t v304;
  std::__shared_weak_count *v305;
  unint64_t *v306;
  unint64_t v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  BOOL v314;
  uint64_t v315;
  std::__shared_weak_count *v316;
  unint64_t *v317;
  unint64_t v318;
  unint64_t *v319;
  unint64_t v320;
  uint64_t *v321;
  uint64_t v322;
  uint64_t v323;
  int v324;
  BOOL v325;
  uint64_t v326;
  std::__shared_weak_count *v327;
  unint64_t *v328;
  unint64_t v329;
  unint64_t *v330;
  unint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  BOOL v336;
  unint64_t v337;
  std::__shared_weak_count *v338;
  unint64_t *v339;
  unint64_t v340;
  unint64_t *v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  BOOL v346;
  uint64_t v347;
  std::__shared_weak_count *v348;
  unint64_t *v349;
  unint64_t v350;
  unint64_t *v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  BOOL v355;
  uint64_t v356;
  std::__shared_weak_count *v357;
  unint64_t *v358;
  unint64_t v359;
  unint64_t *v360;
  uint64_t *v361;
  uint64_t v362;
  uint64_t v363;
  BOOL v364;
  uint64_t v365;
  std::__shared_weak_count *v366;
  unint64_t *v367;
  unint64_t v368;
  unint64_t *v369;
  uint64_t *v370;
  uint64_t v371;
  BOOL v372;
  uint64_t v373;
  std::__shared_weak_count *v374;
  unint64_t *v375;
  unint64_t v376;
  unint64_t *v377;
  uint64_t *v378;
  uint64_t v379;
  BOOL v380;
  uint64_t v381;
  std::__shared_weak_count *v382;
  unint64_t *v383;
  unint64_t v384;
  unint64_t *v385;
  uint64_t *v386;
  uint64_t v387;
  BOOL v388;
  uint64_t v389;
  std::__shared_weak_count *v390;
  unint64_t *v391;
  unint64_t v392;
  unint64_t *v393;
  __int128 v394;
  __int128 v395;
  char v396;
  char v397;
  void *v398;
  char v399;
  void *v400;
  char v401;
  char v402;
  char v403;
  char v404;
  uint64_t (**v405)();
  uint64_t v406;
  std::__shared_weak_count *v407;
  __int128 v408;
  void *v409[2];
  char v410;
  char v411;
  void *v412;
  char v413;
  void *__p;
  char v415;
  char v416;
  char v417;
  uint64_t (**v418)();
  uint64_t v419;
  std::__shared_weak_count *v420;
  __int128 v421;
  __int128 v422;
  char v423;
  char v424;
  void *v425;
  char v426;
  void *v427;
  char v428;
  char v429;
  char v430;
  char v431;

  switch(a1)
  {
    case 0:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
      abort();
    case 1:
      sub_20B011048((unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v394);
      if (!v404)
        goto LABEL_659;
      v3 = a2[1];
      v4 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C4051D0;
      if (*((_DWORD *)v3 + 1))
        v5 = *(_DWORD *)v3 == 0;
      else
        v5 = 1;
      v6 = v4 << 32;
      if (v5)
        v6 = 0;
      *(_QWORD *)&v421 = v6 | (*(_DWORD *)v3 != 0);
      sub_20B036F00(&v408, v3, (uint64_t *)&v421, (uint64_t)&v419);
      *(_QWORD *)&v421 = &off_24C405088;
      sub_20B037370((uint64_t)&v418, (uint64_t)&v421 + 8);
      v405 = &off_24C3F2D20;
      sub_20B0379C4((uint64_t)&v406, (uint64_t)&v421);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v7 = v407;
      if (v407)
      {
        p_shared_owners = (unint64_t *)&v407->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      sub_20AEC147C((uint64_t)&v421 + 8);
      v10 = v420;
      if (!v420)
        goto LABEL_668;
      v11 = (unint64_t *)&v420->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      goto LABEL_77;
    case 2:
      sub_20B014D50(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v394);
      if (!v404)
        goto LABEL_659;
      v25 = a2[1];
      v26 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C405448;
      if (*((_DWORD *)v25 + 1))
        v27 = *(_DWORD *)v25 == 0;
      else
        v27 = 1;
      v28 = (v26 << 31) & 0x7FFFFFFF00000000;
      if (v27)
        v28 = 0;
      *(_QWORD *)&v421 = v28 | (*(_DWORD *)v25 != 0);
      sub_20B037CA8(&v408, v25, (uint64_t *)&v421, (uint64_t)&v419);
      *(_QWORD *)&v421 = &off_24C4052C8;
      sub_20B038120((uint64_t)&v418, (uint64_t)&v421 + 8);
      v405 = &off_24C3F2D20;
      sub_20B038738((uint64_t)&v406, (uint64_t)&v421);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v29 = v407;
      if (v407)
      {
        v30 = (unint64_t *)&v407->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      sub_20AEC147C((uint64_t)&v421 + 8);
      v10 = v420;
      if (!v420)
        goto LABEL_668;
      v32 = (unint64_t *)&v420->__shared_owners_;
      do
        v12 = __ldaxr(v32);
      while (__stlxr(v12 - 1, v32));
      goto LABEL_77;
    case 3:
      sub_20B0157EC(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v394);
      if (!v404)
        goto LABEL_659;
      v33 = a2[1];
      v34 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C405688;
      if (*((_DWORD *)v33 + 1))
        v35 = *(_DWORD *)v33 == 0;
      else
        v35 = 1;
      v36 = (v34 << 31) & 0x7FFFFFFF00000000;
      if (v35)
        v36 = 0;
      *(_QWORD *)&v421 = v36 | (*(_DWORD *)v33 != 0);
      sub_20B038A20(&v408, v33, (uint64_t *)&v421, (uint64_t)&v419);
      *(_QWORD *)&v421 = &off_24C405540;
      sub_20B038E98((uint64_t)&v418, (uint64_t)&v421 + 8);
      v405 = &off_24C3F2D20;
      sub_20B03972C((uint64_t)&v406, (uint64_t)&v421);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v37 = v407;
      if (v407)
      {
        v38 = (unint64_t *)&v407->__shared_owners_;
        do
          v39 = __ldaxr(v38);
        while (__stlxr(v39 - 1, v38));
        if (!v39)
        {
          ((void (*)(std::__shared_weak_count *))v37->__on_zero_shared)(v37);
          std::__shared_weak_count::__release_weak(v37);
        }
      }
      sub_20AEC147C((uint64_t)&v421 + 8);
      v10 = v420;
      if (!v420)
        goto LABEL_668;
      v40 = (unint64_t *)&v420->__shared_owners_;
      do
        v12 = __ldaxr(v40);
      while (__stlxr(v12 - 1, v40));
      goto LABEL_77;
    case 4:
      sub_20B016288(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v394);
      if (v404)
      {
        v41 = a2[1];
        v42 = *(unsigned int *)a2[2];
        *(_QWORD *)&v408 = **a2;
        v418 = &off_24C405900;
        if (*((_DWORD *)v41 + 1))
          v43 = *(_DWORD *)v41 == 0;
        else
          v43 = 1;
        v44 = (v42 << 30) & 0x3FFFFFFF00000000;
        if (v43)
          v44 = 0;
        *(_QWORD *)&v421 = v44 | (*(_DWORD *)v41 != 0);
        sub_20B039A14(&v408, v41, (uint64_t *)&v421, (uint64_t)&v419);
        *(_QWORD *)&v421 = &off_24C405780;
        sub_20B039E8C((uint64_t)&v418, (uint64_t)&v421 + 8);
        v405 = &off_24C3F2D20;
        sub_20B03A4A4((uint64_t)&v406, (uint64_t)&v421);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v45 = v407;
        if (v407)
        {
          v46 = (unint64_t *)&v407->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        sub_20AEC147C((uint64_t)&v421 + 8);
        v10 = v420;
        if (v420)
        {
          v48 = (unint64_t *)&v420->__shared_owners_;
          do
            v12 = __ldaxr(v48);
          while (__stlxr(v12 - 1, v48));
LABEL_77:
          if (!v12)
          {
            ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
            std::__shared_weak_count::__release_weak(v10);
          }
        }
      }
      else
      {
LABEL_659:
        v408 = v394;
        sub_20AECEBD0(v409, &v395);
        sub_20B009CA0((uint64_t)a2[3], &v408);
        if (v417)
        {
          if (v416)
          {
            if (v415 < 0)
              operator delete(__p);
            if (v413 < 0)
              operator delete(v412);
          }
          if (v411 && v410 < 0)
            operator delete(v409[0]);
        }
      }
LABEL_668:
      if (!v404 && v403)
      {
        if (v402)
        {
          if (v401 < 0)
            operator delete(v400);
          if (v399 < 0)
            operator delete(v398);
        }
        if (v397)
        {
          if (v396 < 0)
            operator delete((void *)v395);
        }
      }
      return;
    case 5:
      sub_20B016D2C((unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v49 = a2[1];
        v50 = **a2;
        v51 = a2[2];
        v418 = &off_24C405B78;
        v52 = *(_DWORD *)v49;
        if (*((_DWORD *)v49 + 1))
          v53 = v52 == 0;
        else
          v53 = 1;
        v54 = (unint64_t)*(unsigned int *)v51 << 32;
        if (v53)
          v54 = 0;
        sub_20B03A78C((_BOOL8)&v419, v50, v49, v54 | (2 * (v52 != 0)));
        *(_QWORD *)&v394 = &off_24C4059F8;
        sub_20B03AAE8((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B03B184((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v55 = v407;
        if (v407)
        {
          v56 = (unint64_t *)&v407->__shared_owners_;
          do
            v57 = __ldaxr(v56);
          while (__stlxr(v57 - 1, v56));
          if (!v57)
          {
            ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
            std::__shared_weak_count::__release_weak(v55);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v58 = (unint64_t *)&v420->__shared_owners_;
        do
          v59 = __ldaxr(v58);
        while (__stlxr(v59 - 1, v58));
        if (v59)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 6:
      sub_20B01765C(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v60 = a2[1];
        v61 = **a2;
        v62 = *(unsigned int *)a2[2];
        v418 = &off_24C405DF0;
        v63 = *(_DWORD *)v60;
        if (*((_DWORD *)v60 + 1))
          v64 = v63 == 0;
        else
          v64 = 1;
        v65 = (v62 << 31) & 0x7FFFFFFF00000000;
        if (v64)
          v65 = 0;
        sub_20B03B468((_BOOL8)&v419, v61, v60, v65 | (2 * (v63 != 0)));
        *(_QWORD *)&v394 = &off_24C405C70;
        sub_20B03B7CC((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B03BE2C((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v66 = v407;
        if (v407)
        {
          v67 = (unint64_t *)&v407->__shared_owners_;
          do
            v68 = __ldaxr(v67);
          while (__stlxr(v68 - 1, v67));
          if (!v68)
          {
            ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
            std::__shared_weak_count::__release_weak(v66);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v69 = (unint64_t *)&v420->__shared_owners_;
        do
          v70 = __ldaxr(v69);
        while (__stlxr(v70 - 1, v69));
        if (v70)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 7:
      sub_20B01810C(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v71 = a2[1];
        v72 = **a2;
        v73 = *(unsigned int *)a2[2];
        v418 = &off_24C406068;
        v74 = *(_DWORD *)v71;
        if (*((_DWORD *)v71 + 1))
          v75 = v74 == 0;
        else
          v75 = 1;
        v76 = (v73 << 31) & 0x7FFFFFFF00000000;
        if (v75)
          v76 = 0;
        sub_20B03C114((_BOOL8)&v419, v72, v71, v76 | (2 * (v74 != 0)));
        *(_QWORD *)&v394 = &off_24C405EE8;
        sub_20B03C478((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B03CC70((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v77 = v407;
        if (v407)
        {
          v78 = (unint64_t *)&v407->__shared_owners_;
          do
            v79 = __ldaxr(v78);
          while (__stlxr(v79 - 1, v78));
          if (!v79)
          {
            ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
            std::__shared_weak_count::__release_weak(v77);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v80 = (unint64_t *)&v420->__shared_owners_;
        do
          v81 = __ldaxr(v80);
        while (__stlxr(v81 - 1, v80));
        if (v81)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 8:
      sub_20B018BBC(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v82 = a2[1];
        v83 = **a2;
        v84 = *(unsigned int *)a2[2];
        v418 = &off_24C4062E0;
        v85 = *(_DWORD *)v82;
        if (*((_DWORD *)v82 + 1))
          v86 = v85 == 0;
        else
          v86 = 1;
        v87 = (v84 << 30) & 0x3FFFFFFF00000000;
        if (v86)
          v87 = 0;
        sub_20B03CF58((_BOOL8)&v419, v83, v82, v87 | (2 * (v85 != 0)));
        *(_QWORD *)&v394 = &off_24C406160;
        sub_20B03D2BC((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B03D91C((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v88 = v407;
        if (v407)
        {
          v89 = (unint64_t *)&v407->__shared_owners_;
          do
            v90 = __ldaxr(v89);
          while (__stlxr(v90 - 1, v89));
          if (!v90)
          {
            ((void (*)(std::__shared_weak_count *))v88->__on_zero_shared)(v88);
            std::__shared_weak_count::__release_weak(v88);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v91 = (unint64_t *)&v420->__shared_owners_;
        do
          v92 = __ldaxr(v91);
        while (__stlxr(v92 - 1, v91));
        if (v92)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 9:
      sub_20B019670((unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v93 = a2[1];
        v94 = **a2;
        v95 = a2[2];
        v418 = &off_24C406558;
        v96 = 3;
        if (!*(_DWORD *)v93)
          v96 = 0;
        if (*((_DWORD *)v93 + 1))
          v97 = *(_DWORD *)v93 == 0;
        else
          v97 = 1;
        v98 = (unint64_t)*(unsigned int *)v95 << 32;
        if (v97)
          v98 = 0;
        sub_20B03DC04((_BOOL8)&v419, v94, v93, v98 | v96);
        *(_QWORD *)&v394 = &off_24C4063D8;
        sub_20B03DF60((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B03E60C((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v99 = v407;
        if (v407)
        {
          v100 = (unint64_t *)&v407->__shared_owners_;
          do
            v101 = __ldaxr(v100);
          while (__stlxr(v101 - 1, v100));
          if (!v101)
          {
            ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
            std::__shared_weak_count::__release_weak(v99);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v102 = (unint64_t *)&v420->__shared_owners_;
        do
          v103 = __ldaxr(v102);
        while (__stlxr(v103 - 1, v102));
        if (v103)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 10:
      sub_20B019FB8(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v299 = a2[1];
        v300 = **a2;
        v301 = *(unsigned int *)a2[2];
        v418 = &off_24C4067D0;
        v302 = 3;
        if (!*(_DWORD *)v299)
          v302 = 0;
        if (*((_DWORD *)v299 + 1))
          v303 = *(_DWORD *)v299 == 0;
        else
          v303 = 1;
        v304 = (v301 << 31) & 0x7FFFFFFF00000000;
        if (v303)
          v304 = 0;
        sub_20B03E8F0((_BOOL8)&v419, v300, v299, v304 | v302);
        *(_QWORD *)&v394 = &off_24C406650;
        sub_20B03EC54((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B03F468((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v305 = v407;
        if (v407)
        {
          v306 = (unint64_t *)&v407->__shared_owners_;
          do
            v307 = __ldaxr(v306);
          while (__stlxr(v307 - 1, v306));
          if (!v307)
          {
            ((void (*)(std::__shared_weak_count *))v305->__on_zero_shared)(v305);
            std::__shared_weak_count::__release_weak(v305);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v308 = (unint64_t *)&v420->__shared_owners_;
        do
          v309 = __ldaxr(v308);
        while (__stlxr(v309 - 1, v308));
        if (v309)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 11:
      sub_20B01AA84(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v310 = a2[1];
        v311 = **a2;
        v312 = *(unsigned int *)a2[2];
        v418 = &off_24C406A48;
        v313 = 3;
        if (!*(_DWORD *)v310)
          v313 = 0;
        if (*((_DWORD *)v310 + 1))
          v314 = *(_DWORD *)v310 == 0;
        else
          v314 = 1;
        v315 = (v312 << 31) & 0x7FFFFFFF00000000;
        if (v314)
          v315 = 0;
        sub_20B03F750((_BOOL8)&v419, v311, v310, v315 | v313);
        *(_QWORD *)&v394 = &off_24C4068C8;
        sub_20B03FAB4((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B0402AC((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v316 = v407;
        if (v407)
        {
          v317 = (unint64_t *)&v407->__shared_owners_;
          do
            v318 = __ldaxr(v317);
          while (__stlxr(v318 - 1, v317));
          if (!v318)
          {
            ((void (*)(std::__shared_weak_count *))v316->__on_zero_shared)(v316);
            std::__shared_weak_count::__release_weak(v316);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v319 = (unint64_t *)&v420->__shared_owners_;
        do
          v320 = __ldaxr(v319);
        while (__stlxr(v320 - 1, v319));
        if (v320)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 12:
      sub_20B01B550(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v104 = a2[1];
        v105 = **a2;
        v106 = *(unsigned int *)a2[2];
        v418 = &off_24C406CC0;
        v107 = 3;
        if (!*(_DWORD *)v104)
          v107 = 0;
        if (*((_DWORD *)v104 + 1))
          v108 = *(_DWORD *)v104 == 0;
        else
          v108 = 1;
        v109 = (v106 << 30) & 0x3FFFFFFF00000000;
        if (v108)
          v109 = 0;
        sub_20B040594((_BOOL8)&v419, v105, v104, v109 | v107);
        *(_QWORD *)&v394 = &off_24C406B40;
        sub_20B0408F8((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B041104((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v110 = v407;
        if (v407)
        {
          v111 = (unint64_t *)&v407->__shared_owners_;
          do
            v112 = __ldaxr(v111);
          while (__stlxr(v112 - 1, v111));
          if (!v112)
          {
            ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
            std::__shared_weak_count::__release_weak(v110);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v113 = (unint64_t *)&v420->__shared_owners_;
        do
          v114 = __ldaxr(v113);
        while (__stlxr(v114 - 1, v113));
        if (v114)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 13:
      sub_20B01C020((unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v115 = a2[1];
        v116 = *(unsigned int *)a2[2];
        *(_QWORD *)&v408 = **a2;
        v418 = &off_24C406F38;
        if (*((_DWORD *)v115 + 1))
          v117 = *(_DWORD *)v115 == 0;
        else
          v117 = 1;
        v118 = v116 << 32;
        if (v117)
          v118 = 0;
        *(_QWORD *)&v394 = v118 | (4 * (*(_DWORD *)v115 != 0));
        sub_20B0413EC((uint64_t *)&v408, v115, &v394, (uint64_t)&v419);
        *(_QWORD *)&v394 = &off_24C406DB8;
        sub_20B0418C0((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B041F6C((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v119 = v407;
        if (v407)
        {
          v120 = (unint64_t *)&v407->__shared_owners_;
          do
            v121 = __ldaxr(v120);
          while (__stlxr(v121 - 1, v120));
          if (!v121)
          {
            ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
            std::__shared_weak_count::__release_weak(v119);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v122 = (unint64_t *)&v420->__shared_owners_;
        do
          v123 = __ldaxr(v122);
        while (__stlxr(v123 - 1, v122));
        if (v123)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 14:
      sub_20B01C954(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v124 = a2[1];
        v125 = **a2;
        v126 = *(unsigned int *)a2[2];
        v418 = &off_24C4071B0;
        v127 = *(_DWORD *)v124;
        if (*((_DWORD *)v124 + 1))
          v128 = v127 == 0;
        else
          v128 = 1;
        v129 = (v126 << 31) & 0x7FFFFFFF00000000;
        if (v128)
          v129 = 0;
        sub_20B042250((_BOOL8)&v419, v125, v124, v129 | (4 * (v127 != 0)));
        *(_QWORD *)&v394 = &off_24C407030;
        sub_20B0425B4((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B042C78((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v130 = v407;
        if (v407)
        {
          v131 = (unint64_t *)&v407->__shared_owners_;
          do
            v132 = __ldaxr(v131);
          while (__stlxr(v132 - 1, v131));
          if (!v132)
          {
            ((void (*)(std::__shared_weak_count *))v130->__on_zero_shared)(v130);
            std::__shared_weak_count::__release_weak(v130);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v133 = (unint64_t *)&v420->__shared_owners_;
        do
          v134 = __ldaxr(v133);
        while (__stlxr(v134 - 1, v133));
        if (v134)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 15:
      sub_20B01D404(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v321 = a2[1];
        v322 = **a2;
        v323 = *(unsigned int *)a2[2];
        v418 = &off_24C407428;
        v324 = *(_DWORD *)v321;
        if (*((_DWORD *)v321 + 1))
          v325 = v324 == 0;
        else
          v325 = 1;
        v326 = (v323 << 31) & 0x7FFFFFFF00000000;
        if (v325)
          v326 = 0;
        sub_20B042F60((_BOOL8)&v419, v322, v321, v326 | (4 * (v324 != 0)));
        *(_QWORD *)&v394 = &off_24C4072A8;
        sub_20B0432C4((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B043ABC((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v327 = v407;
        if (v407)
        {
          v328 = (unint64_t *)&v407->__shared_owners_;
          do
            v329 = __ldaxr(v328);
          while (__stlxr(v329 - 1, v328));
          if (!v329)
          {
            ((void (*)(std::__shared_weak_count *))v327->__on_zero_shared)(v327);
            std::__shared_weak_count::__release_weak(v327);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v330 = (unint64_t *)&v420->__shared_owners_;
        do
          v331 = __ldaxr(v330);
        while (__stlxr(v331 - 1, v330));
        if (v331)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (!v417)
        break;
      if (v416)
      {
        if (v415 < 0)
          operator delete(__p);
        if (v413 < 0)
          operator delete(v412);
      }
      if (!v411 || (v410 & 0x80000000) == 0)
        break;
      goto LABEL_882;
    case 16:
      sub_20B01DEB4(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v135 = a2[1];
        v136 = **a2;
        v137 = *(unsigned int *)a2[2];
        v418 = &off_24C4076A0;
        v138 = *(_DWORD *)v135;
        if (*((_DWORD *)v135 + 1))
          v139 = v138 == 0;
        else
          v139 = 1;
        v140 = (v137 << 30) & 0x3FFFFFFF00000000;
        if (v139)
          v140 = 0;
        sub_20B043DA4((_BOOL8)&v419, v136, v135, v140 | (4 * (v138 != 0)));
        *(_QWORD *)&v394 = &off_24C407520;
        sub_20B044108((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B0447CC((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v141 = v407;
        if (v407)
        {
          v142 = (unint64_t *)&v407->__shared_owners_;
          do
            v143 = __ldaxr(v142);
          while (__stlxr(v143 - 1, v142));
          if (!v143)
          {
            ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
            std::__shared_weak_count::__release_weak(v141);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v144 = (unint64_t *)&v420->__shared_owners_;
        do
          v145 = __ldaxr(v144);
        while (__stlxr(v145 - 1, v144));
        if (v145)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 17:
      sub_20B01E968((unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v332 = a2[1];
        v333 = **a2;
        v334 = a2[2];
        v418 = &off_24C407918;
        v335 = 3;
        if (!*(_DWORD *)v332)
          v335 = 0;
        if (*((_DWORD *)v332 + 1))
          v336 = *(_DWORD *)v332 == 0;
        else
          v336 = 1;
        v337 = (unint64_t)*(unsigned int *)v334 << 32;
        if (v336)
          v337 = 0;
        sub_20B044AB4((_BOOL8)&v419, v333, v332, v337 | v335);
        *(_QWORD *)&v394 = &off_24C407798;
        sub_20B044E10((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B0454BC((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v338 = v407;
        if (v407)
        {
          v339 = (unint64_t *)&v407->__shared_owners_;
          do
            v340 = __ldaxr(v339);
          while (__stlxr(v340 - 1, v339));
          if (!v340)
          {
            ((void (*)(std::__shared_weak_count *))v338->__on_zero_shared)(v338);
            std::__shared_weak_count::__release_weak(v338);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (v420)
        {
          v341 = (unint64_t *)&v420->__shared_owners_;
          do
            v236 = __ldaxr(v341);
          while (__stlxr(v236 - 1, v341));
          goto LABEL_647;
        }
      }
      else
      {
        v408 = v421;
        sub_20AECEBD0(v409, &v422);
        sub_20B009CA0((uint64_t)a2[3], &v408);
        if (v417)
        {
          if (v416)
          {
            if (v415 < 0)
              operator delete(__p);
            if (v413 < 0)
              operator delete(v412);
          }
          if (v411 && v410 < 0)
            goto LABEL_882;
        }
      }
      break;
    case 18:
      sub_20B01F2B0(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v146 = a2[1];
        v147 = **a2;
        v148 = *(unsigned int *)a2[2];
        v418 = &off_24C407B90;
        v149 = 3;
        if (!*(_DWORD *)v146)
          v149 = 0;
        if (*((_DWORD *)v146 + 1))
          v150 = *(_DWORD *)v146 == 0;
        else
          v150 = 1;
        v151 = (v148 << 31) & 0x7FFFFFFF00000000;
        if (v150)
          v151 = 0;
        sub_20B0457A0((_BOOL8)&v419, v147, v146, v151 | v149);
        *(_QWORD *)&v394 = &off_24C407A10;
        sub_20B045B04((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B0461C8((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v152 = v407;
        if (v407)
        {
          v153 = (unint64_t *)&v407->__shared_owners_;
          do
            v154 = __ldaxr(v153);
          while (__stlxr(v154 - 1, v153));
          if (!v154)
          {
            ((void (*)(std::__shared_weak_count *))v152->__on_zero_shared)(v152);
            std::__shared_weak_count::__release_weak(v152);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v155 = (unint64_t *)&v420->__shared_owners_;
        do
          v156 = __ldaxr(v155);
        while (__stlxr(v156 - 1, v155));
        if (v156)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 19:
      sub_20B01FD7C(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v157 = a2[1];
        v158 = **a2;
        v159 = *(unsigned int *)a2[2];
        v418 = &off_24C407E08;
        v160 = 3;
        if (!*(_DWORD *)v157)
          v160 = 0;
        if (*((_DWORD *)v157 + 1))
          v161 = *(_DWORD *)v157 == 0;
        else
          v161 = 1;
        v162 = (v159 << 31) & 0x7FFFFFFF00000000;
        if (v161)
          v162 = 0;
        sub_20B0464B0((_BOOL8)&v419, v158, v157, v162 | v160);
        *(_QWORD *)&v394 = &off_24C407C88;
        sub_20B046814((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B04700C((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v163 = v407;
        if (v407)
        {
          v164 = (unint64_t *)&v407->__shared_owners_;
          do
            v165 = __ldaxr(v164);
          while (__stlxr(v165 - 1, v164));
          if (!v165)
          {
            ((void (*)(std::__shared_weak_count *))v163->__on_zero_shared)(v163);
            std::__shared_weak_count::__release_weak(v163);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v166 = (unint64_t *)&v420->__shared_owners_;
        do
          v167 = __ldaxr(v166);
        while (__stlxr(v167 - 1, v166));
        if (v167)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 20:
      sub_20B020848(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v342 = a2[1];
      v343 = **a2;
      v344 = *(unsigned int *)a2[2];
      v418 = &off_24C408080;
      v345 = 3;
      if (!*(_DWORD *)v342)
        v345 = 0;
      if (*((_DWORD *)v342 + 1))
        v346 = *(_DWORD *)v342 == 0;
      else
        v346 = 1;
      v347 = (v344 << 30) & 0x3FFFFFFF00000000;
      if (v346)
        v347 = 0;
      sub_20B0472F4((_BOOL8)&v419, v343, v342, v347 | v345);
      *(_QWORD *)&v394 = &off_24C407F00;
      sub_20B047658((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B047D1C((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v348 = v407;
      if (v407)
      {
        v349 = (unint64_t *)&v407->__shared_owners_;
        do
          v350 = __ldaxr(v349);
        while (__stlxr(v350 - 1, v349));
        if (!v350)
        {
          ((void (*)(std::__shared_weak_count *))v348->__on_zero_shared)(v348);
          std::__shared_weak_count::__release_weak(v348);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v351 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v351);
      while (__stlxr(v236 - 1, v351));
      goto LABEL_647;
    case 21:
      sub_20B021318((unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v352 = a2[1];
      v353 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C4082F8;
      v354 = 3;
      if (!*(_DWORD *)v352)
        v354 = 0;
      if (*((_DWORD *)v352 + 1))
        v355 = *(_DWORD *)v352 == 0;
      else
        v355 = 1;
      v356 = v353 << 32;
      if (v355)
        v356 = 0;
      *(_QWORD *)&v394 = v356 | v354;
      sub_20B048004((uint64_t *)&v408, v352, &v394, (uint64_t)&v419);
      *(_QWORD *)&v394 = &off_24C408178;
      sub_20B0484D8((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B048B84((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v357 = v407;
      if (v407)
      {
        v358 = (unint64_t *)&v407->__shared_owners_;
        do
          v359 = __ldaxr(v358);
        while (__stlxr(v359 - 1, v358));
        if (!v359)
        {
          ((void (*)(std::__shared_weak_count *))v357->__on_zero_shared)(v357);
          std::__shared_weak_count::__release_weak(v357);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v360 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v360);
      while (__stlxr(v236 - 1, v360));
      goto LABEL_647;
    case 22:
      sub_20B021C60(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v168 = a2[1];
        v169 = *(unsigned int *)a2[2];
        *(_QWORD *)&v408 = **a2;
        v418 = &off_24C408570;
        v170 = 3;
        if (!*(_DWORD *)v168)
          v170 = 0;
        if (*((_DWORD *)v168 + 1))
          v171 = *(_DWORD *)v168 == 0;
        else
          v171 = 1;
        v172 = (v169 << 31) & 0x7FFFFFFF00000000;
        if (v171)
          v172 = 0;
        *(_QWORD *)&v394 = v172 | v170;
        sub_20B048E68((uint64_t *)&v408, v168, &v394, (uint64_t)&v419);
        *(_QWORD *)&v394 = &off_24C4083F0;
        sub_20B049344((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B049A08((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v173 = v407;
        if (v407)
        {
          v174 = (unint64_t *)&v407->__shared_owners_;
          do
            v175 = __ldaxr(v174);
          while (__stlxr(v175 - 1, v174));
          if (!v175)
          {
            ((void (*)(std::__shared_weak_count *))v173->__on_zero_shared)(v173);
            std::__shared_weak_count::__release_weak(v173);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v176 = (unint64_t *)&v420->__shared_owners_;
        do
          v177 = __ldaxr(v176);
        while (__stlxr(v177 - 1, v176));
        if (v177)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 23:
      sub_20B02272C(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v361 = a2[1];
      v362 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C4087E8;
      v363 = 3;
      if (!*(_DWORD *)v361)
        v363 = 0;
      if (*((_DWORD *)v361 + 1))
        v364 = *(_DWORD *)v361 == 0;
      else
        v364 = 1;
      v365 = (v362 << 31) & 0x7FFFFFFF00000000;
      if (v364)
        v365 = 0;
      *(_QWORD *)&v394 = v365 | v363;
      sub_20B049CF0((uint64_t *)&v408, v361, &v394, (uint64_t)&v419);
      *(_QWORD *)&v394 = &off_24C408668;
      sub_20B04A1CC((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B04A9C4((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v366 = v407;
      if (v407)
      {
        v367 = (unint64_t *)&v407->__shared_owners_;
        do
          v368 = __ldaxr(v367);
        while (__stlxr(v368 - 1, v367));
        if (!v368)
        {
          ((void (*)(std::__shared_weak_count *))v366->__on_zero_shared)(v366);
          std::__shared_weak_count::__release_weak(v366);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v369 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v369);
      while (__stlxr(v236 - 1, v369));
      goto LABEL_647;
    case 24:
      sub_20B0231F8(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v178 = a2[1];
        v179 = *(unsigned int *)a2[2];
        *(_QWORD *)&v408 = **a2;
        v418 = &off_24C408A60;
        v180 = 3;
        if (!*(_DWORD *)v178)
          v180 = 0;
        if (*((_DWORD *)v178 + 1))
          v181 = *(_DWORD *)v178 == 0;
        else
          v181 = 1;
        v182 = (v179 << 30) & 0x3FFFFFFF00000000;
        if (v181)
          v182 = 0;
        *(_QWORD *)&v394 = v182 | v180;
        sub_20B04ACAC((uint64_t *)&v408, v178, &v394, (uint64_t)&v419);
        *(_QWORD *)&v394 = &off_24C4088E0;
        sub_20B04B188((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B04B84C((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v183 = v407;
        if (v407)
        {
          v184 = (unint64_t *)&v407->__shared_owners_;
          do
            v185 = __ldaxr(v184);
          while (__stlxr(v185 - 1, v184));
          if (!v185)
          {
            ((void (*)(std::__shared_weak_count *))v183->__on_zero_shared)(v183);
            std::__shared_weak_count::__release_weak(v183);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v186 = (unint64_t *)&v420->__shared_owners_;
        do
          v187 = __ldaxr(v186);
        while (__stlxr(v187 - 1, v186));
        if (v187)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 25:
      sub_20B023CC8((unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v188 = a2[1];
        v189 = *(unsigned int *)a2[2];
        *(_QWORD *)&v408 = **a2;
        v418 = &off_24C408CD8;
        if (*((_DWORD *)v188 + 1))
          v190 = *(_DWORD *)v188 == 0;
        else
          v190 = 1;
        v191 = v189 << 32;
        if (v190)
          v191 = 0;
        *(_QWORD *)&v394 = v191 | (4 * (*(_DWORD *)v188 != 0));
        sub_20B04BB34((uint64_t *)&v408, v188, &v394, (uint64_t)&v419);
        *(_QWORD *)&v394 = &off_24C408B58;
        sub_20B04C008((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B04C6B4((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v192 = v407;
        if (v407)
        {
          v193 = (unint64_t *)&v407->__shared_owners_;
          do
            v194 = __ldaxr(v193);
          while (__stlxr(v194 - 1, v193));
          if (!v194)
          {
            ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
            std::__shared_weak_count::__release_weak(v192);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v195 = (unint64_t *)&v420->__shared_owners_;
        do
          v196 = __ldaxr(v195);
        while (__stlxr(v196 - 1, v195));
        if (v196)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 26:
      sub_20B0245FC(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v197 = a2[1];
        v198 = **a2;
        v199 = *(unsigned int *)a2[2];
        v418 = &off_24C408F50;
        v200 = *(_DWORD *)v197;
        if (*((_DWORD *)v197 + 1))
          v201 = v200 == 0;
        else
          v201 = 1;
        v202 = (v199 << 31) & 0x7FFFFFFF00000000;
        if (v201)
          v202 = 0;
        sub_20B04C998((_BOOL8)&v419, v198, v197, v202 | (4 * (v200 != 0)));
        *(_QWORD *)&v394 = &off_24C408DD0;
        sub_20B04CCFC((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B04D3C0((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v203 = v407;
        if (v407)
        {
          v204 = (unint64_t *)&v407->__shared_owners_;
          do
            v205 = __ldaxr(v204);
          while (__stlxr(v205 - 1, v204));
          if (!v205)
          {
            ((void (*)(std::__shared_weak_count *))v203->__on_zero_shared)(v203);
            std::__shared_weak_count::__release_weak(v203);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v206 = (unint64_t *)&v420->__shared_owners_;
        do
          v207 = __ldaxr(v206);
        while (__stlxr(v207 - 1, v206));
        if (v207)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 27:
      sub_20B0250AC(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v13 = a2[1];
        v14 = **a2;
        v15 = *(unsigned int *)a2[2];
        v418 = &off_24C4091C8;
        v16 = *(_DWORD *)v13;
        if (*((_DWORD *)v13 + 1))
          v17 = v16 == 0;
        else
          v17 = 1;
        v18 = (v15 << 31) & 0x7FFFFFFF00000000;
        if (v17)
          v18 = 0;
        sub_20B04D6A8((_BOOL8)&v419, v14, v13, v18 | (4 * (v16 != 0)));
        *(_QWORD *)&v394 = &off_24C409048;
        sub_20B04DA0C((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B04E204((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v19 = v407;
        if (v407)
        {
          v20 = (unint64_t *)&v407->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v23 = (unint64_t *)&v420->__shared_owners_;
        do
          v24 = __ldaxr(v23);
        while (__stlxr(v24 - 1, v23));
        if (v24)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 28:
      sub_20B025B5C(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v208 = a2[1];
        v209 = **a2;
        v210 = *(unsigned int *)a2[2];
        v418 = &off_24C409440;
        v211 = *(_DWORD *)v208;
        if (*((_DWORD *)v208 + 1))
          v212 = v211 == 0;
        else
          v212 = 1;
        v213 = (v210 << 30) & 0x3FFFFFFF00000000;
        if (v212)
          v213 = 0;
        sub_20B04E4EC((_BOOL8)&v419, v209, v208, v213 | (4 * (v211 != 0)));
        *(_QWORD *)&v394 = &off_24C4092C0;
        sub_20B04E850((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B04EF14((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v214 = v407;
        if (v407)
        {
          v215 = (unint64_t *)&v407->__shared_owners_;
          do
            v216 = __ldaxr(v215);
          while (__stlxr(v216 - 1, v215));
          if (!v216)
          {
            ((void (*)(std::__shared_weak_count *))v214->__on_zero_shared)(v214);
            std::__shared_weak_count::__release_weak(v214);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v217 = (unint64_t *)&v420->__shared_owners_;
        do
          v218 = __ldaxr(v217);
        while (__stlxr(v218 - 1, v217));
        if (v218)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 29:
      sub_20B026610((unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v219 = a2[1];
        v220 = *(unsigned int *)a2[2];
        *(_QWORD *)&v408 = **a2;
        v418 = &off_24C4096B8;
        if (*((_DWORD *)v219 + 1))
          v221 = *(_DWORD *)v219 == 0;
        else
          v221 = 1;
        v222 = v220 << 32;
        if (v221)
          v222 = 0;
        *(_QWORD *)&v394 = v222 | (4 * (*(_DWORD *)v219 != 0));
        sub_20B04F1FC((uint64_t *)&v408, v219, &v394, (uint64_t)&v419);
        *(_QWORD *)&v394 = &off_24C409538;
        sub_20B04F6D0((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B04FD7C((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v223 = v407;
        if (v407)
        {
          v224 = (unint64_t *)&v407->__shared_owners_;
          do
            v225 = __ldaxr(v224);
          while (__stlxr(v225 - 1, v224));
          if (!v225)
          {
            ((void (*)(std::__shared_weak_count *))v223->__on_zero_shared)(v223);
            std::__shared_weak_count::__release_weak(v223);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (!v420)
          break;
        v226 = (unint64_t *)&v420->__shared_owners_;
        do
          v227 = __ldaxr(v226);
        while (__stlxr(v227 - 1, v226));
        if (v227)
          break;
        goto LABEL_648;
      }
      v408 = v421;
      sub_20AECEBD0(v409, &v422);
      sub_20B009CA0((uint64_t)a2[3], &v408);
      if (v417)
      {
        if (v416)
        {
          if (v415 < 0)
            operator delete(__p);
          if (v413 < 0)
            operator delete(v412);
        }
        if (v411 && v410 < 0)
          goto LABEL_882;
      }
      break;
    case 30:
      sub_20B026F44(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v228 = a2[1];
      v229 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C409930;
      if (*((_DWORD *)v228 + 1))
        v230 = *(_DWORD *)v228 == 0;
      else
        v230 = 1;
      v231 = (v229 << 31) & 0x7FFFFFFF00000000;
      if (v230)
        v231 = 0;
      *(_QWORD *)&v394 = v231 | (4 * (*(_DWORD *)v228 != 0));
      sub_20B050060((uint64_t *)&v408, v228, &v394, (uint64_t)&v419);
      *(_QWORD *)&v394 = &off_24C4097B0;
      sub_20B05053C((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B050C00((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v232 = v407;
      if (v407)
      {
        v233 = (unint64_t *)&v407->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
          std::__shared_weak_count::__release_weak(v232);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v235 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v235);
      while (__stlxr(v236 - 1, v235));
      goto LABEL_647;
    case 31:
      sub_20B0279F4(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v237 = a2[1];
      v238 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C409BA8;
      if (*((_DWORD *)v237 + 1))
        v239 = *(_DWORD *)v237 == 0;
      else
        v239 = 1;
      v240 = (v238 << 31) & 0x7FFFFFFF00000000;
      if (v239)
        v240 = 0;
      *(_QWORD *)&v394 = v240 | (4 * (*(_DWORD *)v237 != 0));
      sub_20B050EE8((uint64_t *)&v408, v237, &v394, (uint64_t)&v419);
      *(_QWORD *)&v394 = &off_24C409A28;
      sub_20B0513C4((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B051BBC((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v241 = v407;
      if (v407)
      {
        v242 = (unint64_t *)&v407->__shared_owners_;
        do
          v243 = __ldaxr(v242);
        while (__stlxr(v243 - 1, v242));
        if (!v243)
        {
          ((void (*)(std::__shared_weak_count *))v241->__on_zero_shared)(v241);
          std::__shared_weak_count::__release_weak(v241);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v244 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v244);
      while (__stlxr(v236 - 1, v244));
      goto LABEL_647;
    case 32:
      sub_20B0284A4(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v245 = a2[1];
      v246 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C409E20;
      if (*((_DWORD *)v245 + 1))
        v247 = *(_DWORD *)v245 == 0;
      else
        v247 = 1;
      v248 = (v246 << 30) & 0x3FFFFFFF00000000;
      if (v247)
        v248 = 0;
      *(_QWORD *)&v394 = v248 | (4 * (*(_DWORD *)v245 != 0));
      sub_20B051EA4((uint64_t *)&v408, v245, &v394, (uint64_t)&v419);
      *(_QWORD *)&v394 = &off_24C409CA0;
      sub_20B052380((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B052A44((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v249 = v407;
      if (v407)
      {
        v250 = (unint64_t *)&v407->__shared_owners_;
        do
          v251 = __ldaxr(v250);
        while (__stlxr(v251 - 1, v250));
        if (!v251)
        {
          ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
          std::__shared_weak_count::__release_weak(v249);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v252 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v252);
      while (__stlxr(v236 - 1, v252));
      goto LABEL_647;
    case 33:
      sub_20B028F58((unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v370 = a2[1];
      v371 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C40A098;
      if (*((_DWORD *)v370 + 1))
        v372 = *(_DWORD *)v370 == 0;
      else
        v372 = 1;
      v373 = v371 << 32;
      if (v372)
        v373 = 0;
      *(_QWORD *)&v394 = v373 | (4 * (*(_DWORD *)v370 != 0));
      sub_20B052D2C((uint64_t *)&v408, v370, &v394, (uint64_t)&v419);
      *(_QWORD *)&v394 = &off_24C409F18;
      sub_20B053200((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B0538AC((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v374 = v407;
      if (v407)
      {
        v375 = (unint64_t *)&v407->__shared_owners_;
        do
          v376 = __ldaxr(v375);
        while (__stlxr(v376 - 1, v375));
        if (!v376)
        {
          ((void (*)(std::__shared_weak_count *))v374->__on_zero_shared)(v374);
          std::__shared_weak_count::__release_weak(v374);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v377 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v377);
      while (__stlxr(v236 - 1, v377));
      goto LABEL_647;
    case 34:
      sub_20B02988C(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v253 = a2[1];
      v254 = **a2;
      v255 = *(unsigned int *)a2[2];
      v418 = &off_24C40A310;
      v256 = *(_DWORD *)v253;
      if (*((_DWORD *)v253 + 1))
        v257 = v256 == 0;
      else
        v257 = 1;
      v258 = (v255 << 31) & 0x7FFFFFFF00000000;
      if (v257)
        v258 = 0;
      sub_20B053B90((_BOOL8)&v419, v254, v253, v258 | (4 * (v256 != 0)));
      *(_QWORD *)&v394 = &off_24C40A190;
      sub_20B053EF4((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B0545B8((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v259 = v407;
      if (v407)
      {
        v260 = (unint64_t *)&v407->__shared_owners_;
        do
          v261 = __ldaxr(v260);
        while (__stlxr(v261 - 1, v260));
        if (!v261)
        {
          ((void (*)(std::__shared_weak_count *))v259->__on_zero_shared)(v259);
          std::__shared_weak_count::__release_weak(v259);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v262 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v262);
      while (__stlxr(v236 - 1, v262));
      goto LABEL_647;
    case 35:
      sub_20B02A33C(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v263 = a2[1];
      v264 = **a2;
      v265 = *(unsigned int *)a2[2];
      v418 = &off_24C40A588;
      v266 = *(_DWORD *)v263;
      if (*((_DWORD *)v263 + 1))
        v267 = v266 == 0;
      else
        v267 = 1;
      v268 = (v265 << 31) & 0x7FFFFFFF00000000;
      if (v267)
        v268 = 0;
      sub_20B0548A0((_BOOL8)&v419, v264, v263, v268 | (4 * (v266 != 0)));
      *(_QWORD *)&v394 = &off_24C40A408;
      sub_20B054C04((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B0553FC((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v269 = v407;
      if (v407)
      {
        v270 = (unint64_t *)&v407->__shared_owners_;
        do
          v271 = __ldaxr(v270);
        while (__stlxr(v271 - 1, v270));
        if (!v271)
        {
          ((void (*)(std::__shared_weak_count *))v269->__on_zero_shared)(v269);
          std::__shared_weak_count::__release_weak(v269);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v272 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v272);
      while (__stlxr(v236 - 1, v272));
      goto LABEL_647;
    case 36:
      sub_20B02ADEC(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v273 = a2[1];
      v274 = **a2;
      v275 = *(unsigned int *)a2[2];
      v418 = &off_24C40A800;
      v276 = *(_DWORD *)v273;
      if (*((_DWORD *)v273 + 1))
        v277 = v276 == 0;
      else
        v277 = 1;
      v278 = (v275 << 30) & 0x3FFFFFFF00000000;
      if (v277)
        v278 = 0;
      sub_20B0556E4((_BOOL8)&v419, v274, v273, v278 | (4 * (v276 != 0)));
      *(_QWORD *)&v394 = &off_24C40A680;
      sub_20B055A48((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B05610C((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v279 = v407;
      if (v407)
      {
        v280 = (unint64_t *)&v407->__shared_owners_;
        do
          v281 = __ldaxr(v280);
        while (__stlxr(v281 - 1, v280));
        if (!v281)
        {
          ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
          std::__shared_weak_count::__release_weak(v279);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v282 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v282);
      while (__stlxr(v236 - 1, v282));
      goto LABEL_647;
    case 37:
      sub_20B02B8A0((unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v378 = a2[1];
      v379 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C40AA78;
      if (*((_DWORD *)v378 + 1))
        v380 = *(_DWORD *)v378 == 0;
      else
        v380 = 1;
      v381 = v379 << 32;
      if (v380)
        v381 = 0;
      *(_QWORD *)&v394 = v381 | (4 * (*(_DWORD *)v378 != 0));
      sub_20B0563F4((uint64_t *)&v408, v378, &v394, (uint64_t)&v419);
      *(_QWORD *)&v394 = &off_24C40A8F8;
      sub_20B0568C8((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B056F74((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v382 = v407;
      if (v407)
      {
        v383 = (unint64_t *)&v407->__shared_owners_;
        do
          v384 = __ldaxr(v383);
        while (__stlxr(v384 - 1, v383));
        if (!v384)
        {
          ((void (*)(std::__shared_weak_count *))v382->__on_zero_shared)(v382);
          std::__shared_weak_count::__release_weak(v382);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v385 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v385);
      while (__stlxr(v236 - 1, v385));
      goto LABEL_647;
    case 38:
      sub_20B02C1D4(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v386 = a2[1];
      v387 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C40ACF0;
      if (*((_DWORD *)v386 + 1))
        v388 = *(_DWORD *)v386 == 0;
      else
        v388 = 1;
      v389 = (v387 << 31) & 0x7FFFFFFF00000000;
      if (v388)
        v389 = 0;
      *(_QWORD *)&v394 = v389 | (4 * (*(_DWORD *)v386 != 0));
      sub_20B057258((uint64_t *)&v408, v386, &v394, (uint64_t)&v419);
      *(_QWORD *)&v394 = &off_24C40AB70;
      sub_20B057734((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B057DF8((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v390 = v407;
      if (v407)
      {
        v391 = (unint64_t *)&v407->__shared_owners_;
        do
          v392 = __ldaxr(v391);
        while (__stlxr(v392 - 1, v391));
        if (!v392)
        {
          ((void (*)(std::__shared_weak_count *))v390->__on_zero_shared)(v390);
          std::__shared_weak_count::__release_weak(v390);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v393 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v393);
      while (__stlxr(v236 - 1, v393));
      goto LABEL_647;
    case 39:
      sub_20B02CC84(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (!v431)
        goto LABEL_874;
      v283 = a2[1];
      v284 = *(unsigned int *)a2[2];
      *(_QWORD *)&v408 = **a2;
      v418 = &off_24C40AF68;
      if (*((_DWORD *)v283 + 1))
        v285 = *(_DWORD *)v283 == 0;
      else
        v285 = 1;
      v286 = (v284 << 31) & 0x7FFFFFFF00000000;
      if (v285)
        v286 = 0;
      *(_QWORD *)&v394 = v286 | (4 * (*(_DWORD *)v283 != 0));
      sub_20B0580E0((uint64_t *)&v408, v283, &v394, (uint64_t)&v419);
      *(_QWORD *)&v394 = &off_24C40ADE8;
      sub_20B0585BC((uint64_t)&v418, (uint64_t)&v394 + 8);
      v405 = &off_24C3F2D20;
      sub_20B058DB4((uint64_t)&v406, (uint64_t)&v394);
      sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
      sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
      sub_20B008430((uint64_t)&v408);
      v405 = &off_24C3F2D20;
      v287 = v407;
      if (v407)
      {
        v288 = (unint64_t *)&v407->__shared_owners_;
        do
          v289 = __ldaxr(v288);
        while (__stlxr(v289 - 1, v288));
        if (!v289)
        {
          ((void (*)(std::__shared_weak_count *))v287->__on_zero_shared)(v287);
          std::__shared_weak_count::__release_weak(v287);
        }
      }
      sub_20AEC147C((uint64_t)&v394 + 8);
      v22 = v420;
      if (!v420)
        break;
      v290 = (unint64_t *)&v420->__shared_owners_;
      do
        v236 = __ldaxr(v290);
      while (__stlxr(v236 - 1, v290));
      goto LABEL_647;
    case 40:
      sub_20B02D734(**a2, (unsigned int *)a2[1], *(_DWORD *)a2[2], (uint64_t)&v421);
      if (v431)
      {
        v291 = a2[1];
        v292 = *(unsigned int *)a2[2];
        *(_QWORD *)&v408 = **a2;
        v418 = &off_24C40B1E0;
        if (*((_DWORD *)v291 + 1))
          v293 = *(_DWORD *)v291 == 0;
        else
          v293 = 1;
        v294 = (v292 << 30) & 0x3FFFFFFF00000000;
        if (v293)
          v294 = 0;
        *(_QWORD *)&v394 = v294 | (4 * (*(_DWORD *)v291 != 0));
        sub_20B05909C((uint64_t *)&v408, v291, &v394, (uint64_t)&v419);
        *(_QWORD *)&v394 = &off_24C40B060;
        sub_20B059578((uint64_t)&v418, (uint64_t)&v394 + 8);
        v405 = &off_24C3F2D20;
        sub_20B059C3C((uint64_t)&v406, (uint64_t)&v394);
        sub_20B008318((uint64_t)&v408, (uint64_t)&v405);
        sub_20B011258((uint64_t)a2[3], (uint64_t)&v408);
        sub_20B008430((uint64_t)&v408);
        v405 = &off_24C3F2D20;
        v295 = v407;
        if (v407)
        {
          v296 = (unint64_t *)&v407->__shared_owners_;
          do
            v297 = __ldaxr(v296);
          while (__stlxr(v297 - 1, v296));
          if (!v297)
          {
            ((void (*)(std::__shared_weak_count *))v295->__on_zero_shared)(v295);
            std::__shared_weak_count::__release_weak(v295);
          }
        }
        sub_20AEC147C((uint64_t)&v394 + 8);
        v22 = v420;
        if (v420)
        {
          v298 = (unint64_t *)&v420->__shared_owners_;
          do
            v236 = __ldaxr(v298);
          while (__stlxr(v236 - 1, v298));
LABEL_647:
          if (!v236)
          {
LABEL_648:
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
      }
      else
      {
LABEL_874:
        v408 = v421;
        sub_20AECEBD0(v409, &v422);
        sub_20B009CA0((uint64_t)a2[3], &v408);
        if (v417)
        {
          if (v416)
          {
            if (v415 < 0)
              operator delete(__p);
            if (v413 < 0)
              operator delete(v412);
          }
          if (v411 && v410 < 0)
LABEL_882:
            operator delete(v409[0]);
        }
      }
      break;
    default:
      return;
  }
  if (!v431 && v430)
  {
    if (v429)
    {
      if (v428 < 0)
        operator delete(v427);
      if (v426 < 0)
        operator delete(v425);
    }
    if (v424 && v423 < 0)
      operator delete((void *)v422);
  }
}

void sub_20B034E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,int a56,char a57)
{
  uint64_t v57;

  if (a57)
  {
    if (a55)
    {
      if (a54 < 0)
        operator delete(__p);
      if (a47 < 0)
        operator delete(a42);
    }
    if (a41 && a40 < 0)
      operator delete(a35);
  }
  if (!*(_BYTE *)(v57 - 40) && *(_BYTE *)(v57 - 48))
  {
    if (*(_BYTE *)(v57 - 56))
    {
      if (*(char *)(v57 - 57) < 0)
        operator delete(*(void **)(v57 - 80));
      if (*(char *)(v57 - 89) < 0)
        operator delete(*(void **)(v57 - 112));
    }
    if (*(_BYTE *)(v57 - 120))
    {
      if (*(char *)(v57 - 121) < 0)
      {
        operator delete(*(void **)(v57 - 144));
        _Unwind_Resume(a1);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B036E30(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B036E98(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B036F00(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B037118(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B036FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B037008(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B037070()
{
  return 1;
}

uint64_t sub_20B037078(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B037080@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B037094(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B037118(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_20B037224(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B037268(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0372D0()
{
  return 1;
}

uint64_t sub_20B0372D8(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20B0372E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20B0372F4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B037370(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  size_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v30, v4);
    v13 = v30;
    if (v30)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v30;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v30 = 0;
      v17 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v30 = 0;
      v17 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v31, v13, 1);
    v21 = v31;
    v22 = *(_QWORD *)(v31 + 16);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v31;
    *(_QWORD *)(a2 + 40) = v22;
    v31 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a2 + 32);
    *(_WORD *)(a2 + 72) = v17;
    if (v13)
    {
      v23 = (unint64_t *)&v14->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v25 = v30;
    v30 = 0;
    if (v25)
      (*((void (**)(std::__shared_weak_count_vtbl *))v25->~__shared_weak_count + 1))(v25);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 48))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B037614(v19, (uint64_t *)a2);
    }
    else
    {
      v26 = *(std::__shared_weak_count **)(a1 + 16);
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      __break(1u);
    }
  }
}

void sub_20B0375D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

size_t *sub_20B037614@<X0>(size_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int16 v11;
  unint64_t v12;
  size_t *result;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  size_t v18;
  _OWORD v19[3];
  uint64_t v20;
  __int128 v21;
  uint64_t (**v22)();

  v16 = *(_QWORD *)(a1 + 8);
  v22 = &off_24C403FD8;
  sub_20B4B2BA0(&v16, (uint64_t)&v18);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCC50;
  *(_OWORD *)(v4 + 8) = v19[0];
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v19 + 12);
  *(_OWORD *)(v4 + 40) = v19[2];
  *(_QWORD *)(v4 + 56) = v20;
  *(_OWORD *)(v4 + 64) = v21;
  v17 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C405180;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v17 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(size_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v18, v4, 1);
  v8 = *(_QWORD *)(v18 + 16);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)v18;
  a2[5] = v8;
  v18 = 0;
  MEMORY[0x20BD3583C]();
  a2[6] = a2[3];
  *(_OWORD *)(a2 + 7) = *((_OWORD *)a2 + 2);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v10 = v9;
  if ((v9 & 0xFFFFFF) <= 0x10000)
    v10 = 0;
  v11 = v9 & 0xFF00;
  if ((v9 & 0xFF0000) == 0)
    v11 = 0;
  *((_WORD *)a2 + 36) = v11 & 0xFF00 | v10;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v18 = a1;
  *(_QWORD *)&v19[0] = a2 + 3;
  result = sub_20AFC3DF8(&v18);
  v14 = v17;
  if (v17)
  {
    v15 = *(void **)(v17 + 48);
    if (v15)
      free(v15);
    *(_QWORD *)(v14 + 48) = 0;
    return (size_t *)MEMORY[0x20BD3583C](v14, 0x1091C406A8758A4);
  }
  return result;
}

void sub_20B03780C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B037828(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B037888((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B03785C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B037870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20)
    free(a20);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B037888(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 48);
    if (v3)
      free(v3);
    *(_QWORD *)(v2 + 48) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C406A8758A4);
  }
  return a1;
}

void sub_20B0378E0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B037904(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 48);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 48) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B037954(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0379C4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 1;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B037B84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B037BD8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B037C40(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B037CA8(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B037EC4(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B037D9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B037DB0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B037E18()
{
  return 2;
}

uint64_t sub_20B037E20(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B037E28@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B037E40(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B037EC4(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_20B037FD0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B038014(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03807C()
{
  return 2;
}

uint64_t sub_20B038084(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20B03808C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20B0380A4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B038120(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t *v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v30, v4);
    v13 = v30;
    if (v30)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v30;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v30 = 0;
      v17 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v30 = 0;
      v17 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v31, v13, 2);
    v21 = v31;
    v22 = *(_QWORD *)(v31 + 16);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v31;
    *(_QWORD *)(a2 + 40) = v22;
    v31 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a2 + 32);
    *(_WORD *)(a2 + 72) = v17;
    if (v13)
    {
      v23 = (unint64_t *)&v14->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v25 = v30;
    v30 = 0;
    if (v25)
      (*((void (**)(std::__shared_weak_count_vtbl *))v25->~__shared_weak_count + 1))(v25);
  }
  else
  {
    v19 = (uint64_t *)(a1 + 24);
    if (*(_BYTE *)(a1 + 48))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B0383C4(v19, (uint64_t *)a2);
    }
    else
    {
      v26 = *(std::__shared_weak_count **)(a1 + 16);
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      __break(1u);
    }
  }
}

void sub_20B038388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B0383C4@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int16 v11;
  unint64_t v12;
  uint64_t *result;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[3];
  uint64_t v20;
  __int128 v21;
  uint64_t (**v22)();

  v16 = a1[1];
  v22 = &off_24C4053C0;
  sub_20B4B2DC0(&v16, (uint64_t)&v18);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCCD0;
  *(_OWORD *)(v4 + 8) = v19[0];
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v19 + 12);
  *(_OWORD *)(v4 + 40) = v19[2];
  *(_QWORD *)(v4 + 56) = v20;
  *(_OWORD *)(v4 + 64) = v21;
  v17 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4053F8;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v17 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v18, v4, 2);
  v8 = *(_QWORD *)(v18 + 16);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)v18;
  a2[5] = v8;
  v18 = 0;
  MEMORY[0x20BD3583C]();
  a2[6] = a2[3];
  *(_OWORD *)(a2 + 7) = *((_OWORD *)a2 + 2);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v10 = v9;
  if ((v9 & 0xFFFFFF) <= 0x10000)
    v10 = 0;
  v11 = v9 & 0xFF00;
  if ((v9 & 0xFF0000) == 0)
    v11 = 0;
  *((_WORD *)a2 + 36) = v11 & 0xFF00 | v10;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  result = sub_20AFC48E4(a1, (uint64_t)(a2 + 3));
  v14 = v17;
  if (v17)
  {
    v15 = *(void **)(v17 + 48);
    if (v15)
      free(v15);
    *(_QWORD *)(v14 + 48) = 0;
    return (uint64_t *)MEMORY[0x20BD3583C](v14, 0x1091C406A8758A4);
  }
  return result;
}

void sub_20B0385BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0385D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B037888((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B03860C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B038620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20)
    free(a20);
  _Unwind_Resume(exception_object);
}

void sub_20B03863C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B038654(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B038678(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 48);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 48) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B0386C8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B038738(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 2;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B0388FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B038950(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0389B8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B038A20(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B038C3C(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B038B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B038B28(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B038B90()
{
  return 3;
}

uint64_t sub_20B038B98(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B038BA0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B038BB8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B038C3C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_20B038D48(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B038D8C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B038DF4()
{
  return 3;
}

uint64_t sub_20B038DFC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20B038E04@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20B038E1C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B038E98(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v30, v4);
    v13 = v30;
    if (v30)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v30;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v30 = 0;
      v17 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v30 = 0;
      v17 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v31, v13, 3);
    v21 = v31;
    v22 = *(_QWORD *)(v31 + 16);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v31;
    *(_QWORD *)(a2 + 40) = v22;
    v31 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a2 + 32);
    *(_WORD *)(a2 + 72) = v17;
    if (v13)
    {
      v23 = (unint64_t *)&v14->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v25 = v30;
    v30 = 0;
    if (v25)
      (*((void (**)(std::__shared_weak_count_vtbl *))v25->~__shared_weak_count + 1))(v25);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 48))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B03913C(v19, (uint64_t *)a2);
    }
    else
    {
      v26 = *(std::__shared_weak_count **)(a1 + 16);
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      __break(1u);
    }
  }
}

void sub_20B039100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B03913C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t *v14;
  unint64_t v15;
  __n128 v16;
  uint64_t v17;
  void *v18;
  BOOL v19;
  int v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  uint64_t v23[2];

  v23[0] = *(_QWORD *)(a1 + 8);
  sub_20B0393D8(v23, &v22);
  v4 = v22;
  if (v22)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v22;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C405638;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
    v21 = v5;
    v22 = 0;
    *a2 = v4;
    a2[1] = (uint64_t)v5;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
  }
  else
  {
    v21 = 0;
    v22 = 0;
    *a2 = 0;
    a2[1] = 0;
  }
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(v23, v4, 3);
  v9 = v23[0];
  v10 = *(_QWORD *)(v23[0] + 16);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)v23[0];
  a2[5] = v10;
  v23[0] = 0;
  MEMORY[0x20BD3583C](v9);
  a2[6] = a2[3];
  *(_OWORD *)(a2 + 7) = *((_OWORD *)a2 + 2);
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 36) = v13 & 0xFF00 | v12;
  if (v21)
  {
    v14 = (unint64_t *)&v21->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
      std::__shared_weak_count::__release_weak(v21);
    }
  }
  v23[0] = a1;
  v23[1] = (uint64_t)(a2 + 3);
  v16.n128_u64[0] = sub_20AFE4B3C(v23);
  v17 = v22;
  v22 = 0;
  if (v17)
  {
    v18 = *(void **)(v17 + 48);
    if (v18)
    {
      v19 = !*(_DWORD *)(v17 + 68) || *(_DWORD *)(v17 + 64) == 0;
      v20 = v19 ? 0 : *(_DWORD *)(v17 + 68);
      if (v20 * (*(_QWORD *)(v17 + 72) >> 33) != -1)
        goto LABEL_26;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v18 = *(void **)(v17 + 48);
      if (v18)
LABEL_26:
        free(v18);
    }
    *(_QWORD *)(v17 + 48) = 0;
    MEMORY[0x20BD3583C](v17, 0x1091C406A8758A4, v16);
  }
}

void sub_20B039360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B039518((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B039374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B039518((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B039390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B039518(&a12);
  _Unwind_Resume(a1);
}

void sub_20B0393B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B039518(&a12);
  _Unwind_Resume(a1);
}

double sub_20B0393D8@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  BOOL v3;
  unint64_t v4;
  unint64_t v5;
  _BOOL8 v6;
  BOOL v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  double result;
  __int128 v14;
  __int128 v15;
  _BYTE v16[28];
  unint64_t v17[3];
  __int128 v18;
  unint64_t v19;
  uint64_t v20;

  if (a1[1])
    v3 = *a1 == 0;
  else
    v3 = 1;
  v4 = *(_QWORD *)a1;
  if (v3)
    v4 = 0;
  v5 = v4 << 32;
  if (!HIDWORD(v4))
    v5 = 0;
  v6 = v4 != 0;
  if ((_DWORD)v4)
    v7 = HIDWORD(v4) == 0;
  else
    v7 = 1;
  *(_QWORD *)v16 = v4;
  *(_QWORD *)&v16[8] = v5 | v6;
  v16[16] = 0;
  v16[24] = 0;
  if (v7)
    v4 = 0;
  v19 = v4;
  v20 = v5 | v6;
  if (((v5 >> 31) & ((v5 >> 31) - 1)) != 0)
    v8 = 2;
  else
    v8 = v5 >> 31;
  sub_20B4C76D0(v17, &v19, (unint64_t *)&v20, 1, 0, 0, v8);
  v14 = *(_OWORD *)v16;
  HIDWORD(v14) = *(_DWORD *)&v16[12];
  v9 = v17[0];
  v10 = v17[1];
  v11 = v17[2];
  v15 = v18;
  v12 = operator new();
  *(_QWORD *)v12 = &off_24C3FCD50;
  *(_OWORD *)(v12 + 8) = v14;
  *(_OWORD *)(v12 + 20) = *(_OWORD *)&v16[12];
  *(_QWORD *)(v12 + 40) = v9;
  *(_QWORD *)(v12 + 48) = v10;
  *(_QWORD *)(v12 + 56) = v11;
  result = *(double *)&v15;
  *(_OWORD *)(v12 + 64) = v15;
  *a2 = v12;
  return result;
}

void sub_20B039504(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B49F888((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B039518(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  int v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 48);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 68) || *(_DWORD *)(v2 + 64) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v2 + 68);
      if (v5 * (*(_QWORD *)(v2 + 72) >> 33) != -1)
        goto LABEL_12;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v3 = *(void **)(v2 + 48);
      if (v3)
LABEL_12:
        free(v3);
    }
    *(_QWORD *)(v2 + 48) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C406A8758A4);
  }
  return a1;
}

void sub_20B0395DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B039600(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  int v4;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 48);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 68) || *(_DWORD *)(v1 + 64) == 0;
      v4 = v3 ? 0 : *(_DWORD *)(v1 + 68);
      if (v4 * (*(_QWORD *)(v1 + 72) >> 33) != -1)
        goto LABEL_12;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v2 = *(void **)(v1 + 48);
      if (v2)
LABEL_12:
        free(v2);
    }
    *(_QWORD *)(v1 + 48) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B0396BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE3EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE3EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE3EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE3EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B03972C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 3;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B0398F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B039944(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0399AC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B039A14(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X8>)
{
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;

  v13 = 0;
  v14 = 0;
  if (a2[1])
    v5 = *a2 == 0;
  else
    v5 = 1;
  v6 = *(_QWORD *)a2;
  if (v5)
    v6 = 0;
  v7 = *a3;
  *(_QWORD *)&v11 = *a1;
  *((_QWORD *)&v11 + 1) = v6;
  v12 = v7;
  if (HIDWORD(v6) * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B039C30(a4, &v13, &v11);
  v8 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B039B08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B039B1C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B039B84()
{
  return 4;
}

uint64_t sub_20B039B8C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B039B94@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B039BAC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B039C30(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  _WORD *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  unsigned __int8 v14;
  __int16 v15;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v9 = (_WORD *)(result + 40);
      do
        v10 = __ldxr(p_shared_owners);
      while (__stxr(v10 + 1, p_shared_owners));
      do
        v11 = __ldaxr(p_shared_owners);
      while (__stlxr(v11 - 1, p_shared_owners));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 40) = 0;
    *(_BYTE *)(result + 41) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v12 = *a3;
  *(_QWORD *)(result + 32) = *((_QWORD *)a3 + 2);
  *(_OWORD *)(result + 16) = v12;
  if (!v4)
    goto LABEL_17;
  v9 = (_WORD *)(result + 40);
LABEL_12:
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v14 = v13;
  if ((v13 & 0xFFFFFF) <= 0x10000)
    v14 = 0;
  v15 = v13 & 0xFF00;
  if ((v13 & 0xFF0000) == 0)
    v15 = 0;
  *v9 = v15 & 0xFF00 | v14;
  return v3;
}

void sub_20B039D3C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B039D80(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B039DE8()
{
  return 4;
}

uint64_t sub_20B039DF0(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20B039DF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20B039E10(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B039E8C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count_vtbl *v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  std::__shared_weak_count_vtbl *v30;
  uint64_t v31;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v30, v4);
    v13 = v30;
    if (v30)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v30;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v30 = 0;
      v17 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v30 = 0;
      v17 = *(_WORD *)(a1 + 48);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v31, v13, 4);
    v21 = v31;
    v22 = *(_QWORD *)(v31 + 16);
    *(_OWORD *)(a2 + 24) = *(_OWORD *)v31;
    *(_QWORD *)(a2 + 40) = v22;
    v31 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 48) = *(_QWORD *)(a2 + 24);
    *(_OWORD *)(a2 + 56) = *(_OWORD *)(a2 + 32);
    *(_WORD *)(a2 + 72) = v17;
    if (v13)
    {
      v23 = (unint64_t *)&v14->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v25 = v30;
    v30 = 0;
    if (v25)
      (*((void (**)(std::__shared_weak_count_vtbl *))v25->~__shared_weak_count + 1))(v25);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 48))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B03A130(v19, (uint64_t *)a2);
    }
    else
    {
      v26 = *(std::__shared_weak_count **)(a1 + 16);
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
      __break(1u);
    }
  }
}

void sub_20B03A0F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B03A130(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 v10;
  __int16 v11;
  unint64_t v12;
  __n128 v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _OWORD v19[3];
  uint64_t v20;
  __int128 v21;
  uint64_t (**v22)();

  v16 = *(_QWORD *)(a1 + 8);
  v22 = &off_24C405878;
  sub_20B4B2FEC(&v16, (uint64_t)&v18);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCDD0;
  *(_OWORD *)(v4 + 8) = v19[0];
  *(_OWORD *)(v4 + 20) = *(_OWORD *)((char *)v19 + 12);
  *(_OWORD *)(v4 + 40) = v19[2];
  *(_QWORD *)(v4 + 56) = v20;
  *(_OWORD *)(v4 + 64) = v21;
  v17 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4058B0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v17 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v18, v4, 4);
  v8 = *(_QWORD *)(v18 + 16);
  *(_OWORD *)(a2 + 3) = *(_OWORD *)v18;
  a2[5] = v8;
  v18 = 0;
  MEMORY[0x20BD3583C]();
  a2[6] = a2[3];
  *(_OWORD *)(a2 + 7) = *((_OWORD *)a2 + 2);
  v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v10 = v9;
  if ((v9 & 0xFFFFFF) <= 0x10000)
    v10 = 0;
  v11 = v9 & 0xFF00;
  if ((v9 & 0xFF0000) == 0)
    v11 = 0;
  *((_WORD *)a2 + 36) = v11 & 0xFF00 | v10;
  do
    v12 = __ldaxr(p_shared_owners);
  while (__stlxr(v12 - 1, p_shared_owners));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v13.n128_f32[0] = sub_20AFC5D04(a1, (uint64_t)(a2 + 3));
  v14 = v17;
  if (v17)
  {
    v15 = *(void **)(v17 + 48);
    if (v15)
      free(v15);
    *(_QWORD *)(v14 + 48) = 0;
    MEMORY[0x20BD3583C](v14, 0x1091C406A8758A4, v13);
  }
}

void sub_20B03A328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03A344(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B037888((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B03A378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B037888((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03A38C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20)
{
  if (a20)
    free(a20);
  _Unwind_Resume(exception_object);
}

void sub_20B03A3A8()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B03A3C0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03A3E4(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 48);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 48) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B03A434(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B03A4A4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 4;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B03A668(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B03A6BC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B03A724(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B03A78C(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B03A8BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B03A8D0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03A938()
{
  return 5;
}

uint64_t sub_20B03A940(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B03A948@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B03A95C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B03A9E0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03AA48()
{
  return 5;
}

uint64_t sub_20B03AA50(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B03AA58@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B03AA6C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B03AAE8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  _OWORD *v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 5);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = (_OWORD *)(a1 + 24);
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B03AD98(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B03AD5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

size_t *sub_20B03AD98@<X0>(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  size_t *result;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  uint64_t (**v29)();

  v18 = *(_QWORD *)((char *)a1 + 12);
  v29 = &off_24C405AF0;
  sub_20B4B3430(&v18, (uint64_t)&v20);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCE50;
  *(_OWORD *)(v4 + 8) = v21;
  *(_OWORD *)(v4 + 24) = v22;
  *(_OWORD *)(v4 + 40) = v23;
  *(_QWORD *)(v4 + 56) = v24;
  *(_OWORD *)(v4 + 64) = v25;
  *(_QWORD *)(v4 + 80) = v26;
  *(_QWORD *)(v4 + 104) = v28;
  *(_OWORD *)(v4 + 88) = v27;
  v19 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C405B28;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v19 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v20, v4, 5);
  v9 = v20[1];
  v8 = v20[2];
  *(_OWORD *)(a2 + 3) = *v20;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v20 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v20 = a1;
  *(_QWORD *)&v21 = a2 + 3;
  result = sub_20AFE5C6C((size_t *)&v20);
  v16 = v19;
  if (v19)
  {
    v17 = *(void **)(v19 + 72);
    if (v17)
      free(v17);
    *(_QWORD *)(v16 + 72) = 0;
    return (size_t *)MEMORY[0x20BD3583C](v16, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_20B03AFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03AFD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B03B030((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B03B004(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03B018(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23)
    free(a23);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B03B030(uint64_t *a1)
{
  uint64_t v2;
  void *v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
      free(v3);
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_20B03B088()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B03B0A0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03B0C4(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B03B114(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE5EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE5EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE5EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE5EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B03B184(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 5;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B03B344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B03B398(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B03B400(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B03B468(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B03B598(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B03B5AC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03B614()
{
  return 6;
}

uint64_t sub_20B03B61C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B03B624@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B03B63C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B03B6C0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03B728()
{
  return 6;
}

uint64_t sub_20B03B730(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B03B738@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B03B750(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B03B7CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 6);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B03BA7C(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B03BA40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B03BA7C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t *result;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v23 = *(_QWORD *)(a1 + 12);
  sub_20B4C9914((uint64_t)v31, &v23);
  v27 = v31[0];
  v28 = v31[1];
  v29 = v31[2];
  v4 = v33;
  v30 = v32;
  v5 = v34;
  v6 = v35;
  v25 = v36;
  v26 = v37;
  v7 = operator new();
  v8 = v28;
  *(_OWORD *)(v7 + 8) = v27;
  *(_QWORD *)v7 = &off_24C3FCED0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v29;
  *(_QWORD *)(v7 + 56) = v30;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v25;
  *(_QWORD *)(v7 + 104) = v26;
  v24 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C405DA0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v24 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v31, v7, 6);
  v12 = *(_QWORD *)&v31[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v31[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v31[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v31[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v31[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(_QWORD *)&v31[0] = a1;
  *((_QWORD *)&v31[0] + 1) = a2 + 3;
  result = sub_20AFE6878((uint64_t *)v31);
  v21 = v24;
  if (v24)
  {
    v22 = *(void **)(v24 + 72);
    if (v22)
      free(v22);
    *(_QWORD *)(v21 + 72) = 0;
    return (uint64_t *)MEMORY[0x20BD3583C](v21, 0x1091C40A44A61E0);
  }
  return result;
}

void sub_20B03BCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03BCCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B03BD00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03BD14(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B03BD30()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B03BD48(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03BD6C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B03BDBC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE6EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B03BE2C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 6;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B03BFF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B03C044(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B03C0AC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B03C114(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B03C244(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B03C258(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03C2C0()
{
  return 7;
}

uint64_t sub_20B03C2C8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B03C2D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B03C2E8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B03C36C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03C3D4()
{
  return 7;
}

uint64_t sub_20B03C3DC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B03C3E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B03C3FC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B03C478(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  _OWORD *v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 7);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = (_OWORD *)(a1 + 24);
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B03C728(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B03C6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B03C728(_OWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();

  v21 = *(_QWORD *)((char *)a1 + 12);
  v32 = &off_24C405FE0;
  sub_20B4B3C0C(&v21, (uint64_t)&v23);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FCF50;
  *(_OWORD *)(v4 + 8) = v24;
  *(_OWORD *)(v4 + 24) = v25;
  *(_OWORD *)(v4 + 40) = v26;
  *(_QWORD *)(v4 + 56) = v27;
  *(_OWORD *)(v4 + 64) = v28;
  *(_QWORD *)(v4 + 80) = v29;
  *(_QWORD *)(v4 + 104) = v31;
  *(_OWORD *)(v4 + 88) = v30;
  v22 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406018;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v22 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v23, v4, 7);
  v9 = v23[1];
  v8 = v23[2];
  *(_OWORD *)(a2 + 3) = *v23;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v23 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v23 = a1;
  *(_QWORD *)&v24 = a2 + 3;
  v15.n128_u64[0] = sub_20AFE741C((uint64_t *)&v23);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    v17 = *(void **)(v16 + 72);
    if (v17)
    {
      v18 = !*(_DWORD *)(v16 + 96) || *(_DWORD *)(v16 + 92) == 0;
      v19 = v18 || *(_DWORD *)(v16 + 88) == 0;
      v20 = v19 ? 0 : *(_DWORD *)(v16 + 96);
      if (v20 * (*(_DWORD *)(v16 + 108) >> 1) != -1)
        goto LABEL_25;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v17 = *(void **)(v16 + 72);
      if (v17)
LABEL_25:
        free(v17);
    }
    *(_QWORD *)(v16 + 72) = 0;
    MEMORY[0x20BD3583C](v16, 0x1091C40A44A61E0, v15);
  }
}

void sub_20B03C9BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B03CA34((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03C9D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B03CA34((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B03CA0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B03CA34((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03CA20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B4A1250((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B03CA34(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_20B03CB00()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B03CB18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03CB3C(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B03CC00(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE7EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE7EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE7EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE7EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B03CC70(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 7;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B03CE34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B03CE88(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B03CEF0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B03CF58(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 2;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B03D088(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B03D09C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03D104()
{
  return 8;
}

uint64_t sub_20B03D10C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B03D114@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B03D12C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B03D1B0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03D218()
{
  return 8;
}

uint64_t sub_20B03D220(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B03D228@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B03D240(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B03D2BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 8);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B03D56C(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B03D530(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B03D56C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  __n128 v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  __int128 v27;
  __int128 v28;
  __int128 v29;
  uint64_t v30;
  _OWORD v31[3];
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  uint64_t v37;

  v23 = *(_QWORD *)(a1 + 12);
  sub_20B4C9AD0((uint64_t)v31, &v23);
  v27 = v31[0];
  v28 = v31[1];
  v29 = v31[2];
  v4 = v33;
  v30 = v32;
  v5 = v34;
  v6 = v35;
  v25 = v36;
  v26 = v37;
  v7 = operator new();
  v8 = v28;
  *(_OWORD *)(v7 + 8) = v27;
  *(_QWORD *)v7 = &off_24C3FCFD0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v29;
  *(_QWORD *)(v7 + 56) = v30;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v25;
  *(_QWORD *)(v7 + 104) = v26;
  v24 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406290;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v24 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v31, v7, 8);
  v12 = *(_QWORD *)&v31[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v31[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v31[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v31[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v31[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  *(_QWORD *)&v31[0] = a1;
  *((_QWORD *)&v31[0] + 1) = a2 + 3;
  v20.n128_f32[0] = sub_20AFE84BC((uint64_t *)v31);
  v21 = v24;
  if (v24)
  {
    v22 = *(void **)(v24 + 72);
    if (v22)
      free(v22);
    *(_QWORD *)(v21 + 72) = 0;
    MEMORY[0x20BD3583C](v21, 0x1091C40A44A61E0, v20);
  }
}

void sub_20B03D7A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03D7BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B03D7F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03D804(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B03D820()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B03D838(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03D85C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B03D8AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE8EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B03D91C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 8;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B03DAE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B03DB34(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B03DB9C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B03DC04(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B03DD34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B03DD48(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03DDB0()
{
  return 9;
}

uint64_t sub_20B03DDB8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B03DDC0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B03DDD4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B03DE58(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03DEC0()
{
  return 9;
}

uint64_t sub_20B03DEC8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B03DED0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B03DEE4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B03DF60(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 9);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B03E210(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B03E1D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B03E210(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();

  v19 = *(_QWORD *)(a1 + 12);
  v30 = &off_24C4064D0;
  sub_20B4B43E4(&v19, (uint64_t)&v21);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD050;
  *(_OWORD *)(v4 + 8) = v22;
  *(_OWORD *)(v4 + 24) = v23;
  *(_OWORD *)(v4 + 40) = v24;
  *(_QWORD *)(v4 + 56) = v25;
  *(_OWORD *)(v4 + 64) = v26;
  *(_QWORD *)(v4 + 80) = v27;
  *(_QWORD *)(v4 + 104) = v29;
  *(_OWORD *)(v4 + 88) = v28;
  v20 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406508;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v20 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v21, v4, 9);
  v9 = v21[1];
  v8 = v21[2];
  *(_OWORD *)(a2 + 3) = *v21;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v21 = (_OWORD *)a1;
    *(_QWORD *)&v22 = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFE5D88((size_t *)&v21);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v21 = (_OWORD *)a1;
  *(_QWORD *)&v22 = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v19) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    v30 = (uint64_t (**)())&v19;
    sub_20AFE9048((uint64_t)&v30, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v17 = v20;
  if (v20)
  {
    v18 = *(void **)(v20 + 72);
    if (v18)
      free(v18);
    *(_QWORD *)(v17 + 72) = 0;
    MEMORY[0x20BD3583C](v17, 0x1091C40A44A61E0);
  }
}

void sub_20B03E490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03E4AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B03B030((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B03E4E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03E4F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23)
    free(a23);
  _Unwind_Resume(exception_object);
}

void sub_20B03E510()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B03E528(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03E54C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B03E59C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE9EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE9EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE9EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE9EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B03E60C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 9;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B03E7CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B03E820(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B03E888(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B03E8F0(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B03EA20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B03EA34(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03EA9C()
{
  return 10;
}

uint64_t sub_20B03EAA4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B03EAAC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B03EAC4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B03EB48(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03EBB0()
{
  return 10;
}

uint64_t sub_20B03EBB8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B03EBC0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B03EBD8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B03EC54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 10);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B03EF04(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B03EEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B03EF04(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4C9C90((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FD0D0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406780;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 10);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC7BE4((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20B03F318((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B03F19C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03F1B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B03F1EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B03F200(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B03F21C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B03F234(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03F258(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B03F2A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE10EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE10EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE10EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE10EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B03F318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(_WORD **)a2;
    v11 = *(_WORD **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        v11[2] = v10[2];
        return;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
}

void sub_20B03F468(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 10;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B03F62C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B03F680(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B03F6E8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B03F750(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B03F880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B03F894(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03F8FC()
{
  return 11;
}

uint64_t sub_20B03F904(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B03F90C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B03F924(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B03F9A8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B03FA10()
{
  return 11;
}

uint64_t sub_20B03FA18(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B03FA20@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B03FA38(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B03FAB4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 11);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B03FD64(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B03FD28(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B03FD64(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();

  v21 = *(_QWORD *)(a1 + 12);
  v32 = &off_24C4069C0;
  sub_20B4B4BB4(&v21, (uint64_t)&v23);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD150;
  *(_OWORD *)(v4 + 8) = v24;
  *(_OWORD *)(v4 + 24) = v25;
  *(_OWORD *)(v4 + 40) = v26;
  *(_QWORD *)(v4 + 56) = v27;
  *(_OWORD *)(v4 + 64) = v28;
  *(_QWORD *)(v4 + 80) = v29;
  *(_QWORD *)(v4 + 104) = v31;
  *(_OWORD *)(v4 + 88) = v30;
  v22 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4069F8;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v22 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v23, v4, 11);
  v9 = v23[1];
  v8 = v23[2];
  *(_OWORD *)(a2 + 3) = *v23;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v23 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v23 = (_OWORD *)a1;
  *(_QWORD *)&v24 = a2 + 3;
  v15.n128_f64[0] = sub_20AFE98D0(&v23);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    v17 = *(void **)(v16 + 72);
    if (v17)
    {
      v18 = !*(_DWORD *)(v16 + 96) || *(_DWORD *)(v16 + 92) == 0;
      v19 = v18 || *(_DWORD *)(v16 + 88) == 0;
      v20 = v19 ? 0 : *(_DWORD *)(v16 + 96);
      if (v20 * (*(_DWORD *)(v16 + 108) >> 1) != -1)
        goto LABEL_25;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v17 = *(void **)(v16 + 72);
      if (v17)
LABEL_25:
        free(v17);
    }
    *(_QWORD *)(v16 + 72) = 0;
    MEMORY[0x20BD3583C](v16, 0x1091C40A44A61E0, v15);
  }
}

void sub_20B03FFF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B040070((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B040014(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B040070((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B040048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B040070((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04005C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B4A3408((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B040070(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_20B04013C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B040154(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B040178(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B04023C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE11EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE11EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE11EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE11EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0402AC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 11;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B040470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0404C4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B04052C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B040594(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B0406C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0406D8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B040740()
{
  return 12;
}

uint64_t sub_20B040748(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B040750@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B040768(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B0407EC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B040854()
{
  return 12;
}

uint64_t sub_20B04085C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B040864@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B04087C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0408F8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 12);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B040BA8(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B040B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B040BA8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4C9E44((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FD1D0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406C70;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 12);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC9A3C((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20B040FBC((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B040E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B040E5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B040E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B040EA4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B040EC0()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B040ED8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B040EFC(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B040F4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE12EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE12EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE12EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE12EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

float sub_20B040FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  float result;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(float **)a2;
    v11 = *(float **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        result = v10[2];
        v11[2] = result;
        return result;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
  return result;
}

void sub_20B041104(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 12;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B0412C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B04131C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B041384(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B0413EC(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B041668(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B041544(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B041558(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0415C0()
{
  return 13;
}

uint64_t sub_20B0415C8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0415D0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0415E4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B041668(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B041774(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0417B8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B041820()
{
  return 13;
}

uint64_t sub_20B041828(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B041830@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B041844(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0418C0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 13);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B041B70(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B041B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B041B70(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();

  v19 = *(_QWORD *)(a1 + 12);
  v30 = &off_24C406EB0;
  sub_20B4B5384(&v19, (uint64_t)&v21);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD250;
  *(_OWORD *)(v4 + 8) = v22;
  *(_OWORD *)(v4 + 24) = v23;
  *(_OWORD *)(v4 + 40) = v24;
  *(_QWORD *)(v4 + 56) = v25;
  *(_OWORD *)(v4 + 64) = v26;
  *(_QWORD *)(v4 + 80) = v27;
  *(_QWORD *)(v4 + 104) = v29;
  *(_OWORD *)(v4 + 88) = v28;
  v20 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C406EE8;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v20 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v21, v4, 13);
  v9 = v21[1];
  v8 = v21[2];
  *(_OWORD *)(a2 + 3) = *v21;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v21 = (_OWORD *)a1;
    *(_QWORD *)&v22 = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFE5D88((size_t *)&v21);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v21 = (_OWORD *)a1;
  *(_QWORD *)&v22 = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v19) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    v30 = (uint64_t (**)())&v19;
    sub_20AFEA3E0((uint64_t)&v30, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v17 = v20;
  if (v20)
  {
    v18 = *(void **)(v20 + 72);
    if (v18)
      free(v18);
    *(_QWORD *)(v17 + 72) = 0;
    MEMORY[0x20BD3583C](v17, 0x1091C40A44A61E0);
  }
}

void sub_20B041DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B041E0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B03B030((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B041E40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B041E54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23)
    free(a23);
  _Unwind_Resume(exception_object);
}

void sub_20B041E70()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B041E88(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B041EAC(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B041EFC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE13EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE13EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE13EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE13EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B041F6C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 13;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B04212C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B042180(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0421E8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B042250(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B042380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B042394(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0423FC()
{
  return 14;
}

uint64_t sub_20B042404(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B04240C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B042424(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B0424A8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B042510()
{
  return 14;
}

uint64_t sub_20B042518(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B042520@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B042538(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0425B4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 14);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B042864(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B042828(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B042864(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4C9FF8((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FD2D0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C407160;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 14);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC7BE4((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20AFEA8F4((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B042AFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B042B18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B042B4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B042B60(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B042B7C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B042B94(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B042BB8(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B042C08(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE14EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE14EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE14EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE14EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B042C78(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 14;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B042E3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B042E90(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B042EF8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B042F60(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B043090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0430A4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04310C()
{
  return 15;
}

uint64_t sub_20B043114(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B04311C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B043134(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B0431B8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B043220()
{
  return 15;
}

uint64_t sub_20B043228(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B043230@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B043248(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0432C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 15);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B043574(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B043538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B043574(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();

  v21 = *(_QWORD *)(a1 + 12);
  v32 = &off_24C4073A0;
  sub_20B4B5B6C(&v21, (uint64_t)&v23);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD350;
  *(_OWORD *)(v4 + 8) = v24;
  *(_OWORD *)(v4 + 24) = v25;
  *(_OWORD *)(v4 + 40) = v26;
  *(_QWORD *)(v4 + 56) = v27;
  *(_OWORD *)(v4 + 64) = v28;
  *(_QWORD *)(v4 + 80) = v29;
  *(_QWORD *)(v4 + 104) = v31;
  *(_OWORD *)(v4 + 88) = v30;
  v22 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4073D8;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v22 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v23, v4, 15);
  v9 = v23[1];
  v8 = v23[2];
  *(_OWORD *)(a2 + 3) = *v23;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v23 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v23 = (_OWORD *)a1;
  *(_QWORD *)&v24 = a2 + 3;
  v15.n128_f64[0] = sub_20AFEAE58(&v23);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    v17 = *(void **)(v16 + 72);
    if (v17)
    {
      v18 = !*(_DWORD *)(v16 + 96) || *(_DWORD *)(v16 + 92) == 0;
      v19 = v18 || *(_DWORD *)(v16 + 88) == 0;
      v20 = v19 ? 0 : *(_DWORD *)(v16 + 96);
      if (v20 * (*(_DWORD *)(v16 + 108) >> 1) != -1)
        goto LABEL_25;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v17 = *(void **)(v16 + 72);
      if (v17)
LABEL_25:
        free(v17);
    }
    *(_QWORD *)(v16 + 72) = 0;
    MEMORY[0x20BD3583C](v16, 0x1091C40A44A61E0, v15);
  }
}

void sub_20B043808(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B043880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B043824(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B043880((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B043858(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B043880((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04386C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B4A5528((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B043880(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_20B04394C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B043964(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B043988(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B043A4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE15EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE15EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE15EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE15EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B043ABC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 15;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B043C80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B043CD4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B043D3C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B043DA4(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B043ED4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B043EE8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B043F50()
{
  return 16;
}

uint64_t sub_20B043F58(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B043F60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B043F78(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B043FFC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B044064()
{
  return 16;
}

uint64_t sub_20B04406C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B044074@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B04408C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B044108(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 16);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B0443B8(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B04437C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B0443B8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4CA1B4((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FD3D0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C407650;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 16);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC9A3C((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20AFEB5FC((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B044650(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04466C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B0446A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0446B4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B0446D0()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0446E8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04470C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B04475C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE16EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE16EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE16EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE16EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0447CC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 16;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B044990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0449E4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B044A4C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B044AB4(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B044BE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B044BF8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B044C60()
{
  return 17;
}

uint64_t sub_20B044C68(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B044C70@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B044C84(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B044D08(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B044D70()
{
  return 17;
}

uint64_t sub_20B044D78(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B044D80@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B044D94(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B044E10(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 17);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B0450C0(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B045084(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B0450C0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();

  v19 = *(_QWORD *)(a1 + 12);
  v30 = &off_24C407890;
  sub_20B4B6344(&v19, (uint64_t)&v21);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD450;
  *(_OWORD *)(v4 + 8) = v22;
  *(_OWORD *)(v4 + 24) = v23;
  *(_OWORD *)(v4 + 40) = v24;
  *(_QWORD *)(v4 + 56) = v25;
  *(_OWORD *)(v4 + 64) = v26;
  *(_QWORD *)(v4 + 80) = v27;
  *(_QWORD *)(v4 + 104) = v29;
  *(_OWORD *)(v4 + 88) = v28;
  v20 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4078C8;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v20 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v21, v4, 17);
  v9 = v21[1];
  v8 = v21[2];
  *(_OWORD *)(a2 + 3) = *v21;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v21 = (_OWORD *)a1;
    *(_QWORD *)&v22 = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFE5D88((size_t *)&v21);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v21 = (_OWORD *)a1;
  *(_QWORD *)&v22 = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v19) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    v30 = (uint64_t (**)())&v19;
    sub_20AFE9048((uint64_t)&v30, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v17 = v20;
  if (v20)
  {
    v18 = *(void **)(v20 + 72);
    if (v18)
      free(v18);
    *(_QWORD *)(v17 + 72) = 0;
    MEMORY[0x20BD3583C](v17, 0x1091C40A44A61E0);
  }
}

void sub_20B045340(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04535C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B03B030((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B045390(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0453A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23)
    free(a23);
  _Unwind_Resume(exception_object);
}

void sub_20B0453C0()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0453D8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0453FC(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B04544C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE17EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0454BC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 17;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B04567C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0456D0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B045738(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B0457A0(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B0458D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0458E4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04594C()
{
  return 18;
}

uint64_t sub_20B045954(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B04595C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B045974(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B0459F8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B045A60()
{
  return 18;
}

uint64_t sub_20B045A68(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B045A70@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B045A88(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B045B04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 18);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B045DB4(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B045D78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B045DB4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4C9C90((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FD4D0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C407B40;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 18);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC7BE4((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20B03F318((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B04604C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B046068(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B04609C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0460B0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B0460CC()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0460E4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B046108(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B046158(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE18EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE18EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE18EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE18EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0461C8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 18;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B04638C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0463E0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B046448(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B0464B0(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B0465E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0465F4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04665C()
{
  return 19;
}

uint64_t sub_20B046664(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B04666C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B046684(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B046708(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B046770()
{
  return 19;
}

uint64_t sub_20B046778(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B046780@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B046798(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B046814(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 19);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B046AC4(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B046A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B046AC4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();

  v21 = *(_QWORD *)(a1 + 12);
  v32 = &off_24C407D80;
  sub_20B4B6B14(&v21, (uint64_t)&v23);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD550;
  *(_OWORD *)(v4 + 8) = v24;
  *(_OWORD *)(v4 + 24) = v25;
  *(_OWORD *)(v4 + 40) = v26;
  *(_QWORD *)(v4 + 56) = v27;
  *(_OWORD *)(v4 + 64) = v28;
  *(_QWORD *)(v4 + 80) = v29;
  *(_QWORD *)(v4 + 104) = v31;
  *(_OWORD *)(v4 + 88) = v30;
  v22 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C407DB8;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v22 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v23, v4, 19);
  v9 = v23[1];
  v8 = v23[2];
  *(_OWORD *)(a2 + 3) = *v23;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v23 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v23 = (_OWORD *)a1;
  *(_QWORD *)&v24 = a2 + 3;
  v15.n128_f64[0] = sub_20AFE98D0(&v23);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    v17 = *(void **)(v16 + 72);
    if (v17)
    {
      v18 = !*(_DWORD *)(v16 + 96) || *(_DWORD *)(v16 + 92) == 0;
      v19 = v18 || *(_DWORD *)(v16 + 88) == 0;
      v20 = v19 ? 0 : *(_DWORD *)(v16 + 96);
      if (v20 * (*(_DWORD *)(v16 + 108) >> 1) != -1)
        goto LABEL_25;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v17 = *(void **)(v16 + 72);
      if (v17)
LABEL_25:
        free(v17);
    }
    *(_QWORD *)(v16 + 72) = 0;
    MEMORY[0x20BD3583C](v16, 0x1091C40A44A61E0, v15);
  }
}

void sub_20B046D58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B046DD0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B046D74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B046DD0((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B046DA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B046DD0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B046DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B4A772C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B046DD0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_20B046E9C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B046EB4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B046ED8(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B046F9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE19EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE19EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE19EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE19EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B04700C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 19;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B0471D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B047224(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B04728C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B0472F4(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 3;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B047424(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B047438(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0474A0()
{
  return 20;
}

uint64_t sub_20B0474A8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0474B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0474C8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B04754C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0475B4()
{
  return 20;
}

uint64_t sub_20B0475BC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B0475C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B0475DC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B047658(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 20);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B047908(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B0478CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B047908(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4C9E44((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FD5D0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C408030;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 20);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC9A3C((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20B040FBC((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B047BA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B047BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B047BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B047C04(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B047C20()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B047C38(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B047C5C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B047CAC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE20EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE20EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE20EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE20EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B047D1C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 20;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B047EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B047F34(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B047F9C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B048004(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 3;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B048280(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B04815C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B048170(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0481D8()
{
  return 21;
}

uint64_t sub_20B0481E0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0481E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0481FC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B048280(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B04838C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0483D0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B048438()
{
  return 21;
}

uint64_t sub_20B048440(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B048448@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B04845C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0484D8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 21);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B048788(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B04874C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B048788(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();

  v19 = *(_QWORD *)(a1 + 12);
  v30 = &off_24C408270;
  sub_20B4B72DC(&v19, (uint64_t)&v21);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD650;
  *(_OWORD *)(v4 + 8) = v22;
  *(_OWORD *)(v4 + 24) = v23;
  *(_OWORD *)(v4 + 40) = v24;
  *(_QWORD *)(v4 + 56) = v25;
  *(_OWORD *)(v4 + 64) = v26;
  *(_QWORD *)(v4 + 80) = v27;
  *(_QWORD *)(v4 + 104) = v29;
  *(_OWORD *)(v4 + 88) = v28;
  v20 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4082A8;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v20 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v21, v4, 21);
  v9 = v21[1];
  v8 = v21[2];
  *(_OWORD *)(a2 + 3) = *v21;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v21 = (_OWORD *)a1;
    *(_QWORD *)&v22 = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFE5D88((size_t *)&v21);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v21 = (_OWORD *)a1;
  *(_QWORD *)&v22 = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v19) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    v30 = (uint64_t (**)())&v19;
    sub_20AFE9048((uint64_t)&v30, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v17 = v20;
  if (v20)
  {
    v18 = *(void **)(v20 + 72);
    if (v18)
      free(v18);
    *(_QWORD *)(v17 + 72) = 0;
    MEMORY[0x20BD3583C](v17, 0x1091C40A44A61E0);
  }
}

void sub_20B048A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B048A24(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B03B030((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B048A58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B048A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23)
    free(a23);
  _Unwind_Resume(exception_object);
}

void sub_20B048A88()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B048AA0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B048AC4(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B048B14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE21EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B048B84(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 21;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B048D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B048D98(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B048E00(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B048E68(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 3;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B0490E8(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B048FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B048FD4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04903C()
{
  return 22;
}

uint64_t sub_20B049044(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B04904C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B049064(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B0490E8(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B0491F4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B049238(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0492A0()
{
  return 22;
}

uint64_t sub_20B0492A8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B0492B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B0492C8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B049344(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 22);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B0495F4(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B0495B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B0495F4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4C9C90((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FD6D0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C408520;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 22);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC7BE4((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20B03F318((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B04988C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0498A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B0498DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0498F0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B04990C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B049924(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B049948(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B049998(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE22EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE22EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE22EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE22EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B049A08(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 22;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B049BCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B049C20(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B049C88(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B049CF0(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 3;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B049F70(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B049E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B049E5C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B049EC4()
{
  return 23;
}

uint64_t sub_20B049ECC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B049ED4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B049EEC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B049F70(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B04A07C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B04A0C0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04A128()
{
  return 23;
}

uint64_t sub_20B04A130(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B04A138@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B04A150(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B04A1CC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 23);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B04A47C(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B04A440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B04A47C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();

  v21 = *(_QWORD *)(a1 + 12);
  v32 = &off_24C408760;
  sub_20B4B7AAC(&v21, (uint64_t)&v23);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD750;
  *(_OWORD *)(v4 + 8) = v24;
  *(_OWORD *)(v4 + 24) = v25;
  *(_OWORD *)(v4 + 40) = v26;
  *(_QWORD *)(v4 + 56) = v27;
  *(_OWORD *)(v4 + 64) = v28;
  *(_QWORD *)(v4 + 80) = v29;
  *(_QWORD *)(v4 + 104) = v31;
  *(_OWORD *)(v4 + 88) = v30;
  v22 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C408798;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v22 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v23, v4, 23);
  v9 = v23[1];
  v8 = v23[2];
  *(_OWORD *)(a2 + 3) = *v23;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v23 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v23 = (_OWORD *)a1;
  *(_QWORD *)&v24 = a2 + 3;
  v15.n128_f64[0] = sub_20AFE98D0(&v23);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    v17 = *(void **)(v16 + 72);
    if (v17)
    {
      v18 = !*(_DWORD *)(v16 + 96) || *(_DWORD *)(v16 + 92) == 0;
      v19 = v18 || *(_DWORD *)(v16 + 88) == 0;
      v20 = v19 ? 0 : *(_DWORD *)(v16 + 96);
      if (v20 * (*(_DWORD *)(v16 + 108) >> 1) != -1)
        goto LABEL_25;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v17 = *(void **)(v16 + 72);
      if (v17)
LABEL_25:
        free(v17);
    }
    *(_QWORD *)(v16 + 72) = 0;
    MEMORY[0x20BD3583C](v16, 0x1091C40A44A61E0, v15);
  }
}

void sub_20B04A710(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B04A788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04A72C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B04A788((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B04A760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B04A788((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04A774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B4A9A3C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B04A788(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_20B04A854()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B04A86C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04A890(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B04A954(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE23EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE23EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE23EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE23EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B04A9C4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 23;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B04AB88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B04ABDC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B04AC44(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B04ACAC(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 3;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B04AF2C(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B04AE04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B04AE18(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04AE80()
{
  return 24;
}

uint64_t sub_20B04AE88(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B04AE90@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B04AEA8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B04AF2C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B04B038(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B04B07C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04B0E4()
{
  return 24;
}

uint64_t sub_20B04B0EC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B04B0F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B04B10C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B04B188(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 24);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B04B438(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B04B3FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B04B438(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4C9E44((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FD7D0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C408A10;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 24);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC9A3C((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20B040FBC((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B04B6D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04B6EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B04B720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04B734(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B04B750()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B04B768(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04B78C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B04B7DC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE24EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE24EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE24EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE24EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B04B84C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 24;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B04BA10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B04BA64(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B04BACC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B04BB34(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B04BDB0(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B04BC8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B04BCA0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04BD08()
{
  return 25;
}

uint64_t sub_20B04BD10(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B04BD18@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B04BD2C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B04BDB0(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B04BEBC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B04BF00(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04BF68()
{
  return 25;
}

uint64_t sub_20B04BF70(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B04BF78@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B04BF8C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B04C008(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 25);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B04C2B8(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B04C27C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B04C2B8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();

  v19 = *(_QWORD *)(a1 + 12);
  v30 = &off_24C408C50;
  sub_20B4B827C(&v19, (uint64_t)&v21);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD850;
  *(_OWORD *)(v4 + 8) = v22;
  *(_OWORD *)(v4 + 24) = v23;
  *(_OWORD *)(v4 + 40) = v24;
  *(_QWORD *)(v4 + 56) = v25;
  *(_OWORD *)(v4 + 64) = v26;
  *(_QWORD *)(v4 + 80) = v27;
  *(_QWORD *)(v4 + 104) = v29;
  *(_OWORD *)(v4 + 88) = v28;
  v20 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C408C88;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v20 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v21, v4, 25);
  v9 = v21[1];
  v8 = v21[2];
  *(_OWORD *)(a2 + 3) = *v21;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v21 = (_OWORD *)a1;
    *(_QWORD *)&v22 = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFE5D88((size_t *)&v21);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v21 = (_OWORD *)a1;
  *(_QWORD *)&v22 = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v19) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    v30 = (uint64_t (**)())&v19;
    sub_20AFEA3E0((uint64_t)&v30, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v17 = v20;
  if (v20)
  {
    v18 = *(void **)(v20 + 72);
    if (v18)
      free(v18);
    *(_QWORD *)(v17 + 72) = 0;
    MEMORY[0x20BD3583C](v17, 0x1091C40A44A61E0);
  }
}

void sub_20B04C538(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04C554(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B03B030((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B04C588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04C59C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23)
    free(a23);
  _Unwind_Resume(exception_object);
}

void sub_20B04C5B8()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B04C5D0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04C5F4(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B04C644(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE25EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B04C6B4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 25;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B04C874(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B04C8C8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B04C930(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B04C998(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B04CAC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B04CADC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04CB44()
{
  return 26;
}

uint64_t sub_20B04CB4C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B04CB54@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B04CB6C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B04CBF0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04CC58()
{
  return 26;
}

uint64_t sub_20B04CC60(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B04CC68@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B04CC80(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B04CCFC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 26);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B04CFAC(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B04CF70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B04CFAC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4C9FF8((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FD8D0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C408F00;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 26);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC7BE4((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20AFEA8F4((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B04D244(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04D260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B04D294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04D2A8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B04D2C4()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B04D2DC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04D300(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B04D350(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE26EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE26EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE26EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE26EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B04D3C0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 26;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B04D584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B04D5D8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B04D640(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B04D6A8(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B04D7D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B04D7EC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04D854()
{
  return 27;
}

uint64_t sub_20B04D85C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B04D864@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B04D87C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B04D900(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04D968()
{
  return 27;
}

uint64_t sub_20B04D970(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B04D978@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B04D990(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B04DA0C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 27);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B04DCBC(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B04DC80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B04DCBC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();

  v21 = *(_QWORD *)(a1 + 12);
  v32 = &off_24C409140;
  sub_20B4B8A64(&v21, (uint64_t)&v23);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FD950;
  *(_OWORD *)(v4 + 8) = v24;
  *(_OWORD *)(v4 + 24) = v25;
  *(_OWORD *)(v4 + 40) = v26;
  *(_QWORD *)(v4 + 56) = v27;
  *(_OWORD *)(v4 + 64) = v28;
  *(_QWORD *)(v4 + 80) = v29;
  *(_QWORD *)(v4 + 104) = v31;
  *(_OWORD *)(v4 + 88) = v30;
  v22 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C409178;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v22 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v23, v4, 27);
  v9 = v23[1];
  v8 = v23[2];
  *(_OWORD *)(a2 + 3) = *v23;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v23 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v23 = (_OWORD *)a1;
  *(_QWORD *)&v24 = a2 + 3;
  v15.n128_f64[0] = sub_20AFEAE58(&v23);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    v17 = *(void **)(v16 + 72);
    if (v17)
    {
      v18 = !*(_DWORD *)(v16 + 96) || *(_DWORD *)(v16 + 92) == 0;
      v19 = v18 || *(_DWORD *)(v16 + 88) == 0;
      v20 = v19 ? 0 : *(_DWORD *)(v16 + 96);
      if (v20 * (*(_DWORD *)(v16 + 108) >> 1) != -1)
        goto LABEL_25;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v17 = *(void **)(v16 + 72);
      if (v17)
LABEL_25:
        free(v17);
    }
    *(_QWORD *)(v16 + 72) = 0;
    MEMORY[0x20BD3583C](v16, 0x1091C40A44A61E0, v15);
  }
}

void sub_20B04DF50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B04DFC8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04DF6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B04DFC8((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B04DFA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B04DFC8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04DFB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B4ABB5C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B04DFC8(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_20B04E094()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B04E0AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04E0D0(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B04E194(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE27EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE27EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE27EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE27EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B04E204(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 27;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B04E3C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B04E41C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B04E484(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B04E4EC(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B04E61C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B04E630(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04E698()
{
  return 28;
}

uint64_t sub_20B04E6A0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B04E6A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B04E6C0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B04E744(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04E7AC()
{
  return 28;
}

uint64_t sub_20B04E7B4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B04E7BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B04E7D4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B04E850(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 28);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B04EB00(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B04EAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B04EB00(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4CA1B4((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FD9D0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4093F0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 28);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC9A3C((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20AFEB5FC((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B04ED98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04EDB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B04EDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04EDFC(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B04EE18()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B04EE30(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04EE54(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B04EEA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE28EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE28EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE28EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE28EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B04EF14(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 28;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B04F0D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B04F12C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B04F194(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B04F1FC(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B04F478(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B04F354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B04F368(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04F3D0()
{
  return 29;
}

uint64_t sub_20B04F3D8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B04F3E0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B04F3F4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B04F478(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B04F584(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B04F5C8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04F630()
{
  return 29;
}

uint64_t sub_20B04F638(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B04F640@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B04F654(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B04F6D0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 29);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B04F980(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B04F944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B04F980(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();

  v19 = *(_QWORD *)(a1 + 12);
  v30 = &off_24C409630;
  sub_20B4B9244(&v19, (uint64_t)&v21);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDA50;
  *(_OWORD *)(v4 + 8) = v22;
  *(_OWORD *)(v4 + 24) = v23;
  *(_OWORD *)(v4 + 40) = v24;
  *(_QWORD *)(v4 + 56) = v25;
  *(_OWORD *)(v4 + 64) = v26;
  *(_QWORD *)(v4 + 80) = v27;
  *(_QWORD *)(v4 + 104) = v29;
  *(_OWORD *)(v4 + 88) = v28;
  v20 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C409668;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v20 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v21, v4, 29);
  v9 = v21[1];
  v8 = v21[2];
  *(_OWORD *)(a2 + 3) = *v21;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v21 = (_OWORD *)a1;
    *(_QWORD *)&v22 = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFE5D88((size_t *)&v21);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v21 = (_OWORD *)a1;
  *(_QWORD *)&v22 = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v19) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    v30 = (uint64_t (**)())&v19;
    sub_20AFEA3E0((uint64_t)&v30, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v17 = v20;
  if (v20)
  {
    v18 = *(void **)(v20 + 72);
    if (v18)
      free(v18);
    *(_QWORD *)(v17 + 72) = 0;
    MEMORY[0x20BD3583C](v17, 0x1091C40A44A61E0);
  }
}

void sub_20B04FC00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04FC1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B03B030((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B04FC50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B04FC64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23)
    free(a23);
  _Unwind_Resume(exception_object);
}

void sub_20B04FC80()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B04FC98(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B04FCBC(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B04FD0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE29EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B04FD7C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 29;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B04FF3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B04FF90(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B04FFF8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B050060(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B0502E0(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B0501B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0501CC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B050234()
{
  return 30;
}

uint64_t sub_20B05023C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B050244@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B05025C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B0502E0(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B0503EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B050430(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B050498()
{
  return 30;
}

uint64_t sub_20B0504A0(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B0504A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B0504C0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B05053C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 30);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B0507EC(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B0507B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B0507EC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4C9FF8((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FDAD0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4098E0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 30);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC7BE4((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20AFEA8F4((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B050A84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B050AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B050AD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B050AE8(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B050B04()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B050B1C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B050B40(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B050B90(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE30EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE30EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE30EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE30EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B050C00(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 30;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B050DC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B050E18(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B050E80(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B050EE8(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B051168(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B051040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B051054(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0510BC()
{
  return 31;
}

uint64_t sub_20B0510C4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0510CC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0510E4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B051168(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B051274(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0512B8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B051320()
{
  return 31;
}

uint64_t sub_20B051328(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B051330@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B051348(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0513C4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 31);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B051674(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B051638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B051674(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();

  v21 = *(_QWORD *)(a1 + 12);
  v32 = &off_24C409B20;
  sub_20B4B9A2C(&v21, (uint64_t)&v23);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDB50;
  *(_OWORD *)(v4 + 8) = v24;
  *(_OWORD *)(v4 + 24) = v25;
  *(_OWORD *)(v4 + 40) = v26;
  *(_QWORD *)(v4 + 56) = v27;
  *(_OWORD *)(v4 + 64) = v28;
  *(_QWORD *)(v4 + 80) = v29;
  *(_QWORD *)(v4 + 104) = v31;
  *(_OWORD *)(v4 + 88) = v30;
  v22 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C409B58;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v22 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v23, v4, 31);
  v9 = v23[1];
  v8 = v23[2];
  *(_OWORD *)(a2 + 3) = *v23;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v23 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v23 = (_OWORD *)a1;
  *(_QWORD *)&v24 = a2 + 3;
  v15.n128_f64[0] = sub_20AFEAE58(&v23);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    v17 = *(void **)(v16 + 72);
    if (v17)
    {
      v18 = !*(_DWORD *)(v16 + 96) || *(_DWORD *)(v16 + 92) == 0;
      v19 = v18 || *(_DWORD *)(v16 + 88) == 0;
      v20 = v19 ? 0 : *(_DWORD *)(v16 + 96);
      if (v20 * (*(_DWORD *)(v16 + 108) >> 1) != -1)
        goto LABEL_25;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v17 = *(void **)(v16 + 72);
      if (v17)
LABEL_25:
        free(v17);
    }
    *(_QWORD *)(v16 + 72) = 0;
    MEMORY[0x20BD3583C](v16, 0x1091C40A44A61E0, v15);
  }
}

void sub_20B051908(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B051980((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B051924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B051980((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B051958(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B051980((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B05196C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B4ADB70((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B051980(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_20B051A4C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B051A64(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B051A88(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B051B4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE31EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B051BBC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 31;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B051D80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B051DD4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B051E3C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B051EA4(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B052124(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B051FFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B052010(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B052078()
{
  return 32;
}

uint64_t sub_20B052080(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B052088@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0520A0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B052124(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B052230(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B052274(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0522DC()
{
  return 32;
}

uint64_t sub_20B0522E4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B0522EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B052304(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B052380(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 32);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B052630(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B0525F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B052630(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4CA1B4((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FDBD0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C409DD0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 32);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC9A3C((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20AFEB5FC((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B0528C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0528E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B052918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B05292C(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B052948()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B052960(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B052984(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B0529D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE32EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B052A44(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 32;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B052C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B052C5C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B052CC4(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B052D2C(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B052FA8(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B052E84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B052E98(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B052F00()
{
  return 33;
}

uint64_t sub_20B052F08(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B052F10@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B052F24(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B052FA8(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B0530B4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0530F8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B053160()
{
  return 33;
}

uint64_t sub_20B053168(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B053170@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B053184(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B053200(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 33);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B0534B0(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B053474(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B0534B0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();

  v19 = *(_QWORD *)(a1 + 12);
  v30 = &off_24C40A010;
  sub_20B4BA20C(&v19, (uint64_t)&v21);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDC50;
  *(_OWORD *)(v4 + 8) = v22;
  *(_OWORD *)(v4 + 24) = v23;
  *(_OWORD *)(v4 + 40) = v24;
  *(_QWORD *)(v4 + 56) = v25;
  *(_OWORD *)(v4 + 64) = v26;
  *(_QWORD *)(v4 + 80) = v27;
  *(_QWORD *)(v4 + 104) = v29;
  *(_OWORD *)(v4 + 88) = v28;
  v20 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40A048;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v20 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v21, v4, 33);
  v9 = v21[1];
  v8 = v21[2];
  *(_OWORD *)(a2 + 3) = *v21;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v21 = (_OWORD *)a1;
    *(_QWORD *)&v22 = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFE5D88((size_t *)&v21);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v21 = (_OWORD *)a1;
  *(_QWORD *)&v22 = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v19) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    v30 = (uint64_t (**)())&v19;
    sub_20AFEA3E0((uint64_t)&v30, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v17 = v20;
  if (v20)
  {
    v18 = *(void **)(v20 + 72);
    if (v18)
      free(v18);
    *(_QWORD *)(v17 + 72) = 0;
    MEMORY[0x20BD3583C](v17, 0x1091C40A44A61E0);
  }
}

void sub_20B053730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B05374C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B03B030((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B053780(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B053794(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23)
    free(a23);
  _Unwind_Resume(exception_object);
}

void sub_20B0537B0()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0537C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0537EC(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B05383C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE33EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE33EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE33EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE33EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0538AC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 33;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B053A6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B053AC0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B053B28(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B053B90(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B053CC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B053CD4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B053D3C()
{
  return 34;
}

uint64_t sub_20B053D44(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B053D4C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B053D64(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B053DE8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B053E50()
{
  return 34;
}

uint64_t sub_20B053E58(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B053E60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B053E78(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B053EF4(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 34);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B0541A4(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B054168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B0541A4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4C9FF8((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FDCD0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40A2C0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 34);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC7BE4((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20AFEA8F4((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B05443C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B054458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B05448C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0544A0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B0544BC()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0544D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0544F8(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B054548(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE34EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE34EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE34EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE34EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0545B8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 34;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B05477C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0547D0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B054838(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B0548A0(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B0549D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0549E4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B054A4C()
{
  return 35;
}

uint64_t sub_20B054A54(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B054A5C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B054A74(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B054AF8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B054B60()
{
  return 35;
}

uint64_t sub_20B054B68(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B054B70@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B054B88(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B054C04(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 35);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B054EB4(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B054E78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B054EB4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();

  v21 = *(_QWORD *)(a1 + 12);
  v32 = &off_24C40A500;
  sub_20B4BA9F4(&v21, (uint64_t)&v23);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDD50;
  *(_OWORD *)(v4 + 8) = v24;
  *(_OWORD *)(v4 + 24) = v25;
  *(_OWORD *)(v4 + 40) = v26;
  *(_QWORD *)(v4 + 56) = v27;
  *(_OWORD *)(v4 + 64) = v28;
  *(_QWORD *)(v4 + 80) = v29;
  *(_QWORD *)(v4 + 104) = v31;
  *(_OWORD *)(v4 + 88) = v30;
  v22 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40A538;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v22 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v23, v4, 35);
  v9 = v23[1];
  v8 = v23[2];
  *(_OWORD *)(a2 + 3) = *v23;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v23 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v23 = (_OWORD *)a1;
  *(_QWORD *)&v24 = a2 + 3;
  v15.n128_f64[0] = sub_20AFEAE58(&v23);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    v17 = *(void **)(v16 + 72);
    if (v17)
    {
      v18 = !*(_DWORD *)(v16 + 96) || *(_DWORD *)(v16 + 92) == 0;
      v19 = v18 || *(_DWORD *)(v16 + 88) == 0;
      v20 = v19 ? 0 : *(_DWORD *)(v16 + 96);
      if (v20 * (*(_DWORD *)(v16 + 108) >> 1) != -1)
        goto LABEL_25;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v17 = *(void **)(v16 + 72);
      if (v17)
LABEL_25:
        free(v17);
    }
    *(_QWORD *)(v16 + 72) = 0;
    MEMORY[0x20BD3583C](v16, 0x1091C40A44A61E0, v15);
  }
}

void sub_20B055148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B0551C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B055164(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B0551C0((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B055198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B0551C0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0551AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B4AFB84((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0551C0(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_20B05528C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0552A4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0552C8(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B05538C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE35EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE35EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE35EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE35EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0553FC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 35;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B0555C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B055614(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B05567C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL sub_20B0556E4(_BOOL8 result, uint64_t a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v6;
  BOOL v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v6 = result;
  if (a3[1])
    v7 = *a3 == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)a3;
  if (v7)
    v8 = 0;
  LODWORD(v13) = 4;
  HIDWORD(v13) = v8;
  v9 = v8;
  v10 = v13;
  v11 = HIDWORD(v8);
  LODWORD(v14) = 1;
  HIDWORD(v14) = a4;
  v12 = HIDWORD(a4);
  if (HIDWORD(v8) * HIDWORD(a4) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if (result)
      abort();
  }
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_QWORD *)(v6 + 16) = a2;
  *(_QWORD *)(v6 + 24) = v10;
  *(_DWORD *)(v6 + 32) = v11;
  *(_QWORD *)(v6 + 36) = v14;
  *(_DWORD *)(v6 + 44) = v12;
  *(_QWORD *)(v6 + 48) = v9;
  *(_QWORD *)(v6 + 56) = a4;
  *(_WORD *)(v6 + 64) = 0;
  return result;
}

void sub_20B055814(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B055828(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B055890()
{
  return 36;
}

uint64_t sub_20B055898(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0558A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0558B8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

void sub_20B05593C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0559A4()
{
  return 36;
}

uint64_t sub_20B0559AC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B0559B4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B0559CC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B055A48(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 36);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B055CF8(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B055CBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B055CF8(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4CA1B4((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FDDD0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40A7B0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 36);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC9A3C((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20AFEB5FC((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B055F90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B055FAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B055FE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B055FF4(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B056010()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B056028(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B05604C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B05609C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE36EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE36EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE36EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE36EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B05610C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 36;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B0562D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B056324(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B05638C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B0563F4(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B056670(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B05654C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B056560(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0565C8()
{
  return 37;
}

uint64_t sub_20B0565D0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0565D8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0565EC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B056670(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B05677C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0567C0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B056828()
{
  return 37;
}

uint64_t sub_20B056830(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B056838@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B05684C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0568C8(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 37);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B056B78(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B056B3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B056B78(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();

  v19 = *(_QWORD *)(a1 + 12);
  v30 = &off_24C40A9F0;
  sub_20B4BB1D4(&v19, (uint64_t)&v21);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDE50;
  *(_OWORD *)(v4 + 8) = v22;
  *(_OWORD *)(v4 + 24) = v23;
  *(_OWORD *)(v4 + 40) = v24;
  *(_QWORD *)(v4 + 56) = v25;
  *(_OWORD *)(v4 + 64) = v26;
  *(_QWORD *)(v4 + 80) = v27;
  *(_QWORD *)(v4 + 104) = v29;
  *(_OWORD *)(v4 + 88) = v28;
  v20 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40AA28;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v20 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v21, v4, 37);
  v9 = v21[1];
  v8 = v21[2];
  *(_OWORD *)(a2 + 3) = *v21;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (v14)
  {
    v21 = (_OWORD *)a1;
    *(_QWORD *)&v22 = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFE5D88((size_t *)&v21);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  v21 = (_OWORD *)a1;
  *(_QWORD *)&v22 = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v19) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    v30 = (uint64_t (**)())&v19;
    sub_20AFEA3E0((uint64_t)&v30, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v17 = v20;
  if (v20)
  {
    v18 = *(void **)(v20 + 72);
    if (v18)
      free(v18);
    *(_QWORD *)(v17 + 72) = 0;
    MEMORY[0x20BD3583C](v17, 0x1091C40A44A61E0);
  }
}

void sub_20B056DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B056E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B03B030((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B056E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B056E5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (a23)
    free(a23);
  _Unwind_Resume(exception_object);
}

void sub_20B056E78()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B056E90(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B056EB4(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B056F04(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE37EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE37EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE37EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE37EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B056F74(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 37;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B057134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B057188(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0571F0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B057258(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B0574D8(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B0573B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0573C4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B05742C()
{
  return 38;
}

uint64_t sub_20B057434(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B05743C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B057454(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B0574D8(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B0575E4(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B057628(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B057690()
{
  return 38;
}

uint64_t sub_20B057698(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B0576A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B0576B8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B057734(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 38);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B0579E4(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B0579A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B0579E4(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4C9FF8((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FDED0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40ACA0;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 38);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC7BE4((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20AFEA8F4((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B057C7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B057C98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B057CCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B057CE0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B057CFC()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B057D14(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B057D38(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B057D88(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE38EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B057DF8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 38;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B057FBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B058010(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B058078(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B0580E0(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B058360(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B058238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B05824C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0582B4()
{
  return 39;
}

uint64_t sub_20B0582BC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0582C4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0582DC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B058360(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B05846C(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0584B0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B058518()
{
  return 39;
}

uint64_t sub_20B058520(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B058528@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B058540(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0585BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 39);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B05886C(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B058830(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B05886C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  uint64_t v11;
  unsigned __int8 v12;
  __int16 v13;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;
  void *v17;
  BOOL v18;
  BOOL v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  _OWORD *v23;
  __int128 v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  uint64_t (**v32)();

  v21 = *(_QWORD *)(a1 + 12);
  v32 = &off_24C40AEE0;
  sub_20B4BB9BC(&v21, (uint64_t)&v23);
  v4 = operator new();
  *(_QWORD *)v4 = &off_24C3FDF50;
  *(_OWORD *)(v4 + 8) = v24;
  *(_OWORD *)(v4 + 24) = v25;
  *(_OWORD *)(v4 + 40) = v26;
  *(_QWORD *)(v4 + 56) = v27;
  *(_OWORD *)(v4 + 64) = v28;
  *(_QWORD *)(v4 + 80) = v29;
  *(_QWORD *)(v4 + 104) = v31;
  *(_OWORD *)(v4 + 88) = v30;
  v22 = v4;
  v5 = (std::__shared_weak_count *)operator new();
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40AF18;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)v4;
  v22 = 0;
  *a2 = v4;
  a2[1] = (uint64_t)v5;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v4 + 64))(&v23, v4, 39);
  v9 = v23[1];
  v8 = v23[2];
  *(_OWORD *)(a2 + 3) = *v23;
  *(_OWORD *)(a2 + 5) = v9;
  *(_OWORD *)(a2 + 7) = v8;
  v23 = 0;
  MEMORY[0x20BD3583C]();
  a2[9] = a2[3];
  a2[14] = a2[8];
  v10 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v10;
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v12 = v11;
  if ((v11 & 0xFFFFFF) <= 0x10000)
    v12 = 0;
  v13 = v11 & 0xFF00;
  if ((v11 & 0xFF0000) == 0)
    v13 = 0;
  *((_WORD *)a2 + 60) = v13 & 0xFF00 | v12;
  do
    v14 = __ldaxr(p_shared_owners);
  while (__stlxr(v14 - 1, p_shared_owners));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  v23 = (_OWORD *)a1;
  *(_QWORD *)&v24 = a2 + 3;
  v15.n128_f64[0] = sub_20AFEAE58(&v23);
  v16 = v22;
  v22 = 0;
  if (v16)
  {
    v17 = *(void **)(v16 + 72);
    if (v17)
    {
      v18 = !*(_DWORD *)(v16 + 96) || *(_DWORD *)(v16 + 92) == 0;
      v19 = v18 || *(_DWORD *)(v16 + 88) == 0;
      v20 = v19 ? 0 : *(_DWORD *)(v16 + 96);
      if (v20 * (*(_DWORD *)(v16 + 108) >> 1) != -1)
        goto LABEL_25;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v17 = *(void **)(v16 + 72);
      if (v17)
LABEL_25:
        free(v17);
    }
    *(_QWORD *)(v16 + 72) = 0;
    MEMORY[0x20BD3583C](v16, 0x1091C40A44A61E0, v15);
  }
}

void sub_20B058B00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  va_list va;

  va_start(va, a5);
  sub_20AEC147C(v5);
  sub_20B058B78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B058B1C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  sub_20B058B78((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B058B50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B058B78((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B058B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20B4B1B98((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B058B78(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 72);
    if (v3)
    {
      v4 = !*(_DWORD *)(v2 + 96) || *(_DWORD *)(v2 + 92) == 0;
      v5 = v4 || *(_DWORD *)(v2 + 88) == 0;
      v6 = v5 ? 0 : *(_DWORD *)(v2 + 96);
      if (v6 * (*(_DWORD *)(v2 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v3 = *(void **)(v2 + 72);
      if (v3)
LABEL_15:
        free(v3);
    }
    *(_QWORD *)(v2 + 72) = 0;
    MEMORY[0x20BD3583C](v2, 0x1091C40A44A61E0);
  }
  return a1;
}

void sub_20B058C44()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B058C5C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B058C80(uint64_t result)
{
  uint64_t v1;
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
    {
      v3 = !*(_DWORD *)(v1 + 96) || *(_DWORD *)(v1 + 92) == 0;
      v4 = v3 || *(_DWORD *)(v1 + 88) == 0;
      v5 = v4 ? 0 : *(_DWORD *)(v1 + 96);
      if (v5 * (*(_DWORD *)(v1 + 108) >> 1) != -1)
        goto LABEL_15;
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v2 = *(void **)(v1 + 72);
      if (v2)
LABEL_15:
        free(v2);
    }
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B058D44(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE39EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE39EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE39EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE39EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B058DB4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 39;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B058F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B058FCC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B059034(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B05909C(uint64_t *a1@<X0>, _DWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  _BYTE v20[12];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v18 = 0;
  v19 = 0;
  v5 = *a1;
  if (a2[1])
    v6 = *a2 == 0;
  else
    v6 = 1;
  v7 = *(_QWORD *)a2;
  if (v6)
    v7 = 0;
  *(_QWORD *)&v20[4] = v7;
  *(_DWORD *)v20 = 4;
  v8 = *(_QWORD *)v20;
  *(_DWORD *)v20 = 1;
  *(_QWORD *)&v20[4] = *a3;
  *(_QWORD *)&v12 = v5;
  *((_QWORD *)&v12 + 1) = v8;
  v13 = HIDWORD(v7);
  v14 = *(_QWORD *)v20;
  v15 = *(_DWORD *)&v20[8];
  v16 = v7;
  v17 = *(_QWORD *)&v20[4];
  if (*(_DWORD *)&v20[8] * HIDWORD(v7) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B05931C(a4, &v18, &v12);
  v9 = v19;
  if (v19)
  {
    p_shared_owners = (unint64_t *)&v19->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B0591F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B059208(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B059270()
{
  return 40;
}

uint64_t sub_20B059278(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B059280@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B059298(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

uint64_t sub_20B05931C(uint64_t result, uint64_t *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  __int128 v9;
  _WORD *v10;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  unsigned __int8 v16;
  __int16 v17;

  v3 = result;
  v4 = *a2;
  v5 = (std::__shared_weak_count *)a2[1];
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    *(_QWORD *)result = v4;
    *(_QWORD *)(result + 8) = v5;
    v8 = *a3;
    v9 = a3[2];
    *(_OWORD *)(result + 32) = a3[1];
    *(_OWORD *)(result + 48) = v9;
    *(_OWORD *)(result + 16) = v8;
    if (v4)
    {
      v10 = (_WORD *)(result + 64);
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      goto LABEL_12;
    }
LABEL_17:
    *(_WORD *)(result + 64) = 0;
    *(_BYTE *)(result + 65) = 0;
    return result;
  }
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = 0;
  v13 = *a3;
  v14 = a3[2];
  *(_OWORD *)(result + 32) = a3[1];
  *(_OWORD *)(result + 48) = v14;
  *(_OWORD *)(result + 16) = v13;
  if (!v4)
    goto LABEL_17;
  v10 = (_WORD *)(result + 64);
LABEL_12:
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
  v16 = v15;
  if ((v15 & 0xFFFFFF) <= 0x10000)
    v16 = 0;
  v17 = v15 & 0xFF00;
  if ((v15 & 0xFF0000) == 0)
    v17 = 0;
  *v10 = v17 & 0xFF00 | v16;
  return v3;
}

void sub_20B059428(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B05946C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0594D4()
{
  return 40;
}

uint64_t sub_20B0594DC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B0594E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B0594FC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B059578(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::__shared_weak_count_vtbl *v13;
  std::__shared_weak_count *v14;
  std::__shared_weak_count_vtbl *v15;
  unint64_t *v16;
  __int16 v17;
  unint64_t v18;
  uint64_t v19;
  BOOL v20;
  _OWORD *v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count_vtbl *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  unint64_t v31;
  std::__shared_weak_count_vtbl *v32;
  _OWORD *v33;

  v4 = *(_QWORD *)(a1 + 8);
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
      v4 = *(_QWORD *)(a1 + 8);
      v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        v10 = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
        do
          v12 = __ldaxr(v10);
        while (__stlxr(v12 - 1, v10));
        if (!v12)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
    }
    (*(void (**)(std::__shared_weak_count_vtbl **__return_ptr, uint64_t))(*(_QWORD *)v4 + 32))(&v32, v4);
    v13 = v32;
    if (v32)
    {
      v14 = (std::__shared_weak_count *)operator new();
      v15 = v32;
      v14->__shared_owners_ = 0;
      v16 = (unint64_t *)&v14->__shared_owners_;
      v14->__vftable = (std::__shared_weak_count_vtbl *)&off_24C403F88;
      v14->__shared_weak_owners_ = 0;
      v14[1].__vftable = v15;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = v13;
      *(_QWORD *)(a2 + 8) = v14;
      do
        v18 = __ldxr(v16);
      while (__stxr(v18 + 1, v16));
    }
    else
    {
      v14 = 0;
      v32 = 0;
      v17 = *(_WORD *)(a1 + 72);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
    }
    *(_QWORD *)(a2 + 16) = 0;
    (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v13->~__shared_weak_count
     + 8))(&v33, v13, 40);
    v21 = v33;
    v23 = v33[1];
    v22 = v33[2];
    *(_OWORD *)(a2 + 24) = *v33;
    *(_OWORD *)(a2 + 40) = v23;
    *(_OWORD *)(a2 + 56) = v22;
    v33 = 0;
    MEMORY[0x20BD3583C](v21, 0xC400A2AC0F1);
    *(_QWORD *)(a2 + 72) = *(_QWORD *)(a2 + 24);
    v24 = *(_OWORD *)(a2 + 48);
    *(_OWORD *)(a2 + 80) = *(_OWORD *)(a2 + 32);
    *(_OWORD *)(a2 + 96) = v24;
    *(_QWORD *)(a2 + 112) = *(_QWORD *)(a2 + 64);
    *(_WORD *)(a2 + 120) = v17;
    if (v13)
    {
      v25 = (unint64_t *)&v14->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      if (!v26)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
    v27 = v32;
    v32 = 0;
    if (v27)
      (*((void (**)(std::__shared_weak_count_vtbl *))v27->~__shared_weak_count + 1))(v27);
  }
  else
  {
    v19 = a1 + 24;
    if (*(_BYTE *)(a1 + 72))
      v20 = *(_QWORD *)(a1 + 24) == 0;
    else
      v20 = 1;
    if (v20)
    {
      sub_20B059828(v19, (uint64_t *)a2);
    }
    else
    {
      v28 = *(std::__shared_weak_count **)(a1 + 16);
      v29 = (unint64_t *)&v28->__shared_owners_;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      do
        v31 = __ldaxr(v29);
      while (__stlxr(v31 - 1, v29));
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
      __break(1u);
    }
  }
}

void sub_20B0597EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a11)
    (*(void (**)(uint64_t))(*(_QWORD *)a11 + 8))(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B059828(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  unsigned __int8 v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  uint64_t v31;
  _OWORD v32[3];
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;

  v24 = *(_QWORD *)(a1 + 12);
  sub_20B4CA1B4((uint64_t)v32, &v24);
  v28 = v32[0];
  v29 = v32[1];
  v30 = v32[2];
  v4 = v34;
  v31 = v33;
  v5 = v35;
  v6 = v36;
  v26 = v37;
  v27 = v38;
  v7 = operator new();
  v8 = v29;
  *(_OWORD *)(v7 + 8) = v28;
  *(_QWORD *)v7 = &off_24C3FDFD0;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v30;
  *(_QWORD *)(v7 + 56) = v31;
  *(_QWORD *)(v7 + 64) = v4;
  *(_QWORD *)(v7 + 72) = v5;
  *(_QWORD *)(v7 + 80) = v6;
  *(_OWORD *)(v7 + 88) = v26;
  *(_QWORD *)(v7 + 104) = v27;
  v25 = v7;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B190;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v7;
  v25 = 0;
  *a2 = v7;
  a2[1] = (uint64_t)v9;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  a2[2] = 0;
  (*(void (**)(_OWORD *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v7 + 64))(v32, v7, 40);
  v12 = *(_QWORD *)&v32[0];
  v14 = *(_OWORD *)(*(_QWORD *)&v32[0] + 16);
  v13 = *(_OWORD *)(*(_QWORD *)&v32[0] + 32);
  *(_OWORD *)(a2 + 3) = **(_OWORD **)&v32[0];
  *(_OWORD *)(a2 + 5) = v14;
  *(_OWORD *)(a2 + 7) = v13;
  *(_QWORD *)&v32[0] = 0;
  MEMORY[0x20BD3583C](v12, 0xC400A2AC0F1);
  a2[9] = a2[3];
  a2[14] = a2[8];
  v15 = *((_OWORD *)a2 + 3);
  *((_OWORD *)a2 + 5) = *((_OWORD *)a2 + 2);
  *((_OWORD *)a2 + 6) = v15;
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)*a2 + 104))(*a2);
  v17 = v16;
  if ((v16 & 0xFFFFFF) <= 0x10000)
    v17 = 0;
  v18 = v16 & 0xFF00;
  if ((v16 & 0xFF0000) == 0)
    v18 = 0;
  *((_WORD *)a2 + 60) = v18 & 0xFF00 | v17;
  do
    v19 = __ldaxr(p_shared_owners);
  while (__stlxr(v19 - 1, p_shared_owners));
  if (v19)
  {
    *(_QWORD *)&v32[0] = a1;
    *((_QWORD *)&v32[0] + 1) = a2 + 3;
    if (*(_DWORD *)(a1 + 20) != 1 || *((_DWORD *)a2 + 11) != 1)
      goto LABEL_14;
LABEL_23:
    sub_20AFC9A3C((uint64_t *)v32);
    goto LABEL_24;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  *(_QWORD *)&v32[0] = a1;
  *((_QWORD *)&v32[0] + 1) = a2 + 3;
  if (*(_DWORD *)(a1 + 20) == 1 && *((_DWORD *)a2 + 11) == 1)
    goto LABEL_23;
LABEL_14:
  LOBYTE(v26) = 0;
  if (*(_DWORD *)(a1 + 8) && *(_DWORD *)(a1 + 12) && *(_DWORD *)(a1 + 16))
  {
    *(_QWORD *)&v28 = &v26;
    sub_20AFEB5FC((uint64_t)&v28, a1, (uint64_t)(a2 + 3));
  }
LABEL_24:
  v22 = v25;
  if (v25)
  {
    v23 = *(void **)(v25 + 72);
    if (v23)
      free(v23);
    *(_QWORD *)(v22 + 72) = 0;
    MEMORY[0x20BD3583C](v22, 0x1091C40A44A61E0);
  }
}

void sub_20B059AC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20AEC147C(v4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B059ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  uint64_t v12;

  sub_20AEC147C(v12);
  sub_20AEC147C((uint64_t)&a9);
  sub_20B03B030(&a12);
  _Unwind_Resume(a1);
}

void sub_20B059B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B03B030((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B059B24(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B059B40()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B059B58(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B059B7C(uint64_t result)
{
  uint64_t v1;
  void *v2;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    v2 = *(void **)(v1 + 72);
    if (v2)
      free(v2);
    *(_QWORD *)(v1 + 72) = 0;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B059BCC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE40EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE40EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE40EEEEE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit3img16ArrayImageBufferILNS3_6FormatE40EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B059C3C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 40;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B059E00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B059E54(_DWORD ***a1)
{
  return sub_20AF4C134(**a1, (char *)(*a1)[1]);
}

void sub_20B059E60(uint64_t a1, uint64_t a2)
{
  sub_20B059E70((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20B059E70(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C404000[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B05A024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B05A068(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B05A160((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B05A158(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B05A160(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B05A35C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B05A370(_DWORD ***a1)
{
  return sub_20AF9CDA4(**a1, (char *)(*a1)[1]);
}

void sub_20B05A37C(uint64_t a1, uint64_t a2)
{
  sub_20B05A38C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20B05A38C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C404000[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B05A540(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B05A584(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B05A67C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B05A674(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B05A67C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B05A878(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B05A890()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B05A8A4(uint64_t a1)
{
  uint64_t v1;
  int v2;
  __int128 v3;
  _OWORD v4[2];
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = **(_DWORD **)v1;
  v3 = *(_OWORD *)(v1 + 24);
  v4[0] = *(_OWORD *)(v1 + 8);
  v4[1] = v3;
  v5 = *(_QWORD *)(v1 + 40);
  sub_20B05A8E4(v2, (int **)v4);
}

void sub_20B05A8E4(int a1, int **a2)
{
  int v3;
  int *v4;
  uint64_t v5;
  int v6;
  _BOOL8 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t (**v10)();
  uint64_t v11;
  uint64_t v12;
  int v13;
  int *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t (**v20)();
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  int v24;
  int *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  int v43;
  int *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  int v50;
  int *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  int v57;
  int *v58;
  int v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t (**v64)();
  uint64_t v65;
  uint64_t v66;
  __int128 v67;
  int v68;
  int *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t (**v75)();
  uint64_t v76;
  uint64_t v77;
  __int128 v78;
  int v79;
  int *v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  int *v86;
  int v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t (**v92)();
  uint64_t v93;
  uint64_t v94;
  __int128 v95;
  int v96;
  int *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  int v103;
  int *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  int v110;
  int *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  __int128 v116;
  int *v117;
  _QWORD *v118;
  uint64_t v119;
  int *v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  int *v130;
  _QWORD *v131;
  uint64_t v132;
  int *v133;
  uint64_t v134;
  BOOL v135;
  uint64_t v136;
  std::__shared_weak_count *v137;
  unint64_t *v138;
  unint64_t v139;
  std::__shared_weak_count *v140;
  unint64_t *v141;
  unint64_t v142;
  int *v143;
  _QWORD *v144;
  uint64_t v145;
  int *v146;
  uint64_t v147;
  BOOL v148;
  uint64_t v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  unint64_t *v153;
  int *v154;
  _QWORD *v155;
  uint64_t v156;
  int *v157;
  uint64_t v158;
  BOOL v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t *v164;
  int *v165;
  _QWORD *v166;
  uint64_t v167;
  int *v168;
  uint64_t v169;
  unsigned int *v170;
  int v171;
  BOOL v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unint64_t *v175;
  unint64_t v176;
  unint64_t *v177;
  int *v178;
  _QWORD *v179;
  uint64_t v180;
  int *v181;
  uint64_t v182;
  unsigned int *v183;
  int v184;
  BOOL v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  unint64_t *v188;
  unint64_t v189;
  unint64_t *v190;
  int *v191;
  _QWORD *v192;
  uint64_t v193;
  int *v194;
  uint64_t v195;
  uint64_t v196;
  BOOL v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  unint64_t *v202;
  int *v203;
  _QWORD *v204;
  uint64_t v205;
  int *v206;
  uint64_t v207;
  BOOL v208;
  uint64_t v209;
  std::__shared_weak_count *v210;
  unint64_t *v211;
  unint64_t v212;
  unint64_t *v213;
  int *v214;
  _QWORD *v215;
  uint64_t v216;
  int *v217;
  uint64_t v218;
  BOOL v219;
  uint64_t v220;
  std::__shared_weak_count *v221;
  unint64_t *v222;
  unint64_t v223;
  unint64_t *v224;
  int *v225;
  _QWORD *v226;
  uint64_t v227;
  int *v228;
  uint64_t v229;
  BOOL v230;
  uint64_t v231;
  std::__shared_weak_count *v232;
  unint64_t *v233;
  unint64_t v234;
  unint64_t *v235;
  int *v236;
  _QWORD *v237;
  uint64_t v238;
  int *v239;
  _QWORD *v240;
  uint64_t v241;
  int *v242;
  _QWORD *v243;
  uint64_t v244;
  int *v245;
  uint64_t v246;
  BOOL v247;
  uint64_t v248;
  std::__shared_weak_count *v249;
  unint64_t *v250;
  unint64_t v251;
  unint64_t *v252;
  int *v253;
  _QWORD *v254;
  uint64_t v255;
  int *v256;
  uint64_t v257;
  BOOL v258;
  uint64_t v259;
  std::__shared_weak_count *v260;
  unint64_t *v261;
  unint64_t v262;
  unint64_t *v263;
  int *v264;
  uint64_t v265;
  unsigned int *v266;
  int v267;
  BOOL v268;
  unint64_t v269;
  std::__shared_weak_count *v270;
  unint64_t *v271;
  unint64_t v272;
  unint64_t *v273;
  int *v274;
  uint64_t v275;
  uint64_t v276;
  BOOL v277;
  uint64_t v278;
  std::__shared_weak_count *v279;
  unint64_t *v280;
  unint64_t v281;
  unint64_t *v282;
  std::__shared_weak_count *v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  uint64_t v287;
  std::__shared_weak_count *v288;
  void *v289;
  unint64_t *v290;
  unint64_t v291;
  int v292;
  uint64_t v293;
  void *v294;
  unint64_t v295;
  unint64_t v296;
  unint64_t v297;
  unint64_t v298;
  unint64_t v299;
  unint64_t v300;
  std::__shared_weak_count *v301;
  unint64_t *v302;
  unint64_t v303;
  uint64_t v304;
  uint64_t v305;
  std::__shared_weak_count *v306;
  void *v307;
  unint64_t *v308;
  unint64_t v309;
  uint64_t v310;
  int v311;
  void *v312;
  unint64_t v313;
  unint64_t v314;
  unint64_t v315;
  unint64_t v316;
  unint64_t v317;
  unint64_t v318;
  std::__shared_weak_count *v319;
  unint64_t *v320;
  unint64_t v321;
  uint64_t v322;
  uint64_t v323;
  std::__shared_weak_count *v324;
  void *v325;
  unint64_t *v326;
  unint64_t v327;
  int v328;
  uint64_t v329;
  void *v330;
  unint64_t v331;
  unint64_t v332;
  unint64_t v333;
  unint64_t v334;
  unint64_t v335;
  unint64_t v336;
  std::__shared_weak_count *v337;
  unint64_t *v338;
  unint64_t v339;
  uint64_t v340;
  uint64_t v341;
  std::__shared_weak_count *v342;
  void *v343;
  unint64_t *v344;
  unint64_t v345;
  int v346;
  uint64_t v347;
  void *v348;
  unint64_t v349;
  unint64_t v350;
  unint64_t v351;
  unint64_t v352;
  unint64_t v353;
  unint64_t v354;
  std::__shared_weak_count *v355;
  unint64_t *v356;
  unint64_t v357;
  uint64_t v358;
  uint64_t v359;
  std::__shared_weak_count *v360;
  void *v361;
  unint64_t *v362;
  unint64_t v363;
  uint64_t v364;
  int v365;
  void *v366;
  unint64_t v367;
  unint64_t v368;
  unint64_t v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  std::__shared_weak_count *v373;
  unint64_t *v374;
  unint64_t v375;
  uint64_t v376;
  uint64_t v377;
  std::__shared_weak_count *v378;
  void *v379;
  unint64_t *v380;
  unint64_t v381;
  uint64_t v382;
  int v383;
  void *v384;
  unint64_t v385;
  unint64_t v386;
  unint64_t v387;
  unint64_t v388;
  unint64_t v389;
  unint64_t v390;
  std::__shared_weak_count *v391;
  unint64_t *v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  std::__shared_weak_count *v396;
  void *v397;
  unint64_t *v398;
  unint64_t v399;
  uint64_t v400;
  int v401;
  void *v402;
  unint64_t v403;
  unint64_t v404;
  unint64_t v405;
  unint64_t v406;
  unint64_t v407;
  unint64_t v408;
  std::__shared_weak_count *v409;
  unint64_t *v410;
  unint64_t v411;
  uint64_t v412;
  uint64_t v413;
  std::__shared_weak_count *v414;
  void *v415;
  unint64_t *v416;
  unint64_t v417;
  uint64_t v418;
  int v419;
  void *v420;
  unint64_t v421;
  unint64_t v422;
  unint64_t v423;
  unint64_t v424;
  unint64_t v425;
  unint64_t v426;
  std::__shared_weak_count *v427;
  unint64_t *v428;
  unint64_t v429;
  uint64_t v430;
  uint64_t v431;
  std::__shared_weak_count *v432;
  void *v433;
  unint64_t *v434;
  unint64_t v435;
  uint64_t v436;
  int v437;
  void *v438;
  unint64_t v439;
  unint64_t v440;
  unint64_t v441;
  unint64_t v442;
  unint64_t v443;
  unint64_t v444;
  std::__shared_weak_count *v445;
  unint64_t *v446;
  unint64_t v447;
  uint64_t v448;
  uint64_t v449;
  std::__shared_weak_count *v450;
  void *v451;
  unint64_t *v452;
  unint64_t v453;
  int v454;
  uint64_t v455;
  void *v456;
  unint64_t v457;
  unint64_t v458;
  unint64_t v459;
  unint64_t v460;
  unint64_t v461;
  unint64_t v462;
  std::__shared_weak_count *v463;
  unint64_t *v464;
  unint64_t v465;
  uint64_t v466;
  uint64_t v467;
  std::__shared_weak_count *v468;
  void *v469;
  unint64_t *v470;
  unint64_t v471;
  uint64_t v472;
  int v473;
  void *v474;
  unint64_t v475;
  unint64_t v476;
  unint64_t v477;
  unint64_t v478;
  unint64_t v479;
  unint64_t v480;
  std::__shared_weak_count *v481;
  unint64_t *v482;
  unint64_t v483;
  uint64_t v484;
  uint64_t v485;
  std::__shared_weak_count *v486;
  void *v487;
  unint64_t *v488;
  unint64_t v489;
  uint64_t v490;
  int v491;
  void *v492;
  unint64_t v493;
  unint64_t v494;
  unint64_t v495;
  unint64_t v496;
  unint64_t v497;
  unint64_t v498;
  std::__shared_weak_count *v499;
  unint64_t *v500;
  unint64_t v501;
  uint64_t v502;
  uint64_t v503;
  std::__shared_weak_count *v504;
  void *v505;
  unint64_t *v506;
  unint64_t v507;
  uint64_t v508;
  int v509;
  void *v510;
  unint64_t v511;
  unint64_t v512;
  unint64_t v513;
  unint64_t v514;
  unint64_t v515;
  unint64_t v516;
  std::__shared_weak_count *v517;
  unint64_t *v518;
  unint64_t v519;
  uint64_t v520;
  uint64_t v521;
  std::__shared_weak_count *v522;
  void *v523;
  unint64_t *v524;
  unint64_t v525;
  uint64_t v526;
  int v527;
  void *v528;
  unint64_t v529;
  unint64_t v530;
  unint64_t v531;
  unint64_t v532;
  unint64_t v533;
  unint64_t v534;
  std::__shared_weak_count *v535;
  std::__shared_weak_count *v536;
  unint64_t *v537;
  unint64_t v538;
  uint64_t v539;
  uint64_t v540;
  std::__shared_weak_count *v541;
  void *v542;
  unint64_t *v543;
  unint64_t v544;
  int v545;
  uint64_t v546;
  void *v547;
  unint64_t v548;
  unint64_t v549;
  unint64_t v550;
  unint64_t v551;
  unint64_t v552;
  unint64_t v553;
  __int128 v554;
  std::__shared_weak_count *v555;
  std::__shared_weak_count *v556;
  unint64_t *v557;
  unint64_t v558;
  uint64_t v559;
  uint64_t v560;
  void *v561;
  std::__shared_weak_count *v562;
  unint64_t *v563;
  unint64_t v564;
  uint64_t v565;
  int v566;
  void *v567;
  unint64_t v568;
  unint64_t v569;
  unint64_t v570;
  void *v571;
  unint64_t v572;
  void *v573;
  unint64_t v574;
  unint64_t v575;
  _QWORD *v576;
  std::__shared_weak_count *v577;
  unint64_t *v578;
  unint64_t v579;
  uint64_t v580;
  uint64_t v581;
  std::__shared_weak_count *v582;
  void *v583;
  unint64_t *v584;
  unint64_t v585;
  int v586;
  uint64_t v587;
  void *v588;
  unint64_t v589;
  unint64_t v590;
  unint64_t v591;
  unint64_t v592;
  unint64_t v593;
  unint64_t v594;
  _QWORD *v595;
  std::__shared_weak_count *v596;
  unint64_t *v597;
  unint64_t v598;
  uint64_t v599;
  uint64_t v600;
  std::__shared_weak_count *v601;
  void *v602;
  unint64_t *v603;
  unint64_t v604;
  int v605;
  uint64_t v606;
  void *v607;
  unint64_t v608;
  unint64_t v609;
  unint64_t v610;
  unint64_t v611;
  unint64_t v612;
  unint64_t v613;
  __int128 v614;
  _QWORD *v615;
  std::__shared_weak_count *v616;
  unint64_t *v617;
  unint64_t v618;
  uint64_t v619;
  uint64_t v620;
  std::__shared_weak_count *v621;
  void *v622;
  unint64_t *v623;
  unint64_t v624;
  uint64_t v625;
  int v626;
  void *v627;
  unint64_t v628;
  unint64_t v629;
  unint64_t v630;
  unint64_t v631;
  unint64_t v632;
  unint64_t v633;
  __int128 v634;
  _QWORD *v635;
  std::__shared_weak_count *v636;
  unint64_t *v637;
  unint64_t v638;
  uint64_t v639;
  uint64_t v640;
  std::__shared_weak_count *v641;
  void *v642;
  unint64_t *v643;
  unint64_t v644;
  uint64_t v645;
  int v646;
  void *v647;
  unint64_t v648;
  unint64_t v649;
  unint64_t v650;
  unint64_t v651;
  unint64_t v652;
  unint64_t v653;
  __int128 v654;
  _QWORD *v655;
  std::__shared_weak_count *v656;
  unint64_t *v657;
  unint64_t v658;
  uint64_t v659;
  uint64_t v660;
  std::__shared_weak_count *v661;
  void *v662;
  unint64_t *v663;
  unint64_t v664;
  uint64_t v665;
  int v666;
  void *v667;
  unint64_t v668;
  unint64_t v669;
  unint64_t v670;
  unint64_t v671;
  unint64_t v672;
  unint64_t v673;
  __int128 v674;
  std::__shared_weak_count *v675;
  std::__shared_weak_count *v676;
  unint64_t *v677;
  unint64_t v678;
  uint64_t v679;
  uint64_t v680;
  std::__shared_weak_count *v681;
  void *v682;
  unint64_t *v683;
  unint64_t v684;
  uint64_t v685;
  int v686;
  void *v687;
  unint64_t v688;
  unint64_t v689;
  unint64_t v690;
  unint64_t v691;
  unint64_t v692;
  unint64_t v693;
  __int128 v694;
  std::__shared_weak_count *v695;
  std::__shared_weak_count *v696;
  unint64_t *v697;
  unint64_t v698;
  uint64_t v699;
  uint64_t v700;
  std::__shared_weak_count *v701;
  void *v702;
  unint64_t *v703;
  unint64_t v704;
  uint64_t v705;
  int v706;
  void *v707;
  unint64_t v708;
  unint64_t v709;
  unint64_t v710;
  unint64_t v711;
  unint64_t v712;
  unint64_t v713;
  _QWORD *v714;
  std::__shared_weak_count *v715;
  unint64_t *v716;
  unint64_t v717;
  uint64_t v718;
  uint64_t v719;
  std::__shared_weak_count *v720;
  void *v721;
  unint64_t *v722;
  unint64_t v723;
  int v724;
  uint64_t v725;
  void *v726;
  unint64_t v727;
  unint64_t v728;
  unint64_t v729;
  unint64_t v730;
  unint64_t v731;
  unint64_t v732;
  __int128 v733;
  std::__shared_weak_count *v734;
  std::__shared_weak_count *v735;
  unint64_t *v736;
  unint64_t v737;
  uint64_t v738;
  uint64_t v739;
  std::__shared_weak_count *v740;
  void *v741;
  unint64_t *v742;
  unint64_t v743;
  uint64_t v744;
  int v745;
  void *v746;
  unint64_t v747;
  unint64_t v748;
  unint64_t v749;
  unint64_t v750;
  unint64_t v751;
  unint64_t v752;
  __int128 v753;
  _QWORD *v754;
  std::__shared_weak_count *v755;
  unint64_t *v756;
  unint64_t v757;
  uint64_t v758;
  uint64_t v759;
  std::__shared_weak_count *v760;
  void *v761;
  unint64_t *v762;
  unint64_t v763;
  uint64_t v764;
  int v765;
  void *v766;
  unint64_t v767;
  unint64_t v768;
  unint64_t v769;
  unint64_t v770;
  unint64_t v771;
  unint64_t v772;
  __int128 v773;
  _QWORD *v774;
  std::__shared_weak_count *v775;
  unint64_t *v776;
  unint64_t v777;
  uint64_t v778;
  uint64_t v779;
  std::__shared_weak_count *v780;
  void *v781;
  unint64_t *v782;
  unint64_t v783;
  uint64_t v784;
  int v785;
  void *v786;
  unint64_t v787;
  unint64_t v788;
  unint64_t v789;
  unint64_t v790;
  unint64_t v791;
  unint64_t v792;
  __int128 v793;
  _QWORD *v794;
  std::__shared_weak_count *v795;
  unint64_t *v796;
  unint64_t v797;
  uint64_t v798;
  uint64_t v799;
  std::__shared_weak_count *v800;
  void *v801;
  unint64_t *v802;
  unint64_t v803;
  uint64_t v804;
  int v805;
  void *v806;
  unint64_t v807;
  unint64_t v808;
  unint64_t v809;
  unint64_t v810;
  unint64_t v811;
  unint64_t v812;
  unint64_t *p_shared_owners;
  unint64_t v814;
  std::__shared_weak_count *v815;
  unint64_t *v816;
  unint64_t v817;
  std::__shared_weak_count *v818;
  unint64_t *v819;
  unint64_t v820;
  std::__shared_weak_count *v821;
  unint64_t *v822;
  unint64_t v823;
  std::__shared_weak_count *v824;
  unint64_t *v825;
  unint64_t v826;
  unint64_t *v827;
  unint64_t v828;
  std::__shared_weak_count *v829;
  unint64_t *v830;
  unint64_t v831;
  std::__shared_weak_count *v832;
  unint64_t *v833;
  unint64_t v834;
  std::__shared_weak_count *v835;
  unint64_t *v836;
  unint64_t v837;
  unint64_t *v838;
  unint64_t *v839;
  unint64_t v840;
  std::__shared_weak_count *v841;
  unint64_t *v842;
  unint64_t v843;
  std::__shared_weak_count *v844;
  unint64_t *v845;
  unint64_t v846;
  std::__shared_weak_count *v847;
  unint64_t *v848;
  unint64_t v849;
  unint64_t *v850;
  unint64_t *v851;
  unint64_t v852;
  std::__shared_weak_count *v853;
  unint64_t *v854;
  unint64_t v855;
  std::__shared_weak_count *v856;
  unint64_t *v857;
  unint64_t v858;
  std::__shared_weak_count *v859;
  unint64_t *v860;
  unint64_t v861;
  unint64_t *v862;
  unint64_t *v863;
  unint64_t v864;
  std::__shared_weak_count *v865;
  unint64_t *v866;
  unint64_t v867;
  std::__shared_weak_count *v868;
  unint64_t *v869;
  unint64_t v870;
  std::__shared_weak_count *v871;
  unint64_t *v872;
  unint64_t v873;
  unint64_t *v874;
  unint64_t *v875;
  unint64_t v876;
  std::__shared_weak_count *v877;
  unint64_t *v878;
  unint64_t v879;
  std::__shared_weak_count *v880;
  unint64_t *v881;
  unint64_t v882;
  std::__shared_weak_count *v883;
  unint64_t *v884;
  unint64_t v885;
  unint64_t *v886;
  unint64_t *v887;
  unint64_t v888;
  std::__shared_weak_count *v889;
  unint64_t *v890;
  unint64_t v891;
  std::__shared_weak_count *v892;
  unint64_t *v893;
  unint64_t v894;
  std::__shared_weak_count *v895;
  unint64_t *v896;
  unint64_t v897;
  unint64_t *v898;
  unint64_t *v899;
  unint64_t v900;
  std::__shared_weak_count *v901;
  unint64_t *v902;
  unint64_t v903;
  std::__shared_weak_count *v904;
  unint64_t *v905;
  unint64_t v906;
  std::__shared_weak_count *v907;
  unint64_t *v908;
  unint64_t v909;
  unint64_t *v910;
  unint64_t *v911;
  unint64_t v912;
  std::__shared_weak_count *v913;
  unint64_t *v914;
  unint64_t v915;
  std::__shared_weak_count *v916;
  unint64_t *v917;
  unint64_t v918;
  std::__shared_weak_count *v919;
  unint64_t *v920;
  unint64_t v921;
  unint64_t *v922;
  unint64_t *v923;
  unint64_t v924;
  std::__shared_weak_count *v925;
  unint64_t *v926;
  unint64_t v927;
  std::__shared_weak_count *v928;
  unint64_t *v929;
  unint64_t v930;
  std::__shared_weak_count *v931;
  unint64_t *v932;
  unint64_t v933;
  unint64_t *v934;
  unint64_t *v935;
  unint64_t v936;
  std::__shared_weak_count *v937;
  unint64_t *v938;
  unint64_t v939;
  std::__shared_weak_count *v940;
  unint64_t *v941;
  unint64_t v942;
  std::__shared_weak_count *v943;
  unint64_t *v944;
  unint64_t v945;
  unint64_t *v946;
  unint64_t *v947;
  unint64_t v948;
  std::__shared_weak_count *v949;
  unint64_t *v950;
  unint64_t v951;
  std::__shared_weak_count *v952;
  unint64_t *v953;
  unint64_t v954;
  std::__shared_weak_count *v955;
  unint64_t *v956;
  unint64_t v957;
  unint64_t *v958;
  unint64_t *v959;
  unint64_t v960;
  std::__shared_weak_count *v961;
  unint64_t *v962;
  unint64_t v963;
  std::__shared_weak_count *v964;
  unint64_t *v965;
  unint64_t v966;
  std::__shared_weak_count *v967;
  unint64_t *v968;
  unint64_t v969;
  unint64_t *v970;
  unint64_t *v971;
  unint64_t v972;
  std::__shared_weak_count *v973;
  unint64_t *v974;
  unint64_t v975;
  std::__shared_weak_count *v976;
  unint64_t *v977;
  unint64_t v978;
  std::__shared_weak_count *v979;
  unint64_t *v980;
  unint64_t v981;
  unint64_t *v982;
  unint64_t *v983;
  unint64_t v984;
  std::__shared_weak_count *v985;
  unint64_t *v986;
  unint64_t v987;
  std::__shared_weak_count *v988;
  unint64_t *v989;
  unint64_t v990;
  std::__shared_weak_count *v991;
  unint64_t *v992;
  unint64_t v993;
  unint64_t *v994;
  int v995;
  unint64_t *v996;
  unint64_t v997;
  void *v998;
  std::__shared_weak_count *v999;
  unint64_t *v1000;
  unint64_t v1001;
  std::__shared_weak_count *v1002;
  unint64_t *v1003;
  unint64_t v1004;
  std::__shared_weak_count *v1005;
  unint64_t *v1006;
  unint64_t v1007;
  unint64_t *v1008;
  unint64_t *v1009;
  unint64_t v1010;
  std::__shared_weak_count *v1011;
  unint64_t *v1012;
  unint64_t v1013;
  std::__shared_weak_count *v1014;
  unint64_t *v1015;
  unint64_t v1016;
  std::__shared_weak_count *v1017;
  unint64_t *v1018;
  unint64_t v1019;
  unint64_t *v1020;
  unint64_t *v1021;
  unint64_t v1022;
  std::__shared_weak_count *v1023;
  unint64_t *v1024;
  unint64_t v1025;
  std::__shared_weak_count *v1026;
  unint64_t *v1027;
  unint64_t v1028;
  std::__shared_weak_count *v1029;
  unint64_t *v1030;
  unint64_t v1031;
  unint64_t *v1032;
  unint64_t *v1033;
  unint64_t v1034;
  std::__shared_weak_count *v1035;
  unint64_t *v1036;
  unint64_t v1037;
  std::__shared_weak_count *v1038;
  unint64_t *v1039;
  unint64_t v1040;
  std::__shared_weak_count *v1041;
  unint64_t *v1042;
  unint64_t v1043;
  unint64_t *v1044;
  unint64_t *v1045;
  unint64_t v1046;
  std::__shared_weak_count *v1047;
  unint64_t *v1048;
  unint64_t v1049;
  std::__shared_weak_count *v1050;
  unint64_t *v1051;
  unint64_t v1052;
  std::__shared_weak_count *v1053;
  unint64_t *v1054;
  unint64_t v1055;
  unint64_t *v1056;
  unint64_t *v1057;
  unint64_t v1058;
  std::__shared_weak_count *v1059;
  unint64_t *v1060;
  unint64_t v1061;
  std::__shared_weak_count *v1062;
  unint64_t *v1063;
  unint64_t v1064;
  std::__shared_weak_count *v1065;
  unint64_t *v1066;
  unint64_t v1067;
  unint64_t *v1068;
  unint64_t *v1069;
  unint64_t v1070;
  std::__shared_weak_count *v1071;
  unint64_t *v1072;
  unint64_t v1073;
  std::__shared_weak_count *v1074;
  unint64_t *v1075;
  unint64_t v1076;
  std::__shared_weak_count *v1077;
  unint64_t *v1078;
  unint64_t v1079;
  unint64_t *v1080;
  unint64_t *v1081;
  unint64_t v1082;
  std::__shared_weak_count *v1083;
  unint64_t *v1084;
  unint64_t v1085;
  std::__shared_weak_count *v1086;
  unint64_t *v1087;
  unint64_t v1088;
  std::__shared_weak_count *v1089;
  unint64_t *v1090;
  unint64_t v1091;
  unint64_t *v1092;
  unint64_t *v1093;
  unint64_t v1094;
  std::__shared_weak_count *v1095;
  unint64_t *v1096;
  unint64_t v1097;
  std::__shared_weak_count *v1098;
  unint64_t *v1099;
  unint64_t v1100;
  std::__shared_weak_count *v1101;
  unint64_t *v1102;
  unint64_t v1103;
  unint64_t *v1104;
  unint64_t *v1105;
  unint64_t v1106;
  std::__shared_weak_count *v1107;
  unint64_t *v1108;
  unint64_t v1109;
  std::__shared_weak_count *v1110;
  unint64_t *v1111;
  unint64_t v1112;
  std::__shared_weak_count *v1113;
  unint64_t *v1114;
  unint64_t v1115;
  unint64_t *v1116;
  unint64_t *v1117;
  unint64_t v1118;
  std::__shared_weak_count *v1119;
  unint64_t *v1120;
  unint64_t v1121;
  std::__shared_weak_count *v1122;
  unint64_t *v1123;
  unint64_t v1124;
  std::__shared_weak_count *v1125;
  unint64_t *v1126;
  unint64_t v1127;
  unint64_t *v1128;
  unint64_t *v1129;
  unint64_t v1130;
  std::__shared_weak_count *v1131;
  unint64_t *v1132;
  unint64_t v1133;
  std::__shared_weak_count *v1134;
  unint64_t *v1135;
  unint64_t v1136;
  std::__shared_weak_count *v1137;
  unint64_t *v1138;
  unint64_t v1139;
  unint64_t *v1140;
  unint64_t *v1141;
  unint64_t v1142;
  std::__shared_weak_count *v1143;
  unint64_t *v1144;
  unint64_t v1145;
  std::__shared_weak_count *v1146;
  unint64_t *v1147;
  unint64_t v1148;
  std::__shared_weak_count *v1149;
  unint64_t *v1150;
  unint64_t v1151;
  unint64_t *v1152;
  __int128 v1153;
  __int128 v1154;
  _BYTE v1155[12];
  int v1156;
  void *v1157[2];
  __int128 v1158;
  void *v1159;
  char v1160;
  char v1161;
  char v1162;
  char v1163;
  uint64_t (**v1164)();
  uint64_t v1165;
  std::__shared_weak_count *v1166;
  __int128 v1167;
  __int128 v1168;
  _BYTE v1169[12];
  int v1170;
  void *v1171;
  char v1172;
  void *v1173;
  char v1174;
  char v1175;
  char v1176;
  char v1177;
  __int128 v1178;
  void *v1179;
  std::__shared_weak_count *v1180;
  uint64_t v1181;
  int v1182;
  void *v1183;
  int v1184;
  __int16 v1185;
  uint64_t (**v1186)();
  void *v1187;
  void *__p;
  uint64_t v1189;
  int v1190;
  char v1191;
  void *v1192;
  int v1193;
  __int16 v1194;
  char v1195;
  uint64_t (**v1196)();
  std::__shared_weak_count *v1197;
  char v1198;
  uint64_t v1199;
  uint64_t (**v1200)();
  std::__shared_weak_count *v1201;
  _BYTE v1202[24];
  uint64_t v1203;
  uint64_t v1204;
  _QWORD v1205[5];

  v1205[2] = *MEMORY[0x24BDAC8D0];
  switch(a1)
  {
    case 0:
    case 6:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 23:
    case 24:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 33:
    case 34:
    case 35:
    case 36:
    case 39:
    case 40:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
      abort();
    case 1:
      v3 = **a2;
      if (v3 == 1)
      {
        v117 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F91C0;
        sub_20B064AD0(v117, (uint64_t *)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v118 = (_QWORD *)operator new();
          v119 = *(_QWORD *)v1202;
          *v118 = &off_24C3F92B8;
          v118[1] = 0;
          v118[2] = 0;
          v118[3] = v119;
        }
        else
        {
          v118 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v118;
        *(_QWORD *)v1202 = 0;
        sub_20AF81A74((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v283 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v284 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v285 = __ldaxr(v284);
          while (__stlxr(v285 - 1, v284));
          if (!v285)
          {
            ((void (*)(std::__shared_weak_count *))v283->__on_zero_shared)(v283);
            std::__shared_weak_count::__release_weak(v283);
          }
        }
        v286 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v286)
        {
          *(_QWORD *)v286 = off_24C414820;
          v287 = *(unsigned int *)(v286 + 40);
          if ((_DWORD)v287 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v287])(&v1200, v286 + 16);
          *(_DWORD *)(v286 + 40) = -1;
          MEMORY[0x20BD3583C](v286, 0x10A3C40A1F8E8FFLL);
        }
        v289 = (void *)*((_QWORD *)&v1153 + 1);
        v288 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v290 = (unint64_t *)(v1154 + 8);
          do
            v291 = __ldxr(v290);
          while (__stxr(v291 + 1, v290));
          v292 = v1156;
          v294 = (void *)*((_QWORD *)&v1154 + 1);
          v293 = *(_QWORD *)v1155;
          do
            v295 = __ldxr(v290);
          while (__stxr(v295 + 1, v290));
          do
            v296 = __ldxr(v290);
          while (__stxr(v296 + 1, v290));
          do
            v297 = __ldaxr(v290);
          while (__stlxr(v297 - 1, v290));
          if (!v297)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
          do
            v298 = __ldaxr(v290);
          while (__stlxr(v298 - 1, v290));
          if (!v298)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v299 = __ldxr(v290);
          while (__stxr(v299 + 1, v290));
          do
            v300 = __ldxr(v290);
          while (__stxr(v300 + 1, v290));
        }
        else
        {
          v292 = v1156;
          v294 = (void *)*((_QWORD *)&v1154 + 1);
          v293 = *(_QWORD *)v1155;
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v289;
        v1180 = v288;
        v1181 = v293;
        v1182 = v292;
        v1183 = v294;
        v1184 = 1;
        v1185 = 256;
        if (v288)
        {
          p_shared_owners = (unint64_t *)&v288->__shared_owners_;
          do
            v814 = __ldaxr(p_shared_owners);
          while (__stlxr(v814 - 1, p_shared_owners));
          if (!v814)
          {
            ((void (*)(std::__shared_weak_count *))v288->__on_zero_shared)(v288);
            std::__shared_weak_count::__release_weak(v288);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v289;
        __p = v288;
        v1189 = v293;
        v1190 = v292;
        v1192 = v294;
        v1193 = 1;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v815 = v1197;
          if (v1197)
          {
            v816 = (unint64_t *)&v1197->__shared_owners_;
            do
              v817 = __ldaxr(v816);
            while (__stlxr(v817 - 1, v816));
            if (!v817)
            {
              ((void (*)(std::__shared_weak_count *))v815->__on_zero_shared)(v815);
              std::__shared_weak_count::__release_weak(v815);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v818 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v819 = (unint64_t *)((char *)__p + 8);
            do
              v820 = __ldaxr(v819);
            while (__stlxr(v820 - 1, v819));
            if (!v820)
            {
              ((void (*)(std::__shared_weak_count *))v818->__on_zero_shared)(v818);
              std::__shared_weak_count::__release_weak(v818);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v821 = v1180;
        if (v1180)
        {
          v822 = (unint64_t *)&v1180->__shared_owners_;
          do
            v823 = __ldaxr(v822);
          while (__stlxr(v823 - 1, v822));
          if (!v823)
          {
            ((void (*)(std::__shared_weak_count *))v821->__on_zero_shared)(v821);
            std::__shared_weak_count::__release_weak(v821);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F91C0;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v825 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v825);
          while (__stlxr(v826 - 1, v825));
          goto LABEL_1872;
        }
        return;
      }
      if (!v3)
      {
        v4 = a2[2];
        *(_QWORD *)&v1167 = &off_24C3F91C0;
        LODWORD(v5) = *v4;
        v6 = v4[1];
        v7 = *v4 != 0;
        if (*v4 <= 0x20)
          LODWORD(v5) = 32;
        v8 = *(_QWORD *)v4;
        *(_QWORD *)&v1153 = off_24C414F70;
        if (v6)
          v5 = v5;
        else
          v5 = 32;
        *(_QWORD *)v1202 = v8;
        *(_QWORD *)&v1202[8] = v7 | (v5 << 32);
        sub_20B24ED6C((uint64_t)&v1153, 0, 1, (unsigned int *)v1202, 0);
        *(_QWORD *)&v1153 = off_24C414F70;
        v9 = operator new();
        v10 = (uint64_t (**)())v9;
        *(_QWORD *)v9 = off_24C414820;
        v11 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v9 + 8) = DWORD2(v1153);
        *(_BYTE *)(v9 + 16) = 0;
        *(_DWORD *)(v9 + 40) = -1;
        if ((_DWORD)v11 == -1)
        {
          *(_OWORD *)(v9 + 48) = *(_OWORD *)v1157;
          *(_QWORD *)v9 = off_24C414F70;
          v1205[0] = v9;
        }
        else
        {
          ((void (*)(_BYTE *, uint64_t, __int128 *))off_24C4040D0[v11])(v1202, v9 + 16, &v1154);
          *((_DWORD *)v10 + 10) = v11;
          v12 = *(unsigned int *)&v1155[8];
          *((_OWORD *)v10 + 3) = *(_OWORD *)v1157;
          *v10 = (uint64_t (*)())off_24C414F70;
          v1205[0] = v10;
          *(_QWORD *)&v1153 = off_24C414820;
          if ((_DWORD)v12 != -1)
            ((void (*)(_BYTE *, __int128 *))off_24C415AE0[v12])(v1202, &v1154);
        }
        v1200 = v10;
        v535 = (std::__shared_weak_count *)operator new();
        v535->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F92B8;
        v535->__shared_owners_ = 0;
        v535->__shared_weak_owners_ = 0;
        v535[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
        v1201 = v535;
        v1205[0] = 0;
        sub_20AF81A74((uint64_t)&v1167 + 8, (uint64_t *)&v1200);
        v536 = v1201;
        if (v1201)
        {
          v537 = (unint64_t *)&v1201->__shared_owners_;
          do
            v538 = __ldaxr(v537);
          while (__stlxr(v538 - 1, v537));
          if (!v538)
          {
            ((void (*)(std::__shared_weak_count *))v536->__on_zero_shared)(v536);
            std::__shared_weak_count::__release_weak(v536);
          }
        }
        v539 = v1205[0];
        v1205[0] = 0;
        if (v539)
        {
          *(_QWORD *)v539 = off_24C414820;
          v540 = *(unsigned int *)(v539 + 40);
          if ((_DWORD)v540 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v540])(&v1153, v539 + 16);
          *(_DWORD *)(v539 + 40) = -1;
          MEMORY[0x20BD3583C](v539, 0x10A3C40A1F8E8FFLL);
        }
        v542 = (void *)*((_QWORD *)&v1167 + 1);
        v541 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v543 = (unint64_t *)(v1168 + 8);
          do
            v544 = __ldxr(v543);
          while (__stxr(v544 + 1, v543));
          v545 = v1170;
          v547 = (void *)*((_QWORD *)&v1168 + 1);
          v546 = *(_QWORD *)v1169;
          do
            v548 = __ldxr(v543);
          while (__stxr(v548 + 1, v543));
          do
            v549 = __ldxr(v543);
          while (__stxr(v549 + 1, v543));
          do
            v550 = __ldaxr(v543);
          while (__stlxr(v550 - 1, v543));
          if (!v550)
          {
            ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
            std::__shared_weak_count::__release_weak(v541);
          }
          do
            v551 = __ldaxr(v543);
          while (__stlxr(v551 - 1, v543));
          if (!v551)
          {
            ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
            std::__shared_weak_count::__release_weak(v541);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v552 = __ldxr(v543);
          while (__stxr(v552 + 1, v543));
          do
            v553 = __ldxr(v543);
          while (__stxr(v553 + 1, v543));
        }
        else
        {
          v545 = v1170;
          v547 = (void *)*((_QWORD *)&v1168 + 1);
          v546 = *(_QWORD *)v1169;
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v542;
        v1180 = v541;
        v1181 = v546;
        v1182 = v545;
        v1183 = v547;
        v1184 = 1;
        v1185 = 256;
        if (v541)
        {
          v983 = (unint64_t *)&v541->__shared_owners_;
          do
            v984 = __ldaxr(v983);
          while (__stlxr(v984 - 1, v983));
          if (!v984)
          {
            ((void (*)(std::__shared_weak_count *))v541->__on_zero_shared)(v541);
            std::__shared_weak_count::__release_weak(v541);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v542;
        __p = v541;
        v1189 = v546;
        v1190 = v545;
        v1192 = v547;
        v1193 = 1;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v985 = v1197;
          if (v1197)
          {
            v986 = (unint64_t *)&v1197->__shared_owners_;
            do
              v987 = __ldaxr(v986);
            while (__stlxr(v987 - 1, v986));
            if (!v987)
            {
              ((void (*)(std::__shared_weak_count *))v985->__on_zero_shared)(v985);
              std::__shared_weak_count::__release_weak(v985);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v988 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v989 = (unint64_t *)((char *)__p + 8);
            do
              v990 = __ldaxr(v989);
            while (__stlxr(v990 - 1, v989));
            if (!v990)
            {
              ((void (*)(std::__shared_weak_count *))v988->__on_zero_shared)(v988);
              std::__shared_weak_count::__release_weak(v988);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v991 = v1180;
        if (v1180)
        {
          v992 = (unint64_t *)&v1180->__shared_owners_;
          do
            v993 = __ldaxr(v992);
          while (__stlxr(v993 - 1, v992));
          if (!v993)
          {
            ((void (*)(std::__shared_weak_count *))v991->__on_zero_shared)(v991);
            std::__shared_weak_count::__release_weak(v991);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F91C0;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v994 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v994);
          while (__stlxr(v826 - 1, v994));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B011048((unsigned int *)a2[2], *a2[4], (uint64_t)&v1153);
      if (!v1163)
        goto LABEL_610;
      v120 = a2[2];
      v121 = *a2[4];
      *(_QWORD *)&v1178 = *(_QWORD *)a2[3];
      *(_QWORD *)v1202 = &off_24C4051D0;
      if (v120[1])
        v122 = *v120 == 0;
      else
        v122 = 1;
      v123 = v121 << 32;
      if (v122)
        v123 = 0;
      *(_QWORD *)&v1167 = v123 | (*v120 != 0);
      sub_20B036F00(&v1178, v120, (uint64_t *)&v1167, (uint64_t)&v1202[8]);
      *(_QWORD *)&v1167 = &off_24C404100;
      sub_20B064D28((uint64_t)&v1167 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B065434((uint64_t)&v1165, (uint64_t)&v1167);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v124 = v1166;
      if (v1166)
      {
        v125 = (unint64_t *)&v1166->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
      sub_20AEC147C((uint64_t)&v1167 + 8);
      v127 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v128 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v129 = __ldaxr(v128);
        while (__stlxr(v129 - 1, v128));
        goto LABEL_268;
      }
      goto LABEL_619;
    case 2:
      v79 = **a2;
      if (v79 == 1)
      {
        v225 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F9308;
        sub_20B065750(v225, (uint64_t *)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v226 = (_QWORD *)operator new();
          v227 = *(_QWORD *)v1202;
          *v226 = &off_24C3F9400;
          v226[1] = 0;
          v226[2] = 0;
          v226[3] = v227;
        }
        else
        {
          v226 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v226;
        *(_QWORD *)v1202 = 0;
        sub_20AF81E68((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v445 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v446 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v447 = __ldaxr(v446);
          while (__stlxr(v447 - 1, v446));
          if (!v447)
          {
            ((void (*)(std::__shared_weak_count *))v445->__on_zero_shared)(v445);
            std::__shared_weak_count::__release_weak(v445);
          }
        }
        v448 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v448)
        {
          *(_QWORD *)v448 = off_24C414A60;
          v449 = *(unsigned int *)(v448 + 40);
          if ((_DWORD)v449 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v449])(&v1200, v448 + 16);
          *(_DWORD *)(v448 + 40) = -1;
          MEMORY[0x20BD3583C](v448, 0x10A3C40A1F8E8FFLL);
        }
        v451 = (void *)*((_QWORD *)&v1153 + 1);
        v450 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v452 = (unint64_t *)(v1154 + 8);
          do
            v453 = __ldxr(v452);
          while (__stxr(v453 + 1, v452));
          v454 = v1156;
          v456 = (void *)*((_QWORD *)&v1154 + 1);
          v455 = *(_QWORD *)v1155;
          do
            v457 = __ldxr(v452);
          while (__stxr(v457 + 1, v452));
          do
            v458 = __ldxr(v452);
          while (__stxr(v458 + 1, v452));
          do
            v459 = __ldaxr(v452);
          while (__stlxr(v459 - 1, v452));
          if (!v459)
          {
            ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
            std::__shared_weak_count::__release_weak(v450);
          }
          do
            v460 = __ldaxr(v452);
          while (__stlxr(v460 - 1, v452));
          if (!v460)
          {
            ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
            std::__shared_weak_count::__release_weak(v450);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v461 = __ldxr(v452);
          while (__stxr(v461 + 1, v452));
          do
            v462 = __ldxr(v452);
          while (__stxr(v462 + 1, v452));
        }
        else
        {
          v454 = v1156;
          v456 = (void *)*((_QWORD *)&v1154 + 1);
          v455 = *(_QWORD *)v1155;
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v451;
        v1180 = v450;
        v1181 = v455;
        v1182 = 2 * v454;
        v1183 = v456;
        v1184 = 2;
        v1185 = 256;
        if (v450)
        {
          v923 = (unint64_t *)&v450->__shared_owners_;
          do
            v924 = __ldaxr(v923);
          while (__stlxr(v924 - 1, v923));
          if (!v924)
          {
            ((void (*)(std::__shared_weak_count *))v450->__on_zero_shared)(v450);
            std::__shared_weak_count::__release_weak(v450);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v451;
        __p = v450;
        v1189 = v455;
        v1190 = 2 * v454;
        v1192 = v456;
        v1193 = 2;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v925 = v1197;
          if (v1197)
          {
            v926 = (unint64_t *)&v1197->__shared_owners_;
            do
              v927 = __ldaxr(v926);
            while (__stlxr(v927 - 1, v926));
            if (!v927)
            {
              ((void (*)(std::__shared_weak_count *))v925->__on_zero_shared)(v925);
              std::__shared_weak_count::__release_weak(v925);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v928 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v929 = (unint64_t *)((char *)__p + 8);
            do
              v930 = __ldaxr(v929);
            while (__stlxr(v930 - 1, v929));
            if (!v930)
            {
              ((void (*)(std::__shared_weak_count *))v928->__on_zero_shared)(v928);
              std::__shared_weak_count::__release_weak(v928);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v931 = v1180;
        if (v1180)
        {
          v932 = (unint64_t *)&v1180->__shared_owners_;
          do
            v933 = __ldaxr(v932);
          while (__stlxr(v933 - 1, v932));
          if (!v933)
          {
            ((void (*)(std::__shared_weak_count *))v931->__on_zero_shared)(v931);
            std::__shared_weak_count::__release_weak(v931);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F9308;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v934 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v934);
          while (__stlxr(v826 - 1, v934));
          goto LABEL_1872;
        }
        return;
      }
      if (!v79)
      {
        v80 = a2[2];
        LOWORD(v1199) = 0;
        *(_QWORD *)&v1167 = &off_24C3F9308;
        v1200 = &off_24C4041F8;
        sub_20B27B120(v80, (__int16 *)&v1199, (uint64_t)&v1153);
        v81 = operator new();
        v82 = v81;
        *(_QWORD *)v81 = off_24C414A60;
        v83 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v81 + 8) = DWORD2(v1153);
        *(_BYTE *)(v81 + 16) = 0;
        *(_DWORD *)(v81 + 40) = -1;
        if ((_DWORD)v83 == -1)
        {
          *(_OWORD *)(v81 + 48) = *(_OWORD *)v1157;
          *(_QWORD *)v81 = off_24C415000;
          v1205[0] = v81;
        }
        else
        {
          ((void (*)(uint64_t (***)(), uint64_t, __int128 *))off_24C4040D0[v83])(&v1200, v81 + 16, &v1154);
          *(_DWORD *)(v82 + 40) = v83;
          v84 = *(unsigned int *)&v1155[8];
          *(_OWORD *)(v82 + 48) = *(_OWORD *)v1157;
          *(_QWORD *)v82 = off_24C415000;
          v1205[0] = v82;
          *(_QWORD *)&v1153 = off_24C414A60;
          if ((_DWORD)v84 != -1)
            ((void (*)(uint64_t (***)(), __int128 *))off_24C415AE0[v84])(&v1200, &v1154);
        }
        *(_QWORD *)v1202 = v82;
        v714 = (_QWORD *)operator new();
        *v714 = &off_24C3F9400;
        v714[1] = 0;
        v714[2] = 0;
        v714[3] = v82;
        *(_QWORD *)&v1202[8] = v714;
        v1205[0] = 0;
        sub_20AF81E68((uint64_t)&v1167 + 8, (uint64_t *)v1202);
        v715 = *(std::__shared_weak_count **)&v1202[8];
        if (*(_QWORD *)&v1202[8])
        {
          v716 = (unint64_t *)(*(_QWORD *)&v1202[8] + 8);
          do
            v717 = __ldaxr(v716);
          while (__stlxr(v717 - 1, v716));
          if (!v717)
          {
            ((void (*)(std::__shared_weak_count *))v715->__on_zero_shared)(v715);
            std::__shared_weak_count::__release_weak(v715);
          }
        }
        v718 = v1205[0];
        v1205[0] = 0;
        if (v718)
        {
          *(_QWORD *)v718 = off_24C414A60;
          v719 = *(unsigned int *)(v718 + 40);
          if ((_DWORD)v719 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v719])(&v1153, v718 + 16);
          *(_DWORD *)(v718 + 40) = -1;
          MEMORY[0x20BD3583C](v718, 0x10A3C40A1F8E8FFLL);
        }
        v721 = (void *)*((_QWORD *)&v1167 + 1);
        v720 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v722 = (unint64_t *)(v1168 + 8);
          do
            v723 = __ldxr(v722);
          while (__stxr(v723 + 1, v722));
          v724 = v1170;
          v726 = (void *)*((_QWORD *)&v1168 + 1);
          v725 = *(_QWORD *)v1169;
          do
            v727 = __ldxr(v722);
          while (__stxr(v727 + 1, v722));
          do
            v728 = __ldxr(v722);
          while (__stxr(v728 + 1, v722));
          do
            v729 = __ldaxr(v722);
          while (__stlxr(v729 - 1, v722));
          if (!v729)
          {
            ((void (*)(std::__shared_weak_count *))v720->__on_zero_shared)(v720);
            std::__shared_weak_count::__release_weak(v720);
          }
          do
            v730 = __ldaxr(v722);
          while (__stlxr(v730 - 1, v722));
          if (!v730)
          {
            ((void (*)(std::__shared_weak_count *))v720->__on_zero_shared)(v720);
            std::__shared_weak_count::__release_weak(v720);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v731 = __ldxr(v722);
          while (__stxr(v731 + 1, v722));
          do
            v732 = __ldxr(v722);
          while (__stxr(v732 + 1, v722));
        }
        else
        {
          v724 = v1170;
          v726 = (void *)*((_QWORD *)&v1168 + 1);
          v725 = *(_QWORD *)v1169;
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v721;
        v1180 = v720;
        v1181 = v725;
        v1182 = 2 * v724;
        v1183 = v726;
        v1184 = 2;
        v1185 = 256;
        if (v720)
        {
          v1093 = (unint64_t *)&v720->__shared_owners_;
          do
            v1094 = __ldaxr(v1093);
          while (__stlxr(v1094 - 1, v1093));
          if (!v1094)
          {
            ((void (*)(std::__shared_weak_count *))v720->__on_zero_shared)(v720);
            std::__shared_weak_count::__release_weak(v720);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v721;
        __p = v720;
        v1189 = v725;
        v1190 = 2 * v724;
        v1192 = v726;
        v1193 = 2;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1095 = v1197;
          if (v1197)
          {
            v1096 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1097 = __ldaxr(v1096);
            while (__stlxr(v1097 - 1, v1096));
            if (!v1097)
            {
              ((void (*)(std::__shared_weak_count *))v1095->__on_zero_shared)(v1095);
              std::__shared_weak_count::__release_weak(v1095);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1098 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1099 = (unint64_t *)((char *)__p + 8);
            do
              v1100 = __ldaxr(v1099);
            while (__stlxr(v1100 - 1, v1099));
            if (!v1100)
            {
              ((void (*)(std::__shared_weak_count *))v1098->__on_zero_shared)(v1098);
              std::__shared_weak_count::__release_weak(v1098);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1101 = v1180;
        if (v1180)
        {
          v1102 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1103 = __ldaxr(v1102);
          while (__stlxr(v1103 - 1, v1102));
          if (!v1103)
          {
            ((void (*)(std::__shared_weak_count *))v1101->__on_zero_shared)(v1101);
            std::__shared_weak_count::__release_weak(v1101);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F9308;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1104 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1104);
          while (__stlxr(v826 - 1, v1104));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B014D50(*(_QWORD *)a2[3], (unsigned int *)a2[2], *a2[4], (uint64_t)&v1153);
      if (!v1163)
        goto LABEL_610;
      v228 = a2[2];
      v229 = *a2[4];
      *(_QWORD *)&v1178 = *(_QWORD *)a2[3];
      *(_QWORD *)v1202 = &off_24C405448;
      if (v228[1])
        v230 = *v228 == 0;
      else
        v230 = 1;
      v231 = v229 << 32;
      if (v230)
        v231 = 0;
      *(_QWORD *)&v1167 = v231 | (*v228 != 0);
      sub_20B037CA8(&v1178, v228, (uint64_t *)&v1167, (uint64_t)&v1202[8]);
      *(_QWORD *)&v1167 = &off_24C404230;
      sub_20B0659AC((uint64_t)&v1167 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B0660B0((uint64_t)&v1165, (uint64_t)&v1167);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v232 = v1166;
      if (v1166)
      {
        v233 = (unint64_t *)&v1166->__shared_owners_;
        do
          v234 = __ldaxr(v233);
        while (__stlxr(v234 - 1, v233));
        if (!v234)
        {
          ((void (*)(std::__shared_weak_count *))v232->__on_zero_shared)(v232);
          std::__shared_weak_count::__release_weak(v232);
        }
      }
      sub_20AEC147C((uint64_t)&v1167 + 8);
      v127 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v235 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v129 = __ldaxr(v235);
        while (__stlxr(v129 - 1, v235));
        goto LABEL_268;
      }
      goto LABEL_619;
    case 3:
      v24 = **a2;
      if (v24 == 1)
      {
        v143 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F9450;
        sub_20B0663D0(v143, (uint64_t *)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v144 = (_QWORD *)operator new();
          v145 = *(_QWORD *)v1202;
          *v144 = &off_24C3F9548;
          v144[1] = 0;
          v144[2] = 0;
          v144[3] = v145;
        }
        else
        {
          v144 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v144;
        *(_QWORD *)v1202 = 0;
        sub_20AF8225C((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v319 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v320 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v321 = __ldaxr(v320);
          while (__stlxr(v321 - 1, v320));
          if (!v321)
          {
            ((void (*)(std::__shared_weak_count *))v319->__on_zero_shared)(v319);
            std::__shared_weak_count::__release_weak(v319);
          }
        }
        v322 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v322)
        {
          *(_QWORD *)v322 = off_24C414C10;
          v323 = *(unsigned int *)(v322 + 40);
          if ((_DWORD)v323 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v323])(&v1200, v322 + 16);
          *(_DWORD *)(v322 + 40) = -1;
          MEMORY[0x20BD3583C](v322, 0x10A3C40A1F8E8FFLL);
        }
        v325 = (void *)*((_QWORD *)&v1153 + 1);
        v324 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v326 = (unint64_t *)(v1154 + 8);
          do
            v327 = __ldxr(v326);
          while (__stxr(v327 + 1, v326));
          v328 = v1156;
          v330 = (void *)*((_QWORD *)&v1154 + 1);
          v329 = *(_QWORD *)v1155;
          do
            v331 = __ldxr(v326);
          while (__stxr(v331 + 1, v326));
          do
            v332 = __ldxr(v326);
          while (__stxr(v332 + 1, v326));
          do
            v333 = __ldaxr(v326);
          while (__stlxr(v333 - 1, v326));
          if (!v333)
          {
            ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
            std::__shared_weak_count::__release_weak(v324);
          }
          do
            v334 = __ldaxr(v326);
          while (__stlxr(v334 - 1, v326));
          if (!v334)
          {
            ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
            std::__shared_weak_count::__release_weak(v324);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v335 = __ldxr(v326);
          while (__stxr(v335 + 1, v326));
          do
            v336 = __ldxr(v326);
          while (__stxr(v336 + 1, v326));
        }
        else
        {
          v328 = v1156;
          v330 = (void *)*((_QWORD *)&v1154 + 1);
          v329 = *(_QWORD *)v1155;
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v325;
        v1180 = v324;
        v1181 = v329;
        v1182 = 2 * v328;
        v1183 = v330;
        v1184 = 3;
        v1185 = 256;
        if (v324)
        {
          v839 = (unint64_t *)&v324->__shared_owners_;
          do
            v840 = __ldaxr(v839);
          while (__stlxr(v840 - 1, v839));
          if (!v840)
          {
            ((void (*)(std::__shared_weak_count *))v324->__on_zero_shared)(v324);
            std::__shared_weak_count::__release_weak(v324);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v325;
        __p = v324;
        v1189 = v329;
        v1190 = 2 * v328;
        v1192 = v330;
        v1193 = 3;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v841 = v1197;
          if (v1197)
          {
            v842 = (unint64_t *)&v1197->__shared_owners_;
            do
              v843 = __ldaxr(v842);
            while (__stlxr(v843 - 1, v842));
            if (!v843)
            {
              ((void (*)(std::__shared_weak_count *))v841->__on_zero_shared)(v841);
              std::__shared_weak_count::__release_weak(v841);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v844 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v845 = (unint64_t *)((char *)__p + 8);
            do
              v846 = __ldaxr(v845);
            while (__stlxr(v846 - 1, v845));
            if (!v846)
            {
              ((void (*)(std::__shared_weak_count *))v844->__on_zero_shared)(v844);
              std::__shared_weak_count::__release_weak(v844);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v847 = v1180;
        if (v1180)
        {
          v848 = (unint64_t *)&v1180->__shared_owners_;
          do
            v849 = __ldaxr(v848);
          while (__stlxr(v849 - 1, v848));
          if (!v849)
          {
            ((void (*)(std::__shared_weak_count *))v847->__on_zero_shared)(v847);
            std::__shared_weak_count::__release_weak(v847);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F9450;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v850 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v850);
          while (__stlxr(v826 - 1, v850));
          goto LABEL_1872;
        }
        return;
      }
      if (!v24)
      {
        v25 = a2[2];
        *(_QWORD *)&v1167 = &off_24C3F9450;
        v1200 = &off_24C404328;
        sub_20B27B264(v25, word_20B60F0CA, (uint64_t)&v1153);
        v26 = operator new();
        v27 = v26;
        *(_QWORD *)v26 = off_24C414C10;
        v28 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v26 + 8) = DWORD2(v1153);
        *(_BYTE *)(v26 + 16) = 0;
        *(_DWORD *)(v26 + 40) = -1;
        if ((_DWORD)v28 == -1)
        {
          *(_OWORD *)(v26 + 48) = *(_OWORD *)v1157;
          *(_QWORD *)v26 = off_24C415090;
          v1205[0] = v26;
        }
        else
        {
          ((void (*)(uint64_t (***)(), uint64_t, __int128 *))off_24C4040D0[v28])(&v1200, v26 + 16, &v1154);
          *(_DWORD *)(v27 + 40) = v28;
          v29 = *(unsigned int *)&v1155[8];
          *(_OWORD *)(v27 + 48) = *(_OWORD *)v1157;
          *(_QWORD *)v27 = off_24C415090;
          v1205[0] = v27;
          *(_QWORD *)&v1153 = off_24C414C10;
          if ((_DWORD)v29 != -1)
            ((void (*)(uint64_t (***)(), __int128 *))off_24C415AE0[v29])(&v1200, &v1154);
        }
        *(_QWORD *)v1202 = v27;
        v576 = (_QWORD *)operator new();
        *v576 = &off_24C3F9548;
        v576[1] = 0;
        v576[2] = 0;
        v576[3] = v27;
        *(_QWORD *)&v1202[8] = v576;
        v1205[0] = 0;
        sub_20AF8225C((uint64_t)&v1167 + 8, (uint64_t *)v1202);
        v577 = *(std::__shared_weak_count **)&v1202[8];
        if (*(_QWORD *)&v1202[8])
        {
          v578 = (unint64_t *)(*(_QWORD *)&v1202[8] + 8);
          do
            v579 = __ldaxr(v578);
          while (__stlxr(v579 - 1, v578));
          if (!v579)
          {
            ((void (*)(std::__shared_weak_count *))v577->__on_zero_shared)(v577);
            std::__shared_weak_count::__release_weak(v577);
          }
        }
        v580 = v1205[0];
        v1205[0] = 0;
        if (v580)
        {
          *(_QWORD *)v580 = off_24C414C10;
          v581 = *(unsigned int *)(v580 + 40);
          if ((_DWORD)v581 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v581])(&v1153, v580 + 16);
          *(_DWORD *)(v580 + 40) = -1;
          MEMORY[0x20BD3583C](v580, 0x10A3C40A1F8E8FFLL);
        }
        v583 = (void *)*((_QWORD *)&v1167 + 1);
        v582 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v584 = (unint64_t *)(v1168 + 8);
          do
            v585 = __ldxr(v584);
          while (__stxr(v585 + 1, v584));
          v586 = v1170;
          v588 = (void *)*((_QWORD *)&v1168 + 1);
          v587 = *(_QWORD *)v1169;
          do
            v589 = __ldxr(v584);
          while (__stxr(v589 + 1, v584));
          do
            v590 = __ldxr(v584);
          while (__stxr(v590 + 1, v584));
          do
            v591 = __ldaxr(v584);
          while (__stlxr(v591 - 1, v584));
          if (!v591)
          {
            ((void (*)(std::__shared_weak_count *))v582->__on_zero_shared)(v582);
            std::__shared_weak_count::__release_weak(v582);
          }
          do
            v592 = __ldaxr(v584);
          while (__stlxr(v592 - 1, v584));
          if (!v592)
          {
            ((void (*)(std::__shared_weak_count *))v582->__on_zero_shared)(v582);
            std::__shared_weak_count::__release_weak(v582);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v593 = __ldxr(v584);
          while (__stxr(v593 + 1, v584));
          do
            v594 = __ldxr(v584);
          while (__stxr(v594 + 1, v584));
        }
        else
        {
          v586 = v1170;
          v588 = (void *)*((_QWORD *)&v1168 + 1);
          v587 = *(_QWORD *)v1169;
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v583;
        v1180 = v582;
        v1181 = v587;
        v1182 = 2 * v586;
        v1183 = v588;
        v1184 = 3;
        v1185 = 256;
        if (v582)
        {
          v1009 = (unint64_t *)&v582->__shared_owners_;
          do
            v1010 = __ldaxr(v1009);
          while (__stlxr(v1010 - 1, v1009));
          if (!v1010)
          {
            ((void (*)(std::__shared_weak_count *))v582->__on_zero_shared)(v582);
            std::__shared_weak_count::__release_weak(v582);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v583;
        __p = v582;
        v1189 = v587;
        v1190 = 2 * v586;
        v1192 = v588;
        v1193 = 3;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1011 = v1197;
          if (v1197)
          {
            v1012 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1013 = __ldaxr(v1012);
            while (__stlxr(v1013 - 1, v1012));
            if (!v1013)
            {
              ((void (*)(std::__shared_weak_count *))v1011->__on_zero_shared)(v1011);
              std::__shared_weak_count::__release_weak(v1011);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1014 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1015 = (unint64_t *)((char *)__p + 8);
            do
              v1016 = __ldaxr(v1015);
            while (__stlxr(v1016 - 1, v1015));
            if (!v1016)
            {
              ((void (*)(std::__shared_weak_count *))v1014->__on_zero_shared)(v1014);
              std::__shared_weak_count::__release_weak(v1014);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1017 = v1180;
        if (v1180)
        {
          v1018 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1019 = __ldaxr(v1018);
          while (__stlxr(v1019 - 1, v1018));
          if (!v1019)
          {
            ((void (*)(std::__shared_weak_count *))v1017->__on_zero_shared)(v1017);
            std::__shared_weak_count::__release_weak(v1017);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F9450;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1020 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1020);
          while (__stlxr(v826 - 1, v1020));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B0157EC(*(_QWORD *)a2[3], (unsigned int *)a2[2], *a2[4], (uint64_t)&v1153);
      if (!v1163)
        goto LABEL_610;
      v146 = a2[2];
      v147 = *a2[4];
      *(_QWORD *)&v1178 = *(_QWORD *)a2[3];
      *(_QWORD *)v1202 = &off_24C405688;
      if (v146[1])
        v148 = *v146 == 0;
      else
        v148 = 1;
      v149 = v147 << 32;
      if (v148)
        v149 = 0;
      *(_QWORD *)&v1167 = v149 | (*v146 != 0);
      sub_20B038A20(&v1178, v146, (uint64_t *)&v1167, (uint64_t)&v1202[8]);
      *(_QWORD *)&v1167 = &off_24C404360;
      sub_20B06662C((uint64_t)&v1167 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B066D38((uint64_t)&v1165, (uint64_t)&v1167);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v150 = v1166;
      if (v1166)
      {
        v151 = (unint64_t *)&v1166->__shared_owners_;
        do
          v152 = __ldaxr(v151);
        while (__stlxr(v152 - 1, v151));
        if (!v152)
        {
          ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
          std::__shared_weak_count::__release_weak(v150);
        }
      }
      sub_20AEC147C((uint64_t)&v1167 + 8);
      v127 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v153 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v129 = __ldaxr(v153);
        while (__stlxr(v129 - 1, v153));
        goto LABEL_268;
      }
      goto LABEL_619;
    case 4:
      v30 = **a2;
      if (v30 == 1)
      {
        v154 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F9598;
        sub_20B067058(v154, (uint64_t *)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v155 = (_QWORD *)operator new();
          v156 = *(_QWORD *)v1202;
          *v155 = &off_24C3F9690;
          v155[1] = 0;
          v155[2] = 0;
          v155[3] = v156;
        }
        else
        {
          v155 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v155;
        *(_QWORD *)v1202 = 0;
        sub_20AF82650((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v337 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v338 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v339 = __ldaxr(v338);
          while (__stlxr(v339 - 1, v338));
          if (!v339)
          {
            ((void (*)(std::__shared_weak_count *))v337->__on_zero_shared)(v337);
            std::__shared_weak_count::__release_weak(v337);
          }
        }
        v340 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v340)
        {
          *(_QWORD *)v340 = off_24C414DC0;
          v341 = *(unsigned int *)(v340 + 40);
          if ((_DWORD)v341 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v341])(&v1200, v340 + 16);
          *(_DWORD *)(v340 + 40) = -1;
          MEMORY[0x20BD3583C](v340, 0x10A3C40A1F8E8FFLL);
        }
        v343 = (void *)*((_QWORD *)&v1153 + 1);
        v342 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v344 = (unint64_t *)(v1154 + 8);
          do
            v345 = __ldxr(v344);
          while (__stxr(v345 + 1, v344));
          v346 = v1156;
          v348 = (void *)*((_QWORD *)&v1154 + 1);
          v347 = *(_QWORD *)v1155;
          do
            v349 = __ldxr(v344);
          while (__stxr(v349 + 1, v344));
          do
            v350 = __ldxr(v344);
          while (__stxr(v350 + 1, v344));
          do
            v351 = __ldaxr(v344);
          while (__stlxr(v351 - 1, v344));
          if (!v351)
          {
            ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
            std::__shared_weak_count::__release_weak(v342);
          }
          do
            v352 = __ldaxr(v344);
          while (__stlxr(v352 - 1, v344));
          if (!v352)
          {
            ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
            std::__shared_weak_count::__release_weak(v342);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v353 = __ldxr(v344);
          while (__stxr(v353 + 1, v344));
          do
            v354 = __ldxr(v344);
          while (__stxr(v354 + 1, v344));
        }
        else
        {
          v346 = v1156;
          v348 = (void *)*((_QWORD *)&v1154 + 1);
          v347 = *(_QWORD *)v1155;
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v343;
        v1180 = v342;
        v1181 = v347;
        v1182 = 4 * v346;
        v1183 = v348;
        v1184 = 4;
        v1185 = 256;
        if (v342)
        {
          v851 = (unint64_t *)&v342->__shared_owners_;
          do
            v852 = __ldaxr(v851);
          while (__stlxr(v852 - 1, v851));
          if (!v852)
          {
            ((void (*)(std::__shared_weak_count *))v342->__on_zero_shared)(v342);
            std::__shared_weak_count::__release_weak(v342);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v343;
        __p = v342;
        v1189 = v347;
        v1190 = 4 * v346;
        v1192 = v348;
        v1193 = 4;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v853 = v1197;
          if (v1197)
          {
            v854 = (unint64_t *)&v1197->__shared_owners_;
            do
              v855 = __ldaxr(v854);
            while (__stlxr(v855 - 1, v854));
            if (!v855)
            {
              ((void (*)(std::__shared_weak_count *))v853->__on_zero_shared)(v853);
              std::__shared_weak_count::__release_weak(v853);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v856 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v857 = (unint64_t *)((char *)__p + 8);
            do
              v858 = __ldaxr(v857);
            while (__stlxr(v858 - 1, v857));
            if (!v858)
            {
              ((void (*)(std::__shared_weak_count *))v856->__on_zero_shared)(v856);
              std::__shared_weak_count::__release_weak(v856);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v859 = v1180;
        if (v1180)
        {
          v860 = (unint64_t *)&v1180->__shared_owners_;
          do
            v861 = __ldaxr(v860);
          while (__stlxr(v861 - 1, v860));
          if (!v861)
          {
            ((void (*)(std::__shared_weak_count *))v859->__on_zero_shared)(v859);
            std::__shared_weak_count::__release_weak(v859);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F9598;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v862 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v862);
          while (__stlxr(v826 - 1, v862));
          goto LABEL_1872;
        }
      }
      else if (v30)
      {
        sub_20B016288(*(_QWORD *)a2[3], (unsigned int *)a2[2], *a2[4], (uint64_t)&v1153);
        if (v1163)
        {
          v157 = a2[2];
          v158 = *a2[4];
          *(_QWORD *)&v1178 = *(_QWORD *)a2[3];
          *(_QWORD *)v1202 = &off_24C405900;
          if (v157[1])
            v159 = *v157 == 0;
          else
            v159 = 1;
          v160 = v158 << 32;
          if (v159)
            v160 = 0;
          *(_QWORD *)&v1167 = v160 | (*v157 != 0);
          sub_20B039A14(&v1178, v157, (uint64_t *)&v1167, (uint64_t)&v1202[8]);
          *(_QWORD *)&v1167 = &off_24C404490;
          sub_20B0672B4((uint64_t)&v1167 + 8, (uint64_t)v1202);
          v1164 = &off_24C3F2D20;
          sub_20B0679B8((uint64_t)&v1165, (uint64_t)&v1167);
          sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
          sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
          sub_20B008430((uint64_t)&v1178);
          v1164 = &off_24C3F2D20;
          v161 = v1166;
          if (v1166)
          {
            v162 = (unint64_t *)&v1166->__shared_owners_;
            do
              v163 = __ldaxr(v162);
            while (__stlxr(v163 - 1, v162));
            if (!v163)
            {
              ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
              std::__shared_weak_count::__release_weak(v161);
            }
          }
          sub_20AEC147C((uint64_t)&v1167 + 8);
          v127 = *(std::__shared_weak_count **)&v1202[16];
          if (*(_QWORD *)&v1202[16])
          {
            v164 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
            do
              v129 = __ldaxr(v164);
            while (__stlxr(v129 - 1, v164));
LABEL_268:
            if (!v129)
            {
              ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
              std::__shared_weak_count::__release_weak(v127);
            }
          }
        }
        else
        {
LABEL_610:
          v1178 = v1153;
          sub_20AECEBD0(&v1179, &v1154);
          sub_20B009CA0((uint64_t)a2[1], &v1178);
          if ((_BYTE)v1193)
          {
            if ((_BYTE)v1192)
            {
              if (v1191 < 0)
                operator delete(__p);
              if (SHIBYTE(v1186) < 0)
                operator delete(v1183);
            }
            if ((_BYTE)v1182 && SHIBYTE(v1181) < 0)
              operator delete(v1179);
          }
        }
LABEL_619:
        if (!v1163 && v1162)
        {
          if (v1161)
          {
            if (v1160 < 0)
              operator delete(v1159);
            if (SBYTE7(v1158) < 0)
              operator delete(v1157[0]);
          }
          if (v1155[8] && (v1155[7] & 0x80000000) != 0)
            operator delete((void *)v1154);
        }
      }
      else
      {
        v31 = a2[2];
        LODWORD(v1199) = 0;
        *(_QWORD *)&v1167 = &off_24C3F9598;
        v1200 = &off_24C404458;
        sub_20B27B3A8(v31, (int *)&v1199, (uint64_t)&v1153);
        v32 = operator new();
        v33 = v32;
        *(_QWORD *)v32 = off_24C414DC0;
        v34 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v32 + 8) = DWORD2(v1153);
        *(_BYTE *)(v32 + 16) = 0;
        *(_DWORD *)(v32 + 40) = -1;
        if ((_DWORD)v34 == -1)
        {
          *(_OWORD *)(v32 + 48) = *(_OWORD *)v1157;
          *(_QWORD *)v32 = off_24C415120;
          v1205[0] = v32;
        }
        else
        {
          ((void (*)(uint64_t (***)(), uint64_t, __int128 *))off_24C4040D0[v34])(&v1200, v32 + 16, &v1154);
          *(_DWORD *)(v33 + 40) = v34;
          v35 = *(unsigned int *)&v1155[8];
          *(_OWORD *)(v33 + 48) = *(_OWORD *)v1157;
          *(_QWORD *)v33 = off_24C415120;
          v1205[0] = v33;
          *(_QWORD *)&v1153 = off_24C414DC0;
          if ((_DWORD)v35 != -1)
            ((void (*)(uint64_t (***)(), __int128 *))off_24C415AE0[v35])(&v1200, &v1154);
        }
        *(_QWORD *)v1202 = v33;
        v595 = (_QWORD *)operator new();
        *v595 = &off_24C3F9690;
        v595[1] = 0;
        v595[2] = 0;
        v595[3] = v33;
        *(_QWORD *)&v1202[8] = v595;
        v1205[0] = 0;
        sub_20AF82650((uint64_t)&v1167 + 8, (uint64_t *)v1202);
        v596 = *(std::__shared_weak_count **)&v1202[8];
        if (*(_QWORD *)&v1202[8])
        {
          v597 = (unint64_t *)(*(_QWORD *)&v1202[8] + 8);
          do
            v598 = __ldaxr(v597);
          while (__stlxr(v598 - 1, v597));
          if (!v598)
          {
            ((void (*)(std::__shared_weak_count *))v596->__on_zero_shared)(v596);
            std::__shared_weak_count::__release_weak(v596);
          }
        }
        v599 = v1205[0];
        v1205[0] = 0;
        if (v599)
        {
          *(_QWORD *)v599 = off_24C414DC0;
          v600 = *(unsigned int *)(v599 + 40);
          if ((_DWORD)v600 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v600])(&v1153, v599 + 16);
          *(_DWORD *)(v599 + 40) = -1;
          MEMORY[0x20BD3583C](v599, 0x10A3C40A1F8E8FFLL);
        }
        v602 = (void *)*((_QWORD *)&v1167 + 1);
        v601 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v603 = (unint64_t *)(v1168 + 8);
          do
            v604 = __ldxr(v603);
          while (__stxr(v604 + 1, v603));
          v605 = v1170;
          v607 = (void *)*((_QWORD *)&v1168 + 1);
          v606 = *(_QWORD *)v1169;
          do
            v608 = __ldxr(v603);
          while (__stxr(v608 + 1, v603));
          do
            v609 = __ldxr(v603);
          while (__stxr(v609 + 1, v603));
          do
            v610 = __ldaxr(v603);
          while (__stlxr(v610 - 1, v603));
          if (!v610)
          {
            ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
            std::__shared_weak_count::__release_weak(v601);
          }
          do
            v611 = __ldaxr(v603);
          while (__stlxr(v611 - 1, v603));
          if (!v611)
          {
            ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
            std::__shared_weak_count::__release_weak(v601);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v612 = __ldxr(v603);
          while (__stxr(v612 + 1, v603));
          do
            v613 = __ldxr(v603);
          while (__stxr(v613 + 1, v603));
        }
        else
        {
          v605 = v1170;
          v607 = (void *)*((_QWORD *)&v1168 + 1);
          v606 = *(_QWORD *)v1169;
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v602;
        v1180 = v601;
        v1181 = v606;
        v1182 = 4 * v605;
        v1183 = v607;
        v1184 = 4;
        v1185 = 256;
        if (v601)
        {
          v1021 = (unint64_t *)&v601->__shared_owners_;
          do
            v1022 = __ldaxr(v1021);
          while (__stlxr(v1022 - 1, v1021));
          if (!v1022)
          {
            ((void (*)(std::__shared_weak_count *))v601->__on_zero_shared)(v601);
            std::__shared_weak_count::__release_weak(v601);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v602;
        __p = v601;
        v1189 = v606;
        v1190 = 4 * v605;
        v1192 = v607;
        v1193 = 4;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1023 = v1197;
          if (v1197)
          {
            v1024 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1025 = __ldaxr(v1024);
            while (__stlxr(v1025 - 1, v1024));
            if (!v1025)
            {
              ((void (*)(std::__shared_weak_count *))v1023->__on_zero_shared)(v1023);
              std::__shared_weak_count::__release_weak(v1023);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1026 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1027 = (unint64_t *)((char *)__p + 8);
            do
              v1028 = __ldaxr(v1027);
            while (__stlxr(v1028 - 1, v1027));
            if (!v1028)
            {
              ((void (*)(std::__shared_weak_count *))v1026->__on_zero_shared)(v1026);
              std::__shared_weak_count::__release_weak(v1026);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1029 = v1180;
        if (v1180)
        {
          v1030 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1031 = __ldaxr(v1030);
          while (__stlxr(v1031 - 1, v1030));
          if (!v1031)
          {
            ((void (*)(std::__shared_weak_count *))v1029->__on_zero_shared)(v1029);
            std::__shared_weak_count::__release_weak(v1029);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F9598;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1032 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1032);
          while (__stlxr(v826 - 1, v1032));
          goto LABEL_1872;
        }
      }
      return;
    case 5:
      v36 = **a2;
      if (v36 == 1)
      {
        v165 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F96E0;
        sub_20B067CD8(v165, (unint64_t)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v166 = (_QWORD *)operator new();
          v167 = *(_QWORD *)v1202;
          *v166 = &off_24C3F97D8;
          v166[1] = 0;
          v166[2] = 0;
          v166[3] = v167;
        }
        else
        {
          v166 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v166;
        *(_QWORD *)v1202 = 0;
        sub_20AF82A40((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v355 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v356 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v357 = __ldaxr(v356);
          while (__stlxr(v357 - 1, v356));
          if (!v357)
          {
            ((void (*)(std::__shared_weak_count *))v355->__on_zero_shared)(v355);
            std::__shared_weak_count::__release_weak(v355);
          }
        }
        v358 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v358)
        {
          *(_QWORD *)v358 = off_24C4148B0;
          v359 = *(unsigned int *)(v358 + 40);
          if ((_DWORD)v359 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v359])(&v1200, v358 + 16);
          *(_DWORD *)(v358 + 40) = -1;
          MEMORY[0x20BD3583C](v358, 0x10A3C40ED729E16);
        }
        v361 = (void *)*((_QWORD *)&v1153 + 1);
        v360 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v362 = (unint64_t *)(v1154 + 8);
          do
            v363 = __ldxr(v362);
          while (__stxr(v363 + 1, v362));
          v364 = *(_QWORD *)&v1155[4];
          v365 = HIDWORD(v1157[0]);
          v366 = (void *)*((_QWORD *)&v1154 + 1);
          do
            v367 = __ldxr(v362);
          while (__stxr(v367 + 1, v362));
          do
            v368 = __ldxr(v362);
          while (__stxr(v368 + 1, v362));
          do
            v369 = __ldaxr(v362);
          while (__stlxr(v369 - 1, v362));
          if (!v369)
          {
            ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
            std::__shared_weak_count::__release_weak(v360);
          }
          do
            v370 = __ldaxr(v362);
          while (__stlxr(v370 - 1, v362));
          if (!v370)
          {
            ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
            std::__shared_weak_count::__release_weak(v360);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v371 = __ldxr(v362);
          while (__stxr(v371 + 1, v362));
          do
            v372 = __ldxr(v362);
          while (__stxr(v372 + 1, v362));
        }
        else
        {
          v364 = *(_QWORD *)&v1155[4];
          v365 = HIDWORD(v1157[0]);
          v366 = (void *)*((_QWORD *)&v1154 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v361;
        v1180 = v360;
        v1181 = v364;
        v1182 = v365;
        v1183 = v366;
        v1184 = 5;
        v1185 = 256;
        if (v360)
        {
          v863 = (unint64_t *)&v360->__shared_owners_;
          do
            v864 = __ldaxr(v863);
          while (__stlxr(v864 - 1, v863));
          if (!v864)
          {
            ((void (*)(std::__shared_weak_count *))v360->__on_zero_shared)(v360);
            std::__shared_weak_count::__release_weak(v360);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v361;
        __p = v360;
        v1189 = v364;
        v1190 = v365;
        v1192 = v366;
        v1193 = 5;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v865 = v1197;
          if (v1197)
          {
            v866 = (unint64_t *)&v1197->__shared_owners_;
            do
              v867 = __ldaxr(v866);
            while (__stlxr(v867 - 1, v866));
            if (!v867)
            {
              ((void (*)(std::__shared_weak_count *))v865->__on_zero_shared)(v865);
              std::__shared_weak_count::__release_weak(v865);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v868 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v869 = (unint64_t *)((char *)__p + 8);
            do
              v870 = __ldaxr(v869);
            while (__stlxr(v870 - 1, v869));
            if (!v870)
            {
              ((void (*)(std::__shared_weak_count *))v868->__on_zero_shared)(v868);
              std::__shared_weak_count::__release_weak(v868);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v871 = v1180;
        if (v1180)
        {
          v872 = (unint64_t *)&v1180->__shared_owners_;
          do
            v873 = __ldaxr(v872);
          while (__stlxr(v873 - 1, v872));
          if (!v873)
          {
            ((void (*)(std::__shared_weak_count *))v871->__on_zero_shared)(v871);
            std::__shared_weak_count::__release_weak(v871);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F96E0;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v874 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v874);
          while (__stlxr(v826 - 1, v874));
          goto LABEL_1872;
        }
        return;
      }
      if (!v36)
      {
        v37 = a2[2];
        LOBYTE(v1199) = 0;
        *(_QWORD *)&v1167 = &off_24C3F96E0;
        v1200 = &off_24C404588;
        sub_20B27B4EC(v37, (char *)&v1199, (unint64_t)&v1153);
        v38 = operator new();
        v39 = v38;
        *(_QWORD *)v38 = off_24C4148B0;
        v40 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v38 + 8) = DWORD2(v1153);
        *(_BYTE *)(v38 + 16) = 0;
        *(_DWORD *)(v38 + 40) = -1;
        if ((_DWORD)v40 == -1)
        {
          v614 = v1158;
          *(_OWORD *)(v38 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v38 + 64) = v614;
          *(_QWORD *)(v38 + 80) = v1159;
          *(_QWORD *)v38 = off_24C4151B0;
          v1205[0] = v38;
        }
        else
        {
          ((void (*)(uint64_t (***)(), uint64_t, __int128 *))off_24C4040D0[v40])(&v1200, v38 + 16, &v1154);
          *(_DWORD *)(v39 + 40) = v40;
          v41 = *(unsigned int *)&v1155[8];
          v42 = v1158;
          *(_OWORD *)(v39 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v39 + 64) = v42;
          *(_QWORD *)(v39 + 80) = v1159;
          *(_QWORD *)v39 = off_24C4151B0;
          v1205[0] = v39;
          *(_QWORD *)&v1153 = off_24C4148B0;
          if ((_DWORD)v41 != -1)
            ((void (*)(uint64_t (***)(), __int128 *))off_24C415AE0[v41])(&v1200, &v1154);
        }
        *(_QWORD *)v1202 = v39;
        v615 = (_QWORD *)operator new();
        *v615 = &off_24C3F97D8;
        v615[1] = 0;
        v615[2] = 0;
        v615[3] = v39;
        *(_QWORD *)&v1202[8] = v615;
        v1205[0] = 0;
        sub_20AF82A40((uint64_t)&v1167 + 8, (uint64_t *)v1202);
        v616 = *(std::__shared_weak_count **)&v1202[8];
        if (*(_QWORD *)&v1202[8])
        {
          v617 = (unint64_t *)(*(_QWORD *)&v1202[8] + 8);
          do
            v618 = __ldaxr(v617);
          while (__stlxr(v618 - 1, v617));
          if (!v618)
          {
            ((void (*)(std::__shared_weak_count *))v616->__on_zero_shared)(v616);
            std::__shared_weak_count::__release_weak(v616);
          }
        }
        v619 = v1205[0];
        v1205[0] = 0;
        if (v619)
        {
          *(_QWORD *)v619 = off_24C4148B0;
          v620 = *(unsigned int *)(v619 + 40);
          if ((_DWORD)v620 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v620])(&v1153, v619 + 16);
          *(_DWORD *)(v619 + 40) = -1;
          MEMORY[0x20BD3583C](v619, 0x10A3C40ED729E16);
        }
        v622 = (void *)*((_QWORD *)&v1167 + 1);
        v621 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v623 = (unint64_t *)(v1168 + 8);
          do
            v624 = __ldxr(v623);
          while (__stxr(v624 + 1, v623));
          v625 = *(_QWORD *)&v1169[4];
          v626 = HIDWORD(v1171);
          v627 = (void *)*((_QWORD *)&v1168 + 1);
          do
            v628 = __ldxr(v623);
          while (__stxr(v628 + 1, v623));
          do
            v629 = __ldxr(v623);
          while (__stxr(v629 + 1, v623));
          do
            v630 = __ldaxr(v623);
          while (__stlxr(v630 - 1, v623));
          if (!v630)
          {
            ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
            std::__shared_weak_count::__release_weak(v621);
          }
          do
            v631 = __ldaxr(v623);
          while (__stlxr(v631 - 1, v623));
          if (!v631)
          {
            ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
            std::__shared_weak_count::__release_weak(v621);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v632 = __ldxr(v623);
          while (__stxr(v632 + 1, v623));
          do
            v633 = __ldxr(v623);
          while (__stxr(v633 + 1, v623));
        }
        else
        {
          v625 = *(_QWORD *)&v1169[4];
          v626 = HIDWORD(v1171);
          v627 = (void *)*((_QWORD *)&v1168 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v622;
        v1180 = v621;
        v1181 = v625;
        v1182 = v626;
        v1183 = v627;
        v1184 = 5;
        v1185 = 256;
        if (v621)
        {
          v1033 = (unint64_t *)&v621->__shared_owners_;
          do
            v1034 = __ldaxr(v1033);
          while (__stlxr(v1034 - 1, v1033));
          if (!v1034)
          {
            ((void (*)(std::__shared_weak_count *))v621->__on_zero_shared)(v621);
            std::__shared_weak_count::__release_weak(v621);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v622;
        __p = v621;
        v1189 = v625;
        v1190 = v626;
        v1192 = v627;
        v1193 = 5;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1035 = v1197;
          if (v1197)
          {
            v1036 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1037 = __ldaxr(v1036);
            while (__stlxr(v1037 - 1, v1036));
            if (!v1037)
            {
              ((void (*)(std::__shared_weak_count *))v1035->__on_zero_shared)(v1035);
              std::__shared_weak_count::__release_weak(v1035);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1038 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1039 = (unint64_t *)((char *)__p + 8);
            do
              v1040 = __ldaxr(v1039);
            while (__stlxr(v1040 - 1, v1039));
            if (!v1040)
            {
              ((void (*)(std::__shared_weak_count *))v1038->__on_zero_shared)(v1038);
              std::__shared_weak_count::__release_weak(v1038);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1041 = v1180;
        if (v1180)
        {
          v1042 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1043 = __ldaxr(v1042);
          while (__stlxr(v1043 - 1, v1042));
          if (!v1043)
          {
            ((void (*)(std::__shared_weak_count *))v1041->__on_zero_shared)(v1041);
            std::__shared_weak_count::__release_weak(v1041);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F96E0;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1044 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1044);
          while (__stlxr(v826 - 1, v1044));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B016D2C((unsigned int *)a2[2], *a2[4], (uint64_t)&v1167);
      if (!v1177)
        goto LABEL_734;
      v168 = a2[2];
      v169 = *(_QWORD *)a2[3];
      v170 = (unsigned int *)a2[4];
      *(_QWORD *)v1202 = &off_24C405B78;
      v171 = *v168;
      if (v168[1])
        v172 = v171 == 0;
      else
        v172 = 1;
      v173 = (unint64_t)*v170 << 32;
      if (v172)
        v173 = 0;
      sub_20B03A78C((_BOOL8)&v1202[8], v169, v168, v173 | (2 * (v171 != 0)));
      *(_QWORD *)&v1153 = &off_24C4045C0;
      sub_20B067FBC((uint64_t)&v1153 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B068768((uint64_t)&v1165, (uint64_t)&v1153);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v174 = v1166;
      if (v1166)
      {
        v175 = (unint64_t *)&v1166->__shared_owners_;
        do
          v176 = __ldaxr(v175);
        while (__stlxr(v176 - 1, v175));
        if (!v176)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      sub_20AEC147C((uint64_t)&v1153 + 8);
      v140 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v177 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v142 = __ldaxr(v177);
        while (__stlxr(v142 - 1, v177));
        goto LABEL_339;
      }
      goto LABEL_743;
    case 7:
      v43 = **a2;
      if (v43 == 1)
      {
        v178 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F9828;
        sub_20B068A84(v178, (unint64_t)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v179 = (_QWORD *)operator new();
          v180 = *(_QWORD *)v1202;
          *v179 = &off_24C3F9920;
          v179[1] = 0;
          v179[2] = 0;
          v179[3] = v180;
        }
        else
        {
          v179 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v179;
        *(_QWORD *)v1202 = 0;
        sub_20AF82E34((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v373 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v374 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v375 = __ldaxr(v374);
          while (__stlxr(v375 - 1, v374));
          if (!v375)
          {
            ((void (*)(std::__shared_weak_count *))v373->__on_zero_shared)(v373);
            std::__shared_weak_count::__release_weak(v373);
          }
        }
        v376 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v376)
        {
          *(_QWORD *)v376 = off_24C414CA0;
          v377 = *(unsigned int *)(v376 + 40);
          if ((_DWORD)v377 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v377])(&v1200, v376 + 16);
          *(_DWORD *)(v376 + 40) = -1;
          MEMORY[0x20BD3583C](v376, 0x10A3C40ED729E16);
        }
        v379 = (void *)*((_QWORD *)&v1153 + 1);
        v378 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v380 = (unint64_t *)(v1154 + 8);
          do
            v381 = __ldxr(v380);
          while (__stxr(v381 + 1, v380));
          v382 = *(_QWORD *)&v1155[4];
          v383 = HIDWORD(v1157[0]);
          v384 = (void *)*((_QWORD *)&v1154 + 1);
          do
            v385 = __ldxr(v380);
          while (__stxr(v385 + 1, v380));
          do
            v386 = __ldxr(v380);
          while (__stxr(v386 + 1, v380));
          do
            v387 = __ldaxr(v380);
          while (__stlxr(v387 - 1, v380));
          if (!v387)
          {
            ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
            std::__shared_weak_count::__release_weak(v378);
          }
          do
            v388 = __ldaxr(v380);
          while (__stlxr(v388 - 1, v380));
          if (!v388)
          {
            ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
            std::__shared_weak_count::__release_weak(v378);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v389 = __ldxr(v380);
          while (__stxr(v389 + 1, v380));
          do
            v390 = __ldxr(v380);
          while (__stxr(v390 + 1, v380));
        }
        else
        {
          v382 = *(_QWORD *)&v1155[4];
          v383 = HIDWORD(v1157[0]);
          v384 = (void *)*((_QWORD *)&v1154 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v379;
        v1180 = v378;
        v1181 = v382;
        v1182 = 2 * v383;
        v1183 = v384;
        v1184 = 7;
        v1185 = 256;
        if (v378)
        {
          v875 = (unint64_t *)&v378->__shared_owners_;
          do
            v876 = __ldaxr(v875);
          while (__stlxr(v876 - 1, v875));
          if (!v876)
          {
            ((void (*)(std::__shared_weak_count *))v378->__on_zero_shared)(v378);
            std::__shared_weak_count::__release_weak(v378);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v379;
        __p = v378;
        v1189 = v382;
        v1190 = 2 * v383;
        v1192 = v384;
        v1193 = 7;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v877 = v1197;
          if (v1197)
          {
            v878 = (unint64_t *)&v1197->__shared_owners_;
            do
              v879 = __ldaxr(v878);
            while (__stlxr(v879 - 1, v878));
            if (!v879)
            {
              ((void (*)(std::__shared_weak_count *))v877->__on_zero_shared)(v877);
              std::__shared_weak_count::__release_weak(v877);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v880 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v881 = (unint64_t *)((char *)__p + 8);
            do
              v882 = __ldaxr(v881);
            while (__stlxr(v882 - 1, v881));
            if (!v882)
            {
              ((void (*)(std::__shared_weak_count *))v880->__on_zero_shared)(v880);
              std::__shared_weak_count::__release_weak(v880);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v883 = v1180;
        if (v1180)
        {
          v884 = (unint64_t *)&v1180->__shared_owners_;
          do
            v885 = __ldaxr(v884);
          while (__stlxr(v885 - 1, v884));
          if (!v885)
          {
            ((void (*)(std::__shared_weak_count *))v883->__on_zero_shared)(v883);
            std::__shared_weak_count::__release_weak(v883);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F9828;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v886 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v886);
          while (__stlxr(v826 - 1, v886));
          goto LABEL_1872;
        }
        return;
      }
      if (!v43)
      {
        v44 = a2[2];
        *(_QWORD *)&v1167 = &off_24C3F9828;
        v1200 = &off_24C4046B8;
        sub_20B27B6C0(v44, word_20B60F0CA, (unint64_t)&v1153);
        v45 = operator new();
        v46 = v45;
        *(_QWORD *)v45 = off_24C414CA0;
        v47 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v45 + 8) = DWORD2(v1153);
        *(_BYTE *)(v45 + 16) = 0;
        *(_DWORD *)(v45 + 40) = -1;
        if ((_DWORD)v47 == -1)
        {
          v634 = v1158;
          *(_OWORD *)(v45 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v45 + 64) = v634;
          *(_QWORD *)(v45 + 80) = v1159;
          *(_QWORD *)v45 = off_24C415240;
          v1205[0] = v45;
        }
        else
        {
          ((void (*)(uint64_t (***)(), uint64_t, __int128 *))off_24C4040D0[v47])(&v1200, v45 + 16, &v1154);
          *(_DWORD *)(v46 + 40) = v47;
          v48 = *(unsigned int *)&v1155[8];
          v49 = v1158;
          *(_OWORD *)(v46 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v46 + 64) = v49;
          *(_QWORD *)(v46 + 80) = v1159;
          *(_QWORD *)v46 = off_24C415240;
          v1205[0] = v46;
          *(_QWORD *)&v1153 = off_24C414CA0;
          if ((_DWORD)v48 != -1)
            ((void (*)(uint64_t (***)(), __int128 *))off_24C415AE0[v48])(&v1200, &v1154);
        }
        *(_QWORD *)v1202 = v46;
        v635 = (_QWORD *)operator new();
        *v635 = &off_24C3F9920;
        v635[1] = 0;
        v635[2] = 0;
        v635[3] = v46;
        *(_QWORD *)&v1202[8] = v635;
        v1205[0] = 0;
        sub_20AF82E34((uint64_t)&v1167 + 8, (uint64_t *)v1202);
        v636 = *(std::__shared_weak_count **)&v1202[8];
        if (*(_QWORD *)&v1202[8])
        {
          v637 = (unint64_t *)(*(_QWORD *)&v1202[8] + 8);
          do
            v638 = __ldaxr(v637);
          while (__stlxr(v638 - 1, v637));
          if (!v638)
          {
            ((void (*)(std::__shared_weak_count *))v636->__on_zero_shared)(v636);
            std::__shared_weak_count::__release_weak(v636);
          }
        }
        v639 = v1205[0];
        v1205[0] = 0;
        if (v639)
        {
          *(_QWORD *)v639 = off_24C414CA0;
          v640 = *(unsigned int *)(v639 + 40);
          if ((_DWORD)v640 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v640])(&v1153, v639 + 16);
          *(_DWORD *)(v639 + 40) = -1;
          MEMORY[0x20BD3583C](v639, 0x10A3C40ED729E16);
        }
        v642 = (void *)*((_QWORD *)&v1167 + 1);
        v641 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v643 = (unint64_t *)(v1168 + 8);
          do
            v644 = __ldxr(v643);
          while (__stxr(v644 + 1, v643));
          v645 = *(_QWORD *)&v1169[4];
          v646 = HIDWORD(v1171);
          v647 = (void *)*((_QWORD *)&v1168 + 1);
          do
            v648 = __ldxr(v643);
          while (__stxr(v648 + 1, v643));
          do
            v649 = __ldxr(v643);
          while (__stxr(v649 + 1, v643));
          do
            v650 = __ldaxr(v643);
          while (__stlxr(v650 - 1, v643));
          if (!v650)
          {
            ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
            std::__shared_weak_count::__release_weak(v641);
          }
          do
            v651 = __ldaxr(v643);
          while (__stlxr(v651 - 1, v643));
          if (!v651)
          {
            ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
            std::__shared_weak_count::__release_weak(v641);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v652 = __ldxr(v643);
          while (__stxr(v652 + 1, v643));
          do
            v653 = __ldxr(v643);
          while (__stxr(v653 + 1, v643));
        }
        else
        {
          v645 = *(_QWORD *)&v1169[4];
          v646 = HIDWORD(v1171);
          v647 = (void *)*((_QWORD *)&v1168 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v642;
        v1180 = v641;
        v1181 = v645;
        v1182 = 2 * v646;
        v1183 = v647;
        v1184 = 7;
        v1185 = 256;
        if (v641)
        {
          v1045 = (unint64_t *)&v641->__shared_owners_;
          do
            v1046 = __ldaxr(v1045);
          while (__stlxr(v1046 - 1, v1045));
          if (!v1046)
          {
            ((void (*)(std::__shared_weak_count *))v641->__on_zero_shared)(v641);
            std::__shared_weak_count::__release_weak(v641);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v642;
        __p = v641;
        v1189 = v645;
        v1190 = 2 * v646;
        v1192 = v647;
        v1193 = 7;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1047 = v1197;
          if (v1197)
          {
            v1048 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1049 = __ldaxr(v1048);
            while (__stlxr(v1049 - 1, v1048));
            if (!v1049)
            {
              ((void (*)(std::__shared_weak_count *))v1047->__on_zero_shared)(v1047);
              std::__shared_weak_count::__release_weak(v1047);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1050 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1051 = (unint64_t *)((char *)__p + 8);
            do
              v1052 = __ldaxr(v1051);
            while (__stlxr(v1052 - 1, v1051));
            if (!v1052)
            {
              ((void (*)(std::__shared_weak_count *))v1050->__on_zero_shared)(v1050);
              std::__shared_weak_count::__release_weak(v1050);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1053 = v1180;
        if (v1180)
        {
          v1054 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1055 = __ldaxr(v1054);
          while (__stlxr(v1055 - 1, v1054));
          if (!v1055)
          {
            ((void (*)(std::__shared_weak_count *))v1053->__on_zero_shared)(v1053);
            std::__shared_weak_count::__release_weak(v1053);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F9828;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1056 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1056);
          while (__stlxr(v826 - 1, v1056));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B01810C(*(_QWORD *)a2[3], (unsigned int *)a2[2], *a2[4], (uint64_t)&v1167);
      if (!v1177)
        goto LABEL_734;
      v181 = a2[2];
      v182 = *(_QWORD *)a2[3];
      v183 = (unsigned int *)a2[4];
      *(_QWORD *)v1202 = &off_24C406068;
      v184 = *v181;
      if (v181[1])
        v185 = v184 == 0;
      else
        v185 = 1;
      v186 = (unint64_t)*v183 << 32;
      if (v185)
        v186 = 0;
      sub_20B03C114((_BOOL8)&v1202[8], v182, v181, v186 | (2 * (v184 != 0)));
      *(_QWORD *)&v1153 = &off_24C4046F0;
      sub_20B068D6C((uint64_t)&v1153 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B069518((uint64_t)&v1165, (uint64_t)&v1153);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v187 = v1166;
      if (v1166)
      {
        v188 = (unint64_t *)&v1166->__shared_owners_;
        do
          v189 = __ldaxr(v188);
        while (__stlxr(v189 - 1, v188));
        if (!v189)
        {
          ((void (*)(std::__shared_weak_count *))v187->__on_zero_shared)(v187);
          std::__shared_weak_count::__release_weak(v187);
        }
      }
      sub_20AEC147C((uint64_t)&v1153 + 8);
      v140 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v190 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v142 = __ldaxr(v190);
        while (__stlxr(v142 - 1, v190));
        goto LABEL_339;
      }
      goto LABEL_743;
    case 8:
      v85 = **a2;
      if (v85 == 1)
      {
        v236 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F9970;
        sub_20B069820(v236, (unint64_t)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v237 = (_QWORD *)operator new();
          v238 = *(_QWORD *)v1202;
          *v237 = &off_24C3F9A68;
          v237[1] = 0;
          v237[2] = 0;
          v237[3] = v238;
        }
        else
        {
          v237 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v237;
        *(_QWORD *)v1202 = 0;
        sub_20AF83228((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v463 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v464 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v465 = __ldaxr(v464);
          while (__stlxr(v465 - 1, v464));
          if (!v465)
          {
            ((void (*)(std::__shared_weak_count *))v463->__on_zero_shared)(v463);
            std::__shared_weak_count::__release_weak(v463);
          }
        }
        v466 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v466)
        {
          *(_QWORD *)v466 = off_24C414E50;
          v467 = *(unsigned int *)(v466 + 40);
          if ((_DWORD)v467 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v467])(&v1200, v466 + 16);
          *(_DWORD *)(v466 + 40) = -1;
          MEMORY[0x20BD3583C](v466, 0x10A3C40ED729E16);
        }
        v469 = (void *)*((_QWORD *)&v1153 + 1);
        v468 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v470 = (unint64_t *)(v1154 + 8);
          do
            v471 = __ldxr(v470);
          while (__stxr(v471 + 1, v470));
          v472 = *(_QWORD *)&v1155[4];
          v473 = HIDWORD(v1157[0]);
          v474 = (void *)*((_QWORD *)&v1154 + 1);
          do
            v475 = __ldxr(v470);
          while (__stxr(v475 + 1, v470));
          do
            v476 = __ldxr(v470);
          while (__stxr(v476 + 1, v470));
          do
            v477 = __ldaxr(v470);
          while (__stlxr(v477 - 1, v470));
          if (!v477)
          {
            ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
            std::__shared_weak_count::__release_weak(v468);
          }
          do
            v478 = __ldaxr(v470);
          while (__stlxr(v478 - 1, v470));
          if (!v478)
          {
            ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
            std::__shared_weak_count::__release_weak(v468);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v479 = __ldxr(v470);
          while (__stxr(v479 + 1, v470));
          do
            v480 = __ldxr(v470);
          while (__stxr(v480 + 1, v470));
        }
        else
        {
          v472 = *(_QWORD *)&v1155[4];
          v473 = HIDWORD(v1157[0]);
          v474 = (void *)*((_QWORD *)&v1154 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v469;
        v1180 = v468;
        v1181 = v472;
        v1182 = 4 * v473;
        v1183 = v474;
        v1184 = 8;
        v1185 = 256;
        if (v468)
        {
          v935 = (unint64_t *)&v468->__shared_owners_;
          do
            v936 = __ldaxr(v935);
          while (__stlxr(v936 - 1, v935));
          if (!v936)
          {
            ((void (*)(std::__shared_weak_count *))v468->__on_zero_shared)(v468);
            std::__shared_weak_count::__release_weak(v468);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v469;
        __p = v468;
        v1189 = v472;
        v1190 = 4 * v473;
        v1192 = v474;
        v1193 = 8;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v937 = v1197;
          if (v1197)
          {
            v938 = (unint64_t *)&v1197->__shared_owners_;
            do
              v939 = __ldaxr(v938);
            while (__stlxr(v939 - 1, v938));
            if (!v939)
            {
              ((void (*)(std::__shared_weak_count *))v937->__on_zero_shared)(v937);
              std::__shared_weak_count::__release_weak(v937);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v940 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v941 = (unint64_t *)((char *)__p + 8);
            do
              v942 = __ldaxr(v941);
            while (__stlxr(v942 - 1, v941));
            if (!v942)
            {
              ((void (*)(std::__shared_weak_count *))v940->__on_zero_shared)(v940);
              std::__shared_weak_count::__release_weak(v940);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v943 = v1180;
        if (v1180)
        {
          v944 = (unint64_t *)&v1180->__shared_owners_;
          do
            v945 = __ldaxr(v944);
          while (__stlxr(v945 - 1, v944));
          if (!v945)
          {
            ((void (*)(std::__shared_weak_count *))v943->__on_zero_shared)(v943);
            std::__shared_weak_count::__release_weak(v943);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F9970;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v946 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v946);
          while (__stlxr(v826 - 1, v946));
          goto LABEL_1872;
        }
        return;
      }
      if (!v85)
      {
        v86 = a2[2];
        *(_QWORD *)&v1167 = &off_24C3F9970;
        v87 = v86[1];
        v88 = 2 * (*v86 != 0);
        LODWORD(v89) = v88 * *v86;
        if (v89 <= 8)
          LODWORD(v89) = 8;
        v90 = *(_QWORD *)v86;
        *(_QWORD *)&v1153 = off_24C4152D0;
        if (v87)
          v89 = v89;
        else
          v89 = 8;
        *(_QWORD *)&v1202[4] = v90;
        *(_DWORD *)v1202 = 2;
        LODWORD(v1205[0]) = 1;
        *(_QWORD *)((char *)v1205 + 4) = v88 & 0x1FFFFFFFFLL | ((unint64_t)(v89 >> 1) << 33);
        *(_QWORD *)&v1202[12] = v1205[0];
        *(_DWORD *)&v1202[20] = v89;
        v1203 = v90;
        v1204 = *(_QWORD *)((char *)v1205 + 4);
        sub_20B2619CC((uint64_t)&v1153, 0, 8, (uint64_t)v1202, 0.0);
        *(_QWORD *)&v1153 = off_24C4152D0;
        v91 = operator new();
        v92 = (uint64_t (**)())v91;
        *(_QWORD *)v91 = off_24C414E50;
        v93 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v91 + 8) = DWORD2(v1153);
        *(_BYTE *)(v91 + 16) = 0;
        *(_DWORD *)(v91 + 40) = -1;
        if ((_DWORD)v93 == -1)
        {
          v733 = v1158;
          *(_OWORD *)(v91 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v91 + 64) = v733;
          *(_QWORD *)(v91 + 80) = v1159;
          *(_QWORD *)v91 = off_24C4152D0;
          v1199 = v91;
        }
        else
        {
          ((void (*)(_BYTE *, uint64_t, __int128 *))off_24C4040D0[v93])(v1202, v91 + 16, &v1154);
          *((_DWORD *)v92 + 10) = v93;
          v94 = *(unsigned int *)&v1155[8];
          v95 = v1158;
          *((_OWORD *)v92 + 3) = *(_OWORD *)v1157;
          *((_OWORD *)v92 + 4) = v95;
          v92[10] = (uint64_t (*)())v1159;
          *v92 = (uint64_t (*)())off_24C4152D0;
          v1199 = (uint64_t)v92;
          *(_QWORD *)&v1153 = off_24C414E50;
          if ((_DWORD)v94 != -1)
            ((void (*)(_BYTE *, __int128 *))off_24C415AE0[v94])(v1202, &v1154);
        }
        v1200 = v92;
        v734 = (std::__shared_weak_count *)operator new();
        v734->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9A68;
        v734->__shared_owners_ = 0;
        v734->__shared_weak_owners_ = 0;
        v734[1].__vftable = (std::__shared_weak_count_vtbl *)v92;
        v1201 = v734;
        v1199 = 0;
        sub_20AF83228((uint64_t)&v1167 + 8, (uint64_t *)&v1200);
        v735 = v1201;
        if (v1201)
        {
          v736 = (unint64_t *)&v1201->__shared_owners_;
          do
            v737 = __ldaxr(v736);
          while (__stlxr(v737 - 1, v736));
          if (!v737)
          {
            ((void (*)(std::__shared_weak_count *))v735->__on_zero_shared)(v735);
            std::__shared_weak_count::__release_weak(v735);
          }
        }
        v738 = v1199;
        v1199 = 0;
        if (v738)
        {
          *(_QWORD *)v738 = off_24C414E50;
          v739 = *(unsigned int *)(v738 + 40);
          if ((_DWORD)v739 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v739])(&v1153, v738 + 16);
          *(_DWORD *)(v738 + 40) = -1;
          MEMORY[0x20BD3583C](v738, 0x10A3C40ED729E16);
        }
        v741 = (void *)*((_QWORD *)&v1167 + 1);
        v740 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v742 = (unint64_t *)(v1168 + 8);
          do
            v743 = __ldxr(v742);
          while (__stxr(v743 + 1, v742));
          v744 = *(_QWORD *)&v1169[4];
          v745 = HIDWORD(v1171);
          v746 = (void *)*((_QWORD *)&v1168 + 1);
          do
            v747 = __ldxr(v742);
          while (__stxr(v747 + 1, v742));
          do
            v748 = __ldxr(v742);
          while (__stxr(v748 + 1, v742));
          do
            v749 = __ldaxr(v742);
          while (__stlxr(v749 - 1, v742));
          if (!v749)
          {
            ((void (*)(std::__shared_weak_count *))v740->__on_zero_shared)(v740);
            std::__shared_weak_count::__release_weak(v740);
          }
          do
            v750 = __ldaxr(v742);
          while (__stlxr(v750 - 1, v742));
          if (!v750)
          {
            ((void (*)(std::__shared_weak_count *))v740->__on_zero_shared)(v740);
            std::__shared_weak_count::__release_weak(v740);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v751 = __ldxr(v742);
          while (__stxr(v751 + 1, v742));
          do
            v752 = __ldxr(v742);
          while (__stxr(v752 + 1, v742));
        }
        else
        {
          v744 = *(_QWORD *)&v1169[4];
          v745 = HIDWORD(v1171);
          v746 = (void *)*((_QWORD *)&v1168 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v741;
        v1180 = v740;
        v1181 = v744;
        v1182 = 4 * v745;
        v1183 = v746;
        v1184 = 8;
        v1185 = 256;
        if (v740)
        {
          v1105 = (unint64_t *)&v740->__shared_owners_;
          do
            v1106 = __ldaxr(v1105);
          while (__stlxr(v1106 - 1, v1105));
          if (!v1106)
          {
            ((void (*)(std::__shared_weak_count *))v740->__on_zero_shared)(v740);
            std::__shared_weak_count::__release_weak(v740);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v741;
        __p = v740;
        v1189 = v744;
        v1190 = 4 * v745;
        v1192 = v746;
        v1193 = 8;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1107 = v1197;
          if (v1197)
          {
            v1108 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1109 = __ldaxr(v1108);
            while (__stlxr(v1109 - 1, v1108));
            if (!v1109)
            {
              ((void (*)(std::__shared_weak_count *))v1107->__on_zero_shared)(v1107);
              std::__shared_weak_count::__release_weak(v1107);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1110 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1111 = (unint64_t *)((char *)__p + 8);
            do
              v1112 = __ldaxr(v1111);
            while (__stlxr(v1112 - 1, v1111));
            if (!v1112)
            {
              ((void (*)(std::__shared_weak_count *))v1110->__on_zero_shared)(v1110);
              std::__shared_weak_count::__release_weak(v1110);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1113 = v1180;
        if (v1180)
        {
          v1114 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1115 = __ldaxr(v1114);
          while (__stlxr(v1115 - 1, v1114));
          if (!v1115)
          {
            ((void (*)(std::__shared_weak_count *))v1113->__on_zero_shared)(v1113);
            std::__shared_weak_count::__release_weak(v1113);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F9970;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1116 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1116);
          while (__stlxr(v826 - 1, v1116));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B018BBC(*(_QWORD *)a2[3], (unsigned int *)a2[2], *a2[4], (uint64_t)&v1167);
      if (!v1177)
        goto LABEL_734;
      v264 = a2[2];
      v265 = *(_QWORD *)a2[3];
      v266 = (unsigned int *)a2[4];
      *(_QWORD *)v1202 = &off_24C4062E0;
      v267 = *v264;
      if (v264[1])
        v268 = v267 == 0;
      else
        v268 = 1;
      v269 = (unint64_t)*v266 << 32;
      if (v268)
        v269 = 0;
      sub_20B03CF58((_BOOL8)&v1202[8], v265, v264, v269 | (2 * (v267 != 0)));
      *(_QWORD *)&v1153 = &off_24C4047E8;
      sub_20B069B08((uint64_t)&v1153 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B06A2B4((uint64_t)&v1165, (uint64_t)&v1153);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v270 = v1166;
      if (v1166)
      {
        v271 = (unint64_t *)&v1166->__shared_owners_;
        do
          v272 = __ldaxr(v271);
        while (__stlxr(v272 - 1, v271));
        if (!v272)
        {
          ((void (*)(std::__shared_weak_count *))v270->__on_zero_shared)(v270);
          std::__shared_weak_count::__release_weak(v270);
        }
      }
      sub_20AEC147C((uint64_t)&v1153 + 8);
      v140 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v273 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v142 = __ldaxr(v273);
        while (__stlxr(v142 - 1, v273));
        goto LABEL_339;
      }
      goto LABEL_743;
    case 21:
      v50 = **a2;
      if (v50 == 1)
      {
        v191 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F9AB8;
        sub_20B06A5D4(v191, (uint64_t *)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v192 = (_QWORD *)operator new();
          v193 = *(_QWORD *)v1202;
          *v192 = &off_24C3F9BB0;
          v192[1] = 0;
          v192[2] = 0;
          v192[3] = v193;
        }
        else
        {
          v192 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v192;
        *(_QWORD *)v1202 = 0;
        sub_20AF83618((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v391 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v392 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v393 = __ldaxr(v392);
          while (__stlxr(v393 - 1, v392));
          if (!v393)
          {
            ((void (*)(std::__shared_weak_count *))v391->__on_zero_shared)(v391);
            std::__shared_weak_count::__release_weak(v391);
          }
        }
        v394 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v394)
        {
          *(_QWORD *)v394 = off_24C414940;
          v395 = *(unsigned int *)(v394 + 40);
          if ((_DWORD)v395 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v395])(&v1200, v394 + 16);
          *(_DWORD *)(v394 + 40) = -1;
          MEMORY[0x20BD3583C](v394, 0x10A3C40ED729E16);
        }
        v397 = (void *)*((_QWORD *)&v1153 + 1);
        v396 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v398 = (unint64_t *)(v1154 + 8);
          do
            v399 = __ldxr(v398);
          while (__stxr(v399 + 1, v398));
          v400 = *(_QWORD *)&v1155[4];
          v401 = HIDWORD(v1157[0]);
          v402 = (void *)*((_QWORD *)&v1154 + 1);
          do
            v403 = __ldxr(v398);
          while (__stxr(v403 + 1, v398));
          do
            v404 = __ldxr(v398);
          while (__stxr(v404 + 1, v398));
          do
            v405 = __ldaxr(v398);
          while (__stlxr(v405 - 1, v398));
          if (!v405)
          {
            ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
            std::__shared_weak_count::__release_weak(v396);
          }
          do
            v406 = __ldaxr(v398);
          while (__stlxr(v406 - 1, v398));
          if (!v406)
          {
            ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
            std::__shared_weak_count::__release_weak(v396);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v407 = __ldxr(v398);
          while (__stxr(v407 + 1, v398));
          do
            v408 = __ldxr(v398);
          while (__stxr(v408 + 1, v398));
        }
        else
        {
          v400 = *(_QWORD *)&v1155[4];
          v401 = HIDWORD(v1157[0]);
          v402 = (void *)*((_QWORD *)&v1154 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v397;
        v1180 = v396;
        v1181 = v400;
        v1182 = v401;
        v1183 = v402;
        v1184 = 21;
        v1185 = 256;
        if (v396)
        {
          v887 = (unint64_t *)&v396->__shared_owners_;
          do
            v888 = __ldaxr(v887);
          while (__stlxr(v888 - 1, v887));
          if (!v888)
          {
            ((void (*)(std::__shared_weak_count *))v396->__on_zero_shared)(v396);
            std::__shared_weak_count::__release_weak(v396);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v397;
        __p = v396;
        v1189 = v400;
        v1190 = v401;
        v1192 = v402;
        v1193 = 21;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v889 = v1197;
          if (v1197)
          {
            v890 = (unint64_t *)&v1197->__shared_owners_;
            do
              v891 = __ldaxr(v890);
            while (__stlxr(v891 - 1, v890));
            if (!v891)
            {
              ((void (*)(std::__shared_weak_count *))v889->__on_zero_shared)(v889);
              std::__shared_weak_count::__release_weak(v889);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v892 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v893 = (unint64_t *)((char *)__p + 8);
            do
              v894 = __ldaxr(v893);
            while (__stlxr(v894 - 1, v893));
            if (!v894)
            {
              ((void (*)(std::__shared_weak_count *))v892->__on_zero_shared)(v892);
              std::__shared_weak_count::__release_weak(v892);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v895 = v1180;
        if (v1180)
        {
          v896 = (unint64_t *)&v1180->__shared_owners_;
          do
            v897 = __ldaxr(v896);
          while (__stlxr(v897 - 1, v896));
          if (!v897)
          {
            ((void (*)(std::__shared_weak_count *))v895->__on_zero_shared)(v895);
            std::__shared_weak_count::__release_weak(v895);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F9AB8;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v898 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v898);
          while (__stlxr(v826 - 1, v898));
          goto LABEL_1872;
        }
        return;
      }
      if (!v50)
      {
        v51 = a2[2];
        LOBYTE(v1199) = 0;
        *(_QWORD *)&v1167 = &off_24C3F9AB8;
        v1200 = &off_24C4048E0;
        sub_20B27B894(v51, (char *)&v1199, (uint64_t)&v1153);
        v52 = operator new();
        v53 = v52;
        *(_QWORD *)v52 = off_24C414940;
        v54 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v52 + 8) = DWORD2(v1153);
        *(_BYTE *)(v52 + 16) = 0;
        *(_DWORD *)(v52 + 40) = -1;
        if ((_DWORD)v54 == -1)
        {
          v654 = v1158;
          *(_OWORD *)(v52 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v52 + 64) = v654;
          *(_QWORD *)(v52 + 80) = v1159;
          *(_QWORD *)v52 = off_24C415360;
          v1205[0] = v52;
        }
        else
        {
          ((void (*)(uint64_t (***)(), uint64_t, __int128 *))off_24C4040D0[v54])(&v1200, v52 + 16, &v1154);
          *(_DWORD *)(v53 + 40) = v54;
          v55 = *(unsigned int *)&v1155[8];
          v56 = v1158;
          *(_OWORD *)(v53 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v53 + 64) = v56;
          *(_QWORD *)(v53 + 80) = v1159;
          *(_QWORD *)v53 = off_24C415360;
          v1205[0] = v53;
          *(_QWORD *)&v1153 = off_24C414940;
          if ((_DWORD)v55 != -1)
            ((void (*)(uint64_t (***)(), __int128 *))off_24C415AE0[v55])(&v1200, &v1154);
        }
        *(_QWORD *)v1202 = v53;
        v655 = (_QWORD *)operator new();
        *v655 = &off_24C3F9BB0;
        v655[1] = 0;
        v655[2] = 0;
        v655[3] = v53;
        *(_QWORD *)&v1202[8] = v655;
        v1205[0] = 0;
        sub_20AF83618((uint64_t)&v1167 + 8, (uint64_t *)v1202);
        v656 = *(std::__shared_weak_count **)&v1202[8];
        if (*(_QWORD *)&v1202[8])
        {
          v657 = (unint64_t *)(*(_QWORD *)&v1202[8] + 8);
          do
            v658 = __ldaxr(v657);
          while (__stlxr(v658 - 1, v657));
          if (!v658)
          {
            ((void (*)(std::__shared_weak_count *))v656->__on_zero_shared)(v656);
            std::__shared_weak_count::__release_weak(v656);
          }
        }
        v659 = v1205[0];
        v1205[0] = 0;
        if (v659)
        {
          *(_QWORD *)v659 = off_24C414940;
          v660 = *(unsigned int *)(v659 + 40);
          if ((_DWORD)v660 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v660])(&v1153, v659 + 16);
          *(_DWORD *)(v659 + 40) = -1;
          MEMORY[0x20BD3583C](v659, 0x10A3C40ED729E16);
        }
        v662 = (void *)*((_QWORD *)&v1167 + 1);
        v661 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v663 = (unint64_t *)(v1168 + 8);
          do
            v664 = __ldxr(v663);
          while (__stxr(v664 + 1, v663));
          v665 = *(_QWORD *)&v1169[4];
          v666 = HIDWORD(v1171);
          v667 = (void *)*((_QWORD *)&v1168 + 1);
          do
            v668 = __ldxr(v663);
          while (__stxr(v668 + 1, v663));
          do
            v669 = __ldxr(v663);
          while (__stxr(v669 + 1, v663));
          do
            v670 = __ldaxr(v663);
          while (__stlxr(v670 - 1, v663));
          if (!v670)
          {
            ((void (*)(std::__shared_weak_count *))v661->__on_zero_shared)(v661);
            std::__shared_weak_count::__release_weak(v661);
          }
          do
            v671 = __ldaxr(v663);
          while (__stlxr(v671 - 1, v663));
          if (!v671)
          {
            ((void (*)(std::__shared_weak_count *))v661->__on_zero_shared)(v661);
            std::__shared_weak_count::__release_weak(v661);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v672 = __ldxr(v663);
          while (__stxr(v672 + 1, v663));
          do
            v673 = __ldxr(v663);
          while (__stxr(v673 + 1, v663));
        }
        else
        {
          v665 = *(_QWORD *)&v1169[4];
          v666 = HIDWORD(v1171);
          v667 = (void *)*((_QWORD *)&v1168 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v662;
        v1180 = v661;
        v1181 = v665;
        v1182 = v666;
        v1183 = v667;
        v1184 = 21;
        v1185 = 256;
        if (v661)
        {
          v1057 = (unint64_t *)&v661->__shared_owners_;
          do
            v1058 = __ldaxr(v1057);
          while (__stlxr(v1058 - 1, v1057));
          if (!v1058)
          {
            ((void (*)(std::__shared_weak_count *))v661->__on_zero_shared)(v661);
            std::__shared_weak_count::__release_weak(v661);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v662;
        __p = v661;
        v1189 = v665;
        v1190 = v666;
        v1192 = v667;
        v1193 = 21;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1059 = v1197;
          if (v1197)
          {
            v1060 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1061 = __ldaxr(v1060);
            while (__stlxr(v1061 - 1, v1060));
            if (!v1061)
            {
              ((void (*)(std::__shared_weak_count *))v1059->__on_zero_shared)(v1059);
              std::__shared_weak_count::__release_weak(v1059);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1062 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1063 = (unint64_t *)((char *)__p + 8);
            do
              v1064 = __ldaxr(v1063);
            while (__stlxr(v1064 - 1, v1063));
            if (!v1064)
            {
              ((void (*)(std::__shared_weak_count *))v1062->__on_zero_shared)(v1062);
              std::__shared_weak_count::__release_weak(v1062);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1065 = v1180;
        if (v1180)
        {
          v1066 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1067 = __ldaxr(v1066);
          while (__stlxr(v1067 - 1, v1066));
          if (!v1067)
          {
            ((void (*)(std::__shared_weak_count *))v1065->__on_zero_shared)(v1065);
            std::__shared_weak_count::__release_weak(v1065);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F9AB8;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1068 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1068);
          while (__stlxr(v826 - 1, v1068));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B021318((unsigned int *)a2[2], *a2[4], (uint64_t)&v1167);
      if (!v1177)
        goto LABEL_734;
      v194 = a2[2];
      v195 = *a2[4];
      *(_QWORD *)&v1178 = *(_QWORD *)a2[3];
      *(_QWORD *)v1202 = &off_24C4082F8;
      v196 = 3;
      if (!*v194)
        v196 = 0;
      if (v194[1])
        v197 = *v194 == 0;
      else
        v197 = 1;
      v198 = v195 << 32;
      if (v197)
        v198 = 0;
      *(_QWORD *)&v1153 = v198 | v196;
      sub_20B048004((uint64_t *)&v1178, v194, &v1153, (uint64_t)&v1202[8]);
      *(_QWORD *)&v1153 = &off_24C404918;
      sub_20B06A8B0((uint64_t)&v1153 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B06B1EC((uint64_t)&v1165, (uint64_t)&v1153);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v199 = v1166;
      if (v1166)
      {
        v200 = (unint64_t *)&v1166->__shared_owners_;
        do
          v201 = __ldaxr(v200);
        while (__stlxr(v201 - 1, v200));
        if (!v201)
        {
          ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
          std::__shared_weak_count::__release_weak(v199);
        }
      }
      sub_20AEC147C((uint64_t)&v1153 + 8);
      v140 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v202 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v142 = __ldaxr(v202);
        while (__stlxr(v142 - 1, v202));
        goto LABEL_339;
      }
      goto LABEL_743;
    case 22:
      v96 = **a2;
      if (v96 == 1)
      {
        v239 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F9C00;
        sub_20B06B508(v239, (uint64_t *)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v240 = (_QWORD *)operator new();
          v241 = *(_QWORD *)v1202;
          *v240 = &off_24C3F9CF8;
          v240[1] = 0;
          v240[2] = 0;
          v240[3] = v241;
        }
        else
        {
          v240 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v240;
        *(_QWORD *)v1202 = 0;
        sub_20AF83A0C((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v481 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v482 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v483 = __ldaxr(v482);
          while (__stlxr(v483 - 1, v482));
          if (!v483)
          {
            ((void (*)(std::__shared_weak_count *))v481->__on_zero_shared)(v481);
            std::__shared_weak_count::__release_weak(v481);
          }
        }
        v484 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v484)
        {
          *(_QWORD *)v484 = off_24C414AF0;
          v485 = *(unsigned int *)(v484 + 40);
          if ((_DWORD)v485 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v485])(&v1200, v484 + 16);
          *(_DWORD *)(v484 + 40) = -1;
          MEMORY[0x20BD3583C](v484, 0x10A3C40ED729E16);
        }
        v487 = (void *)*((_QWORD *)&v1153 + 1);
        v486 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v488 = (unint64_t *)(v1154 + 8);
          do
            v489 = __ldxr(v488);
          while (__stxr(v489 + 1, v488));
          v490 = *(_QWORD *)&v1155[4];
          v491 = HIDWORD(v1157[0]);
          v492 = (void *)*((_QWORD *)&v1154 + 1);
          do
            v493 = __ldxr(v488);
          while (__stxr(v493 + 1, v488));
          do
            v494 = __ldxr(v488);
          while (__stxr(v494 + 1, v488));
          do
            v495 = __ldaxr(v488);
          while (__stlxr(v495 - 1, v488));
          if (!v495)
          {
            ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
            std::__shared_weak_count::__release_weak(v486);
          }
          do
            v496 = __ldaxr(v488);
          while (__stlxr(v496 - 1, v488));
          if (!v496)
          {
            ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
            std::__shared_weak_count::__release_weak(v486);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v497 = __ldxr(v488);
          while (__stxr(v497 + 1, v488));
          do
            v498 = __ldxr(v488);
          while (__stxr(v498 + 1, v488));
        }
        else
        {
          v490 = *(_QWORD *)&v1155[4];
          v491 = HIDWORD(v1157[0]);
          v492 = (void *)*((_QWORD *)&v1154 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v487;
        v1180 = v486;
        v1181 = v490;
        v1182 = 2 * v491;
        v1183 = v492;
        v1184 = 22;
        v1185 = 256;
        if (v486)
        {
          v947 = (unint64_t *)&v486->__shared_owners_;
          do
            v948 = __ldaxr(v947);
          while (__stlxr(v948 - 1, v947));
          if (!v948)
          {
            ((void (*)(std::__shared_weak_count *))v486->__on_zero_shared)(v486);
            std::__shared_weak_count::__release_weak(v486);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v487;
        __p = v486;
        v1189 = v490;
        v1190 = 2 * v491;
        v1192 = v492;
        v1193 = 22;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v949 = v1197;
          if (v1197)
          {
            v950 = (unint64_t *)&v1197->__shared_owners_;
            do
              v951 = __ldaxr(v950);
            while (__stlxr(v951 - 1, v950));
            if (!v951)
            {
              ((void (*)(std::__shared_weak_count *))v949->__on_zero_shared)(v949);
              std::__shared_weak_count::__release_weak(v949);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v952 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v953 = (unint64_t *)((char *)__p + 8);
            do
              v954 = __ldaxr(v953);
            while (__stlxr(v954 - 1, v953));
            if (!v954)
            {
              ((void (*)(std::__shared_weak_count *))v952->__on_zero_shared)(v952);
              std::__shared_weak_count::__release_weak(v952);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v955 = v1180;
        if (v1180)
        {
          v956 = (unint64_t *)&v1180->__shared_owners_;
          do
            v957 = __ldaxr(v956);
          while (__stlxr(v957 - 1, v956));
          if (!v957)
          {
            ((void (*)(std::__shared_weak_count *))v955->__on_zero_shared)(v955);
            std::__shared_weak_count::__release_weak(v955);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F9C00;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v958 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v958);
          while (__stlxr(v826 - 1, v958));
          goto LABEL_1872;
        }
        return;
      }
      if (!v96)
      {
        v97 = a2[2];
        LOWORD(v1199) = 0;
        *(_QWORD *)&v1167 = &off_24C3F9C00;
        v1200 = &off_24C404A10;
        sub_20B27BA60(v97, (__int16 *)&v1199, (uint64_t)&v1153);
        v98 = operator new();
        v99 = v98;
        *(_QWORD *)v98 = off_24C414AF0;
        v100 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v98 + 8) = DWORD2(v1153);
        *(_BYTE *)(v98 + 16) = 0;
        *(_DWORD *)(v98 + 40) = -1;
        if ((_DWORD)v100 == -1)
        {
          v753 = v1158;
          *(_OWORD *)(v98 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v98 + 64) = v753;
          *(_QWORD *)(v98 + 80) = v1159;
          *(_QWORD *)v98 = off_24C4153F0;
          v1205[0] = v98;
        }
        else
        {
          ((void (*)(uint64_t (***)(), uint64_t, __int128 *))off_24C4040D0[v100])(&v1200, v98 + 16, &v1154);
          *(_DWORD *)(v99 + 40) = v100;
          v101 = *(unsigned int *)&v1155[8];
          v102 = v1158;
          *(_OWORD *)(v99 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v99 + 64) = v102;
          *(_QWORD *)(v99 + 80) = v1159;
          *(_QWORD *)v99 = off_24C4153F0;
          v1205[0] = v99;
          *(_QWORD *)&v1153 = off_24C414AF0;
          if ((_DWORD)v101 != -1)
            ((void (*)(uint64_t (***)(), __int128 *))off_24C415AE0[v101])(&v1200, &v1154);
        }
        *(_QWORD *)v1202 = v99;
        v754 = (_QWORD *)operator new();
        *v754 = &off_24C3F9CF8;
        v754[1] = 0;
        v754[2] = 0;
        v754[3] = v99;
        *(_QWORD *)&v1202[8] = v754;
        v1205[0] = 0;
        sub_20AF83A0C((uint64_t)&v1167 + 8, (uint64_t *)v1202);
        v755 = *(std::__shared_weak_count **)&v1202[8];
        if (*(_QWORD *)&v1202[8])
        {
          v756 = (unint64_t *)(*(_QWORD *)&v1202[8] + 8);
          do
            v757 = __ldaxr(v756);
          while (__stlxr(v757 - 1, v756));
          if (!v757)
          {
            ((void (*)(std::__shared_weak_count *))v755->__on_zero_shared)(v755);
            std::__shared_weak_count::__release_weak(v755);
          }
        }
        v758 = v1205[0];
        v1205[0] = 0;
        if (v758)
        {
          *(_QWORD *)v758 = off_24C414AF0;
          v759 = *(unsigned int *)(v758 + 40);
          if ((_DWORD)v759 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v759])(&v1153, v758 + 16);
          *(_DWORD *)(v758 + 40) = -1;
          MEMORY[0x20BD3583C](v758, 0x10A3C40ED729E16);
        }
        v761 = (void *)*((_QWORD *)&v1167 + 1);
        v760 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v762 = (unint64_t *)(v1168 + 8);
          do
            v763 = __ldxr(v762);
          while (__stxr(v763 + 1, v762));
          v764 = *(_QWORD *)&v1169[4];
          v765 = HIDWORD(v1171);
          v766 = (void *)*((_QWORD *)&v1168 + 1);
          do
            v767 = __ldxr(v762);
          while (__stxr(v767 + 1, v762));
          do
            v768 = __ldxr(v762);
          while (__stxr(v768 + 1, v762));
          do
            v769 = __ldaxr(v762);
          while (__stlxr(v769 - 1, v762));
          if (!v769)
          {
            ((void (*)(std::__shared_weak_count *))v760->__on_zero_shared)(v760);
            std::__shared_weak_count::__release_weak(v760);
          }
          do
            v770 = __ldaxr(v762);
          while (__stlxr(v770 - 1, v762));
          if (!v770)
          {
            ((void (*)(std::__shared_weak_count *))v760->__on_zero_shared)(v760);
            std::__shared_weak_count::__release_weak(v760);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v771 = __ldxr(v762);
          while (__stxr(v771 + 1, v762));
          do
            v772 = __ldxr(v762);
          while (__stxr(v772 + 1, v762));
        }
        else
        {
          v764 = *(_QWORD *)&v1169[4];
          v765 = HIDWORD(v1171);
          v766 = (void *)*((_QWORD *)&v1168 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v761;
        v1180 = v760;
        v1181 = v764;
        v1182 = 2 * v765;
        v1183 = v766;
        v1184 = 22;
        v1185 = 256;
        if (v760)
        {
          v1117 = (unint64_t *)&v760->__shared_owners_;
          do
            v1118 = __ldaxr(v1117);
          while (__stlxr(v1118 - 1, v1117));
          if (!v1118)
          {
            ((void (*)(std::__shared_weak_count *))v760->__on_zero_shared)(v760);
            std::__shared_weak_count::__release_weak(v760);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v761;
        __p = v760;
        v1189 = v764;
        v1190 = 2 * v765;
        v1192 = v766;
        v1193 = 22;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1119 = v1197;
          if (v1197)
          {
            v1120 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1121 = __ldaxr(v1120);
            while (__stlxr(v1121 - 1, v1120));
            if (!v1121)
            {
              ((void (*)(std::__shared_weak_count *))v1119->__on_zero_shared)(v1119);
              std::__shared_weak_count::__release_weak(v1119);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1122 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1123 = (unint64_t *)((char *)__p + 8);
            do
              v1124 = __ldaxr(v1123);
            while (__stlxr(v1124 - 1, v1123));
            if (!v1124)
            {
              ((void (*)(std::__shared_weak_count *))v1122->__on_zero_shared)(v1122);
              std::__shared_weak_count::__release_weak(v1122);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1125 = v1180;
        if (v1180)
        {
          v1126 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1127 = __ldaxr(v1126);
          while (__stlxr(v1127 - 1, v1126));
          if (!v1127)
          {
            ((void (*)(std::__shared_weak_count *))v1125->__on_zero_shared)(v1125);
            std::__shared_weak_count::__release_weak(v1125);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F9C00;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1128 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1128);
          while (__stlxr(v826 - 1, v1128));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B021C60(*(_QWORD *)a2[3], (unsigned int *)a2[2], *a2[4], (uint64_t)&v1167);
      if (!v1177)
        goto LABEL_734;
      v274 = a2[2];
      v275 = *a2[4];
      *(_QWORD *)&v1178 = *(_QWORD *)a2[3];
      *(_QWORD *)v1202 = &off_24C408570;
      v276 = 3;
      if (!*v274)
        v276 = 0;
      if (v274[1])
        v277 = *v274 == 0;
      else
        v277 = 1;
      v278 = v275 << 32;
      if (v277)
        v278 = 0;
      *(_QWORD *)&v1153 = v278 | v276;
      sub_20B048E68((uint64_t *)&v1178, v274, &v1153, (uint64_t)&v1202[8]);
      *(_QWORD *)&v1153 = &off_24C404A48;
      sub_20B06B7E8((uint64_t)&v1153 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B06C13C((uint64_t)&v1165, (uint64_t)&v1153);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v279 = v1166;
      if (v1166)
      {
        v280 = (unint64_t *)&v1166->__shared_owners_;
        do
          v281 = __ldaxr(v280);
        while (__stlxr(v281 - 1, v280));
        if (!v281)
        {
          ((void (*)(std::__shared_weak_count *))v279->__on_zero_shared)(v279);
          std::__shared_weak_count::__release_weak(v279);
        }
      }
      sub_20AEC147C((uint64_t)&v1153 + 8);
      v140 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v282 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v142 = __ldaxr(v282);
        while (__stlxr(v142 - 1, v282));
        goto LABEL_339;
      }
      goto LABEL_743;
    case 25:
      v103 = **a2;
      if (v103 == 1)
      {
        v242 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F9D48;
        sub_20B06C45C(v242, (unint64_t)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v243 = (_QWORD *)operator new();
          v244 = *(_QWORD *)v1202;
          *v243 = &off_24C3F9E40;
          v243[1] = 0;
          v243[2] = 0;
          v243[3] = v244;
        }
        else
        {
          v243 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v243;
        *(_QWORD *)v1202 = 0;
        sub_20AF83DFC((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v499 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v500 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v501 = __ldaxr(v500);
          while (__stlxr(v501 - 1, v500));
          if (!v501)
          {
            ((void (*)(std::__shared_weak_count *))v499->__on_zero_shared)(v499);
            std::__shared_weak_count::__release_weak(v499);
          }
        }
        v502 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v502)
        {
          *(_QWORD *)v502 = off_24C4149D0;
          v503 = *(unsigned int *)(v502 + 40);
          if ((_DWORD)v503 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v503])(&v1200, v502 + 16);
          *(_DWORD *)(v502 + 40) = -1;
          MEMORY[0x20BD3583C](v502, 0x10A3C40ED729E16);
        }
        v505 = (void *)*((_QWORD *)&v1153 + 1);
        v504 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v506 = (unint64_t *)(v1154 + 8);
          do
            v507 = __ldxr(v506);
          while (__stxr(v507 + 1, v506));
          v508 = *(_QWORD *)&v1155[4];
          v509 = HIDWORD(v1157[0]);
          v510 = (void *)*((_QWORD *)&v1154 + 1);
          do
            v511 = __ldxr(v506);
          while (__stxr(v511 + 1, v506));
          do
            v512 = __ldxr(v506);
          while (__stxr(v512 + 1, v506));
          do
            v513 = __ldaxr(v506);
          while (__stlxr(v513 - 1, v506));
          if (!v513)
          {
            ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
            std::__shared_weak_count::__release_weak(v504);
          }
          do
            v514 = __ldaxr(v506);
          while (__stlxr(v514 - 1, v506));
          if (!v514)
          {
            ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
            std::__shared_weak_count::__release_weak(v504);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v515 = __ldxr(v506);
          while (__stxr(v515 + 1, v506));
          do
            v516 = __ldxr(v506);
          while (__stxr(v516 + 1, v506));
        }
        else
        {
          v508 = *(_QWORD *)&v1155[4];
          v509 = HIDWORD(v1157[0]);
          v510 = (void *)*((_QWORD *)&v1154 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v505;
        v1180 = v504;
        v1181 = v508;
        v1182 = v509;
        v1183 = v510;
        v1184 = 25;
        v1185 = 256;
        if (v504)
        {
          v959 = (unint64_t *)&v504->__shared_owners_;
          do
            v960 = __ldaxr(v959);
          while (__stlxr(v960 - 1, v959));
          if (!v960)
          {
            ((void (*)(std::__shared_weak_count *))v504->__on_zero_shared)(v504);
            std::__shared_weak_count::__release_weak(v504);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v505;
        __p = v504;
        v1189 = v508;
        v1190 = v509;
        v1192 = v510;
        v1193 = 25;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v961 = v1197;
          if (v1197)
          {
            v962 = (unint64_t *)&v1197->__shared_owners_;
            do
              v963 = __ldaxr(v962);
            while (__stlxr(v963 - 1, v962));
            if (!v963)
            {
              ((void (*)(std::__shared_weak_count *))v961->__on_zero_shared)(v961);
              std::__shared_weak_count::__release_weak(v961);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v964 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v965 = (unint64_t *)((char *)__p + 8);
            do
              v966 = __ldaxr(v965);
            while (__stlxr(v966 - 1, v965));
            if (!v966)
            {
              ((void (*)(std::__shared_weak_count *))v964->__on_zero_shared)(v964);
              std::__shared_weak_count::__release_weak(v964);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v967 = v1180;
        if (v1180)
        {
          v968 = (unint64_t *)&v1180->__shared_owners_;
          do
            v969 = __ldaxr(v968);
          while (__stlxr(v969 - 1, v968));
          if (!v969)
          {
            ((void (*)(std::__shared_weak_count *))v967->__on_zero_shared)(v967);
            std::__shared_weak_count::__release_weak(v967);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F9D48;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v970 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v970);
          while (__stlxr(v826 - 1, v970));
          goto LABEL_1872;
        }
        return;
      }
      if (!v103)
      {
        v104 = a2[2];
        LOBYTE(v1199) = 0;
        *(_QWORD *)&v1167 = &off_24C3F9D48;
        v1200 = &off_24C404B40;
        sub_20B27BC2C(v104, (char *)&v1199, (unint64_t)&v1153);
        v105 = operator new();
        v106 = v105;
        *(_QWORD *)v105 = off_24C4149D0;
        v107 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v105 + 8) = DWORD2(v1153);
        *(_BYTE *)(v105 + 16) = 0;
        *(_DWORD *)(v105 + 40) = -1;
        if ((_DWORD)v107 == -1)
        {
          v773 = v1158;
          *(_OWORD *)(v105 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v105 + 64) = v773;
          *(_QWORD *)(v105 + 80) = v1159;
          *(_QWORD *)v105 = off_24C415480;
          v1205[0] = v105;
        }
        else
        {
          ((void (*)(uint64_t (***)(), uint64_t, __int128 *))off_24C4040D0[v107])(&v1200, v105 + 16, &v1154);
          *(_DWORD *)(v106 + 40) = v107;
          v108 = *(unsigned int *)&v1155[8];
          v109 = v1158;
          *(_OWORD *)(v106 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v106 + 64) = v109;
          *(_QWORD *)(v106 + 80) = v1159;
          *(_QWORD *)v106 = off_24C415480;
          v1205[0] = v106;
          *(_QWORD *)&v1153 = off_24C4149D0;
          if ((_DWORD)v108 != -1)
            ((void (*)(uint64_t (***)(), __int128 *))off_24C415AE0[v108])(&v1200, &v1154);
        }
        *(_QWORD *)v1202 = v106;
        v774 = (_QWORD *)operator new();
        *v774 = &off_24C3F9E40;
        v774[1] = 0;
        v774[2] = 0;
        v774[3] = v106;
        *(_QWORD *)&v1202[8] = v774;
        v1205[0] = 0;
        sub_20AF83DFC((uint64_t)&v1167 + 8, (uint64_t *)v1202);
        v775 = *(std::__shared_weak_count **)&v1202[8];
        if (*(_QWORD *)&v1202[8])
        {
          v776 = (unint64_t *)(*(_QWORD *)&v1202[8] + 8);
          do
            v777 = __ldaxr(v776);
          while (__stlxr(v777 - 1, v776));
          if (!v777)
          {
            ((void (*)(std::__shared_weak_count *))v775->__on_zero_shared)(v775);
            std::__shared_weak_count::__release_weak(v775);
          }
        }
        v778 = v1205[0];
        v1205[0] = 0;
        if (v778)
        {
          *(_QWORD *)v778 = off_24C4149D0;
          v779 = *(unsigned int *)(v778 + 40);
          if ((_DWORD)v779 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v779])(&v1153, v778 + 16);
          *(_DWORD *)(v778 + 40) = -1;
          MEMORY[0x20BD3583C](v778, 0x10A3C40ED729E16);
        }
        v781 = (void *)*((_QWORD *)&v1167 + 1);
        v780 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v782 = (unint64_t *)(v1168 + 8);
          do
            v783 = __ldxr(v782);
          while (__stxr(v783 + 1, v782));
          v784 = *(_QWORD *)&v1169[4];
          v785 = HIDWORD(v1171);
          v786 = (void *)*((_QWORD *)&v1168 + 1);
          do
            v787 = __ldxr(v782);
          while (__stxr(v787 + 1, v782));
          do
            v788 = __ldxr(v782);
          while (__stxr(v788 + 1, v782));
          do
            v789 = __ldaxr(v782);
          while (__stlxr(v789 - 1, v782));
          if (!v789)
          {
            ((void (*)(std::__shared_weak_count *))v780->__on_zero_shared)(v780);
            std::__shared_weak_count::__release_weak(v780);
          }
          do
            v790 = __ldaxr(v782);
          while (__stlxr(v790 - 1, v782));
          if (!v790)
          {
            ((void (*)(std::__shared_weak_count *))v780->__on_zero_shared)(v780);
            std::__shared_weak_count::__release_weak(v780);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v791 = __ldxr(v782);
          while (__stxr(v791 + 1, v782));
          do
            v792 = __ldxr(v782);
          while (__stxr(v792 + 1, v782));
        }
        else
        {
          v784 = *(_QWORD *)&v1169[4];
          v785 = HIDWORD(v1171);
          v786 = (void *)*((_QWORD *)&v1168 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v781;
        v1180 = v780;
        v1181 = v784;
        v1182 = v785;
        v1183 = v786;
        v1184 = 25;
        v1185 = 256;
        if (v780)
        {
          v1129 = (unint64_t *)&v780->__shared_owners_;
          do
            v1130 = __ldaxr(v1129);
          while (__stlxr(v1130 - 1, v1129));
          if (!v1130)
          {
            ((void (*)(std::__shared_weak_count *))v780->__on_zero_shared)(v780);
            std::__shared_weak_count::__release_weak(v780);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v781;
        __p = v780;
        v1189 = v784;
        v1190 = v785;
        v1192 = v786;
        v1193 = 25;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1131 = v1197;
          if (v1197)
          {
            v1132 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1133 = __ldaxr(v1132);
            while (__stlxr(v1133 - 1, v1132));
            if (!v1133)
            {
              ((void (*)(std::__shared_weak_count *))v1131->__on_zero_shared)(v1131);
              std::__shared_weak_count::__release_weak(v1131);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1134 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1135 = (unint64_t *)((char *)__p + 8);
            do
              v1136 = __ldaxr(v1135);
            while (__stlxr(v1136 - 1, v1135));
            if (!v1136)
            {
              ((void (*)(std::__shared_weak_count *))v1134->__on_zero_shared)(v1134);
              std::__shared_weak_count::__release_weak(v1134);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1137 = v1180;
        if (v1180)
        {
          v1138 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1139 = __ldaxr(v1138);
          while (__stlxr(v1139 - 1, v1138));
          if (!v1139)
          {
            ((void (*)(std::__shared_weak_count *))v1137->__on_zero_shared)(v1137);
            std::__shared_weak_count::__release_weak(v1137);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F9D48;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1140 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1140);
          while (__stlxr(v826 - 1, v1140));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B023CC8((unsigned int *)a2[2], *a2[4], (uint64_t)&v1167);
      if (!v1177)
        goto LABEL_734;
      v245 = a2[2];
      v246 = *a2[4];
      *(_QWORD *)&v1178 = *(_QWORD *)a2[3];
      *(_QWORD *)v1202 = &off_24C408CD8;
      if (v245[1])
        v247 = *v245 == 0;
      else
        v247 = 1;
      v248 = v246 << 32;
      if (v247)
        v248 = 0;
      *(_QWORD *)&v1153 = v248 | (4 * (*v245 != 0));
      sub_20B04BB34((uint64_t *)&v1178, v245, &v1153, (uint64_t)&v1202[8]);
      *(_QWORD *)&v1153 = &off_24C404B78;
      sub_20B06C740((uint64_t)&v1153 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B06CF98((uint64_t)&v1165, (uint64_t)&v1153);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v249 = v1166;
      if (v1166)
      {
        v250 = (unint64_t *)&v1166->__shared_owners_;
        do
          v251 = __ldaxr(v250);
        while (__stlxr(v251 - 1, v250));
        if (!v251)
        {
          ((void (*)(std::__shared_weak_count *))v249->__on_zero_shared)(v249);
          std::__shared_weak_count::__release_weak(v249);
        }
      }
      sub_20AEC147C((uint64_t)&v1153 + 8);
      v140 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v252 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v142 = __ldaxr(v252);
        while (__stlxr(v142 - 1, v252));
        goto LABEL_339;
      }
      goto LABEL_743;
    case 31:
      v57 = **a2;
      if (v57 == 1)
      {
        v203 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F9E90;
        sub_20B06D29C(v203, (unint64_t)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v204 = (_QWORD *)operator new();
          v205 = *(_QWORD *)v1202;
          *v204 = &off_24C3F9F88;
          v204[1] = 0;
          v204[2] = 0;
          v204[3] = v205;
        }
        else
        {
          v204 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v204;
        *(_QWORD *)v1202 = 0;
        sub_20AF841F0((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v409 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v410 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v411 = __ldaxr(v410);
          while (__stlxr(v411 - 1, v410));
          if (!v411)
          {
            ((void (*)(std::__shared_weak_count *))v409->__on_zero_shared)(v409);
            std::__shared_weak_count::__release_weak(v409);
          }
        }
        v412 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v412)
        {
          *(_QWORD *)v412 = off_24C414D30;
          v413 = *(unsigned int *)(v412 + 40);
          if ((_DWORD)v413 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v413])(&v1200, v412 + 16);
          *(_DWORD *)(v412 + 40) = -1;
          MEMORY[0x20BD3583C](v412, 0x10A3C40ED729E16);
        }
        v415 = (void *)*((_QWORD *)&v1153 + 1);
        v414 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v416 = (unint64_t *)(v1154 + 8);
          do
            v417 = __ldxr(v416);
          while (__stxr(v417 + 1, v416));
          v418 = *(_QWORD *)&v1155[4];
          v419 = HIDWORD(v1157[0]);
          v420 = (void *)*((_QWORD *)&v1154 + 1);
          do
            v421 = __ldxr(v416);
          while (__stxr(v421 + 1, v416));
          do
            v422 = __ldxr(v416);
          while (__stxr(v422 + 1, v416));
          do
            v423 = __ldaxr(v416);
          while (__stlxr(v423 - 1, v416));
          if (!v423)
          {
            ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
            std::__shared_weak_count::__release_weak(v414);
          }
          do
            v424 = __ldaxr(v416);
          while (__stlxr(v424 - 1, v416));
          if (!v424)
          {
            ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
            std::__shared_weak_count::__release_weak(v414);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v425 = __ldxr(v416);
          while (__stxr(v425 + 1, v416));
          do
            v426 = __ldxr(v416);
          while (__stxr(v426 + 1, v416));
        }
        else
        {
          v418 = *(_QWORD *)&v1155[4];
          v419 = HIDWORD(v1157[0]);
          v420 = (void *)*((_QWORD *)&v1154 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v415;
        v1180 = v414;
        v1181 = v418;
        v1182 = 2 * v419;
        v1183 = v420;
        v1184 = 31;
        v1185 = 256;
        if (v414)
        {
          v899 = (unint64_t *)&v414->__shared_owners_;
          do
            v900 = __ldaxr(v899);
          while (__stlxr(v900 - 1, v899));
          if (!v900)
          {
            ((void (*)(std::__shared_weak_count *))v414->__on_zero_shared)(v414);
            std::__shared_weak_count::__release_weak(v414);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v415;
        __p = v414;
        v1189 = v418;
        v1190 = 2 * v419;
        v1192 = v420;
        v1193 = 31;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v901 = v1197;
          if (v1197)
          {
            v902 = (unint64_t *)&v1197->__shared_owners_;
            do
              v903 = __ldaxr(v902);
            while (__stlxr(v903 - 1, v902));
            if (!v903)
            {
              ((void (*)(std::__shared_weak_count *))v901->__on_zero_shared)(v901);
              std::__shared_weak_count::__release_weak(v901);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v904 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v905 = (unint64_t *)((char *)__p + 8);
            do
              v906 = __ldaxr(v905);
            while (__stlxr(v906 - 1, v905));
            if (!v906)
            {
              ((void (*)(std::__shared_weak_count *))v904->__on_zero_shared)(v904);
              std::__shared_weak_count::__release_weak(v904);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v907 = v1180;
        if (v1180)
        {
          v908 = (unint64_t *)&v1180->__shared_owners_;
          do
            v909 = __ldaxr(v908);
          while (__stlxr(v909 - 1, v908));
          if (!v909)
          {
            ((void (*)(std::__shared_weak_count *))v907->__on_zero_shared)(v907);
            std::__shared_weak_count::__release_weak(v907);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F9E90;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v910 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v910);
          while (__stlxr(v826 - 1, v910));
          goto LABEL_1872;
        }
        return;
      }
      if (!v57)
      {
        v58 = a2[2];
        *(_QWORD *)&v1167 = &off_24C3F9E90;
        v59 = v58[1];
        v60 = 4 * (*v58 != 0);
        LODWORD(v61) = v60 * *v58;
        if (v61 <= 0x10)
          LODWORD(v61) = 16;
        v62 = *(_QWORD *)v58;
        *(_QWORD *)&v1153 = off_24C415510;
        if (v59)
          v61 = v61;
        else
          v61 = 16;
        *(_QWORD *)&v1202[4] = v62;
        *(_DWORD *)v1202 = 4;
        LODWORD(v1205[0]) = 1;
        *(_QWORD *)((char *)v1205 + 4) = v60 & 0x3FFFFFFFFLL | ((unint64_t)(v61 >> 2) << 34);
        *(_QWORD *)&v1202[12] = v1205[0];
        *(_DWORD *)&v1202[20] = v61;
        v1203 = v62;
        v1204 = *(_QWORD *)((char *)v1205 + 4);
        sub_20B25E4A0((uint64_t)&v1153, 0, 31, (uint64_t)v1202, 0);
        *(_QWORD *)&v1153 = off_24C415510;
        v63 = operator new();
        v64 = (uint64_t (**)())v63;
        *(_QWORD *)v63 = off_24C414D30;
        v65 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v63 + 8) = DWORD2(v1153);
        *(_BYTE *)(v63 + 16) = 0;
        *(_DWORD *)(v63 + 40) = -1;
        if ((_DWORD)v65 == -1)
        {
          v674 = v1158;
          *(_OWORD *)(v63 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v63 + 64) = v674;
          *(_QWORD *)(v63 + 80) = v1159;
          *(_QWORD *)v63 = off_24C415510;
          v1199 = v63;
        }
        else
        {
          ((void (*)(_BYTE *, uint64_t, __int128 *))off_24C4040D0[v65])(v1202, v63 + 16, &v1154);
          *((_DWORD *)v64 + 10) = v65;
          v66 = *(unsigned int *)&v1155[8];
          v67 = v1158;
          *((_OWORD *)v64 + 3) = *(_OWORD *)v1157;
          *((_OWORD *)v64 + 4) = v67;
          v64[10] = (uint64_t (*)())v1159;
          *v64 = (uint64_t (*)())off_24C415510;
          v1199 = (uint64_t)v64;
          *(_QWORD *)&v1153 = off_24C414D30;
          if ((_DWORD)v66 != -1)
            ((void (*)(_BYTE *, __int128 *))off_24C415AE0[v66])(v1202, &v1154);
        }
        v1200 = v64;
        v675 = (std::__shared_weak_count *)operator new();
        v675->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9F88;
        v675->__shared_owners_ = 0;
        v675->__shared_weak_owners_ = 0;
        v675[1].__vftable = (std::__shared_weak_count_vtbl *)v64;
        v1201 = v675;
        v1199 = 0;
        sub_20AF841F0((uint64_t)&v1167 + 8, (uint64_t *)&v1200);
        v676 = v1201;
        if (v1201)
        {
          v677 = (unint64_t *)&v1201->__shared_owners_;
          do
            v678 = __ldaxr(v677);
          while (__stlxr(v678 - 1, v677));
          if (!v678)
          {
            ((void (*)(std::__shared_weak_count *))v676->__on_zero_shared)(v676);
            std::__shared_weak_count::__release_weak(v676);
          }
        }
        v679 = v1199;
        v1199 = 0;
        if (v679)
        {
          *(_QWORD *)v679 = off_24C414D30;
          v680 = *(unsigned int *)(v679 + 40);
          if ((_DWORD)v680 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v680])(&v1153, v679 + 16);
          *(_DWORD *)(v679 + 40) = -1;
          MEMORY[0x20BD3583C](v679, 0x10A3C40ED729E16);
        }
        v682 = (void *)*((_QWORD *)&v1167 + 1);
        v681 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v683 = (unint64_t *)(v1168 + 8);
          do
            v684 = __ldxr(v683);
          while (__stxr(v684 + 1, v683));
          v685 = *(_QWORD *)&v1169[4];
          v686 = HIDWORD(v1171);
          v687 = (void *)*((_QWORD *)&v1168 + 1);
          do
            v688 = __ldxr(v683);
          while (__stxr(v688 + 1, v683));
          do
            v689 = __ldxr(v683);
          while (__stxr(v689 + 1, v683));
          do
            v690 = __ldaxr(v683);
          while (__stlxr(v690 - 1, v683));
          if (!v690)
          {
            ((void (*)(std::__shared_weak_count *))v681->__on_zero_shared)(v681);
            std::__shared_weak_count::__release_weak(v681);
          }
          do
            v691 = __ldaxr(v683);
          while (__stlxr(v691 - 1, v683));
          if (!v691)
          {
            ((void (*)(std::__shared_weak_count *))v681->__on_zero_shared)(v681);
            std::__shared_weak_count::__release_weak(v681);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v692 = __ldxr(v683);
          while (__stxr(v692 + 1, v683));
          do
            v693 = __ldxr(v683);
          while (__stxr(v693 + 1, v683));
        }
        else
        {
          v685 = *(_QWORD *)&v1169[4];
          v686 = HIDWORD(v1171);
          v687 = (void *)*((_QWORD *)&v1168 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v682;
        v1180 = v681;
        v1181 = v685;
        v1182 = 2 * v686;
        v1183 = v687;
        v1184 = 31;
        v1185 = 256;
        if (v681)
        {
          v1069 = (unint64_t *)&v681->__shared_owners_;
          do
            v1070 = __ldaxr(v1069);
          while (__stlxr(v1070 - 1, v1069));
          if (!v1070)
          {
            ((void (*)(std::__shared_weak_count *))v681->__on_zero_shared)(v681);
            std::__shared_weak_count::__release_weak(v681);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v682;
        __p = v681;
        v1189 = v685;
        v1190 = 2 * v686;
        v1192 = v687;
        v1193 = 31;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1071 = v1197;
          if (v1197)
          {
            v1072 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1073 = __ldaxr(v1072);
            while (__stlxr(v1073 - 1, v1072));
            if (!v1073)
            {
              ((void (*)(std::__shared_weak_count *))v1071->__on_zero_shared)(v1071);
              std::__shared_weak_count::__release_weak(v1071);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1074 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1075 = (unint64_t *)((char *)__p + 8);
            do
              v1076 = __ldaxr(v1075);
            while (__stlxr(v1076 - 1, v1075));
            if (!v1076)
            {
              ((void (*)(std::__shared_weak_count *))v1074->__on_zero_shared)(v1074);
              std::__shared_weak_count::__release_weak(v1074);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1077 = v1180;
        if (v1180)
        {
          v1078 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1079 = __ldaxr(v1078);
          while (__stlxr(v1079 - 1, v1078));
          if (!v1079)
          {
            ((void (*)(std::__shared_weak_count *))v1077->__on_zero_shared)(v1077);
            std::__shared_weak_count::__release_weak(v1077);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F9E90;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1080 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1080);
          while (__stlxr(v826 - 1, v1080));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B0279F4(*(_QWORD *)a2[3], (unsigned int *)a2[2], *a2[4], (uint64_t)&v1167);
      if (!v1177)
        goto LABEL_734;
      v206 = a2[2];
      v207 = *a2[4];
      *(_QWORD *)&v1178 = *(_QWORD *)a2[3];
      *(_QWORD *)v1202 = &off_24C409BA8;
      if (v206[1])
        v208 = *v206 == 0;
      else
        v208 = 1;
      v209 = v207 << 32;
      if (v208)
        v209 = 0;
      *(_QWORD *)&v1153 = v209 | (4 * (*v206 != 0));
      sub_20B050EE8((uint64_t *)&v1178, v206, &v1153, (uint64_t)&v1202[8]);
      *(_QWORD *)&v1153 = &off_24C404C70;
      sub_20B06D584((uint64_t)&v1153 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B06DD30((uint64_t)&v1165, (uint64_t)&v1153);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v210 = v1166;
      if (v1166)
      {
        v211 = (unint64_t *)&v1166->__shared_owners_;
        do
          v212 = __ldaxr(v211);
        while (__stlxr(v212 - 1, v211));
        if (!v212)
        {
          ((void (*)(std::__shared_weak_count *))v210->__on_zero_shared)(v210);
          std::__shared_weak_count::__release_weak(v210);
        }
      }
      sub_20AEC147C((uint64_t)&v1153 + 8);
      v140 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v213 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v142 = __ldaxr(v213);
        while (__stlxr(v142 - 1, v213));
        goto LABEL_339;
      }
      goto LABEL_743;
    case 32:
      v68 = **a2;
      if (v68 == 1)
      {
        v214 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3F9FD8;
        sub_20B06E038(v214, (unint64_t)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v215 = (_QWORD *)operator new();
          v216 = *(_QWORD *)v1202;
          *v215 = &off_24C3FA0D0;
          v215[1] = 0;
          v215[2] = 0;
          v215[3] = v216;
        }
        else
        {
          v215 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v215;
        *(_QWORD *)v1202 = 0;
        sub_20AF845E4((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v427 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v428 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v429 = __ldaxr(v428);
          while (__stlxr(v429 - 1, v428));
          if (!v429)
          {
            ((void (*)(std::__shared_weak_count *))v427->__on_zero_shared)(v427);
            std::__shared_weak_count::__release_weak(v427);
          }
        }
        v430 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v430)
        {
          *(_QWORD *)v430 = off_24C414EE0;
          v431 = *(unsigned int *)(v430 + 40);
          if ((_DWORD)v431 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v431])(&v1200, v430 + 16);
          *(_DWORD *)(v430 + 40) = -1;
          MEMORY[0x20BD3583C](v430, 0x10A3C40ED729E16);
        }
        v433 = (void *)*((_QWORD *)&v1153 + 1);
        v432 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v434 = (unint64_t *)(v1154 + 8);
          do
            v435 = __ldxr(v434);
          while (__stxr(v435 + 1, v434));
          v436 = *(_QWORD *)&v1155[4];
          v437 = HIDWORD(v1157[0]);
          v438 = (void *)*((_QWORD *)&v1154 + 1);
          do
            v439 = __ldxr(v434);
          while (__stxr(v439 + 1, v434));
          do
            v440 = __ldxr(v434);
          while (__stxr(v440 + 1, v434));
          do
            v441 = __ldaxr(v434);
          while (__stlxr(v441 - 1, v434));
          if (!v441)
          {
            ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
            std::__shared_weak_count::__release_weak(v432);
          }
          do
            v442 = __ldaxr(v434);
          while (__stlxr(v442 - 1, v434));
          if (!v442)
          {
            ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
            std::__shared_weak_count::__release_weak(v432);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v443 = __ldxr(v434);
          while (__stxr(v443 + 1, v434));
          do
            v444 = __ldxr(v434);
          while (__stxr(v444 + 1, v434));
        }
        else
        {
          v436 = *(_QWORD *)&v1155[4];
          v437 = HIDWORD(v1157[0]);
          v438 = (void *)*((_QWORD *)&v1154 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v433;
        v1180 = v432;
        v1181 = v436;
        v1182 = 4 * v437;
        v1183 = v438;
        v1184 = 32;
        v1185 = 256;
        if (v432)
        {
          v911 = (unint64_t *)&v432->__shared_owners_;
          do
            v912 = __ldaxr(v911);
          while (__stlxr(v912 - 1, v911));
          if (!v912)
          {
            ((void (*)(std::__shared_weak_count *))v432->__on_zero_shared)(v432);
            std::__shared_weak_count::__release_weak(v432);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v433;
        __p = v432;
        v1189 = v436;
        v1190 = 4 * v437;
        v1192 = v438;
        v1193 = 32;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v913 = v1197;
          if (v1197)
          {
            v914 = (unint64_t *)&v1197->__shared_owners_;
            do
              v915 = __ldaxr(v914);
            while (__stlxr(v915 - 1, v914));
            if (!v915)
            {
              ((void (*)(std::__shared_weak_count *))v913->__on_zero_shared)(v913);
              std::__shared_weak_count::__release_weak(v913);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v916 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v917 = (unint64_t *)((char *)__p + 8);
            do
              v918 = __ldaxr(v917);
            while (__stlxr(v918 - 1, v917));
            if (!v918)
            {
              ((void (*)(std::__shared_weak_count *))v916->__on_zero_shared)(v916);
              std::__shared_weak_count::__release_weak(v916);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v919 = v1180;
        if (v1180)
        {
          v920 = (unint64_t *)&v1180->__shared_owners_;
          do
            v921 = __ldaxr(v920);
          while (__stlxr(v921 - 1, v920));
          if (!v921)
          {
            ((void (*)(std::__shared_weak_count *))v919->__on_zero_shared)(v919);
            std::__shared_weak_count::__release_weak(v919);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3F9FD8;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v922 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v922);
          while (__stlxr(v826 - 1, v922));
          goto LABEL_1872;
        }
        return;
      }
      if (!v68)
      {
        v69 = a2[2];
        *(_QWORD *)&v1167 = &off_24C3F9FD8;
        v70 = v69[1];
        v71 = 4 * (*v69 != 0);
        LODWORD(v72) = v71 * *v69;
        if (v72 <= 8)
          LODWORD(v72) = 8;
        v73 = *(_QWORD *)v69;
        *(_QWORD *)&v1153 = off_24C4155A0;
        if (v70)
          v72 = v72;
        else
          v72 = 8;
        *(_QWORD *)&v1202[4] = v73;
        *(_DWORD *)v1202 = 4;
        LODWORD(v1205[0]) = 1;
        *(_QWORD *)((char *)v1205 + 4) = v71 & 0x3FFFFFFFFLL | ((unint64_t)(v72 >> 2) << 34);
        *(_QWORD *)&v1202[12] = v1205[0];
        *(_DWORD *)&v1202[20] = v72;
        v1203 = v73;
        v1204 = *(_QWORD *)((char *)v1205 + 4);
        sub_20B26358C((uint64_t)&v1153, 0, 32, (uint64_t)v1202, 0.0);
        *(_QWORD *)&v1153 = off_24C4155A0;
        v74 = operator new();
        v75 = (uint64_t (**)())v74;
        *(_QWORD *)v74 = off_24C414EE0;
        v76 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v74 + 8) = DWORD2(v1153);
        *(_BYTE *)(v74 + 16) = 0;
        *(_DWORD *)(v74 + 40) = -1;
        if ((_DWORD)v76 == -1)
        {
          v694 = v1158;
          *(_OWORD *)(v74 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v74 + 64) = v694;
          *(_QWORD *)(v74 + 80) = v1159;
          *(_QWORD *)v74 = off_24C4155A0;
          v1199 = v74;
        }
        else
        {
          ((void (*)(_BYTE *, uint64_t, __int128 *))off_24C4040D0[v76])(v1202, v74 + 16, &v1154);
          *((_DWORD *)v75 + 10) = v76;
          v77 = *(unsigned int *)&v1155[8];
          v78 = v1158;
          *((_OWORD *)v75 + 3) = *(_OWORD *)v1157;
          *((_OWORD *)v75 + 4) = v78;
          v75[10] = (uint64_t (*)())v1159;
          *v75 = (uint64_t (*)())off_24C4155A0;
          v1199 = (uint64_t)v75;
          *(_QWORD *)&v1153 = off_24C414EE0;
          if ((_DWORD)v77 != -1)
            ((void (*)(_BYTE *, __int128 *))off_24C415AE0[v77])(v1202, &v1154);
        }
        v1200 = v75;
        v695 = (std::__shared_weak_count *)operator new();
        v695->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA0D0;
        v695->__shared_owners_ = 0;
        v695->__shared_weak_owners_ = 0;
        v695[1].__vftable = (std::__shared_weak_count_vtbl *)v75;
        v1201 = v695;
        v1199 = 0;
        sub_20AF845E4((uint64_t)&v1167 + 8, (uint64_t *)&v1200);
        v696 = v1201;
        if (v1201)
        {
          v697 = (unint64_t *)&v1201->__shared_owners_;
          do
            v698 = __ldaxr(v697);
          while (__stlxr(v698 - 1, v697));
          if (!v698)
          {
            ((void (*)(std::__shared_weak_count *))v696->__on_zero_shared)(v696);
            std::__shared_weak_count::__release_weak(v696);
          }
        }
        v699 = v1199;
        v1199 = 0;
        if (v699)
        {
          *(_QWORD *)v699 = off_24C414EE0;
          v700 = *(unsigned int *)(v699 + 40);
          if ((_DWORD)v700 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v700])(&v1153, v699 + 16);
          *(_DWORD *)(v699 + 40) = -1;
          MEMORY[0x20BD3583C](v699, 0x10A3C40ED729E16);
        }
        v702 = (void *)*((_QWORD *)&v1167 + 1);
        v701 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v703 = (unint64_t *)(v1168 + 8);
          do
            v704 = __ldxr(v703);
          while (__stxr(v704 + 1, v703));
          v705 = *(_QWORD *)&v1169[4];
          v706 = HIDWORD(v1171);
          v707 = (void *)*((_QWORD *)&v1168 + 1);
          do
            v708 = __ldxr(v703);
          while (__stxr(v708 + 1, v703));
          do
            v709 = __ldxr(v703);
          while (__stxr(v709 + 1, v703));
          do
            v710 = __ldaxr(v703);
          while (__stlxr(v710 - 1, v703));
          if (!v710)
          {
            ((void (*)(std::__shared_weak_count *))v701->__on_zero_shared)(v701);
            std::__shared_weak_count::__release_weak(v701);
          }
          do
            v711 = __ldaxr(v703);
          while (__stlxr(v711 - 1, v703));
          if (!v711)
          {
            ((void (*)(std::__shared_weak_count *))v701->__on_zero_shared)(v701);
            std::__shared_weak_count::__release_weak(v701);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v712 = __ldxr(v703);
          while (__stxr(v712 + 1, v703));
          do
            v713 = __ldxr(v703);
          while (__stxr(v713 + 1, v703));
        }
        else
        {
          v705 = *(_QWORD *)&v1169[4];
          v706 = HIDWORD(v1171);
          v707 = (void *)*((_QWORD *)&v1168 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v702;
        v1180 = v701;
        v1181 = v705;
        v1182 = 4 * v706;
        v1183 = v707;
        v1184 = 32;
        v1185 = 256;
        if (v701)
        {
          v1081 = (unint64_t *)&v701->__shared_owners_;
          do
            v1082 = __ldaxr(v1081);
          while (__stlxr(v1082 - 1, v1081));
          if (!v1082)
          {
            ((void (*)(std::__shared_weak_count *))v701->__on_zero_shared)(v701);
            std::__shared_weak_count::__release_weak(v701);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v702;
        __p = v701;
        v1189 = v705;
        v1190 = 4 * v706;
        v1192 = v707;
        v1193 = 32;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1083 = v1197;
          if (v1197)
          {
            v1084 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1085 = __ldaxr(v1084);
            while (__stlxr(v1085 - 1, v1084));
            if (!v1085)
            {
              ((void (*)(std::__shared_weak_count *))v1083->__on_zero_shared)(v1083);
              std::__shared_weak_count::__release_weak(v1083);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1086 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1087 = (unint64_t *)((char *)__p + 8);
            do
              v1088 = __ldaxr(v1087);
            while (__stlxr(v1088 - 1, v1087));
            if (!v1088)
            {
              ((void (*)(std::__shared_weak_count *))v1086->__on_zero_shared)(v1086);
              std::__shared_weak_count::__release_weak(v1086);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1089 = v1180;
        if (v1180)
        {
          v1090 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1091 = __ldaxr(v1090);
          while (__stlxr(v1091 - 1, v1090));
          if (!v1091)
          {
            ((void (*)(std::__shared_weak_count *))v1089->__on_zero_shared)(v1089);
            std::__shared_weak_count::__release_weak(v1089);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3F9FD8;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1092 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1092);
          while (__stlxr(v826 - 1, v1092));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B0284A4(*(_QWORD *)a2[3], (unsigned int *)a2[2], *a2[4], (uint64_t)&v1167);
      if (!v1177)
        goto LABEL_734;
      v217 = a2[2];
      v218 = *a2[4];
      *(_QWORD *)&v1178 = *(_QWORD *)a2[3];
      *(_QWORD *)v1202 = &off_24C409E20;
      if (v217[1])
        v219 = *v217 == 0;
      else
        v219 = 1;
      v220 = v218 << 32;
      if (v219)
        v220 = 0;
      *(_QWORD *)&v1153 = v220 | (4 * (*v217 != 0));
      sub_20B051EA4((uint64_t *)&v1178, v217, &v1153, (uint64_t)&v1202[8]);
      *(_QWORD *)&v1153 = &off_24C404D68;
      sub_20B06E320((uint64_t)&v1153 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B06EB78((uint64_t)&v1165, (uint64_t)&v1153);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v221 = v1166;
      if (v1166)
      {
        v222 = (unint64_t *)&v1166->__shared_owners_;
        do
          v223 = __ldaxr(v222);
        while (__stlxr(v223 - 1, v222));
        if (!v223)
        {
          ((void (*)(std::__shared_weak_count *))v221->__on_zero_shared)(v221);
          std::__shared_weak_count::__release_weak(v221);
        }
      }
      sub_20AEC147C((uint64_t)&v1153 + 8);
      v140 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v224 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v142 = __ldaxr(v224);
        while (__stlxr(v142 - 1, v224));
        goto LABEL_339;
      }
      goto LABEL_743;
    case 37:
      v110 = **a2;
      if (v110 == 1)
      {
        v253 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3FA120;
        sub_20B06EE98(v253, (unint64_t)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v254 = (_QWORD *)operator new();
          v255 = *(_QWORD *)v1202;
          *v254 = &off_24C3FA218;
          v254[1] = 0;
          v254[2] = 0;
          v254[3] = v255;
        }
        else
        {
          v254 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v254;
        *(_QWORD *)v1202 = 0;
        sub_20AF849D4((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v517 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v518 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v519 = __ldaxr(v518);
          while (__stlxr(v519 - 1, v518));
          if (!v519)
          {
            ((void (*)(std::__shared_weak_count *))v517->__on_zero_shared)(v517);
            std::__shared_weak_count::__release_weak(v517);
          }
        }
        v520 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v520)
        {
          *(_QWORD *)v520 = off_24C4149D0;
          v521 = *(unsigned int *)(v520 + 40);
          if ((_DWORD)v521 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v521])(&v1200, v520 + 16);
          *(_DWORD *)(v520 + 40) = -1;
          MEMORY[0x20BD3583C](v520, 0x10A3C40ED729E16);
        }
        v523 = (void *)*((_QWORD *)&v1153 + 1);
        v522 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v524 = (unint64_t *)(v1154 + 8);
          do
            v525 = __ldxr(v524);
          while (__stxr(v525 + 1, v524));
          v526 = *(_QWORD *)&v1155[4];
          v527 = HIDWORD(v1157[0]);
          v528 = (void *)*((_QWORD *)&v1154 + 1);
          do
            v529 = __ldxr(v524);
          while (__stxr(v529 + 1, v524));
          do
            v530 = __ldxr(v524);
          while (__stxr(v530 + 1, v524));
          do
            v531 = __ldaxr(v524);
          while (__stlxr(v531 - 1, v524));
          if (!v531)
          {
            ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
            std::__shared_weak_count::__release_weak(v522);
          }
          do
            v532 = __ldaxr(v524);
          while (__stlxr(v532 - 1, v524));
          if (!v532)
          {
            ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
            std::__shared_weak_count::__release_weak(v522);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v533 = __ldxr(v524);
          while (__stxr(v533 + 1, v524));
          do
            v534 = __ldxr(v524);
          while (__stxr(v534 + 1, v524));
        }
        else
        {
          v526 = *(_QWORD *)&v1155[4];
          v527 = HIDWORD(v1157[0]);
          v528 = (void *)*((_QWORD *)&v1154 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v523;
        v1180 = v522;
        v1181 = v526;
        v1182 = v527;
        v1183 = v528;
        v1184 = 37;
        v1185 = 256;
        if (v522)
        {
          v971 = (unint64_t *)&v522->__shared_owners_;
          do
            v972 = __ldaxr(v971);
          while (__stlxr(v972 - 1, v971));
          if (!v972)
          {
            ((void (*)(std::__shared_weak_count *))v522->__on_zero_shared)(v522);
            std::__shared_weak_count::__release_weak(v522);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v523;
        __p = v522;
        v1189 = v526;
        v1190 = v527;
        v1192 = v528;
        v1193 = 37;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v973 = v1197;
          if (v1197)
          {
            v974 = (unint64_t *)&v1197->__shared_owners_;
            do
              v975 = __ldaxr(v974);
            while (__stlxr(v975 - 1, v974));
            if (!v975)
            {
              ((void (*)(std::__shared_weak_count *))v973->__on_zero_shared)(v973);
              std::__shared_weak_count::__release_weak(v973);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v976 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v977 = (unint64_t *)((char *)__p + 8);
            do
              v978 = __ldaxr(v977);
            while (__stlxr(v978 - 1, v977));
            if (!v978)
            {
              ((void (*)(std::__shared_weak_count *))v976->__on_zero_shared)(v976);
              std::__shared_weak_count::__release_weak(v976);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v979 = v1180;
        if (v1180)
        {
          v980 = (unint64_t *)&v1180->__shared_owners_;
          do
            v981 = __ldaxr(v980);
          while (__stlxr(v981 - 1, v980));
          if (!v981)
          {
            ((void (*)(std::__shared_weak_count *))v979->__on_zero_shared)(v979);
            std::__shared_weak_count::__release_weak(v979);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3FA120;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v982 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v982);
          while (__stlxr(v826 - 1, v982));
          goto LABEL_1872;
        }
        return;
      }
      if (!v110)
      {
        v111 = a2[2];
        LOBYTE(v1199) = 0;
        *(_QWORD *)&v1167 = &off_24C3FA120;
        v1200 = &off_24C404E60;
        sub_20B27BE00(v111, (char *)&v1199, (unint64_t)&v1153);
        v112 = operator new();
        v113 = v112;
        *(_QWORD *)v112 = off_24C4149D0;
        v114 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v112 + 8) = DWORD2(v1153);
        *(_BYTE *)(v112 + 16) = 0;
        *(_DWORD *)(v112 + 40) = -1;
        if ((_DWORD)v114 == -1)
        {
          v793 = v1158;
          *(_OWORD *)(v112 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v112 + 64) = v793;
          *(_QWORD *)(v112 + 80) = v1159;
          *(_QWORD *)v112 = off_24C415630;
          v1205[0] = v112;
        }
        else
        {
          ((void (*)(uint64_t (***)(), uint64_t, __int128 *))off_24C4040D0[v114])(&v1200, v112 + 16, &v1154);
          *(_DWORD *)(v113 + 40) = v114;
          v115 = *(unsigned int *)&v1155[8];
          v116 = v1158;
          *(_OWORD *)(v113 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v113 + 64) = v116;
          *(_QWORD *)(v113 + 80) = v1159;
          *(_QWORD *)v113 = off_24C415630;
          v1205[0] = v113;
          *(_QWORD *)&v1153 = off_24C4149D0;
          if ((_DWORD)v115 != -1)
            ((void (*)(uint64_t (***)(), __int128 *))off_24C415AE0[v115])(&v1200, &v1154);
        }
        *(_QWORD *)v1202 = v113;
        v794 = (_QWORD *)operator new();
        *v794 = &off_24C3FA218;
        v794[1] = 0;
        v794[2] = 0;
        v794[3] = v113;
        *(_QWORD *)&v1202[8] = v794;
        v1205[0] = 0;
        sub_20AF849D4((uint64_t)&v1167 + 8, (uint64_t *)v1202);
        v795 = *(std::__shared_weak_count **)&v1202[8];
        if (*(_QWORD *)&v1202[8])
        {
          v796 = (unint64_t *)(*(_QWORD *)&v1202[8] + 8);
          do
            v797 = __ldaxr(v796);
          while (__stlxr(v797 - 1, v796));
          if (!v797)
          {
            ((void (*)(std::__shared_weak_count *))v795->__on_zero_shared)(v795);
            std::__shared_weak_count::__release_weak(v795);
          }
        }
        v798 = v1205[0];
        v1205[0] = 0;
        if (v798)
        {
          *(_QWORD *)v798 = off_24C4149D0;
          v799 = *(unsigned int *)(v798 + 40);
          if ((_DWORD)v799 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v799])(&v1153, v798 + 16);
          *(_DWORD *)(v798 + 40) = -1;
          MEMORY[0x20BD3583C](v798, 0x10A3C40ED729E16);
        }
        v801 = (void *)*((_QWORD *)&v1167 + 1);
        v800 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v802 = (unint64_t *)(v1168 + 8);
          do
            v803 = __ldxr(v802);
          while (__stxr(v803 + 1, v802));
          v804 = *(_QWORD *)&v1169[4];
          v805 = HIDWORD(v1171);
          v806 = (void *)*((_QWORD *)&v1168 + 1);
          do
            v807 = __ldxr(v802);
          while (__stxr(v807 + 1, v802));
          do
            v808 = __ldxr(v802);
          while (__stxr(v808 + 1, v802));
          do
            v809 = __ldaxr(v802);
          while (__stlxr(v809 - 1, v802));
          if (!v809)
          {
            ((void (*)(std::__shared_weak_count *))v800->__on_zero_shared)(v800);
            std::__shared_weak_count::__release_weak(v800);
          }
          do
            v810 = __ldaxr(v802);
          while (__stlxr(v810 - 1, v802));
          if (!v810)
          {
            ((void (*)(std::__shared_weak_count *))v800->__on_zero_shared)(v800);
            std::__shared_weak_count::__release_weak(v800);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v811 = __ldxr(v802);
          while (__stxr(v811 + 1, v802));
          do
            v812 = __ldxr(v802);
          while (__stxr(v812 + 1, v802));
        }
        else
        {
          v804 = *(_QWORD *)&v1169[4];
          v805 = HIDWORD(v1171);
          v806 = (void *)*((_QWORD *)&v1168 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v801;
        v1180 = v800;
        v1181 = v804;
        v1182 = v805;
        v1183 = v806;
        v1184 = 37;
        v1185 = 256;
        if (v800)
        {
          v1141 = (unint64_t *)&v800->__shared_owners_;
          do
            v1142 = __ldaxr(v1141);
          while (__stlxr(v1142 - 1, v1141));
          if (!v1142)
          {
            ((void (*)(std::__shared_weak_count *))v800->__on_zero_shared)(v800);
            std::__shared_weak_count::__release_weak(v800);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v801;
        __p = v800;
        v1189 = v804;
        v1190 = v805;
        v1192 = v806;
        v1193 = 37;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v1143 = v1197;
          if (v1197)
          {
            v1144 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1145 = __ldaxr(v1144);
            while (__stlxr(v1145 - 1, v1144));
            if (!v1145)
            {
              ((void (*)(std::__shared_weak_count *))v1143->__on_zero_shared)(v1143);
              std::__shared_weak_count::__release_weak(v1143);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1146 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1147 = (unint64_t *)((char *)__p + 8);
            do
              v1148 = __ldaxr(v1147);
            while (__stlxr(v1148 - 1, v1147));
            if (!v1148)
            {
              ((void (*)(std::__shared_weak_count *))v1146->__on_zero_shared)(v1146);
              std::__shared_weak_count::__release_weak(v1146);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1149 = v1180;
        if (v1180)
        {
          v1150 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1151 = __ldaxr(v1150);
          while (__stlxr(v1151 - 1, v1150));
          if (!v1151)
          {
            ((void (*)(std::__shared_weak_count *))v1149->__on_zero_shared)(v1149);
            std::__shared_weak_count::__release_weak(v1149);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3FA120;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1152 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1152);
          while (__stlxr(v826 - 1, v1152));
          goto LABEL_1872;
        }
        return;
      }
      sub_20B02B8A0((unsigned int *)a2[2], *a2[4], (uint64_t)&v1167);
      if (!v1177)
        goto LABEL_734;
      v256 = a2[2];
      v257 = *a2[4];
      *(_QWORD *)&v1178 = *(_QWORD *)a2[3];
      *(_QWORD *)v1202 = &off_24C40AA78;
      if (v256[1])
        v258 = *v256 == 0;
      else
        v258 = 1;
      v259 = v257 << 32;
      if (v258)
        v259 = 0;
      *(_QWORD *)&v1153 = v259 | (4 * (*v256 != 0));
      sub_20B0563F4((uint64_t *)&v1178, v256, &v1153, (uint64_t)&v1202[8]);
      *(_QWORD *)&v1153 = &off_24C404E98;
      sub_20B06F17C((uint64_t)&v1153 + 8, (uint64_t)v1202);
      v1164 = &off_24C3F2D20;
      sub_20B06F9D4((uint64_t)&v1165, (uint64_t)&v1153);
      sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
      sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
      sub_20B008430((uint64_t)&v1178);
      v1164 = &off_24C3F2D20;
      v260 = v1166;
      if (v1166)
      {
        v261 = (unint64_t *)&v1166->__shared_owners_;
        do
          v262 = __ldaxr(v261);
        while (__stlxr(v262 - 1, v261));
        if (!v262)
        {
          ((void (*)(std::__shared_weak_count *))v260->__on_zero_shared)(v260);
          std::__shared_weak_count::__release_weak(v260);
        }
      }
      sub_20AEC147C((uint64_t)&v1153 + 8);
      v140 = *(std::__shared_weak_count **)&v1202[16];
      if (*(_QWORD *)&v1202[16])
      {
        v263 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
        do
          v142 = __ldaxr(v263);
        while (__stlxr(v142 - 1, v263));
        goto LABEL_339;
      }
      goto LABEL_743;
    case 38:
      v13 = **a2;
      if (v13 == 1)
      {
        v130 = a2[2];
        *(_QWORD *)&v1153 = &off_24C3FA268;
        sub_20B06FCD8(v130, (unint64_t)v1202);
        *(_QWORD *)&v1167 = *(_QWORD *)v1202;
        if (*(_QWORD *)v1202)
        {
          v131 = (_QWORD *)operator new();
          v132 = *(_QWORD *)v1202;
          *v131 = &off_24C3FA360;
          v131[1] = 0;
          v131[2] = 0;
          v131[3] = v132;
        }
        else
        {
          v131 = 0;
        }
        *((_QWORD *)&v1167 + 1) = v131;
        *(_QWORD *)v1202 = 0;
        sub_20AF84DC8((uint64_t)&v1153 + 8, (uint64_t *)&v1167);
        v301 = (std::__shared_weak_count *)*((_QWORD *)&v1167 + 1);
        if (*((_QWORD *)&v1167 + 1))
        {
          v302 = (unint64_t *)(*((_QWORD *)&v1167 + 1) + 8);
          do
            v303 = __ldaxr(v302);
          while (__stlxr(v303 - 1, v302));
          if (!v303)
          {
            ((void (*)(std::__shared_weak_count *))v301->__on_zero_shared)(v301);
            std::__shared_weak_count::__release_weak(v301);
          }
        }
        v304 = *(_QWORD *)v1202;
        *(_QWORD *)v1202 = 0;
        if (v304)
        {
          *(_QWORD *)v304 = off_24C414B80;
          v305 = *(unsigned int *)(v304 + 40);
          if ((_DWORD)v305 != -1)
            ((void (*)(uint64_t (***)(), uint64_t))off_24C415AE0[v305])(&v1200, v304 + 16);
          *(_DWORD *)(v304 + 40) = -1;
          MEMORY[0x20BD3583C](v304, 0x10A3C40ED729E16);
        }
        v307 = (void *)*((_QWORD *)&v1153 + 1);
        v306 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v308 = (unint64_t *)(v1154 + 8);
          do
            v309 = __ldxr(v308);
          while (__stxr(v309 + 1, v308));
          v310 = *(_QWORD *)&v1155[4];
          v311 = HIDWORD(v1157[0]);
          v312 = (void *)*((_QWORD *)&v1154 + 1);
          do
            v313 = __ldxr(v308);
          while (__stxr(v313 + 1, v308));
          do
            v314 = __ldxr(v308);
          while (__stxr(v314 + 1, v308));
          do
            v315 = __ldaxr(v308);
          while (__stlxr(v315 - 1, v308));
          if (!v315)
          {
            ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
            std::__shared_weak_count::__release_weak(v306);
          }
          do
            v316 = __ldaxr(v308);
          while (__stlxr(v316 - 1, v308));
          if (!v316)
          {
            ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
            std::__shared_weak_count::__release_weak(v306);
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v317 = __ldxr(v308);
          while (__stxr(v317 + 1, v308));
          do
            v318 = __ldxr(v308);
          while (__stxr(v318 + 1, v308));
        }
        else
        {
          v310 = *(_QWORD *)&v1155[4];
          v311 = HIDWORD(v1157[0]);
          v312 = (void *)*((_QWORD *)&v1154 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v1179 = v307;
        v1180 = v306;
        v1181 = v310;
        v1182 = 2 * v311;
        v1183 = v312;
        v1184 = 38;
        v1185 = 256;
        if (v306)
        {
          v827 = (unint64_t *)&v306->__shared_owners_;
          do
            v828 = __ldaxr(v827);
          while (__stlxr(v828 - 1, v827));
          if (!v828)
          {
            ((void (*)(std::__shared_weak_count *))v306->__on_zero_shared)(v306);
            std::__shared_weak_count::__release_weak(v306);
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v307;
        __p = v306;
        v1189 = v310;
        v1190 = 2 * v311;
        v1192 = v312;
        v1193 = 38;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v829 = v1197;
          if (v1197)
          {
            v830 = (unint64_t *)&v1197->__shared_owners_;
            do
              v831 = __ldaxr(v830);
            while (__stlxr(v831 - 1, v830));
            if (!v831)
            {
              ((void (*)(std::__shared_weak_count *))v829->__on_zero_shared)(v829);
              std::__shared_weak_count::__release_weak(v829);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v832 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v833 = (unint64_t *)((char *)__p + 8);
            do
              v834 = __ldaxr(v833);
            while (__stlxr(v834 - 1, v833));
            if (!v834)
            {
              ((void (*)(std::__shared_weak_count *))v832->__on_zero_shared)(v832);
              std::__shared_weak_count::__release_weak(v832);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v835 = v1180;
        if (v1180)
        {
          v836 = (unint64_t *)&v1180->__shared_owners_;
          do
            v837 = __ldaxr(v836);
          while (__stlxr(v837 - 1, v836));
          if (!v837)
          {
            ((void (*)(std::__shared_weak_count *))v835->__on_zero_shared)(v835);
            std::__shared_weak_count::__release_weak(v835);
          }
        }
        *(_QWORD *)&v1153 = &off_24C3FA268;
        v824 = (std::__shared_weak_count *)v1154;
        if ((_QWORD)v1154)
        {
          v838 = (unint64_t *)(v1154 + 8);
          do
            v826 = __ldaxr(v838);
          while (__stlxr(v826 - 1, v838));
          goto LABEL_1872;
        }
      }
      else if (v13)
      {
        sub_20B02C1D4(*(_QWORD *)a2[3], (unsigned int *)a2[2], *a2[4], (uint64_t)&v1167);
        if (v1177)
        {
          v133 = a2[2];
          v134 = *a2[4];
          *(_QWORD *)&v1178 = *(_QWORD *)a2[3];
          *(_QWORD *)v1202 = &off_24C40ACF0;
          if (v133[1])
            v135 = *v133 == 0;
          else
            v135 = 1;
          v136 = v134 << 32;
          if (v135)
            v136 = 0;
          *(_QWORD *)&v1153 = v136 | (4 * (*v133 != 0));
          sub_20B057258((uint64_t *)&v1178, v133, &v1153, (uint64_t)&v1202[8]);
          *(_QWORD *)&v1153 = &off_24C404F90;
          sub_20B06FFC0((uint64_t)&v1153 + 8, (uint64_t)v1202);
          v1164 = &off_24C3F2D20;
          sub_20B070818((uint64_t)&v1165, (uint64_t)&v1153);
          sub_20B008318((uint64_t)&v1178, (uint64_t)&v1164);
          sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
          sub_20B008430((uint64_t)&v1178);
          v1164 = &off_24C3F2D20;
          v137 = v1166;
          if (v1166)
          {
            v138 = (unint64_t *)&v1166->__shared_owners_;
            do
              v139 = __ldaxr(v138);
            while (__stlxr(v139 - 1, v138));
            if (!v139)
            {
              ((void (*)(std::__shared_weak_count *))v137->__on_zero_shared)(v137);
              std::__shared_weak_count::__release_weak(v137);
            }
          }
          sub_20AEC147C((uint64_t)&v1153 + 8);
          v140 = *(std::__shared_weak_count **)&v1202[16];
          if (*(_QWORD *)&v1202[16])
          {
            v141 = (unint64_t *)(*(_QWORD *)&v1202[16] + 8);
            do
              v142 = __ldaxr(v141);
            while (__stlxr(v142 - 1, v141));
LABEL_339:
            if (!v142)
            {
              ((void (*)(std::__shared_weak_count *))v140->__on_zero_shared)(v140);
              std::__shared_weak_count::__release_weak(v140);
            }
          }
        }
        else
        {
LABEL_734:
          v1178 = v1167;
          sub_20AECEBD0(&v1179, &v1168);
          sub_20B009CA0((uint64_t)a2[1], &v1178);
          if ((_BYTE)v1193)
          {
            if ((_BYTE)v1192)
            {
              if (v1191 < 0)
                operator delete(__p);
              if (SHIBYTE(v1186) < 0)
                operator delete(v1183);
            }
            if ((_BYTE)v1182 && SHIBYTE(v1181) < 0)
              operator delete(v1179);
          }
        }
LABEL_743:
        if (!v1177 && v1176)
        {
          if (v1175)
          {
            if (v1174 < 0)
              operator delete(v1173);
            if (v1172 < 0)
              operator delete(v1171);
          }
          if (v1169[8] && (v1169[7] & 0x80000000) != 0)
            operator delete((void *)v1168);
        }
      }
      else
      {
        v14 = a2[2];
        *(_QWORD *)&v1167 = &off_24C3FA268;
        v15 = v14[1];
        v16 = 4 * (*v14 != 0);
        LODWORD(v17) = v16 * *v14;
        if (v17 <= 0x10)
          LODWORD(v17) = 16;
        v18 = *(_QWORD *)v14;
        *(_QWORD *)&v1153 = off_24C4156C0;
        if (v15)
          v17 = v17;
        else
          v17 = 16;
        *(_QWORD *)&v1202[4] = v18;
        *(_DWORD *)v1202 = 4;
        LODWORD(v1205[0]) = 1;
        *(_QWORD *)((char *)v1205 + 4) = v16 & 0x3FFFFFFFFLL | ((unint64_t)(v17 >> 2) << 34);
        *(_QWORD *)&v1202[12] = v1205[0];
        *(_DWORD *)&v1202[20] = v17;
        v1203 = v18;
        v1204 = *(_QWORD *)((char *)v1205 + 4);
        sub_20B259520((uint64_t)&v1153, 0, 38, (uint64_t)v1202, 0);
        *(_QWORD *)&v1153 = off_24C4156C0;
        v19 = operator new();
        v20 = (uint64_t (**)())v19;
        *(_QWORD *)v19 = off_24C414B80;
        v21 = *(unsigned int *)&v1155[8];
        *(_DWORD *)(v19 + 8) = DWORD2(v1153);
        *(_BYTE *)(v19 + 16) = 0;
        *(_DWORD *)(v19 + 40) = -1;
        if ((_DWORD)v21 == -1)
        {
          v554 = v1158;
          *(_OWORD *)(v19 + 48) = *(_OWORD *)v1157;
          *(_OWORD *)(v19 + 64) = v554;
          *(_QWORD *)(v19 + 80) = v1159;
          *(_QWORD *)v19 = off_24C4156C0;
          v1199 = v19;
        }
        else
        {
          ((void (*)(_BYTE *, uint64_t, __int128 *))off_24C4040D0[v21])(v1202, v19 + 16, &v1154);
          *((_DWORD *)v20 + 10) = v21;
          v22 = *(unsigned int *)&v1155[8];
          v23 = v1158;
          *((_OWORD *)v20 + 3) = *(_OWORD *)v1157;
          *((_OWORD *)v20 + 4) = v23;
          v20[10] = (uint64_t (*)())v1159;
          *v20 = (uint64_t (*)())off_24C4156C0;
          v1199 = (uint64_t)v20;
          *(_QWORD *)&v1153 = off_24C414B80;
          if ((_DWORD)v22 != -1)
            ((void (*)(_BYTE *, __int128 *))off_24C415AE0[v22])(v1202, &v1154);
        }
        v1200 = v20;
        v555 = (std::__shared_weak_count *)operator new();
        v555->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA360;
        v555->__shared_owners_ = 0;
        v555->__shared_weak_owners_ = 0;
        v555[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
        v1201 = v555;
        v1199 = 0;
        sub_20AF84DC8((uint64_t)&v1167 + 8, (uint64_t *)&v1200);
        v556 = v1201;
        if (v1201)
        {
          v557 = (unint64_t *)&v1201->__shared_owners_;
          do
            v558 = __ldaxr(v557);
          while (__stlxr(v558 - 1, v557));
          if (!v558)
          {
            ((void (*)(std::__shared_weak_count *))v556->__on_zero_shared)(v556);
            std::__shared_weak_count::__release_weak(v556);
          }
        }
        v559 = v1199;
        v1199 = 0;
        if (v559)
        {
          *(_QWORD *)v559 = off_24C414B80;
          v560 = *(unsigned int *)(v559 + 40);
          if ((_DWORD)v560 != -1)
            ((void (*)(__int128 *, uint64_t))off_24C415AE0[v560])(&v1153, v559 + 16);
          *(_DWORD *)(v559 + 40) = -1;
          MEMORY[0x20BD3583C](v559, 0x10A3C40ED729E16);
        }
        v561 = (void *)*((_QWORD *)&v1167 + 1);
        v562 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v563 = (unint64_t *)(v1168 + 8);
          do
            v564 = __ldxr(v563);
          while (__stxr(v564 + 1, v563));
          v565 = *(_QWORD *)&v1169[4];
          v566 = HIDWORD(v1171);
          v567 = (void *)*((_QWORD *)&v1168 + 1);
          do
            v568 = __ldxr(v563);
          while (__stxr(v568 + 1, v563));
          do
            v569 = __ldxr(v563);
          while (__stxr(v569 + 1, v563));
          do
            v570 = __ldaxr(v563);
          while (__stlxr(v570 - 1, v563));
          if (!v570)
          {
            v571 = v561;
            ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
            std::__shared_weak_count::__release_weak(v562);
            v561 = v571;
          }
          do
            v572 = __ldaxr(v563);
          while (__stlxr(v572 - 1, v563));
          if (!v572)
          {
            v573 = v561;
            ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
            std::__shared_weak_count::__release_weak(v562);
            v561 = v573;
          }
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
          do
            v574 = __ldxr(v563);
          while (__stxr(v574 + 1, v563));
          do
            v575 = __ldxr(v563);
          while (__stxr(v575 + 1, v563));
        }
        else
        {
          v565 = *(_QWORD *)&v1169[4];
          v566 = HIDWORD(v1171);
          v567 = (void *)*((_QWORD *)&v1168 + 1);
          *(_QWORD *)&v1178 = &off_24C403F68;
          *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        }
        v995 = 2 * v566;
        v1179 = v561;
        v1180 = v562;
        v1181 = v565;
        v1182 = 2 * v566;
        v1183 = v567;
        v1184 = 38;
        v1185 = 256;
        if (v562)
        {
          v996 = (unint64_t *)&v562->__shared_owners_;
          do
            v997 = __ldaxr(v996);
          while (__stlxr(v997 - 1, v996));
          if (!v997)
          {
            v998 = v561;
            ((void (*)(std::__shared_weak_count *))v562->__on_zero_shared)(v562);
            std::__shared_weak_count::__release_weak(v562);
            v561 = v998;
          }
        }
        v1186 = &off_24C3F2D20;
        v1187 = v561;
        __p = v562;
        v1189 = v565;
        v1190 = v995;
        v1192 = v567;
        v1193 = 38;
        v1194 = 256;
        v1195 = 1;
        LOBYTE(v1196) = 0;
        v1198 = 0;
        sub_20B011258((uint64_t)a2[1], (uint64_t)&v1178);
        *(_QWORD *)&v1178 = &off_24C403F68;
        if (v1198)
        {
          v1196 = &off_24C4169B8;
          v999 = v1197;
          if (v1197)
          {
            v1000 = (unint64_t *)&v1197->__shared_owners_;
            do
              v1001 = __ldaxr(v1000);
            while (__stlxr(v1001 - 1, v1000));
            if (!v1001)
            {
              ((void (*)(std::__shared_weak_count *))v999->__on_zero_shared)(v999);
              std::__shared_weak_count::__release_weak(v999);
            }
          }
        }
        if (v1195)
        {
          v1186 = &off_24C3F2D20;
          v1002 = (std::__shared_weak_count *)__p;
          if (__p)
          {
            v1003 = (unint64_t *)((char *)__p + 8);
            do
              v1004 = __ldaxr(v1003);
            while (__stlxr(v1004 - 1, v1003));
            if (!v1004)
            {
              ((void (*)(std::__shared_weak_count *))v1002->__on_zero_shared)(v1002);
              std::__shared_weak_count::__release_weak(v1002);
            }
          }
        }
        *((_QWORD *)&v1178 + 1) = &off_24C3F2CB0;
        v1005 = v1180;
        if (v1180)
        {
          v1006 = (unint64_t *)&v1180->__shared_owners_;
          do
            v1007 = __ldaxr(v1006);
          while (__stlxr(v1007 - 1, v1006));
          if (!v1007)
          {
            ((void (*)(std::__shared_weak_count *))v1005->__on_zero_shared)(v1005);
            std::__shared_weak_count::__release_weak(v1005);
          }
        }
        *(_QWORD *)&v1167 = &off_24C3FA268;
        v824 = (std::__shared_weak_count *)v1168;
        if ((_QWORD)v1168)
        {
          v1008 = (unint64_t *)(v1168 + 8);
          do
            v826 = __ldaxr(v1008);
          while (__stlxr(v826 - 1, v1008));
LABEL_1872:
          if (!v826)
          {
            ((void (*)(std::__shared_weak_count *))v824->__on_zero_shared)(v824);
            std::__shared_weak_count::__release_weak(v824);
          }
        }
      }
      return;
    default:
      return;
  }
}

void sub_20B063144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,uint64_t a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,int a56,char a57,int a58,char a59,uint64_t a60,uint64_t a61,void *a62,uint64_t a63)
{
  char a67;
  char a68;
  void *a69;
  char a72;
  void *__p;
  char a74;
  char a75;
  char a76;

  if (a76)
  {
    if (a75)
    {
      if (a74 < 0)
        operator delete(__p);
      if (a72 < 0)
        operator delete(a69);
    }
    if (a68 && a67 < 0)
      operator delete(a62);
  }
  if (!a59 && a57)
  {
    if (a55)
    {
      if (a54 < 0)
        operator delete(a49);
      if (a47 < 0)
        operator delete(a42);
    }
    if (a41)
    {
      if (a40 < 0)
      {
        operator delete(a35);
        _Unwind_Resume(a1);
      }
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B06497C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B0649E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C414820;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

__n128 sub_20B064A6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C4169B8;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

__n128 sub_20B064A88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_24C416978;
  return result;
}

__n128 sub_20B064AA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_24C416998;
  return result;
}

__n128 sub_20B064AC0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  *a2 = *a3;
  a3->n128_u64[0] = 0;
  a3->n128_u64[1] = 0;
  return result;
}

double sub_20B064AD0@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  void (**v9)();
  int v10;
  _BYTE v11[24];
  unsigned int v12;
  __int128 v13;
  _QWORD v14[2];

  v2 = a2;
  LODWORD(a2) = *a1;
  v3 = *a1 != 0;
  if (a1[1])
    a2 = (uint64_t *)a2;
  else
    a2 = 0;
  v14[0] = *(_QWORD *)a1;
  v14[1] = v3 | ((_QWORD)a2 << 32);
  sub_20B2647A4((uint64_t)&v9, (uint64_t)v14);
  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = off_24C414820;
  v6 = v12;
  *(_DWORD *)(v4 + 8) = v10;
  *(_BYTE *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  if ((_DWORD)v6 == -1)
  {
    result = *(double *)&v13;
    *(_OWORD *)(v4 + 48) = v13;
    *(_QWORD *)v4 = off_24C414F70;
    *v2 = v4;
  }
  else
  {
    ((void (*)(_QWORD *, uint64_t, _BYTE *))off_24C4040D0[v6])(v14, v4 + 16, v11);
    *(_DWORD *)(v5 + 40) = v6;
    v7 = v12;
    result = *(double *)&v13;
    *(_OWORD *)(v5 + 48) = v13;
    *(_QWORD *)v5 = off_24C414F70;
    *v2 = v5;
    v9 = off_24C414820;
    if ((_DWORD)v7 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_24C415AE0[v7])(v14, v11);
  }
  return result;
}

void sub_20B064C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B24EF40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B064C20(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B064C88()
{
  return 1;
}

uint64_t sub_20B064C90(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20B064C98@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20B064CAC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B064D28(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  size_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  size_t v36;
  uint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  uint64_t v42;
  size_t v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  size_t v46[2];
  __int128 v47;
  _QWORD v48[3];
  unsigned int v49;
  __int128 v50;

  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      v43 = *(_QWORD *)(a2 + 8);
      v44 = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      v43 = 0;
      v44 = 0;
    }
    (*(void (**)(size_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v46, v8, 1);
    v19 = *(_QWORD *)(v46[0] + 16);
    v47 = *(_OWORD *)v46[0];
    v48[0] = v19;
    v46[0] = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v20 = (unint64_t *)&v4->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v45 = *((_QWORD *)&v47 + 1);
    sub_20B064AD0(&v45, (uint64_t *)&v43);
    v42 = v43;
    sub_20B264ABC(v43, (uint64_t *)&v43);
    v46[0] = (size_t)&v47;
    v46[1] = (size_t)&v43;
    sub_20AFC3DF8(v46);
    if (v42)
    {
      v22 = (std::__shared_weak_count *)operator new();
      v22->__shared_owners_ = 0;
      v23 = (unint64_t *)&v22->__shared_owners_;
      v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F92B8;
      v22->__shared_weak_owners_ = 0;
      v22[1].__vftable = (std::__shared_weak_count_vtbl *)v42;
      *(_QWORD *)a1 = v42;
      *(_QWORD *)(a1 + 8) = v22;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    else
    {
      v22 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v42 + 64))(&v47, v42, 1);
    v25 = *(_QWORD *)(v47 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v47;
    *(_QWORD *)(a1 + 40) = v25;
    *(_QWORD *)&v47 = 0;
    MEMORY[0x20BD3583C]();
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 32);
    v26 = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v11 = a2 + 24;
    if (*(_BYTE *)(a2 + 48))
      v12 = *(_QWORD *)(a2 + 24) == 0;
    else
      v12 = 1;
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 32);
      v14 = v13 << 32;
      if (!HIDWORD(v13))
        v14 = 0;
      v43 = *(_QWORD *)(a2 + 32);
      v44 = (std::__shared_weak_count *)(v14 | ((_DWORD)v13 != 0));
      sub_20B2647A4((uint64_t)&v47, (uint64_t)&v43);
      v15 = operator new();
      v16 = v15;
      *(_QWORD *)v15 = off_24C414820;
      v17 = v49;
      *(_DWORD *)(v15 + 8) = DWORD2(v47);
      *(_BYTE *)(v15 + 16) = 0;
      *(_DWORD *)(v15 + 40) = -1;
      if ((_DWORD)v17 == -1)
      {
        *(_OWORD *)(v15 + 48) = v50;
        *(_QWORD *)v15 = off_24C414F70;
        v46[0] = v15;
      }
      else
      {
        ((void (*)(size_t *, uint64_t, _QWORD *))off_24C4040D0[v17])(&v43, v15 + 16, v48);
        *(_DWORD *)(v16 + 40) = v17;
        v18 = v49;
        *(_OWORD *)(v16 + 48) = v50;
        *(_QWORD *)v16 = off_24C414F70;
        v46[0] = v16;
        *(_QWORD *)&v47 = off_24C414820;
        if ((_DWORD)v18 != -1)
          ((void (*)(size_t *, _QWORD *))off_24C415AE0[v18])(&v43, v48);
      }
      v43 = v16;
      v28 = (std::__shared_weak_count *)operator new();
      v28->__shared_owners_ = 0;
      v29 = (unint64_t *)&v28->__shared_owners_;
      v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F92B8;
      v28->__shared_weak_owners_ = 0;
      v28[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
      v46[0] = 0;
      v43 = 0;
      v44 = 0;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v28;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      *(_QWORD *)(a1 + 16) = 0;
      (*(void (**)(__int128 *__return_ptr, size_t, uint64_t))(*(_QWORD *)v16 + 64))(&v47, v16, 1);
      v31 = *(_QWORD *)(v47 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)v47;
      *(_QWORD *)(a1 + 40) = v31;
      *(_QWORD *)&v47 = 0;
      MEMORY[0x20BD3583C]();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 32);
      do
        v32 = __ldaxr(v29);
      while (__stlxr(v32 - 1, v29));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      v33 = v44;
      if (v44)
      {
        v34 = (unint64_t *)&v44->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      *(_QWORD *)&v47 = v11;
      *((_QWORD *)&v47 + 1) = a1 + 24;
      sub_20AFC3DF8((size_t *)&v47);
      v36 = v46[0];
      v46[0] = 0;
      if (v36)
      {
        *(_QWORD *)v36 = off_24C414820;
        v37 = *(unsigned int *)(v36 + 40);
        if ((_DWORD)v37 != -1)
          ((void (*)(__int128 *, size_t))off_24C415AE0[v37])(&v47, v36 + 16);
        *(_DWORD *)(v36 + 40) = -1;
        MEMORY[0x20BD3583C](v36, 0x10A3C40A1F8E8FFLL);
      }
    }
    else
    {
      v38 = *(std::__shared_weak_count **)(a2 + 16);
      v39 = (unint64_t *)&v38->__shared_owners_;
      do
        v40 = __ldxr(v39);
      while (__stxr(v40 + 1, v39));
      do
        v41 = __ldaxr(v39);
      while (__stlxr(v41 - 1, v39));
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
      __break(1u);
    }
  }
}

void sub_20B0652F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_20AEC147C(v9);
  sub_20B0649E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B065310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20AEC147C(v5);
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  sub_20AEC147C((uint64_t)va);
  sub_20B0649E4((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B065360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B0649E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B065374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B24EF40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B065388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B0649E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06539C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v4 = v3;
  sub_20AEC147C(v2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_20AEC147C((uint64_t)va);
  sub_20B0649E4((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B0653F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B0649E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06540C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B065420(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B0649E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B065434(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 1;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B0655F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B065648(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B0656B0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C414A60;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

void sub_20B06573C()
{
  JUMPOUT(0x20BD3583CLL);
}

double sub_20B065750@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  void (**v9)();
  int v10;
  _BYTE v11[24];
  unsigned int v12;
  __int128 v13;
  _QWORD v14[2];

  v2 = a2;
  LODWORD(a2) = *a1;
  v3 = *a1 != 0;
  if (a1[1])
    a2 = (uint64_t *)a2;
  else
    a2 = 0;
  v14[0] = *(_QWORD *)a1;
  v14[1] = v3 | ((_QWORD)a2 << 32);
  sub_20B266004((uint64_t)&v9, (uint64_t)v14);
  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = off_24C414A60;
  v6 = v12;
  *(_DWORD *)(v4 + 8) = v10;
  *(_BYTE *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  if ((_DWORD)v6 == -1)
  {
    result = *(double *)&v13;
    *(_OWORD *)(v4 + 48) = v13;
    *(_QWORD *)v4 = off_24C415000;
    *v2 = v4;
  }
  else
  {
    ((void (*)(_QWORD *, uint64_t, _BYTE *))off_24C4040D0[v6])(v14, v4 + 16, v11);
    *(_DWORD *)(v5 + 40) = v6;
    v7 = v12;
    result = *(double *)&v13;
    *(_OWORD *)(v5 + 48) = v13;
    *(_QWORD *)v5 = off_24C415000;
    *v2 = v5;
    v9 = off_24C414A60;
    if ((_DWORD)v7 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_24C415AE0[v7])(v14, v11);
  }
  return result;
}

void sub_20B06588C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B255ED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0658A0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B065908()
{
  return 2;
}

uint64_t sub_20B065910(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20B065918@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20B065930(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0659AC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t *v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  __int128 v47;
  _QWORD v48[3];
  unsigned int v49;
  __int128 v50;

  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      v44 = *(_QWORD *)(a2 + 8);
      v45 = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      v44 = 0;
      v45 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v46, v8, 2);
    v19 = *(_QWORD *)(v46 + 16);
    v47 = *(_OWORD *)v46;
    v48[0] = v19;
    v46 = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v20 = (unint64_t *)&v4->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v46 = *((_QWORD *)&v47 + 1);
    sub_20B065750(&v46, &v44);
    v43 = v44;
    sub_20B26631C(v44, &v44);
    sub_20AFC48E4((uint64_t *)&v47, (uint64_t)&v44);
    if (v43)
    {
      v22 = (std::__shared_weak_count *)operator new();
      v22->__shared_owners_ = 0;
      v23 = (unint64_t *)&v22->__shared_owners_;
      v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9400;
      v22->__shared_weak_owners_ = 0;
      v22[1].__vftable = (std::__shared_weak_count_vtbl *)v43;
      *(_QWORD *)a1 = v43;
      *(_QWORD *)(a1 + 8) = v22;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    else
    {
      v22 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v43 + 64))(&v47, v43, 2);
    v25 = v47;
    v26 = *(_QWORD *)(v47 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v47;
    *(_QWORD *)(a1 + 40) = v26;
    *(_QWORD *)&v47 = 0;
    MEMORY[0x20BD3583C](v25);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 32);
    v27 = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v11 = (uint64_t *)(a2 + 24);
    if (*(_BYTE *)(a2 + 48))
      v12 = *(_QWORD *)(a2 + 24) == 0;
    else
      v12 = 1;
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 32);
      v14 = v13 << 32;
      if (!HIDWORD(v13))
        v14 = 0;
      v44 = *(_QWORD *)(a2 + 32);
      v45 = (std::__shared_weak_count *)(v14 | ((_DWORD)v13 != 0));
      sub_20B266004((uint64_t)&v47, (uint64_t)&v44);
      v15 = operator new();
      v16 = v15;
      *(_QWORD *)v15 = off_24C414A60;
      v17 = v49;
      *(_DWORD *)(v15 + 8) = DWORD2(v47);
      *(_BYTE *)(v15 + 16) = 0;
      *(_DWORD *)(v15 + 40) = -1;
      if ((_DWORD)v17 == -1)
      {
        *(_OWORD *)(v15 + 48) = v50;
        *(_QWORD *)v15 = off_24C415000;
        v46 = v15;
      }
      else
      {
        ((void (*)(uint64_t *, uint64_t, _QWORD *))off_24C4040D0[v17])(&v44, v15 + 16, v48);
        *(_DWORD *)(v16 + 40) = v17;
        v18 = v49;
        *(_OWORD *)(v16 + 48) = v50;
        *(_QWORD *)v16 = off_24C415000;
        v46 = v16;
        *(_QWORD *)&v47 = off_24C414A60;
        if ((_DWORD)v18 != -1)
          ((void (*)(uint64_t *, _QWORD *))off_24C415AE0[v18])(&v44, v48);
      }
      *(_QWORD *)&v47 = v16;
      v29 = (std::__shared_weak_count *)operator new();
      v29->__shared_owners_ = 0;
      v30 = (unint64_t *)&v29->__shared_owners_;
      v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9400;
      v29->__shared_weak_owners_ = 0;
      v29[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
      v46 = 0;
      v47 = 0uLL;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v29;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      *(_QWORD *)(a1 + 16) = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(&v44, v16, 2);
      v32 = *(_QWORD *)(v44 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)v44;
      *(_QWORD *)(a1 + 40) = v32;
      v44 = 0;
      MEMORY[0x20BD3583C]();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 32);
      do
        v33 = __ldaxr(v30);
      while (__stlxr(v33 - 1, v30));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v47 + 1);
      if (*((_QWORD *)&v47 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v47 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      sub_20AFC48E4(v11, a1 + 24);
      v37 = v46;
      v46 = 0;
      if (v37)
      {
        *(_QWORD *)v37 = off_24C414A60;
        v38 = *(unsigned int *)(v37 + 40);
        if ((_DWORD)v38 != -1)
          ((void (*)(uint64_t *, uint64_t))off_24C415AE0[v38])(&v44, v37 + 16);
        *(_DWORD *)(v37 + 40) = -1;
        MEMORY[0x20BD3583C](v37, 0x10A3C40A1F8E8FFLL);
      }
    }
    else
    {
      v39 = *(std::__shared_weak_count **)(a2 + 16);
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      __break(1u);
    }
  }
}

void sub_20B065F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20AEC147C(v8);
  sub_20B0656B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B065F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v12;
  uint64_t v13;
  va_list va;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  sub_20AEC147C(v8);
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  sub_20AEC147C((uint64_t)va1);
  sub_20B0656B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B065FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B0656B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B065FF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B255ED8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B06600C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B0656B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B066020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B0656B0(&a11);
  _Unwind_Resume(a1);
}

void sub_20B066074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B0656B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B066088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B06609C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B0656B0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0660B0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 2;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B066274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0662C8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B066330(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C414C10;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

void sub_20B0663BC()
{
  JUMPOUT(0x20BD3583CLL);
}

double sub_20B0663D0@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  void (**v9)();
  int v10;
  _BYTE v11[24];
  unsigned int v12;
  __int128 v13;
  _QWORD v14[2];

  v2 = a2;
  LODWORD(a2) = *a1;
  v3 = *a1 != 0;
  if (a1[1])
    a2 = (uint64_t *)a2;
  else
    a2 = 0;
  v14[0] = *(_QWORD *)a1;
  v14[1] = v3 | ((_QWORD)a2 << 32);
  sub_20B267860((uint64_t)&v9, (uint64_t)v14);
  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = off_24C414C10;
  v6 = v12;
  *(_DWORD *)(v4 + 8) = v10;
  *(_BYTE *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  if ((_DWORD)v6 == -1)
  {
    result = *(double *)&v13;
    *(_OWORD *)(v4 + 48) = v13;
    *(_QWORD *)v4 = off_24C415090;
    *v2 = v4;
  }
  else
  {
    ((void (*)(_QWORD *, uint64_t, _BYTE *))off_24C4040D0[v6])(v14, v4 + 16, v11);
    *(_DWORD *)(v5 + 40) = v6;
    v7 = v12;
    result = *(double *)&v13;
    *(_OWORD *)(v5 + 48) = v13;
    *(_QWORD *)v5 = off_24C415090;
    *v2 = v5;
    v9 = off_24C414C10;
    if ((_DWORD)v7 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_24C415AE0[v7])(v14, v11);
  }
  return result;
}

void sub_20B06650C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B25B140((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B066520(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B066588()
{
  return 3;
}

uint64_t sub_20B066590(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20B066598@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20B0665B0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B06662C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  float v36;
  uint64_t v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  uint64_t v47[2];
  __int128 v48;
  _QWORD v49[3];
  unsigned int v50;
  __int128 v51;

  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      v44 = *(_QWORD *)(a2 + 8);
      v45 = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      v44 = 0;
      v45 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(v47, v8, 3);
    v19 = *(_QWORD *)(v47[0] + 16);
    v48 = *(_OWORD *)v47[0];
    v49[0] = v19;
    v47[0] = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v20 = (unint64_t *)&v4->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v46 = *((_QWORD *)&v48 + 1);
    sub_20B0663D0(&v46, &v44);
    v43 = v44;
    sub_20B267B78(v44, &v44);
    v47[0] = (uint64_t)&v48;
    v47[1] = (uint64_t)&v44;
    sub_20AFE4B3C(v47);
    if (v43)
    {
      v22 = (std::__shared_weak_count *)operator new();
      v22->__shared_owners_ = 0;
      v23 = (unint64_t *)&v22->__shared_owners_;
      v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9548;
      v22->__shared_weak_owners_ = 0;
      v22[1].__vftable = (std::__shared_weak_count_vtbl *)v43;
      *(_QWORD *)a1 = v43;
      *(_QWORD *)(a1 + 8) = v22;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    else
    {
      v22 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v43 + 64))(&v48, v43, 3);
    v25 = *(_QWORD *)(v48 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v48;
    *(_QWORD *)(a1 + 40) = v25;
    *(_QWORD *)&v48 = 0;
    MEMORY[0x20BD3583C]();
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 32);
    v26 = (unint64_t *)&v22->__shared_owners_;
    do
      v27 = __ldaxr(v26);
    while (__stlxr(v27 - 1, v26));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v11 = a2 + 24;
    if (*(_BYTE *)(a2 + 48))
      v12 = *(_QWORD *)(a2 + 24) == 0;
    else
      v12 = 1;
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 32);
      v14 = v13 << 32;
      if (!HIDWORD(v13))
        v14 = 0;
      v44 = *(_QWORD *)(a2 + 32);
      v45 = (std::__shared_weak_count *)(v14 | ((_DWORD)v13 != 0));
      sub_20B267860((uint64_t)&v48, (uint64_t)&v44);
      v15 = operator new();
      v16 = v15;
      *(_QWORD *)v15 = off_24C414C10;
      v17 = v50;
      *(_DWORD *)(v15 + 8) = DWORD2(v48);
      *(_BYTE *)(v15 + 16) = 0;
      *(_DWORD *)(v15 + 40) = -1;
      if ((_DWORD)v17 == -1)
      {
        *(_OWORD *)(v15 + 48) = v51;
        *(_QWORD *)v15 = off_24C415090;
        v47[0] = v15;
      }
      else
      {
        ((void (*)(uint64_t *, uint64_t, _QWORD *))off_24C4040D0[v17])(&v44, v15 + 16, v49);
        *(_DWORD *)(v16 + 40) = v17;
        v18 = v50;
        *(_OWORD *)(v16 + 48) = v51;
        *(_QWORD *)v16 = off_24C415090;
        v47[0] = v16;
        *(_QWORD *)&v48 = off_24C414C10;
        if ((_DWORD)v18 != -1)
          ((void (*)(uint64_t *, _QWORD *))off_24C415AE0[v18])(&v44, v49);
      }
      v44 = v16;
      v28 = (std::__shared_weak_count *)operator new();
      v28->__shared_owners_ = 0;
      v29 = (unint64_t *)&v28->__shared_owners_;
      v28->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9548;
      v28->__shared_weak_owners_ = 0;
      v28[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
      v47[0] = 0;
      v44 = 0;
      v45 = 0;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v28;
      do
        v30 = __ldxr(v29);
      while (__stxr(v30 + 1, v29));
      *(_QWORD *)(a1 + 16) = 0;
      (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(&v48, v16, 3);
      v31 = *(_QWORD *)(v48 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)v48;
      *(_QWORD *)(a1 + 40) = v31;
      *(_QWORD *)&v48 = 0;
      MEMORY[0x20BD3583C]();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 32);
      do
        v32 = __ldaxr(v29);
      while (__stlxr(v32 - 1, v29));
      if (!v32)
      {
        ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
        std::__shared_weak_count::__release_weak(v28);
      }
      v33 = v45;
      if (v45)
      {
        v34 = (unint64_t *)&v45->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
          std::__shared_weak_count::__release_weak(v33);
        }
      }
      *(_QWORD *)&v48 = v11;
      *((_QWORD *)&v48 + 1) = a1 + 24;
      LODWORD(v36) = sub_20AFE4B3C((uint64_t *)&v48);
      v37 = v47[0];
      v47[0] = 0;
      if (v37)
      {
        *(_QWORD *)v37 = off_24C414C10;
        v38 = *(unsigned int *)(v37 + 40);
        if ((_DWORD)v38 != -1)
          ((void (*)(__int128 *, uint64_t, float))off_24C415AE0[v38])(&v48, v37 + 16, v36);
        *(_DWORD *)(v37 + 40) = -1;
        MEMORY[0x20BD3583C](v37, 0x10A3C40A1F8E8FFLL);
      }
    }
    else
    {
      v39 = *(std::__shared_weak_count **)(a2 + 16);
      v40 = (unint64_t *)&v39->__shared_owners_;
      do
        v41 = __ldxr(v40);
      while (__stxr(v41 + 1, v40));
      do
        v42 = __ldaxr(v40);
      while (__stlxr(v42 - 1, v40));
      ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
      std::__shared_weak_count::__release_weak(v39);
      __break(1u);
    }
  }
}

void sub_20B066BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  sub_20AEC147C(v9);
  sub_20B066330((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B066C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v9;
  uint64_t v10;
  va_list va;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  va_list va1;

  va_start(va1, a5);
  va_start(va, a5);
  v10 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  sub_20AEC147C(v5);
  do
    v9 = __ldaxr(v7);
  while (__stlxr(v9 - 1, v7));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
    std::__shared_weak_count::__release_weak(v6);
  }
  sub_20AEC147C((uint64_t)va);
  sub_20B066330((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B066C64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B066330((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B066C78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_list va;

  va_start(va, a11);
  sub_20B25B140((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B066C8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B066330((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B066CA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v4 = v3;
  sub_20AEC147C(v2);
  p_shared_owners = (unint64_t *)&v4->__shared_owners_;
  do
    v7 = __ldaxr(p_shared_owners);
  while (__stlxr(v7 - 1, p_shared_owners));
  if (!v7)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  sub_20AEC147C((uint64_t)va);
  sub_20B066330((uint64_t *)va1);
  _Unwind_Resume(a1);
}

void sub_20B066CFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B066330((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B066D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B066D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B066330((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B066D38(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 3;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B066EFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B066F50(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B066FB8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C414DC0;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40A1F8E8FFLL);
  }
  return a1;
}

void sub_20B067044()
{
  JUMPOUT(0x20BD3583CLL);
}

double sub_20B067058@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t *v2;
  _BOOL8 v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  double result;
  void (**v9)();
  int v10;
  _BYTE v11[24];
  unsigned int v12;
  __int128 v13;
  _QWORD v14[2];

  v2 = a2;
  LODWORD(a2) = *a1;
  v3 = *a1 != 0;
  if (a1[1])
    a2 = (uint64_t *)a2;
  else
    a2 = 0;
  v14[0] = *(_QWORD *)a1;
  v14[1] = v3 | ((_QWORD)a2 << 32);
  sub_20B2690C4((uint64_t)&v9, (uint64_t)v14);
  v4 = operator new();
  v5 = v4;
  *(_QWORD *)v4 = off_24C414DC0;
  v6 = v12;
  *(_DWORD *)(v4 + 8) = v10;
  *(_BYTE *)(v4 + 16) = 0;
  *(_DWORD *)(v4 + 40) = -1;
  if ((_DWORD)v6 == -1)
  {
    result = *(double *)&v13;
    *(_OWORD *)(v4 + 48) = v13;
    *(_QWORD *)v4 = off_24C415120;
    *v2 = v4;
  }
  else
  {
    ((void (*)(_QWORD *, uint64_t, _BYTE *))off_24C4040D0[v6])(v14, v4 + 16, v11);
    *(_DWORD *)(v5 + 40) = v6;
    v7 = v12;
    result = *(double *)&v13;
    *(_OWORD *)(v5 + 48) = v13;
    *(_QWORD *)v5 = off_24C415120;
    *v2 = v5;
    v9 = off_24C414DC0;
    if ((_DWORD)v7 != -1)
      ((void (*)(_QWORD *, _BYTE *))off_24C415AE0[v7])(v14, v11);
  }
  return result;
}

void sub_20B067194(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B260080((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0671A8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B067210()
{
  return 4;
}

uint64_t sub_20B067218(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20B067220@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20B067238(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0672B4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  float v37;
  uint64_t v38;
  uint64_t v39;
  std::__shared_weak_count *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  __int128 v48;
  _QWORD v49[3];
  unsigned int v50;
  __int128 v51;

  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      v45 = *(_QWORD *)(a2 + 8);
      v46 = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      v45 = 0;
      v46 = 0;
    }
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v47, v8, 4);
    v19 = *(_QWORD *)(v47 + 16);
    v48 = *(_OWORD *)v47;
    v49[0] = v19;
    v47 = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v20 = (unint64_t *)&v4->__shared_owners_;
      do
        v21 = __ldaxr(v20);
      while (__stlxr(v21 - 1, v20));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v47 = *((_QWORD *)&v48 + 1);
    sub_20B067058(&v47, &v45);
    v44 = v45;
    sub_20B2693DC(v45, &v45);
    sub_20AFC5D04((uint64_t)&v48, (uint64_t)&v45);
    if (v44)
    {
      v22 = (std::__shared_weak_count *)operator new();
      v22->__shared_owners_ = 0;
      v23 = (unint64_t *)&v22->__shared_owners_;
      v22->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9690;
      v22->__shared_weak_owners_ = 0;
      v22[1].__vftable = (std::__shared_weak_count_vtbl *)v44;
      *(_QWORD *)a1 = v44;
      *(_QWORD *)(a1 + 8) = v22;
      do
        v24 = __ldxr(v23);
      while (__stxr(v24 + 1, v23));
    }
    else
    {
      v22 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v44 + 64))(&v48, v44, 4);
    v25 = v48;
    v26 = *(_QWORD *)(v48 + 16);
    *(_OWORD *)(a1 + 24) = *(_OWORD *)v48;
    *(_QWORD *)(a1 + 40) = v26;
    *(_QWORD *)&v48 = 0;
    MEMORY[0x20BD3583C](v25);
    *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 24);
    *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 32);
    v27 = (unint64_t *)&v22->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  else
  {
    v11 = a2 + 24;
    if (*(_BYTE *)(a2 + 48))
      v12 = *(_QWORD *)(a2 + 24) == 0;
    else
      v12 = 1;
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 32);
      v14 = v13 << 32;
      if (!HIDWORD(v13))
        v14 = 0;
      v45 = *(_QWORD *)(a2 + 32);
      v46 = (std::__shared_weak_count *)(v14 | ((_DWORD)v13 != 0));
      sub_20B2690C4((uint64_t)&v48, (uint64_t)&v45);
      v15 = operator new();
      v16 = v15;
      *(_QWORD *)v15 = off_24C414DC0;
      v17 = v50;
      *(_DWORD *)(v15 + 8) = DWORD2(v48);
      *(_BYTE *)(v15 + 16) = 0;
      *(_DWORD *)(v15 + 40) = -1;
      if ((_DWORD)v17 == -1)
      {
        *(_OWORD *)(v15 + 48) = v51;
        *(_QWORD *)v15 = off_24C415120;
        v47 = v15;
      }
      else
      {
        ((void (*)(uint64_t *, uint64_t, _QWORD *))off_24C4040D0[v17])(&v45, v15 + 16, v49);
        *(_DWORD *)(v16 + 40) = v17;
        v18 = v50;
        *(_OWORD *)(v16 + 48) = v51;
        *(_QWORD *)v16 = off_24C415120;
        v47 = v16;
        *(_QWORD *)&v48 = off_24C414DC0;
        if ((_DWORD)v18 != -1)
          ((void (*)(uint64_t *, _QWORD *))off_24C415AE0[v18])(&v45, v49);
      }
      *(_QWORD *)&v48 = v16;
      v29 = (std::__shared_weak_count *)operator new();
      v29->__shared_owners_ = 0;
      v30 = (unint64_t *)&v29->__shared_owners_;
      v29->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9690;
      v29->__shared_weak_owners_ = 0;
      v29[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
      v47 = 0;
      v48 = 0uLL;
      *(_QWORD *)a1 = v16;
      *(_QWORD *)(a1 + 8) = v29;
      do
        v31 = __ldxr(v30);
      while (__stxr(v31 + 1, v30));
      *(_QWORD *)(a1 + 16) = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(&v45, v16, 4);
      v32 = *(_QWORD *)(v45 + 16);
      *(_OWORD *)(a1 + 24) = *(_OWORD *)v45;
      *(_QWORD *)(a1 + 40) = v32;
      v45 = 0;
      MEMORY[0x20BD3583C]();
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a1 + 24);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 32);
      do
        v33 = __ldaxr(v30);
      while (__stlxr(v33 - 1, v30));
      if (!v33)
      {
        ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
        std::__shared_weak_count::__release_weak(v29);
      }
      v34 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
      if (*((_QWORD *)&v48 + 1))
      {
        v35 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
        do
          v36 = __ldaxr(v35);
        while (__stlxr(v36 - 1, v35));
        if (!v36)
        {
          ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
          std::__shared_weak_count::__release_weak(v34);
        }
      }
      v37 = sub_20AFC5D04(v11, a1 + 24);
      v38 = v47;
      v47 = 0;
      if (v38)
      {
        *(_QWORD *)v38 = off_24C414DC0;
        v39 = *(unsigned int *)(v38 + 40);
        if ((_DWORD)v39 != -1)
          ((void (*)(uint64_t *, uint64_t, float))off_24C415AE0[v39])(&v45, v38 + 16, v37);
        *(_DWORD *)(v38 + 40) = -1;
        MEMORY[0x20BD3583C](v38, 0x10A3C40A1F8E8FFLL);
      }
    }
    else
    {
      v40 = *(std::__shared_weak_count **)(a2 + 16);
      v41 = (unint64_t *)&v40->__shared_owners_;
      do
        v42 = __ldxr(v41);
      while (__stxr(v42 + 1, v41));
      do
        v43 = __ldaxr(v41);
      while (__stlxr(v43 - 1, v41));
      ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
      std::__shared_weak_count::__release_weak(v40);
      __break(1u);
    }
  }
}

void sub_20B067880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  va_list va;

  va_start(va, a8);
  sub_20AEC147C(v8);
  sub_20B066FB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06789C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v12;
  uint64_t v13;
  va_list va;
  va_list va1;

  va_start(va1, a8);
  va_start(va, a8);
  v13 = va_arg(va1, _QWORD);
  sub_20AEC147C(v8);
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  sub_20AEC147C((uint64_t)va1);
  sub_20B066FB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0678EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_list va;

  va_start(va, a8);
  sub_20B066FB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B067900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B260080((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B067914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B066FB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B067928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B066FB8(&a11);
  _Unwind_Resume(a1);
}

void sub_20B06797C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B066FB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B067990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0679A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B066FB8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0679B8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 64);
    v10 = *(_DWORD *)(a2 + 76);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 4;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B067B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B067BD0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B067C38(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C4148B0;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

void sub_20B067CC4()
{
  JUMPOUT(0x20BD3583CLL);
}

double sub_20B067CD8@<D0>(_DWORD *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  __int128 v11;
  void (**v12)();
  int v13;
  _BYTE v14[24];
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _DWORD v19[3];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];

  v2 = (uint64_t *)a2;
  v24[2] = *MEMORY[0x24BDAC8D0];
  v3 = 2 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a1[1])
    a2 = a2;
  else
    a2 = 0;
  v19[0] = 2;
  v4 = *(_QWORD *)a1;
  v19[1] = *(_QWORD *)a1;
  v19[2] = HIDWORD(v4);
  LODWORD(v24[0]) = 1;
  *(_QWORD *)((char *)v24 + 4) = v3 & 0x1FFFFFFFFLL | ((unint64_t)(a2 >> 1) << 33);
  v20 = v24[0];
  v21 = a2;
  v22 = v4;
  v23 = *(_QWORD *)((char *)v24 + 4);
  sub_20B26A920((uint64_t)&v12, (uint64_t)v19);
  v5 = operator new();
  v6 = v5;
  *(_QWORD *)v5 = off_24C4148B0;
  v7 = v15;
  *(_DWORD *)(v5 + 8) = v13;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  if ((_DWORD)v7 == -1)
  {
    result = *(double *)&v16;
    v11 = v17;
    *(_OWORD *)(v5 + 48) = v16;
    *(_OWORD *)(v5 + 64) = v11;
    *(_QWORD *)(v5 + 80) = v18;
    *(_QWORD *)v5 = off_24C4151B0;
    *v2 = v5;
  }
  else
  {
    ((void (*)(_DWORD *, uint64_t, _BYTE *))off_24C4040D0[v7])(v19, v5 + 16, v14);
    *(_DWORD *)(v6 + 40) = v7;
    v8 = v15;
    result = *(double *)&v16;
    v10 = v17;
    *(_OWORD *)(v6 + 48) = v16;
    *(_OWORD *)(v6 + 64) = v10;
    *(_QWORD *)(v6 + 80) = v18;
    *(_QWORD *)v6 = off_24C4151B0;
    *v2 = v6;
    v12 = off_24C4148B0;
    if ((_DWORD)v8 != -1)
      ((void (*)(_DWORD *, _BYTE *))off_24C415AE0[v8])(v19, v14);
  }
  return result;
}

void sub_20B067E80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B067EB4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B067F1C()
{
  return 5;
}

uint64_t sub_20B067F24(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B067F2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B067F40(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B067FBC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  unint64_t v50;
  std::__shared_weak_count_vtbl *v51;
  uint64_t v52;
  _BYTE v53[32];
  __int128 v54;
  __int128 v55;
  __int128 v56;
  uint64_t v57;
  _BYTE v58[20];
  int v59;
  unint64_t v60;
  uint64_t v61;
  __int128 v62;
  uint64_t v63;

  v63 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      *(_QWORD *)v58 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v58[8] = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      *(_QWORD *)v58 = 0;
      *(_QWORD *)&v58[8] = 0;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v62, v8, 5);
    v22 = *(_OWORD *)(v62 + 16);
    v21 = *(_OWORD *)(v62 + 32);
    *(_OWORD *)v53 = *(_OWORD *)v62;
    *(_OWORD *)&v53[16] = v22;
    v54 = v21;
    *(_QWORD *)&v62 = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v23 = (unint64_t *)&v4->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v52 = *(_QWORD *)&v53[12];
    sub_20B067CD8(&v52, (unint64_t)v58);
    v51 = *(std::__shared_weak_count_vtbl **)v58;
    sub_20B26ACB4(*(uint64_t *)v58, (uint64_t)v58);
    *(_QWORD *)&v62 = v53;
    *((_QWORD *)&v62 + 1) = v58;
    sub_20AFE5C6C((size_t *)&v62);
    if (v51)
    {
      v25 = (std::__shared_weak_count *)operator new();
      v25->__shared_owners_ = 0;
      v26 = (unint64_t *)&v25->__shared_owners_;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F97D8;
      v25->__shared_weak_owners_ = 0;
      v25[1].__vftable = v51;
      *(_QWORD *)a1 = v51;
      *(_QWORD *)(a1 + 8) = v25;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    else
    {
      v25 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v51->~__shared_weak_count + 8))(v53, v51, 5);
    v28 = *(_QWORD *)v53;
    v30 = *(_OWORD *)(*(_QWORD *)v53 + 16);
    v29 = *(_OWORD *)(*(_QWORD *)v53 + 32);
    *(_OWORD *)(a1 + 24) = **(_OWORD **)v53;
    *(_OWORD *)(a1 + 40) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_QWORD *)v53 = 0;
    MEMORY[0x20BD3583C](v28);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
    v31 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 96) = v31;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
    v32 = (unint64_t *)&v25->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v11 = a2 + 24;
    if (*(_BYTE *)(a2 + 72))
      v12 = *(_QWORD *)(a2 + 24) == 0;
    else
      v12 = 1;
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 36);
      v14 = 2 * ((_DWORD)v13 != 0);
      LODWORD(v15) = v14 * v13;
      if (HIDWORD(v13))
        v15 = v15;
      else
        v15 = 0;
      *(_DWORD *)v58 = 2;
      *(_QWORD *)&v58[4] = v13;
      LODWORD(v62) = 1;
      *(_QWORD *)((char *)&v62 + 4) = v14 & 0x1FFFFFFFFLL | ((unint64_t)(v15 >> 1) << 33);
      *(_QWORD *)&v58[12] = v62;
      v59 = v15;
      v60 = v13;
      v61 = *(_QWORD *)((char *)&v62 + 4);
      sub_20B26A920((uint64_t)v53, (uint64_t)v58);
      v16 = operator new();
      v17 = v16;
      *(_QWORD *)v16 = off_24C4148B0;
      v18 = DWORD2(v54);
      *(_DWORD *)(v16 + 8) = *(_DWORD *)&v53[8];
      *(_BYTE *)(v16 + 16) = 0;
      *(_DWORD *)(v16 + 40) = -1;
      if ((_DWORD)v18 == -1)
      {
        v34 = v56;
        *(_OWORD *)(v16 + 48) = v55;
        *(_OWORD *)(v16 + 64) = v34;
        *(_QWORD *)(v16 + 80) = v57;
        *(_QWORD *)v16 = off_24C4151B0;
        v52 = v16;
      }
      else
      {
        ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24C4040D0[v18])(v58, v16 + 16, &v53[16]);
        *(_DWORD *)(v17 + 40) = v18;
        v19 = DWORD2(v54);
        v20 = v56;
        *(_OWORD *)(v17 + 48) = v55;
        *(_OWORD *)(v17 + 64) = v20;
        *(_QWORD *)(v17 + 80) = v57;
        *(_QWORD *)v17 = off_24C4151B0;
        v52 = v17;
        *(_QWORD *)v53 = off_24C4148B0;
        if ((_DWORD)v19 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24C415AE0[v19])(v58, &v53[16]);
      }
      *(_QWORD *)v58 = v17;
      v35 = (std::__shared_weak_count *)operator new();
      v35->__shared_owners_ = 0;
      v36 = (unint64_t *)&v35->__shared_owners_;
      v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F97D8;
      v35->__shared_weak_owners_ = 0;
      v35[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
      v52 = 0;
      *(_QWORD *)v58 = 0;
      *(_QWORD *)&v58[8] = 0;
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v35;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      *(_QWORD *)(a1 + 16) = 0;
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v17 + 64))(v53, v17, 5);
      v39 = *(_OWORD *)(*(_QWORD *)v53 + 16);
      v38 = *(_OWORD *)(*(_QWORD *)v53 + 32);
      *(_OWORD *)(a1 + 24) = **(_OWORD **)v53;
      *(_OWORD *)(a1 + 40) = v39;
      *(_OWORD *)(a1 + 56) = v38;
      *(_QWORD *)v53 = 0;
      MEMORY[0x20BD3583C]();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
      v40 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 96) = v40;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
      do
        v41 = __ldaxr(v36);
      while (__stlxr(v41 - 1, v36));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      v42 = *(std::__shared_weak_count **)&v58[8];
      if (*(_QWORD *)&v58[8])
      {
        v43 = (unint64_t *)(*(_QWORD *)&v58[8] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      *(_QWORD *)v53 = v11;
      *(_QWORD *)&v53[8] = a1 + 24;
      sub_20AFE5C6C((size_t *)v53);
      v45 = v52;
      v52 = 0;
      if (v45)
      {
        *(_QWORD *)v45 = off_24C4148B0;
        v46 = *(unsigned int *)(v45 + 40);
        if ((_DWORD)v46 != -1)
          ((void (*)(_BYTE *, uint64_t))off_24C415AE0[v46])(v53, v45 + 16);
        *(_DWORD *)(v45 + 40) = -1;
        MEMORY[0x20BD3583C](v45, 0x10A3C40ED729E16);
      }
    }
    else
    {
      v47 = *(std::__shared_weak_count **)(a2 + 16);
      v48 = (unint64_t *)&v47->__shared_owners_;
      do
        v49 = __ldxr(v48);
      while (__stxr(v49 + 1, v48));
      do
        v50 = __ldaxr(v48);
      while (__stlxr(v50 - 1, v48));
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
      __break(1u);
    }
  }
}

void sub_20B068600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B0686BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B067C38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0686D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v13 = v12;
  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B067C38(&a11);
  _Unwind_Resume(a1);
}

void sub_20B06872C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B067C38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B068740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B068754(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B067C38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B068768(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 5;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B068928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B06897C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B0689E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C414CA0;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

void sub_20B068A70()
{
  JUMPOUT(0x20BD3583CLL);
}

double sub_20B068A84@<D0>(_DWORD *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  __int128 v11;
  void (**v12)();
  int v13;
  _BYTE v14[24];
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _DWORD v19[3];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];

  v2 = (uint64_t *)a2;
  v24[2] = *MEMORY[0x24BDAC8D0];
  v3 = 2 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a1[1])
    a2 = a2;
  else
    a2 = 0;
  v19[0] = 2;
  v4 = *(_QWORD *)a1;
  v19[1] = *(_QWORD *)a1;
  v19[2] = HIDWORD(v4);
  LODWORD(v24[0]) = 1;
  *(_QWORD *)((char *)v24 + 4) = v3 & 0x1FFFFFFFFLL | ((unint64_t)(a2 >> 1) << 33);
  v20 = v24[0];
  v21 = a2;
  v22 = v4;
  v23 = *(_QWORD *)((char *)v24 + 4);
  sub_20B26C364((uint64_t)&v12, (uint64_t)v19);
  v5 = operator new();
  v6 = v5;
  *(_QWORD *)v5 = off_24C414CA0;
  v7 = v15;
  *(_DWORD *)(v5 + 8) = v13;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  if ((_DWORD)v7 == -1)
  {
    result = *(double *)&v16;
    v11 = v17;
    *(_OWORD *)(v5 + 48) = v16;
    *(_OWORD *)(v5 + 64) = v11;
    *(_QWORD *)(v5 + 80) = v18;
    *(_QWORD *)v5 = off_24C415240;
    *v2 = v5;
  }
  else
  {
    ((void (*)(_DWORD *, uint64_t, _BYTE *))off_24C4040D0[v7])(v19, v5 + 16, v14);
    *(_DWORD *)(v6 + 40) = v7;
    v8 = v15;
    result = *(double *)&v16;
    v10 = v17;
    *(_OWORD *)(v6 + 48) = v16;
    *(_OWORD *)(v6 + 64) = v10;
    *(_QWORD *)(v6 + 80) = v18;
    *(_QWORD *)v6 = off_24C415240;
    *v2 = v6;
    v12 = off_24C414CA0;
    if ((_DWORD)v8 != -1)
      ((void (*)(_DWORD *, _BYTE *))off_24C415AE0[v8])(v19, v14);
  }
  return result;
}

void sub_20B068C2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B068C60(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B068CC8()
{
  return 7;
}

uint64_t sub_20B068CD0(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B068CD8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B068CF0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B068D6C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  _BYTE v54[32];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _BYTE v59[20];
  int v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      *(_QWORD *)v59 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v59[8] = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      *(_QWORD *)v59 = 0;
      *(_QWORD *)&v59[8] = 0;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v63, v8, 7);
    v22 = *(_OWORD *)(v63 + 16);
    v21 = *(_OWORD *)(v63 + 32);
    *(_OWORD *)v54 = *(_OWORD *)v63;
    *(_OWORD *)&v54[16] = v22;
    v55 = v21;
    *(_QWORD *)&v63 = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v23 = (unint64_t *)&v4->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v53 = *(_QWORD *)&v54[12];
    sub_20B068A84(&v53, (unint64_t)v59);
    v52 = *(std::__shared_weak_count_vtbl **)v59;
    sub_20B26C6F8(*(uint64_t *)v59, (uint64_t)v59);
    *(_QWORD *)&v63 = v54;
    *((_QWORD *)&v63 + 1) = v59;
    sub_20AFE741C((uint64_t *)&v63);
    if (v52)
    {
      v25 = (std::__shared_weak_count *)operator new();
      v25->__shared_owners_ = 0;
      v26 = (unint64_t *)&v25->__shared_owners_;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9920;
      v25->__shared_weak_owners_ = 0;
      v25[1].__vftable = v52;
      *(_QWORD *)a1 = v52;
      *(_QWORD *)(a1 + 8) = v25;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    else
    {
      v25 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v52->~__shared_weak_count + 8))(v54, v52, 7);
    v28 = *(_QWORD *)v54;
    v30 = *(_OWORD *)(*(_QWORD *)v54 + 16);
    v29 = *(_OWORD *)(*(_QWORD *)v54 + 32);
    *(_OWORD *)(a1 + 24) = **(_OWORD **)v54;
    *(_OWORD *)(a1 + 40) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_QWORD *)v54 = 0;
    MEMORY[0x20BD3583C](v28);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
    v31 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 96) = v31;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
    v32 = (unint64_t *)&v25->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v11 = a2 + 24;
    if (*(_BYTE *)(a2 + 72))
      v12 = *(_QWORD *)(a2 + 24) == 0;
    else
      v12 = 1;
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 36);
      v14 = 2 * ((_DWORD)v13 != 0);
      LODWORD(v15) = v14 * v13;
      if (HIDWORD(v13))
        v15 = v15;
      else
        v15 = 0;
      *(_DWORD *)v59 = 2;
      *(_QWORD *)&v59[4] = v13;
      LODWORD(v63) = 1;
      *(_QWORD *)((char *)&v63 + 4) = v14 & 0x1FFFFFFFFLL | ((unint64_t)(v15 >> 1) << 33);
      *(_QWORD *)&v59[12] = v63;
      v60 = v15;
      v61 = v13;
      v62 = *(_QWORD *)((char *)&v63 + 4);
      sub_20B26C364((uint64_t)v54, (uint64_t)v59);
      v16 = operator new();
      v17 = v16;
      *(_QWORD *)v16 = off_24C414CA0;
      v18 = DWORD2(v55);
      *(_DWORD *)(v16 + 8) = *(_DWORD *)&v54[8];
      *(_BYTE *)(v16 + 16) = 0;
      *(_DWORD *)(v16 + 40) = -1;
      if ((_DWORD)v18 == -1)
      {
        v34 = v57;
        *(_OWORD *)(v16 + 48) = v56;
        *(_OWORD *)(v16 + 64) = v34;
        *(_QWORD *)(v16 + 80) = v58;
        *(_QWORD *)v16 = off_24C415240;
        v53 = v16;
      }
      else
      {
        ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24C4040D0[v18])(v59, v16 + 16, &v54[16]);
        *(_DWORD *)(v17 + 40) = v18;
        v19 = DWORD2(v55);
        v20 = v57;
        *(_OWORD *)(v17 + 48) = v56;
        *(_OWORD *)(v17 + 64) = v20;
        *(_QWORD *)(v17 + 80) = v58;
        *(_QWORD *)v17 = off_24C415240;
        v53 = v17;
        *(_QWORD *)v54 = off_24C414CA0;
        if ((_DWORD)v19 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24C415AE0[v19])(v59, &v54[16]);
      }
      *(_QWORD *)v59 = v17;
      v35 = (std::__shared_weak_count *)operator new();
      v35->__shared_owners_ = 0;
      v36 = (unint64_t *)&v35->__shared_owners_;
      v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9920;
      v35->__shared_weak_owners_ = 0;
      v35[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
      v53 = 0;
      *(_QWORD *)v59 = 0;
      *(_QWORD *)&v59[8] = 0;
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v35;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      *(_QWORD *)(a1 + 16) = 0;
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v17 + 64))(v54, v17, 7);
      v39 = *(_OWORD *)(*(_QWORD *)v54 + 16);
      v38 = *(_OWORD *)(*(_QWORD *)v54 + 32);
      *(_OWORD *)(a1 + 24) = **(_OWORD **)v54;
      *(_OWORD *)(a1 + 40) = v39;
      *(_OWORD *)(a1 + 56) = v38;
      *(_QWORD *)v54 = 0;
      MEMORY[0x20BD3583C]();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
      v40 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 96) = v40;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
      do
        v41 = __ldaxr(v36);
      while (__stlxr(v41 - 1, v36));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      v42 = *(std::__shared_weak_count **)&v59[8];
      if (*(_QWORD *)&v59[8])
      {
        v43 = (unint64_t *)(*(_QWORD *)&v59[8] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      *(_QWORD *)v54 = v11;
      *(_QWORD *)&v54[8] = a1 + 24;
      LODWORD(v45) = sub_20AFE741C((uint64_t *)v54);
      v46 = v53;
      v53 = 0;
      if (v46)
      {
        *(_QWORD *)v46 = off_24C414CA0;
        v47 = *(unsigned int *)(v46 + 40);
        if ((_DWORD)v47 != -1)
          ((void (*)(_BYTE *, uint64_t, float))off_24C415AE0[v47])(v54, v46 + 16, v45);
        *(_DWORD *)(v46 + 40) = -1;
        MEMORY[0x20BD3583C](v46, 0x10A3C40ED729E16);
      }
    }
    else
    {
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      do
        v51 = __ldaxr(v49);
      while (__stlxr(v51 - 1, v49));
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      __break(1u);
    }
  }
}

void sub_20B0693B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06946C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B0689E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B069480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v13 = v12;
  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B0689E4(&a11);
  _Unwind_Resume(a1);
}

void sub_20B0694DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B0689E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0694F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B069504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B0689E4((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B069518(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 7;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B0696DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B069730(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B069798(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C414E50;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

double sub_20B069820@<D0>(_DWORD *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  __int128 v11;
  void (**v12)();
  int v13;
  _BYTE v14[24];
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _DWORD v19[3];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];

  v2 = (uint64_t *)a2;
  v24[2] = *MEMORY[0x24BDAC8D0];
  v3 = 2 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a1[1])
    a2 = a2;
  else
    a2 = 0;
  v19[0] = 2;
  v4 = *(_QWORD *)a1;
  v19[1] = *(_QWORD *)a1;
  v19[2] = HIDWORD(v4);
  LODWORD(v24[0]) = 1;
  *(_QWORD *)((char *)v24 + 4) = v3 & 0x1FFFFFFFFLL | ((unint64_t)(a2 >> 1) << 33);
  v20 = v24[0];
  v21 = a2;
  v22 = v4;
  v23 = *(_QWORD *)((char *)v24 + 4);
  sub_20B26DDA8((uint64_t)&v12, (uint64_t)v19);
  v5 = operator new();
  v6 = v5;
  *(_QWORD *)v5 = off_24C414E50;
  v7 = v15;
  *(_DWORD *)(v5 + 8) = v13;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  if ((_DWORD)v7 == -1)
  {
    result = *(double *)&v16;
    v11 = v17;
    *(_OWORD *)(v5 + 48) = v16;
    *(_OWORD *)(v5 + 64) = v11;
    *(_QWORD *)(v5 + 80) = v18;
    *(_QWORD *)v5 = off_24C4152D0;
    *v2 = v5;
  }
  else
  {
    ((void (*)(_DWORD *, uint64_t, _BYTE *))off_24C4040D0[v7])(v19, v5 + 16, v14);
    *(_DWORD *)(v6 + 40) = v7;
    v8 = v15;
    result = *(double *)&v16;
    v10 = v17;
    *(_OWORD *)(v6 + 48) = v16;
    *(_OWORD *)(v6 + 64) = v10;
    *(_QWORD *)(v6 + 80) = v18;
    *(_QWORD *)v6 = off_24C4152D0;
    *v2 = v6;
    v12 = off_24C414E50;
    if ((_DWORD)v8 != -1)
      ((void (*)(_DWORD *, _BYTE *))off_24C415AE0[v8])(v19, v14);
  }
  return result;
}

void sub_20B0699C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B0699FC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B069A64()
{
  return 8;
}

uint64_t sub_20B069A6C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B069A74@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B069A8C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B069B08(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  float v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  _BYTE v54[32];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _BYTE v59[20];
  int v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      *(_QWORD *)v59 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v59[8] = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      *(_QWORD *)v59 = 0;
      *(_QWORD *)&v59[8] = 0;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v63, v8, 8);
    v22 = *(_OWORD *)(v63 + 16);
    v21 = *(_OWORD *)(v63 + 32);
    *(_OWORD *)v54 = *(_OWORD *)v63;
    *(_OWORD *)&v54[16] = v22;
    v55 = v21;
    *(_QWORD *)&v63 = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v23 = (unint64_t *)&v4->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v53 = *(_QWORD *)&v54[12];
    sub_20B069820(&v53, (unint64_t)v59);
    v52 = *(std::__shared_weak_count_vtbl **)v59;
    sub_20B26E13C(*(uint64_t *)v59, (uint64_t)v59);
    *(_QWORD *)&v63 = v54;
    *((_QWORD *)&v63 + 1) = v59;
    sub_20AFE84BC((uint64_t *)&v63);
    if (v52)
    {
      v25 = (std::__shared_weak_count *)operator new();
      v25->__shared_owners_ = 0;
      v26 = (unint64_t *)&v25->__shared_owners_;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9A68;
      v25->__shared_weak_owners_ = 0;
      v25[1].__vftable = v52;
      *(_QWORD *)a1 = v52;
      *(_QWORD *)(a1 + 8) = v25;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    else
    {
      v25 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v52->~__shared_weak_count + 8))(v54, v52, 8);
    v28 = *(_QWORD *)v54;
    v30 = *(_OWORD *)(*(_QWORD *)v54 + 16);
    v29 = *(_OWORD *)(*(_QWORD *)v54 + 32);
    *(_OWORD *)(a1 + 24) = **(_OWORD **)v54;
    *(_OWORD *)(a1 + 40) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_QWORD *)v54 = 0;
    MEMORY[0x20BD3583C](v28);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
    v31 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 96) = v31;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
    v32 = (unint64_t *)&v25->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v11 = a2 + 24;
    if (*(_BYTE *)(a2 + 72))
      v12 = *(_QWORD *)(a2 + 24) == 0;
    else
      v12 = 1;
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 36);
      v14 = 2 * ((_DWORD)v13 != 0);
      LODWORD(v15) = v14 * v13;
      if (HIDWORD(v13))
        v15 = v15;
      else
        v15 = 0;
      *(_DWORD *)v59 = 2;
      *(_QWORD *)&v59[4] = v13;
      LODWORD(v63) = 1;
      *(_QWORD *)((char *)&v63 + 4) = v14 & 0x1FFFFFFFFLL | ((unint64_t)(v15 >> 1) << 33);
      *(_QWORD *)&v59[12] = v63;
      v60 = v15;
      v61 = v13;
      v62 = *(_QWORD *)((char *)&v63 + 4);
      sub_20B26DDA8((uint64_t)v54, (uint64_t)v59);
      v16 = operator new();
      v17 = v16;
      *(_QWORD *)v16 = off_24C414E50;
      v18 = DWORD2(v55);
      *(_DWORD *)(v16 + 8) = *(_DWORD *)&v54[8];
      *(_BYTE *)(v16 + 16) = 0;
      *(_DWORD *)(v16 + 40) = -1;
      if ((_DWORD)v18 == -1)
      {
        v34 = v57;
        *(_OWORD *)(v16 + 48) = v56;
        *(_OWORD *)(v16 + 64) = v34;
        *(_QWORD *)(v16 + 80) = v58;
        *(_QWORD *)v16 = off_24C4152D0;
        v53 = v16;
      }
      else
      {
        ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24C4040D0[v18])(v59, v16 + 16, &v54[16]);
        *(_DWORD *)(v17 + 40) = v18;
        v19 = DWORD2(v55);
        v20 = v57;
        *(_OWORD *)(v17 + 48) = v56;
        *(_OWORD *)(v17 + 64) = v20;
        *(_QWORD *)(v17 + 80) = v58;
        *(_QWORD *)v17 = off_24C4152D0;
        v53 = v17;
        *(_QWORD *)v54 = off_24C414E50;
        if ((_DWORD)v19 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24C415AE0[v19])(v59, &v54[16]);
      }
      *(_QWORD *)v59 = v17;
      v35 = (std::__shared_weak_count *)operator new();
      v35->__shared_owners_ = 0;
      v36 = (unint64_t *)&v35->__shared_owners_;
      v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9A68;
      v35->__shared_weak_owners_ = 0;
      v35[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
      v53 = 0;
      *(_QWORD *)v59 = 0;
      *(_QWORD *)&v59[8] = 0;
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v35;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      *(_QWORD *)(a1 + 16) = 0;
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v17 + 64))(v54, v17, 8);
      v39 = *(_OWORD *)(*(_QWORD *)v54 + 16);
      v38 = *(_OWORD *)(*(_QWORD *)v54 + 32);
      *(_OWORD *)(a1 + 24) = **(_OWORD **)v54;
      *(_OWORD *)(a1 + 40) = v39;
      *(_OWORD *)(a1 + 56) = v38;
      *(_QWORD *)v54 = 0;
      MEMORY[0x20BD3583C]();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
      v40 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 96) = v40;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
      do
        v41 = __ldaxr(v36);
      while (__stlxr(v41 - 1, v36));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      v42 = *(std::__shared_weak_count **)&v59[8];
      if (*(_QWORD *)&v59[8])
      {
        v43 = (unint64_t *)(*(_QWORD *)&v59[8] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      *(_QWORD *)v54 = v11;
      *(_QWORD *)&v54[8] = a1 + 24;
      v45 = sub_20AFE84BC((uint64_t *)v54);
      v46 = v53;
      v53 = 0;
      if (v46)
      {
        *(_QWORD *)v46 = off_24C414E50;
        v47 = *(unsigned int *)(v46 + 40);
        if ((_DWORD)v47 != -1)
          ((void (*)(_BYTE *, uint64_t, float))off_24C415AE0[v47])(v54, v46 + 16, v45);
        *(_DWORD *)(v46 + 40) = -1;
        MEMORY[0x20BD3583C](v46, 0x10A3C40ED729E16);
      }
    }
    else
    {
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      do
        v51 = __ldaxr(v49);
      while (__stlxr(v51 - 1, v49));
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      __break(1u);
    }
  }
}

void sub_20B06A14C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06A208(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B069798((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06A21C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v13 = v12;
  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B069798(&a11);
  _Unwind_Resume(a1);
}

void sub_20B06A278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B069798((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06A28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B06A2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B069798((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06A2B4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 8;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B06A478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B06A4CC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B06A534(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C414940;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

void sub_20B06A5C0()
{
  JUMPOUT(0x20BD3583CLL);
}

double sub_20B06A5D4@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  void (**v13)();
  int v14;
  _BYTE v15[24];
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _DWORD v20[3];
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  if (*a1)
    v3 = 3;
  else
    v3 = 0;
  LODWORD(v4) = v3 * *a1;
  if (a1[1])
    v4 = v4;
  else
    v4 = 0;
  v20[0] = 3;
  v5 = *(_QWORD *)a1;
  v20[1] = *(_QWORD *)a1;
  v20[2] = HIDWORD(v5);
  LODWORD(v25[0]) = 1;
  *(_QWORD *)((char *)v25 + 4) = v3 | (v4 << 32);
  v21 = v25[0];
  v22 = v4;
  v23 = v5;
  v24 = *(_QWORD *)((char *)v25 + 4);
  sub_20B26F7E8((uint64_t)&v13, (uint64_t)v20);
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)v6 = off_24C414940;
  v8 = v16;
  *(_DWORD *)(v6 + 8) = v14;
  *(_BYTE *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 40) = -1;
  if ((_DWORD)v8 == -1)
  {
    result = *(double *)&v17;
    v12 = v18;
    *(_OWORD *)(v6 + 48) = v17;
    *(_OWORD *)(v6 + 64) = v12;
    *(_QWORD *)(v6 + 80) = v19;
    *(_QWORD *)v6 = off_24C415360;
    *a2 = v6;
  }
  else
  {
    ((void (*)(_DWORD *, uint64_t, _BYTE *))off_24C4040D0[v8])(v20, v6 + 16, v15);
    *(_DWORD *)(v7 + 40) = v8;
    v9 = v16;
    result = *(double *)&v17;
    v11 = v18;
    *(_OWORD *)(v7 + 48) = v17;
    *(_OWORD *)(v7 + 64) = v11;
    *(_QWORD *)(v7 + 80) = v19;
    *(_QWORD *)v7 = off_24C415360;
    *a2 = v7;
    v13 = off_24C414940;
    if ((_DWORD)v9 != -1)
      ((void (*)(_DWORD *, _BYTE *))off_24C415AE0[v9])(v20, v15);
  }
  return result;
}

void sub_20B06A774(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06A7A8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B06A810()
{
  return 21;
}

uint64_t sub_20B06A818(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B06A820@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B06A834(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B06A8B0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  _BYTE *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  int v38;
  std::__shared_weak_count_vtbl *v39;
  std::__shared_weak_count *v40;
  std::__shared_weak_count_vtbl *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  __int128 v46;
  __int128 v47;
  unint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  unint64_t v59;
  std::__shared_weak_count *v60;
  unint64_t *v61;
  unint64_t v62;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *p_shared_owners;
  unint64_t v68;
  unint64_t v69;
  std::__shared_weak_count_vtbl *v70;
  uint64_t v71;
  _BYTE v72[32];
  __int128 v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;
  _BYTE v77[20];
  int v78;
  unint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;

  v82 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 8))
  {
    if (*(_BYTE *)(a2 + 72))
      v11 = *(_QWORD *)(a2 + 24) == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v66 = *(std::__shared_weak_count **)(a2 + 16);
      p_shared_owners = (unint64_t *)&v66->__shared_owners_;
      do
        v68 = __ldxr(p_shared_owners);
      while (__stxr(v68 + 1, p_shared_owners));
      do
        v69 = __ldaxr(p_shared_owners);
      while (__stlxr(v69 - 1, p_shared_owners));
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
      __break(1u);
      return;
    }
    v12 = *(_QWORD *)(a2 + 36);
    if ((_DWORD)v12)
      v13 = 3;
    else
      v13 = 0;
    LODWORD(v14) = v13 * v12;
    if (HIDWORD(v12))
      v14 = v14;
    else
      v14 = 0;
    *(_DWORD *)v77 = 3;
    *(_QWORD *)&v77[4] = v12;
    LODWORD(v81) = 1;
    *(_QWORD *)((char *)&v81 + 4) = v13 | (v14 << 32);
    *(_QWORD *)&v77[12] = v81;
    v78 = v14;
    v79 = v12;
    v80 = *(_QWORD *)((char *)&v81 + 4);
    sub_20B26F7E8((uint64_t)v72, (uint64_t)v77);
    v15 = operator new();
    v16 = v15;
    *(_QWORD *)v15 = off_24C414940;
    v17 = DWORD2(v73);
    *(_DWORD *)(v15 + 8) = *(_DWORD *)&v72[8];
    *(_BYTE *)(v15 + 16) = 0;
    *(_DWORD *)(v15 + 40) = -1;
    if ((_DWORD)v17 == -1)
    {
      v52 = v75;
      *(_OWORD *)(v15 + 48) = v74;
      *(_OWORD *)(v15 + 64) = v52;
      *(_QWORD *)(v15 + 80) = v76;
      *(_QWORD *)v15 = off_24C415360;
      v71 = v15;
    }
    else
    {
      ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24C4040D0[v17])(v77, v15 + 16, &v72[16]);
      *(_DWORD *)(v16 + 40) = v17;
      v18 = DWORD2(v73);
      v19 = v75;
      *(_OWORD *)(v16 + 48) = v74;
      *(_OWORD *)(v16 + 64) = v19;
      *(_QWORD *)(v16 + 80) = v76;
      *(_QWORD *)v16 = off_24C415360;
      v71 = v16;
      *(_QWORD *)v72 = off_24C414940;
      if ((_DWORD)v18 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_24C415AE0[v18])(v77, &v72[16]);
    }
    *(_QWORD *)v77 = v16;
    v53 = (std::__shared_weak_count *)operator new();
    v53->__shared_owners_ = 0;
    v54 = (unint64_t *)&v53->__shared_owners_;
    v53->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9BB0;
    v53->__shared_weak_owners_ = 0;
    v53[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
    v71 = 0;
    *(_QWORD *)v77 = 0;
    *(_QWORD *)&v77[8] = 0;
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v53;
    do
      v55 = __ldxr(v54);
    while (__stxr(v55 + 1, v54));
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(v72, v16, 21);
    v57 = *(_OWORD *)(*(_QWORD *)v72 + 16);
    v56 = *(_OWORD *)(*(_QWORD *)v72 + 32);
    *(_OWORD *)(a1 + 24) = **(_OWORD **)v72;
    *(_OWORD *)(a1 + 40) = v57;
    *(_OWORD *)(a1 + 56) = v56;
    *(_QWORD *)v72 = 0;
    MEMORY[0x20BD3583C]();
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
    v58 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 96) = v58;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
    do
      v59 = __ldaxr(v54);
    while (__stlxr(v59 - 1, v54));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
    v60 = *(std::__shared_weak_count **)&v77[8];
    if (!*(_QWORD *)&v77[8])
      goto LABEL_74;
    v61 = (unint64_t *)(*(_QWORD *)&v77[8] + 8);
    do
      v62 = __ldaxr(v61);
    while (__stlxr(v62 - 1, v61));
    if (!v62)
    {
      ((void (*)(std::__shared_weak_count *))v60->__on_zero_shared)(v60);
      std::__shared_weak_count::__release_weak(v60);
      *(_QWORD *)v72 = a2 + 24;
      *(_QWORD *)&v72[8] = a1 + 24;
      if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
      {
LABEL_78:
        LOBYTE(v70) = 0;
        if (*(_DWORD *)(a2 + 32) && *(_DWORD *)(a2 + 36) && *(_DWORD *)(a2 + 40))
        {
          *(_QWORD *)&v81 = &v70;
          sub_20AFE9048((uint64_t)&v81, a2 + 24, a1 + 24);
        }
        goto LABEL_88;
      }
    }
    else
    {
LABEL_74:
      *(_QWORD *)v72 = a2 + 24;
      *(_QWORD *)&v72[8] = a1 + 24;
      if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
        goto LABEL_78;
    }
    sub_20AFE5D88((size_t *)v72);
LABEL_88:
    v50 = v71;
    v71 = 0;
    if (!v50)
      return;
    *(_QWORD *)v50 = off_24C414940;
    v65 = *(unsigned int *)(v50 + 40);
    if ((_DWORD)v65 != -1)
      ((void (*)(_BYTE *, uint64_t))off_24C415AE0[v65])(v72, v50 + 16);
    goto LABEL_91;
  }
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 - 1, v5));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    v4 = *(std::__shared_weak_count **)(a2 + 16);
  }
  v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    *(_QWORD *)v77 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v77[8] = v4;
    if (v4)
    {
      v9 = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    v4 = 0;
    *(_QWORD *)v77 = 0;
    *(_QWORD *)&v77[8] = 0;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v81, v8, 21);
  v21 = *(_OWORD *)(v81 + 16);
  v20 = *(_OWORD *)(v81 + 32);
  *(_OWORD *)v72 = *(_OWORD *)v81;
  *(_OWORD *)&v72[16] = v21;
  v73 = v20;
  *(_QWORD *)&v81 = 0;
  MEMORY[0x20BD3583C]();
  if (v4)
  {
    v22 = (unint64_t *)&v4->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v24 = *(_QWORD *)&v72[12];
  v71 = *(_QWORD *)&v72[12];
  sub_20B06A5D4(&v71, (uint64_t *)v77);
  v70 = *(std::__shared_weak_count_vtbl **)v77;
  sub_20B26FB7C(*(uint64_t *)v77, (uint64_t)v77);
  *(_QWORD *)&v81 = v72;
  *((_QWORD *)&v81 + 1) = v77;
  if (*(_DWORD *)&v72[20] == 1 && v78 == 1)
  {
    sub_20AFE5D88((size_t *)&v81);
  }
  else if (*(_DWORD *)&v72[8] && (_DWORD)v24 && HIDWORD(v24))
  {
    v25 = v24 - 1;
    v26 = *(unsigned int *)&v72[24];
    v27 = v79;
    v28 = *(_BYTE **)v72;
    v29 = *(_BYTE **)v77;
    v30 = HIDWORD(v24) - 1;
    if (HIDWORD(v24) != 1)
    {
      v31 = HIDWORD(v79);
      v32 = *(unsigned int *)&v72[28];
      if ((_DWORD)v24 == 1)
      {
        do
        {
          *v29 = *v28;
          v29[1] = v28[1];
          v29[2] = v28[2];
          v28 += v32;
          v29 += v31;
          --v30;
        }
        while (v30);
      }
      else
      {
        v33 = 0;
        v34 = *(_QWORD *)v77 + 2;
        v35 = *(_QWORD *)v72 + 2;
        do
        {
          v36 = (_BYTE *)v35;
          v37 = (_BYTE *)v34;
          v38 = v24 - 1;
          do
          {
            *(v37 - 2) = *(v36 - 2);
            *(v37 - 1) = *(v36 - 1);
            *v37 = *v36;
            v37 += v27;
            v36 += v26;
            --v38;
          }
          while (v38);
          *(v37 - 2) = *(v36 - 2);
          *(v37 - 1) = *(v36 - 1);
          *v37 = *v36;
          v28 += v32;
          v29 += v31;
          ++v33;
          v34 += v31;
          v35 += v32;
        }
        while (v33 != v30);
      }
    }
    if ((_DWORD)v24 != 1)
    {
      do
      {
        *v29 = *v28;
        v29[1] = v28[1];
        v29[2] = v28[2];
        v28 += v26;
        v29 += v27;
        --v25;
      }
      while (v25);
    }
    *v29 = *v28;
    v29[1] = v28[1];
    v29[2] = v28[2];
  }
  v39 = v70;
  if (v70)
  {
    v40 = (std::__shared_weak_count *)operator new();
    v41 = v70;
    v40->__shared_owners_ = 0;
    v42 = (unint64_t *)&v40->__shared_owners_;
    v40->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9BB0;
    v40->__shared_weak_owners_ = 0;
    v40[1].__vftable = v41;
    v70 = 0;
    *(_QWORD *)a1 = v39;
    *(_QWORD *)(a1 + 8) = v40;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
  }
  else
  {
    v40 = 0;
    v70 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v39->~__shared_weak_count + 8))(v72, v39, 21);
  v44 = *(_QWORD *)v72;
  v46 = *(_OWORD *)(*(_QWORD *)v72 + 16);
  v45 = *(_OWORD *)(*(_QWORD *)v72 + 32);
  *(_OWORD *)(a1 + 24) = **(_OWORD **)v72;
  *(_OWORD *)(a1 + 40) = v46;
  *(_OWORD *)(a1 + 56) = v45;
  *(_QWORD *)v72 = 0;
  MEMORY[0x20BD3583C](v44);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
  v47 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 96) = v47;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
  v48 = (unint64_t *)&v40->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (!v49)
  {
    ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
    std::__shared_weak_count::__release_weak(v40);
  }
  v50 = (uint64_t)v70;
  v70 = 0;
  if (v50)
  {
    *(_QWORD *)v50 = off_24C414940;
    v51 = *(unsigned int *)(v50 + 40);
    if ((_DWORD)v51 != -1)
      ((void (*)(_BYTE *, uint64_t))off_24C415AE0[v51])(v72, v50 + 16);
LABEL_91:
    *(_DWORD *)(v50 + 40) = -1;
    MEMORY[0x20BD3583C](v50, 0x10A3C40ED729E16);
  }
}

void sub_20B06B08C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06B148(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06A534((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06B15C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B06A534(&a11);
  _Unwind_Resume(a1);
}

void sub_20B06B1B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06A534((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06B1C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B06B1D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06A534((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06B1EC(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 21;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B06B3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B06B400(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B06B468(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C414AF0;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

void sub_20B06B4F4()
{
  JUMPOUT(0x20BD3583CLL);
}

double sub_20B06B508@<D0>(_DWORD *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  double result;
  __int128 v11;
  __int128 v12;
  void (**v13)();
  int v14;
  _BYTE v15[24];
  unsigned int v16;
  __int128 v17;
  __int128 v18;
  uint64_t v19;
  _DWORD v20[3];
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[3];

  v25[2] = *MEMORY[0x24BDAC8D0];
  if (*a1)
    v3 = 3;
  else
    v3 = 0;
  LODWORD(v4) = v3 * *a1;
  if (a1[1])
    v4 = v4;
  else
    v4 = 0;
  v20[0] = 3;
  v5 = *(_QWORD *)a1;
  v20[1] = *(_QWORD *)a1;
  v20[2] = HIDWORD(v5);
  LODWORD(v25[0]) = 1;
  *(_QWORD *)((char *)v25 + 4) = v3 | (v4 << 32);
  v21 = v25[0];
  v22 = v4;
  v23 = v5;
  v24 = *(_QWORD *)((char *)v25 + 4);
  sub_20B271250((uint64_t)&v13, (uint64_t)v20);
  v6 = operator new();
  v7 = v6;
  *(_QWORD *)v6 = off_24C414AF0;
  v8 = v16;
  *(_DWORD *)(v6 + 8) = v14;
  *(_BYTE *)(v6 + 16) = 0;
  *(_DWORD *)(v6 + 40) = -1;
  if ((_DWORD)v8 == -1)
  {
    result = *(double *)&v17;
    v12 = v18;
    *(_OWORD *)(v6 + 48) = v17;
    *(_OWORD *)(v6 + 64) = v12;
    *(_QWORD *)(v6 + 80) = v19;
    *(_QWORD *)v6 = off_24C4153F0;
    *a2 = v6;
  }
  else
  {
    ((void (*)(_DWORD *, uint64_t, _BYTE *))off_24C4040D0[v8])(v20, v6 + 16, v15);
    *(_DWORD *)(v7 + 40) = v8;
    v9 = v16;
    result = *(double *)&v17;
    v11 = v18;
    *(_OWORD *)(v7 + 48) = v17;
    *(_OWORD *)(v7 + 64) = v11;
    *(_QWORD *)(v7 + 80) = v19;
    *(_QWORD *)v7 = off_24C4153F0;
    *a2 = v7;
    v13 = off_24C414AF0;
    if ((_DWORD)v9 != -1)
      ((void (*)(_DWORD *, _BYTE *))off_24C415AE0[v9])(v20, v15);
  }
  return result;
}

void sub_20B06B6A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06B6DC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B06B744()
{
  return 22;
}

uint64_t sub_20B06B74C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B06B754@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B06B76C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B06B7E8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  _WORD *v28;
  _WORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _WORD *v40;
  _WORD *v41;
  int v42;
  std::__shared_weak_count_vtbl *v43;
  std::__shared_weak_count *v44;
  std::__shared_weak_count_vtbl *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v69;
  std::__shared_weak_count *v70;
  unint64_t *p_shared_owners;
  unint64_t v72;
  unint64_t v73;
  std::__shared_weak_count_vtbl *v74;
  uint64_t v75;
  _BYTE v76[32];
  __int128 v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  _BYTE v81[20];
  int v82;
  unint64_t v83;
  uint64_t v84;
  __int128 v85;
  uint64_t v86;

  v86 = *MEMORY[0x24BDAC8D0];
  if (!*(_QWORD *)(a2 + 8))
  {
    if (*(_BYTE *)(a2 + 72))
      v11 = *(_QWORD *)(a2 + 24) == 0;
    else
      v11 = 1;
    if (!v11)
    {
      v70 = *(std::__shared_weak_count **)(a2 + 16);
      p_shared_owners = (unint64_t *)&v70->__shared_owners_;
      do
        v72 = __ldxr(p_shared_owners);
      while (__stxr(v72 + 1, p_shared_owners));
      do
        v73 = __ldaxr(p_shared_owners);
      while (__stlxr(v73 - 1, p_shared_owners));
      ((void (*)(std::__shared_weak_count *))v70->__on_zero_shared)(v70);
      std::__shared_weak_count::__release_weak(v70);
      __break(1u);
      return;
    }
    v12 = *(_QWORD *)(a2 + 36);
    if ((_DWORD)v12)
      v13 = 3;
    else
      v13 = 0;
    LODWORD(v14) = v13 * v12;
    if (HIDWORD(v12))
      v14 = v14;
    else
      v14 = 0;
    *(_DWORD *)v81 = 3;
    *(_QWORD *)&v81[4] = v12;
    LODWORD(v85) = 1;
    *(_QWORD *)((char *)&v85 + 4) = v13 | (v14 << 32);
    *(_QWORD *)&v81[12] = v85;
    v82 = v14;
    v83 = v12;
    v84 = *(_QWORD *)((char *)&v85 + 4);
    sub_20B271250((uint64_t)v76, (uint64_t)v81);
    v15 = operator new();
    v16 = v15;
    *(_QWORD *)v15 = off_24C414AF0;
    v17 = DWORD2(v77);
    *(_DWORD *)(v15 + 8) = *(_DWORD *)&v76[8];
    *(_BYTE *)(v15 + 16) = 0;
    *(_DWORD *)(v15 + 40) = -1;
    if ((_DWORD)v17 == -1)
    {
      v56 = v79;
      *(_OWORD *)(v15 + 48) = v78;
      *(_OWORD *)(v15 + 64) = v56;
      *(_QWORD *)(v15 + 80) = v80;
      *(_QWORD *)v15 = off_24C4153F0;
      v75 = v15;
    }
    else
    {
      ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24C4040D0[v17])(v81, v15 + 16, &v76[16]);
      *(_DWORD *)(v16 + 40) = v17;
      v18 = DWORD2(v77);
      v19 = v79;
      *(_OWORD *)(v16 + 48) = v78;
      *(_OWORD *)(v16 + 64) = v19;
      *(_QWORD *)(v16 + 80) = v80;
      *(_QWORD *)v16 = off_24C4153F0;
      v75 = v16;
      *(_QWORD *)v76 = off_24C414AF0;
      if ((_DWORD)v18 != -1)
        ((void (*)(_BYTE *, _BYTE *))off_24C415AE0[v18])(v81, &v76[16]);
    }
    *(_QWORD *)v81 = v16;
    v57 = (std::__shared_weak_count *)operator new();
    v57->__shared_owners_ = 0;
    v58 = (unint64_t *)&v57->__shared_owners_;
    v57->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9CF8;
    v57->__shared_weak_owners_ = 0;
    v57[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
    v75 = 0;
    *(_QWORD *)v81 = 0;
    *(_QWORD *)&v81[8] = 0;
    *(_QWORD *)a1 = v16;
    *(_QWORD *)(a1 + 8) = v57;
    do
      v59 = __ldxr(v58);
    while (__stxr(v59 + 1, v58));
    *(_QWORD *)(a1 + 16) = 0;
    (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(v76, v16, 22);
    v61 = *(_OWORD *)(*(_QWORD *)v76 + 16);
    v60 = *(_OWORD *)(*(_QWORD *)v76 + 32);
    *(_OWORD *)(a1 + 24) = **(_OWORD **)v76;
    *(_OWORD *)(a1 + 40) = v61;
    *(_OWORD *)(a1 + 56) = v60;
    *(_QWORD *)v76 = 0;
    MEMORY[0x20BD3583C]();
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
    v62 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 96) = v62;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
    do
      v63 = __ldaxr(v58);
    while (__stlxr(v63 - 1, v58));
    if (!v63)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
    v64 = *(std::__shared_weak_count **)&v81[8];
    if (!*(_QWORD *)&v81[8])
      goto LABEL_74;
    v65 = (unint64_t *)(*(_QWORD *)&v81[8] + 8);
    do
      v66 = __ldaxr(v65);
    while (__stlxr(v66 - 1, v65));
    if (!v66)
    {
      ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
      std::__shared_weak_count::__release_weak(v64);
      *(_QWORD *)v76 = a2 + 24;
      *(_QWORD *)&v76[8] = a1 + 24;
      if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
      {
LABEL_78:
        LOBYTE(v74) = 0;
        if (*(_DWORD *)(a2 + 32) && *(_DWORD *)(a2 + 36) && *(_DWORD *)(a2 + 40))
        {
          *(_QWORD *)&v85 = &v74;
          sub_20B03F318((uint64_t)&v85, a2 + 24, a1 + 24);
        }
        goto LABEL_88;
      }
    }
    else
    {
LABEL_74:
      *(_QWORD *)v76 = a2 + 24;
      *(_QWORD *)&v76[8] = a1 + 24;
      if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
        goto LABEL_78;
    }
    sub_20AFC7BE4((uint64_t *)v76);
LABEL_88:
    v54 = v75;
    v75 = 0;
    if (!v54)
      return;
    *(_QWORD *)v54 = off_24C414AF0;
    v69 = *(unsigned int *)(v54 + 40);
    if ((_DWORD)v69 != -1)
      ((void (*)(_BYTE *, uint64_t))off_24C415AE0[v69])(v76, v54 + 16);
    goto LABEL_91;
  }
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  if (v4)
  {
    v5 = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
    do
      v7 = __ldaxr(v5);
    while (__stlxr(v7 - 1, v5));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
    v4 = *(std::__shared_weak_count **)(a2 + 16);
  }
  v8 = *(_QWORD *)(a2 + 8);
  if (v8)
  {
    *(_QWORD *)v81 = *(_QWORD *)(a2 + 8);
    *(_QWORD *)&v81[8] = v4;
    if (v4)
    {
      v9 = (unint64_t *)&v4->__shared_owners_;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
    }
  }
  else
  {
    v4 = 0;
    *(_QWORD *)v81 = 0;
    *(_QWORD *)&v81[8] = 0;
  }
  (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v85, v8, 22);
  v21 = *(_OWORD *)(v85 + 16);
  v20 = *(_OWORD *)(v85 + 32);
  *(_OWORD *)v76 = *(_OWORD *)v85;
  *(_OWORD *)&v76[16] = v21;
  v77 = v20;
  *(_QWORD *)&v85 = 0;
  MEMORY[0x20BD3583C]();
  if (v4)
  {
    v22 = (unint64_t *)&v4->__shared_owners_;
    do
      v23 = __ldaxr(v22);
    while (__stlxr(v23 - 1, v22));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v24 = *(_QWORD *)&v76[12];
  v75 = *(_QWORD *)&v76[12];
  sub_20B06B508(&v75, (uint64_t *)v81);
  v74 = *(std::__shared_weak_count_vtbl **)v81;
  sub_20B2715E4(*(uint64_t *)v81, (uint64_t)v81);
  *(_QWORD *)&v85 = v76;
  *((_QWORD *)&v85 + 1) = v81;
  if (*(_DWORD *)&v76[20] == 1 && v82 == 1)
  {
    sub_20AFC7BE4((uint64_t *)&v85);
    goto LABEL_51;
  }
  if (!*(_DWORD *)&v76[8] || !(_DWORD)v24 || !HIDWORD(v24))
    goto LABEL_51;
  v25 = v24 - 1;
  v26 = *(unsigned int *)&v76[24];
  v27 = v83;
  v28 = *(_WORD **)v76;
  v29 = *(_WORD **)v81;
  v30 = HIDWORD(v24) - 1;
  if (HIDWORD(v24) == 1)
    goto LABEL_46;
  v31 = HIDWORD(v83);
  v32 = *(unsigned int *)&v76[28];
  v33 = 2 * *(unsigned int *)&v76[28];
  v34 = 2 * HIDWORD(v83);
  if ((_DWORD)v24 != 1)
  {
    v35 = 0;
    v36 = *(_QWORD *)v81 + 4;
    v37 = 2 * v83;
    v38 = *(_QWORD *)v76 + 4;
    v39 = 2 * *(unsigned int *)&v76[24];
    do
    {
      v40 = (_WORD *)v38;
      v41 = (_WORD *)v36;
      v42 = v24 - 1;
      do
      {
        *(v41 - 2) = *(v40 - 2);
        *(v41 - 1) = *(v40 - 1);
        *v41 = *v40;
        v41 = (_WORD *)((char *)v41 + v37);
        v40 = (_WORD *)((char *)v40 + v39);
        --v42;
      }
      while (v42);
      *(v41 - 2) = *(v40 - 2);
      *(v41 - 1) = *(v40 - 1);
      *v41 = *v40;
      v28 += v32;
      v29 += v31;
      ++v35;
      v36 += v34;
      v38 += v33;
    }
    while (v35 != v30);
LABEL_46:
    if ((_DWORD)v24 != 1)
    {
      do
      {
        *v29 = *v28;
        v29[1] = v28[1];
        v29[2] = v28[2];
        v28 += v26;
        v29 += v27;
        --v25;
      }
      while (v25);
    }
    goto LABEL_50;
  }
  do
  {
    *v29 = *v28;
    v29[1] = v28[1];
    v29[2] = v28[2];
    v28 = (_WORD *)((char *)v28 + v33);
    v29 = (_WORD *)((char *)v29 + v34);
    --v30;
  }
  while (v30);
LABEL_50:
  *v29 = *v28;
  v29[1] = v28[1];
  v29[2] = v28[2];
LABEL_51:
  v43 = v74;
  if (v74)
  {
    v44 = (std::__shared_weak_count *)operator new();
    v45 = v74;
    v44->__shared_owners_ = 0;
    v46 = (unint64_t *)&v44->__shared_owners_;
    v44->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9CF8;
    v44->__shared_weak_owners_ = 0;
    v44[1].__vftable = v45;
    v74 = 0;
    *(_QWORD *)a1 = v43;
    *(_QWORD *)(a1 + 8) = v44;
    do
      v47 = __ldxr(v46);
    while (__stxr(v47 + 1, v46));
  }
  else
  {
    v44 = 0;
    v74 = 0;
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
  }
  *(_QWORD *)(a1 + 16) = 0;
  (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v43->~__shared_weak_count + 8))(v76, v43, 22);
  v48 = *(_QWORD *)v76;
  v50 = *(_OWORD *)(*(_QWORD *)v76 + 16);
  v49 = *(_OWORD *)(*(_QWORD *)v76 + 32);
  *(_OWORD *)(a1 + 24) = **(_OWORD **)v76;
  *(_OWORD *)(a1 + 40) = v50;
  *(_OWORD *)(a1 + 56) = v49;
  *(_QWORD *)v76 = 0;
  MEMORY[0x20BD3583C](v48);
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
  v51 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 96) = v51;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
  v52 = (unint64_t *)&v44->__shared_owners_;
  do
    v53 = __ldaxr(v52);
  while (__stlxr(v53 - 1, v52));
  if (!v53)
  {
    ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
    std::__shared_weak_count::__release_weak(v44);
  }
  v54 = (uint64_t)v74;
  v74 = 0;
  if (v54)
  {
    *(_QWORD *)v54 = off_24C414AF0;
    v55 = *(unsigned int *)(v54 + 40);
    if ((_DWORD)v55 != -1)
      ((void (*)(_BYTE *, uint64_t))off_24C415AE0[v55])(v76, v54 + 16);
LABEL_91:
    *(_DWORD *)(v54 + 40) = -1;
    MEMORY[0x20BD3583C](v54, 0x10A3C40ED729E16);
  }
}

void sub_20B06BFDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06C098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06B468((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06C0AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B06B468(&a11);
  _Unwind_Resume(a1);
}

void sub_20B06C100(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06B468((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06C114(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B06C128(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06B468((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06C13C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 22;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B06C300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B06C354(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B06C3BC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C4149D0;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

void sub_20B06C448()
{
  JUMPOUT(0x20BD3583CLL);
}

double sub_20B06C45C@<D0>(_DWORD *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  __int128 v11;
  void (**v12)();
  int v13;
  _BYTE v14[24];
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _DWORD v19[3];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];

  v2 = (uint64_t *)a2;
  v24[2] = *MEMORY[0x24BDAC8D0];
  v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a1[1])
    a2 = a2;
  else
    a2 = 0;
  v19[0] = 4;
  v4 = *(_QWORD *)a1;
  v19[1] = *(_QWORD *)a1;
  v19[2] = HIDWORD(v4);
  LODWORD(v24[0]) = 1;
  *(_QWORD *)((char *)v24 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  v20 = v24[0];
  v21 = a2;
  v22 = v4;
  v23 = *(_QWORD *)((char *)v24 + 4);
  sub_20B272CD8((uint64_t)&v12, (uint64_t)v19);
  v5 = operator new();
  v6 = v5;
  *(_QWORD *)v5 = off_24C4149D0;
  v7 = v15;
  *(_DWORD *)(v5 + 8) = v13;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  if ((_DWORD)v7 == -1)
  {
    result = *(double *)&v16;
    v11 = v17;
    *(_OWORD *)(v5 + 48) = v16;
    *(_OWORD *)(v5 + 64) = v11;
    *(_QWORD *)(v5 + 80) = v18;
    *(_QWORD *)v5 = off_24C415480;
    *v2 = v5;
  }
  else
  {
    ((void (*)(_DWORD *, uint64_t, _BYTE *))off_24C4040D0[v7])(v19, v5 + 16, v14);
    *(_DWORD *)(v6 + 40) = v7;
    v8 = v15;
    result = *(double *)&v16;
    v10 = v17;
    *(_OWORD *)(v6 + 48) = v16;
    *(_OWORD *)(v6 + 64) = v10;
    *(_QWORD *)(v6 + 80) = v18;
    *(_QWORD *)v6 = off_24C415480;
    *v2 = v6;
    v12 = off_24C4149D0;
    if ((_DWORD)v8 != -1)
      ((void (*)(_DWORD *, _BYTE *))off_24C415AE0[v8])(v19, v14);
  }
  return result;
}

void sub_20B06C604(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06C638(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B06C6A0()
{
  return 25;
}

uint64_t sub_20B06C6A8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B06C6B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B06C6C4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B06C740(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count_vtbl *v53;
  uint64_t v54;
  char v55;
  char *v56;
  _BYTE v57[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _BYTE v62[20];
  int v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      *(_QWORD *)v62 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v62[8] = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      *(_QWORD *)v62 = 0;
      *(_QWORD *)&v62[8] = 0;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v66, v8, 25);
    v21 = *(_OWORD *)(v66 + 16);
    v20 = *(_OWORD *)(v66 + 32);
    *(_OWORD *)v57 = *(_OWORD *)v66;
    *(_OWORD *)&v57[16] = v21;
    v58 = v20;
    *(_QWORD *)&v66 = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v22 = (unint64_t *)&v4->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v24 = *(_QWORD *)&v57[12];
    v54 = *(_QWORD *)&v57[12];
    sub_20B06C45C(&v54, (unint64_t)v62);
    v53 = *(std::__shared_weak_count_vtbl **)v62;
    sub_20B27306C(*(uint64_t *)v62, (uint64_t)v62);
    *(_QWORD *)&v66 = v57;
    *((_QWORD *)&v66 + 1) = v62;
    if (*(_DWORD *)&v57[20] == 1 && v63 == 1)
    {
      sub_20AFE5D88((size_t *)&v66);
    }
    else
    {
      v55 = 0;
      if (*(_DWORD *)&v57[8] && (_DWORD)v24 && HIDWORD(v24))
      {
        v56 = &v55;
        sub_20AFEA3E0((uint64_t)&v56, (uint64_t)v57, (uint64_t)v62);
      }
    }
    if (v53)
    {
      v25 = (std::__shared_weak_count *)operator new();
      v25->__shared_owners_ = 0;
      v26 = (unint64_t *)&v25->__shared_owners_;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9E40;
      v25->__shared_weak_owners_ = 0;
      v25[1].__vftable = v53;
      *(_QWORD *)a1 = v53;
      *(_QWORD *)(a1 + 8) = v25;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    else
    {
      v25 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v53->~__shared_weak_count + 8))(v57, v53, 25);
    v28 = *(_QWORD *)v57;
    v30 = *(_OWORD *)(*(_QWORD *)v57 + 16);
    v29 = *(_OWORD *)(*(_QWORD *)v57 + 32);
    *(_OWORD *)(a1 + 24) = **(_OWORD **)v57;
    *(_OWORD *)(a1 + 40) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_QWORD *)v57 = 0;
    MEMORY[0x20BD3583C](v28);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
    v31 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 96) = v31;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
    v32 = (unint64_t *)&v25->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    return;
  }
  if (*(_BYTE *)(a2 + 72))
    v11 = *(_QWORD *)(a2 + 24) == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v49 = *(std::__shared_weak_count **)(a2 + 16);
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    do
      v52 = __ldaxr(v50);
    while (__stlxr(v52 - 1, v50));
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
    __break(1u);
    return;
  }
  v12 = *(_QWORD *)(a2 + 36);
  v13 = 4 * ((_DWORD)v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12))
    v14 = v14;
  else
    v14 = 0;
  *(_QWORD *)&v62[4] = *(_QWORD *)(a2 + 36);
  *(_DWORD *)v62 = 4;
  *(_DWORD *)&v62[8] = HIDWORD(v12);
  LODWORD(v66) = 1;
  *(_QWORD *)((char *)&v66 + 4) = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  *(_QWORD *)&v62[12] = v66;
  v63 = v14;
  v64 = v12;
  v65 = *(_QWORD *)((char *)&v66 + 4);
  sub_20B272CD8((uint64_t)v57, (uint64_t)v62);
  v15 = operator new();
  v16 = v15;
  *(_QWORD *)v15 = off_24C4149D0;
  v17 = DWORD2(v58);
  *(_DWORD *)(v15 + 8) = *(_DWORD *)&v57[8];
  *(_BYTE *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 40) = -1;
  if ((_DWORD)v17 == -1)
  {
    v34 = v60;
    *(_OWORD *)(v15 + 48) = v59;
    *(_OWORD *)(v15 + 64) = v34;
    *(_QWORD *)(v15 + 80) = v61;
    *(_QWORD *)v15 = off_24C415480;
    v56 = (char *)v15;
  }
  else
  {
    ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24C4040D0[v17])(v62, v15 + 16, &v57[16]);
    *(_DWORD *)(v16 + 40) = v17;
    v18 = DWORD2(v58);
    v19 = v60;
    *(_OWORD *)(v16 + 48) = v59;
    *(_OWORD *)(v16 + 64) = v19;
    *(_QWORD *)(v16 + 80) = v61;
    *(_QWORD *)v16 = off_24C415480;
    v56 = (char *)v16;
    *(_QWORD *)v57 = off_24C4149D0;
    if ((_DWORD)v18 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24C415AE0[v18])(v62, &v57[16]);
  }
  *(_QWORD *)v62 = v16;
  v35 = (std::__shared_weak_count *)operator new();
  v35->__shared_owners_ = 0;
  v36 = (unint64_t *)&v35->__shared_owners_;
  v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9E40;
  v35->__shared_weak_owners_ = 0;
  v35[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v56 = 0;
  *(_QWORD *)v62 = 0;
  *(_QWORD *)&v62[8] = 0;
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v35;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(v57, v16, 25);
  v39 = *(_OWORD *)(*(_QWORD *)v57 + 16);
  v38 = *(_OWORD *)(*(_QWORD *)v57 + 32);
  *(_OWORD *)(a1 + 24) = **(_OWORD **)v57;
  *(_OWORD *)(a1 + 40) = v39;
  *(_OWORD *)(a1 + 56) = v38;
  *(_QWORD *)v57 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
  v40 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 96) = v40;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
  do
    v41 = __ldaxr(v36);
  while (__stlxr(v41 - 1, v36));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  v42 = *(std::__shared_weak_count **)&v62[8];
  if (!*(_QWORD *)&v62[8])
    goto LABEL_59;
  v43 = (unint64_t *)(*(_QWORD *)&v62[8] + 8);
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    *(_QWORD *)v57 = a2 + 24;
    *(_QWORD *)&v57[8] = a1 + 24;
    if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
    {
LABEL_63:
      LOBYTE(v54) = 0;
      if (*(_DWORD *)(a2 + 32) && *(_DWORD *)(a2 + 36) && *(_DWORD *)(a2 + 40))
      {
        *(_QWORD *)&v66 = &v54;
        sub_20AFEA3E0((uint64_t)&v66, a2 + 24, a1 + 24);
      }
      goto LABEL_73;
    }
  }
  else
  {
LABEL_59:
    *(_QWORD *)v57 = a2 + 24;
    *(_QWORD *)&v57[8] = a1 + 24;
    if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
      goto LABEL_63;
  }
  sub_20AFE5D88((size_t *)v57);
LABEL_73:
  v47 = v56;
  v56 = 0;
  if (v47)
  {
    *(_QWORD *)v47 = off_24C4149D0;
    v48 = *((unsigned int *)v47 + 10);
    if ((_DWORD)v48 != -1)
      ((void (*)(_BYTE *, char *))off_24C415AE0[v48])(v57, v47 + 16);
    *((_DWORD *)v47 + 10) = -1;
    MEMORY[0x20BD3583C](v47, 0x10A3C40ED729E16);
  }
}

void sub_20B06CE38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06CEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06C3BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06CF08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B06C3BC(&a11);
  _Unwind_Resume(a1);
}

void sub_20B06CF5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06C3BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06CF70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20AEC147C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20B06CF84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06C3BC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06CF98(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 25;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B06D158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B06D1AC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B06D214(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C414D30;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

double sub_20B06D29C@<D0>(_DWORD *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  __int128 v11;
  void (**v12)();
  int v13;
  _BYTE v14[24];
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _DWORD v19[3];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];

  v2 = (uint64_t *)a2;
  v24[2] = *MEMORY[0x24BDAC8D0];
  v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a1[1])
    a2 = a2;
  else
    a2 = 0;
  v19[0] = 4;
  v4 = *(_QWORD *)a1;
  v19[1] = *(_QWORD *)a1;
  v19[2] = HIDWORD(v4);
  LODWORD(v24[0]) = 1;
  *(_QWORD *)((char *)v24 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  v20 = v24[0];
  v21 = a2;
  v22 = v4;
  v23 = *(_QWORD *)((char *)v24 + 4);
  sub_20B274760((uint64_t)&v12, (uint64_t)v19);
  v5 = operator new();
  v6 = v5;
  *(_QWORD *)v5 = off_24C414D30;
  v7 = v15;
  *(_DWORD *)(v5 + 8) = v13;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  if ((_DWORD)v7 == -1)
  {
    result = *(double *)&v16;
    v11 = v17;
    *(_OWORD *)(v5 + 48) = v16;
    *(_OWORD *)(v5 + 64) = v11;
    *(_QWORD *)(v5 + 80) = v18;
    *(_QWORD *)v5 = off_24C415510;
    *v2 = v5;
  }
  else
  {
    ((void (*)(_DWORD *, uint64_t, _BYTE *))off_24C4040D0[v7])(v19, v5 + 16, v14);
    *(_DWORD *)(v6 + 40) = v7;
    v8 = v15;
    result = *(double *)&v16;
    v10 = v17;
    *(_OWORD *)(v6 + 48) = v16;
    *(_OWORD *)(v6 + 64) = v10;
    *(_QWORD *)(v6 + 80) = v18;
    *(_QWORD *)v6 = off_24C415510;
    *v2 = v6;
    v12 = off_24C414D30;
    if ((_DWORD)v8 != -1)
      ((void (*)(_DWORD *, _BYTE *))off_24C415AE0[v8])(v19, v14);
  }
  return result;
}

void sub_20B06D444(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06D478(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B06D4E0()
{
  return 31;
}

uint64_t sub_20B06D4E8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B06D4F0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B06D508(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B06D584(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  unint64_t *v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  double v45;
  uint64_t v46;
  uint64_t v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  unint64_t v51;
  std::__shared_weak_count_vtbl *v52;
  uint64_t v53;
  _BYTE v54[32];
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  _BYTE v59[20];
  int v60;
  unint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;

  v64 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      *(_QWORD *)v59 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v59[8] = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      *(_QWORD *)v59 = 0;
      *(_QWORD *)&v59[8] = 0;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v63, v8, 31);
    v22 = *(_OWORD *)(v63 + 16);
    v21 = *(_OWORD *)(v63 + 32);
    *(_OWORD *)v54 = *(_OWORD *)v63;
    *(_OWORD *)&v54[16] = v22;
    v55 = v21;
    *(_QWORD *)&v63 = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v23 = (unint64_t *)&v4->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v53 = *(_QWORD *)&v54[12];
    sub_20B06D29C(&v53, (unint64_t)v59);
    v52 = *(std::__shared_weak_count_vtbl **)v59;
    sub_20B274AF4(*(uint64_t *)v59, (uint64_t)v59);
    *(_QWORD *)&v63 = v54;
    *((_QWORD *)&v63 + 1) = v59;
    sub_20AFEAE58(&v63);
    if (v52)
    {
      v25 = (std::__shared_weak_count *)operator new();
      v25->__shared_owners_ = 0;
      v26 = (unint64_t *)&v25->__shared_owners_;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9F88;
      v25->__shared_weak_owners_ = 0;
      v25[1].__vftable = v52;
      *(_QWORD *)a1 = v52;
      *(_QWORD *)(a1 + 8) = v25;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    else
    {
      v25 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v52->~__shared_weak_count + 8))(v54, v52, 31);
    v28 = *(_QWORD *)v54;
    v30 = *(_OWORD *)(*(_QWORD *)v54 + 16);
    v29 = *(_OWORD *)(*(_QWORD *)v54 + 32);
    *(_OWORD *)(a1 + 24) = **(_OWORD **)v54;
    *(_OWORD *)(a1 + 40) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_QWORD *)v54 = 0;
    MEMORY[0x20BD3583C](v28);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
    v31 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 96) = v31;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
    v32 = (unint64_t *)&v25->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  else
  {
    v11 = a2 + 24;
    if (*(_BYTE *)(a2 + 72))
      v12 = *(_QWORD *)(a2 + 24) == 0;
    else
      v12 = 1;
    if (v12)
    {
      v13 = *(_QWORD *)(a2 + 36);
      v14 = 4 * ((_DWORD)v13 != 0);
      LODWORD(v15) = v14 * v13;
      if (HIDWORD(v13))
        v15 = v15;
      else
        v15 = 0;
      *(_DWORD *)v59 = 4;
      *(_QWORD *)&v59[4] = v13;
      LODWORD(v63) = 1;
      *(_QWORD *)((char *)&v63 + 4) = v14 & 0x3FFFFFFFFLL | ((unint64_t)(v15 >> 2) << 34);
      *(_QWORD *)&v59[12] = v63;
      v60 = v15;
      v61 = v13;
      v62 = *(_QWORD *)((char *)&v63 + 4);
      sub_20B274760((uint64_t)v54, (uint64_t)v59);
      v16 = operator new();
      v17 = v16;
      *(_QWORD *)v16 = off_24C414D30;
      v18 = DWORD2(v55);
      *(_DWORD *)(v16 + 8) = *(_DWORD *)&v54[8];
      *(_BYTE *)(v16 + 16) = 0;
      *(_DWORD *)(v16 + 40) = -1;
      if ((_DWORD)v18 == -1)
      {
        v34 = v57;
        *(_OWORD *)(v16 + 48) = v56;
        *(_OWORD *)(v16 + 64) = v34;
        *(_QWORD *)(v16 + 80) = v58;
        *(_QWORD *)v16 = off_24C415510;
        v53 = v16;
      }
      else
      {
        ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24C4040D0[v18])(v59, v16 + 16, &v54[16]);
        *(_DWORD *)(v17 + 40) = v18;
        v19 = DWORD2(v55);
        v20 = v57;
        *(_OWORD *)(v17 + 48) = v56;
        *(_OWORD *)(v17 + 64) = v20;
        *(_QWORD *)(v17 + 80) = v58;
        *(_QWORD *)v17 = off_24C415510;
        v53 = v17;
        *(_QWORD *)v54 = off_24C414D30;
        if ((_DWORD)v19 != -1)
          ((void (*)(_BYTE *, _BYTE *))off_24C415AE0[v19])(v59, &v54[16]);
      }
      *(_QWORD *)v59 = v17;
      v35 = (std::__shared_weak_count *)operator new();
      v35->__shared_owners_ = 0;
      v36 = (unint64_t *)&v35->__shared_owners_;
      v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F9F88;
      v35->__shared_weak_owners_ = 0;
      v35[1].__vftable = (std::__shared_weak_count_vtbl *)v17;
      v53 = 0;
      *(_QWORD *)v59 = 0;
      *(_QWORD *)&v59[8] = 0;
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v35;
      do
        v37 = __ldxr(v36);
      while (__stxr(v37 + 1, v36));
      *(_QWORD *)(a1 + 16) = 0;
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v17 + 64))(v54, v17, 31);
      v39 = *(_OWORD *)(*(_QWORD *)v54 + 16);
      v38 = *(_OWORD *)(*(_QWORD *)v54 + 32);
      *(_OWORD *)(a1 + 24) = **(_OWORD **)v54;
      *(_OWORD *)(a1 + 40) = v39;
      *(_OWORD *)(a1 + 56) = v38;
      *(_QWORD *)v54 = 0;
      MEMORY[0x20BD3583C]();
      *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
      v40 = *(_OWORD *)(a1 + 48);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 96) = v40;
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
      do
        v41 = __ldaxr(v36);
      while (__stlxr(v41 - 1, v36));
      if (!v41)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
      }
      v42 = *(std::__shared_weak_count **)&v59[8];
      if (*(_QWORD *)&v59[8])
      {
        v43 = (unint64_t *)(*(_QWORD *)&v59[8] + 8);
        do
          v44 = __ldaxr(v43);
        while (__stlxr(v44 - 1, v43));
        if (!v44)
        {
          ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
          std::__shared_weak_count::__release_weak(v42);
        }
      }
      *(_QWORD *)v54 = v11;
      *(_QWORD *)&v54[8] = a1 + 24;
      v45 = sub_20AFEAE58(v54);
      v46 = v53;
      v53 = 0;
      if (v46)
      {
        *(_QWORD *)v46 = off_24C414D30;
        v47 = *(unsigned int *)(v46 + 40);
        if ((_DWORD)v47 != -1)
          ((void (*)(_BYTE *, uint64_t, double))off_24C415AE0[v47])(v54, v46 + 16, v45);
        *(_DWORD *)(v46 + 40) = -1;
        MEMORY[0x20BD3583C](v46, 0x10A3C40ED729E16);
      }
    }
    else
    {
      v48 = *(std::__shared_weak_count **)(a2 + 16);
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldxr(v49);
      while (__stxr(v50 + 1, v49));
      do
        v51 = __ldaxr(v49);
      while (__stlxr(v51 - 1, v49));
      ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
      std::__shared_weak_count::__release_weak(v48);
      __break(1u);
    }
  }
}

void sub_20B06DBC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06DC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06D214((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06DC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v16;

  v13 = v12;
  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v13->__shared_owners_;
  do
    v16 = __ldaxr(p_shared_owners);
  while (__stlxr(v16 - 1, p_shared_owners));
  if (!v16)
  {
    ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
    std::__shared_weak_count::__release_weak(v13);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B06D214(&a11);
  _Unwind_Resume(a1);
}

void sub_20B06DCF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06D214((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06DD08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B06DD1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06D214((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06DD30(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 31;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B06DEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B06DF48(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B06DFB0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C414EE0;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

double sub_20B06E038@<D0>(_DWORD *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  __int128 v11;
  void (**v12)();
  int v13;
  _BYTE v14[24];
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _DWORD v19[3];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];

  v2 = (uint64_t *)a2;
  v24[2] = *MEMORY[0x24BDAC8D0];
  v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a1[1])
    a2 = a2;
  else
    a2 = 0;
  v19[0] = 4;
  v4 = *(_QWORD *)a1;
  v19[1] = *(_QWORD *)a1;
  v19[2] = HIDWORD(v4);
  LODWORD(v24[0]) = 1;
  *(_QWORD *)((char *)v24 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  v20 = v24[0];
  v21 = a2;
  v22 = v4;
  v23 = *(_QWORD *)((char *)v24 + 4);
  sub_20B2761A0((uint64_t)&v12, (uint64_t)v19);
  v5 = operator new();
  v6 = v5;
  *(_QWORD *)v5 = off_24C414EE0;
  v7 = v15;
  *(_DWORD *)(v5 + 8) = v13;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  if ((_DWORD)v7 == -1)
  {
    result = *(double *)&v16;
    v11 = v17;
    *(_OWORD *)(v5 + 48) = v16;
    *(_OWORD *)(v5 + 64) = v11;
    *(_QWORD *)(v5 + 80) = v18;
    *(_QWORD *)v5 = off_24C4155A0;
    *v2 = v5;
  }
  else
  {
    ((void (*)(_DWORD *, uint64_t, _BYTE *))off_24C4040D0[v7])(v19, v5 + 16, v14);
    *(_DWORD *)(v6 + 40) = v7;
    v8 = v15;
    result = *(double *)&v16;
    v10 = v17;
    *(_OWORD *)(v6 + 48) = v16;
    *(_OWORD *)(v6 + 64) = v10;
    *(_QWORD *)(v6 + 80) = v18;
    *(_QWORD *)v6 = off_24C4155A0;
    *v2 = v6;
    v12 = off_24C414EE0;
    if ((_DWORD)v8 != -1)
      ((void (*)(_DWORD *, _BYTE *))off_24C415AE0[v8])(v19, v14);
  }
  return result;
}

void sub_20B06E1E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06E214(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B06E27C()
{
  return 32;
}

uint64_t sub_20B06E284(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B06E28C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B06E2A4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B06E320(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count_vtbl *v53;
  uint64_t v54;
  char v55;
  char *v56;
  _BYTE v57[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _BYTE v62[20];
  int v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      *(_QWORD *)v62 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v62[8] = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      *(_QWORD *)v62 = 0;
      *(_QWORD *)&v62[8] = 0;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v66, v8, 32);
    v21 = *(_OWORD *)(v66 + 16);
    v20 = *(_OWORD *)(v66 + 32);
    *(_OWORD *)v57 = *(_OWORD *)v66;
    *(_OWORD *)&v57[16] = v21;
    v58 = v20;
    *(_QWORD *)&v66 = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v22 = (unint64_t *)&v4->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v24 = *(_QWORD *)&v57[12];
    v54 = *(_QWORD *)&v57[12];
    sub_20B06E038(&v54, (unint64_t)v62);
    v53 = *(std::__shared_weak_count_vtbl **)v62;
    sub_20B276534(*(uint64_t *)v62, (uint64_t)v62);
    *(_QWORD *)&v66 = v57;
    *((_QWORD *)&v66 + 1) = v62;
    if (*(_DWORD *)&v57[20] == 1 && v63 == 1)
    {
      sub_20AFC9A3C((uint64_t *)&v66);
    }
    else
    {
      v55 = 0;
      if (*(_DWORD *)&v57[8] && (_DWORD)v24 && HIDWORD(v24))
      {
        v56 = &v55;
        sub_20AFEB5FC((uint64_t)&v56, (uint64_t)v57, (uint64_t)v62);
      }
    }
    if (v53)
    {
      v25 = (std::__shared_weak_count *)operator new();
      v25->__shared_owners_ = 0;
      v26 = (unint64_t *)&v25->__shared_owners_;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA0D0;
      v25->__shared_weak_owners_ = 0;
      v25[1].__vftable = v53;
      *(_QWORD *)a1 = v53;
      *(_QWORD *)(a1 + 8) = v25;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    else
    {
      v25 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v53->~__shared_weak_count + 8))(v57, v53, 32);
    v28 = *(_QWORD *)v57;
    v30 = *(_OWORD *)(*(_QWORD *)v57 + 16);
    v29 = *(_OWORD *)(*(_QWORD *)v57 + 32);
    *(_OWORD *)(a1 + 24) = **(_OWORD **)v57;
    *(_OWORD *)(a1 + 40) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_QWORD *)v57 = 0;
    MEMORY[0x20BD3583C](v28);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
    v31 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 96) = v31;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
    v32 = (unint64_t *)&v25->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    return;
  }
  if (*(_BYTE *)(a2 + 72))
    v11 = *(_QWORD *)(a2 + 24) == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v49 = *(std::__shared_weak_count **)(a2 + 16);
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    do
      v52 = __ldaxr(v50);
    while (__stlxr(v52 - 1, v50));
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
    __break(1u);
    return;
  }
  v12 = *(_QWORD *)(a2 + 36);
  v13 = 4 * ((_DWORD)v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12))
    v14 = v14;
  else
    v14 = 0;
  *(_QWORD *)&v62[4] = *(_QWORD *)(a2 + 36);
  *(_DWORD *)v62 = 4;
  *(_DWORD *)&v62[8] = HIDWORD(v12);
  LODWORD(v66) = 1;
  *(_QWORD *)((char *)&v66 + 4) = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  *(_QWORD *)&v62[12] = v66;
  v63 = v14;
  v64 = v12;
  v65 = *(_QWORD *)((char *)&v66 + 4);
  sub_20B2761A0((uint64_t)v57, (uint64_t)v62);
  v15 = operator new();
  v16 = v15;
  *(_QWORD *)v15 = off_24C414EE0;
  v17 = DWORD2(v58);
  *(_DWORD *)(v15 + 8) = *(_DWORD *)&v57[8];
  *(_BYTE *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 40) = -1;
  if ((_DWORD)v17 == -1)
  {
    v34 = v60;
    *(_OWORD *)(v15 + 48) = v59;
    *(_OWORD *)(v15 + 64) = v34;
    *(_QWORD *)(v15 + 80) = v61;
    *(_QWORD *)v15 = off_24C4155A0;
    v56 = (char *)v15;
  }
  else
  {
    ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24C4040D0[v17])(v62, v15 + 16, &v57[16]);
    *(_DWORD *)(v16 + 40) = v17;
    v18 = DWORD2(v58);
    v19 = v60;
    *(_OWORD *)(v16 + 48) = v59;
    *(_OWORD *)(v16 + 64) = v19;
    *(_QWORD *)(v16 + 80) = v61;
    *(_QWORD *)v16 = off_24C4155A0;
    v56 = (char *)v16;
    *(_QWORD *)v57 = off_24C414EE0;
    if ((_DWORD)v18 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24C415AE0[v18])(v62, &v57[16]);
  }
  *(_QWORD *)v62 = v16;
  v35 = (std::__shared_weak_count *)operator new();
  v35->__shared_owners_ = 0;
  v36 = (unint64_t *)&v35->__shared_owners_;
  v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA0D0;
  v35->__shared_weak_owners_ = 0;
  v35[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v56 = 0;
  *(_QWORD *)v62 = 0;
  *(_QWORD *)&v62[8] = 0;
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v35;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(v57, v16, 32);
  v39 = *(_OWORD *)(*(_QWORD *)v57 + 16);
  v38 = *(_OWORD *)(*(_QWORD *)v57 + 32);
  *(_OWORD *)(a1 + 24) = **(_OWORD **)v57;
  *(_OWORD *)(a1 + 40) = v39;
  *(_OWORD *)(a1 + 56) = v38;
  *(_QWORD *)v57 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
  v40 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 96) = v40;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
  do
    v41 = __ldaxr(v36);
  while (__stlxr(v41 - 1, v36));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  v42 = *(std::__shared_weak_count **)&v62[8];
  if (!*(_QWORD *)&v62[8])
    goto LABEL_59;
  v43 = (unint64_t *)(*(_QWORD *)&v62[8] + 8);
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    *(_QWORD *)v57 = a2 + 24;
    *(_QWORD *)&v57[8] = a1 + 24;
    if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
    {
LABEL_63:
      LOBYTE(v54) = 0;
      if (*(_DWORD *)(a2 + 32) && *(_DWORD *)(a2 + 36) && *(_DWORD *)(a2 + 40))
      {
        *(_QWORD *)&v66 = &v54;
        sub_20AFEB5FC((uint64_t)&v66, a2 + 24, a1 + 24);
      }
      goto LABEL_73;
    }
  }
  else
  {
LABEL_59:
    *(_QWORD *)v57 = a2 + 24;
    *(_QWORD *)&v57[8] = a1 + 24;
    if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
      goto LABEL_63;
  }
  sub_20AFC9A3C((uint64_t *)v57);
LABEL_73:
  v47 = v56;
  v56 = 0;
  if (v47)
  {
    *(_QWORD *)v47 = off_24C414EE0;
    v48 = *((unsigned int *)v47 + 10);
    if ((_DWORD)v48 != -1)
      ((void (*)(_BYTE *, char *))off_24C415AE0[v48])(v57, v47 + 16);
    *((_DWORD *)v47 + 10) = -1;
    MEMORY[0x20BD3583C](v47, 0x10A3C40ED729E16);
  }
}

void sub_20B06EA18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06EAD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06DFB0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06EAE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B06DFB0(&a11);
  _Unwind_Resume(a1);
}

void sub_20B06EB3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06DFB0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06EB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20AEC147C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20B06EB64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06DFB0((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06EB78(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 4 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 32;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B06ED3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B06ED90(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B06EDF8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C4149D0;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

void sub_20B06EE84()
{
  JUMPOUT(0x20BD3583CLL);
}

double sub_20B06EE98@<D0>(_DWORD *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  __int128 v11;
  void (**v12)();
  int v13;
  _BYTE v14[24];
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _DWORD v19[3];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];

  v2 = (uint64_t *)a2;
  v24[2] = *MEMORY[0x24BDAC8D0];
  v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a1[1])
    a2 = a2;
  else
    a2 = 0;
  v19[0] = 4;
  v4 = *(_QWORD *)a1;
  v19[1] = *(_QWORD *)a1;
  v19[2] = HIDWORD(v4);
  LODWORD(v24[0]) = 1;
  *(_QWORD *)((char *)v24 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  v20 = v24[0];
  v21 = a2;
  v22 = v4;
  v23 = *(_QWORD *)((char *)v24 + 4);
  sub_20B277C1C((uint64_t)&v12, (uint64_t)v19);
  v5 = operator new();
  v6 = v5;
  *(_QWORD *)v5 = off_24C4149D0;
  v7 = v15;
  *(_DWORD *)(v5 + 8) = v13;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  if ((_DWORD)v7 == -1)
  {
    result = *(double *)&v16;
    v11 = v17;
    *(_OWORD *)(v5 + 48) = v16;
    *(_OWORD *)(v5 + 64) = v11;
    *(_QWORD *)(v5 + 80) = v18;
    *(_QWORD *)v5 = off_24C415630;
    *v2 = v5;
  }
  else
  {
    ((void (*)(_DWORD *, uint64_t, _BYTE *))off_24C4040D0[v7])(v19, v5 + 16, v14);
    *(_DWORD *)(v6 + 40) = v7;
    v8 = v15;
    result = *(double *)&v16;
    v10 = v17;
    *(_OWORD *)(v6 + 48) = v16;
    *(_OWORD *)(v6 + 64) = v10;
    *(_QWORD *)(v6 + 80) = v18;
    *(_QWORD *)v6 = off_24C415630;
    *v2 = v6;
    v12 = off_24C4149D0;
    if ((_DWORD)v8 != -1)
      ((void (*)(_DWORD *, _BYTE *))off_24C415AE0[v8])(v19, v14);
  }
  return result;
}

void sub_20B06F040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06F074(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B06F0DC()
{
  return 37;
}

uint64_t sub_20B06F0E4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B06F0EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B06F100(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B06F17C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count_vtbl *v53;
  uint64_t v54;
  char v55;
  char *v56;
  _BYTE v57[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _BYTE v62[20];
  int v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      *(_QWORD *)v62 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v62[8] = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      *(_QWORD *)v62 = 0;
      *(_QWORD *)&v62[8] = 0;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v66, v8, 37);
    v21 = *(_OWORD *)(v66 + 16);
    v20 = *(_OWORD *)(v66 + 32);
    *(_OWORD *)v57 = *(_OWORD *)v66;
    *(_OWORD *)&v57[16] = v21;
    v58 = v20;
    *(_QWORD *)&v66 = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v22 = (unint64_t *)&v4->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v24 = *(_QWORD *)&v57[12];
    v54 = *(_QWORD *)&v57[12];
    sub_20B06EE98(&v54, (unint64_t)v62);
    v53 = *(std::__shared_weak_count_vtbl **)v62;
    sub_20B277FB0(*(uint64_t *)v62, (uint64_t)v62);
    *(_QWORD *)&v66 = v57;
    *((_QWORD *)&v66 + 1) = v62;
    if (*(_DWORD *)&v57[20] == 1 && v63 == 1)
    {
      sub_20AFE5D88((size_t *)&v66);
    }
    else
    {
      v55 = 0;
      if (*(_DWORD *)&v57[8] && (_DWORD)v24 && HIDWORD(v24))
      {
        v56 = &v55;
        sub_20AFEA3E0((uint64_t)&v56, (uint64_t)v57, (uint64_t)v62);
      }
    }
    if (v53)
    {
      v25 = (std::__shared_weak_count *)operator new();
      v25->__shared_owners_ = 0;
      v26 = (unint64_t *)&v25->__shared_owners_;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA218;
      v25->__shared_weak_owners_ = 0;
      v25[1].__vftable = v53;
      *(_QWORD *)a1 = v53;
      *(_QWORD *)(a1 + 8) = v25;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    else
    {
      v25 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v53->~__shared_weak_count + 8))(v57, v53, 37);
    v28 = *(_QWORD *)v57;
    v30 = *(_OWORD *)(*(_QWORD *)v57 + 16);
    v29 = *(_OWORD *)(*(_QWORD *)v57 + 32);
    *(_OWORD *)(a1 + 24) = **(_OWORD **)v57;
    *(_OWORD *)(a1 + 40) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_QWORD *)v57 = 0;
    MEMORY[0x20BD3583C](v28);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
    v31 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 96) = v31;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
    v32 = (unint64_t *)&v25->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    return;
  }
  if (*(_BYTE *)(a2 + 72))
    v11 = *(_QWORD *)(a2 + 24) == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v49 = *(std::__shared_weak_count **)(a2 + 16);
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    do
      v52 = __ldaxr(v50);
    while (__stlxr(v52 - 1, v50));
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
    __break(1u);
    return;
  }
  v12 = *(_QWORD *)(a2 + 36);
  v13 = 4 * ((_DWORD)v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12))
    v14 = v14;
  else
    v14 = 0;
  *(_QWORD *)&v62[4] = *(_QWORD *)(a2 + 36);
  *(_DWORD *)v62 = 4;
  *(_DWORD *)&v62[8] = HIDWORD(v12);
  LODWORD(v66) = 1;
  *(_QWORD *)((char *)&v66 + 4) = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  *(_QWORD *)&v62[12] = v66;
  v63 = v14;
  v64 = v12;
  v65 = *(_QWORD *)((char *)&v66 + 4);
  sub_20B277C1C((uint64_t)v57, (uint64_t)v62);
  v15 = operator new();
  v16 = v15;
  *(_QWORD *)v15 = off_24C4149D0;
  v17 = DWORD2(v58);
  *(_DWORD *)(v15 + 8) = *(_DWORD *)&v57[8];
  *(_BYTE *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 40) = -1;
  if ((_DWORD)v17 == -1)
  {
    v34 = v60;
    *(_OWORD *)(v15 + 48) = v59;
    *(_OWORD *)(v15 + 64) = v34;
    *(_QWORD *)(v15 + 80) = v61;
    *(_QWORD *)v15 = off_24C415630;
    v56 = (char *)v15;
  }
  else
  {
    ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24C4040D0[v17])(v62, v15 + 16, &v57[16]);
    *(_DWORD *)(v16 + 40) = v17;
    v18 = DWORD2(v58);
    v19 = v60;
    *(_OWORD *)(v16 + 48) = v59;
    *(_OWORD *)(v16 + 64) = v19;
    *(_QWORD *)(v16 + 80) = v61;
    *(_QWORD *)v16 = off_24C415630;
    v56 = (char *)v16;
    *(_QWORD *)v57 = off_24C4149D0;
    if ((_DWORD)v18 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24C415AE0[v18])(v62, &v57[16]);
  }
  *(_QWORD *)v62 = v16;
  v35 = (std::__shared_weak_count *)operator new();
  v35->__shared_owners_ = 0;
  v36 = (unint64_t *)&v35->__shared_owners_;
  v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA218;
  v35->__shared_weak_owners_ = 0;
  v35[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v56 = 0;
  *(_QWORD *)v62 = 0;
  *(_QWORD *)&v62[8] = 0;
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v35;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(v57, v16, 37);
  v39 = *(_OWORD *)(*(_QWORD *)v57 + 16);
  v38 = *(_OWORD *)(*(_QWORD *)v57 + 32);
  *(_OWORD *)(a1 + 24) = **(_OWORD **)v57;
  *(_OWORD *)(a1 + 40) = v39;
  *(_OWORD *)(a1 + 56) = v38;
  *(_QWORD *)v57 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
  v40 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 96) = v40;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
  do
    v41 = __ldaxr(v36);
  while (__stlxr(v41 - 1, v36));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  v42 = *(std::__shared_weak_count **)&v62[8];
  if (!*(_QWORD *)&v62[8])
    goto LABEL_59;
  v43 = (unint64_t *)(*(_QWORD *)&v62[8] + 8);
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    *(_QWORD *)v57 = a2 + 24;
    *(_QWORD *)&v57[8] = a1 + 24;
    if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
    {
LABEL_63:
      LOBYTE(v54) = 0;
      if (*(_DWORD *)(a2 + 32) && *(_DWORD *)(a2 + 36) && *(_DWORD *)(a2 + 40))
      {
        *(_QWORD *)&v66 = &v54;
        sub_20AFEA3E0((uint64_t)&v66, a2 + 24, a1 + 24);
      }
      goto LABEL_73;
    }
  }
  else
  {
LABEL_59:
    *(_QWORD *)v57 = a2 + 24;
    *(_QWORD *)&v57[8] = a1 + 24;
    if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
      goto LABEL_63;
  }
  sub_20AFE5D88((size_t *)v57);
LABEL_73:
  v47 = v56;
  v56 = 0;
  if (v47)
  {
    *(_QWORD *)v47 = off_24C4149D0;
    v48 = *((unsigned int *)v47 + 10);
    if ((_DWORD)v48 != -1)
      ((void (*)(_BYTE *, char *))off_24C415AE0[v48])(v57, v47 + 16);
    *((_DWORD *)v47 + 10) = -1;
    MEMORY[0x20BD3583C](v47, 0x10A3C40ED729E16);
  }
}

void sub_20B06F874(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06F930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06EDF8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06F944(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B06EDF8(&a11);
  _Unwind_Resume(a1);
}

void sub_20B06F998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06EDF8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06F9AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20AEC147C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20B06F9C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06EDF8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B06F9D4(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 37;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B06FB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B06FBE8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t *sub_20B06FC50(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C414B80;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C415AE0[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40ED729E16);
  }
  return a1;
}

double sub_20B06FCD8@<D0>(_DWORD *a1@<X0>, unint64_t a2@<X8>)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  double result;
  __int128 v10;
  __int128 v11;
  void (**v12)();
  int v13;
  _BYTE v14[24];
  unsigned int v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  _DWORD v19[3];
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[3];

  v2 = (uint64_t *)a2;
  v24[2] = *MEMORY[0x24BDAC8D0];
  v3 = 4 * (*a1 != 0);
  LODWORD(a2) = v3 * *a1;
  if (a1[1])
    a2 = a2;
  else
    a2 = 0;
  v19[0] = 4;
  v4 = *(_QWORD *)a1;
  v19[1] = *(_QWORD *)a1;
  v19[2] = HIDWORD(v4);
  LODWORD(v24[0]) = 1;
  *(_QWORD *)((char *)v24 + 4) = v3 & 0x3FFFFFFFFLL | ((unint64_t)(a2 >> 2) << 34);
  v20 = v24[0];
  v21 = a2;
  v22 = v4;
  v23 = *(_QWORD *)((char *)v24 + 4);
  sub_20B2796A4((uint64_t)&v12, (uint64_t)v19);
  v5 = operator new();
  v6 = v5;
  *(_QWORD *)v5 = off_24C414B80;
  v7 = v15;
  *(_DWORD *)(v5 + 8) = v13;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  if ((_DWORD)v7 == -1)
  {
    result = *(double *)&v16;
    v11 = v17;
    *(_OWORD *)(v5 + 48) = v16;
    *(_OWORD *)(v5 + 64) = v11;
    *(_QWORD *)(v5 + 80) = v18;
    *(_QWORD *)v5 = off_24C4156C0;
    *v2 = v5;
  }
  else
  {
    ((void (*)(_DWORD *, uint64_t, _BYTE *))off_24C4040D0[v7])(v19, v5 + 16, v14);
    *(_DWORD *)(v6 + 40) = v7;
    v8 = v15;
    result = *(double *)&v16;
    v10 = v17;
    *(_OWORD *)(v6 + 48) = v16;
    *(_OWORD *)(v6 + 64) = v10;
    *(_QWORD *)(v6 + 80) = v18;
    *(_QWORD *)v6 = off_24C4156C0;
    *v2 = v6;
    v12 = off_24C414B80;
    if ((_DWORD)v8 != -1)
      ((void (*)(_DWORD *, _BYTE *))off_24C415AE0[v8])(v19, v14);
  }
  return result;
}

void sub_20B06FE80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B06FEB4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B06FF1C()
{
  return 38;
}

uint64_t sub_20B06FF24(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B06FF2C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B06FF44(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B06FFC0(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  BOOL v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  unint64_t *v22;
  unint64_t v23;
  unint64_t v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  __int128 v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  char *v47;
  uint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  unint64_t v52;
  std::__shared_weak_count_vtbl *v53;
  uint64_t v54;
  char v55;
  char *v56;
  _BYTE v57[32];
  __int128 v58;
  __int128 v59;
  __int128 v60;
  uint64_t v61;
  _BYTE v62[20];
  int v63;
  unint64_t v64;
  uint64_t v65;
  __int128 v66;
  uint64_t v67;

  v67 = *MEMORY[0x24BDAC8D0];
  if (*(_QWORD *)(a2 + 8))
  {
    v4 = *(std::__shared_weak_count **)(a2 + 16);
    if (v4)
    {
      p_shared_owners = (unint64_t *)&v4->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
      v4 = *(std::__shared_weak_count **)(a2 + 16);
    }
    v8 = *(_QWORD *)(a2 + 8);
    if (v8)
    {
      *(_QWORD *)v62 = *(_QWORD *)(a2 + 8);
      *(_QWORD *)&v62[8] = v4;
      if (v4)
      {
        v9 = (unint64_t *)&v4->__shared_owners_;
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
    }
    else
    {
      v4 = 0;
      *(_QWORD *)v62 = 0;
      *(_QWORD *)&v62[8] = 0;
    }
    (*(void (**)(__int128 *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 72))(&v66, v8, 38);
    v21 = *(_OWORD *)(v66 + 16);
    v20 = *(_OWORD *)(v66 + 32);
    *(_OWORD *)v57 = *(_OWORD *)v66;
    *(_OWORD *)&v57[16] = v21;
    v58 = v20;
    *(_QWORD *)&v66 = 0;
    MEMORY[0x20BD3583C]();
    if (v4)
    {
      v22 = (unint64_t *)&v4->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
        std::__shared_weak_count::__release_weak(v4);
      }
    }
    v24 = *(_QWORD *)&v57[12];
    v54 = *(_QWORD *)&v57[12];
    sub_20B06FCD8(&v54, (unint64_t)v62);
    v53 = *(std::__shared_weak_count_vtbl **)v62;
    sub_20B279A38(*(uint64_t *)v62, (uint64_t)v62);
    *(_QWORD *)&v66 = v57;
    *((_QWORD *)&v66 + 1) = v62;
    if (*(_DWORD *)&v57[20] == 1 && v63 == 1)
    {
      sub_20AFC7BE4((uint64_t *)&v66);
    }
    else
    {
      v55 = 0;
      if (*(_DWORD *)&v57[8] && (_DWORD)v24 && HIDWORD(v24))
      {
        v56 = &v55;
        sub_20AFEA8F4((uint64_t)&v56, (uint64_t)v57, (uint64_t)v62);
      }
    }
    if (v53)
    {
      v25 = (std::__shared_weak_count *)operator new();
      v25->__shared_owners_ = 0;
      v26 = (unint64_t *)&v25->__shared_owners_;
      v25->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA360;
      v25->__shared_weak_owners_ = 0;
      v25[1].__vftable = v53;
      *(_QWORD *)a1 = v53;
      *(_QWORD *)(a1 + 8) = v25;
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
    else
    {
      v25 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
    }
    *(_QWORD *)(a1 + 16) = 0;
    (*((void (**)(_BYTE *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v53->~__shared_weak_count + 8))(v57, v53, 38);
    v28 = *(_QWORD *)v57;
    v30 = *(_OWORD *)(*(_QWORD *)v57 + 16);
    v29 = *(_OWORD *)(*(_QWORD *)v57 + 32);
    *(_OWORD *)(a1 + 24) = **(_OWORD **)v57;
    *(_OWORD *)(a1 + 40) = v30;
    *(_OWORD *)(a1 + 56) = v29;
    *(_QWORD *)v57 = 0;
    MEMORY[0x20BD3583C](v28);
    *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
    v31 = *(_OWORD *)(a1 + 48);
    *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
    *(_OWORD *)(a1 + 96) = v31;
    *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
    v32 = (unint64_t *)&v25->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
    return;
  }
  if (*(_BYTE *)(a2 + 72))
    v11 = *(_QWORD *)(a2 + 24) == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v49 = *(std::__shared_weak_count **)(a2 + 16);
    v50 = (unint64_t *)&v49->__shared_owners_;
    do
      v51 = __ldxr(v50);
    while (__stxr(v51 + 1, v50));
    do
      v52 = __ldaxr(v50);
    while (__stlxr(v52 - 1, v50));
    ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
    std::__shared_weak_count::__release_weak(v49);
    __break(1u);
    return;
  }
  v12 = *(_QWORD *)(a2 + 36);
  v13 = 4 * ((_DWORD)v12 != 0);
  LODWORD(v14) = v13 * v12;
  if (HIDWORD(v12))
    v14 = v14;
  else
    v14 = 0;
  *(_QWORD *)&v62[4] = *(_QWORD *)(a2 + 36);
  *(_DWORD *)v62 = 4;
  *(_DWORD *)&v62[8] = HIDWORD(v12);
  LODWORD(v66) = 1;
  *(_QWORD *)((char *)&v66 + 4) = v13 & 0x3FFFFFFFFLL | ((unint64_t)(v14 >> 2) << 34);
  *(_QWORD *)&v62[12] = v66;
  v63 = v14;
  v64 = v12;
  v65 = *(_QWORD *)((char *)&v66 + 4);
  sub_20B2796A4((uint64_t)v57, (uint64_t)v62);
  v15 = operator new();
  v16 = v15;
  *(_QWORD *)v15 = off_24C414B80;
  v17 = DWORD2(v58);
  *(_DWORD *)(v15 + 8) = *(_DWORD *)&v57[8];
  *(_BYTE *)(v15 + 16) = 0;
  *(_DWORD *)(v15 + 40) = -1;
  if ((_DWORD)v17 == -1)
  {
    v34 = v60;
    *(_OWORD *)(v15 + 48) = v59;
    *(_OWORD *)(v15 + 64) = v34;
    *(_QWORD *)(v15 + 80) = v61;
    *(_QWORD *)v15 = off_24C4156C0;
    v56 = (char *)v15;
  }
  else
  {
    ((void (*)(_BYTE *, uint64_t, _BYTE *))off_24C4040D0[v17])(v62, v15 + 16, &v57[16]);
    *(_DWORD *)(v16 + 40) = v17;
    v18 = DWORD2(v58);
    v19 = v60;
    *(_OWORD *)(v16 + 48) = v59;
    *(_OWORD *)(v16 + 64) = v19;
    *(_QWORD *)(v16 + 80) = v61;
    *(_QWORD *)v16 = off_24C4156C0;
    v56 = (char *)v16;
    *(_QWORD *)v57 = off_24C414B80;
    if ((_DWORD)v18 != -1)
      ((void (*)(_BYTE *, _BYTE *))off_24C415AE0[v18])(v62, &v57[16]);
  }
  *(_QWORD *)v62 = v16;
  v35 = (std::__shared_weak_count *)operator new();
  v35->__shared_owners_ = 0;
  v36 = (unint64_t *)&v35->__shared_owners_;
  v35->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA360;
  v35->__shared_weak_owners_ = 0;
  v35[1].__vftable = (std::__shared_weak_count_vtbl *)v16;
  v56 = 0;
  *(_QWORD *)v62 = 0;
  *(_QWORD *)&v62[8] = 0;
  *(_QWORD *)a1 = v16;
  *(_QWORD *)(a1 + 8) = v35;
  do
    v37 = __ldxr(v36);
  while (__stxr(v37 + 1, v36));
  *(_QWORD *)(a1 + 16) = 0;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v16 + 64))(v57, v16, 38);
  v39 = *(_OWORD *)(*(_QWORD *)v57 + 16);
  v38 = *(_OWORD *)(*(_QWORD *)v57 + 32);
  *(_OWORD *)(a1 + 24) = **(_OWORD **)v57;
  *(_OWORD *)(a1 + 40) = v39;
  *(_OWORD *)(a1 + 56) = v38;
  *(_QWORD *)v57 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 72) = *(_QWORD *)(a1 + 24);
  v40 = *(_OWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 96) = v40;
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(a1 + 64);
  do
    v41 = __ldaxr(v36);
  while (__stlxr(v41 - 1, v36));
  if (!v41)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
  v42 = *(std::__shared_weak_count **)&v62[8];
  if (!*(_QWORD *)&v62[8])
    goto LABEL_59;
  v43 = (unint64_t *)(*(_QWORD *)&v62[8] + 8);
  do
    v44 = __ldaxr(v43);
  while (__stlxr(v44 - 1, v43));
  if (!v44)
  {
    ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
    std::__shared_weak_count::__release_weak(v42);
    *(_QWORD *)v57 = a2 + 24;
    *(_QWORD *)&v57[8] = a1 + 24;
    if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
    {
LABEL_63:
      LOBYTE(v54) = 0;
      if (*(_DWORD *)(a2 + 32) && *(_DWORD *)(a2 + 36) && *(_DWORD *)(a2 + 40))
      {
        *(_QWORD *)&v66 = &v54;
        sub_20AFEA8F4((uint64_t)&v66, a2 + 24, a1 + 24);
      }
      goto LABEL_73;
    }
  }
  else
  {
LABEL_59:
    *(_QWORD *)v57 = a2 + 24;
    *(_QWORD *)&v57[8] = a1 + 24;
    if (*(_DWORD *)(a2 + 44) != 1 || *(_DWORD *)(a1 + 44) != 1)
      goto LABEL_63;
  }
  sub_20AFC7BE4((uint64_t *)v57);
LABEL_73:
  v47 = v56;
  v56 = 0;
  if (v47)
  {
    *(_QWORD *)v47 = off_24C414B80;
    v48 = *((unsigned int *)v47 + 10);
    if ((_DWORD)v48 != -1)
      ((void (*)(_BYTE *, char *))off_24C415AE0[v48])(v57, v47 + 16);
    *((_DWORD *)v47 + 10) = -1;
    MEMORY[0x20BD3583C](v47, 0x10A3C40ED729E16);
  }
}

void sub_20B0706B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B070774(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06FC50((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B070788(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v15;

  sub_20AEC147C(v11);
  p_shared_owners = (unint64_t *)&v12->__shared_owners_;
  do
    v15 = __ldaxr(p_shared_owners);
  while (__stlxr(v15 - 1, p_shared_owners));
  if (!v15)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20B06FC50(&a11);
  _Unwind_Resume(a1);
}

void sub_20B0707DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06FC50((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0707F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20AEC147C((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20B070804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20B06FC50((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B070818(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 v16;
  __int16 v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;

  v4 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  v24 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v23 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v23 = 0;
    v8 = *(_QWORD *)(a2 + 32);
    v9 = *(_QWORD *)(a2 + 92);
    v10 = *(_DWORD *)(a2 + 108);
  }
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v9;
  *(_DWORD *)(a1 + 24) = 2 * v10;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 38;
  if (v4)
  {
    if (v3)
    {
      v12 = (unint64_t *)&v3->__shared_owners_;
      do
        v13 = __ldxr(v12);
      while (__stxr(v13 + 1, v12));
      do
        v14 = __ldaxr(v12);
      while (__stlxr(v14 - 1, v12));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v15 & 0xFFFFFFu) <= 0x10000)
      v16 = 0;
    else
      v16 = v15;
    v17 = v15 & 0xFF00;
    if ((v15 & 0xFF0000) == 0)
      v17 = 0;
    v3 = v23;
    *(_WORD *)(a1 + 44) = v17 & 0xFF00 | v16;
    if (!v23)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a1 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v18 = (unint64_t *)&v3->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v20 = v24;
    if (!v24)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v20 = v24;
  if (!v24)
    return;
LABEL_29:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
  }
}

void sub_20B0709DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  uint64_t v11;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;

  v13 = *(std::__shared_weak_count **)(v11 + 8);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a11);
  _Unwind_Resume(a1);
}

void sub_20B070A30(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *v5;
  std::__shared_weak_count_vtbl *v6;
  char *v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19[2];
  uint64_t v20;
  void *__dst[2];
  uint64_t v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  void *__p[2];
  __int128 v31;
  uint64_t v32;
  unsigned __int8 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v41 = a2;
  if (a1)
  {
    switch(a3)
    {
      case 0:
        v42 = 4 * a2;
        v43 = a1;
        sub_20AF6C1F8(&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 3) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 1:
        v42 = 4 * a2;
        v43 = a1;
        sub_20AF6E11C((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 3) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 2:
        v42 = 4 * a2;
        v43 = a1;
        sub_20AF6E1E4((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 3) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 3:
        v42 = 4 * a2;
        v43 = a1;
        sub_20AF6E298((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 3) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 5:
        v42 = 4 * a2;
        v43 = a1;
        sub_20AF6E34C(&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 3) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 6:
        v42 = 4 * a2;
        v43 = a1;
        sub_20AF6E3FC((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 3) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 7:
        v42 = 4 * a2;
        v43 = a1;
        sub_20AF6E4B0((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 3) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 8:
        v42 = 4 * a2;
        v43 = a1;
        sub_20AF6E564((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 3) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 11:
        v42 = 4 * a2;
        v43 = a1;
        sub_20AF6E618((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 3) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 12:
        v42 = 4 * a2;
        v43 = a1;
        sub_20AF6E6CC((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 3) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      default:
        sub_20B521E58(a3);
    }
    v19[0] = v6;
    v19[1] = v5;
    v10 = (std::__shared_weak_count *)operator new(0x28uLL);
    v11 = v10;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B2D8;
    v10[1].__vftable = v6;
    v10[1].__shared_owners_ = (uint64_t)v5;
    v18 = v10;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_QWORD *)a4 = v10 + 1;
    *(_QWORD *)(a4 + 8) = v10;
    *(_BYTE *)(a4 + 120) = 1;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v18)
    {
      v16 = (unint64_t *)&v18->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else if (a2)
  {
    sub_20B0713D8((uint64_t)v19, &v41);
    if (SHIBYTE(v20) < 0)
    {
      sub_20AEC60F4(__dst, v19[0], (unint64_t)v19[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      v22 = v20;
    }
    v23 = 1;
    LOBYTE(v24) = 0;
    v28 = 0;
    v29 = 1;
    sub_20AECCC3C(0xAu, (__int128 *)__dst, (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v40)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v8 = v33;
      if (v33)
      {
        *(_OWORD *)(a4 + 16) = v31;
        *(_QWORD *)(a4 + 32) = v32;
        v32 = 0;
        v31 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v39)
      {
        v9 = v36;
        *(_QWORD *)(a4 + 64) = v35;
        *(_OWORD *)(a4 + 48) = v34;
        v34 = 0uLL;
        *(_QWORD *)(a4 + 72) = v9;
        *(_OWORD *)(a4 + 80) = v37;
        *(_QWORD *)(a4 + 96) = v38;
        v35 = 0;
        v37 = 0uLL;
        v38 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v8 && SHIBYTE(v32) < 0)
        operator delete((void *)v31);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    if (v29)
    {
      if (v28)
      {
        if (v27 < 0)
          operator delete(v26);
        if (v25 < 0)
          operator delete(v24);
      }
      if (v23 && SHIBYTE(v22) < 0)
        operator delete(__dst[0]);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
  }
  else
  {
    v7 = (char *)operator new(0x28uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_24C40B2D8;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v31 = 0;
    sub_20B4359F0((uint64_t)__p, v19);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)v19;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_QWORD *)a4 = v7 + 24;
    *(_QWORD *)(a4 + 8) = v7;
    *(_BYTE *)(a4 + 120) = 1;
  }
}

void sub_20B0711D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20AEC147C((uint64_t)&a11);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B071210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      sub_20AEC147C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0713D8(uint64_t a1, unint64_t *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_20AF9CDA4(v4, "data pointer is null but num_lines is ");
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_20AECFAB8();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C40B3C0[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_20AECFAB8();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C40B3D8[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C40B3A8[v5])(v7, v4);
  return result;
}

void sub_20B0714D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0714F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B0714E4);
}

void sub_20B071518(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *v5;
  std::__shared_weak_count_vtbl *v6;
  char *v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19[2];
  uint64_t v20;
  void *__dst[2];
  uint64_t v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  void *__p[2];
  __int128 v31;
  uint64_t v32;
  unsigned __int8 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v41 = a2;
  if (a1)
  {
    switch(a3)
    {
      case 0:
        v42 = 6 * a2;
        v43 = a1;
        sub_20AF6C1F8(&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 1:
        v42 = 6 * a2;
        v43 = a1;
        sub_20AF6E11C((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 2:
        v42 = 6 * a2;
        v43 = a1;
        sub_20AF6E1E4((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 3:
        v42 = 6 * a2;
        v43 = a1;
        sub_20AF6E298((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 5:
        v42 = 6 * a2;
        v43 = a1;
        sub_20AF6E34C(&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 6:
        v42 = 6 * a2;
        v43 = a1;
        sub_20AF6E3FC((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 7:
        v42 = 6 * a2;
        v43 = a1;
        sub_20AF6E4B0((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 8:
        v42 = 6 * a2;
        v43 = a1;
        sub_20AF6E564((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 11:
        v42 = 6 * a2;
        v43 = a1;
        sub_20AF6E618((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 12:
        v42 = 6 * a2;
        v43 = a1;
        sub_20AF6E6CC((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7), 1) >= 0x2AAAAAAAAAAAAAABuLL
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      default:
        sub_20B521E58(a3);
    }
    v19[0] = v6;
    v19[1] = v5;
    v10 = (std::__shared_weak_count *)operator new(0x28uLL);
    v11 = v10;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B328;
    v10[1].__vftable = v6;
    v10[1].__shared_owners_ = (uint64_t)v5;
    v18 = v10;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_QWORD *)a4 = v10 + 1;
    *(_QWORD *)(a4 + 8) = v10;
    *(_BYTE *)(a4 + 120) = 1;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v18)
    {
      v16 = (unint64_t *)&v18->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else if (a2)
  {
    sub_20B0713D8((uint64_t)v19, &v41);
    if (SHIBYTE(v20) < 0)
    {
      sub_20AEC60F4(__dst, v19[0], (unint64_t)v19[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      v22 = v20;
    }
    v23 = 1;
    LOBYTE(v24) = 0;
    v28 = 0;
    v29 = 1;
    sub_20AECCC3C(0xAu, (__int128 *)__dst, (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v40)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v8 = v33;
      if (v33)
      {
        *(_OWORD *)(a4 + 16) = v31;
        *(_QWORD *)(a4 + 32) = v32;
        v32 = 0;
        v31 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v39)
      {
        v9 = v36;
        *(_QWORD *)(a4 + 64) = v35;
        *(_OWORD *)(a4 + 48) = v34;
        v34 = 0uLL;
        *(_QWORD *)(a4 + 72) = v9;
        *(_OWORD *)(a4 + 80) = v37;
        *(_QWORD *)(a4 + 96) = v38;
        v35 = 0;
        v37 = 0uLL;
        v38 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v8 && SHIBYTE(v32) < 0)
        operator delete((void *)v31);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    if (v29)
    {
      if (v28)
      {
        if (v27 < 0)
          operator delete(v26);
        if (v25 < 0)
          operator delete(v24);
      }
      if (v23 && SHIBYTE(v22) < 0)
        operator delete(__dst[0]);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
  }
  else
  {
    v7 = (char *)operator new(0x28uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_24C40B328;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v31 = 0;
    sub_20B435F30((uint64_t)__p, v19);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)v19;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_QWORD *)a4 = v7 + 24;
    *(_QWORD *)(a4 + 8) = v7;
    *(_BYTE *)(a4 + 120) = 1;
  }
}

void sub_20B071DF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20AEC147C((uint64_t)&a11);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B071E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      sub_20AEC147C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B072000(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 **v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *p_shared_owners;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  __int128 v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  __int128 v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  __int128 v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141[33];
  void (*v142)(int);
  unsigned __int8 **v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v142 = 0;
  v143 = 0;
  v144 = 0;
  sub_20B4359F0((uint64_t)&v142, &v140);
  v139 = v140;
  if (v142)
  {
    v143 = (unsigned __int8 **)v142;
    operator delete(v142);
  }
  v6 = *(unsigned __int8 ***)a1;
  switch(***(_BYTE ***)a1)
  {
    case 0:
      sub_20B43D624(*(unsigned __int8 ***)a1, 0);
      v8 = *((_QWORD *)*v6 + 5);
      v7 = *((_QWORD *)*v6 + 6);
      if (v7)
        v9 = 1;
      else
        v9 = v8 == 0;
      if (!v9
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v7)
        v10 = 0;
      else
        v10 = v8 >= 4;
      if (v10)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v11 = v8 & 0xFFFFFFFFFFFFFFFCLL;
        goto LABEL_203;
      }
      if (v8 < 4)
      {
        v11 = 0;
LABEL_204:
        v7 = 0;
        goto LABEL_205;
      }
      v11 = v8 & 0xFFFFFFFFFFFFFFFCLL;
      if (!v7)
      {
LABEL_203:
        if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))goto LABEL_204;
LABEL_346:
        abort();
      }
LABEL_205:
      v88 = *(_QWORD *)(a1 + 8);
      v143 = *(unsigned __int8 ***)a1;
      v144 = v88;
      if (v88)
      {
        v89 = (unint64_t *)(v88 + 8);
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v142 = sub_20B0794B8;
      sub_20B43CBE4(&v140, 0, (void (**)(uint64_t))&v142, v11, v7);
      if (v142)
        v142(0);
      v91 = v140;
      v140 = 0uLL;
      if ((*(_BYTE *)(v91 + 56) & 3) != 0)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v92 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v93 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
      }
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
      v139 = v91;
      if (v61)
      {
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(p_shared_owners);
        while (__stlxr(v63 - 1, p_shared_owners));
        goto LABEL_318;
      }
LABEL_320:
      sub_20AF70E14((uint64_t)&v139, a2, (uint64_t)v141);
      sub_20AF4BAD4(a3, 0, v141);
      *(_BYTE *)(a3 + 528) = 1;
      sub_20AED5474((uint64_t)v141);
      v136 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
      if (*((_QWORD *)&v139 + 1))
      {
        v137 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      return;
    case 1:
      sub_20B43D624(*(unsigned __int8 ***)a1, 1);
      v27 = *((_QWORD *)*v6 + 5);
      v26 = *((_QWORD *)*v6 + 6);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 2;
      if (v28
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v26)
        v29 = 0;
      else
        v29 = v27 >= 8;
      if (v29)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v30 = (v27 >> 1) & 0x7FFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v27 < 8)
        {
          v30 = 0;
LABEL_184:
          v26 = 0;
LABEL_185:
          v80 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v80;
          if (v80)
          {
            v81 = (unint64_t *)(v80 + 8);
            do
              v82 = __ldxr(v81);
            while (__stxr(v82 + 1, v81));
          }
          v142 = sub_20B0794B8;
          sub_20B43CE28(&v140, 1, (void (**)(uint64_t))&v142, v30, v26);
          if (v142)
            v142(0);
          v83 = v140;
          v140 = 0uLL;
          if ((*(_BYTE *)(v83 + 56) & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v84 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v85 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v83;
          if (!v61)
            goto LABEL_320;
          v87 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v87);
          while (__stlxr(v63 - 1, v87));
          goto LABEL_318;
        }
        v30 = (v27 >> 1) & 0x7FFFFFFFFFFFFFFCLL;
        if (v26)
          goto LABEL_185;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_184;
    case 2:
      sub_20B43D624(*(unsigned __int8 ***)a1, 2);
      v37 = *((_QWORD *)*v6 + 5);
      v36 = *((_QWORD *)*v6 + 6);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v36)
        v39 = 0;
      else
        v39 = v37 >= 0x10;
      if (v39)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v40 = (v37 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v37 < 0x10)
        {
          v40 = 0;
LABEL_282:
          v36 = 0;
LABEL_283:
          v120 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v120;
          if (v120)
          {
            v121 = (unint64_t *)(v120 + 8);
            do
              v122 = __ldxr(v121);
            while (__stxr(v122 + 1, v121));
          }
          v142 = sub_20B0794B8;
          sub_20B43D070(&v140, 2, (void (**)(uint64_t))&v142, v40, v36);
          if (v142)
            v142(0);
          v123 = v140;
          v140 = 0uLL;
          if ((*(_BYTE *)(v123 + 56) & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v124 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v125 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v123;
          if (!v61)
            goto LABEL_320;
          v127 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v127);
          while (__stlxr(v63 - 1, v127));
          goto LABEL_318;
        }
        v40 = (v37 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
        if (v36)
          goto LABEL_283;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_282;
    case 3:
      sub_20B43D624(*(unsigned __int8 ***)a1, 3);
      v46 = *((_QWORD *)*v6 + 5);
      v45 = *((_QWORD *)*v6 + 6);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 8;
      if (v47
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v45 || v46 < 0x20)
      {
        if (v46 < 0x20)
        {
          v48 = 0;
LABEL_262:
          v45 = 0;
LABEL_263:
          v112 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v112;
          if (v112)
          {
            v113 = (unint64_t *)(v112 + 8);
            do
              v114 = __ldxr(v113);
            while (__stxr(v114 + 1, v113));
          }
          v142 = sub_20B0794B8;
          sub_20B43D2B8(&v140, 3, (void (**)(uint64_t))&v142, v48, v45);
          if (v142)
            v142(0);
          v115 = v140;
          v140 = 0uLL;
          if ((*(_BYTE *)(v115 + 56) & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v116 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v117 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v115;
          if (!v61)
            goto LABEL_320;
          v119 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v119);
          while (__stlxr(v63 - 1, v119));
          goto LABEL_318;
        }
        v48 = (v46 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
        if (v45)
          goto LABEL_263;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v48 = (v46 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_262;
    case 5:
      sub_20B43D624(*(unsigned __int8 ***)a1, 5);
      v22 = *((_QWORD *)*v6 + 5);
      v21 = *((_QWORD *)*v6 + 6);
      if (v21)
        v23 = 1;
      else
        v23 = v22 == 0;
      if (!v23
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v21)
        v24 = 0;
      else
        v24 = v22 >= 4;
      if (v24)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v25 = v22 & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v22 < 4)
        {
          v25 = 0;
LABEL_164:
          v21 = 0;
LABEL_165:
          v72 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v72;
          if (v72)
          {
            v73 = (unint64_t *)(v72 + 8);
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
          v142 = sub_20B0794B8;
          sub_20B43CAC4(&v140, 5, (void (**)(uint64_t))&v142, v25, v21);
          if (v142)
            v142(0);
          v75 = v140;
          v140 = 0uLL;
          if ((*(_BYTE *)(v75 + 56) & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v76 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v77 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v75;
          if (!v61)
            goto LABEL_320;
          v79 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v79);
          while (__stlxr(v63 - 1, v79));
          goto LABEL_318;
        }
        v25 = v22 & 0xFFFFFFFFFFFFFFFCLL;
        if (v21)
          goto LABEL_165;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_164;
    case 6:
      sub_20B43D624(*(unsigned __int8 ***)a1, 6);
      v32 = *((_QWORD *)*v6 + 5);
      v31 = *((_QWORD *)*v6 + 6);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (v33
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v31)
        v34 = 0;
      else
        v34 = v32 >= 8;
      if (v34)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v35 = (v32 >> 1) & 0x7FFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v32 < 8)
        {
          v35 = 0;
LABEL_224:
          v31 = 0;
LABEL_225:
          v96 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v96;
          if (v96)
          {
            v97 = (unint64_t *)(v96 + 8);
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
          }
          v142 = sub_20B0794B8;
          sub_20B43CD04(&v140, 6, (void (**)(uint64_t))&v142, v35, v31);
          if (v142)
            v142(0);
          v99 = v140;
          v140 = 0uLL;
          if ((*(_BYTE *)(v99 + 56) & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v100 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v101 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v99;
          if (!v61)
            goto LABEL_320;
          v103 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v103);
          while (__stlxr(v63 - 1, v103));
          goto LABEL_318;
        }
        v35 = (v32 >> 1) & 0x7FFFFFFFFFFFFFFCLL;
        if (v31)
          goto LABEL_225;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_224;
    case 7:
      sub_20B43D624(*(unsigned __int8 ***)a1, 7);
      v50 = *((_QWORD *)*v6 + 5);
      v49 = *((_QWORD *)*v6 + 6);
      if (v49)
        v51 = 0;
      else
        v51 = v50 >= 4;
      if (v51
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v49)
        v52 = 0;
      else
        v52 = v50 >= 0x10;
      if (v52)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v53 = (v50 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v50 < 0x10)
        {
          v53 = 0;
LABEL_302:
          v49 = 0;
LABEL_303:
          v128 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v128;
          if (v128)
          {
            v129 = (unint64_t *)(v128 + 8);
            do
              v130 = __ldxr(v129);
            while (__stxr(v130 + 1, v129));
          }
          v142 = sub_20B0794B8;
          sub_20B43CF4C(&v140, 7, (void (**)(uint64_t))&v142, v53, v49);
          if (v142)
            v142(0);
          v131 = v140;
          v140 = 0uLL;
          if ((*(_BYTE *)(v131 + 56) & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v132 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v133 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v131;
          if (!v61)
            goto LABEL_320;
          v135 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v135);
          while (__stlxr(v63 - 1, v135));
          goto LABEL_318;
        }
        v53 = (v50 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
        if (v49)
          goto LABEL_303;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_302;
    case 8:
      sub_20B43D624(*(unsigned __int8 ***)a1, 8);
      v42 = *((_QWORD *)*v6 + 5);
      v41 = *((_QWORD *)*v6 + 6);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (v43
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v41 || v42 < 0x20)
      {
        if (v42 < 0x20)
        {
          v44 = 0;
LABEL_243:
          v41 = 0;
LABEL_244:
          v104 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v104;
          if (v104)
          {
            v105 = (unint64_t *)(v104 + 8);
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
          }
          v142 = sub_20B0794B8;
          sub_20B43D194(&v140, 8, (void (**)(uint64_t))&v142, v44, v41);
          if (v142)
            v142(0);
          v107 = v140;
          v140 = 0uLL;
          if ((*(_BYTE *)(v107 + 56) & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v108 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v109 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v107;
          if (!v61)
            goto LABEL_320;
          v111 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v111);
          while (__stlxr(v63 - 1, v111));
          goto LABEL_318;
        }
        v44 = (v42 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
        if (v41)
          goto LABEL_244;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v44 = (v42 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_243;
    case 0xB:
      sub_20B43D624(*(unsigned __int8 ***)a1, 11);
      v17 = *((_QWORD *)*v6 + 5);
      v16 = *((_QWORD *)*v6 + 6);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (v18
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v16)
        v19 = 0;
      else
        v19 = v17 >= 0x10;
      if (v19)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v20 = (v17 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v17 < 0x10)
        {
          v20 = 0;
LABEL_144:
          v16 = 0;
LABEL_145:
          v64 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v64;
          if (v64)
          {
            v65 = (unint64_t *)(v64 + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          v142 = sub_20B0794B8;
          sub_20B43D3DC(&v140, 11, (void (**)(uint64_t))&v142, v20, v16);
          if (v142)
            v142(0);
          v67 = v140;
          v140 = 0uLL;
          if ((*(_BYTE *)(v67 + 56) & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v68 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v69 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v67;
          if (!v61)
            goto LABEL_320;
          v71 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v71);
          while (__stlxr(v63 - 1, v71));
          goto LABEL_318;
        }
        v20 = (v17 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
        if (v16)
          goto LABEL_145;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_144;
    case 0xC:
      sub_20B43D624(*(unsigned __int8 ***)a1, 12);
      v13 = *((_QWORD *)*v6 + 5);
      v12 = *((_QWORD *)*v6 + 6);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 8;
      if (v14
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v12 || v13 < 0x20)
      {
        if (v13 < 0x20)
        {
          v15 = 0;
LABEL_124:
          v12 = 0;
LABEL_125:
          v54 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v54;
          if (v54)
          {
            v55 = (unint64_t *)(v54 + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          v142 = sub_20B0794B8;
          sub_20B43D500(&v140, 12, (void (**)(uint64_t))&v142, v15, v12);
          if (v142)
            v142(0);
          v57 = v140;
          v140 = 0uLL;
          if ((*(_BYTE *)(v57 + 56) & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v58 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v59 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v57;
          if (!v61)
            goto LABEL_320;
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
LABEL_318:
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
          goto LABEL_320;
        }
        v15 = (v13 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
        if (v12)
          goto LABEL_125;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v15 = (v13 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_124;
    default:
      sub_20B521E58(***(_BYTE ***)a1);
  }
}

void sub_20B073568(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B073778(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 **v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  BOOL v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  BOOL v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  BOOL v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  BOOL v38;
  BOOL v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  __int128 v57;
  std::__shared_weak_count *v58;
  unint64_t *v59;
  unint64_t v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  unint64_t *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  __int128 v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t *v81;
  unint64_t v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t *v89;
  unint64_t v90;
  __int128 v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t *p_shared_owners;
  uint64_t v96;
  unint64_t *v97;
  unint64_t v98;
  __int128 v99;
  std::__shared_weak_count *v100;
  unint64_t *v101;
  unint64_t v102;
  unint64_t *v103;
  uint64_t v104;
  unint64_t *v105;
  unint64_t v106;
  __int128 v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  unint64_t *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  __int128 v115;
  std::__shared_weak_count *v116;
  unint64_t *v117;
  unint64_t v118;
  unint64_t *v119;
  uint64_t v120;
  unint64_t *v121;
  unint64_t v122;
  __int128 v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  __int128 v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  unint64_t *v135;
  std::__shared_weak_count *v136;
  unint64_t *v137;
  unint64_t v138;
  __int128 v139;
  __int128 v140;
  __int128 v141[33];
  void (*v142)(int);
  unsigned __int8 **v143;
  uint64_t v144;
  uint64_t v145;

  v145 = *MEMORY[0x24BDAC8D0];
  v142 = 0;
  v143 = 0;
  v144 = 0;
  sub_20B435F30((uint64_t)&v142, &v140);
  v139 = v140;
  if (v142)
  {
    v143 = (unsigned __int8 **)v142;
    operator delete(v142);
  }
  v6 = *(unsigned __int8 ***)a1;
  switch(***(_BYTE ***)a1)
  {
    case 0:
      sub_20B43D624(*(unsigned __int8 ***)a1, 0);
      v8 = *((_QWORD *)*v6 + 5);
      v7 = *((_QWORD *)*v6 + 6);
      if (v7)
        v9 = 1;
      else
        v9 = v8 == 0;
      if (!v9
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v7)
        v10 = 0;
      else
        v10 = v8 >= 6;
      if (v10)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v11 = 6 * (v8 / 6);
        goto LABEL_203;
      }
      if (v8 < 6)
      {
        v11 = 0;
LABEL_204:
        v7 = 0;
        goto LABEL_205;
      }
      v11 = 6 * (v8 / 6);
      if (!v7)
      {
LABEL_203:
        if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))goto LABEL_204;
LABEL_346:
        abort();
      }
LABEL_205:
      v88 = *(_QWORD *)(a1 + 8);
      v143 = *(unsigned __int8 ***)a1;
      v144 = v88;
      if (v88)
      {
        v89 = (unint64_t *)(v88 + 8);
        do
          v90 = __ldxr(v89);
        while (__stxr(v90 + 1, v89));
      }
      v142 = sub_20B079788;
      sub_20B43CBE4(&v140, 0, (void (**)(uint64_t))&v142, v11, v7);
      if (v142)
        v142(0);
      v91 = v140;
      v140 = 0uLL;
      if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v91 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v92 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
        if (*((_QWORD *)&v140 + 1))
        {
          v93 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
          do
            v94 = __ldaxr(v93);
          while (__stlxr(v94 - 1, v93));
          if (!v94)
          {
            ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
            std::__shared_weak_count::__release_weak(v92);
          }
        }
      }
      v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
      v139 = v91;
      if (v61)
      {
        p_shared_owners = (unint64_t *)&v61->__shared_owners_;
        do
          v63 = __ldaxr(p_shared_owners);
        while (__stlxr(v63 - 1, p_shared_owners));
        goto LABEL_318;
      }
LABEL_320:
      sub_20AF73454((uint64_t)&v139, a2, (uint64_t)v141);
      sub_20AF4BAD4(a3, 0, v141);
      *(_BYTE *)(a3 + 528) = 1;
      sub_20AED5474((uint64_t)v141);
      v136 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
      if (*((_QWORD *)&v139 + 1))
      {
        v137 = (unint64_t *)(*((_QWORD *)&v139 + 1) + 8);
        do
          v138 = __ldaxr(v137);
        while (__stlxr(v138 - 1, v137));
        if (!v138)
        {
          ((void (*)(std::__shared_weak_count *))v136->__on_zero_shared)(v136);
          std::__shared_weak_count::__release_weak(v136);
        }
      }
      return;
    case 1:
      sub_20B43D624(*(unsigned __int8 ***)a1, 1);
      v27 = *((_QWORD *)*v6 + 5);
      v26 = *((_QWORD *)*v6 + 6);
      if (v26)
        v28 = 0;
      else
        v28 = v27 >= 2;
      if (v28
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v26)
        v29 = 0;
      else
        v29 = v27 >= 0xC;
      if (v29)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v30 = 6 * (v27 / 0xC);
      }
      else
      {
        if (v27 < 0xC)
        {
          v30 = 0;
LABEL_184:
          v26 = 0;
LABEL_185:
          v80 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v80;
          if (v80)
          {
            v81 = (unint64_t *)(v80 + 8);
            do
              v82 = __ldxr(v81);
            while (__stxr(v82 + 1, v81));
          }
          v142 = sub_20B079788;
          sub_20B43CE28(&v140, 1, (void (**)(uint64_t))&v142, v30, v26);
          if (v142)
            v142(0);
          v83 = v140;
          v140 = 0uLL;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v83 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v84 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v85 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v86 = __ldaxr(v85);
              while (__stlxr(v86 - 1, v85));
              if (!v86)
              {
                ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
                std::__shared_weak_count::__release_weak(v84);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v83;
          if (!v61)
            goto LABEL_320;
          v87 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v87);
          while (__stlxr(v63 - 1, v87));
          goto LABEL_318;
        }
        v30 = 6 * (v27 / 0xC);
        if (v26)
          goto LABEL_185;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_184;
    case 2:
      sub_20B43D624(*(unsigned __int8 ***)a1, 2);
      v37 = *((_QWORD *)*v6 + 5);
      v36 = *((_QWORD *)*v6 + 6);
      if (v36)
        v38 = 0;
      else
        v38 = v37 >= 4;
      if (v38
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v36)
        v39 = 0;
      else
        v39 = v37 >= 0x18;
      if (v39)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v40 = 6 * (v37 / 0x18);
      }
      else
      {
        if (v37 < 0x18)
        {
          v40 = 0;
LABEL_282:
          v36 = 0;
LABEL_283:
          v120 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v120;
          if (v120)
          {
            v121 = (unint64_t *)(v120 + 8);
            do
              v122 = __ldxr(v121);
            while (__stxr(v122 + 1, v121));
          }
          v142 = sub_20B079788;
          sub_20B43D070(&v140, 2, (void (**)(uint64_t))&v142, v40, v36);
          if (v142)
            v142(0);
          v123 = v140;
          v140 = 0uLL;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v123 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v124 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v125 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v126 = __ldaxr(v125);
              while (__stlxr(v126 - 1, v125));
              if (!v126)
              {
                ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
                std::__shared_weak_count::__release_weak(v124);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v123;
          if (!v61)
            goto LABEL_320;
          v127 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v127);
          while (__stlxr(v63 - 1, v127));
          goto LABEL_318;
        }
        v40 = 6 * (v37 / 0x18);
        if (v36)
          goto LABEL_283;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_282;
    case 3:
      sub_20B43D624(*(unsigned __int8 ***)a1, 3);
      v46 = *((_QWORD *)*v6 + 5);
      v45 = *((_QWORD *)*v6 + 6);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 8;
      if (v47
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v45 || v46 < 0x30)
      {
        if (v46 < 0x30)
        {
          v48 = 0;
LABEL_262:
          v45 = 0;
LABEL_263:
          v112 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v112;
          if (v112)
          {
            v113 = (unint64_t *)(v112 + 8);
            do
              v114 = __ldxr(v113);
            while (__stxr(v114 + 1, v113));
          }
          v142 = sub_20B079788;
          sub_20B43D2B8(&v140, 3, (void (**)(uint64_t))&v142, v48, v45);
          if (v142)
            v142(0);
          v115 = v140;
          v140 = 0uLL;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v115 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v116 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v117 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v118 = __ldaxr(v117);
              while (__stlxr(v118 - 1, v117));
              if (!v118)
              {
                ((void (*)(std::__shared_weak_count *))v116->__on_zero_shared)(v116);
                std::__shared_weak_count::__release_weak(v116);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v115;
          if (!v61)
            goto LABEL_320;
          v119 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v119);
          while (__stlxr(v63 - 1, v119));
          goto LABEL_318;
        }
        v48 = 6 * (v46 / 0x30);
        if (v45)
          goto LABEL_263;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v48 = 6 * (v46 / 0x30);
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_262;
    case 5:
      sub_20B43D624(*(unsigned __int8 ***)a1, 5);
      v22 = *((_QWORD *)*v6 + 5);
      v21 = *((_QWORD *)*v6 + 6);
      if (v21)
        v23 = 1;
      else
        v23 = v22 == 0;
      if (!v23
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v21)
        v24 = 0;
      else
        v24 = v22 >= 6;
      if (v24)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v25 = 6 * (v22 / 6);
      }
      else
      {
        if (v22 < 6)
        {
          v25 = 0;
LABEL_164:
          v21 = 0;
LABEL_165:
          v72 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v72;
          if (v72)
          {
            v73 = (unint64_t *)(v72 + 8);
            do
              v74 = __ldxr(v73);
            while (__stxr(v74 + 1, v73));
          }
          v142 = sub_20B079788;
          sub_20B43CAC4(&v140, 5, (void (**)(uint64_t))&v142, v25, v21);
          if (v142)
            v142(0);
          v75 = v140;
          v140 = 0uLL;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v75 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v76 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v77 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v75;
          if (!v61)
            goto LABEL_320;
          v79 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v79);
          while (__stlxr(v63 - 1, v79));
          goto LABEL_318;
        }
        v25 = 6 * (v22 / 6);
        if (v21)
          goto LABEL_165;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_164;
    case 6:
      sub_20B43D624(*(unsigned __int8 ***)a1, 6);
      v32 = *((_QWORD *)*v6 + 5);
      v31 = *((_QWORD *)*v6 + 6);
      if (v31)
        v33 = 0;
      else
        v33 = v32 >= 2;
      if (v33
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v31)
        v34 = 0;
      else
        v34 = v32 >= 0xC;
      if (v34)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v35 = 6 * (v32 / 0xC);
      }
      else
      {
        if (v32 < 0xC)
        {
          v35 = 0;
LABEL_224:
          v31 = 0;
LABEL_225:
          v96 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v96;
          if (v96)
          {
            v97 = (unint64_t *)(v96 + 8);
            do
              v98 = __ldxr(v97);
            while (__stxr(v98 + 1, v97));
          }
          v142 = sub_20B079788;
          sub_20B43CD04(&v140, 6, (void (**)(uint64_t))&v142, v35, v31);
          if (v142)
            v142(0);
          v99 = v140;
          v140 = 0uLL;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v99 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v100 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v101 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v102 = __ldaxr(v101);
              while (__stlxr(v102 - 1, v101));
              if (!v102)
              {
                ((void (*)(std::__shared_weak_count *))v100->__on_zero_shared)(v100);
                std::__shared_weak_count::__release_weak(v100);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v99;
          if (!v61)
            goto LABEL_320;
          v103 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v103);
          while (__stlxr(v63 - 1, v103));
          goto LABEL_318;
        }
        v35 = 6 * (v32 / 0xC);
        if (v31)
          goto LABEL_225;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_224;
    case 7:
      sub_20B43D624(*(unsigned __int8 ***)a1, 7);
      v50 = *((_QWORD *)*v6 + 5);
      v49 = *((_QWORD *)*v6 + 6);
      if (v49)
        v51 = 0;
      else
        v51 = v50 >= 4;
      if (v51
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v49)
        v52 = 0;
      else
        v52 = v50 >= 0x18;
      if (v52)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v53 = 6 * (v50 / 0x18);
      }
      else
      {
        if (v50 < 0x18)
        {
          v53 = 0;
LABEL_302:
          v49 = 0;
LABEL_303:
          v128 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v128;
          if (v128)
          {
            v129 = (unint64_t *)(v128 + 8);
            do
              v130 = __ldxr(v129);
            while (__stxr(v130 + 1, v129));
          }
          v142 = sub_20B079788;
          sub_20B43CF4C(&v140, 7, (void (**)(uint64_t))&v142, v53, v49);
          if (v142)
            v142(0);
          v131 = v140;
          v140 = 0uLL;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v131 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v132 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v133 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v131;
          if (!v61)
            goto LABEL_320;
          v135 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v135);
          while (__stlxr(v63 - 1, v135));
          goto LABEL_318;
        }
        v53 = 6 * (v50 / 0x18);
        if (v49)
          goto LABEL_303;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_302;
    case 8:
      sub_20B43D624(*(unsigned __int8 ***)a1, 8);
      v42 = *((_QWORD *)*v6 + 5);
      v41 = *((_QWORD *)*v6 + 6);
      if (v41)
        v43 = 0;
      else
        v43 = v42 >= 8;
      if (v43
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v41 || v42 < 0x30)
      {
        if (v42 < 0x30)
        {
          v44 = 0;
LABEL_243:
          v41 = 0;
LABEL_244:
          v104 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v104;
          if (v104)
          {
            v105 = (unint64_t *)(v104 + 8);
            do
              v106 = __ldxr(v105);
            while (__stxr(v106 + 1, v105));
          }
          v142 = sub_20B079788;
          sub_20B43D194(&v140, 8, (void (**)(uint64_t))&v142, v44, v41);
          if (v142)
            v142(0);
          v107 = v140;
          v140 = 0uLL;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v107 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v108 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v109 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v107;
          if (!v61)
            goto LABEL_320;
          v111 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v111);
          while (__stlxr(v63 - 1, v111));
          goto LABEL_318;
        }
        v44 = 6 * (v42 / 0x30);
        if (v41)
          goto LABEL_244;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v44 = 6 * (v42 / 0x30);
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_243;
    case 0xB:
      sub_20B43D624(*(unsigned __int8 ***)a1, 11);
      v17 = *((_QWORD *)*v6 + 5);
      v16 = *((_QWORD *)*v6 + 6);
      if (v16)
        v18 = 0;
      else
        v18 = v17 >= 4;
      if (v18
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v16)
        v19 = 0;
      else
        v19 = v17 >= 0x18;
      if (v19)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v20 = 6 * (v17 / 0x18);
      }
      else
      {
        if (v17 < 0x18)
        {
          v20 = 0;
LABEL_144:
          v16 = 0;
LABEL_145:
          v64 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v64;
          if (v64)
          {
            v65 = (unint64_t *)(v64 + 8);
            do
              v66 = __ldxr(v65);
            while (__stxr(v66 + 1, v65));
          }
          v142 = sub_20B079788;
          sub_20B43D3DC(&v140, 11, (void (**)(uint64_t))&v142, v20, v16);
          if (v142)
            v142(0);
          v67 = v140;
          v140 = 0uLL;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v67 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v68 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v69 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v70 = __ldaxr(v69);
              while (__stlxr(v70 - 1, v69));
              if (!v70)
              {
                ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
                std::__shared_weak_count::__release_weak(v68);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v67;
          if (!v61)
            goto LABEL_320;
          v71 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v71);
          while (__stlxr(v63 - 1, v71));
          goto LABEL_318;
        }
        v20 = 6 * (v17 / 0x18);
        if (v16)
          goto LABEL_145;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_144;
    case 0xC:
      sub_20B43D624(*(unsigned __int8 ***)a1, 12);
      v13 = *((_QWORD *)*v6 + 5);
      v12 = *((_QWORD *)*v6 + 6);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 8;
      if (v14
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      if (v12 || v13 < 0x30)
      {
        if (v13 < 0x30)
        {
          v15 = 0;
LABEL_124:
          v12 = 0;
LABEL_125:
          v54 = *(_QWORD *)(a1 + 8);
          v143 = *(unsigned __int8 ***)a1;
          v144 = v54;
          if (v54)
          {
            v55 = (unint64_t *)(v54 + 8);
            do
              v56 = __ldxr(v55);
            while (__stxr(v56 + 1, v55));
          }
          v142 = sub_20B079788;
          sub_20B43D500(&v140, 12, (void (**)(uint64_t))&v142, v15, v12);
          if (v142)
            v142(0);
          v57 = v140;
          v140 = 0uLL;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v57 + 56), 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v58 = (std::__shared_weak_count *)*((_QWORD *)&v140 + 1);
            if (*((_QWORD *)&v140 + 1))
            {
              v59 = (unint64_t *)(*((_QWORD *)&v140 + 1) + 8);
              do
                v60 = __ldaxr(v59);
              while (__stlxr(v60 - 1, v59));
              if (!v60)
              {
                ((void (*)(std::__shared_weak_count *))v58->__on_zero_shared)(v58);
                std::__shared_weak_count::__release_weak(v58);
              }
            }
          }
          v61 = (std::__shared_weak_count *)*((_QWORD *)&v139 + 1);
          v139 = v57;
          if (!v61)
            goto LABEL_320;
          v62 = (unint64_t *)&v61->__shared_owners_;
          do
            v63 = __ldaxr(v62);
          while (__stlxr(v63 - 1, v62));
LABEL_318:
          if (!v63)
          {
            ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
            std::__shared_weak_count::__release_weak(v61);
          }
          goto LABEL_320;
        }
        v15 = 6 * (v13 / 0x30);
        if (v12)
          goto LABEL_125;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_346;
        }
        v15 = 6 * (v13 / 0x30);
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_346;
      }
      goto LABEL_124;
    default:
      sub_20B521E58(***(_BYTE ***)a1);
  }
}

void sub_20B074F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B075158(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unsigned __int8 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  unint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  BOOL v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  BOOL v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  _BYTE *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  _BYTE *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  _BYTE *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  _BYTE *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  _BYTE *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  _BYTE *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  unint64_t *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  _BYTE *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t *v136;
  unint64_t *v137;
  unint64_t v138;
  void *v139;
  _BYTE *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  _BYTE *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  unint64_t *v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  _BYTE *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  _QWORD *v162;
  unint64_t *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unsigned int v172;
  void *v173[2];
  uint64_t v174;
  void *__p[2];
  uint64_t v176;
  char v177;
  void *v178[2];
  uint64_t v179;
  int v180;
  void *v181;
  void **v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  __int128 __dst;
  void **v186;
  int v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  unsigned __int8 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  char v197;
  char v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a1 + 424);
  v5 = *(std::__shared_weak_count **)(a1 + 432);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
  {
    v8 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F6658, 0) != 0;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_11;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_11:
    if (v8)
      goto LABEL_12;
LABEL_22:
    v11 = 0;
    v183 = 0;
    v184 = 0;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v8)
    goto LABEL_22;
LABEL_12:
  v12 = *(_QWORD *)(a1 + 424);
  v11 = *(std::__shared_weak_count **)(a1 + 432);
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v183 = v12;
    v184 = v11;
    if (v12)
    {
      v171 = v11;
      do
        v15 = __ldxr(v13);
      while (__stxr(v15 + 1, v13));
      v173[0] = 0;
      v173[1] = 0;
      *(_QWORD *)&__dst = v12;
      *((_QWORD *)&__dst + 1) = v11;
      do
        v16 = __ldxr(v13);
      while (__stxr(v16 + 1, v13));
      goto LABEL_61;
    }
LABEL_23:
    v17 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v17 & 1) != 0)
      goto LABEL_24;
LABEL_74:
    if (__cxa_guard_acquire(&qword_25463CF48))
    {
      *(_OWORD *)v178 = xmmword_20B5B0AE0;
      sub_20B1DFBA8((uint64_t *)v178);
      __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF48);
    }
LABEL_24:
    if (byte_25463CF1F < 0)
    {
      sub_20AEC60F4(&__dst, (void *)xmmword_25463CF08, *((unint64_t *)&xmmword_25463CF08 + 1));
    }
    else
    {
      __dst = xmmword_25463CF08;
      v186 = (void **)unk_25463CF18;
    }
    v187 = dword_25463CF20;
    sub_20AF4BC0C(&v181, (uint64_t)&__dst, 1uLL);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC60F4(v178, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)v178 = *(_OWORD *)a1;
      v179 = *(_QWORD *)(a1 + 16);
    }
    v180 = *(_DWORD *)(a1 + 24);
    v172 = 2;
    sub_20B076FE4((uint64_t)v173, &v172);
    *(_OWORD *)__p = *(_OWORD *)v173;
    v176 = v174;
    v173[1] = 0;
    v174 = 0;
    v173[0] = 0;
    v177 = 1;
    sub_20B099ED4((uint64_t *)&v181, (uint64_t)v178, (uint64_t)__p, (uint64_t)&v188);
    *(_OWORD *)a2 = v188;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v198)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v18 = v191;
      if (v191)
      {
        *(_OWORD *)(a2 + 16) = v189;
        *(_QWORD *)(a2 + 32) = v190;
        v190 = 0;
        v189 = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v197)
      {
        v19 = v194;
        *(_QWORD *)(a2 + 64) = v193;
        *(_OWORD *)(a2 + 48) = v192;
        v192 = 0uLL;
        *(_QWORD *)(a2 + 72) = v19;
        *(_OWORD *)(a2 + 80) = v195;
        *(_QWORD *)(a2 + 96) = v196;
        v193 = 0;
        v195 = 0uLL;
        v196 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v18 && SHIBYTE(v190) < 0)
        operator delete((void *)v189);
      if (!v177)
      {
LABEL_43:
        if (SHIBYTE(v174) < 0)
        {
          operator delete(v173[0]);
          if ((SHIBYTE(v179) & 0x80000000) == 0)
          {
LABEL_45:
            v20 = (void **)v181;
            if (v181)
              goto LABEL_46;
            goto LABEL_56;
          }
        }
        else if ((SHIBYTE(v179) & 0x80000000) == 0)
        {
          goto LABEL_45;
        }
        operator delete(v178[0]);
        v20 = (void **)v181;
        if (v181)
        {
LABEL_46:
          v21 = v182;
          if (v182 == v20)
          {
            v182 = v20;
            operator delete(v20);
            if ((SHIBYTE(v186) & 0x80000000) == 0)
              goto LABEL_57;
            goto LABEL_48;
          }
          do
          {
            if (*((char *)v21 - 9) < 0)
              operator delete(*(v21 - 4));
            v21 -= 4;
          }
          while (v21 != v20);
          v182 = v20;
          operator delete(v181);
          if (SHIBYTE(v186) < 0)
LABEL_48:
            operator delete((void *)__dst);
LABEL_57:
          if (!v11)
            return;
          goto LABEL_392;
        }
LABEL_56:
        if (SHIBYTE(v186) < 0)
          goto LABEL_48;
        goto LABEL_57;
      }
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
      if (!v177)
        goto LABEL_43;
    }
    if (SHIBYTE(v176) < 0)
      operator delete(__p[0]);
    goto LABEL_43;
  }
  v183 = *(_QWORD *)(a1 + 424);
  v184 = 0;
  if (!v12)
  {
    v11 = 0;
    v29 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v29 & 1) != 0)
      goto LABEL_24;
    goto LABEL_74;
  }
  v171 = 0;
  v173[0] = 0;
  v173[1] = 0;
  __dst = v12;
LABEL_61:
  v23 = v12 + 8;
  v22 = *(unsigned __int8 **)(v12 + 8);
  v186 = v173;
  switch(*v22)
  {
    case 0u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 0);
      v25 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v24 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v24)
        v26 = 1;
      else
        v26 = v25 == 0;
      if (!v26
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v24)
        v27 = 0;
      else
        v27 = v25 >= 4;
      if (v27)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v28 = v25 & 0xFFFFFFFFFFFFFFFCLL;
        goto LABEL_264;
      }
      if (v25 < 4)
      {
        v28 = 0;
LABEL_265:
        v24 = 0;
        goto LABEL_266;
      }
      v28 = v25 & 0xFFFFFFFFFFFFFFFCLL;
      if (!v24)
      {
LABEL_264:
        if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))goto LABEL_265;
LABEL_417:
        abort();
      }
LABEL_266:
      *((_QWORD *)&v188 + 1) = v12;
      *(_QWORD *)&v189 = v11;
      if (v11)
      {
        v110 = (unint64_t *)&v11->__shared_owners_;
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      *(_QWORD *)&v188 = sub_20B079350;
      sub_20B43CBE4(v178, 0, (void (**)(uint64_t))&v188, v28, v24);
      if ((_QWORD)v188)
        ((void (*)(int))v188)(0);
      v113 = v178[0];
      v112 = v178[1];
      v178[0] = 0;
      v178[1] = 0;
      if ((v113[56] & 3) != 0)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v114 = (std::__shared_weak_count *)v178[1];
        if (v178[1])
        {
          v115 = (unint64_t *)((char *)v178[1] + 8);
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
      }
      v117 = operator new(0x28uLL);
      v117[1] = 0;
      v117[2] = 0;
      *v117 = &off_24C40B2D8;
      v117[3] = v113;
      v117[4] = v112;
      v80 = (std::__shared_weak_count *)v173[1];
      v173[0] = v117 + 3;
      v173[1] = v117;
      if (v80)
      {
        v118 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v118);
        while (__stlxr(v82 - 1, v118));
        goto LABEL_379;
      }
LABEL_381:
      v164 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1))
      {
        v165 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
      *(_OWORD *)a2 = *(_OWORD *)v173;
      v173[0] = 0;
      v173[1] = 0;
      *(_BYTE *)(a2 + 120) = 1;
      if (v171)
      {
        v167 = (unint64_t *)&v171->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      v11 = v184;
      if (v184)
      {
LABEL_392:
        v169 = (unint64_t *)&v11->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      return;
    case 1u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 1);
      v45 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v44 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v44)
        v46 = 0;
      else
        v46 = v45 >= 2;
      if (v46
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v44)
        v47 = 0;
      else
        v47 = v45 >= 8;
      if (v47)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v48 = (v45 >> 1) & 0x7FFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v45 < 8)
        {
          v48 = 0;
LABEL_245:
          v44 = 0;
LABEL_246:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v101 = (unint64_t *)&v11->__shared_owners_;
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          *(_QWORD *)&v188 = sub_20B079350;
          sub_20B43CE28(v178, 1, (void (**)(uint64_t))&v188, v48, v44);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v104 = v178[0];
          v103 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if ((v104[56] & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v105 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v106 = (unint64_t *)((char *)v178[1] + 8);
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
          }
          v108 = operator new(0x28uLL);
          v108[1] = 0;
          v108[2] = 0;
          *v108 = &off_24C40B2D8;
          v108[3] = v104;
          v108[4] = v103;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v108 + 3;
          v173[1] = v108;
          if (!v80)
            goto LABEL_381;
          v109 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v109);
          while (__stlxr(v82 - 1, v109));
          goto LABEL_379;
        }
        v48 = (v45 >> 1) & 0x7FFFFFFFFFFFFFFCLL;
        if (v44)
          goto LABEL_246;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_245;
    case 2u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 2);
      v55 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v54 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v54)
        v56 = 0;
      else
        v56 = v55 >= 4;
      if (v56
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v54)
        v57 = 0;
      else
        v57 = v55 >= 0x10;
      if (v57)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v58 = (v55 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v55 < 0x10)
        {
          v58 = 0;
LABEL_343:
          v54 = 0;
LABEL_344:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v146 = (unint64_t *)&v11->__shared_owners_;
            do
              v147 = __ldxr(v146);
            while (__stxr(v147 + 1, v146));
          }
          *(_QWORD *)&v188 = sub_20B079350;
          sub_20B43D070(v178, 2, (void (**)(uint64_t))&v188, v58, v54);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v149 = v178[0];
          v148 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if ((v149[56] & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v150 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v151 = (unint64_t *)((char *)v178[1] + 8);
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
          }
          v153 = operator new(0x28uLL);
          v153[1] = 0;
          v153[2] = 0;
          *v153 = &off_24C40B2D8;
          v153[3] = v149;
          v153[4] = v148;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v153 + 3;
          v173[1] = v153;
          if (!v80)
            goto LABEL_381;
          v154 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v154);
          while (__stlxr(v82 - 1, v154));
          goto LABEL_379;
        }
        v58 = (v55 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
        if (v54)
          goto LABEL_344;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_343;
    case 3u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 3);
      v64 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v63 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v63)
        v65 = 0;
      else
        v65 = v64 >= 8;
      if (v65
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v63 || v64 < 0x20)
      {
        if (v64 < 0x20)
        {
          v66 = 0;
LABEL_323:
          v63 = 0;
LABEL_324:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v137 = (unint64_t *)&v11->__shared_owners_;
            do
              v138 = __ldxr(v137);
            while (__stxr(v138 + 1, v137));
          }
          *(_QWORD *)&v188 = sub_20B079350;
          sub_20B43D2B8(v178, 3, (void (**)(uint64_t))&v188, v66, v63);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v140 = v178[0];
          v139 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if ((v140[56] & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v141 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v142 = (unint64_t *)((char *)v178[1] + 8);
              do
                v143 = __ldaxr(v142);
              while (__stlxr(v143 - 1, v142));
              if (!v143)
              {
                ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                std::__shared_weak_count::__release_weak(v141);
              }
            }
          }
          v144 = operator new(0x28uLL);
          v144[1] = 0;
          v144[2] = 0;
          *v144 = &off_24C40B2D8;
          v144[3] = v140;
          v144[4] = v139;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v144 + 3;
          v173[1] = v144;
          if (!v80)
            goto LABEL_381;
          v145 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v145);
          while (__stlxr(v82 - 1, v145));
          goto LABEL_379;
        }
        v66 = (v64 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
        if (v63)
          goto LABEL_324;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v66 = (v64 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_323;
    case 5u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 5);
      v40 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v39 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v39)
        v41 = 1;
      else
        v41 = v40 == 0;
      if (!v41
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v39)
        v42 = 0;
      else
        v42 = v40 >= 4;
      if (v42)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v43 = v40 & 0xFFFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v40 < 4)
        {
          v43 = 0;
LABEL_225:
          v39 = 0;
LABEL_226:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v92 = (unint64_t *)&v11->__shared_owners_;
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          *(_QWORD *)&v188 = sub_20B079350;
          sub_20B43CAC4(v178, 5, (void (**)(uint64_t))&v188, v43, v39);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v95 = v178[0];
          v94 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if ((v95[56] & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v96 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v97 = (unint64_t *)((char *)v178[1] + 8);
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
          }
          v99 = operator new(0x28uLL);
          v99[1] = 0;
          v99[2] = 0;
          *v99 = &off_24C40B2D8;
          v99[3] = v95;
          v99[4] = v94;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v99 + 3;
          v173[1] = v99;
          if (!v80)
            goto LABEL_381;
          v100 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v100);
          while (__stlxr(v82 - 1, v100));
          goto LABEL_379;
        }
        v43 = v40 & 0xFFFFFFFFFFFFFFFCLL;
        if (v39)
          goto LABEL_226;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_225;
    case 6u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 6);
      v50 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v49 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v49)
        v51 = 0;
      else
        v51 = v50 >= 2;
      if (v51
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v49)
        v52 = 0;
      else
        v52 = v50 >= 8;
      if (v52)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v53 = (v50 >> 1) & 0x7FFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v50 < 8)
        {
          v53 = 0;
LABEL_285:
          v49 = 0;
LABEL_286:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v119 = (unint64_t *)&v11->__shared_owners_;
            do
              v120 = __ldxr(v119);
            while (__stxr(v120 + 1, v119));
          }
          *(_QWORD *)&v188 = sub_20B079350;
          sub_20B43CD04(v178, 6, (void (**)(uint64_t))&v188, v53, v49);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v122 = v178[0];
          v121 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if ((v122[56] & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v123 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v124 = (unint64_t *)((char *)v178[1] + 8);
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 - 1, v124));
              if (!v125)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
          }
          v126 = operator new(0x28uLL);
          v126[1] = 0;
          v126[2] = 0;
          *v126 = &off_24C40B2D8;
          v126[3] = v122;
          v126[4] = v121;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v126 + 3;
          v173[1] = v126;
          if (!v80)
            goto LABEL_381;
          v127 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v127);
          while (__stlxr(v82 - 1, v127));
          goto LABEL_379;
        }
        v53 = (v50 >> 1) & 0x7FFFFFFFFFFFFFFCLL;
        if (v49)
          goto LABEL_286;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_285;
    case 7u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 7);
      v68 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v67 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v67)
        v69 = 0;
      else
        v69 = v68 >= 4;
      if (v69
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v67)
        v70 = 0;
      else
        v70 = v68 >= 0x10;
      if (v70)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v71 = (v68 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v68 < 0x10)
        {
          v71 = 0;
LABEL_363:
          v67 = 0;
LABEL_364:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v155 = (unint64_t *)&v11->__shared_owners_;
            do
              v156 = __ldxr(v155);
            while (__stxr(v156 + 1, v155));
          }
          *(_QWORD *)&v188 = sub_20B079350;
          sub_20B43CF4C(v178, 7, (void (**)(uint64_t))&v188, v71, v67);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v158 = v178[0];
          v157 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if ((v158[56] & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v159 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v160 = (unint64_t *)((char *)v178[1] + 8);
              do
                v161 = __ldaxr(v160);
              while (__stlxr(v161 - 1, v160));
              if (!v161)
              {
                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                std::__shared_weak_count::__release_weak(v159);
              }
            }
          }
          v162 = operator new(0x28uLL);
          v162[1] = 0;
          v162[2] = 0;
          *v162 = &off_24C40B2D8;
          v162[3] = v158;
          v162[4] = v157;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v162 + 3;
          v173[1] = v162;
          if (!v80)
            goto LABEL_381;
          v163 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v163);
          while (__stlxr(v82 - 1, v163));
          goto LABEL_379;
        }
        v71 = (v68 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
        if (v67)
          goto LABEL_364;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_363;
    case 8u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 8);
      v60 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v59 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v59)
        v61 = 0;
      else
        v61 = v60 >= 8;
      if (v61
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v59 || v60 < 0x20)
      {
        if (v60 < 0x20)
        {
          v62 = 0;
LABEL_304:
          v59 = 0;
LABEL_305:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v128 = (unint64_t *)&v11->__shared_owners_;
            do
              v129 = __ldxr(v128);
            while (__stxr(v129 + 1, v128));
          }
          *(_QWORD *)&v188 = sub_20B079350;
          sub_20B43D194(v178, 8, (void (**)(uint64_t))&v188, v62, v59);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v131 = v178[0];
          v130 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if ((v131[56] & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v132 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v133 = (unint64_t *)((char *)v178[1] + 8);
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
          }
          v135 = operator new(0x28uLL);
          v135[1] = 0;
          v135[2] = 0;
          *v135 = &off_24C40B2D8;
          v135[3] = v131;
          v135[4] = v130;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v135 + 3;
          v173[1] = v135;
          if (!v80)
            goto LABEL_381;
          v136 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v136);
          while (__stlxr(v82 - 1, v136));
          goto LABEL_379;
        }
        v62 = (v60 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
        if (v59)
          goto LABEL_305;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v62 = (v60 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_304;
    case 0xBu:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 11);
      v35 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v34 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v34)
        v36 = 0;
      else
        v36 = v35 >= 4;
      if (v36
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v34)
        v37 = 0;
      else
        v37 = v35 >= 0x10;
      if (v37)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v38 = (v35 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
      }
      else
      {
        if (v35 < 0x10)
        {
          v38 = 0;
LABEL_205:
          v34 = 0;
LABEL_206:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v83 = (unint64_t *)&v11->__shared_owners_;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          *(_QWORD *)&v188 = sub_20B079350;
          sub_20B43D3DC(v178, 11, (void (**)(uint64_t))&v188, v38, v34);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v86 = v178[0];
          v85 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if ((v86[56] & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v87 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v88 = (unint64_t *)((char *)v178[1] + 8);
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
          }
          v90 = operator new(0x28uLL);
          v90[1] = 0;
          v90[2] = 0;
          *v90 = &off_24C40B2D8;
          v90[3] = v86;
          v90[4] = v85;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v90 + 3;
          v173[1] = v90;
          if (!v80)
            goto LABEL_381;
          v91 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v91);
          while (__stlxr(v82 - 1, v91));
          goto LABEL_379;
        }
        v38 = (v35 >> 2) & 0x3FFFFFFFFFFFFFFCLL;
        if (v34)
          goto LABEL_206;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_205;
    case 0xCu:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 12);
      v31 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v30 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 8;
      if (v32
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v30 || v31 < 0x20)
      {
        if (v31 < 0x20)
        {
          v33 = 0;
LABEL_185:
          v30 = 0;
LABEL_186:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v72 = (unint64_t *)&v11->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          *(_QWORD *)&v188 = sub_20B079350;
          sub_20B43D500(v178, 12, (void (**)(uint64_t))&v188, v33, v30);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v75 = v178[0];
          v74 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if ((v75[56] & 3) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v76 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v77 = (unint64_t *)((char *)v178[1] + 8);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
          }
          v79 = operator new(0x28uLL);
          v79[1] = 0;
          v79[2] = 0;
          *v79 = &off_24C40B2D8;
          v79[3] = v75;
          v79[4] = v74;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v79 + 3;
          v173[1] = v79;
          if (!v80)
            goto LABEL_381;
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
LABEL_379:
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
          goto LABEL_381;
        }
        v33 = (v31 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
        if (v30)
          goto LABEL_186;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v33 = (v31 >> 3) & 0x1FFFFFFFFFFFFFFCLL;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_185;
    default:
      sub_20B521E58(*v22);
  }
}

void sub_20B076C04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_20B076FE4(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_20AFAE5CC(v4, "cannot return data as VZLines");
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_20AECFAB8();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C40B3C0[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_20AECFAB8();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C40B3D8[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C40B3A8[v5])(v7, v4);
  return result;
}

void sub_20B0770E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B077100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B0770F0);
}

void sub_20B077124(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unsigned __int8 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  BOOL v41;
  BOOL v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  BOOL v46;
  BOOL v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  BOOL v56;
  BOOL v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  BOOL v65;
  uint64_t v66;
  uint64_t v67;
  unint64_t v68;
  BOOL v69;
  BOOL v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  void *v74;
  _QWORD *v75;
  std::__shared_weak_count *v76;
  unint64_t *v77;
  unint64_t v78;
  _QWORD *v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  unint64_t *v83;
  unint64_t v84;
  void *v85;
  _QWORD *v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  _QWORD *v90;
  unint64_t *v91;
  unint64_t *v92;
  unint64_t v93;
  void *v94;
  _QWORD *v95;
  std::__shared_weak_count *v96;
  unint64_t *v97;
  unint64_t v98;
  _QWORD *v99;
  unint64_t *v100;
  unint64_t *v101;
  unint64_t v102;
  void *v103;
  _QWORD *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  _QWORD *v108;
  unint64_t *v109;
  unint64_t *v110;
  unint64_t v111;
  void *v112;
  _QWORD *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  _QWORD *v117;
  unint64_t *v118;
  unint64_t *v119;
  unint64_t v120;
  void *v121;
  _QWORD *v122;
  std::__shared_weak_count *v123;
  unint64_t *v124;
  unint64_t v125;
  _QWORD *v126;
  unint64_t *v127;
  unint64_t *v128;
  unint64_t v129;
  void *v130;
  _QWORD *v131;
  std::__shared_weak_count *v132;
  unint64_t *v133;
  unint64_t v134;
  _QWORD *v135;
  unint64_t *v136;
  unint64_t *v137;
  unint64_t v138;
  void *v139;
  _QWORD *v140;
  std::__shared_weak_count *v141;
  unint64_t *v142;
  unint64_t v143;
  _QWORD *v144;
  unint64_t *v145;
  unint64_t *v146;
  unint64_t v147;
  void *v148;
  _QWORD *v149;
  std::__shared_weak_count *v150;
  unint64_t *v151;
  unint64_t v152;
  _QWORD *v153;
  unint64_t *v154;
  unint64_t *v155;
  unint64_t v156;
  void *v157;
  _QWORD *v158;
  std::__shared_weak_count *v159;
  unint64_t *v160;
  unint64_t v161;
  _QWORD *v162;
  unint64_t *v163;
  std::__shared_weak_count *v164;
  unint64_t *v165;
  unint64_t v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  std::__shared_weak_count *v171;
  unsigned int v172;
  void *v173[2];
  uint64_t v174;
  void *__p[2];
  uint64_t v176;
  char v177;
  void *v178[2];
  uint64_t v179;
  int v180;
  void *v181;
  void **v182;
  unint64_t v183;
  std::__shared_weak_count *v184;
  __int128 __dst;
  void **v186;
  int v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  unsigned __int8 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  __int128 v195;
  uint64_t v196;
  char v197;
  char v198;
  uint64_t v199;

  v199 = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a1 + 424);
  v5 = *(std::__shared_weak_count **)(a1 + 432);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
  {
    v8 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F6728, 0) != 0;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_11;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_11:
    if (v8)
      goto LABEL_12;
LABEL_22:
    v11 = 0;
    v183 = 0;
    v184 = 0;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v8)
    goto LABEL_22;
LABEL_12:
  v12 = *(_QWORD *)(a1 + 424);
  v11 = *(std::__shared_weak_count **)(a1 + 432);
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v183 = v12;
    v184 = v11;
    if (v12)
    {
      v171 = v11;
      do
        v15 = __ldxr(v13);
      while (__stxr(v15 + 1, v13));
      v173[0] = 0;
      v173[1] = 0;
      *(_QWORD *)&__dst = v12;
      *((_QWORD *)&__dst + 1) = v11;
      do
        v16 = __ldxr(v13);
      while (__stxr(v16 + 1, v13));
      goto LABEL_61;
    }
LABEL_23:
    v17 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v17 & 1) != 0)
      goto LABEL_24;
LABEL_74:
    if (__cxa_guard_acquire(&qword_25463CF48))
    {
      *(_OWORD *)v178 = xmmword_20B5B0AE0;
      sub_20B1DFBA8((uint64_t *)v178);
      __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF48);
    }
LABEL_24:
    if (byte_25463CF3F < 0)
    {
      sub_20AEC60F4(&__dst, (void *)xmmword_25463CF28, *((unint64_t *)&xmmword_25463CF28 + 1));
    }
    else
    {
      __dst = xmmword_25463CF28;
      v186 = (void **)unk_25463CF38;
    }
    v187 = dword_25463CF40;
    sub_20AF4BC0C(&v181, (uint64_t)&__dst, 1uLL);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC60F4(v178, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)v178 = *(_OWORD *)a1;
      v179 = *(_QWORD *)(a1 + 16);
    }
    v180 = *(_DWORD *)(a1 + 24);
    v172 = 3;
    sub_20B076FE4((uint64_t)v173, &v172);
    *(_OWORD *)__p = *(_OWORD *)v173;
    v176 = v174;
    v173[1] = 0;
    v174 = 0;
    v173[0] = 0;
    v177 = 1;
    sub_20B099ED4((uint64_t *)&v181, (uint64_t)v178, (uint64_t)__p, (uint64_t)&v188);
    *(_OWORD *)a2 = v188;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v198)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v18 = v191;
      if (v191)
      {
        *(_OWORD *)(a2 + 16) = v189;
        *(_QWORD *)(a2 + 32) = v190;
        v190 = 0;
        v189 = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v197)
      {
        v19 = v194;
        *(_QWORD *)(a2 + 64) = v193;
        *(_OWORD *)(a2 + 48) = v192;
        v192 = 0uLL;
        *(_QWORD *)(a2 + 72) = v19;
        *(_OWORD *)(a2 + 80) = v195;
        *(_QWORD *)(a2 + 96) = v196;
        v193 = 0;
        v195 = 0uLL;
        v196 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v18 && SHIBYTE(v190) < 0)
        operator delete((void *)v189);
      if (!v177)
      {
LABEL_43:
        if (SHIBYTE(v174) < 0)
        {
          operator delete(v173[0]);
          if ((SHIBYTE(v179) & 0x80000000) == 0)
          {
LABEL_45:
            v20 = (void **)v181;
            if (v181)
              goto LABEL_46;
            goto LABEL_56;
          }
        }
        else if ((SHIBYTE(v179) & 0x80000000) == 0)
        {
          goto LABEL_45;
        }
        operator delete(v178[0]);
        v20 = (void **)v181;
        if (v181)
        {
LABEL_46:
          v21 = v182;
          if (v182 == v20)
          {
            v182 = v20;
            operator delete(v20);
            if ((SHIBYTE(v186) & 0x80000000) == 0)
              goto LABEL_57;
            goto LABEL_48;
          }
          do
          {
            if (*((char *)v21 - 9) < 0)
              operator delete(*(v21 - 4));
            v21 -= 4;
          }
          while (v21 != v20);
          v182 = v20;
          operator delete(v181);
          if (SHIBYTE(v186) < 0)
LABEL_48:
            operator delete((void *)__dst);
LABEL_57:
          if (!v11)
            return;
          goto LABEL_392;
        }
LABEL_56:
        if (SHIBYTE(v186) < 0)
          goto LABEL_48;
        goto LABEL_57;
      }
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
      if (!v177)
        goto LABEL_43;
    }
    if (SHIBYTE(v176) < 0)
      operator delete(__p[0]);
    goto LABEL_43;
  }
  v183 = *(_QWORD *)(a1 + 424);
  v184 = 0;
  if (!v12)
  {
    v11 = 0;
    v29 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v29 & 1) != 0)
      goto LABEL_24;
    goto LABEL_74;
  }
  v171 = 0;
  v173[0] = 0;
  v173[1] = 0;
  __dst = v12;
LABEL_61:
  v23 = v12 + 8;
  v22 = *(unsigned __int8 **)(v12 + 8);
  v186 = v173;
  switch(*v22)
  {
    case 0u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 0);
      v25 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v24 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v24)
        v26 = 1;
      else
        v26 = v25 == 0;
      if (!v26
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v24)
        v27 = 0;
      else
        v27 = v25 >= 6;
      if (v27)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v28 = 6 * (v25 / 6);
        goto LABEL_264;
      }
      if (v25 < 6)
      {
        v28 = 0;
LABEL_265:
        v24 = 0;
        goto LABEL_266;
      }
      v28 = 6 * (v25 / 6);
      if (!v24)
      {
LABEL_264:
        if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))goto LABEL_265;
LABEL_417:
        abort();
      }
LABEL_266:
      *((_QWORD *)&v188 + 1) = v12;
      *(_QWORD *)&v189 = v11;
      if (v11)
      {
        v110 = (unint64_t *)&v11->__shared_owners_;
        do
          v111 = __ldxr(v110);
        while (__stxr(v111 + 1, v110));
      }
      *(_QWORD *)&v188 = sub_20B079620;
      sub_20B43CBE4(v178, 0, (void (**)(uint64_t))&v188, v28, v24);
      if ((_QWORD)v188)
        ((void (*)(int))v188)(0);
      v113 = v178[0];
      v112 = v178[1];
      v178[0] = 0;
      v178[1] = 0;
      if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v113[7], 1) >= 0x2AAAAAAAAAAAAAABuLL)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v114 = (std::__shared_weak_count *)v178[1];
        if (v178[1])
        {
          v115 = (unint64_t *)((char *)v178[1] + 8);
          do
            v116 = __ldaxr(v115);
          while (__stlxr(v116 - 1, v115));
          if (!v116)
          {
            ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
            std::__shared_weak_count::__release_weak(v114);
          }
        }
      }
      v117 = operator new(0x28uLL);
      v117[1] = 0;
      v117[2] = 0;
      *v117 = &off_24C40B328;
      v117[3] = v113;
      v117[4] = v112;
      v80 = (std::__shared_weak_count *)v173[1];
      v173[0] = v117 + 3;
      v173[1] = v117;
      if (v80)
      {
        v118 = (unint64_t *)&v80->__shared_owners_;
        do
          v82 = __ldaxr(v118);
        while (__stlxr(v82 - 1, v118));
        goto LABEL_379;
      }
LABEL_381:
      v164 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1))
      {
        v165 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
        do
          v166 = __ldaxr(v165);
        while (__stlxr(v166 - 1, v165));
        if (!v166)
        {
          ((void (*)(std::__shared_weak_count *))v164->__on_zero_shared)(v164);
          std::__shared_weak_count::__release_weak(v164);
        }
      }
      *(_OWORD *)a2 = *(_OWORD *)v173;
      v173[0] = 0;
      v173[1] = 0;
      *(_BYTE *)(a2 + 120) = 1;
      if (v171)
      {
        v167 = (unint64_t *)&v171->__shared_owners_;
        do
          v168 = __ldaxr(v167);
        while (__stlxr(v168 - 1, v167));
        if (!v168)
        {
          ((void (*)(std::__shared_weak_count *))v171->__on_zero_shared)(v171);
          std::__shared_weak_count::__release_weak(v171);
        }
      }
      v11 = v184;
      if (v184)
      {
LABEL_392:
        v169 = (unint64_t *)&v11->__shared_owners_;
        do
          v170 = __ldaxr(v169);
        while (__stlxr(v170 - 1, v169));
        if (!v170)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      return;
    case 1u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 1);
      v45 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v44 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v44)
        v46 = 0;
      else
        v46 = v45 >= 2;
      if (v46
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v44)
        v47 = 0;
      else
        v47 = v45 >= 0xC;
      if (v47)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v48 = 6 * (v45 / 0xC);
      }
      else
      {
        if (v45 < 0xC)
        {
          v48 = 0;
LABEL_245:
          v44 = 0;
LABEL_246:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v101 = (unint64_t *)&v11->__shared_owners_;
            do
              v102 = __ldxr(v101);
            while (__stxr(v102 + 1, v101));
          }
          *(_QWORD *)&v188 = sub_20B079620;
          sub_20B43CE28(v178, 1, (void (**)(uint64_t))&v188, v48, v44);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v104 = v178[0];
          v103 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v104[7], 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v105 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v106 = (unint64_t *)((char *)v178[1] + 8);
              do
                v107 = __ldaxr(v106);
              while (__stlxr(v107 - 1, v106));
              if (!v107)
              {
                ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                std::__shared_weak_count::__release_weak(v105);
              }
            }
          }
          v108 = operator new(0x28uLL);
          v108[1] = 0;
          v108[2] = 0;
          *v108 = &off_24C40B328;
          v108[3] = v104;
          v108[4] = v103;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v108 + 3;
          v173[1] = v108;
          if (!v80)
            goto LABEL_381;
          v109 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v109);
          while (__stlxr(v82 - 1, v109));
          goto LABEL_379;
        }
        v48 = 6 * (v45 / 0xC);
        if (v44)
          goto LABEL_246;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_245;
    case 2u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 2);
      v55 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v54 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v54)
        v56 = 0;
      else
        v56 = v55 >= 4;
      if (v56
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v54)
        v57 = 0;
      else
        v57 = v55 >= 0x18;
      if (v57)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v58 = 6 * (v55 / 0x18);
      }
      else
      {
        if (v55 < 0x18)
        {
          v58 = 0;
LABEL_343:
          v54 = 0;
LABEL_344:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v146 = (unint64_t *)&v11->__shared_owners_;
            do
              v147 = __ldxr(v146);
            while (__stxr(v147 + 1, v146));
          }
          *(_QWORD *)&v188 = sub_20B079620;
          sub_20B43D070(v178, 2, (void (**)(uint64_t))&v188, v58, v54);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v149 = v178[0];
          v148 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v149[7], 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v150 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v151 = (unint64_t *)((char *)v178[1] + 8);
              do
                v152 = __ldaxr(v151);
              while (__stlxr(v152 - 1, v151));
              if (!v152)
              {
                ((void (*)(std::__shared_weak_count *))v150->__on_zero_shared)(v150);
                std::__shared_weak_count::__release_weak(v150);
              }
            }
          }
          v153 = operator new(0x28uLL);
          v153[1] = 0;
          v153[2] = 0;
          *v153 = &off_24C40B328;
          v153[3] = v149;
          v153[4] = v148;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v153 + 3;
          v173[1] = v153;
          if (!v80)
            goto LABEL_381;
          v154 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v154);
          while (__stlxr(v82 - 1, v154));
          goto LABEL_379;
        }
        v58 = 6 * (v55 / 0x18);
        if (v54)
          goto LABEL_344;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_343;
    case 3u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 3);
      v64 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v63 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v63)
        v65 = 0;
      else
        v65 = v64 >= 8;
      if (v65
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v63 || v64 < 0x30)
      {
        if (v64 < 0x30)
        {
          v66 = 0;
LABEL_323:
          v63 = 0;
LABEL_324:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v137 = (unint64_t *)&v11->__shared_owners_;
            do
              v138 = __ldxr(v137);
            while (__stxr(v138 + 1, v137));
          }
          *(_QWORD *)&v188 = sub_20B079620;
          sub_20B43D2B8(v178, 3, (void (**)(uint64_t))&v188, v66, v63);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v140 = v178[0];
          v139 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v140[7], 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v141 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v142 = (unint64_t *)((char *)v178[1] + 8);
              do
                v143 = __ldaxr(v142);
              while (__stlxr(v143 - 1, v142));
              if (!v143)
              {
                ((void (*)(std::__shared_weak_count *))v141->__on_zero_shared)(v141);
                std::__shared_weak_count::__release_weak(v141);
              }
            }
          }
          v144 = operator new(0x28uLL);
          v144[1] = 0;
          v144[2] = 0;
          *v144 = &off_24C40B328;
          v144[3] = v140;
          v144[4] = v139;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v144 + 3;
          v173[1] = v144;
          if (!v80)
            goto LABEL_381;
          v145 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v145);
          while (__stlxr(v82 - 1, v145));
          goto LABEL_379;
        }
        v66 = 6 * (v64 / 0x30);
        if (v63)
          goto LABEL_324;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v66 = 6 * (v64 / 0x30);
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_323;
    case 5u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 5);
      v40 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v39 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v39)
        v41 = 1;
      else
        v41 = v40 == 0;
      if (!v41
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v39)
        v42 = 0;
      else
        v42 = v40 >= 6;
      if (v42)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v43 = 6 * (v40 / 6);
      }
      else
      {
        if (v40 < 6)
        {
          v43 = 0;
LABEL_225:
          v39 = 0;
LABEL_226:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v92 = (unint64_t *)&v11->__shared_owners_;
            do
              v93 = __ldxr(v92);
            while (__stxr(v93 + 1, v92));
          }
          *(_QWORD *)&v188 = sub_20B079620;
          sub_20B43CAC4(v178, 5, (void (**)(uint64_t))&v188, v43, v39);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v95 = v178[0];
          v94 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v95[7], 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v96 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v97 = (unint64_t *)((char *)v178[1] + 8);
              do
                v98 = __ldaxr(v97);
              while (__stlxr(v98 - 1, v97));
              if (!v98)
              {
                ((void (*)(std::__shared_weak_count *))v96->__on_zero_shared)(v96);
                std::__shared_weak_count::__release_weak(v96);
              }
            }
          }
          v99 = operator new(0x28uLL);
          v99[1] = 0;
          v99[2] = 0;
          *v99 = &off_24C40B328;
          v99[3] = v95;
          v99[4] = v94;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v99 + 3;
          v173[1] = v99;
          if (!v80)
            goto LABEL_381;
          v100 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v100);
          while (__stlxr(v82 - 1, v100));
          goto LABEL_379;
        }
        v43 = 6 * (v40 / 6);
        if (v39)
          goto LABEL_226;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_225;
    case 6u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 6);
      v50 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v49 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v49)
        v51 = 0;
      else
        v51 = v50 >= 2;
      if (v51
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v49)
        v52 = 0;
      else
        v52 = v50 >= 0xC;
      if (v52)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v53 = 6 * (v50 / 0xC);
      }
      else
      {
        if (v50 < 0xC)
        {
          v53 = 0;
LABEL_285:
          v49 = 0;
LABEL_286:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v119 = (unint64_t *)&v11->__shared_owners_;
            do
              v120 = __ldxr(v119);
            while (__stxr(v120 + 1, v119));
          }
          *(_QWORD *)&v188 = sub_20B079620;
          sub_20B43CD04(v178, 6, (void (**)(uint64_t))&v188, v53, v49);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v122 = v178[0];
          v121 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v122[7], 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v123 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v124 = (unint64_t *)((char *)v178[1] + 8);
              do
                v125 = __ldaxr(v124);
              while (__stlxr(v125 - 1, v124));
              if (!v125)
              {
                ((void (*)(std::__shared_weak_count *))v123->__on_zero_shared)(v123);
                std::__shared_weak_count::__release_weak(v123);
              }
            }
          }
          v126 = operator new(0x28uLL);
          v126[1] = 0;
          v126[2] = 0;
          *v126 = &off_24C40B328;
          v126[3] = v122;
          v126[4] = v121;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v126 + 3;
          v173[1] = v126;
          if (!v80)
            goto LABEL_381;
          v127 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v127);
          while (__stlxr(v82 - 1, v127));
          goto LABEL_379;
        }
        v53 = 6 * (v50 / 0xC);
        if (v49)
          goto LABEL_286;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_285;
    case 7u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 7);
      v68 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v67 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v67)
        v69 = 0;
      else
        v69 = v68 >= 4;
      if (v69
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v67)
        v70 = 0;
      else
        v70 = v68 >= 0x18;
      if (v70)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v71 = 6 * (v68 / 0x18);
      }
      else
      {
        if (v68 < 0x18)
        {
          v71 = 0;
LABEL_363:
          v67 = 0;
LABEL_364:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v155 = (unint64_t *)&v11->__shared_owners_;
            do
              v156 = __ldxr(v155);
            while (__stxr(v156 + 1, v155));
          }
          *(_QWORD *)&v188 = sub_20B079620;
          sub_20B43CF4C(v178, 7, (void (**)(uint64_t))&v188, v71, v67);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v158 = v178[0];
          v157 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v158[7], 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v159 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v160 = (unint64_t *)((char *)v178[1] + 8);
              do
                v161 = __ldaxr(v160);
              while (__stlxr(v161 - 1, v160));
              if (!v161)
              {
                ((void (*)(std::__shared_weak_count *))v159->__on_zero_shared)(v159);
                std::__shared_weak_count::__release_weak(v159);
              }
            }
          }
          v162 = operator new(0x28uLL);
          v162[1] = 0;
          v162[2] = 0;
          *v162 = &off_24C40B328;
          v162[3] = v158;
          v162[4] = v157;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v162 + 3;
          v173[1] = v162;
          if (!v80)
            goto LABEL_381;
          v163 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v163);
          while (__stlxr(v82 - 1, v163));
          goto LABEL_379;
        }
        v71 = 6 * (v68 / 0x18);
        if (v67)
          goto LABEL_364;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_363;
    case 8u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 8);
      v60 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v59 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v59)
        v61 = 0;
      else
        v61 = v60 >= 8;
      if (v61
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v59 || v60 < 0x30)
      {
        if (v60 < 0x30)
        {
          v62 = 0;
LABEL_304:
          v59 = 0;
LABEL_305:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v128 = (unint64_t *)&v11->__shared_owners_;
            do
              v129 = __ldxr(v128);
            while (__stxr(v129 + 1, v128));
          }
          *(_QWORD *)&v188 = sub_20B079620;
          sub_20B43D194(v178, 8, (void (**)(uint64_t))&v188, v62, v59);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v131 = v178[0];
          v130 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v131[7], 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v132 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v133 = (unint64_t *)((char *)v178[1] + 8);
              do
                v134 = __ldaxr(v133);
              while (__stlxr(v134 - 1, v133));
              if (!v134)
              {
                ((void (*)(std::__shared_weak_count *))v132->__on_zero_shared)(v132);
                std::__shared_weak_count::__release_weak(v132);
              }
            }
          }
          v135 = operator new(0x28uLL);
          v135[1] = 0;
          v135[2] = 0;
          *v135 = &off_24C40B328;
          v135[3] = v131;
          v135[4] = v130;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v135 + 3;
          v173[1] = v135;
          if (!v80)
            goto LABEL_381;
          v136 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v136);
          while (__stlxr(v82 - 1, v136));
          goto LABEL_379;
        }
        v62 = 6 * (v60 / 0x30);
        if (v59)
          goto LABEL_305;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v62 = 6 * (v60 / 0x30);
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_304;
    case 0xBu:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 11);
      v35 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v34 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v34)
        v36 = 0;
      else
        v36 = v35 >= 4;
      if (v36
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v34)
        v37 = 0;
      else
        v37 = v35 >= 0x18;
      if (v37)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v38 = 6 * (v35 / 0x18);
      }
      else
      {
        if (v35 < 0x18)
        {
          v38 = 0;
LABEL_205:
          v34 = 0;
LABEL_206:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v83 = (unint64_t *)&v11->__shared_owners_;
            do
              v84 = __ldxr(v83);
            while (__stxr(v84 + 1, v83));
          }
          *(_QWORD *)&v188 = sub_20B079620;
          sub_20B43D3DC(v178, 11, (void (**)(uint64_t))&v188, v38, v34);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v86 = v178[0];
          v85 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v86[7], 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v87 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v88 = (unint64_t *)((char *)v178[1] + 8);
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
          }
          v90 = operator new(0x28uLL);
          v90[1] = 0;
          v90[2] = 0;
          *v90 = &off_24C40B328;
          v90[3] = v86;
          v90[4] = v85;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v90 + 3;
          v173[1] = v90;
          if (!v80)
            goto LABEL_381;
          v91 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v91);
          while (__stlxr(v82 - 1, v91));
          goto LABEL_379;
        }
        v38 = 6 * (v35 / 0x18);
        if (v34)
          goto LABEL_206;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_205;
    case 0xCu:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 12);
      v31 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v30 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 8;
      if (v32
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      if (v30 || v31 < 0x30)
      {
        if (v31 < 0x30)
        {
          v33 = 0;
LABEL_185:
          v30 = 0;
LABEL_186:
          *((_QWORD *)&v188 + 1) = v12;
          *(_QWORD *)&v189 = v11;
          if (v11)
          {
            v72 = (unint64_t *)&v11->__shared_owners_;
            do
              v73 = __ldxr(v72);
            while (__stxr(v73 + 1, v72));
          }
          *(_QWORD *)&v188 = sub_20B079620;
          sub_20B43D500(v178, 12, (void (**)(uint64_t))&v188, v33, v30);
          if ((_QWORD)v188)
            ((void (*)(int))v188)(0);
          v75 = v178[0];
          v74 = v178[1];
          v178[0] = 0;
          v178[1] = 0;
          if (__ROR8__(0xAAAAAAAAAAAAAAABLL * v75[7], 1) >= 0x2AAAAAAAAAAAAAABuLL)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Lines.cpp", 43, (uint64_t)"this->numbers.Size() % (N * 2) == 0", 35, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v76 = (std::__shared_weak_count *)v178[1];
            if (v178[1])
            {
              v77 = (unint64_t *)((char *)v178[1] + 8);
              do
                v78 = __ldaxr(v77);
              while (__stlxr(v78 - 1, v77));
              if (!v78)
              {
                ((void (*)(std::__shared_weak_count *))v76->__on_zero_shared)(v76);
                std::__shared_weak_count::__release_weak(v76);
              }
            }
          }
          v79 = operator new(0x28uLL);
          v79[1] = 0;
          v79[2] = 0;
          *v79 = &off_24C40B328;
          v79[3] = v75;
          v79[4] = v74;
          v80 = (std::__shared_weak_count *)v173[1];
          v173[0] = v79 + 3;
          v173[1] = v79;
          if (!v80)
            goto LABEL_381;
          v81 = (unint64_t *)&v80->__shared_owners_;
          do
            v82 = __ldaxr(v81);
          while (__stlxr(v82 - 1, v81));
LABEL_379:
          if (!v82)
          {
            ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
            std::__shared_weak_count::__release_weak(v80);
          }
          goto LABEL_381;
        }
        v33 = 6 * (v31 / 0x30);
        if (v30)
          goto LABEL_186;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_417;
        }
        v33 = 6 * (v31 / 0x30);
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_417;
      }
      goto LABEL_185;
    default:
      sub_20B521E58(*v22);
  }
}

void sub_20B078E38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_20B079218(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B2D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B079228(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B2D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B079258(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20B0792B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B328;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B0792C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B328;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0792F4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20B079350(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B079384()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B0793D0(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20B079350;
  return result;
}

__n128 sub_20B07940C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20B079350;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20B079438(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con5LinesILj2EEENS3_7PackageELj12EvEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con5LinesILj2EEENS3_7PackageELj12EvEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con5LinesILj2EEENS3_7PackageELj12EvEEEE"))return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con5LinesILj2EEENS3_7PackageELj12EvEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5E2D94)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_20B0794B8(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B0794EC()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B079538(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20B0794B8;
  return result;
}

__n128 sub_20B079574(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20B0794B8;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20B0795A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrIKN4cv3d3kit3con5LinesILj2EEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3con5LinesILj2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrIKN4cv3d3kit3con5LinesILj2EEEEE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3con5LinesILj2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5E2DCC)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_20B079620(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B079654()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B0796A0(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20B079620;
  return result;
}

__n128 sub_20B0796DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20B079620;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20B079708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con5LinesILj3EEENS3_7PackageELj13EvEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con5LinesILj3EEENS3_7PackageELj13EvEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con5LinesILj3EEENS3_7PackageELj13EvEEEE"))return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con5LinesILj3EEENS3_7PackageELj13EvEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5E2E30)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_20B079788(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B0797BC()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B079808(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20B079788;
  return result;
}

__n128 sub_20B079844(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20B079788;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20B079870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrIKN4cv3d3kit3con5LinesILj3EEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3con5LinesILj3EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrIKN4cv3d3kit3con5LinesILj3EEEEE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3con5LinesILj3EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5E2E68)
  {
    return 0;
  }
  return v5 + 8;
}

uint64_t **sub_20B0798F0(uint64_t a1)
{
  unsigned __int8 *v2;
  int v3;
  int v4;
  int v5;
  unsigned int *v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int *v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int *v18;
  unsigned int *v19;
  uint64_t v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  int v26;
  int v27;
  int v28;
  unsigned int *v29;
  unsigned int *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int *v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  int v37;
  int v38;
  unsigned int *v39;
  uint64_t **v40;
  unsigned int *v41;
  unsigned int v42;
  unsigned int *v43;
  unsigned int v44;
  unsigned int v45;
  unsigned int *v46;
  unsigned int v47;
  unsigned int v48;
  void *__p[2];
  uint64_t v51;
  timespec __rqtp;
  int v53;
  char v54;
  char *v55;

  v2 = (unsigned __int8 *)(a1 + 32);
  do
    v3 = __ldaxr(v2);
  while (__stxr(1u, v2));
  if (v3)
  {
    v4 = 0;
    do
    {
      if (v4)
      {
        __rqtp = (timespec)xmmword_20B5B0ED0;
        nanosleep(&__rqtp, 0);
      }
      ++v4;
      do
        v5 = __ldaxr(v2);
      while (__stxr(1u, v2));
    }
    while (v5);
  }
  v7 = *(_QWORD *)(a1 + 16);
  v6 = *(unsigned int **)(a1 + 24);
  if (!v6)
  {
    atomic_store(0, v2);
    if (v7)
      goto LABEL_52;
    goto LABEL_23;
  }
  v8 = v6 + 2;
  do
    v9 = __ldxr(v8);
  while (__stxr(v9 + 1, v8));
  atomic_store(0, v2);
  do
  {
    v10 = __ldaxr(v8);
    v11 = v10 - 1;
  }
  while (__stlxr(v11, v8));
  if (!v11)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 16))(v6);
    v12 = v6 + 3;
    do
    {
      v13 = __ldaxr(v12);
      v14 = v13 - 1;
    }
    while (__stlxr(v14, v12));
    if (!v14)
      (*(void (**)(unsigned int *))(*(_QWORD *)v6 + 24))(v6);
  }
  if (!v7)
  {
LABEL_23:
    v15 = **(_QWORD **)a1;
    v53 = 0;
    sub_20B07A194((uint64_t)&v55, (uint64_t)&__rqtp, v15);
    if (v53 == -1)
      sub_20AECFAB8();
    v55 = &v54;
    ((void (*)(void **__return_ptr, char **, timespec *))off_24C40B420[v53])(__p, &v55, &__rqtp);
    if (v53 != -1)
      ((void (*)(char **, timespec *))off_24C40B408[v53])(&v55, &__rqtp);
    v16 = operator new();
    v17 = v16;
    *(_QWORD *)(v16 + 8) = 0x100000001;
    v18 = (unsigned int *)(v16 + 8);
    v19 = (unsigned int *)(v16 + 12);
    *(_QWORD *)v16 = off_24C40B448;
    *(_QWORD *)(v16 + 16) = 0;
    v20 = v16 + 32;
    *(_OWORD *)(v16 + 32) = *(_OWORD *)__p;
    *(_QWORD *)(v16 + 48) = v51;
    __p[0] = 0;
    __p[1] = 0;
    v51 = 0;
    *(_BYTE *)(v16 + 24) = 1;
    do
      v21 = __ldxr(v18);
    while (__stxr(v21 + 1, v18));
    do
    {
      v22 = __ldaxr(v18);
      v23 = v22 - 1;
    }
    while (__stlxr(v23, v18));
    if (!v23)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 16))(v16);
      do
      {
        v24 = __ldaxr(v19);
        v25 = v24 - 1;
      }
      while (__stlxr(v25, v19));
      if (!v25)
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 24))(v17);
    }
    do
      v26 = __ldaxr(v2);
    while (__stxr(1u, v2));
    if (v26)
    {
      v27 = 0;
      do
      {
        if (v27)
        {
          __rqtp = (timespec)xmmword_20B5B0ED0;
          nanosleep(&__rqtp, 0);
        }
        ++v27;
        do
          v28 = __ldaxr(v2);
        while (__stxr(1u, v2));
      }
      while (v28);
    }
    v29 = *(unsigned int **)(a1 + 24);
    *(_QWORD *)(a1 + 16) = v20;
    *(_QWORD *)(a1 + 24) = v17;
    atomic_store(0, (unsigned __int8 *)(a1 + 32));
    if (v29)
    {
      v30 = v29 + 2;
      do
      {
        v31 = __ldaxr(v30);
        v32 = v31 - 1;
      }
      while (__stlxr(v32, v30));
      if (!v32)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 16))(v29);
        v33 = v29 + 3;
        do
        {
          v34 = __ldaxr(v33);
          v35 = v34 - 1;
        }
        while (__stlxr(v35, v33));
        if (!v35)
          (*(void (**)(unsigned int *))(*(_QWORD *)v29 + 24))(v29);
      }
    }
    if (SHIBYTE(v51) < 0)
      operator delete(__p[0]);
    goto LABEL_52;
  }
  do
LABEL_52:
    v36 = __ldaxr(v2);
  while (__stxr(1u, v2));
  if (v36)
  {
    v37 = 0;
    do
    {
      if (v37)
      {
        __rqtp = (timespec)xmmword_20B5B0ED0;
        nanosleep(&__rqtp, 0);
      }
      ++v37;
      do
        v38 = __ldaxr(v2);
      while (__stxr(1u, v2));
    }
    while (v38);
  }
  v40 = *(uint64_t ***)(a1 + 16);
  v39 = *(unsigned int **)(a1 + 24);
  if (v39)
  {
    v41 = v39 + 2;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
  }
  atomic_store(0, v2);
  if (*((char *)v40 + 23) < 0)
  {
    v40 = (uint64_t **)*v40;
    if (!v39)
      return v40;
  }
  else if (!v39)
  {
    return v40;
  }
  v43 = v39 + 2;
  do
  {
    v44 = __ldaxr(v43);
    v45 = v44 - 1;
  }
  while (__stlxr(v45, v43));
  if (!v45)
  {
    (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 16))(v39);
    v46 = v39 + 3;
    do
    {
      v47 = __ldaxr(v46);
      v48 = v47 - 1;
    }
    while (__stlxr(v48, v46));
    if (!v48)
      (*(void (**)(unsigned int *))(*(_QWORD *)v39 + 24))(v39);
  }
  return v40;
}

void sub_20B079CC8()
{
  __break(1u);
}

void sub_20B079CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  __cxa_end_catch();
  if (a17 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B079D08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B079D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B079D44(_QWORD *a1, uint64_t **a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  void **v12;
  uint64_t v13;
  int v14;
  size_t v15;
  void **p_dst;
  unint64_t v17;
  unint64_t v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  void **v26;
  uint64_t v27;
  _QWORD *v28;
  void **__dst;
  size_t v31;
  int64_t v32;
  _QWORD *v33;
  void *__p[2];
  unsigned __int8 v35;

  v3 = (uint64_t)(*a2 + 2);
  v4 = **a2;
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v33 = (_QWORD *)v5;
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"context_id", 10);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)" = ", 3);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"sublogger", 9);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)" = ", 3);
  v6 = *(char *)(v4 + 23);
  if (v6 >= 0)
    v7 = v4;
  else
    v7 = *(_QWORD *)v4;
  if (v6 >= 0)
    v8 = *(unsigned __int8 *)(v4 + 23);
  else
    v8 = *(_QWORD *)(v4 + 8);
  sub_20AEC01D0((_QWORD *)(v5 + 16), v7, v8);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)", ", 2);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"namespace", 9);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)" = ", 3);
  if (*(_BYTE *)(v4 + 48))
  {
    v9 = *(char *)(v4 + 47);
    if (v9 >= 0)
      v10 = v4 + 24;
    else
      v10 = *(_QWORD *)(v4 + 24);
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v4 + 47);
    else
      v11 = *(_QWORD *)(v4 + 32);
    sub_20AEC01D0((_QWORD *)(v5 + 16), v10, v11);
  }
  else
  {
    sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"nullopt", 7);
  }
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"}", 1);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)", ", 2);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"data", 4);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)" = ", 3);
  sub_20B2170B4(v3);
  if ((v35 & 0x80u) == 0)
    v12 = __p;
  else
    v12 = (void **)__p[0];
  if ((v35 & 0x80u) == 0)
    v13 = v35;
  else
    v13 = (uint64_t)__p[1];
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)v12, v13);
  if ((char)v35 < 0)
    operator delete(__p[0]);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"}", 1);
  v14 = *(_DWORD *)(v5 + 120);
  if ((v14 & 0x10) != 0)
  {
    v17 = *(_QWORD *)(v5 + 112);
    v18 = *(_QWORD *)(v5 + 72);
    if (v17 < v18)
    {
      *(_QWORD *)(v5 + 112) = v18;
      v17 = v18;
    }
    v19 = *(const void **)(v5 + 64);
    v15 = v17 - (_QWORD)v19;
    if (v17 - (unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_51;
  }
  else
  {
    if ((v14 & 8) == 0)
    {
      v15 = 0;
      HIBYTE(v32) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_37;
    }
    v19 = *(const void **)(v5 + 40);
    v15 = *(_QWORD *)(v5 + 56) - (_QWORD)v19;
    if (v15 >= 0x7FFFFFFFFFFFFFF8)
LABEL_51:
      sub_20AEC0138();
  }
  if (v15 >= 0x17)
  {
    v20 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v20 = v15 | 7;
    v21 = v20 + 1;
    p_dst = (void **)operator new(v20 + 1);
    v31 = v15;
    v32 = v21 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_36;
  }
  HIBYTE(v32) = v15;
  p_dst = (void **)&__dst;
  if (v15)
LABEL_36:
    memmove(p_dst, v19, v15);
LABEL_37:
  *((_BYTE *)p_dst + v15) = 0;
  v22 = v33;
  if (v33)
  {
    v23 = MEMORY[0x24BEDB7F0];
    v24 = *MEMORY[0x24BEDB7F0];
    *v33 = *MEMORY[0x24BEDB7F0];
    v25 = *(_QWORD *)(v23 + 72);
    *(_QWORD *)((char *)v22 + *(_QWORD *)(v24 - 24)) = *(_QWORD *)(v23 + 64);
    v22[3] = MEMORY[0x24BEDB848] + 16;
    v22[2] = v25;
    if (*((char *)v22 + 111) < 0)
      operator delete((void *)v22[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v22 + 16);
    MEMORY[0x20BD3583C](v22, 0x10B2C40EED050F3);
  }
  if (v32 >= 0)
    v26 = (void **)&__dst;
  else
    v26 = __dst;
  if (v32 >= 0)
    v27 = HIBYTE(v32);
  else
    v27 = v31;
  v28 = sub_20AEC01D0(a1, (uint64_t)v26, v27);
  if (SHIBYTE(v32) < 0)
    operator delete(__dst);
  return v28;
}

void sub_20B07A11C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B07A194(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__dst[2];
  unint64_t v26;
  _QWORD v27[5];
  _QWORD *v28;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v27[0] = v5;
  if (*(_BYTE *)(a3 + 48))
  {
    v6 = *(char *)(a3 + 47);
    if (v6 >= 0)
      v7 = a3 + 24;
    else
      v7 = *(_QWORD *)(a3 + 24);
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a3 + 47);
    else
      v8 = *(_QWORD *)(a3 + 32);
    sub_20AEC01D0((_QWORD *)(v5 + 16), v7, v8);
  }
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)":", 1);
  v9 = *(char *)(a3 + 23);
  if (v9 >= 0)
    v10 = a3;
  else
    v10 = *(_QWORD *)a3;
  if (v9 >= 0)
    v11 = *(unsigned __int8 *)(a3 + 23);
  else
    v11 = *(_QWORD *)(a3 + 8);
  sub_20AEC01D0((_QWORD *)(v5 + 16), v10, v11);
  v12 = *(_DWORD *)(v5 + 120);
  if ((v12 & 0x10) != 0)
  {
    v15 = *(_QWORD *)(v5 + 112);
    v16 = *(_QWORD *)(v5 + 72);
    if (v15 < v16)
    {
      *(_QWORD *)(v5 + 112) = v16;
      v15 = v16;
    }
    v17 = *(const void **)(v5 + 64);
    v13 = v15 - (_QWORD)v17;
    if (v15 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v12 & 8) == 0)
    {
      v13 = 0;
      HIBYTE(v26) = 0;
      v14 = __dst;
      goto LABEL_28;
    }
    v17 = *(const void **)(v5 + 40);
    v13 = *(_QWORD *)(v5 + 56) - (_QWORD)v17;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_20AEC0138();
  }
  if (v13 >= 0x17)
  {
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    v14 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)v13;
    v26 = v19 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_27;
  }
  HIBYTE(v26) = v13;
  v14 = __dst;
  if (v13)
LABEL_27:
    memmove(v14, v17, v13);
LABEL_28:
  *((_BYTE *)v14 + v13) = 0;
  v20 = v27[0];
  if (v27[0])
  {
    v21 = MEMORY[0x24BEDB7F0];
    v22 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v27[0] = *MEMORY[0x24BEDB7F0];
    v23 = *(_QWORD *)(v21 + 72);
    *(_QWORD *)(v20 + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(v21 + 64);
    *(_QWORD *)(v20 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v20 + 16) = v23;
    if (*(char *)(v20 + 111) < 0)
      operator delete(*(void **)(v20 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v20 + 128);
    MEMORY[0x20BD3583C](v20, 0x10B2C40EED050F3);
  }
  v27[0] = a2;
  v27[1] = __dst;
  v27[2] = a2;
  v27[3] = __dst;
  v27[4] = __dst;
  v24 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v24 == -1)
    sub_20AECFAB8();
  v28 = v27;
  ((void (*)(_QWORD **, uint64_t))off_24C40B3F0[v24])(&v28, a2);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
}

void sub_20B07A440(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B07A464(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B07A480(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B07A494(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C40B448;
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_20B07A4DC(uint64_t a1)
{
  *(_QWORD *)a1 = off_24C40B448;
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    *(_BYTE *)(a1 + 24) = 0;
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B07A534(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    *(_BYTE *)(a1 + 24) = 0;
  }
}

uint64_t sub_20B07A56C(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B07A580(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N5boost6detail13sp_ms_deleterIKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"N5boost6detail13sp_ms_deleterIKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N5boost6detail13sp_ms_deleterIKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N5boost6detail13sp_ms_deleterIKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20B07A5EC()
{
  return 0;
}

uint64_t sub_20B07A5F4(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20B07A5FC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  _BYTE v9[2];
  _BYTE v10[2];

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    v4 = *(unsigned int *)(a2 + 56);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C40B4B8[v4])(v9, a1 + 8, a2 + 24);
      *(_DWORD *)(a1 + 40) = v4;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v5 = *(_QWORD *)(a2 + 72);
  v6 = *(_DWORD *)(a2 + 80);
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_BYTE *)(a1 + 72) = 0;
    *(_DWORD *)(a1 + 96) = -1;
    v7 = *(unsigned int *)(a2 + 160);
    if ((_DWORD)v7 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C40B4D8[v7])(v10, a1 + 72, a2 + 136);
      *(_DWORD *)(a1 + 96) = v7;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  return a1;
}

void sub_20B07A6E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 96);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C40B4C8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 96) = -1;
  sub_20AF05B90(v13);
  _Unwind_Resume(a1);
}

void sub_20B07A72C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v15;

  v15 = *(unsigned int *)(v12 + 40);
  if ((_DWORD)v15 != -1)
    ((void (*)(char *, uint64_t))off_24C40B4A8[v15])(&a12, v13);
  *(_DWORD *)(v12 + 40) = -1;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B07A768@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  _BYTE v7[2];
  _BYTE v8[8];
  _BYTE v9[32];
  int v10;
  char v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  _BYTE v16[24];
  int v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  char v28;
  char v29;
  char v30;
  char v31;
  char v32;
  char v33;
  char v34;
  char v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x24BDAC8D0];
  v8[0] = 0;
  v11 = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    v9[0] = 0;
    v10 = -1;
    v4 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))off_24C40B4B8[v4])(v7, v9, a1 + 8);
      v10 = v4;
    }
    v11 = 1;
  }
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_BYTE *)(a1 + 64);
  v14 = 0;
  v15 = 0;
  v16[0] = 0;
  v18 = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    v17 = -1;
    v5 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v5 != -1)
    {
      ((void (*)(_BYTE *, _BYTE *, uint64_t))off_24C40B4D8[v5])(v7, v16, a1 + 72);
      v17 = v5;
    }
    v18 = 1;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v30 = 0;
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v34 = 0;
  v35 = 0;
  v36 = 0;
  *a2 = &off_24C411BF8;
  sub_20AFF305C((uint64_t)(a2 + 2), (uint64_t)v8);
  return sub_20B07AE6C((uint64_t)v8);
}

void sub_20B07A8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,char a30,int a31,__int16 a32,char a33,char a34)
{
  uint64_t v34;
  uint64_t v35;
  uint64_t v37;

  v37 = *(unsigned int *)(v35 + 144);
  if ((_DWORD)v37 != -1)
    ((void (*)(char *, uint64_t))off_24C40B4C8[v37])(&a13, v34);
  *(_DWORD *)(v35 + 144) = -1;
  if ((_BYTE)a32 && a30 && a28 < 0)
    operator delete(__p);
  sub_20AF05B90((uint64_t)&a14);
  _Unwind_Resume(a1);
}

void sub_20B07A954(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B07A9A8(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *__p[2];
  uint64_t v5;

  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20AEC60F4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v5 = *(_QWORD *)(a2 + 16);
    }
    sub_20B07AA84(a1, (__int128 *)__p);
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    v3 = *(unsigned int *)(a1 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(void **, uint64_t))off_24C40B4A8[v3])(__p, a1 + 8);
    *(_DWORD *)(a1 + 40) = -1;
    *(_BYTE *)(a1 + 48) = 0;
  }
}

void sub_20B07AA68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B07AA84(uint64_t a1, __int128 *a2)
{
  _BYTE *v3;
  __int128 v4;
  void **v5;
  uint64_t v6;
  uint64_t v7;
  char v9;
  __int128 v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 48))
  {
    v3 = (_BYTE *)(a1 + 8);
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC60F4(v3, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v4 = *a2;
      *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
      *(_OWORD *)v3 = v4;
    }
    *(_DWORD *)(a1 + 40) = 1;
    *(_BYTE *)(a1 + 48) = 1;
    return a1;
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4(&v10, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v10 = *a2;
    v11 = *((_QWORD *)a2 + 2);
  }
  v12 = 1;
  v5 = (void **)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v6 == -1)
    goto LABEL_14;
  if ((_DWORD)v6 != 1)
  {
    ((void (*)(char *, uint64_t))off_24C40B4A8[v6])(&v9, a1 + 8);
LABEL_14:
    *(_OWORD *)v5 = v10;
    *(_QWORD *)(a1 + 24) = v11;
    v11 = 0;
    v10 = 0uLL;
    *(_DWORD *)(a1 + 40) = 1;
    v7 = v12;
    if (v12 == -1)
      return a1;
LABEL_15:
    ((void (*)(char *, __int128 *))off_24C40B4A8[v7])(&v9, &v10);
    return a1;
  }
  if (*(char *)(a1 + 31) < 0)
    operator delete(*v5);
  *(_OWORD *)v5 = v10;
  *(_QWORD *)(a1 + 24) = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10) = 0;
  v7 = v12;
  if (v12 != -1)
    goto LABEL_15;
  return a1;
}

void sub_20B07AC08(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

void sub_20B07AC20(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *__p[2];
  uint64_t v5;

  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      sub_20AEC60F4(__p, *(void **)a2, *(_QWORD *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)a2;
      v5 = *(_QWORD *)(a2 + 16);
    }
    sub_20B07ACFC((void **)(a1 + 72), (__int128 *)__p);
    if (SHIBYTE(v5) < 0)
      operator delete(__p[0]);
  }
  else if (*(_BYTE *)(a1 + 104))
  {
    v3 = *(unsigned int *)(a1 + 96);
    if ((_DWORD)v3 != -1)
      ((void (*)(void **, uint64_t))off_24C40B4C8[v3])(__p, a1 + 72);
    *(_DWORD *)(a1 + 96) = -1;
    *(_BYTE *)(a1 + 104) = 0;
  }
}

void sub_20B07ACE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void **sub_20B07ACFC(void **__dst, __int128 *a2)
{
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  __int128 v7;
  void *v8;
  unsigned int v9;
  char v10;

  if (*((_BYTE *)__dst + 32))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC60F4(&v7, *(void **)a2, *((_QWORD *)a2 + 1));
      v9 = 1;
      v3 = *((unsigned int *)__dst + 6);
      if ((_DWORD)v3 == -1)
        goto LABEL_14;
    }
    else
    {
      v7 = *a2;
      v8 = (void *)*((_QWORD *)a2 + 2);
      v9 = 1;
      v3 = *((unsigned int *)__dst + 6);
      if ((_DWORD)v3 == -1)
        goto LABEL_14;
    }
    if ((_DWORD)v3 == 1)
    {
      if (*((char *)__dst + 23) < 0)
        operator delete(*__dst);
      *(_OWORD *)__dst = v7;
      __dst[2] = v8;
      HIBYTE(v8) = 0;
      LOBYTE(v7) = 0;
      v5 = v9;
      if (v9 == -1)
        return __dst;
      goto LABEL_15;
    }
    ((void (*)(char *, void **))off_24C40B4C8[v3])(&v10, __dst);
LABEL_14:
    *(_OWORD *)__dst = v7;
    __dst[2] = v8;
    v8 = 0;
    v7 = 0uLL;
    *((_DWORD *)__dst + 6) = 1;
    v5 = v9;
    if (v9 == -1)
      return __dst;
LABEL_15:
    ((void (*)(char *, __int128 *))off_24C40B4C8[v5])(&v10, &v7);
    return __dst;
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v4 = *a2;
    __dst[2] = (void *)*((_QWORD *)a2 + 2);
    *(_OWORD *)__dst = v4;
  }
  *((_DWORD *)__dst + 6) = 1;
  *((_BYTE *)__dst + 32) = 1;
  return __dst;
}

uint64_t sub_20B07AE6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;

  if (*(_BYTE *)(a1 + 680))
  {
    v2 = *(unsigned int *)(a1 + 672);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C40B4A8[v2])(&v16, a1 + 640);
    *(_DWORD *)(a1 + 672) = -1;
  }
  if (*(_BYTE *)(a1 + 624))
  {
    if (*(_BYTE *)(a1 + 616))
    {
      v3 = *(_QWORD *)(a1 + 592);
      if (v3)
      {
        v4 = *(_QWORD *)(a1 + 600);
        v5 = *(void **)(a1 + 592);
        if (v4 == v3)
        {
LABEL_19:
          *(_QWORD *)(a1 + 600) = v3;
          operator delete(v5);
          goto LABEL_20;
        }
        while (1)
        {
          if (*(_BYTE *)(v4 - 16) && *(char *)(v4 - 41) < 0)
          {
            operator delete(*(void **)(v4 - 64));
            if (*(_BYTE *)(v4 - 72))
            {
LABEL_14:
              if (*(char *)(v4 - 73) < 0)
                operator delete(*(void **)(v4 - 96));
            }
          }
          else if (*(_BYTE *)(v4 - 72))
          {
            goto LABEL_14;
          }
          v4 -= 96;
          if (v4 == v3)
          {
            v5 = *(void **)(a1 + 592);
            goto LABEL_19;
          }
        }
      }
    }
  }
LABEL_20:
  if (*(_BYTE *)(a1 + 576))
  {
    v6 = *(unsigned int *)(a1 + 560);
    if ((_DWORD)v6 != -1)
      ((void (*)(char *, uint64_t))off_24C40B508[v6])(&v17, a1 + 448);
    *(_DWORD *)(a1 + 560) = -1;
  }
  if (*(_BYTE *)(a1 + 416))
  {
    v7 = *(unsigned int *)(a1 + 400);
    if ((_DWORD)v7 != -1)
      ((void (*)(char *, uint64_t))off_24C40B4F8[v7])(&v18, a1 + 336);
    *(_DWORD *)(a1 + 400) = -1;
  }
  if (*(_BYTE *)(a1 + 312))
  {
    v8 = *(unsigned int *)(a1 + 304);
    if ((_DWORD)v8 != -1)
      ((void (*)(char *, uint64_t))off_24C40B4A8[v8])(&v19, a1 + 272);
    *(_DWORD *)(a1 + 304) = -1;
  }
  if (!*(_BYTE *)(a1 + 256))
    goto LABEL_37;
  v9 = *(std::__shared_weak_count **)(a1 + 248);
  if (!v9)
    goto LABEL_37;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
    if (!*(_BYTE *)(a1 + 224))
      goto LABEL_41;
  }
  else
  {
LABEL_37:
    if (!*(_BYTE *)(a1 + 224))
      goto LABEL_41;
  }
  v12 = *(unsigned int *)(a1 + 216);
  if ((_DWORD)v12 != -1)
    ((void (*)(char *, uint64_t))off_24C40B4E8[v12])(&v20, a1 + 160);
  *(_DWORD *)(a1 + 216) = -1;
LABEL_41:
  if (*(_BYTE *)(a1 + 152))
  {
    v13 = *(unsigned int *)(a1 + 144);
    if ((_DWORD)v13 != -1)
      ((void (*)(char *, uint64_t))off_24C40B4C8[v13])(&v21, a1 + 120);
    *(_DWORD *)(a1 + 144) = -1;
  }
  if (*(_BYTE *)(a1 + 112) && *(_BYTE *)(a1 + 104) && *(char *)(a1 + 95) < 0)
  {
    operator delete(*(void **)(a1 + 72));
    if (!*(_BYTE *)(a1 + 48))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 48))
  {
    return a1;
  }
  v14 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v14 != -1)
    ((void (*)(char *, uint64_t))off_24C40B4A8[v14])(&v22, a1 + 8);
  *(_DWORD *)(a1 + 40) = -1;
  return a1;
}

_QWORD *sub_20B07B120(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  _QWORD *v19;
  void *v20;
  _QWORD *v21;
  int64_t v22;
  unint64_t v23;
  int64_t v24;
  unint64_t v25;
  char *v26;
  char *v27;
  char *v28;
  __int128 v29;
  _QWORD *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  int64x2_t v38;
  _QWORD *v39;
  _QWORD *v40;
  void *v41;
  char *v42;
  char *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  _QWORD *v59;
  __int128 v60;
  void *v61;
  char *v62;
  char v63;
  void *v64[2];
  char *v65;
  void *__p[3];
  char v67;

  LOBYTE(v61) = 0;
  v63 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    sub_20AF1DFE8(&v61, a2);
    v63 = 1;
    v6 = (char *)v61;
    v5 = v62;
    memset(__p, 0, sizeof(__p));
    v7 = v62 - (_BYTE *)v61;
    if (v62 == v61)
    {
      v9 = 0;
      v8 = 0;
    }
    else
    {
      if (v7 < 0)
        sub_20AEC60B8();
      v8 = (char *)operator new((unint64_t)v7 >> 1);
      v9 = &v8[16 * (v7 >> 5)];
      __p[0] = v8;
      __p[1] = v8;
      __p[2] = v9;
      if (v5 != v6)
      {
        v59 = a1;
        while (1)
        {
          v10 = *(_OWORD *)v6;
          v11 = (std::__shared_weak_count *)*((_QWORD *)v6 + 1);
          if (v11)
          {
            p_shared_owners = (unint64_t *)&v11->__shared_owners_;
            do
              v13 = __ldxr(p_shared_owners);
            while (__stxr(v13 + 1, p_shared_owners));
          }
          v14 = (std::__shared_weak_count *)*((_QWORD *)v6 + 3);
          if (v14)
          {
            v15 = (unint64_t *)&v14->__shared_owners_;
            do
              v16 = __ldxr(v15);
            while (__stxr(v16 + 1, v15));
          }
          if (v11)
          {
            v17 = (unint64_t *)&v11->__shared_owners_;
            do
              v18 = __ldxr(v17);
            while (__stxr(v18 + 1, v17));
          }
          v19 = __p[1];
          if (__p[1] >= __p[2])
          {
            v21 = __p[0];
            v22 = ((char *)__p[1] - (char *)__p[0]) >> 4;
            v23 = v22 + 1;
            if ((unint64_t)(v22 + 1) >> 60)
              sub_20AEC60B8();
            v60 = v10;
            v24 = (char *)__p[2] - (char *)__p[0];
            if (((char *)__p[2] - (char *)__p[0]) >> 3 > v23)
              v23 = v24 >> 3;
            if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0)
              v25 = 0xFFFFFFFFFFFFFFFLL;
            else
              v25 = v23;
            if (v25 >> 60)
              sub_20AEC60CC();
            v26 = (char *)operator new(16 * v25);
            v27 = &v26[16 * v22];
            v28 = &v26[16 * v25];
            *(_OWORD *)v27 = v60;
            v20 = v27 + 16;
            if (v19 == v21)
            {
              __p[0] = v27;
              __p[1] = v27 + 16;
              __p[2] = &v26[16 * v25];
            }
            else
            {
              do
              {
                v29 = *((_OWORD *)v19 - 1);
                v19 -= 2;
                *((_OWORD *)v27 - 1) = v29;
                v27 -= 16;
                *v19 = 0;
                v19[1] = 0;
              }
              while (v19 != v21);
              v19 = __p[0];
              v30 = __p[1];
              __p[0] = v27;
              __p[1] = v20;
              __p[2] = v28;
              while (v30 != v19)
              {
                v31 = (std::__shared_weak_count *)*(v30 - 1);
                if (v31)
                {
                  v32 = (unint64_t *)&v31->__shared_owners_;
                  do
                    v33 = __ldaxr(v32);
                  while (__stlxr(v33 - 1, v32));
                  if (!v33)
                  {
                    ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
                    std::__shared_weak_count::__release_weak(v31);
                  }
                }
                v30 -= 2;
              }
            }
            if (v19)
              operator delete(v19);
          }
          else
          {
            *(_QWORD *)__p[1] = v10;
            v19[1] = v11;
            v20 = v19 + 2;
          }
          __p[1] = v20;
          if (!v14)
            goto LABEL_42;
          v34 = (unint64_t *)&v14->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
            if (v11)
            {
LABEL_43:
              v36 = (unint64_t *)&v11->__shared_owners_;
              do
                v37 = __ldaxr(v36);
              while (__stlxr(v37 - 1, v36));
              if (!v37)
              {
                ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
                std::__shared_weak_count::__release_weak(v11);
              }
            }
          }
          else
          {
LABEL_42:
            if (v11)
              goto LABEL_43;
          }
          v6 += 32;
          if (v6 == v5)
          {
            v38 = *(int64x2_t *)__p;
            v9 = (char *)__p[2];
            a1 = v59;
            goto LABEL_53;
          }
        }
      }
    }
    v38 = vdupq_n_s64((unint64_t)v8);
LABEL_53:
    *(int64x2_t *)v64 = v38;
    v65 = v9;
  }
  else
  {
    v64[0] = 0;
    v64[1] = 0;
    v65 = 0;
  }
  v39 = operator new(0x38uLL);
  v40 = v39;
  v39[1] = 0;
  v39[2] = 0;
  *v39 = &off_24C40B568;
  if (*(_BYTE *)(a3 + 24))
  {
    v41 = *(void **)(a3 + 8);
    __p[0] = *(void **)a3;
    __p[1] = v41;
    *(void **)((char *)&__p[1] + 7) = *(void **)(a3 + 15);
    LOBYTE(v41) = *(_BYTE *)(a3 + 23);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v39[3] = &off_24C414560;
    v39[4] = &unk_24C414610;
    HIBYTE(__p[2]) = (_BYTE)v41;
    v67 = 1;
  }
  else
  {
    v39[3] = &off_24C414560;
    v39[4] = &unk_24C414610;
    LOBYTE(__p[0]) = 0;
    v67 = 0;
  }
  sub_20B24CE20((uint64_t)v64, (uint64_t)__p, v39 + 5);
  if (v67 && SHIBYTE(__p[2]) < 0)
    operator delete(__p[0]);
  *a1 = v40 + 3;
  a1[1] = v40;
  v42 = (char *)v64[0];
  if (v64[0])
  {
    v43 = (char *)v64[1];
    v44 = v64[0];
    if (v64[1] != v64[0])
    {
      do
      {
        v45 = (std::__shared_weak_count *)*((_QWORD *)v43 - 1);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v43 -= 16;
      }
      while (v43 != v42);
      v44 = v64[0];
    }
    v64[1] = v42;
    operator delete(v44);
  }
  if (v63)
  {
    v48 = (char *)v61;
    if (v61)
    {
      v49 = v62;
      v50 = v61;
      if (v62 == v61)
      {
LABEL_88:
        v62 = v48;
        operator delete(v50);
        goto LABEL_89;
      }
      while (1)
      {
        v51 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
        if (!v51)
          goto LABEL_80;
        v52 = (unint64_t *)&v51->__shared_owners_;
        do
          v53 = __ldaxr(v52);
        while (__stlxr(v53 - 1, v52));
        if (!v53)
        {
          ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
          std::__shared_weak_count::__release_weak(v51);
          v54 = (std::__shared_weak_count *)*((_QWORD *)v49 - 3);
          if (v54)
          {
LABEL_81:
            v55 = (unint64_t *)&v54->__shared_owners_;
            do
              v56 = __ldaxr(v55);
            while (__stlxr(v56 - 1, v55));
            if (!v56)
            {
              ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
              std::__shared_weak_count::__release_weak(v54);
            }
          }
        }
        else
        {
LABEL_80:
          v54 = (std::__shared_weak_count *)*((_QWORD *)v49 - 3);
          if (v54)
            goto LABEL_81;
        }
        v49 -= 32;
        if (v49 == v48)
        {
          v50 = v61;
          goto LABEL_88;
        }
      }
    }
  }
LABEL_89:
  if (*a1)
    v57 = *a1 + 8;
  else
    v57 = 0;
  a1[2] = v57;
  return a1;
}

void sub_20B07B5E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *__p, char *a14, uint64_t a15, char a16)
{
  char *v17;
  char *v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  std::__shared_weak_count *v22;
  unint64_t *v23;
  unint64_t v24;

  if (a16 && __p)
  {
    v17 = a14;
    v18 = __p;
    if (a14 != __p)
    {
      do
      {
        v19 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
        if (v19)
        {
          p_shared_owners = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v22 = (std::__shared_weak_count *)*((_QWORD *)v17 - 3);
        if (v22)
        {
          v23 = (unint64_t *)&v22->__shared_owners_;
          do
            v24 = __ldaxr(v23);
          while (__stlxr(v24 - 1, v23));
          if (!v24)
          {
            ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
            std::__shared_weak_count::__release_weak(v22);
          }
        }
        v17 -= 32;
      }
      while (v17 != __p);
      v18 = __p;
    }
    operator delete(v18);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B07B69C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char *__p,char *a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  char *v28;
  char *v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;

  v28 = __p;
  if (__p)
  {
    v29 = a22;
    v30 = __p;
    if (a22 != __p)
    {
      do
      {
        v31 = (std::__shared_weak_count *)*((_QWORD *)v29 - 1);
        if (v31)
        {
          p_shared_owners = (unint64_t *)&v31->__shared_owners_;
          do
            v33 = __ldaxr(p_shared_owners);
          while (__stlxr(v33 - 1, p_shared_owners));
          if (!v33)
          {
            ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
            std::__shared_weak_count::__release_weak(v31);
          }
        }
        v29 -= 16;
      }
      while (v29 != v28);
      v30 = __p;
    }
    a22 = v28;
    operator delete(v30);
  }
  sub_20AF1E744(&a13);
  _Unwind_Resume(a1);
}

void sub_20B07B870(char *__s@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  size_t v5;
  size_t v6;
  __int128 *p_dst;
  int v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *p_shared_owners;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  __int128 __dst;
  unint64_t v22;
  void *__p[2];
  unint64_t v24;
  char v25;
  void *v26[2];
  uint64_t v27;
  char v28;
  __int128 v29;
  char v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  char v36;
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  char v48;

  if (!__s || !*__s)
  {
    sub_20AF55B94((uint64_t)&v29, "namespace must not be empty");
    v37 = 1;
    sub_20AECCC3C(0xAu, &v29, (uint64_t)&v38);
    *(_OWORD *)a3 = v38;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v48)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v8 = v41;
      if (v41)
      {
        *(_OWORD *)(a3 + 16) = v39;
        *(_QWORD *)(a3 + 32) = v40;
        v40 = 0;
        v39 = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v47)
      {
        v9 = v44;
        *(_QWORD *)(a3 + 64) = v43;
        *(_OWORD *)(a3 + 48) = v42;
        v42 = 0uLL;
        *(_QWORD *)(a3 + 72) = v9;
        *(_OWORD *)(a3 + 80) = v45;
        *(_QWORD *)(a3 + 96) = v46;
        v43 = 0;
        v45 = 0uLL;
        v46 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v8 && SHIBYTE(v40) < 0)
        operator delete((void *)v39);
      if (!v37)
        return;
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
      if (!v37)
        return;
    }
    if (!v36)
      goto LABEL_23;
    if (v35 < 0)
    {
      operator delete(v34);
      if ((v33 & 0x80000000) == 0)
      {
LABEL_23:
        if (!v31)
          return;
        goto LABEL_24;
      }
    }
    else if ((v33 & 0x80000000) == 0)
    {
      goto LABEL_23;
    }
    operator delete(v32);
    if (!v31)
      return;
LABEL_24:
    if ((v30 & 0x80000000) == 0)
      return;
    v10 = (void *)v29;
    goto LABEL_51;
  }
  LOBYTE(v26[0]) = 0;
  v28 = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)v26 = *(_OWORD *)a2;
    v27 = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v28 = 1;
  }
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v11 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v11 = v5 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v6;
    v22 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v22) = v5;
    p_dst = &__dst;
    if (!v5)
      goto LABEL_30;
  }
  memcpy(p_dst, __s, v6);
LABEL_30:
  *((_BYTE *)p_dst + v6) = 0;
  *(_OWORD *)__p = __dst;
  v24 = v22;
  v25 = 1;
  sub_20B07B120(&v38, (uint64_t)v26, (uint64_t)__p);
  *(_OWORD *)a3 = v38;
  v38 = 0uLL;
  *(_QWORD *)(a3 + 16) = v39;
  *(_BYTE *)(a3 + 120) = 1;
  if (v25 && SHIBYTE(v24) < 0)
    operator delete(__p[0]);
  if (v28)
  {
    v13 = (char *)v26[0];
    if (v26[0])
    {
      v14 = (char *)v26[1];
      v10 = v26[0];
      if (v26[1] == v26[0])
      {
LABEL_50:
        v26[1] = v13;
LABEL_51:
        operator delete(v10);
        return;
      }
      while (1)
      {
        v15 = (std::__shared_weak_count *)*((_QWORD *)v14 - 1);
        if (!v15)
          goto LABEL_42;
        p_shared_owners = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(p_shared_owners);
        while (__stlxr(v17 - 1, p_shared_owners));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
          v18 = (std::__shared_weak_count *)*((_QWORD *)v14 - 3);
          if (v18)
          {
LABEL_43:
            v19 = (unint64_t *)&v18->__shared_owners_;
            do
              v20 = __ldaxr(v19);
            while (__stlxr(v20 - 1, v19));
            if (!v20)
            {
              ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
              std::__shared_weak_count::__release_weak(v18);
            }
          }
        }
        else
        {
LABEL_42:
          v18 = (std::__shared_weak_count *)*((_QWORD *)v14 - 3);
          if (v18)
            goto LABEL_43;
        }
        v14 -= 32;
        if (v14 == v13)
        {
          v10 = v26[0];
          goto LABEL_50;
        }
      }
    }
  }
}

void sub_20B07BBD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, int a20,char *a21)
{
  if (a19)
  {
    if (a18 < 0)
    {
      operator delete(__p);
      sub_20AF1E744(&a21);
      _Unwind_Resume(a1);
    }
  }
  sub_20AF1E744(&a21);
  _Unwind_Resume(a1);
}

void sub_20B07BC18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, ...)
{
  va_list va;

  va_start(va, a14);
  sub_20AECCDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B07BC2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X3>, _UNKNOWN **a5@<X4>, char a6@<W5>, uint64_t a7@<X8>)
{
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _DWORD *v18;
  _DWORD *v19;
  void *v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  _DWORD *v24;
  _DWORD *v25;
  uint64_t v26;
  std::__shared_count v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t shared_owners;
  unint64_t *v44;
  unint64_t v45;
  unint64_t v46;
  char *v47;
  char *v48;
  void *v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  char *v56;
  char *v57;
  void *v58;
  std::__shared_weak_count *v59;
  unint64_t *v60;
  unint64_t v61;
  std::__shared_weak_count *v62;
  unint64_t *v63;
  unint64_t v64;
  char *v65;
  char *v66;
  void *v67;
  std::__shared_weak_count *v68;
  unint64_t *v69;
  unint64_t v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  std::__shared_weak_count *v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  void *v84;
  char v85;
  char v86;
  std::__shared_count v87;
  void *v88;
  char *v89;
  _QWORD *v90;
  void *v91[2];
  uint64_t v92;
  void *v93[2];
  uint64_t v94;
  char v95;
  __int128 v96;
  uint64_t v97;
  void *__p;
  _DWORD *v99;
  char v100;
  char v101;
  _DWORD *v102;
  _DWORD *v103;
  char v104;
  __int128 v105;
  __int128 v106;
  char v107;
  std::__shared_count v108;
  __int128 v109[6];
  char v110;
  std::__shared_count v111;
  void *v112;
  std::__shared_weak_count *v113;
  char v114;
  unsigned __int8 v115;
  __int128 v116;
  uint64_t v117;
  uint64_t v118;
  __int128 v119;
  uint64_t v120;
  char v121;
  char v122;
  _BYTE v123[24];
  _BYTE *v124;
  char v125;
  _BYTE v126[24];
  _BYTE *v127;
  char v128;
  uint64_t v129;

  v129 = *MEMORY[0x24BDAC8D0];
  if (a3)
  {
    sub_20AF05070((uint64_t)&v102, a2);
    v13 = *(_OWORD *)(a2 + 32);
    v106 = *(_OWORD *)(a2 + 48);
    v105 = v13;
    v107 = 1;
    v126[0] = 0;
    v128 = 0;
    if (!*(_BYTE *)(a4 + 32))
      goto LABEL_14;
    v14 = *(_QWORD *)(a4 + 24);
    if (v14)
    {
      if (v14 == a4)
      {
        v127 = v126;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v126);
        goto LABEL_13;
      }
      v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
    v127 = (_BYTE *)v14;
LABEL_13:
    v128 = 1;
LABEL_14:
    sub_20AFEE588(a1, (uint64_t)&v102, (uint64_t)v126, a5, a6, (uint64_t)&v108);
    if (v128)
    {
      v16 = v127;
      if (v127 == v126)
      {
        v17 = 4;
        v16 = v126;
        goto LABEL_19;
      }
      if (v127)
      {
        v17 = 5;
LABEL_19:
        (*(void (**)(void))(*v16 + 8 * v17))();
      }
    }
    if (v107)
    {
      if (v104)
      {
        v18 = v102;
        if (v102)
        {
          v19 = v103;
          v20 = v102;
          if (v103 != v102)
          {
            do
            {
              if (*((_BYTE *)v19 - 8))
              {
                v21 = *(v19 - 4);
                if ((_DWORD)v21 != -1)
                  ((void (*)(std::__shared_count *, _DWORD *))off_24C40B548[v21])(&v111, v19 - 12);
                *(v19 - 4) = -1;
              }
              *((_QWORD *)v19 - 102) = &off_24C411BF8;
              sub_20B07AE6C((uint64_t)(v19 - 200));
              v19 -= 204;
            }
            while (v19 != v18);
            v20 = v102;
          }
          v103 = v18;
LABEL_52:
          operator delete(v20);
          goto LABEL_53;
        }
      }
    }
    goto LABEL_53;
  }
  LOBYTE(__p) = 0;
  v101 = 0;
  v123[0] = 0;
  v125 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v15 = *(_QWORD *)(a4 + 24);
    if (v15)
    {
      if (v15 == a4)
      {
        v124 = v123;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v123);
        goto LABEL_33;
      }
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    }
    v124 = (_BYTE *)v15;
LABEL_33:
    v125 = 1;
  }
  sub_20AFEE588(a1, (uint64_t)&__p, (uint64_t)v123, a5, a6, (uint64_t)&v108);
  if (v125)
  {
    v22 = v124;
    if (v124 == v123)
    {
      v23 = 4;
      v22 = v123;
      goto LABEL_39;
    }
    if (v124)
    {
      v23 = 5;
LABEL_39:
      (*(void (**)(void))(*v22 + 8 * v23))();
    }
  }
  if (v101)
  {
    if (v100)
    {
      v24 = __p;
      if (__p)
      {
        v25 = v99;
        v20 = __p;
        if (v99 != __p)
        {
          do
          {
            if (*((_BYTE *)v25 - 8))
            {
              v26 = *(v25 - 4);
              if ((_DWORD)v26 != -1)
                ((void (*)(std::__shared_count *, _DWORD *))off_24C40B548[v26])(&v111, v25 - 12);
              *(v25 - 4) = -1;
            }
            *((_QWORD *)v25 - 102) = &off_24C411BF8;
            sub_20B07AE6C((uint64_t)(v25 - 200));
            v25 -= 204;
          }
          while (v25 != v24);
          v20 = __p;
        }
        v99 = v24;
        goto LABEL_52;
      }
    }
  }
LABEL_53:
  if (v110)
  {
    v27 = v108;
    v87 = v108;
    if (v108.__shared_owners_)
    {
      v28 = (unint64_t *)(v108.__shared_owners_ + 8);
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      do
        v30 = __ldxr(v28);
      while (__stxr(v30 + 1, v28));
    }
    v111 = v27;
    v31 = (std::__shared_weak_count *)operator new(0x28uLL);
    v32 = v31;
    v31->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v31->__shared_owners_;
    v31->__shared_weak_owners_ = 0;
    v31->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA7C8;
    v34 = v31 + 1;
    if (v27.__shared_owners_)
    {
      v35 = (unint64_t *)(v27.__shared_owners_ + 8);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
      do
        v37 = __ldxr(v35);
      while (__stxr(v37 + 1, v35));
      v31[1].std::__shared_count = v27;
      do
        v38 = __ldaxr(v35);
      while (__stlxr(v38 - 1, v35));
      if (!v38)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v27.__shared_owners_ + 16))(v27.__shared_owners_);
        std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v27.__shared_owners_);
      }
    }
    else
    {
      v31[1].__vftable = (std::__shared_weak_count_vtbl *)v27.__vftable;
      v31[1].__shared_owners_ = 0;
    }
    v112 = v34;
    v113 = v32;
    v42 = operator new(0x20uLL);
    v88 = v42;
    v89 = (char *)v42;
    v90 = v42 + 4;
    shared_owners = v111.__shared_owners_;
    *v42 = v111.__vftable;
    v42[1] = shared_owners;
    if (shared_owners)
    {
      v44 = (unint64_t *)(shared_owners + 8);
      do
        v45 = __ldxr(v44);
      while (__stxr(v45 + 1, v44));
    }
    v42[2] = v34;
    v42[3] = v32;
    do
      v46 = __ldxr(p_shared_owners);
    while (__stxr(v46 + 1, p_shared_owners));
    v89 = (char *)(v42 + 4);
    sub_20AF1DFE8(v91, (uint64_t)&v88);
    *(_OWORD *)v93 = *(_OWORD *)v91;
    v94 = v92;
    v91[1] = 0;
    v92 = 0;
    v91[0] = 0;
    v95 = 1;
    LOBYTE(v84) = 0;
    v86 = 0;
    sub_20B07B120(&v96, (uint64_t)v93, (uint64_t)&v84);
    *(_OWORD *)a7 = v96;
    v96 = 0uLL;
    *(_QWORD *)(a7 + 16) = v97;
    *(_BYTE *)(a7 + 120) = 1;
    if (v86 && v85 < 0)
      operator delete(v84);
    if (!v95)
      goto LABEL_101;
    v47 = (char *)v93[0];
    if (!v93[0])
      goto LABEL_101;
    v48 = (char *)v93[1];
    v49 = v93[0];
    if (v93[1] == v93[0])
    {
LABEL_100:
      v93[1] = v47;
      operator delete(v49);
LABEL_101:
      v56 = (char *)v91[0];
      if (!v91[0])
      {
LABEL_118:
        v65 = (char *)v88;
        if (!v88)
          goto LABEL_135;
        v66 = v89;
        v67 = v88;
        if (v89 == v88)
        {
LABEL_134:
          v89 = v65;
          operator delete(v67);
LABEL_135:
          v74 = v113;
          if (v113)
          {
            v75 = (unint64_t *)&v113->__shared_owners_;
            do
              v76 = __ldaxr(v75);
            while (__stlxr(v76 - 1, v75));
            if (!v76)
            {
              ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
              std::__shared_weak_count::__release_weak(v74);
            }
          }
          v77 = (std::__shared_weak_count *)v111.__shared_owners_;
          if (v111.__shared_owners_)
          {
            v78 = (unint64_t *)(v111.__shared_owners_ + 8);
            do
              v79 = __ldaxr(v78);
            while (__stlxr(v79 - 1, v78));
            if (!v79)
            {
              ((void (*)(std::__shared_weak_count *))v77->__on_zero_shared)(v77);
              std::__shared_weak_count::__release_weak(v77);
            }
          }
          v80 = (std::__shared_weak_count *)v87.__shared_owners_;
          if (v87.__shared_owners_)
          {
            v81 = (unint64_t *)(v87.__shared_owners_ + 8);
            do
              v82 = __ldaxr(v81);
            while (__stlxr(v82 - 1, v81));
            if (!v82)
            {
              ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
              std::__shared_weak_count::__release_weak(v80);
            }
          }
          return sub_20AEE199C((uint64_t)&v108);
        }
        while (1)
        {
          v68 = (std::__shared_weak_count *)*((_QWORD *)v66 - 1);
          if (!v68)
            goto LABEL_126;
          v69 = (unint64_t *)&v68->__shared_owners_;
          do
            v70 = __ldaxr(v69);
          while (__stlxr(v70 - 1, v69));
          if (!v70)
          {
            ((void (*)(std::__shared_weak_count *))v68->__on_zero_shared)(v68);
            std::__shared_weak_count::__release_weak(v68);
            v71 = (std::__shared_weak_count *)*((_QWORD *)v66 - 3);
            if (v71)
            {
LABEL_127:
              v72 = (unint64_t *)&v71->__shared_owners_;
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
          }
          else
          {
LABEL_126:
            v71 = (std::__shared_weak_count *)*((_QWORD *)v66 - 3);
            if (v71)
              goto LABEL_127;
          }
          v66 -= 32;
          if (v66 == v65)
          {
            v67 = v88;
            goto LABEL_134;
          }
        }
      }
      v57 = (char *)v91[1];
      v58 = v91[0];
      if (v91[1] == v91[0])
      {
LABEL_117:
        v91[1] = v56;
        operator delete(v58);
        goto LABEL_118;
      }
      while (1)
      {
        v59 = (std::__shared_weak_count *)*((_QWORD *)v57 - 1);
        if (!v59)
          goto LABEL_109;
        v60 = (unint64_t *)&v59->__shared_owners_;
        do
          v61 = __ldaxr(v60);
        while (__stlxr(v61 - 1, v60));
        if (!v61)
        {
          ((void (*)(std::__shared_weak_count *))v59->__on_zero_shared)(v59);
          std::__shared_weak_count::__release_weak(v59);
          v62 = (std::__shared_weak_count *)*((_QWORD *)v57 - 3);
          if (v62)
          {
LABEL_110:
            v63 = (unint64_t *)&v62->__shared_owners_;
            do
              v64 = __ldaxr(v63);
            while (__stlxr(v64 - 1, v63));
            if (!v64)
            {
              ((void (*)(std::__shared_weak_count *))v62->__on_zero_shared)(v62);
              std::__shared_weak_count::__release_weak(v62);
            }
          }
        }
        else
        {
LABEL_109:
          v62 = (std::__shared_weak_count *)*((_QWORD *)v57 - 3);
          if (v62)
            goto LABEL_110;
        }
        v57 -= 32;
        if (v57 == v56)
        {
          v58 = v91[0];
          goto LABEL_117;
        }
      }
    }
    while (1)
    {
      v50 = (std::__shared_weak_count *)*((_QWORD *)v48 - 1);
      if (!v50)
        goto LABEL_92;
      v51 = (unint64_t *)&v50->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
        std::__shared_weak_count::__release_weak(v50);
        v53 = (std::__shared_weak_count *)*((_QWORD *)v48 - 3);
        if (v53)
        {
LABEL_93:
          v54 = (unint64_t *)&v53->__shared_owners_;
          do
            v55 = __ldaxr(v54);
          while (__stlxr(v55 - 1, v54));
          if (!v55)
          {
            ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
            std::__shared_weak_count::__release_weak(v53);
          }
        }
      }
      else
      {
LABEL_92:
        v53 = (std::__shared_weak_count *)*((_QWORD *)v48 - 3);
        if (v53)
          goto LABEL_93;
      }
      v48 -= 32;
      if (v48 == v47)
      {
        v49 = v93[0];
        goto LABEL_100;
      }
    }
  }
  v111 = v108;
  v39 = sub_20AECEBD0(&v112, v109);
  *(std::__shared_count *)a7 = v111;
  *(_BYTE *)(a7 + 16) = 0;
  *(_BYTE *)(a7 + 112) = 0;
  if (v122)
  {
    *(_BYTE *)(a7 + 40) = 0;
    v40 = v115;
    if (v115)
    {
      *(_OWORD *)(a7 + 16) = *(_OWORD *)v39;
      *(_QWORD *)(a7 + 32) = *((_QWORD *)v39 + 2);
      *((_QWORD *)v39 + 1) = 0;
      *((_QWORD *)v39 + 2) = 0;
      *(_QWORD *)v39 = 0;
      *(_BYTE *)(a7 + 40) = 1;
    }
    *(_BYTE *)(a7 + 48) = 0;
    *(_BYTE *)(a7 + 104) = 0;
    if (v121)
    {
      v41 = v118;
      *(_QWORD *)(a7 + 64) = v117;
      *(_OWORD *)(a7 + 48) = v116;
      v116 = 0uLL;
      *(_QWORD *)(a7 + 72) = v41;
      *(_OWORD *)(a7 + 80) = v119;
      *(_QWORD *)(a7 + 96) = v120;
      v117 = 0;
      v119 = 0uLL;
      v120 = 0;
      *(_BYTE *)(a7 + 104) = 1;
    }
    *(_BYTE *)(a7 + 112) = 1;
    *(_BYTE *)(a7 + 120) = 0;
    if (v40 && v114 < 0)
      operator delete(v112);
  }
  else
  {
    *(_BYTE *)(a7 + 120) = 0;
  }
  return sub_20AEE199C((uint64_t)&v108);
}

void sub_20B07C4AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  uint64_t v31;
  _QWORD *v33;
  uint64_t v34;

  if (*(_BYTE *)(v31 - 120))
  {
    v33 = *(_QWORD **)(v31 - 128);
    if (v33 == (_QWORD *)(v31 - 152))
    {
      v34 = 4;
      v33 = (_QWORD *)(v31 - 152);
    }
    else
    {
      if (!v33)
        goto LABEL_7;
      v34 = 5;
    }
    (*(void (**)(void))(*v33 + 8 * v34))();
  }
LABEL_7:
  sub_20AF012C4((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20B07C550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, int a17, __int16 a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,char *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a69;

  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  sub_20AF1E744(&a27);
  sub_20B07C660(&a23);
  sub_20B07C660(&a20);
  sub_20AEDC320((uint64_t)&a69);
  sub_20AEC147C((uint64_t)&a18);
  sub_20AEE199C((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20B07C5B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  std::__shared_weak_count *v49;
  unint64_t *p_shared_owners;
  unint64_t v52;

  if (v49)
  {
    p_shared_owners = (unint64_t *)&v49->__shared_owners_;
    do
      v52 = __ldaxr(p_shared_owners);
    while (__stlxr(v52 - 1, p_shared_owners));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
      sub_20AEC147C((uint64_t)&a14);
      sub_20AEE199C((uint64_t)&a49);
      _Unwind_Resume(a1);
    }
  }
  JUMPOUT(0x20B07C598);
}

void sub_20B07C600()
{
  uint64_t v0;

  if (*(_BYTE *)(v0 - 80))
  {
    if (*(_QWORD *)(v0 - 88) == v0 - 112)
      JUMPOUT(0x20B07C61CLL);
    JUMPOUT(0x20B07C4F0);
  }
  JUMPOUT(0x20B07C630);
}

void sub_20B07C644(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

void **sub_20B07C660(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_17:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (!v5)
        goto LABEL_9;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
        {
LABEL_10:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_9:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 3);
        if (v8)
          goto LABEL_10;
      }
      v3 -= 32;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_17;
      }
    }
  }
  return a1;
}

void sub_20B07C73C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  _BOOL4 v8;
  _BOOL4 v9;
  unint64_t *v10;
  unint64_t v11;
  int v12;
  uint64_t v13;
  void *v14[2];
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 __p;
  uint64_t v25;
  unsigned __int8 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;
  uint64_t v34[2];

  v4 = *a1;
  v5 = (std::__shared_weak_count *)a2[1];
  v34[0] = *a2;
  v34[1] = (uint64_t)v5;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = sub_20B24D510(v4, v34);
  v9 = v8;
  if (!v5)
    goto LABEL_8;
  v10 = (unint64_t *)&v5->__shared_owners_;
  do
    v11 = __ldaxr(v10);
  while (__stlxr(v11 - 1, v10));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (v9)
      goto LABEL_9;
  }
  else
  {
LABEL_8:
    if (v8)
    {
LABEL_9:
      *(_BYTE *)(a3 + 120) = 1;
      return;
    }
  }
  sub_20AF55B94((uint64_t)v14, "destination to add is already contained in the logger");
  v22 = 1;
  sub_20AECCC3C(0xDu, (__int128 *)v14, (uint64_t)&v23);
  *(_OWORD *)a3 = v23;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v33)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v22)
      return;
LABEL_23:
    if (!v21)
      goto LABEL_26;
    if (v20 < 0)
    {
      operator delete(v19);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_26:
        if (!v16)
          return;
        goto LABEL_27;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      goto LABEL_26;
    }
    operator delete(v17);
    if (!v16)
      return;
LABEL_27:
    if (v15 < 0)
      operator delete(v14[0]);
    return;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v12 = v26;
  if (v26)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v25;
    v25 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v32)
  {
    v13 = v29;
    *(_QWORD *)(a3 + 64) = v28;
    *(_OWORD *)(a3 + 48) = v27;
    v27 = 0uLL;
    *(_QWORD *)(a3 + 72) = v13;
    *(_OWORD *)(a3 + 80) = v30;
    *(_QWORD *)(a3 + 96) = v31;
    v28 = 0;
    v30 = 0uLL;
    v31 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v12 && SHIBYTE(v25) < 0)
    operator delete((void *)__p);
  if (v22)
    goto LABEL_23;
}

void sub_20B07C948(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCDB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B07C95C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC147C(v1 - 48);
  _Unwind_Resume(a1);
}

void sub_20B07C970(uint64_t *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11[2];
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;

  v4 = *a1;
  v5 = *a2;
  v6 = *(_QWORD *)(*a1 + 16);
  if (!v6)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v6 = *(_QWORD *)(v4 + 16);
  }
  v7 = *(_QWORD *)(v6 + 64);
  std::mutex::lock((std::mutex *)(v7 + 32));
  v8 = sub_20B1E0B8C(v7, v5);
  std::mutex::unlock((std::mutex *)(v7 + 32));
  if (v8)
  {
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  sub_20AF55B94((uint64_t)v11, "destination to remove was not found in the logger");
  v19 = 1;
  sub_20AECCC3C(0xDu, (__int128 *)v11, (uint64_t)&v20);
  *(_OWORD *)a3 = v20;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v30)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v19)
      return;
LABEL_18:
    if (!v18)
      goto LABEL_21;
    if (v17 < 0)
    {
      operator delete(v16);
      if ((v15 & 0x80000000) == 0)
      {
LABEL_21:
        if (!v13)
          return;
LABEL_22:
        if (v12 < 0)
          operator delete(v11[0]);
        return;
      }
    }
    else if ((v15 & 0x80000000) == 0)
    {
      goto LABEL_21;
    }
    operator delete(v14);
    if (!v13)
      return;
    goto LABEL_22;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v9 = v23;
  if (v23)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v22;
    v22 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v29)
  {
    v10 = v26;
    *(_QWORD *)(a3 + 64) = v25;
    *(_OWORD *)(a3 + 48) = v24;
    v24 = 0uLL;
    *(_QWORD *)(a3 + 72) = v10;
    *(_OWORD *)(a3 + 80) = v27;
    *(_QWORD *)(a3 + 96) = v28;
    v25 = 0;
    v27 = 0uLL;
    v28 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v9 && SHIBYTE(v22) < 0)
    operator delete((void *)__p);
  if (v19)
    goto LABEL_18;
}

void sub_20B07CB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCDB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B07CBA8(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B07CBBC(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  _OWORD *v22;
  std::__shared_weak_count *v23;
  _OWORD *v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  char *v32;
  char *v33;
  void *v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t *v42;
  void *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  void *v47;
  uint64_t *v48;
  void *__p[2];
  unint64_t v50;
  __int128 v51;
  unint64_t v52;
  __int128 v53;
  __int128 v54;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (!v4)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 202, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = *(_QWORD *)(v3 + 16);
  }
  v5 = *(_QWORD *)(v4 + 64);
  std::mutex::lock((std::mutex *)(v5 + 32));
  sub_20B1E167C(&v47, v5 + 96);
  std::mutex::unlock((std::mutex *)(v5 + 32));
  v52 = 0;
  v51 = 0uLL;
  sub_20AFABBA0((uint64_t)&v51, ((char *)v48 - (_BYTE *)v47) >> 4);
  v6 = (uint64_t *)v47;
  v7 = v48;
  if (v47 != v48)
  {
    do
    {
      v9 = *v6;
      v8 = (std::__shared_weak_count *)v6[1];
      if (v8)
      {
        p_shared_owners = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(p_shared_owners);
        while (__stxr(v11 + 1, p_shared_owners));
        do
          v12 = __ldxr(p_shared_owners);
        while (__stxr(v12 + 1, p_shared_owners));
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      *(_QWORD *)&v53 = v9;
      *((_QWORD *)&v53 + 1) = v8;
      v14 = operator new(0x28uLL);
      v15 = v14;
      v14[1] = 0;
      v14[2] = 0;
      v16 = v14 + 3;
      *v14 = &off_24C3FA7C8;
      if (v8)
      {
        v17 = (unint64_t *)&v8->__shared_owners_;
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
        do
          v19 = __ldxr(v17);
        while (__stxr(v19 + 1, v17));
        v14[3] = v9;
        v14[4] = v8;
        do
          v20 = __ldaxr(v17);
        while (__stlxr(v20 - 1, v17));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        *(_QWORD *)&v54 = v16;
        *((_QWORD *)&v54 + 1) = v15;
        do
          v21 = __ldaxr(v17);
        while (__stlxr(v21 - 1, v17));
        if (!v21)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
        v22 = (_OWORD *)*((_QWORD *)&v51 + 1);
        if (*((_QWORD *)&v51 + 1) < v52)
        {
LABEL_25:
          *v22 = v53;
          v53 = 0uLL;
          v22[1] = v54;
          v54 = 0uLL;
          *((_QWORD *)&v51 + 1) = v22 + 2;
          v23 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
          if (*((_QWORD *)&v53 + 1))
            goto LABEL_33;
          goto LABEL_37;
        }
      }
      else
      {
        v14[3] = v9;
        v14[4] = 0;
        *(_QWORD *)&v54 = v14 + 3;
        *((_QWORD *)&v54 + 1) = v14;
        v22 = (_OWORD *)*((_QWORD *)&v51 + 1);
        if (*((_QWORD *)&v51 + 1) < v52)
          goto LABEL_25;
      }
      v24 = sub_20AFABCE8((void **)&v51, &v53);
      v25 = (std::__shared_weak_count *)*((_QWORD *)&v54 + 1);
      *((_QWORD *)&v51 + 1) = v24;
      if (!*((_QWORD *)&v54 + 1))
        goto LABEL_32;
      v26 = (unint64_t *)(*((_QWORD *)&v54 + 1) + 8);
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
        if (*((_QWORD *)&v53 + 1))
        {
LABEL_33:
          v28 = (unint64_t *)&v23->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
            std::__shared_weak_count::__release_weak(v23);
          }
        }
      }
      else
      {
LABEL_32:
        v23 = (std::__shared_weak_count *)*((_QWORD *)&v53 + 1);
        if (*((_QWORD *)&v53 + 1))
          goto LABEL_33;
      }
LABEL_37:
      if (v8)
      {
        v30 = (unint64_t *)&v8->__shared_owners_;
        do
          v31 = __ldaxr(v30);
        while (__stlxr(v31 - 1, v30));
        if (!v31)
        {
          ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
          std::__shared_weak_count::__release_weak(v8);
        }
      }
      v6 += 2;
    }
    while (v6 != v7);
  }
  *(_OWORD *)__p = v51;
  v50 = v52;
  sub_20AF1DFE8(a2, (uint64_t)__p);
  v32 = (char *)__p[0];
  if (__p[0])
  {
    v33 = (char *)__p[1];
    v34 = __p[0];
    if (__p[1] == __p[0])
    {
LABEL_60:
      __p[1] = v32;
      operator delete(v34);
      goto LABEL_61;
    }
    while (1)
    {
      v35 = (std::__shared_weak_count *)*((_QWORD *)v33 - 1);
      if (!v35)
        goto LABEL_52;
      v36 = (unint64_t *)&v35->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
        std::__shared_weak_count::__release_weak(v35);
        v38 = (std::__shared_weak_count *)*((_QWORD *)v33 - 3);
        if (v38)
        {
LABEL_53:
          v39 = (unint64_t *)&v38->__shared_owners_;
          do
            v40 = __ldaxr(v39);
          while (__stlxr(v40 - 1, v39));
          if (!v40)
          {
            ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
            std::__shared_weak_count::__release_weak(v38);
          }
        }
      }
      else
      {
LABEL_52:
        v38 = (std::__shared_weak_count *)*((_QWORD *)v33 - 3);
        if (v38)
          goto LABEL_53;
      }
      v33 -= 32;
      if (v33 == v32)
      {
        v34 = __p[0];
        goto LABEL_60;
      }
    }
  }
LABEL_61:
  v41 = (uint64_t *)v47;
  if (v47)
  {
    v42 = v48;
    v43 = v47;
    if (v48 != v47)
    {
      do
      {
        v44 = (std::__shared_weak_count *)*(v42 - 1);
        if (v44)
        {
          v45 = (unint64_t *)&v44->__shared_owners_;
          do
            v46 = __ldaxr(v45);
          while (__stlxr(v46 - 1, v45));
          if (!v46)
          {
            ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
            std::__shared_weak_count::__release_weak(v44);
          }
        }
        v42 -= 2;
      }
      while (v42 != v41);
      v43 = v47;
    }
    v48 = v41;
    operator delete(v43);
  }
}

void sub_20B07CFE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  void *v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, void *);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  sub_20B07C660((void **)va1);
  sub_20AEC3C38((void **)va);
  _Unwind_Resume(a1);
}

void sub_20B07D004(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B07D018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t *v32;
  unint64_t v33;

  v26 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v28 = __ldaxr(p_shared_owners);
    while (__stlxr(v28 - 1, p_shared_owners));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = a22;
  if (a22)
  {
    v30 = (unint64_t *)&a22->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
  if (v24)
  {
    v32 = (unint64_t *)&v24->__shared_owners_;
    do
      v33 = __ldaxr(v32);
    while (__stlxr(v33 - 1, v32));
    if (!v33)
    {
      ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
      std::__shared_weak_count::__release_weak(v24);
    }
  }
  sub_20B07C660(&a17);
  sub_20AEC3C38(&a10);
  _Unwind_Resume(a1);
}

void sub_20B07D12C(uint64_t *a1@<X0>, uint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  std::__shared_weak_count *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (***v12)();
  uint64_t (***v13)();
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;

  v6 = *a1;
  v5 = (std::__shared_weak_count *)a1[1];
  v7 = *a1;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    v7 = *a1;
  }
  v17 = v6;
  v18 = v5;
  v10 = a2[1];
  if (*((char *)a2 + 23) >= 0)
  {
    v11 = *((unsigned __int8 *)a2 + 23);
  }
  else
  {
    a2 = (uint64_t *)*a2;
    v11 = v10;
  }
  v12 = (uint64_t (***)())(*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(_QWORD *)(v7 + 8) + 48))(v7 + 8, a2, v11);
  *a3 = &off_24C40B528;
  a3[1] = v12;
  if (*v12 == off_24C412038)
    v13 = v12;
  else
    v13 = 0;
  a3[2] = v13[5];
  a3[3] = v17;
  a3[4] = v18;
  if (v18)
  {
    v14 = (unint64_t *)&v18->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
    }
  }
}

void sub_20B07D268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20AEC147C((uint64_t)&a11);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B07D284(uint64_t *a1, const char *a2)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  void **__dst;
  size_t v16;
  int64_t v17;

  v2 = *a1;
  if (a2)
    v3 = a2;
  else
    v3 = (const char *)&unk_20B5A48DA;
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = v4;
  v6 = v2 + 8;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v16 = v5;
    v17 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v17) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_11:
    memcpy(p_dst, v3, v5);
  *((_BYTE *)p_dst + v5) = 0;
  if (v17 >= 0)
    v10 = (void **)&__dst;
  else
    v10 = __dst;
  if (v17 >= 0)
    v11 = HIBYTE(v17);
  else
    v11 = v16;
  v12 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 48))(v6, v10, v11);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
  if (SHIBYTE(v17) < 0)
    operator delete(__dst);
  return v13;
}

void sub_20B07D398(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B07D3B4(uint64_t *a1, const char *a2)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  size_t v11;
  uint64_t v12;
  void **__dst;
  size_t v14;
  int64_t v15;

  v2 = *a1;
  if (a2)
    v3 = a2;
  else
    v3 = (const char *)&unk_20B5A48DA;
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = v4;
  v6 = v2 + 8;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v14 = v5;
    v15 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v15) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_11:
    memcpy(p_dst, v3, v5);
  *((_BYTE *)p_dst + v5) = 0;
  if (v15 >= 0)
    v10 = (void **)&__dst;
  else
    v10 = __dst;
  if (v15 >= 0)
    v11 = HIBYTE(v15);
  else
    v11 = v14;
  v12 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 48))(v6, v10, v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, 1);
  if (SHIBYTE(v15) < 0)
    operator delete(__dst);
}

void sub_20B07D4DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B07D4F8(uint64_t *a1, const char *a2)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  size_t v5;
  uint64_t v6;
  void **p_dst;
  uint64_t v8;
  uint64_t v9;
  void **v10;
  size_t v11;
  uint64_t v12;
  void **__dst;
  size_t v14;
  int64_t v15;

  v2 = *a1;
  if (a2)
    v3 = a2;
  else
    v3 = (const char *)&unk_20B5A48DA;
  v4 = strlen(v3);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = v4;
  v6 = v2 + 8;
  if (v4 >= 0x17)
  {
    v8 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v8 = v4 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v14 = v5;
    v15 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v15) = v4;
  p_dst = (void **)&__dst;
  if (v4)
LABEL_11:
    memcpy(p_dst, v3, v5);
  *((_BYTE *)p_dst + v5) = 0;
  if (v15 >= 0)
    v10 = (void **)&__dst;
  else
    v10 = __dst;
  if (v15 >= 0)
    v11 = HIBYTE(v15);
  else
    v11 = v14;
  v12 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)v6 + 48))(v6, v10, v11);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 40))(v12, 2);
  if (SHIBYTE(v15) < 0)
    operator delete(__dst);
}

void sub_20B07D620(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B07D63C(uint64_t a1@<X0>, uint64_t a2@<X1>, const char *a3@<X2>, uint64_t a4@<X8>)
{
  const char *v7;
  size_t v8;
  size_t v9;
  void **p_dst;
  uint64_t v11;
  uint64_t v12;
  size_t v13;
  int v14;
  void **v15;
  uint64_t v16;
  int v17;
  unsigned __int8 v18;
  void *v19[2];
  uint64_t v20;
  void *v21[2];
  uint64_t v22;
  char v23;
  __int128 v24;
  __int128 __p;
  uint64_t v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  void **__dst;
  size_t v36;
  int64_t v37;

  if (a3)
    v7 = a3;
  else
    v7 = (const char *)&unk_20B5A48DA;
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (void **)operator new(v11 + 1);
    v36 = v9;
    v37 = v12 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v37) = v8;
  p_dst = (void **)&__dst;
  if (v8)
LABEL_11:
    memcpy(p_dst, v7, v9);
  *((_BYTE *)p_dst + v9) = 0;
  if (v37 >= 0)
    v13 = HIBYTE(v37);
  else
    v13 = v36;
  if (!(_DWORD)a2 && !v13)
  {
    sub_20AFB22CC((uint64_t)&v24);
    *(_OWORD *)a4 = v24;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (!v34)
    {
      *(_BYTE *)(a4 + 120) = 0;
      if ((SHIBYTE(v37) & 0x80000000) == 0)
        return;
      goto LABEL_48;
    }
    *(_BYTE *)(a4 + 40) = 0;
    v14 = v27;
    if (v27)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v26;
      v26 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v33)
    {
      *(_OWORD *)(a4 + 48) = v28;
      *(_QWORD *)(a4 + 64) = v29;
      v29 = 0;
      v28 = 0uLL;
      *(_QWORD *)(a4 + 72) = v30;
      *(_OWORD *)(a4 + 80) = v31;
      *(_QWORD *)(a4 + 96) = v32;
      v31 = 0uLL;
      v32 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v14 && SHIBYTE(v26) < 0)
    {
      operator delete((void *)__p);
      if ((SHIBYTE(v37) & 0x80000000) == 0)
        return;
      goto LABEL_48;
    }
LABEL_47:
    if ((SHIBYTE(v37) & 0x80000000) == 0)
      return;
    goto LABEL_48;
  }
  if (a2 >= 3)
  {
    v18 = a2;
    sub_20B07DA20((uint64_t)v19, &v18);
    *(_OWORD *)v21 = *(_OWORD *)v19;
    v22 = v20;
    v19[1] = 0;
    v20 = 0;
    v19[0] = 0;
    v23 = 1;
    sub_20B099E24((__int128 *)v21, (uint64_t)&v24);
    *(_OWORD *)a4 = v24;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v34)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v17 = v27;
      if (v27)
      {
        *(_OWORD *)(a4 + 16) = __p;
        *(_QWORD *)(a4 + 32) = v26;
        v26 = 0;
        __p = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v33)
      {
        *(_OWORD *)(a4 + 48) = v28;
        *(_QWORD *)(a4 + 64) = v29;
        v29 = 0;
        v28 = 0uLL;
        *(_QWORD *)(a4 + 72) = v30;
        *(_OWORD *)(a4 + 80) = v31;
        *(_QWORD *)(a4 + 96) = v32;
        v31 = 0uLL;
        v32 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v17 && SHIBYTE(v26) < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    if (v23 && SHIBYTE(v22) < 0)
      operator delete(v21[0]);
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_47;
    operator delete(v19[0]);
    if (SHIBYTE(v37) < 0)
LABEL_48:
      operator delete(__dst);
  }
  else
  {
    if (v37 >= 0)
      v15 = (void **)&__dst;
    else
      v15 = __dst;
    v16 = (*(uint64_t (**)(uint64_t, void **, size_t))(*(_QWORD *)(*(_QWORD *)a1 + 8) + 48))(*(_QWORD *)a1 + 8, v15, v13);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v16 + 40))(v16, a2);
    *(_BYTE *)(a4 + 120) = 1;
    if (SHIBYTE(v37) < 0)
      goto LABEL_48;
  }
}

void sub_20B07D9B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  uint64_t v22;
  uint64_t v23;

  if (a22)
  {
    if (a21 < 0)
      operator delete(__p);
  }
  if (a15 < 0)
  {
    operator delete(a10);
    if ((*(char *)(v23 - 81) & 0x80000000) == 0)
LABEL_6:
      _Unwind_Resume(exception_object);
  }
  else if ((*(char *)(v23 - 81) & 0x80000000) == 0)
  {
    goto LABEL_6;
  }
  operator delete(*(void **)(v22 + 120));
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B07DA20(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result;
  _DWORD v4[6];
  unsigned int v5;
  std::string v6;
  std::string **v7;
  std::string *v8;
  std::string *v9;
  _DWORD *v10;
  std::string *v11;
  std::string *v12;

  v5 = 0;
  sub_20B07E63C(v4, "invalid EnableState value '");
  std::to_string(&v6, *a2);
  v8 = (std::string *)v4;
  v9 = &v6;
  v10 = v4;
  v11 = &v6;
  v12 = &v6;
  if (v5 == -1)
    sub_20AECFAB8();
  v7 = &v8;
  ((void (*)(std::string ***, _DWORD *))off_24C40B5C0[v5])(&v7, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  v8 = (std::string *)v4;
  v9 = (std::string *)"'";
  v10 = v4;
  v11 = (std::string *)"'";
  v12 = (std::string *)"'";
  if (v5 == -1)
    sub_20AECFAB8();
  v6.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
  ((void (*)(std::string *, _DWORD *))off_24C40B5D8[v5])(&v6, v4);
  if (v5 == -1)
    sub_20AECFAB8();
  v8 = &v6;
  result = ((uint64_t (*)(std::string **, _DWORD *))*(&off_24C40B5F0 + v5))(&v8, v4);
  if (v5 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C40B5A8[v5])(&v8, v4);
  return result;
}

void sub_20B07DB6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B07DB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B07DB7CLL);
}

void sub_20B07DBB0(uint64_t *a1, const char *a2, uint64_t a3)
{
  uint64_t v4;
  const char *v5;
  size_t v6;
  uint64_t v7;
  uint64_t *v8;
  std::__shared_weak_count *v9;
  uint64_t v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  _QWORD v16[2];
  std::__shared_weak_count *v17;

  v4 = *a1;
  if (a2)
    v5 = a2;
  else
    v5 = (const char *)&unk_20B5A48DA;
  v6 = strlen(v5);
  v7 = (*(uint64_t (**)(uint64_t, const char *, size_t))(*(_QWORD *)(v4 + 8) + 48))(v4 + 8, v5, v6);
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7 + 24))(v7))
  {
    v8 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
    v10 = *(_QWORD *)(a3 + 424);
    v9 = *(std::__shared_weak_count **)(a3 + 432);
    v16[0] = &off_24C411E78;
    v16[1] = v10;
    v17 = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
    }
    sub_20B07E72C(v4, v8, (uint64_t)v16);
    v13 = v17;
    if (v17)
    {
      v14 = (unint64_t *)&v17->__shared_owners_;
      do
        v15 = __ldaxr(v14);
      while (__stlxr(v15 - 1, v14));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
  }
}

void sub_20B07DCBC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B216B00((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B07DCD0(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  _BYTE *v5;
  int v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  char v17;
  __int128 v18;
  void *__p;
  char v20;
  unsigned __int8 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  char v28;
  int v29[4];
  void *v30;
  char v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  char v37;
  char v38;
  char v39;

  v3 = *a1;
  v4 = *(_QWORD *)(*a1 + 16);
  if (v4)
  {
    sub_20B24CAC0(v4, (uint64_t)v29);
    if (v39)
    {
LABEL_3:
      *(_BYTE *)(a2 + 120) = 1;
      return;
    }
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/VisualLogger.cpp", 206, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    sub_20B24CAC0(*(_QWORD *)(v3 + 16), (uint64_t)v29);
    if (v39)
      goto LABEL_3;
  }
  sub_20AF5E330(v29, (uint64_t)&v8);
  v18 = v8;
  v5 = sub_20AECEBD0(&__p, &v9);
  *(_OWORD *)a2 = v18;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v28)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v6 = v21;
    if (v21)
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)v5;
      *(_QWORD *)(a2 + 32) = *((_QWORD *)v5 + 2);
      *((_QWORD *)v5 + 1) = 0;
      *((_QWORD *)v5 + 2) = 0;
      *(_QWORD *)v5 = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v27)
    {
      v7 = v24;
      *(_QWORD *)(a2 + 64) = v23;
      *(_OWORD *)(a2 + 48) = v22;
      v22 = 0uLL;
      *(_QWORD *)(a2 + 72) = v7;
      *(_OWORD *)(a2 + 80) = v25;
      *(_QWORD *)(a2 + 96) = v26;
      v23 = 0;
      v25 = 0uLL;
      v26 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v6 && v20 < 0)
      operator delete(__p);
    if (!v17)
      goto LABEL_26;
    goto LABEL_18;
  }
  *(_BYTE *)(a2 + 120) = 0;
  if (v17)
  {
LABEL_18:
    if (v16)
    {
      if (v15 < 0)
        operator delete(v14);
      if (v13 < 0)
        operator delete(v12);
    }
    if (v11 && v10 < 0)
      operator delete((void *)v9);
  }
LABEL_26:
  if (!v39 && v38)
  {
    if (v37)
    {
      if (v36 < 0)
        operator delete(v35);
      if (v34 < 0)
        operator delete(v33);
    }
    if (v32)
    {
      if (v31 < 0)
        operator delete(v30);
    }
  }
}

void sub_20B07DF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECCE40((uint64_t)va);
  sub_20AECD704(v2 - 160);
  _Unwind_Resume(a1);
}

void sub_20B07DF28(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECD704(v1 - 160);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B07DF3C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C40B528;
  v2 = (std::__shared_weak_count *)result[4];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B07DFB0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C40B528;
  v1 = (std::__shared_weak_count *)a1[4];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B07E024(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned __int8 v12;
  void *v13[2];
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  __int128 __p;
  uint64_t v20;
  unsigned __int8 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  char v28;

  if ((_DWORD)a2)
  {
    if (a2 >= 3)
    {
      v12 = a2;
      sub_20B07DA20((uint64_t)v13, &v12);
      *(_OWORD *)v15 = *(_OWORD *)v13;
      v16 = v14;
      v13[1] = 0;
      v14 = 0;
      v13[0] = 0;
      v17 = 1;
      sub_20B099E24((__int128 *)v15, (uint64_t)&v18);
      *(_OWORD *)a3 = v18;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v28)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v6 = v21;
        if (v21)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v20;
          v20 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v27)
        {
          v7 = v24;
          *(_QWORD *)(a3 + 64) = v23;
          *(_OWORD *)(a3 + 48) = v22;
          v23 = 0;
          v22 = 0uLL;
          *(_QWORD *)(a3 + 72) = v7;
          *(_OWORD *)(a3 + 80) = v25;
          *(_QWORD *)(a3 + 96) = v26;
          v25 = 0uLL;
          v26 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v6 && SHIBYTE(v20) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (v17 && SHIBYTE(v16) < 0)
        operator delete(v15[0]);
      if (SHIBYTE(v14) < 0)
        operator delete(v13[0]);
      return;
    }
LABEL_14:
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v9 = *(unsigned __int8 *)(v8 + 23);
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(v8 + 8);
  if (v9)
    goto LABEL_14;
  sub_20AFB22CC((uint64_t)&v18);
  *(_OWORD *)a3 = v18;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v28)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v10 = v21;
    if (v21)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v20;
      v20 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v27)
    {
      v11 = v24;
      *(_QWORD *)(a3 + 64) = v23;
      *(_OWORD *)(a3 + 48) = v22;
      v23 = 0;
      v22 = 0uLL;
      *(_QWORD *)(a3 + 72) = v11;
      *(_OWORD *)(a3 + 80) = v25;
      *(_QWORD *)(a3 + 96) = v26;
      v25 = 0uLL;
      v26 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v10 && SHIBYTE(v20) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
}

void sub_20B07E2E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a22 && a21 < 0)
    operator delete(__p);
  if (a15 < 0)
    operator delete(a10);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B07E314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  uint64_t (**v32)();
  uint64_t v33;
  std::__shared_weak_count *v34;

  v5 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v7 = *v5;
  v6 = (std::__shared_weak_count *)v5[1];
  v29 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v11 = *(_QWORD *)(a3 + 8);
  v10 = *(std::__shared_weak_count **)(a3 + 16);
  v28 = v10;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v30 = v7;
  v31 = v6;
  if (v6)
  {
    v12 = (unint64_t *)&v6->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v32 = &off_24C411E78;
  v33 = v11;
  v34 = v10;
  if (v10)
  {
    v14 = (unint64_t *)&v10->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v30);
  v17 = v34;
  if (v34)
  {
    v18 = (unint64_t *)&v34->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v31;
  if (v31)
  {
    v21 = (unint64_t *)&v31->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (v28)
  {
    v23 = (unint64_t *)&v28->__shared_owners_;
    do
      v24 = __ldaxr(v23);
    while (__stlxr(v24 - 1, v23));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
      std::__shared_weak_count::__release_weak(v28);
    }
  }
  if (!v29)
    return v16;
  v25 = (unint64_t *)&v29->__shared_owners_;
  do
    v26 = __ldaxr(v25);
  while (__stlxr(v26 - 1, v25));
  if (v26)
    return v16;
  ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
  std::__shared_weak_count::__release_weak(v29);
  return v16;
}

void sub_20B07E4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  sub_20B07E4F4((uint64_t)&a14);
  sub_20B216B00((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B07E4F4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
        goto LABEL_6;
      return a1;
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
LABEL_6:
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20B07E5A0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B568;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B07E5B0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B568;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B07E5E0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

_DWORD *sub_20B07E63C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C40B5A8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t sub_20B07E72C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  uint64_t (**v29)();
  uint64_t v30;
  std::__shared_weak_count *v31;

  v4 = *a2;
  v3 = (std::__shared_weak_count *)a2[1];
  v26 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = *(_QWORD *)(a3 + 8);
  v7 = *(std::__shared_weak_count **)(a3 + 16);
  v25 = v7;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v27 = v4;
  v28 = v3;
  if (v3)
  {
    v9 = (unint64_t *)&v3->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v29 = &off_24C411E78;
  v30 = v8;
  v31 = v7;
  if (v7)
  {
    v11 = (unint64_t *)&v7->__shared_owners_;
    do
      v12 = __ldxr(v11);
    while (__stxr(v12 + 1, v11));
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 16))(a1, &v27);
  v14 = v31;
  if (v31)
  {
    v15 = (unint64_t *)&v31->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v28;
  if (v28)
  {
    v18 = (unint64_t *)&v28->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  if (v25)
  {
    v20 = (unint64_t *)&v25->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
    }
  }
  if (!v26)
    return v13;
  v22 = (unint64_t *)&v26->__shared_owners_;
  do
    v23 = __ldaxr(v22);
  while (__stlxr(v23 - 1, v22));
  if (v23)
    return v13;
  ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
  std::__shared_weak_count::__release_weak(v26);
  return v13;
}

void sub_20B07E8CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, char a14)
{
  sub_20B07E4F4((uint64_t)&a14);
  sub_20B216B00((uint64_t)&a9);
  sub_20AEC147C((uint64_t)&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_20B07E8F0(unsigned __int8 *a1)
{
  unsigned int v2;

  v2 = *a1;
  if (v2 >= 0xD || ((0x19EFu >> v2) & 1) == 0)
    sub_20B521E58(v2);
  return *((_QWORD *)a1 + 1) / qword_20B5E30E8[(char)v2];
}

void sub_20B07E9AC()
{
  void *v0;

  sub_20AEC01C0(v0);
}

uint64_t sub_20B07E9B8(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;

  if (a1[2] != a3)
    return 0;
  v5 = (_QWORD *)*a1;
  v3 = a1 + 1;
  v4 = v5;
  if (v5 != v3)
  {
    while (*((unsigned __int16 *)v4 + 16) == *((unsigned __int16 *)a2 + 16))
    {
      if (*((unsigned __int8 *)v4 + 40) != *((unsigned __int8 *)a2 + 40))
        break;
      v6 = v4[6];
      v7 = a2[6];
      if (v6 != v7)
        break;
      if (v6)
      {
        v8 = v6 - 1;
        v9 = v7 - 1;
        v10 = (unsigned __int8 *)v4[7];
        v11 = (unsigned __int8 *)a2[7];
        while (*v10 == *v11)
        {
          ++v10;
          ++v11;
          if (v8)
          {
            --v8;
            if (v9--)
              continue;
          }
          goto LABEL_13;
        }
        return 0;
      }
      v11 = (unsigned __int8 *)a2[7];
      v10 = (unsigned __int8 *)v4[7];
LABEL_13:
      v13 = 0;
      if (v10 == (unsigned __int8 *)(v4[7] + v6) && v11 == (unsigned __int8 *)(a2[7] + v7))
      {
        v14 = (_QWORD *)v4[1];
        v15 = v4;
        if (v14)
        {
          do
          {
            v4 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v4 = (_QWORD *)v15[2];
            v16 = *v4 == (_QWORD)v15;
            v15 = v4;
          }
          while (!v16);
        }
        v17 = (_QWORD *)a2[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)a2[2];
            v16 = *v18 == (_QWORD)a2;
            a2 = v18;
          }
          while (!v16);
        }
        v13 = 1;
        a2 = v18;
        if (v4 != v3)
          continue;
      }
      return v13;
    }
    return 0;
  }
  return 1;
}

_QWORD *sub_20B07EAF4(_QWORD *a1, _QWORD *a2)
{
  _QWORD *v4;
  char v5;
  _QWORD *v6;
  int v7;
  const char *v8;
  uint64_t v9;
  _QWORD *v10;
  unsigned __int8 *v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  _QWORD *v20;
  uint64_t v21;
  unint64_t v22;
  double *v23;
  _QWORD *v24;
  unint64_t v25;
  float *v26;
  uint64_t v27;
  char *v28;
  uint64_t v29;
  unint64_t v30;
  unsigned __int16 *v31;
  unint64_t v32;
  __int16 *v33;
  unint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  uint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  int *v41;
  double *v42;
  uint64_t v43;
  std::string *v44;
  std::string::size_type size;
  float *v46;
  uint64_t v47;
  void *v48;
  unint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  void *v55;
  uint64_t v56;
  unsigned __int16 *v57;
  uint64_t v58;
  __int16 *v59;
  uint64_t v60;
  unsigned int *v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  unint64_t *v65;
  uint64_t v66;
  int *v67;
  uint64_t v68;
  void *v69;
  uint64_t v70;
  char *v71;
  _QWORD *v72;
  _QWORD *v73;
  BOOL v74;
  unsigned __int8 *v75;
  _QWORD *v77;
  _QWORD *v78;
  void *v79;
  uint64_t v80;
  unsigned __int8 v81;
  void *__p[2];
  unsigned __int8 v83;
  int v84;
  std::string v85;
  _QWORD v86[2];
  std::string *v87;
  std::string *v88;
  void **v89;
  std::string *v90;
  std::string *v91;
  uint64_t v92;

  v92 = *MEMORY[0x24BDAC8D0];
  sub_20AEC01D0(a1, (uint64_t)"{", 1);
  v4 = (_QWORD *)*a2;
  v78 = a2 + 1;
  if ((_QWORD *)*a2 != a2 + 1)
  {
    v5 = 1;
    do
    {
      if ((v5 & 1) == 0)
        sub_20AEC01D0(a1, (uint64_t)", ", 2);
      v6 = sub_20AEC01D0(a1, (uint64_t)"{label = ", 9);
      v7 = *((unsigned __int16 *)v4 + 16);
      switch(v7)
      {
        case 'f':
          v8 = "Confidence";
          v9 = 10;
          break;
        case 'e':
          v8 = "Material";
          v9 = 8;
          break;
        case 'd':
          v8 = "Semantic";
          v9 = 8;
          break;
        default:
          v8 = "unknown label";
          v9 = 13;
          break;
      }
      v10 = sub_20AEC01D0(v6, (uint64_t)v8, v9);
      v11 = (unsigned __int8 *)(v4 + 5);
      sub_20AEC01D0(v10, (uint64_t)", list = ", 9);
      v12 = sub_20AEC01D0(a1, (uint64_t)"{value_type = ", 14);
      LODWORD(v90) = 0;
      sub_20AF6A118((uint64_t)&v85, (uint64_t)&v87, (_BYTE *)v4 + 40);
      if ((_DWORD)v90 == -1)
        sub_20AECFAB8();
      v85.__r_.__value_.__r.__words[0] = (std::string::size_type)v86;
      ((void (*)(void **__return_ptr, std::string *, std::string **))off_24C40B6D0[v90])(__p, &v85, &v87);
      if ((_DWORD)v90 != -1)
        ((void (*)(std::string *, std::string **))off_24C40B688[v90])(&v85, &v87);
      if ((v83 & 0x80u) == 0)
        v13 = __p;
      else
        v13 = (void **)__p[0];
      if ((v83 & 0x80u) == 0)
        v14 = v83;
      else
        v14 = (uint64_t)__p[1];
      sub_20AEC01D0(v12, (uint64_t)v13, v14);
      if ((char)v83 < 0)
      {
        operator delete(__p[0]);
        v15 = *v11;
        v16 = (char)v15;
        v17 = (char *)&v88 + 2;
        if (v15 <= 0xC)
        {
LABEL_26:
          v17 = (char *)&v88 + 2;
          if (((0x19EFu >> v15) & 1) != 0)
            v17 = (char *)&v87 + qword_20B5E3080[v16];
        }
      }
      else
      {
        v15 = *v11;
        v16 = (char)v15;
        v17 = (char *)&v88 + 2;
        if (v15 <= 0xC)
          goto LABEL_26;
      }
      if (v17 - (char *)&v87 != 10)
      {
        switch((int)v16)
        {
          case 0:
            v18 = v4[6];
            v19 = (unsigned __int8 *)v4[7];
            if (!v19
              && v18
              && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v20 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
            v84 = 0;
            if (v18 <= 0)
            {
              sub_20AEF9DBC(__p, "{}");
            }
            else
            {
              sub_20AED5B5C(__p, "{");
              std::to_string(&v85, *v19);
              v87 = (std::string *)__p;
              v88 = &v85;
              v89 = __p;
              v90 = &v85;
              v91 = &v85;
              if (v84 == -1)
                sub_20AECFAB8();
              v86[0] = &v87;
              ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
              if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v85.__r_.__value_.__l.__data_);
                v21 = v18 - 1;
                if (v21)
                {
LABEL_301:
                  v75 = v19 + 1;
                  while (1)
                  {
                    v87 = (std::string *)__p;
                    v88 = (std::string *)",";
                    v89 = __p;
                    v90 = (std::string *)",";
                    v91 = (std::string *)",";
                    if (v84 == -1)
                      break;
                    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
                    ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
                    std::to_string(&v85, *v75);
                    v87 = (std::string *)__p;
                    v88 = &v85;
                    v89 = __p;
                    v90 = &v85;
                    v91 = &v85;
                    if (v84 == -1)
                      sub_20AECFAB8();
                    v86[0] = &v87;
                    ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
                    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v85.__r_.__value_.__l.__data_);
                    ++v75;
                    if (!--v21)
                      goto LABEL_280;
                  }
LABEL_323:
                  sub_20AECFAB8();
                }
              }
              else
              {
                v21 = v18 - 1;
                if (v21)
                  goto LABEL_301;
              }
LABEL_280:
              v87 = (std::string *)__p;
              v88 = (std::string *)"}";
              v89 = __p;
              v90 = (std::string *)"}";
              v91 = (std::string *)"}";
              if (v84 == -1)
                goto LABEL_323;
              v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
              ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
            }
            if (v84 == -1)
              sub_20AECFAB8();
            v87 = &v85;
            ((void (*)(void **__return_ptr, std::string **, void **))off_24C40B6D0[v84])(&v79, &v87, __p);
            if (v84 != -1)
              ((void (*)(std::string **, void **))off_24C40B688[v84])(&v87, __p);
            if ((v81 & 0x80u) == 0)
              v69 = &v79;
            else
              v69 = v79;
            if ((v81 & 0x80u) == 0)
              v70 = v81;
            else
              v70 = v80;
LABEL_291:
            sub_20AEC01D0(v20, (uint64_t)v69, v70);
LABEL_292:
            if ((char)v81 < 0)
            {
              v48 = v79;
LABEL_294:
              operator delete(v48);
            }
            break;
          case 1:
            v30 = v4[6];
            v31 = (unsigned __int16 *)v4[7];
            if (v31 || v30 < 2)
            {
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
              if (v30 < 2)
              {
                sub_20AEF9DBC(__p, "{}");
                goto LABEL_155;
              }
            }
            else
            {
              if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
              {
                abort();
              }
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
            }
            sub_20AED5B5C(__p, "{");
            std::to_string(&v85, *v31);
            v87 = (std::string *)__p;
            v88 = &v85;
            v89 = __p;
            v90 = &v85;
            v91 = &v85;
            if (v84 == -1)
              sub_20AECFAB8();
            v86[0] = &v87;
            ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v85.__r_.__value_.__l.__data_);
              v49 = v30 >> 1;
              if (v30 >> 1 != 1)
              {
LABEL_164:
                v57 = v31 + 1;
                v58 = 2 * v49 - 2;
                while (1)
                {
                  v87 = (std::string *)__p;
                  v88 = (std::string *)",";
                  v89 = __p;
                  v90 = (std::string *)",";
                  v91 = (std::string *)",";
                  if (v84 == -1)
                    break;
                  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
                  ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
                  std::to_string(&v85, *v57);
                  v87 = (std::string *)__p;
                  v88 = &v85;
                  v89 = __p;
                  v90 = &v85;
                  v91 = &v85;
                  if (v84 == -1)
                    sub_20AECFAB8();
                  v86[0] = &v87;
                  ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
                  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v85.__r_.__value_.__l.__data_);
                  ++v57;
                  v58 -= 2;
                  if (!v58)
                    goto LABEL_153;
                }
LABEL_311:
                sub_20AECFAB8();
              }
            }
            else
            {
              v49 = v30 >> 1;
              if (v30 >> 1 != 1)
                goto LABEL_164;
            }
LABEL_153:
            v87 = (std::string *)__p;
            v88 = (std::string *)"}";
            v89 = __p;
            v90 = (std::string *)"}";
            v91 = (std::string *)"}";
            if (v84 == -1)
              goto LABEL_311;
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
            ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
LABEL_155:
            if (v84 == -1)
              sub_20AECFAB8();
            v87 = &v85;
            ((void (*)(void **__return_ptr, std::string **, void **))off_24C40B6D0[v84])(&v79, &v87, __p);
            if (v84 != -1)
              ((void (*)(std::string **, void **))off_24C40B688[v84])(&v87, __p);
            if ((v81 & 0x80u) == 0)
              v55 = &v79;
            else
              v55 = v79;
            if ((v81 & 0x80u) == 0)
              v56 = v81;
            else
              v56 = v80;
            goto LABEL_254;
          case 2:
            v34 = v4[6];
            v35 = (unsigned int *)v4[7];
            if (v35 || v34 < 4)
            {
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
              if (v34 < 4)
              {
                sub_20AEF9DBC(__p, "{}");
                goto LABEL_191;
              }
            }
            else
            {
              if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
              {
                abort();
              }
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
            }
            sub_20AED5B5C(__p, "{");
            std::to_string(&v85, *v35);
            v87 = (std::string *)__p;
            v88 = &v85;
            v89 = __p;
            v90 = &v85;
            v91 = &v85;
            if (v84 == -1)
              sub_20AECFAB8();
            v86[0] = &v87;
            ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v85.__r_.__value_.__l.__data_);
              v51 = v34 >> 2;
              if (v34 >> 2 != 1)
              {
LABEL_200:
                v61 = v35 + 1;
                v62 = 4 * v51 - 4;
                while (1)
                {
                  v87 = (std::string *)__p;
                  v88 = (std::string *)",";
                  v89 = __p;
                  v90 = (std::string *)",";
                  v91 = (std::string *)",";
                  if (v84 == -1)
                    break;
                  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
                  ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
                  std::to_string(&v85, *v61);
                  v87 = (std::string *)__p;
                  v88 = &v85;
                  v89 = __p;
                  v90 = &v85;
                  v91 = &v85;
                  if (v84 == -1)
                    sub_20AECFAB8();
                  v86[0] = &v87;
                  ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
                  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v85.__r_.__value_.__l.__data_);
                  ++v61;
                  v62 -= 4;
                  if (!v62)
                    goto LABEL_189;
                }
LABEL_314:
                sub_20AECFAB8();
              }
            }
            else
            {
              v51 = v34 >> 2;
              if (v34 >> 2 != 1)
                goto LABEL_200;
            }
LABEL_189:
            v87 = (std::string *)__p;
            v88 = (std::string *)"}";
            v89 = __p;
            v90 = (std::string *)"}";
            v91 = (std::string *)"}";
            if (v84 == -1)
              goto LABEL_314;
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
            ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
LABEL_191:
            if (v84 == -1)
              sub_20AECFAB8();
            v87 = &v85;
            ((void (*)(void **__return_ptr, std::string **, void **))off_24C40B6D0[v84])(&v79, &v87, __p);
            if (v84 != -1)
              ((void (*)(std::string **, void **))off_24C40B688[v84])(&v87, __p);
            if ((v81 & 0x80u) == 0)
              v55 = &v79;
            else
              v55 = v79;
            if ((v81 & 0x80u) == 0)
              v56 = v81;
            else
              v56 = v80;
            goto LABEL_254;
          case 3:
            v38 = v4[6];
            v39 = (unint64_t *)v4[7];
            if (v39 || v38 < 8)
            {
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
              if (v38 < 8)
              {
                sub_20AEF9DBC(__p, "{}");
                goto LABEL_227;
              }
            }
            else
            {
              if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
              {
                abort();
              }
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
            }
            sub_20AED5B5C(__p, "{");
            std::to_string(&v85, *v39);
            v87 = (std::string *)__p;
            v88 = &v85;
            v89 = __p;
            v90 = &v85;
            v91 = &v85;
            if (v84 == -1)
              sub_20AECFAB8();
            v86[0] = &v87;
            ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v85.__r_.__value_.__l.__data_);
              v53 = v38 >> 3;
              if (v38 >> 3 != 1)
              {
LABEL_236:
                v65 = v39 + 1;
                v66 = 8 * v53 - 8;
                while (1)
                {
                  v87 = (std::string *)__p;
                  v88 = (std::string *)",";
                  v89 = __p;
                  v90 = (std::string *)",";
                  v91 = (std::string *)",";
                  if (v84 == -1)
                    break;
                  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
                  ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
                  std::to_string(&v85, *v65);
                  v87 = (std::string *)__p;
                  v88 = &v85;
                  v89 = __p;
                  v90 = &v85;
                  v91 = &v85;
                  if (v84 == -1)
                    sub_20AECFAB8();
                  v86[0] = &v87;
                  ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
                  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v85.__r_.__value_.__l.__data_);
                  ++v65;
                  v66 -= 8;
                  if (!v66)
                    goto LABEL_225;
                }
LABEL_313:
                sub_20AECFAB8();
              }
            }
            else
            {
              v53 = v38 >> 3;
              if (v38 >> 3 != 1)
                goto LABEL_236;
            }
LABEL_225:
            v87 = (std::string *)__p;
            v88 = (std::string *)"}";
            v89 = __p;
            v90 = (std::string *)"}";
            v91 = (std::string *)"}";
            if (v84 == -1)
              goto LABEL_313;
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
            ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
LABEL_227:
            if (v84 == -1)
              sub_20AECFAB8();
            v87 = &v85;
            ((void (*)(void **__return_ptr, std::string **, void **))off_24C40B6D0[v84])(&v79, &v87, __p);
            if (v84 != -1)
              ((void (*)(std::string **, void **))off_24C40B688[v84])(&v87, __p);
            if ((v81 & 0x80u) == 0)
              v55 = &v79;
            else
              v55 = v79;
            if ((v81 & 0x80u) == 0)
              v56 = v81;
            else
              v56 = v80;
            goto LABEL_254;
          case 5:
            v27 = v4[6];
            v28 = (char *)v4[7];
            if (!v28
              && v27
              && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v20 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
            v84 = 0;
            if (v27 <= 0)
            {
              sub_20AEF9DBC(__p, "{}");
            }
            else
            {
              sub_20AED5B5C(__p, "{");
              std::to_string(&v85, *v28);
              v87 = (std::string *)__p;
              v88 = &v85;
              v89 = __p;
              v90 = &v85;
              v91 = &v85;
              if (v84 == -1)
                sub_20AECFAB8();
              v86[0] = &v87;
              ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
              if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
              {
                operator delete(v85.__r_.__value_.__l.__data_);
                v29 = v27 - 1;
                if (v29)
                {
LABEL_273:
                  v71 = v28 + 1;
                  while (1)
                  {
                    v87 = (std::string *)__p;
                    v88 = (std::string *)",";
                    v89 = __p;
                    v90 = (std::string *)",";
                    v91 = (std::string *)",";
                    if (v84 == -1)
                      break;
                    v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
                    ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
                    std::to_string(&v85, *v71);
                    v87 = (std::string *)__p;
                    v88 = &v85;
                    v89 = __p;
                    v90 = &v85;
                    v91 = &v85;
                    if (v84 == -1)
                      sub_20AECFAB8();
                    v86[0] = &v87;
                    ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
                    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v85.__r_.__value_.__l.__data_);
                    ++v71;
                    if (!--v29)
                      goto LABEL_262;
                  }
LABEL_324:
                  sub_20AECFAB8();
                }
              }
              else
              {
                v29 = v27 - 1;
                if (v29)
                  goto LABEL_273;
              }
LABEL_262:
              v87 = (std::string *)__p;
              v88 = (std::string *)"}";
              v89 = __p;
              v90 = (std::string *)"}";
              v91 = (std::string *)"}";
              if (v84 == -1)
                goto LABEL_324;
              v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
              ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
            }
            if (v84 == -1)
              sub_20AECFAB8();
            v87 = &v85;
            ((void (*)(void **__return_ptr, std::string **, void **))off_24C40B6D0[v84])(&v79, &v87, __p);
            if (v84 != -1)
              ((void (*)(std::string **, void **))off_24C40B688[v84])(&v87, __p);
            if ((v81 & 0x80u) == 0)
              v69 = &v79;
            else
              v69 = v79;
            if ((v81 & 0x80u) == 0)
              v70 = v81;
            else
              v70 = v80;
            goto LABEL_291;
          case 6:
            v32 = v4[6];
            v33 = (__int16 *)v4[7];
            if (v33 || v32 < 2)
            {
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
              if (v32 < 2)
              {
                sub_20AEF9DBC(__p, "{}");
                goto LABEL_173;
              }
            }
            else
            {
              if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
              {
                abort();
              }
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
            }
            sub_20AED5B5C(__p, "{");
            std::to_string(&v85, *v33);
            v87 = (std::string *)__p;
            v88 = &v85;
            v89 = __p;
            v90 = &v85;
            v91 = &v85;
            if (v84 == -1)
              sub_20AECFAB8();
            v86[0] = &v87;
            ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v85.__r_.__value_.__l.__data_);
              v50 = v32 >> 1;
              if (v32 >> 1 != 1)
              {
LABEL_182:
                v59 = v33 + 1;
                v60 = 2 * v50 - 2;
                while (1)
                {
                  v87 = (std::string *)__p;
                  v88 = (std::string *)",";
                  v89 = __p;
                  v90 = (std::string *)",";
                  v91 = (std::string *)",";
                  if (v84 == -1)
                    break;
                  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
                  ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
                  std::to_string(&v85, *v59);
                  v87 = (std::string *)__p;
                  v88 = &v85;
                  v89 = __p;
                  v90 = &v85;
                  v91 = &v85;
                  if (v84 == -1)
                    sub_20AECFAB8();
                  v86[0] = &v87;
                  ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
                  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v85.__r_.__value_.__l.__data_);
                  ++v59;
                  v60 -= 2;
                  if (!v60)
                    goto LABEL_171;
                }
LABEL_312:
                sub_20AECFAB8();
              }
            }
            else
            {
              v50 = v32 >> 1;
              if (v32 >> 1 != 1)
                goto LABEL_182;
            }
LABEL_171:
            v87 = (std::string *)__p;
            v88 = (std::string *)"}";
            v89 = __p;
            v90 = (std::string *)"}";
            v91 = (std::string *)"}";
            if (v84 == -1)
              goto LABEL_312;
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
            ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
LABEL_173:
            if (v84 == -1)
              sub_20AECFAB8();
            v87 = &v85;
            ((void (*)(void **__return_ptr, std::string **, void **))off_24C40B6D0[v84])(&v79, &v87, __p);
            if (v84 != -1)
              ((void (*)(std::string **, void **))off_24C40B688[v84])(&v87, __p);
            if ((v81 & 0x80u) == 0)
              v55 = &v79;
            else
              v55 = v79;
            if ((v81 & 0x80u) == 0)
              v56 = v81;
            else
              v56 = v80;
            goto LABEL_254;
          case 7:
            v40 = v4[6];
            v41 = (int *)v4[7];
            if (v41 || v40 < 4)
            {
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
              if (v40 < 4)
              {
                sub_20AEF9DBC(__p, "{}");
                goto LABEL_245;
              }
            }
            else
            {
              if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
              {
                abort();
              }
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
            }
            sub_20AED5B5C(__p, "{");
            std::to_string(&v85, *v41);
            v87 = (std::string *)__p;
            v88 = &v85;
            v89 = __p;
            v90 = &v85;
            v91 = &v85;
            if (v84 == -1)
              sub_20AECFAB8();
            v86[0] = &v87;
            ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v85.__r_.__value_.__l.__data_);
              v54 = v40 >> 2;
              if (v40 >> 2 != 1)
              {
LABEL_255:
                v67 = v41 + 1;
                v68 = 4 * v54 - 4;
                while (1)
                {
                  v87 = (std::string *)__p;
                  v88 = (std::string *)",";
                  v89 = __p;
                  v90 = (std::string *)",";
                  v91 = (std::string *)",";
                  if (v84 == -1)
                    break;
                  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
                  ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
                  std::to_string(&v85, *v67);
                  v87 = (std::string *)__p;
                  v88 = &v85;
                  v89 = __p;
                  v90 = &v85;
                  v91 = &v85;
                  if (v84 == -1)
                    sub_20AECFAB8();
                  v86[0] = &v87;
                  ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
                  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v85.__r_.__value_.__l.__data_);
                  ++v67;
                  v68 -= 4;
                  if (!v68)
                    goto LABEL_243;
                }
LABEL_315:
                sub_20AECFAB8();
              }
            }
            else
            {
              v54 = v40 >> 2;
              if (v40 >> 2 != 1)
                goto LABEL_255;
            }
LABEL_243:
            v87 = (std::string *)__p;
            v88 = (std::string *)"}";
            v89 = __p;
            v90 = (std::string *)"}";
            v91 = (std::string *)"}";
            if (v84 == -1)
              goto LABEL_315;
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
            ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
LABEL_245:
            if (v84 == -1)
              sub_20AECFAB8();
            v87 = &v85;
            ((void (*)(void **__return_ptr, std::string **, void **))off_24C40B6D0[v84])(&v79, &v87, __p);
            if (v84 != -1)
              ((void (*)(std::string **, void **))off_24C40B688[v84])(&v87, __p);
            if ((v81 & 0x80u) == 0)
              v55 = &v79;
            else
              v55 = v79;
            if ((v81 & 0x80u) == 0)
              v56 = v81;
            else
              v56 = v80;
LABEL_254:
            sub_20AEC01D0(v77, (uint64_t)v55, v56);
            goto LABEL_292;
          case 8:
            v36 = v4[6];
            v37 = (uint64_t *)v4[7];
            if (v37 || v36 < 8)
            {
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
              if (v36 < 8)
              {
                sub_20AEF9DBC(__p, "{}");
                goto LABEL_209;
              }
            }
            else
            {
              if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
              {
                abort();
              }
              v77 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
            }
            sub_20AED5B5C(__p, "{");
            std::to_string(&v85, *v37);
            v87 = (std::string *)__p;
            v88 = &v85;
            v89 = __p;
            v90 = &v85;
            v91 = &v85;
            if (v84 == -1)
              sub_20AECFAB8();
            v86[0] = &v87;
            ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
            if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(v85.__r_.__value_.__l.__data_);
              v52 = v36 >> 3;
              if (v36 >> 3 != 1)
              {
LABEL_218:
                v63 = v37 + 1;
                v64 = 8 * v52 - 8;
                while (1)
                {
                  v87 = (std::string *)__p;
                  v88 = (std::string *)",";
                  v89 = __p;
                  v90 = (std::string *)",";
                  v91 = (std::string *)",";
                  if (v84 == -1)
                    break;
                  v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
                  ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
                  std::to_string(&v85, *v63);
                  v87 = (std::string *)__p;
                  v88 = &v85;
                  v89 = __p;
                  v90 = &v85;
                  v91 = &v85;
                  if (v84 == -1)
                    sub_20AECFAB8();
                  v86[0] = &v87;
                  ((void (*)(_QWORD *, void **))off_24C40B6B8[v84])(v86, __p);
                  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v85.__r_.__value_.__l.__data_);
                  ++v63;
                  v64 -= 8;
                  if (!v64)
                    goto LABEL_207;
                }
LABEL_316:
                sub_20AECFAB8();
              }
            }
            else
            {
              v52 = v36 >> 3;
              if (v36 >> 3 != 1)
                goto LABEL_218;
            }
LABEL_207:
            v87 = (std::string *)__p;
            v88 = (std::string *)"}";
            v89 = __p;
            v90 = (std::string *)"}";
            v91 = (std::string *)"}";
            if (v84 == -1)
              goto LABEL_316;
            v85.__r_.__value_.__r.__words[0] = (std::string::size_type)&v87;
            ((void (*)(std::string *, void **))off_24C40B6A0[v84])(&v85, __p);
LABEL_209:
            if (v84 == -1)
              sub_20AECFAB8();
            v87 = &v85;
            ((void (*)(void **__return_ptr, std::string **, void **))off_24C40B6D0[v84])(&v79, &v87, __p);
            if (v84 != -1)
              ((void (*)(std::string **, void **))off_24C40B688[v84])(&v87, __p);
            if ((v81 & 0x80u) == 0)
              v55 = &v79;
            else
              v55 = v79;
            if ((v81 & 0x80u) == 0)
              v56 = v81;
            else
              v56 = v80;
            goto LABEL_254;
          case 11:
            v25 = v4[6];
            v26 = (float *)v4[7];
            if (v26 || v25 < 4)
            {
              v24 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
              if (v25 < 4)
              {
                sub_20AEF9DBC(__p, "{}");
                goto LABEL_103;
              }
            }
            else
            {
              if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
              {
                abort();
              }
              v24 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
            }
            sub_20AED5B5C(__p, "{");
            sub_20AF57AB0((uint64_t)&v87, (uint64_t)__p, v26);
            if (v25 >> 2 != 1)
            {
              v46 = v26 + 1;
              v47 = 4 * (v25 >> 2) - 4;
              while (1)
              {
                v87 = (std::string *)__p;
                v88 = (std::string *)",";
                v89 = __p;
                v90 = (std::string *)",";
                v91 = (std::string *)",";
                if (v84 == -1)
                  break;
                v79 = &v87;
                ((void (*)(void **, void **))off_24C40B6A0[v84])(&v79, __p);
                sub_20AF57AB0((uint64_t)&v87, (uint64_t)__p, v46++);
                v47 -= 4;
                if (!v47)
                  goto LABEL_101;
              }
LABEL_310:
              sub_20AECFAB8();
            }
LABEL_101:
            v87 = (std::string *)__p;
            v88 = (std::string *)"}";
            v89 = __p;
            v90 = (std::string *)"}";
            v91 = (std::string *)"}";
            if (v84 == -1)
              goto LABEL_310;
            v79 = &v87;
            ((void (*)(void **, void **))off_24C40B6A0[v84])(&v79, __p);
LABEL_103:
            if (v84 == -1)
              sub_20AECFAB8();
            v87 = (std::string *)&v79;
            ((void (*)(std::string *__return_ptr, std::string **, void **))off_24C40B6D0[v84])(&v85, &v87, __p);
            if (v84 != -1)
              ((void (*)(std::string **, void **))off_24C40B688[v84])(&v87, __p);
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = &v85;
            else
              v44 = (std::string *)v85.__r_.__value_.__r.__words[0];
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
            else
              size = v85.__r_.__value_.__l.__size_;
LABEL_112:
            sub_20AEC01D0(v24, (uint64_t)v44, size);
            if ((SHIBYTE(v85.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
              break;
            v48 = (void *)v85.__r_.__value_.__r.__words[0];
            goto LABEL_294;
          case 12:
            v22 = v4[6];
            v23 = (double *)v4[7];
            if (v23 || v22 < 8)
            {
              v24 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
              if (v22 < 8)
              {
                sub_20AEF9DBC(__p, "{}");
                goto LABEL_86;
              }
            }
            else
            {
              if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
              {
                abort();
              }
              v24 = sub_20AEC01D0(a1, (uint64_t)", values = ", 11);
              v84 = 0;
            }
            sub_20AED5B5C(__p, "{");
            sub_20AF55CBC((uint64_t)&v87, (uint64_t)__p, v23);
            if (v22 >> 3 != 1)
            {
              v42 = v23 + 1;
              v43 = 8 * (v22 >> 3) - 8;
              while (1)
              {
                v87 = (std::string *)__p;
                v88 = (std::string *)",";
                v89 = __p;
                v90 = (std::string *)",";
                v91 = (std::string *)",";
                if (v84 == -1)
                  break;
                v79 = &v87;
                ((void (*)(void **, void **))off_24C40B6A0[v84])(&v79, __p);
                sub_20AF55CBC((uint64_t)&v87, (uint64_t)__p, v42++);
                v43 -= 8;
                if (!v43)
                  goto LABEL_84;
              }
LABEL_309:
              sub_20AECFAB8();
            }
LABEL_84:
            v87 = (std::string *)__p;
            v88 = (std::string *)"}";
            v89 = __p;
            v90 = (std::string *)"}";
            v91 = (std::string *)"}";
            if (v84 == -1)
              goto LABEL_309;
            v79 = &v87;
            ((void (*)(void **, void **))off_24C40B6A0[v84])(&v79, __p);
LABEL_86:
            if (v84 == -1)
              sub_20AECFAB8();
            v87 = (std::string *)&v79;
            ((void (*)(std::string *__return_ptr, std::string **, void **))off_24C40B6D0[v84])(&v85, &v87, __p);
            if (v84 != -1)
              ((void (*)(std::string **, void **))off_24C40B688[v84])(&v87, __p);
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v44 = &v85;
            else
              v44 = (std::string *)v85.__r_.__value_.__r.__words[0];
            if ((v85.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = HIBYTE(v85.__r_.__value_.__r.__words[2]);
            else
              size = v85.__r_.__value_.__l.__size_;
            goto LABEL_112;
          default:
            sub_20B521E58(v15);
        }
      }
      sub_20AEC01D0(a1, (uint64_t)"}", 1);
      sub_20AEC01D0(a1, (uint64_t)"}", 1);
      v72 = (_QWORD *)v4[1];
      if (v72)
      {
        do
        {
          v73 = v72;
          v72 = (_QWORD *)*v72;
        }
        while (v72);
      }
      else
      {
        do
        {
          v73 = (_QWORD *)v4[2];
          v74 = *v73 == (_QWORD)v4;
          v4 = v73;
        }
        while (!v74);
      }
      v5 = 0;
      v4 = v73;
    }
    while (v73 != v78);
  }
  return sub_20AEC01D0(a1, (uint64_t)"}", 1);
}

void sub_20B080630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,int a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31,int a32,int a33,__int16 a34,char a35,char a36,char a37,uint64_t a38,uint64_t a39,int a40)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

BOOL sub_20B080AC0(_BOOL8 result, uint64_t a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  _BOOL8 v6;
  unint64_t v8;
  uint64_t v9;
  std::logic_error *exception;
  std::string v12;
  uint64_t v13;

  v6 = result;
  v13 = a6;
  if (a3 == 2)
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result) >> 2);
    if ((_DWORD)v8)
      v9 = 3;
    else
      v9 = 0;
    if ((_DWORD)v9 * (_DWORD)v8 == -1)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
      a4 = a5;
      if (result)
        goto LABEL_17;
    }
    else
    {
      a4 = a5;
    }
  }
  else
  {
    if (a3 != 1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_20B085878((uint64_t)&v12, (const char *)&v13);
      std::logic_error::logic_error(exception, &v12);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    v8 = 0xAAAAAAAAAAAAAAABLL * ((a2 - result) >> 2);
    if ((_DWORD)v8)
      v9 = 3;
    else
      v9 = 0;
    if ((_DWORD)v9 * (_DWORD)v8 == -1)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
      if (result)
LABEL_17:
        abort();
    }
  }
  *(_QWORD *)a4 = v6;
  *(_QWORD *)(a4 + 8) = (v8 << 32) | 3;
  *(_QWORD *)(a4 + 16) = (v9 << 32) | 1;
  *(_DWORD *)(a4 + 24) = v8;
  *(_DWORD *)(a4 + 28) = v9;
  return result;
}

void sub_20B080C58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  void *v14;
  int v15;

  if (a14 < 0)
  {
    operator delete(__p);
    if ((v15 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v15)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v14);
  goto LABEL_6;
}

uint64_t *sub_20B080C90(uint64_t *result, uint64_t *a2, uint64_t a3, int a4, unsigned int a5)
{
  _QWORD **v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t **v11;
  uint64_t **v12;
  unsigned int v13;
  _WORD *v14;
  _QWORD *v15;
  uint64_t *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t **v19;
  unsigned int v20;
  _QWORD *v21;
  uint64_t *v22;
  std::logic_error *exception;
  uint64_t v24[3];
  std::string v25;
  unsigned __int16 v26;

  v8 = (_QWORD **)result;
  v26 = a5;
  if (a4 != 2)
  {
    if (a4 != 1)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      sub_20B086000((uint64_t)v24, &v26);
      sub_20B085F60(&v25, v24);
      std::logic_error::logic_error(exception, &v25);
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    if (a2
      || !a3
      || (result = (uint64_t *)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360), !(_DWORD)result))
    {
      v9 = (uint64_t *)(a3 - (_QWORD)a2);
      v11 = v8 + 25;
      v10 = v8[25];
      if (!v10)
      {
        v12 = v8 + 25;
LABEL_13:
        v14 = operator new(0x40uLL);
        v14[16] = a5;
        *((_QWORD *)v14 + 6) = 0;
        *((_QWORD *)v14 + 7) = 0;
        *((_QWORD *)v14 + 5) = 0;
        *(_QWORD *)v14 = 0;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = v12;
        *v11 = (uint64_t *)v14;
        v15 = (_QWORD *)*v8[24];
        v16 = (uint64_t *)v14;
        if (v15)
        {
          v8[24] = v15;
          v16 = *v11;
        }
        result = sub_20AEC84C8(v8[25], v16);
        v17 = v8 + 26;
LABEL_29:
        ++*v17;
        v12 = (uint64_t **)v14;
        goto LABEL_30;
      }
      while (1)
      {
        while (1)
        {
          v12 = (uint64_t **)v10;
          v13 = *((unsigned __int16 *)v10 + 16);
          if (v13 <= a5)
            break;
          v10 = *v12;
          v11 = v12;
          if (!*v12)
            goto LABEL_13;
        }
        if (v13 >= a5)
          goto LABEL_30;
        v10 = v12[1];
        if (!v10)
        {
          v11 = v12 + 1;
          goto LABEL_13;
        }
      }
    }
LABEL_32:
    abort();
  }
  if (!a2)
  {
    if (a3)
    {
      result = (uint64_t *)sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
      if ((_DWORD)result)
        goto LABEL_32;
    }
  }
  v9 = (uint64_t *)(a3 - (_QWORD)a2);
  v19 = v8 + 28;
  v18 = v8[28];
  if (!v18)
  {
    v12 = v8 + 28;
LABEL_26:
    v14 = operator new(0x40uLL);
    v14[16] = a5;
    *((_QWORD *)v14 + 6) = 0;
    *((_QWORD *)v14 + 7) = 0;
    *((_QWORD *)v14 + 5) = 0;
    *(_QWORD *)v14 = 0;
    *((_QWORD *)v14 + 1) = 0;
    *((_QWORD *)v14 + 2) = v12;
    *v19 = (uint64_t *)v14;
    v21 = (_QWORD *)*v8[27];
    v22 = (uint64_t *)v14;
    if (v21)
    {
      v8[27] = v21;
      v22 = *v19;
    }
    result = sub_20AEC84C8(v8[28], v22);
    v17 = v8 + 29;
    goto LABEL_29;
  }
  while (1)
  {
    while (1)
    {
      v12 = (uint64_t **)v18;
      v20 = *((unsigned __int16 *)v18 + 16);
      if (v20 <= a5)
        break;
      v18 = *v12;
      v19 = v12;
      if (!*v12)
        goto LABEL_26;
    }
    if (v20 >= a5)
      break;
    v18 = v12[1];
    if (!v18)
    {
      v19 = v12 + 1;
      goto LABEL_26;
    }
  }
LABEL_30:
  *((_BYTE *)v12 + 40) = 0;
  v12[6] = v9;
  v12[7] = a2;
  return result;
}

void sub_20B080F00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  void *v21;
  int v22;

  if (a21 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v22 & 1) == 0)
LABEL_8:
      _Unwind_Resume(a1);
  }
  else if (!v22)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v21);
  goto LABEL_8;
}

uint64_t sub_20B080F60(uint64_t a1)
{
  sub_20AF22AAC(a1 + 216, *(_QWORD **)(a1 + 224));
  sub_20AF22AAC(a1 + 192, *(_QWORD **)(a1 + 200));
  return a1;
}

uint64_t sub_20B080F98(uint64_t ***a1, uint64_t a2, uint64_t a3, unsigned int a4, unsigned int a5)
{
  __int16 v5;
  char v8;
  uint64_t v10;
  unsigned __int16 *v11;
  uint64_t **v12;
  _QWORD *v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t result;
  uint64_t *v19;
  uint64_t **v20;
  uint64_t **v21;
  uint64_t *v22;
  unsigned int v23;
  BOOL v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t **v28;
  uint64_t **v29;
  uint64_t *v30;
  unsigned int v31;
  BOOL v32;
  uint64_t **v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t **v36;
  BOOL v37;
  uint64_t **v38;

  v5 = a4;
  if (a2)
  {
    if (a3)
    {
      v8 = a5;
      if (a5 >= 0xD || ((0x19EFu >> a5) & 1) == 0)
        sub_20B521E58(a5);
      v10 = qword_20B5E30E8[(char)a5] * a3;
      v12 = (uint64_t **)(a1 + 1);
      v11 = (unsigned __int16 *)a1[1];
      if (v11)
      {
        while (1)
        {
          while (1)
          {
            v13 = v11;
            v14 = v11[16];
            if (v14 <= a4)
              break;
            v11 = (unsigned __int16 *)*v13;
            v12 = (uint64_t **)v13;
            if (!*v13)
              goto LABEL_12;
          }
          if (v14 >= a4)
            break;
          v11 = (unsigned __int16 *)v13[1];
          if (!v11)
          {
            v12 = (uint64_t **)(v13 + 1);
            goto LABEL_12;
          }
        }
      }
      else
      {
        v13 = a1 + 1;
LABEL_12:
        v15 = v13;
        v13 = operator new(0x40uLL);
        *((_WORD *)v13 + 16) = v5;
        v13[6] = 0;
        v13[7] = 0;
        v13[5] = 0;
        *v13 = 0;
        v13[1] = 0;
        v13[2] = v15;
        *v12 = v13;
        v16 = **a1;
        v17 = v13;
        if (v16)
        {
          *a1 = (uint64_t **)v16;
          v17 = *v12;
        }
        sub_20AEC84C8((uint64_t *)a1[1], v17);
        a1[2] = (uint64_t **)((char *)a1[2] + 1);
      }
      *((_BYTE *)v13 + 40) = v8;
      result = 1;
      v13[6] = v10;
      v13[7] = a2;
    }
    else
    {
      v28 = (uint64_t **)(a1 + 1);
      result = (uint64_t)a1[1];
      if (result)
      {
        v29 = (uint64_t **)(a1 + 1);
        v30 = (uint64_t *)a1[1];
        do
        {
          v31 = *((unsigned __int16 *)v30 + 16);
          v32 = v31 >= a4;
          if (v31 >= a4)
            v33 = (uint64_t **)v30;
          else
            v33 = (uint64_t **)(v30 + 1);
          if (v32)
            v29 = (uint64_t **)v30;
          v30 = *v33;
        }
        while (*v33);
        if (v29 != v28 && *((unsigned __int16 *)v29 + 16) <= a4)
        {
          v34 = v29[1];
          if (v34)
          {
            do
            {
              v35 = v34;
              v34 = (uint64_t *)*v34;
            }
            while (v34);
          }
          else
          {
            v38 = v29;
            do
            {
              v35 = v38[2];
              v37 = *v35 == (_QWORD)v38;
              v38 = (uint64_t **)v35;
            }
            while (!v37);
          }
          if (*a1 == v29)
            *a1 = (uint64_t **)v35;
          a1[2] = (uint64_t **)((char *)a1[2] - 1);
          sub_20AEC867C((uint64_t *)result, (uint64_t *)v29);
          operator delete(v29);
        }
        return 0;
      }
    }
  }
  else
  {
    v20 = (uint64_t **)(a1 + 1);
    v19 = (uint64_t *)a1[1];
    if (v19)
    {
      v21 = (uint64_t **)(a1 + 1);
      v22 = (uint64_t *)a1[1];
      do
      {
        v23 = *((unsigned __int16 *)v22 + 16);
        v24 = v23 >= a4;
        if (v23 >= a4)
          v25 = (uint64_t **)v22;
        else
          v25 = (uint64_t **)(v22 + 1);
        if (v24)
          v21 = (uint64_t **)v22;
        v22 = *v25;
      }
      while (*v25);
      if (v21 != v20 && *((unsigned __int16 *)v21 + 16) <= a4)
      {
        v26 = v21[1];
        if (v26)
        {
          do
          {
            v27 = v26;
            v26 = (uint64_t *)*v26;
          }
          while (v26);
        }
        else
        {
          v36 = v21;
          do
          {
            v27 = v36[2];
            v37 = *v27 == (_QWORD)v36;
            v36 = (uint64_t **)v27;
          }
          while (!v37);
        }
        if (*a1 == v21)
          *a1 = (uint64_t **)v27;
        a1[2] = (uint64_t **)((char *)a1[2] - 1);
        sub_20AEC867C(v19, (uint64_t *)v21);
        operator delete(v21);
      }
    }
    return a3 == 0;
  }
  return result;
}

void sub_20B081230(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *__dst[2];
  uint64_t v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  _DWORD v37[6];
  int v38;
  std::string v39;
  std::string **v40;
  std::string *v41;
  std::string *v42;
  _DWORD *v43;
  std::string *v44;
  std::string *v45;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 208);
  if (v5 > a2)
  {
    v6 = *(_QWORD **)(a1 + 192);
    if ((a2 & 0x8000000000000000) != 0)
    {
      do
      {
        v12 = (_QWORD *)*v6;
        if (*v6)
        {
          do
          {
            v7 = v12;
            v12 = (_QWORD *)v12[1];
          }
          while (v12);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v6[2];
            v10 = *v7 == (_QWORD)v6;
            v6 = v7;
          }
          while (v10);
        }
        v6 = v7;
      }
      while (!__CFADD__(v3++, 1));
    }
    else if (a2)
    {
      do
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
            v7 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v6[2];
            v10 = *v7 == (_QWORD)v6;
            v6 = v7;
          }
          while (!v10);
        }
        v6 = v7;
      }
      while (v3-- > 1);
    }
    else
    {
      v7 = *(_QWORD **)(a1 + 192);
    }
    *(_WORD *)a3 = *((_WORD *)v7 + 16);
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v38 = 0;
  sub_20AFB1764(v37, "given index is ");
  std::to_string(&v39, v3);
  v41 = (std::string *)v37;
  v42 = &v39;
  v43 = v37;
  v44 = &v39;
  v45 = &v39;
  if (v38 == -1)
    sub_20AECFAB8();
  v40 = &v41;
  ((void (*)(std::string ***, _DWORD *))off_24C40B6B8[v38])(&v40, v37);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v41 = (std::string *)v37;
  v42 = (std::string *)" but mesh contains only ";
  v43 = v37;
  v44 = (std::string *)" but mesh contains only ";
  v45 = (std::string *)" but mesh contains only ";
  if (v38 == -1)
    sub_20AECFAB8();
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  ((void (*)(std::string *, _DWORD *))off_24C40B828[v38])(&v39, v37);
  std::to_string(&v39, v5);
  v41 = (std::string *)v37;
  v42 = &v39;
  v43 = v37;
  v44 = &v39;
  v45 = &v39;
  if (v38 == -1)
    sub_20AECFAB8();
  v40 = &v41;
  ((void (*)(std::string ***, _DWORD *))off_24C40B6B8[v38])(&v40, v37);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v41 = (std::string *)v37;
  v42 = (std::string *)" vertex label lists";
  v43 = v37;
  v44 = (std::string *)" vertex label lists";
  v45 = (std::string *)" vertex label lists";
  if (v38 == -1)
    sub_20AECFAB8();
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  ((void (*)(std::string *, _DWORD *))off_24C40B840[v38])(&v39, v37);
  if (v38 == -1)
    sub_20AECFAB8();
  v41 = &v39;
  ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24C40B6D0[v38])(v15, &v41, v37);
  if (v38 != -1)
    ((void (*)(std::string **, _DWORD *))off_24C40B688[v38])(&v41, v37);
  if (SHIBYTE(v16) < 0)
  {
    sub_20AEC60F4(__dst, v15[0], (unint64_t)v15[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v15;
    v18 = v16;
  }
  v19 = 1;
  LOBYTE(v20) = 0;
  v24 = 0;
  v25 = 1;
  sub_20AECCC3C(0x11u, (__int128 *)__dst, (uint64_t)&v26);
  *(_OWORD *)a3 = v26;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v13 = v29;
    if (v29)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v35)
    {
      v14 = v32;
      *(_QWORD *)(a3 + 64) = v31;
      *(_OWORD *)(a3 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a3 + 72) = v14;
      *(_OWORD *)(a3 + 80) = v33;
      *(_QWORD *)(a3 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v13 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
    if (!v25)
      goto LABEL_51;
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v25)
      goto LABEL_51;
  }
  if (!v24)
    goto LABEL_48;
  if (v23 < 0)
  {
    operator delete(v22);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_48:
      if (v19)
        goto LABEL_49;
      goto LABEL_51;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_48;
  }
  operator delete(v20);
  if (v19)
  {
LABEL_49:
    if (SHIBYTE(v18) < 0)
      operator delete(__dst[0]);
  }
LABEL_51:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B081674(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0816A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECFA60(v1 - 152);
  _Unwind_Resume(a1);
}

void sub_20B0816F4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v9;
  BOOL v10;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *__dst[2];
  uint64_t v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  _DWORD v37[6];
  int v38;
  std::string v39;
  std::string **v40;
  std::string *v41;
  std::string *v42;
  _DWORD *v43;
  std::string *v44;
  std::string *v45;

  v3 = a2;
  v5 = *(_QWORD *)(a1 + 232);
  if (v5 > a2)
  {
    v6 = *(_QWORD **)(a1 + 216);
    if ((a2 & 0x8000000000000000) != 0)
    {
      do
      {
        v12 = (_QWORD *)*v6;
        if (*v6)
        {
          do
          {
            v7 = v12;
            v12 = (_QWORD *)v12[1];
          }
          while (v12);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v6[2];
            v10 = *v7 == (_QWORD)v6;
            v6 = v7;
          }
          while (v10);
        }
        v6 = v7;
      }
      while (!__CFADD__(v3++, 1));
    }
    else if (a2)
    {
      do
      {
        v9 = (_QWORD *)v6[1];
        if (v9)
        {
          do
          {
            v7 = v9;
            v9 = (_QWORD *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            v7 = (_QWORD *)v6[2];
            v10 = *v7 == (_QWORD)v6;
            v6 = v7;
          }
          while (!v10);
        }
        v6 = v7;
      }
      while (v3-- > 1);
    }
    else
    {
      v7 = *(_QWORD **)(a1 + 216);
    }
    *(_WORD *)a3 = *((_WORD *)v7 + 16);
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v38 = 0;
  sub_20AFB1764(v37, "given index is ");
  std::to_string(&v39, v3);
  v41 = (std::string *)v37;
  v42 = &v39;
  v43 = v37;
  v44 = &v39;
  v45 = &v39;
  if (v38 == -1)
    sub_20AECFAB8();
  v40 = &v41;
  ((void (*)(std::string ***, _DWORD *))off_24C40B6B8[v38])(&v40, v37);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v41 = (std::string *)v37;
  v42 = (std::string *)" but mesh contains only ";
  v43 = v37;
  v44 = (std::string *)" but mesh contains only ";
  v45 = (std::string *)" but mesh contains only ";
  if (v38 == -1)
    sub_20AECFAB8();
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  ((void (*)(std::string *, _DWORD *))off_24C40B828[v38])(&v39, v37);
  std::to_string(&v39, v5);
  v41 = (std::string *)v37;
  v42 = &v39;
  v43 = v37;
  v44 = &v39;
  v45 = &v39;
  if (v38 == -1)
    sub_20AECFAB8();
  v40 = &v41;
  ((void (*)(std::string ***, _DWORD *))off_24C40B6B8[v38])(&v40, v37);
  if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v39.__r_.__value_.__l.__data_);
  v41 = (std::string *)v37;
  v42 = (std::string *)" face label lists";
  v43 = v37;
  v44 = (std::string *)" face label lists";
  v45 = (std::string *)" face label lists";
  if (v38 == -1)
    sub_20AECFAB8();
  v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v41;
  ((void (*)(std::string *, _DWORD *))off_24C40B858[v38])(&v39, v37);
  if (v38 == -1)
    sub_20AECFAB8();
  v41 = &v39;
  ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24C40B6D0[v38])(v15, &v41, v37);
  if (v38 != -1)
    ((void (*)(std::string **, _DWORD *))off_24C40B688[v38])(&v41, v37);
  if (SHIBYTE(v16) < 0)
  {
    sub_20AEC60F4(__dst, v15[0], (unint64_t)v15[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v15;
    v18 = v16;
  }
  v19 = 1;
  LOBYTE(v20) = 0;
  v24 = 0;
  v25 = 1;
  sub_20AECCC3C(0x11u, (__int128 *)__dst, (uint64_t)&v26);
  *(_OWORD *)a3 = v26;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v13 = v29;
    if (v29)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v35)
    {
      v14 = v32;
      *(_QWORD *)(a3 + 64) = v31;
      *(_OWORD *)(a3 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a3 + 72) = v14;
      *(_OWORD *)(a3 + 80) = v33;
      *(_QWORD *)(a3 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v13 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
    if (!v25)
      goto LABEL_51;
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v25)
      goto LABEL_51;
  }
  if (!v24)
    goto LABEL_48;
  if (v23 < 0)
  {
    operator delete(v22);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_48:
      if (v19)
        goto LABEL_49;
      goto LABEL_51;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_48;
  }
  operator delete(v20);
  if (v19)
  {
LABEL_49:
    if (SHIBYTE(v18) < 0)
      operator delete(__dst[0]);
  }
LABEL_51:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B081B38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B081B68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECFA60(v1 - 152);
  _Unwind_Resume(a1);
}

uint64_t sub_20B081BB8(uint64_t a1, uint64_t a2)
{
  int v2;
  int v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  float *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  float *v17;
  float *v18;
  int v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _DWORD *v25;
  _DWORD *v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _DWORD *v33;
  _DWORD *v34;
  int v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  float *v41;
  float *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  float *v49;
  float *v50;
  int v51;
  int v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  float *v57;
  float *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  float *v63;
  float *v64;
  int v65;
  int v66;
  int v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  float *v71;
  float *v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  float *v79;
  float *v80;
  int v81;
  int v82;
  int v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  float *v87;
  float *v88;
  int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  float *v95;
  float *v96;
  int v97;

  v2 = *(_DWORD *)(a1 + 8);
  if (v2 != *(_DWORD *)(a2 + 8))
    return 0;
  v5 = *(_DWORD *)(a1 + 12);
  if (v5 != *(_DWORD *)(a2 + 12))
    return 0;
  if (*(_DWORD *)(a1 + 24))
  {
    v6 = v2 - 1;
    v7 = *(unsigned int *)(a1 + 16);
    v8 = *(unsigned int *)(a2 + 16);
    v9 = *(float **)a1;
    v10 = *(float **)a2;
    v11 = v5 - 1;
    if (v11)
    {
      v12 = *(unsigned int *)(a1 + 20);
      v13 = *(unsigned int *)(a2 + 20);
      if (v6)
      {
        v14 = 0;
        v15 = 4 * v12;
        v16 = 4 * v13;
LABEL_7:
        v17 = v10;
        v18 = v9;
        v19 = v6;
        while (*v18 == *v17)
        {
          v18 += v7;
          v17 += v8;
          if (!--v19)
          {
            if (*v18 != *v17)
              return 0;
            v9 = (float *)((char *)v9 + v15);
            v10 = (float *)((char *)v10 + v16);
            if (++v14 != v11)
              goto LABEL_7;
            goto LABEL_12;
          }
        }
      }
      else
      {
        while (*v9 == *v10)
        {
          v9 += v12;
          v10 += v13;
          if (!--v11)
            goto LABEL_20;
        }
      }
      return 0;
    }
LABEL_12:
    if (v6)
    {
      while (*v9 == *v10)
      {
        v9 += v7;
        v10 += v8;
        if (!--v6)
          goto LABEL_20;
      }
      return 0;
    }
LABEL_20:
    if (*v9 != *v10)
      return 0;
  }
  else if (*(_DWORD *)(a2 + 24))
  {
    return 0;
  }
  v20 = *(_DWORD *)(a1 + 40);
  if (v20 != *(_DWORD *)(a2 + 40))
    return 0;
  v21 = *(_DWORD *)(a1 + 44);
  if (v21 != *(_DWORD *)(a2 + 44))
    return 0;
  if (*(_DWORD *)(a1 + 56))
  {
    v22 = v20 - 1;
    v23 = *(unsigned int *)(a1 + 48);
    v24 = *(unsigned int *)(a2 + 48);
    v25 = *(_DWORD **)(a1 + 32);
    v26 = *(_DWORD **)(a2 + 32);
    v27 = v21 - 1;
    if (v27)
    {
      v28 = *(unsigned int *)(a1 + 52);
      v29 = *(unsigned int *)(a2 + 52);
      if (v22)
      {
        v30 = 0;
        v31 = 4 * v28;
        v32 = 4 * v29;
LABEL_27:
        v33 = v26;
        v34 = v25;
        v35 = v22;
        while (*v34 == *v33)
        {
          v34 += v23;
          v33 += v24;
          if (!--v35)
          {
            if (*v34 != *v33)
              return 0;
            v25 = (_DWORD *)((char *)v25 + v31);
            v26 = (_DWORD *)((char *)v26 + v32);
            if (++v30 != v27)
              goto LABEL_27;
            goto LABEL_32;
          }
        }
      }
      else
      {
        while (*v25 == *v26)
        {
          v25 += v28;
          v26 += v29;
          if (!--v27)
            goto LABEL_40;
        }
      }
      return 0;
    }
LABEL_32:
    if (v22)
    {
      while (*v25 == *v26)
      {
        v25 += v23;
        v26 += v24;
        if (!--v22)
          goto LABEL_40;
      }
      return 0;
    }
LABEL_40:
    if (*v25 != *v26)
      return 0;
  }
  else if (*(_DWORD *)(a2 + 56))
  {
    return 0;
  }
  v36 = *(_DWORD *)(a1 + 136);
  if (v36 != *(_DWORD *)(a2 + 136))
    return 0;
  v37 = *(_DWORD *)(a1 + 140);
  if (v37 != *(_DWORD *)(a2 + 140))
    return 0;
  if (*(_DWORD *)(a1 + 152))
  {
    v38 = v36 - 1;
    v39 = *(unsigned int *)(a1 + 144);
    v40 = *(unsigned int *)(a2 + 144);
    v41 = *(float **)(a1 + 128);
    v42 = *(float **)(a2 + 128);
    v43 = v37 - 1;
    if (v43)
    {
      v44 = *(unsigned int *)(a1 + 148);
      v45 = *(unsigned int *)(a2 + 148);
      if (v38)
      {
        v46 = 0;
        v47 = 4 * v44;
        v48 = 4 * v45;
LABEL_47:
        v49 = v42;
        v50 = v41;
        v51 = v38;
        while (*v50 == *v49)
        {
          v50 += v39;
          v49 += v40;
          if (!--v51)
          {
            if (*v50 != *v49)
              return 0;
            v41 = (float *)((char *)v41 + v47);
            v42 = (float *)((char *)v42 + v48);
            if (++v46 != v43)
              goto LABEL_47;
            goto LABEL_52;
          }
        }
      }
      else
      {
        while (*v41 == *v42)
        {
          v41 += v44;
          v42 += v45;
          if (!--v43)
            goto LABEL_60;
        }
      }
      return 0;
    }
LABEL_52:
    if (v38)
    {
      while (*v41 == *v42)
      {
        v41 += v39;
        v42 += v40;
        if (!--v38)
          goto LABEL_60;
      }
      return 0;
    }
LABEL_60:
    if (*v41 != *v42)
      return 0;
  }
  else if (*(_DWORD *)(a2 + 152))
  {
    return 0;
  }
  v52 = *(_DWORD *)(a1 + 168);
  if (v52 != *(_DWORD *)(a2 + 168))
    return 0;
  v53 = *(_DWORD *)(a1 + 172);
  if (v53 != *(_DWORD *)(a2 + 172))
    return 0;
  if (*(_DWORD *)(a1 + 184))
  {
    v54 = v52 - 1;
    v55 = *(unsigned int *)(a1 + 176);
    v56 = *(unsigned int *)(a2 + 176);
    v57 = *(float **)(a1 + 160);
    v58 = *(float **)(a2 + 160);
    v59 = v53 - 1;
    if (v59)
    {
      v60 = 4 * *(unsigned int *)(a1 + 180);
      v61 = 4 * *(unsigned int *)(a2 + 180);
      if (v54)
      {
        v62 = 0;
LABEL_67:
        v63 = v58;
        v64 = v57;
        v65 = v54;
        while (*v64 == *v63)
        {
          v64 += v55;
          v63 += v56;
          if (!--v65)
          {
            if (*v64 != *v63)
              return 0;
            v57 = (float *)((char *)v57 + v60);
            v58 = (float *)((char *)v58 + v61);
            if (++v62 != v59)
              goto LABEL_67;
            goto LABEL_72;
          }
        }
      }
      else
      {
        while (*v57 == *v58)
        {
          v57 = (float *)((char *)v57 + v60);
          v58 = (float *)((char *)v58 + v61);
          if (!--v59)
            goto LABEL_75;
        }
      }
      return 0;
    }
LABEL_72:
    if (v54)
    {
      while (*v57 == *v58)
      {
        v57 += v55;
        v58 += v56;
        if (!--v54)
          goto LABEL_75;
      }
      return 0;
    }
LABEL_75:
    if (*v57 != *v58)
      return 0;
  }
  else if (*(_DWORD *)(a2 + 184))
  {
    return 0;
  }
  v66 = *(_DWORD *)(a1 + 72);
  if (v66 != *(_DWORD *)(a2 + 72))
    return 0;
  v67 = *(_DWORD *)(a1 + 76);
  if (v67 != *(_DWORD *)(a2 + 76))
    return 0;
  if (*(_DWORD *)(a1 + 88))
  {
    v68 = v66 - 1;
    v69 = *(unsigned int *)(a1 + 80);
    v70 = *(unsigned int *)(a2 + 80);
    v71 = *(float **)(a1 + 64);
    v72 = *(float **)(a2 + 64);
    v73 = v67 - 1;
    if (v73)
    {
      v74 = *(unsigned int *)(a1 + 84);
      v75 = *(unsigned int *)(a2 + 84);
      if (v68)
      {
        v76 = 0;
        v77 = 4 * v74;
        v78 = 4 * v75;
LABEL_87:
        v79 = v72;
        v80 = v71;
        v81 = v68;
        while (*v80 == *v79)
        {
          v80 += v69;
          v79 += v70;
          if (!--v81)
          {
            if (*v80 != *v79)
              return 0;
            v71 = (float *)((char *)v71 + v77);
            v72 = (float *)((char *)v72 + v78);
            if (++v76 != v73)
              goto LABEL_87;
            goto LABEL_92;
          }
        }
      }
      else
      {
        while (*v71 == *v72)
        {
          v71 += v74;
          v72 += v75;
          if (!--v73)
            goto LABEL_100;
        }
      }
      return 0;
    }
LABEL_92:
    if (v68)
    {
      while (*v71 == *v72)
      {
        v71 += v69;
        v72 += v70;
        if (!--v68)
          goto LABEL_100;
      }
      return 0;
    }
LABEL_100:
    if (*v71 != *v72)
      return 0;
  }
  else if (*(_DWORD *)(a2 + 88))
  {
    return 0;
  }
  v82 = *(_DWORD *)(a1 + 104);
  if (v82 != *(_DWORD *)(a2 + 104))
    return 0;
  v83 = *(_DWORD *)(a1 + 108);
  if (v83 != *(_DWORD *)(a2 + 108))
    return 0;
  if (!*(_DWORD *)(a1 + 120))
  {
    if (*(_DWORD *)(a2 + 120))
      return 0;
    goto LABEL_121;
  }
  v84 = v82 - 1;
  v85 = *(unsigned int *)(a1 + 112);
  v86 = *(unsigned int *)(a2 + 112);
  v87 = *(float **)(a1 + 96);
  v88 = *(float **)(a2 + 96);
  v89 = v83 - 1;
  if (v89)
  {
    v90 = *(unsigned int *)(a1 + 116);
    v91 = *(unsigned int *)(a2 + 116);
    if (v84)
    {
      v92 = 0;
      v93 = 4 * v90;
      v94 = 4 * v91;
LABEL_107:
      v95 = v88;
      v96 = v87;
      v97 = v84;
      while (*v96 == *v95)
      {
        v96 += v85;
        v95 += v86;
        if (!--v97)
        {
          if (*v96 != *v95)
            return 0;
          v87 = (float *)((char *)v87 + v93);
          v88 = (float *)((char *)v88 + v94);
          if (++v92 != v89)
            goto LABEL_107;
          goto LABEL_112;
        }
      }
    }
    else
    {
      while (*v87 == *v88)
      {
        v87 += v90;
        v88 += v91;
        if (!--v89)
          goto LABEL_120;
      }
    }
    return 0;
  }
LABEL_112:
  if (v84)
  {
    while (*v87 == *v88)
    {
      v87 += v85;
      v88 += v86;
      if (!--v84)
        goto LABEL_120;
    }
    return 0;
  }
LABEL_120:
  if (*v87 == *v88)
  {
LABEL_121:
    if (sub_20B07E9B8((_QWORD *)(a1 + 192), *(_QWORD **)(a2 + 192), *(_QWORD *)(a2 + 208)))
      return sub_20B07E9B8((_QWORD *)(a1 + 216), *(_QWORD **)(a2 + 216), *(_QWORD *)(a2 + 232));
  }
  return 0;
}

_QWORD *sub_20B0822F0(int *a1, uint64_t a2)
{
  int v4;
  _QWORD *v5;
  unsigned int v6;
  unint64_t v7;
  unsigned int v8;
  unint64_t v9;
  unsigned int *v10;
  int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned __int8 v17;
  BOOL v18;
  unsigned __int8 v19;
  uint64_t v20;
  int v21;
  unsigned int *v22;
  int v23;
  uint64_t v24;
  int v25;
  int v26;
  int *v28[3];
  int v29;
  _OWORD v30[8];
  _QWORD v31[3];
  _QWORD v32[2];
  _QWORD v33[2];
  _QWORD v34[5];
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  unint64_t v40;
  _QWORD v41[3];

  v30[4] = xmmword_24C40B648;
  v30[5] = *(_OWORD *)&off_24C40B658;
  v30[6] = xmmword_24C40B668;
  v30[7] = *(_OWORD *)&off_24C40B678;
  v30[0] = xmmword_24C40B608;
  v30[1] = *(_OWORD *)&off_24C40B618;
  v30[2] = xmmword_24C40B628;
  v30[3] = *(_OWORD *)&off_24C40B638;
  v29 = 0;
  sub_20AEC01D0(a1, (uint64_t)"{", 1);
  v28[0] = &v29;
  v28[1] = a1;
  v28[2] = (int *)v30;
  sub_20B086394(v28, a2);
  v4 = v29;
  if (v29)
  {
    sub_20AEC01D0(a1, (uint64_t)", ", 2);
    v4 = v29;
  }
  v29 = v4 + 1;
  sub_20AEC01D0(a1, *(_QWORD *)&v30[v4], *((_QWORD *)&v30[v4] + 1));
  sub_20AEC01D0(a1, (uint64_t)" = ", 3);
  v31[0] = 3;
  v31[1] = 0x1000000008;
  v31[2] = 1;
  sub_20AEC01D0(a1, (uint64_t)"{", 1);
  v5 = operator new(0x10uLL);
  *v5 = ",";
  v5[1] = ";";
  if (!*(_DWORD *)(a2 + 56))
    goto LABEL_54;
  v6 = 0;
  v7 = *(_QWORD *)(a2 + 40);
  v39 = v5 + 2;
  v40 = v7;
  v37 = v5;
  v38 = v5 + 2;
  v35 = 0;
  v36 = 1;
  v34[0] = &v35;
  v34[1] = &v40;
  v34[2] = &v37;
  v34[3] = &v36;
  v34[4] = v31;
  v8 = -1;
  if ((_DWORD)v7)
  {
    v9 = HIDWORD(v7);
    if ((_DWORD)v9)
    {
      v10 = *(unsigned int **)(a2 + 32);
      v11 = v9 - 1;
      if ((_DWORD)v9 == 1)
      {
        v12 = 0;
      }
      else
      {
        v12 = 0;
        v8 = -1;
        do
        {
          v13 = v10[1];
          if (v12 <= *v10)
            v12 = *v10;
          if (*v10 < v8)
            v8 = *v10;
          if (v12 <= v13)
            v12 = v10[1];
          if (v13 < v8)
            v8 = v10[1];
          v14 = v10[2];
          if (v12 <= v14)
            v12 = v10[2];
          if (v14 < v8)
            v8 = v10[2];
          v10 += *(unsigned int *)(a2 + 52);
          --v11;
        }
        while (v11);
      }
      v15 = v10[1];
      if (v12 <= *v10)
        v12 = *v10;
      if (*v10 < v8)
        v8 = *v10;
      if (v12 <= v15)
        v12 = v10[1];
      if (v15 < v8)
        v8 = v10[1];
      v16 = v10[2];
      if (v12 <= v16)
        v6 = v10[2];
      else
        v6 = v12;
      if (v16 < v8)
        v8 = v16;
      if (!v8)
      {
        v17 = 0;
        v19 = 0;
        if (!v6)
          goto LABEL_41;
        goto LABEL_40;
      }
    }
  }
  v17 = 0;
  do
  {
    ++v17;
    v18 = v8 > 9;
    v8 /= 0xAu;
  }
  while (v18);
  v19 = 0;
  if (v6)
  {
    do
    {
LABEL_40:
      ++v19;
      v18 = v6 > 9;
      v6 /= 0xAu;
    }
    while (v18);
  }
LABEL_41:
  LODWORD(v20) = v17;
  if (v19 > v17)
    LODWORD(v20) = v19;
  if (v20 <= 1)
    v20 = 1;
  else
    v20 = v20;
  v33[0] = v20;
  v33[1] = 0;
  v32[0] = a1;
  v32[1] = v33;
  v41[0] = 0;
  sub_20B086C04((uint64_t)v31, a1, (unsigned int *)v41, 1u, 1u);
  v41[0] = v32;
  v41[1] = v34;
  v41[2] = a1;
  if (*(_DWORD *)(a2 + 40))
  {
    v21 = *(_DWORD *)(a2 + 44);
    if (v21)
    {
      v22 = *(unsigned int **)(a2 + 32);
      v23 = v21 - 1;
      if (v21 != 1)
      {
        v24 = 4 * *(unsigned int *)(a2 + 52);
        do
        {
          sub_20B087120((uint64_t)v41, v22);
          sub_20B087120((uint64_t)v41, v22 + 1);
          sub_20B087120((uint64_t)v41, v22 + 2);
          v22 = (unsigned int *)((char *)v22 + v24);
          --v23;
        }
        while (v23);
      }
      sub_20B087120((uint64_t)v41, v22);
      sub_20B087120((uint64_t)v41, v22 + 1);
      sub_20B087120((uint64_t)v41, v22 + 2);
    }
  }
  v5 = v37;
  if (v37)
  {
    v38 = v37;
LABEL_54:
    operator delete(v5);
  }
  sub_20AEC01D0(a1, (uint64_t)"}", 1);
  sub_20B086394(v28, a2 + 64);
  sub_20B086394(v28, a2 + 96);
  sub_20B086394(v28, a2 + 128);
  sub_20B086394(v28, a2 + 160);
  v25 = v29;
  if (v29)
  {
    sub_20AEC01D0(a1, (uint64_t)", ", 2);
    v25 = v29;
  }
  v29 = v25 + 1;
  sub_20AEC01D0(a1, *(_QWORD *)&v30[v25], *((_QWORD *)&v30[v25] + 1));
  sub_20AEC01D0(a1, (uint64_t)" = ", 3);
  sub_20B07EAF4(a1, (_QWORD *)(a2 + 192));
  v26 = v29;
  if (v29)
  {
    sub_20AEC01D0(a1, (uint64_t)", ", 2);
    v26 = v29;
  }
  v29 = v26 + 1;
  sub_20AEC01D0(a1, *(_QWORD *)&v30[v26], *((_QWORD *)&v30[v26] + 1));
  sub_20AEC01D0(a1, (uint64_t)" = ", 3);
  sub_20B07EAF4(a1, (_QWORD *)(a2 + 216));
  return sub_20AEC01D0(a1, (uint64_t)"}", 1);
}

void sub_20B082770(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 - 120);
  if (v3)
  {
    *(_QWORD *)(v1 - 112) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20B082790@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  _DWORD *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const void *v19;
  int v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  char *v24;
  uint64_t v25;
  int v26;
  char *v27;
  size_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  _BYTE *v42;
  int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  char *v48;
  _BYTE *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  unsigned int v53;
  BOOL v54;
  uint64_t *v55;
  unint64_t v56;
  uint64_t v57;
  char v58;
  uint64_t v59;
  uint64_t *v60;
  unint64_t v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  uint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  uint64_t *v71;
  uint64_t v72;
  char v73;
  unint64_t v74;
  uint64_t *v75;
  int v76;
  uint64_t *v77;
  uint64_t *v78;
  BOOL v79;
  uint64_t *v80;
  int v81;
  uint64_t *v82;
  uint64_t *v83;
  _BYTE *v84;
  int v85;
  uint64_t v86;
  int v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  BOOL v91;
  uint64_t *v92;
  __int128 *v93;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97[4];
  int v98;
  uint64_t v99[4];
  int v100;
  void *__dst;
  char *v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  int v108;
  __int128 v109;
  uint64_t v110;
  __int128 __p;
  __int128 v112;
  void *v113;
  unsigned __int8 v114;
  __int128 v115;
  void *v116;
  uint64_t v117;
  __int128 v118;
  uint64_t v119;
  char v120;
  char v121;
  unsigned __int16 v122;
  std::string v123;
  int v124;
  std::string v125;
  __int128 *p_p;
  __int128 v127;
  __int128 v128;
  void *v129;
  unsigned __int8 v130;
  __int128 v131;
  void *v132;
  uint64_t v133;
  __int128 v134;
  uint64_t v135;
  char v136;
  char v137;
  char v138;
  uint64_t v139;

  v139 = *MEMORY[0x24BDAC8D0];
  sub_20B41913C((uint64_t)&v95, 1);
  if (*(_DWORD *)(a1 + 24))
  {
    v5 = *(unsigned int *)(a1 + 12);
    v6 = v95;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v96 - v95) >> 2);
    if (v5 <= v7)
    {
      if (v5 < v7)
        v96 = v95 + 12 * v5;
    }
    else
    {
      sub_20B08726C((uint64_t)&v95, v5 - v7);
      v6 = v95;
      v5 = *(unsigned int *)(a1 + 12);
    }
    if ((_DWORD)v5)
      v8 = 3;
    else
      v8 = 0;
    if ((_DWORD)v5)
      v9 = 3;
    else
      v9 = 0;
    *(_QWORD *)&v127 = v6;
    *((_QWORD *)&v127 + 1) = (v5 << 32) | 3;
    *(_QWORD *)&v128 = (v9 << 32) | 1;
    *((_QWORD *)&v128 + 1) = __PAIR64__(v8, v5);
    if (v8 * (_DWORD)v5 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    sub_20B087590((_DWORD *)a1, (void **)&v127);
  }
  v93 = a2;
  v10 = v95;
  v11 = v96;
  if (!*(_DWORD *)(a1 + 56))
    goto LABEL_49;
  v12 = *(unsigned int *)(a1 + 44);
  v13 = __dst;
  v14 = 0xAAAAAAAAAAAAAAABLL * ((v102 - (_BYTE *)__dst) >> 2);
  if (v12 <= v14)
  {
    if (v12 < v14)
      v102 = (char *)__dst + 12 * v12;
  }
  else
  {
    sub_20B0877C8((uint64_t)&__dst, v12 - v14);
    v13 = __dst;
    LODWORD(v12) = *(_DWORD *)(a1 + 44);
  }
  if ((_DWORD)v12)
    v15 = 3;
  else
    v15 = 0;
  if ((_DWORD)v15 * (_DWORD)v12 == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_46:
    abort();
  }
  if (*(_DWORD *)(a1 + 48) != 1)
  {
    if (!*(_DWORD *)(a1 + 40))
      goto LABEL_49;
    v20 = *(_DWORD *)(a1 + 44);
    if (!v20)
      goto LABEL_49;
    v21 = *(_DWORD **)(a1 + 32);
    v22 = v20 - 1;
    if (v22)
    {
      v23 = 4 * *(unsigned int *)(a1 + 52);
      do
      {
        *v13 = *v21;
        v13[1] = v21[1];
        v13[2] = v21[2];
        v21 = (_DWORD *)((char *)v21 + v23);
        v13 += v15;
        --v22;
      }
      while (v22);
    }
    *v13 = *v21;
    v13[1] = v21[1];
    v13[2] = v21[2];
    v24 = (char *)__dst;
    v25 = v102 - (_BYTE *)__dst;
    if (v102 != __dst)
      goto LABEL_50;
    goto LABEL_55;
  }
  v16 = *(unsigned int *)(a1 + 52);
  v17 = *(unsigned int *)(a1 + 40);
  if ((_DWORD)v16 != (_DWORD)v15 || (_DWORD)v16 != (_DWORD)v17)
  {
    if (!(_DWORD)v17)
      goto LABEL_49;
    v26 = *(_DWORD *)(a1 + 44);
    if (!v26)
      goto LABEL_49;
    v27 = *(char **)(a1 + 32);
    v28 = 4 * v17;
    v29 = v26 - 1;
    if (v26 != 1)
    {
      v30 = 4 * v16;
      v31 = 4 * v15;
      while (v27
           || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        memmove(v13, v27, v28);
        v27 += v30;
        v13 = (_DWORD *)((char *)v13 + v31);
        if (!--v29)
          goto LABEL_110;
      }
      goto LABEL_46;
    }
LABEL_110:
    if (!v27
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      goto LABEL_46;
    }
    memmove(v13, v27, v28);
    v24 = (char *)__dst;
    v25 = v102 - (_BYTE *)__dst;
    if (v102 != __dst)
      goto LABEL_50;
LABEL_55:
    if (*(_DWORD *)(a1 + 152) && *(_DWORD *)(a1 + 184))
    {
      sub_20B083A9C((uint64_t)&v127, (uint64_t)"normals");
      goto LABEL_61;
    }
    if (*(_DWORD *)(a1 + 88) && *(_DWORD *)(a1 + 120))
    {
      sub_20B083A9C((uint64_t)&v127, (uint64_t)"colors");
      goto LABEL_61;
    }
    sub_20B083D68((uint64_t)&v127, &v95, (_DWORD *)(a1 + 128), (_DWORD *)(a1 + 160), v99, &v100, (uint64_t)"normals");
    if (v138
      || (sub_20B083D68((uint64_t)&v127, &v95, (_DWORD *)(a1 + 64), (_DWORD *)(a1 + 96), v97, &v98, (uint64_t)"colors"),
          v138))
    {
      __p = v127;
      v42 = sub_20AECEBD0(&v112, &v128);
      *(_OWORD *)a3 = __p;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v121)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v43 = v114;
        if (v114)
        {
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v42;
          *(_QWORD *)(a3 + 32) = *((_QWORD *)v42 + 2);
          *((_QWORD *)v42 + 1) = 0;
          *((_QWORD *)v42 + 2) = 0;
          *(_QWORD *)v42 = 0;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v120)
        {
          v44 = v117;
          *(_QWORD *)(a3 + 64) = v116;
          *(_OWORD *)(a3 + 48) = v115;
          v115 = 0uLL;
          *(_QWORD *)(a3 + 72) = v44;
          *(_OWORD *)(a3 + 80) = v118;
          *(_QWORD *)(a3 + 96) = v119;
          v116 = 0;
          v118 = 0uLL;
          v119 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 528) = 0;
        if (v43 && SHIBYTE(v113) < 0)
          operator delete((void *)v112);
        if (!v138)
          return sub_20B088C38(&v95);
      }
      else
      {
        *(_BYTE *)(a3 + 528) = 0;
        if (!v138)
          return sub_20B088C38(&v95);
      }
LABEL_232:
      if (!v137)
        return sub_20B088C38(&v95);
      if (v136)
      {
        if (SHIBYTE(v135) < 0)
          operator delete((void *)v134);
        if (SHIBYTE(v132) < 0)
          operator delete((void *)v131);
      }
      if (!v130)
        return sub_20B088C38(&v95);
      goto LABEL_103;
    }
    sub_20B08407C((uint64_t)&v127, a1, &v95, 0x64u, (uint64_t)&v103, &v104);
    if (!v138 || (sub_20B08407C((uint64_t)&v127, a1, &v95, 0x65u, (uint64_t)&v105, &v106), !v138))
    {
LABEL_221:
      __p = v127;
      v84 = sub_20AECEBD0(&v112, &v128);
      *(_OWORD *)a3 = __p;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v121)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v85 = v114;
        if (v114)
        {
          *(_OWORD *)(a3 + 16) = *(_OWORD *)v84;
          *(_QWORD *)(a3 + 32) = *((_QWORD *)v84 + 2);
          *((_QWORD *)v84 + 1) = 0;
          *((_QWORD *)v84 + 2) = 0;
          *(_QWORD *)v84 = 0;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v120)
        {
          v86 = v117;
          *(_QWORD *)(a3 + 64) = v116;
          *(_OWORD *)(a3 + 48) = v115;
          v115 = 0uLL;
          *(_QWORD *)(a3 + 72) = v86;
          *(_OWORD *)(a3 + 80) = v118;
          *(_QWORD *)(a3 + 96) = v119;
          v116 = 0;
          v118 = 0uLL;
          v119 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 528) = 0;
        if (v85 && SHIBYTE(v113) < 0)
          operator delete((void *)v112);
        if (v138)
          return sub_20B088C38(&v95);
      }
      else
      {
        *(_BYTE *)(a3 + 528) = 0;
        if (v138)
          return sub_20B088C38(&v95);
      }
      goto LABEL_232;
    }
    v45 = 102;
    v122 = 102;
    v47 = v95;
    v46 = v96;
    v49 = __dst;
    v48 = v102;
    *(_QWORD *)&v109 = &v122;
    p_p = &v109;
    v125.__r_.__value_.__r.__words[0] = (std::string::size_type)&p_p;
    v125.__r_.__value_.__l.__size_ = (std::string::size_type)&v107;
    v51 = (uint64_t *)(a1 + 200);
    v50 = *(_QWORD *)(a1 + 200);
    if (v50)
    {
      v52 = a1 + 200;
      do
      {
        v53 = *(unsigned __int16 *)(v50 + 32);
        v54 = v53 >= 0x66;
        if (v53 >= 0x66)
          v55 = (uint64_t *)v50;
        else
          v55 = (uint64_t *)(v50 + 8);
        if (v54)
          v52 = v50;
        v50 = *v55;
      }
      while (*v55);
      if ((uint64_t *)v52 == v51 || *(unsigned __int16 *)(v52 + 32) > 0x66u)
      {
        v56 = 0;
        v45 = 102;
      }
      else
      {
        v57 = sub_20B07E8F0((unsigned __int8 *)(v52 + 40));
        if (v58)
          v56 = v57;
        else
          v56 = 0;
        v45 = v122;
      }
    }
    else
    {
      v56 = 0;
    }
    v60 = (uint64_t *)(a1 + 224);
    v59 = *(_QWORD *)(a1 + 224);
    if (!v59)
      goto LABEL_162;
    v61 = 0xAAAAAAAAAAAAAAABLL * ((v48 - v49) >> 2);
    v62 = a1 + 224;
    do
    {
      v63 = *(unsigned __int16 *)(v59 + 32);
      v64 = v63 >= v45;
      if (v63 >= v45)
        v65 = (uint64_t *)v59;
      else
        v65 = (uint64_t *)(v59 + 8);
      if (v64)
        v62 = v59;
      v59 = *v65;
    }
    while (*v65);
    if ((uint64_t *)v62 != v60 && *(unsigned __int16 *)(v62 + 32) <= v45)
    {
      v72 = sub_20B07E8F0((unsigned __int8 *)(v62 + 40));
      if (v73)
        v74 = v72;
      else
        v74 = 0;
      if (v56 && v74)
      {
        sub_20B08A058((uint64_t)&v123, (unsigned __int16 *)v109);
        sub_20B0896D8((uint64_t)&__p, (uint64_t *)&v123);
        goto LABEL_184;
      }
      if (v56)
        goto LABEL_163;
      if (v74)
      {
        if (v74 > v61)
        {
          sub_20B08A058((uint64_t)&v123, (unsigned __int16 *)v109);
          sub_20B089870((uint64_t)&__p, (uint64_t)"faces", &v123, v74, v61);
          goto LABEL_184;
        }
        v108 = 2;
        v89 = *v60;
        if (!*v60)
          goto LABEL_261;
        v68 = a1 + 224;
        do
        {
          v90 = *(unsigned __int16 *)(v89 + 32);
          v91 = v90 >= v122;
          if (v90 >= v122)
            v92 = (uint64_t *)v89;
          else
            v92 = (uint64_t *)(v89 + 8);
          if (v91)
            v68 = v89;
          v89 = *v92;
        }
        while (*v92);
        if ((uint64_t *)v68 == v60 || v122 < *(unsigned __int16 *)(v68 + 32))
LABEL_261:
          v68 = a1 + 224;
        goto LABEL_177;
      }
    }
    else
    {
LABEL_162:
      if (v56)
      {
LABEL_163:
        v66 = 0xAAAAAAAAAAAAAAABLL * ((v46 - v47) >> 2);
        if (v56 > v66)
        {
          sub_20B08A058((uint64_t)&v123, (unsigned __int16 *)v109);
          sub_20B089870((uint64_t)&__p, (uint64_t)"vertices", &v123, v56, v66);
LABEL_184:
          v127 = __p;
          LOBYTE(v128) = 0;
          v137 = 0;
          if (v121)
          {
            v130 = 0;
            if (v114)
            {
              v128 = v112;
              v129 = v113;
              v113 = 0;
              v112 = 0uLL;
              v130 = 1;
            }
            LOBYTE(v131) = 0;
            v136 = 0;
            if (v120)
            {
              v132 = v116;
              v131 = v115;
              v115 = 0uLL;
              v134 = v118;
              v133 = v117;
              v135 = v119;
              v116 = 0;
              v118 = 0uLL;
              v119 = 0;
              v136 = 1;
            }
            v137 = 1;
            v138 = 0;
            if (v114 && SHIBYTE(v113) < 0)
              operator delete((void *)v112);
          }
          else
          {
            v138 = 0;
          }
          if (SHIBYTE(v123.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v123.__r_.__value_.__l.__data_);
LABEL_200:
          if (v138)
          {
            v75 = *(uint64_t **)(a1 + 192);
            if (v75 == v51)
            {
LABEL_211:
              v80 = *(uint64_t **)(a1 + 216);
              if (v80 == v60)
              {
LABEL_240:
                sub_20B084880((uint64_t)&v127, (uint64_t)&v95, v93);
                sub_20AF4BAD4(a3, 0, &v127);
                *(_BYTE *)(a3 + 528) = 1;
                sub_20AED5474((uint64_t)&v127);
                return sub_20B088C38(&v95);
              }
              while (1)
              {
                v81 = *((unsigned __int16 *)v80 + 16);
                if ((unsigned __int16)(v81 - 103) <= 0xFFFCu)
                  break;
                v82 = (uint64_t *)v80[1];
                if (v82)
                {
                  do
                  {
                    v83 = v82;
                    v82 = (uint64_t *)*v82;
                  }
                  while (v82);
                }
                else
                {
                  do
                  {
                    v83 = (uint64_t *)v80[2];
                    v79 = *v83 == (_QWORD)v80;
                    v80 = v83;
                  }
                  while (!v79);
                }
                v80 = v83;
                if (v83 == v60)
                  goto LABEL_240;
              }
              sub_20B0845F0((uint64_t)&v127, v81);
              *(_OWORD *)a3 = v127;
              *(_BYTE *)(a3 + 16) = 0;
              *(_BYTE *)(a3 + 112) = 0;
              if (!v137)
              {
                *(_BYTE *)(a3 + 528) = 0;
                return sub_20B088C38(&v95);
              }
              *(_BYTE *)(a3 + 40) = 0;
              v87 = v130;
              if (v130)
              {
                *(_OWORD *)(a3 + 16) = v128;
                *(_QWORD *)(a3 + 32) = v129;
                v129 = 0;
                v128 = 0uLL;
                *(_BYTE *)(a3 + 40) = 1;
              }
              *(_BYTE *)(a3 + 48) = 0;
              *(_BYTE *)(a3 + 104) = 0;
              if (v136)
              {
                v88 = v133;
                *(_QWORD *)(a3 + 64) = v132;
                *(_OWORD *)(a3 + 48) = v131;
                v131 = 0uLL;
                *(_QWORD *)(a3 + 72) = v88;
                *(_OWORD *)(a3 + 80) = v134;
                *(_QWORD *)(a3 + 96) = v135;
                v132 = 0;
                v134 = 0uLL;
                v135 = 0;
                *(_BYTE *)(a3 + 104) = 1;
              }
              *(_BYTE *)(a3 + 112) = 1;
              *(_BYTE *)(a3 + 528) = 0;
              if (!v87)
                return sub_20B088C38(&v95);
              goto LABEL_103;
            }
            while (1)
            {
              v76 = *((unsigned __int16 *)v75 + 16);
              if ((unsigned __int16)(v76 - 103) <= 0xFFFCu)
                break;
              v77 = (uint64_t *)v75[1];
              if (v77)
              {
                do
                {
                  v78 = v77;
                  v77 = (uint64_t *)*v77;
                }
                while (v77);
              }
              else
              {
                do
                {
                  v78 = (uint64_t *)v75[2];
                  v79 = *v78 == (_QWORD)v75;
                  v75 = v78;
                }
                while (!v79);
              }
              v75 = v78;
              if (v78 == v51)
                goto LABEL_211;
            }
            sub_20B0845F0((uint64_t)&v127, v76);
LABEL_61:
            *(_OWORD *)a3 = v127;
            *(_BYTE *)(a3 + 16) = 0;
            *(_BYTE *)(a3 + 112) = 0;
            if (!v137)
            {
              *(_BYTE *)(a3 + 528) = 0;
              return sub_20B088C38(&v95);
            }
            *(_BYTE *)(a3 + 40) = 0;
            v37 = v130;
            if (v130)
            {
              *(_OWORD *)(a3 + 16) = v128;
              *(_QWORD *)(a3 + 32) = v129;
              v129 = 0;
              v128 = 0uLL;
              *(_BYTE *)(a3 + 40) = 1;
            }
            *(_BYTE *)(a3 + 48) = 0;
            *(_BYTE *)(a3 + 104) = 0;
            if (v136)
            {
              v38 = v133;
              *(_QWORD *)(a3 + 64) = v132;
              *(_OWORD *)(a3 + 48) = v131;
              v131 = 0uLL;
              *(_QWORD *)(a3 + 72) = v38;
              *(_OWORD *)(a3 + 80) = v134;
              *(_QWORD *)(a3 + 96) = v135;
              v132 = 0;
              v134 = 0uLL;
              v135 = 0;
              *(_BYTE *)(a3 + 104) = 1;
            }
            *(_BYTE *)(a3 + 112) = 1;
            *(_BYTE *)(a3 + 528) = 0;
            if (!v37)
              return sub_20B088C38(&v95);
LABEL_103:
            if (SHIBYTE(v129) < 0)
              operator delete((void *)v128);
            return sub_20B088C38(&v95);
          }
          goto LABEL_221;
        }
        v108 = 1;
        v67 = *v51;
        if (!*v51)
          goto LABEL_176;
        v68 = a1 + 200;
        do
        {
          v69 = *(unsigned __int16 *)(v67 + 32);
          v70 = v69 >= v122;
          if (v69 >= v122)
            v71 = (uint64_t *)v67;
          else
            v71 = (uint64_t *)(v67 + 8);
          if (v70)
            v68 = v67;
          v67 = *v71;
        }
        while (*v71);
        if ((uint64_t *)v68 == v51 || v122 < *(unsigned __int16 *)(v68 + 32))
LABEL_176:
          v68 = a1 + 200;
LABEL_177:
        sub_20B08A63C((uint64_t)&v127, (uint64_t)&v125, v68 + 40);
        goto LABEL_200;
      }
    }
    v138 = 1;
    goto LABEL_200;
  }
  v18 = (*(_DWORD *)(a1 + 44) * v15);
  v19 = *(const void **)(a1 + 32);
  if (!(_DWORD)v18 || v19)
  {
    if (!(_DWORD)v18)
      goto LABEL_49;
  }
  else if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_46;
  }
  memmove(v13, v19, 4 * v18);
LABEL_49:
  v24 = (char *)__dst;
  v25 = v102 - (_BYTE *)__dst;
  if (v102 == __dst)
    goto LABEL_55;
LABEL_50:
  v32 = 0;
  v33 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v10) >> 2);
  v34 = v25 / 12;
  v35 = (unsigned int *)(v24 + 8);
  v36 = 1;
  while (1)
  {
    if (v33 <= *(v35 - 2))
    {
      v36 = 0;
      goto LABEL_70;
    }
    if (v33 <= *(v35 - 1))
      goto LABEL_70;
    if (v33 <= *v35)
      break;
    ++v32;
    v35 += 3;
    if (v34 == v32)
      goto LABEL_55;
  }
  v36 = 2;
LABEL_70:
  v124 = 0;
  sub_20B002838(&v123, "Mesh face ");
  std::to_string(&v125, v32);
  *(_QWORD *)&__p = &v123;
  *((_QWORD *)&__p + 1) = &v125;
  *(_QWORD *)&v112 = &v123;
  *((_QWORD *)&v112 + 1) = &v125;
  v113 = &v125;
  if (v124 == -1)
    sub_20AECFAB8();
  p_p = &__p;
  ((void (*)(__int128 **, std::string *))off_24C40B6B8[v124])(&p_p, &v123);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  *(_QWORD *)&__p = &v123;
  *((_QWORD *)&__p + 1) = " coordinate ";
  *(_QWORD *)&v112 = &v123;
  *((_QWORD *)&v112 + 1) = " coordinate ";
  v113 = " coordinate ";
  if (v124 == -1)
    sub_20AECFAB8();
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  ((void (*)(std::string *, std::string *))off_24C40B6E8[v124])(&v125, &v123);
  std::to_string(&v125, v36);
  *(_QWORD *)&__p = &v123;
  *((_QWORD *)&__p + 1) = &v125;
  *(_QWORD *)&v112 = &v123;
  *((_QWORD *)&v112 + 1) = &v125;
  v113 = &v125;
  if (v124 == -1)
    sub_20AECFAB8();
  p_p = &__p;
  ((void (*)(__int128 **, std::string *))off_24C40B6B8[v124])(&p_p, &v123);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  *(_QWORD *)&__p = &v123;
  *((_QWORD *)&__p + 1) = " refers to a vertex which does not exist in the mesh (has only ";
  *(_QWORD *)&v112 = &v123;
  *((_QWORD *)&v112 + 1) = " refers to a vertex which does not exist in the mesh (has only ";
  v113 = " refers to a vertex which does not exist in the mesh (has only ";
  if (v124 == -1)
    sub_20AECFAB8();
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  ((void (*)(std::string *, std::string *))off_24C40B7A0[v124])(&v125, &v123);
  std::to_string(&v125, v33);
  *(_QWORD *)&__p = &v123;
  *((_QWORD *)&__p + 1) = &v125;
  *(_QWORD *)&v112 = &v123;
  *((_QWORD *)&v112 + 1) = &v125;
  v113 = &v125;
  if (v124 == -1)
    sub_20AECFAB8();
  p_p = &__p;
  ((void (*)(__int128 **, std::string *))off_24C40B6B8[v124])(&p_p, &v123);
  if (SHIBYTE(v125.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v125.__r_.__value_.__l.__data_);
  *(_QWORD *)&__p = &v123;
  *((_QWORD *)&__p + 1) = " vertices)";
  *(_QWORD *)&v112 = &v123;
  *((_QWORD *)&v112 + 1) = " vertices)";
  v113 = " vertices)";
  if (v124 == -1)
    sub_20AECFAB8();
  v125.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  ((void (*)(std::string *, std::string *))off_24C40B788[v124])(&v125, &v123);
  if (v124 == -1)
    sub_20AECFAB8();
  *(_QWORD *)&__p = &v125;
  ((void (*)(__int128 *__return_ptr, __int128 *, std::string *))off_24C40B6D0[v124])(&v109, &__p, &v123);
  if (v124 != -1)
    ((void (*)(__int128 *, std::string *))off_24C40B688[v124])(&__p, &v123);
  if (SHIBYTE(v110) < 0)
  {
    sub_20AEC60F4(&__p, (void *)v109, *((unint64_t *)&v109 + 1));
  }
  else
  {
    __p = v109;
    *(_QWORD *)&v112 = v110;
  }
  BYTE8(v112) = 1;
  LOBYTE(v113) = 0;
  BYTE8(v118) = 0;
  LOBYTE(v119) = 1;
  sub_20AECCC3C(0x20u, &__p, (uint64_t)&v127);
  if ((_BYTE)v119)
  {
    if (!BYTE8(v118))
      goto LABEL_92;
    if (SBYTE7(v118) < 0)
    {
      operator delete(v116);
      if ((SBYTE7(v115) & 0x80000000) == 0)
      {
LABEL_92:
        if (!BYTE8(v112))
          goto LABEL_95;
LABEL_93:
        if (SBYTE7(v112) < 0)
          operator delete((void *)__p);
        goto LABEL_95;
      }
    }
    else if ((SBYTE7(v115) & 0x80000000) == 0)
    {
      goto LABEL_92;
    }
    operator delete(v113);
    if (!BYTE8(v112))
      goto LABEL_95;
    goto LABEL_93;
  }
LABEL_95:
  if (SHIBYTE(v110) < 0)
    operator delete((void *)v109);
  *(_OWORD *)a3 = v127;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v137)
  {
    *(_BYTE *)(a3 + 528) = 0;
    return sub_20B088C38(&v95);
  }
  *(_BYTE *)(a3 + 40) = 0;
  v39 = v130;
  if (v130)
  {
    *(_OWORD *)(a3 + 16) = v128;
    *(_QWORD *)(a3 + 32) = v129;
    v129 = 0;
    v128 = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v136)
  {
    v40 = v133;
    *(_QWORD *)(a3 + 64) = v132;
    *(_OWORD *)(a3 + 48) = v131;
    v131 = 0uLL;
    *(_QWORD *)(a3 + 72) = v40;
    *(_OWORD *)(a3 + 80) = v134;
    *(_QWORD *)(a3 + 96) = v135;
    v132 = 0;
    v134 = 0uLL;
    v135 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 528) = 0;
  if (v39)
    goto LABEL_103;
  return sub_20B088C38(&v95);
}

void sub_20B083978(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  if (SLOBYTE(STACK[0x247]) < 0)
    operator delete((void *)STACK[0x230]);
  sub_20B088C38((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B083A9C(uint64_t a1, uint64_t a2)
{
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  _DWORD v16[6];
  int v17;
  _QWORD **v18;
  const char *v19;
  _DWORD *v20;
  const char *v21;
  const char *v22;
  _QWORD *v23;

  v15 = a2;
  v17 = 0;
  sub_20AF810D0(v16, "Mesh has both vertex and face ");
  if (a2)
  {
    v18 = (_QWORD **)v16;
    v19 = (const char *)&v15;
    v20 = v16;
    v21 = (const char *)&v15;
    v22 = (const char *)&v15;
    if (v17 != -1)
    {
      v23 = &v18;
      ((void (*)(_QWORD **, _DWORD *))off_24C40B718[v17])(&v23, v16);
      goto LABEL_6;
    }
LABEL_25:
    sub_20AECFAB8();
  }
  v18 = (_QWORD **)v16;
  v19 = "nullptr";
  v20 = v16;
  v21 = "nullptr";
  v22 = "nullptr";
  if (v17 == -1)
    goto LABEL_25;
  v23 = &v18;
  ((void (*)(_QWORD **, _DWORD *))off_24C40B700[v17])(&v23, v16);
LABEL_6:
  v18 = (_QWORD **)v16;
  v19 = " but may only have one of the two";
  v20 = v16;
  v21 = " but may only have one of the two";
  v22 = " but may only have one of the two";
  if (v17 == -1)
    sub_20AECFAB8();
  v23 = &v18;
  ((void (*)(_QWORD **, _DWORD *))off_24C40B7D0[v17])(&v23, v16);
  if (v17 == -1)
    sub_20AECFAB8();
  v18 = &v23;
  ((void (*)(void **__return_ptr, _QWORD ***, _DWORD *))off_24C40B6D0[v17])(v4, &v18, v16);
  if (v17 != -1)
    ((void (*)(_QWORD ***, _DWORD *))off_24C40B688[v17])(&v18, v16);
  if (SHIBYTE(v5) < 0)
  {
    sub_20AEC60F4(__p, v4[0], (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v7 = v5;
  }
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_20AECCC3C(0x21u, (__int128 *)__p, a1);
  if (v14)
  {
    if (!v13)
      goto LABEL_17;
    if (v12 < 0)
    {
      operator delete(v11);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_17:
        if (!v8)
          goto LABEL_20;
LABEL_18:
        if (SHIBYTE(v7) < 0)
          operator delete(__p[0]);
        goto LABEL_20;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_17;
    }
    operator delete(v9);
    if (!v8)
      goto LABEL_20;
    goto LABEL_18;
  }
LABEL_20:
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_20B083CE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B083D18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECFA60(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20B083D2C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECFA60(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20B083D40(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECFA60(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20B083D54(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECFA60(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20B083D68(uint64_t a1, _QWORD *a2, _DWORD *a3, _DWORD *a4, uint64_t *a5, int *a6, uint64_t a7)
{
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  __int128 v25;
  void *v26[2];
  char v27;
  char v28;
  void *v29;
  char v30;
  void *__p;
  char v32;
  char v33;
  char v34;

  if (a3[6])
  {
    v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[1] - *a2) >> 2);
    v12 = a3[3];
    if (v11 == v12)
    {
      v13 = *a5;
      v14 = 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 2);
      if (v11 <= v14)
      {
        if (v11 < v14)
          a5[1] = v13 + 4 * ((uint64_t)(a2[1] - *a2) >> 2);
      }
      else
      {
        sub_20B08726C((uint64_t)a5, v11 - v14);
        v13 = *a5;
        v11 = a3[3];
        LODWORD(v12) = a3[3];
      }
      if ((_DWORD)v12)
        v20 = 3;
      else
        v20 = 0;
      if ((_DWORD)v12)
        v21 = 3;
      else
        v21 = 0;
      *(_QWORD *)&v25 = v13;
      *((_QWORD *)&v25 + 1) = (v11 << 32) | 3;
      v26[0] = (void *)((v21 << 32) | 1);
      v26[1] = (void *)__PAIR64__(v20, v12);
      if (v20 * (_DWORD)v12 != -1
        || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        sub_20B087590(a3, (void **)&v25);
        v22 = 1;
LABEL_43:
        *a6 = v22;
        goto LABEL_44;
      }
      goto LABEL_45;
    }
    sub_20B0891D0((uint64_t)&v25, (uint64_t)"vertices", a7, v12, v11);
    *(_OWORD *)a1 = v25;
    sub_20AECEBD0((_BYTE *)(a1 + 16), (__int128 *)v26);
  }
  else
  {
    if (!a4[6])
    {
LABEL_44:
      *(_BYTE *)a1 = 0;
      *(_BYTE *)(a1 + 120) = 0;
      return;
    }
    v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[15] - a2[14]) >> 2);
    v17 = a4[3];
    if (v16 == v17)
    {
      v18 = *a5;
      v19 = 0xAAAAAAAAAAAAAAABLL * ((a5[1] - *a5) >> 2);
      if (v16 <= v19)
      {
        if (v16 < v19)
          a5[1] = v18 + 4 * ((uint64_t)(a2[15] - a2[14]) >> 2);
      }
      else
      {
        sub_20B08726C((uint64_t)a5, v16 - v19);
        v18 = *a5;
        v16 = a4[3];
        LODWORD(v17) = a4[3];
      }
      if ((_DWORD)v17)
        v23 = 3;
      else
        v23 = 0;
      if ((_DWORD)v17)
        v24 = 3;
      else
        v24 = 0;
      *(_QWORD *)&v25 = v18;
      *((_QWORD *)&v25 + 1) = (v16 << 32) | 3;
      v26[0] = (void *)((v24 << 32) | 1);
      v26[1] = (void *)__PAIR64__(v23, v17);
      if (v23 * (_DWORD)v17 != -1
        || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        sub_20B087590(a4, (void **)&v25);
        v22 = 2;
        goto LABEL_43;
      }
LABEL_45:
      abort();
    }
    sub_20B0891D0((uint64_t)&v25, (uint64_t)"faces", a7, v17, v16);
    *(_OWORD *)a1 = v25;
    sub_20AECEBD0((_BYTE *)(a1 + 16), (__int128 *)v26);
  }
  *(_BYTE *)(a1 + 120) = 1;
  if (v34)
  {
    if (v33)
    {
      if (v32 < 0)
        operator delete(__p);
      if (v30 < 0)
        operator delete(v29);
    }
    if (v28 && v27 < 0)
      operator delete(v26[0]);
  }
}

void sub_20B084054(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECCE40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B084068(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECCE40((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08407C(uint64_t a1, uint64_t a2, uint64_t *a3, unsigned int a4, uint64_t a5, _DWORD *a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  uint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unsigned int v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  char v28;
  unint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  unsigned int v40;
  BOOL v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  BOOL v47;
  uint64_t *v48;
  std::string v49;
  std::string v50;
  void *v51[2];
  char v52;
  __int128 v53;
  __int128 __p;
  uint64_t v55;
  unsigned __int8 v56;
  __int128 v57;
  uint64_t v58;
  uint64_t v59;
  __int128 v60;
  uint64_t v61;
  char v62;
  char v63;
  _QWORD v64[2];
  unsigned __int16 **v65;
  unsigned __int16 *v66;
  unsigned __int16 v67;

  v67 = a4;
  v10 = *a3;
  v9 = a3[1];
  v12 = a3[14];
  v11 = a3[15];
  v66 = &v67;
  v64[1] = a5;
  v65 = &v66;
  v64[0] = &v65;
  v14 = (unsigned __int8 *)(a2 + 200);
  v13 = *(_QWORD *)(a2 + 200);
  if (!v13)
    goto LABEL_12;
  v15 = a2 + 200;
  do
  {
    v16 = *(unsigned __int16 *)(v13 + 32);
    v17 = v16 >= a4;
    if (v16 >= a4)
      v18 = (uint64_t *)v13;
    else
      v18 = (uint64_t *)(v13 + 8);
    if (v17)
      v15 = v13;
    v13 = *v18;
  }
  while (*v18);
  if ((unsigned __int8 *)v15 != v14 && *(unsigned __int16 *)(v15 + 32) <= a4)
  {
    v32 = sub_20B07E8F0((unsigned __int8 *)(v15 + 40));
    if (v33)
      v19 = v32;
    else
      v19 = 0;
    a4 = v67;
    v34 = *(_QWORD *)(a2 + 224);
    v21 = (unsigned __int8 *)(a2 + 224);
    v20 = v34;
    if (!v34)
      goto LABEL_40;
  }
  else
  {
LABEL_12:
    v19 = 0;
    v21 = (unsigned __int8 *)(a2 + 224);
    v20 = *(_QWORD *)(a2 + 224);
    if (!v20)
      goto LABEL_40;
  }
  v22 = 0xAAAAAAAAAAAAAAABLL * ((v11 - v12) >> 2);
  v23 = v21;
  do
  {
    v24 = *(unsigned __int16 *)(v20 + 32);
    v25 = v24 >= a4;
    if (v24 >= a4)
      v26 = (uint64_t *)v20;
    else
      v26 = (uint64_t *)(v20 + 8);
    if (v25)
      v23 = (unsigned __int8 *)v20;
    v20 = *v26;
  }
  while (*v26);
  if (v23 == v21 || *((unsigned __int16 *)v23 + 16) > a4)
  {
LABEL_40:
    if (!v19)
      goto LABEL_78;
    goto LABEL_41;
  }
  v27 = sub_20B07E8F0(v23 + 40);
  if (v28)
    v29 = v27;
  else
    v29 = 0;
  if (v19 && v29)
  {
    sub_20B08A058((uint64_t)v51, v66);
    sub_20B0896D8((uint64_t)&v53, (uint64_t *)v51);
    *(_OWORD *)a1 = v53;
    *(_BYTE *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 112) = 0;
    if (v63)
    {
      *(_BYTE *)(a1 + 40) = 0;
      v30 = v56;
      if (v56)
      {
        *(_OWORD *)(a1 + 16) = __p;
        *(_QWORD *)(a1 + 32) = v55;
        v55 = 0;
        __p = 0uLL;
        *(_BYTE *)(a1 + 40) = 1;
      }
      *(_BYTE *)(a1 + 48) = 0;
      *(_BYTE *)(a1 + 104) = 0;
      if (v62)
      {
        v31 = v59;
        *(_QWORD *)(a1 + 64) = v58;
        *(_OWORD *)(a1 + 48) = v57;
        v57 = 0uLL;
        *(_QWORD *)(a1 + 72) = v31;
        *(_OWORD *)(a1 + 80) = v60;
        *(_QWORD *)(a1 + 96) = v61;
        v58 = 0;
        v60 = 0uLL;
        v61 = 0;
        *(_BYTE *)(a1 + 104) = 1;
      }
      *(_BYTE *)(a1 + 112) = 1;
      *(_BYTE *)(a1 + 120) = 0;
      if (v30 && SHIBYTE(v55) < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_BYTE *)(a1 + 120) = 0;
    }
    if (v52 < 0)
      operator delete(v51[0]);
    return;
  }
  if (!v19)
  {
    if (v29)
    {
      if (v29 > v22)
      {
        sub_20B08A058((uint64_t)&v49, v66);
        sub_20B089870((uint64_t)&v53, (uint64_t)"faces", &v49, v29, v22);
        *(_OWORD *)a1 = v53;
        *(_BYTE *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 112) = 0;
        if (v63)
        {
          *(_BYTE *)(a1 + 40) = 0;
          v43 = v56;
          if (v56)
          {
            *(_OWORD *)(a1 + 16) = __p;
            *(_QWORD *)(a1 + 32) = v55;
            v55 = 0;
            __p = 0uLL;
            *(_BYTE *)(a1 + 40) = 1;
          }
          *(_BYTE *)(a1 + 48) = 0;
          *(_BYTE *)(a1 + 104) = 0;
          if (v62)
          {
            v44 = v59;
            *(_QWORD *)(a1 + 64) = v58;
            *(_OWORD *)(a1 + 48) = v57;
            v57 = 0uLL;
            *(_QWORD *)(a1 + 72) = v44;
            *(_OWORD *)(a1 + 80) = v60;
            *(_QWORD *)(a1 + 96) = v61;
            v58 = 0;
            v60 = 0uLL;
            v61 = 0;
            *(_BYTE *)(a1 + 104) = 1;
          }
          *(_BYTE *)(a1 + 112) = 1;
          *(_BYTE *)(a1 + 120) = 0;
          if (v43 && SHIBYTE(v55) < 0)
            operator delete((void *)__p);
        }
        else
        {
          *(_BYTE *)(a1 + 120) = 0;
        }
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        return;
      }
      *a6 = 2;
      v45 = *(_QWORD *)v21;
      if (!*(_QWORD *)v21)
        goto LABEL_94;
      v39 = v21;
      do
      {
        v46 = *(unsigned __int16 *)(v45 + 32);
        v47 = v46 >= v67;
        if (v46 >= v67)
          v48 = (uint64_t *)v45;
        else
          v48 = (uint64_t *)(v45 + 8);
        if (v47)
          v39 = (unsigned __int8 *)v45;
        v45 = *v48;
      }
      while (*v48);
      if (v39 == v21 || v67 < *((unsigned __int16 *)v39 + 16))
LABEL_94:
        v39 = v21;
LABEL_64:
      sub_20B089D30(a1, (uint64_t)v64, (uint64_t)(v39 + 40));
      return;
    }
LABEL_78:
    *(_BYTE *)(a1 + 120) = 1;
    return;
  }
LABEL_41:
  v35 = 0xAAAAAAAAAAAAAAABLL * ((v9 - v10) >> 2);
  if (v19 <= v35)
  {
    *a6 = 1;
    v38 = *(_QWORD *)v14;
    if (!*(_QWORD *)v14)
      goto LABEL_63;
    v39 = v14;
    do
    {
      v40 = *(unsigned __int16 *)(v38 + 32);
      v41 = v40 >= v67;
      if (v40 >= v67)
        v42 = (uint64_t *)v38;
      else
        v42 = (uint64_t *)(v38 + 8);
      if (v41)
        v39 = (unsigned __int8 *)v38;
      v38 = *v42;
    }
    while (*v42);
    if (v39 == v14 || v67 < *((unsigned __int16 *)v39 + 16))
LABEL_63:
      v39 = v14;
    goto LABEL_64;
  }
  sub_20B08A058((uint64_t)&v50, v66);
  sub_20B089870((uint64_t)&v53, (uint64_t)"vertices", &v50, v19, v35);
  *(_OWORD *)a1 = v53;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v63)
  {
    *(_BYTE *)(a1 + 120) = 0;
    if ((SHIBYTE(v50.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_66:
    operator delete(v50.__r_.__value_.__l.__data_);
    return;
  }
  *(_BYTE *)(a1 + 40) = 0;
  v36 = v56;
  if (v56)
  {
    *(_OWORD *)(a1 + 16) = __p;
    *(_QWORD *)(a1 + 32) = v55;
    v55 = 0;
    __p = 0uLL;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (v62)
  {
    v37 = v59;
    *(_QWORD *)(a1 + 64) = v58;
    *(_OWORD *)(a1 + 48) = v57;
    v57 = 0uLL;
    *(_QWORD *)(a1 + 72) = v37;
    *(_OWORD *)(a1 + 80) = v60;
    *(_QWORD *)(a1 + 96) = v61;
    v58 = 0;
    v60 = 0uLL;
    v61 = 0;
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 1;
  *(_BYTE *)(a1 + 120) = 0;
  if (v36 && SHIBYTE(v55) < 0)
    operator delete((void *)__p);
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_66;
}

void sub_20B0845AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0845F0(uint64_t a1, int a2)
{
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  _DWORD v15[6];
  int v16;
  std::string v17;
  std::string **v18;
  std::string *v19;
  std::string *v20;
  _DWORD *v21;
  std::string *v22;
  std::string *v23;

  v16 = 0;
  sub_20B088B48(v15, "Mesh has labels of unsupported type '");
  std::to_string(&v17, a2);
  v19 = (std::string *)v15;
  v20 = &v17;
  v21 = v15;
  v22 = &v17;
  v23 = &v17;
  if (v16 == -1)
    sub_20AECFAB8();
  v18 = &v19;
  ((void (*)(std::string ***, _DWORD *))off_24C40B6B8[v16])(&v18, v15);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v19 = (std::string *)v15;
  v20 = (std::string *)"'";
  v21 = v15;
  v22 = (std::string *)"'";
  v23 = (std::string *)"'";
  if (v16 == -1)
    sub_20AECFAB8();
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24C40B6A0[v16])(&v17, v15);
  if (v16 == -1)
    sub_20AECFAB8();
  v19 = &v17;
  ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24C40B6D0[v16])(v4, &v19, v15);
  if (v16 != -1)
    ((void (*)(std::string **, _DWORD *))off_24C40B688[v16])(&v19, v15);
  if (SHIBYTE(v5) < 0)
  {
    sub_20AEC60F4(__p, v4[0], (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v7 = v5;
  }
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_20AECCC3C(0x21u, (__int128 *)__p, a1);
  if (v14)
  {
    if (!v13)
      goto LABEL_15;
    if (v12 < 0)
    {
      operator delete(v11);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        if (!v8)
          goto LABEL_18;
LABEL_16:
        if (SHIBYTE(v7) < 0)
          operator delete(__p[0]);
        goto LABEL_18;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete(v9);
    if (!v8)
      goto LABEL_18;
    goto LABEL_16;
  }
LABEL_18:
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

