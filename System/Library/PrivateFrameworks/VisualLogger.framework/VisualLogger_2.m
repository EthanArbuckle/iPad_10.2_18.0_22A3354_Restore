_QWORD *sub_20AF9C598(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8940;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AF9C5E8(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8940;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AF9C618(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AF9C670(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AF9C6D8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AF9C734(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_5I"
                     "mageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEES6_T_ENKUlRKSG_E_"
                     "clINSA_3img11SharedImageILNSL_6FormatE32ENSL_13DynamicBufferELNSL_10MutabilityE0EEEEESC_SI_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_5ImageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Err"
                                "orEEES6_T_ENKUlRKSG_E_clINSA_3img11SharedImageILNSL_6FormatE32ENSL_13DynamicBufferELNSL_"
                                "10MutabilityE0EEEEESC_SI_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_5ImageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEES6_T_ENKUlRKSG_E_clINSA_3img11SharedImageILNSL_6FormatE32ENSL_13DynamicBufferELNSL_10MutabilityE0EEEEESC_SI_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_5ImageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEES6_T_ENKUlRKSG_E_clINSA_3img11SharedImageILNSL_6FormatE32ENSL_13DynamicBufferELNSL_10MutabilityE0EEEEESC_SI_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AF9C7A0()
{
  return &unk_24C3F89A0;
}

_QWORD *sub_20AF9C7AC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F89C0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AF9C820(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F89C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AF9C894(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F89C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AF9C8E4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F89C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AF9C914(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AF9C96C(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AF9C9D4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AF9CA30(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_5I"
                     "mageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEES6_T_ENKUlRKSG_E_"
                     "clINSA_3img11SharedImageILNSL_6FormatE37ENSL_13DynamicBufferELNSL_10MutabilityE0EEEEESC_SI_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_5ImageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Err"
                                "orEEES6_T_ENKUlRKSG_E_clINSA_3img11SharedImageILNSL_6FormatE37ENSL_13DynamicBufferELNSL_"
                                "10MutabilityE0EEEEESC_SI_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_5ImageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEES6_T_ENKUlRKSG_E_clINSA_3img11SharedImageILNSL_6FormatE37ENSL_13DynamicBufferELNSL_10MutabilityE0EEEEESC_SI_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_5ImageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEES6_T_ENKUlRKSG_E_clINSA_3img11SharedImageILNSL_6FormatE37ENSL_13DynamicBufferELNSL_10MutabilityE0EEEEESC_SI_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AF9CA9C()
{
  return &unk_24C3F8A20;
}

_QWORD *sub_20AF9CAA8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8A40;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AF9CB1C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8A40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AF9CB90(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8A40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AF9CBE0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8A40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AF9CC10(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AF9CC68(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AF9CCD0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AF9CD2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_5I"
                     "mageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEES6_T_ENKUlRKSG_E_"
                     "clINSA_3img11SharedImageILNSL_6FormatE38ENSL_13DynamicBufferELNSL_10MutabilityE0EEEEESC_SI_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_5ImageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Err"
                                "orEEES6_T_ENKUlRKSG_E_clINSA_3img11SharedImageILNSL_6FormatE38ENSL_13DynamicBufferELNSL_"
                                "10MutabilityE0EEEEESC_SI_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_5ImageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEES6_T_ENKUlRKSG_E_clINSA_3img11SharedImageILNSL_6FormatE38ENSL_13DynamicBufferELNSL_10MutabilityE0EEEEESC_SI_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_5ImageEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEES6_T_ENKUlRKSG_E_clINSA_3img11SharedImageILNSL_6FormatE38ENSL_13DynamicBufferELNSL_10MutabilityE0EEEEESC_SI_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AF9CD98()
{
  return &unk_24C3F8AA0;
}

_DWORD *sub_20AF9CDA4(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3F6790[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_QWORD *sub_20AF9CE94(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  _QWORD *result;

  v6 = operator new();
  v7 = *(_OWORD *)(a2 + 8);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v8 = *(_OWORD *)(a2 + 24);
  v9 = *(_OWORD *)(a2 + 38);
  *(_QWORD *)v6 = &off_24C3FA4C0;
  *(_QWORD *)(v6 + 8) = &off_24C3F2CB0;
  *(_OWORD *)(v6 + 16) = v7;
  *(_OWORD *)(v6 + 32) = v8;
  *(_OWORD *)(v6 + 46) = v9;
  sub_20AF4CAF4(v6 + 64, a3);
  *(_QWORD *)v6 = &off_24C411FE8;
  *a1 = &off_24C411E78;
  a1[1] = v6;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a1[2] = result;
  return result;
}

void sub_20AF9CF7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, _QWORD *a9)
{
  uint64_t v9;

  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_20AF9D008(&a9);
  _Unwind_Resume(a1);
}

void sub_20AF9CFA0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20AEF0C34((uint64_t *)va);
  MEMORY[0x20BD3583C](v2, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

_QWORD **sub_20AF9D008(_QWORD **a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *v2 = &off_24C3FA4C0;
    sub_20AF4EA3C((uint64_t)(v2 + 8));
    v2[1] = &off_24C3F2CB0;
    v3 = (std::__shared_weak_count *)v2[3];
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    MEMORY[0x20BD3583C](v2, 0x10F3C4035895BD5);
  }
  return a1;
}

_QWORD *sub_20AF9D0AC(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA4C0;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  a1[1] = &off_24C3F2CB0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20AF9D130(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA4C0;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  a1[1] = &off_24C3F2CB0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AF9D1B4(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20AF9D1BC(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  BOOL v5;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3FA480, 0);
  if (result)
  {
    if ((void *)a1 == lpsrc)
    {
      return 1;
    }
    else if (*(_QWORD *)(a1 + 48) == *(_QWORD *)(result + 48))
    {
      if (*(_DWORD *)(a1 + 56) == *(_DWORD *)(result + 56)
        && (*(_DWORD *)(a1 + 32) == *(_DWORD *)(result + 32)
          ? (v5 = *(_DWORD *)(a1 + 36) == *(_DWORD *)(result + 36))
          : (v5 = 0),
            v5))
      {
        return *(_DWORD *)(a1 + 40) == *(_DWORD *)(result + 40);
      }
      else
      {
        return 0;
      }
    }
    else
    {
      return 0;
    }
  }
  return result;
}

void sub_20AF9D278(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = sub_20AF9EAAC();
  sub_20AF9D32C(a1);
  sub_20AF4DD70(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 64, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20AF9D310(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AF9D32C(uint64_t a1)
{
  unsigned __int8 v2;
  std::string *v4;
  std::string::size_type size;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254632778);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254632778))
  {
    v4 = sub_20AF87004();
    size = v4->__r_.__value_.__l.__size_;
    if ((v4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    {
      v6 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
    }
    else
    {
      v4 = (std::string *)v4->__r_.__value_.__r.__words[0];
      v6 = size;
    }
    sub_20AF4E53C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20AEC60F4(&xmmword_254632760, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254632770 = *(_QWORD *)(v9 - 8);
      xmmword_254632760 = v7;
    }
    sub_20AEC2E90(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632760, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632778);
  }
  return sub_20AF9ECA8(&xmmword_254632760, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_20AF9D43C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC2E90(&a9);
  __cxa_guard_abort(&qword_254632778);
  _Unwind_Resume(a1);
}

void sub_20AF9D45C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632778);
  _Unwind_Resume(a1);
}

void sub_20AF9D474(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 1;
}

void sub_20AF9D4A0(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20B2346E4(lpsrc, 1, a2);
}

_QWORD *sub_20AF9D4D8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA4C0;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  a1[1] = &off_24C3F2CB0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20AF9D55C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA4C0;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  a1[1] = &off_24C3F2CB0;
  v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AF9D5E0(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20AF9E548();
  return sub_20AF9D734(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 64, (uint64_t)"}");
}

uint64_t sub_20AF9D638(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20AF9D960((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_20AECFAB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C3F6808[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C3F6790[v3])(v5, v2);
  return result;
}

void sub_20AF9D6D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C3F6790[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20AF9D708(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20AF9D734(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20AED5C4C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20AF9D960((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C3F67F0[v16])(&p_p_dst, &__dst);
  sub_20AF4D170((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C3F67F0[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C3F6808[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C3F6790[v16])(&p_dst, &__dst);
  return result;
}

void sub_20AF9D8D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9D8E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9D8FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9D910(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9D924(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9D938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9D94C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9D960(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20AF9DC04((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C3F67A8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20AF9DBB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20AF9DBD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AF9DBF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF9DC04(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  std::string *v13;
  int v14;
  uint64_t v15;
  uint64_t size;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  std::string *p_p;
  std::string::size_type v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD *v30;
  std::string::size_type v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  __int16 v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t result;
  std::string __p;
  uint64_t v46;
  int v47;
  uint64_t v48;
  unsigned int v49;
  __int16 v50;
  uint64_t v51;
  _QWORD *v52;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(std::__shared_weak_count **)(a2 + 16);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (v8)
    {
      if (!v4)
        goto LABEL_19;
    }
    else
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (!v4)
        goto LABEL_19;
    }
    v4 = *(_QWORD *)(a2 + 8);
    v9 = *(std::__shared_weak_count **)(a2 + 16);
    if (v9)
    {
      v10 = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(v10);
      while (__stxr(v11 + 1, v10));
      do
        v12 = __ldaxr(v10);
      while (__stlxr(v12 - 1, v10));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
        if (*(_BYTE *)(a2 + 53))
          goto LABEL_17;
        goto LABEL_19;
      }
    }
  }
  else if (!v4)
  {
    goto LABEL_19;
  }
  if (*(_BYTE *)(a2 + 53))
  {
LABEL_17:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v51, v4, 0);
    goto LABEL_20;
  }
LABEL_19:
  v51 = 0;
LABEL_20:
  v13 = sub_20AF87004();
  v14 = SHIBYTE(v13->__r_.__value_.__r.__words[2]);
  if (v14 >= 0)
    v15 = (uint64_t)v13;
  else
    v15 = v13->__r_.__value_.__r.__words[0];
  if (v14 >= 0)
    size = HIBYTE(v13->__r_.__value_.__r.__words[2]);
  else
    size = v13->__r_.__value_.__l.__size_;
  v17 = sub_20AEC01D0(a1, v15, size);
  sub_20AEC01D0(v17, (uint64_t)": ", 2);
  v18 = *(unsigned int *)(a2 + 48);
  if (v18 >= 0x29)
  {
    sub_20AEC01D0(a1, (uint64_t)"Invalid Format (", 16);
    v20 = (_QWORD *)std::ostream::operator<<();
    v19 = sub_20AEC01D0(v20, (uint64_t)")", 1);
  }
  else
  {
    v19 = sub_20AEC01D0(a1, (uint64_t)(&off_24C41DC48)[2 * v18], (uint64_t)(&off_24C41DC48)[2 * v18 + 1]);
  }
  sub_20AEC01D0(v19, (uint64_t)", ", 2);
  sub_20AF9E124((unsigned int *)(a2 + 24), (unsigned int *)(a2 + 32), "x", 1uLL, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v22 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v22 = __p.__r_.__value_.__l.__size_;
  v23 = sub_20AEC01D0(a1, (uint64_t)p_p, v22);
  sub_20AEC01D0(v23, (uint64_t)" ", 1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  sub_20AEC01D0(a1, (uint64_t)"[row byte stride ", 17);
  v24 = (_QWORD *)std::ostream::operator<<();
  sub_20AEC01D0(v24, (uint64_t)", ", 2);
  if (*(_BYTE *)(a2 + 52) && *(_QWORD *)(a2 + 40))
  {
    v25 = *(_QWORD *)(a2 + 8);
    v26 = *(std::__shared_weak_count **)(a2 + 16);
    if (v26)
    {
      v27 = (unint64_t *)&v26->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v25 + 88))(v25, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
  }
  v30 = (_QWORD *)std::ostream::operator<<();
  sub_20AEC01D0(v30, (uint64_t)"]", 1);
  sub_20AEC01D0(a1, (uint64_t)", values = {\n", 13);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C3FA3D0;
  v31 = *(_QWORD *)(a2 + 8);
  v32 = *(std::__shared_weak_count **)(a2 + 16);
  if (v32)
  {
    v33 = (unint64_t *)&v32->__shared_owners_;
    do
      v34 = __ldxr(v33);
    while (__stxr(v34 + 1, v33));
    v35 = *(_QWORD *)(a2 + 40);
    v36 = *(_DWORD *)(a2 + 48);
    v37 = *(_WORD *)(a2 + 52);
    do
      v38 = __ldxr(v33);
    while (__stxr(v38 + 1, v33));
  }
  else
  {
    v35 = *(_QWORD *)(a2 + 40);
    v36 = *(_DWORD *)(a2 + 48);
    v37 = *(_WORD *)(a2 + 52);
  }
  __p.__r_.__value_.__l.__size_ = v31;
  __p.__r_.__value_.__r.__words[2] = (std::string::size_type)v32;
  v46 = *(_QWORD *)(a2 + 24);
  v47 = *(_DWORD *)(a2 + 32);
  v48 = v35;
  v49 = v36;
  v50 = v37;
  if (v32)
  {
    v39 = (unint64_t *)&v32->__shared_owners_;
    do
      v40 = __ldaxr(v39);
    while (__stlxr(v40 - 1, v39));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
      std::__shared_weak_count::__release_weak(v32);
    }
  }
  v52 = a1;
  sub_20B4CA374(v49, &v52, &__p);
  v41 = (std::__shared_weak_count *)__p.__r_.__value_.__r.__words[2];
  if (__p.__r_.__value_.__r.__words[2])
  {
    v42 = (unint64_t *)(__p.__r_.__value_.__r.__words[2] + 8);
    do
      v43 = __ldaxr(v42);
    while (__stlxr(v43 - 1, v42));
    if (!v43)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
  }
  sub_20AEC01D0(a1, (uint64_t)"\n}", 2);
  result = v51;
  v51 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_20AF9E008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  uint64_t v21;

  sub_20AF9E0BC((uint64_t)&__p);
  v21 = a20;
  a20 = 0;
  if (!v21)
    _Unwind_Resume(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF9E0BC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AF9E124(unsigned int *a1@<X0>, unsigned int *a2@<X2>, const std::string::value_type *a3@<X4>, std::string::size_type a4@<X5>, std::string *a5@<X8>)
{
  uint64_t v9;
  uint64_t v10;
  std::string::size_type v11;
  uint64_t v12;
  int64_t v13;
  unsigned int *v14;
  std::string::size_type v15;
  const std::string::value_type *p_p;
  std::string::size_type v17;
  unsigned int *i;
  const std::string::value_type *v19;
  std::string::size_type v20;
  void *__p;
  std::string::size_type v23;
  unsigned __int8 v24;

  v9 = a1 - a2;
  if (v9 >= -1)
    v10 = -1;
  else
    v10 = a1 - a2;
  v11 = a4 * ~v10;
  v12 = 0;
  v13 = (char *)a1 - (char *)a2;
  if (a1 != a2)
  {
    v14 = a1;
    do
    {
      sub_20AF9E310(v14);
      if ((v24 & 0x80u) == 0)
        v15 = v24;
      else
        v15 = v23;
      if ((char)v24 < 0)
        operator delete(__p);
      v12 += v15;
      ++v14;
    }
    while (v14 != a2);
  }
  a5->__r_.__value_.__r.__words[0] = 0;
  a5->__r_.__value_.__l.__size_ = 0;
  a5->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a5, v12 + v11);
  if (v13 < 0)
  {
    sub_20AF9E310(a1);
    if ((v24 & 0x80u) == 0)
      p_p = (const std::string::value_type *)&__p;
    else
      p_p = (const std::string::value_type *)__p;
    if ((v24 & 0x80u) == 0)
      v17 = v24;
    else
      v17 = v23;
    std::string::append(a5, p_p, v17);
    if ((char)v24 < 0)
    {
      operator delete(__p);
      if ((unint64_t)(v9 + 1) < 2)
        return;
    }
    else if ((unint64_t)(v9 + 1) < 2)
    {
      return;
    }
    for (i = a1 + 1; i != a2; ++i)
    {
      std::string::append(a5, a3, a4);
      sub_20AF9E310(i);
      if ((v24 & 0x80u) == 0)
        v19 = (const std::string::value_type *)&__p;
      else
        v19 = (const std::string::value_type *)__p;
      if ((v24 & 0x80u) == 0)
        v20 = v24;
      else
        v20 = v23;
      std::string::append(a5, v19, v20);
      if ((char)v24 < 0)
        operator delete(__p);
    }
  }
}

void sub_20AF9E2CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  if (*(char *)(v15 + 23) < 0)
    operator delete(*(void **)v15);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AF9E310(unsigned int *a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  std::string v4;
  _QWORD v5[5];
  _QWORD *v6;

  v3 = 0;
  std::to_string(&v4, *a1);
  v5[0] = v2;
  v5[1] = &v4;
  v5[2] = v2;
  v5[3] = &v4;
  v5[4] = &v4;
  v6 = v5;
  ((void (*)(_QWORD **, _BYTE *))sub_20AED65E8)(&v6, v2);
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v4.__r_.__value_.__l.__data_);
  if (v3 == -1)
    sub_20AECFAB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C3F6808[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C3F6790[v3])(v5, v2);
  return result;
}

void sub_20AF9E3FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9E414(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
    operator delete(__p);
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20AF9E438(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AF9E4A0(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_20AF9E4A8(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20AF9E4B0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_20AF9E4C4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

__int128 *sub_20AF9E548()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632678);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632678))
    return &xmmword_254632660;
  v2 = sub_20AF9E624();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254632660, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254632670 = v2->__r_.__value_.__r.__words[2];
    xmmword_254632660 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632660, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632678);
  return &xmmword_254632660;
}

void sub_20AF9E60C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632678);
  _Unwind_Resume(a1);
}

std::string *sub_20AF9E624()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632698);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632698))
    return &stru_254632680;
  sub_20AF9E8C8((uint64_t)__p);
  sub_20AF9E714((char *)__p, &stru_254632680);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632680, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632698);
  return &stru_254632680;
}

void sub_20AF9E6D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632698);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632698);
  _Unwind_Resume(a1);
}

void sub_20AF9E714(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  std::string::size_type v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF87004();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v16 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20AF4DB74();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 2uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20AF9E878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20AEC2E90((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AF9E8C8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546326B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546326B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::img::SharedImage<cv3d::kit::img::Format::Dynamic, cv3d::kit::img::DynamicBuffer, cv3d::kit::img::Mutability::Const>>]", qword_2546326A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546326A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546326B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546326D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546326D8))
  {
    v5 = sub_20AED4780(qword_2546326A0, "<", 0);
    sub_20AED467C(qword_2546326A0, 0, v5, qword_2546326C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546326C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546326D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546326F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546326F8))
  {
    sub_20B531658((uint64_t)qword_2546326C0, (uint64_t)&xmmword_2546326E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546326E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546326F8);
  }
  if (byte_2546326F7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546326E0, *((unint64_t *)&xmmword_2546326E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546326E0;
    *(_QWORD *)(a1 + 16) = unk_2546326F0;
  }
}

void sub_20AF9EA64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546326F8);
  _Unwind_Resume(a1);
}

void sub_20AF9EA7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546326D8);
  _Unwind_Resume(a1);
}

void sub_20AF9EA94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546326B8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AF9EAAC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632718);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632718))
    return &xmmword_254632700;
  v2 = (char *)sub_20AF9EB88();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254632700, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254632710 = *((_QWORD *)v2 + 2);
    xmmword_254632700 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632700, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632718);
  return &xmmword_254632700;
}

void sub_20AF9EB70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632718);
  _Unwind_Resume(a1);
}

void *sub_20AF9EB88()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254632738);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254632738))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ImageData]", qword_254632720);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632720, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632738);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254632758);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254632758))
    return &unk_254632740;
  sub_20B531658((uint64_t)qword_254632720, (uint64_t)&unk_254632740);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254632740, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632758);
  return &unk_254632740;
}

void sub_20AF9EC78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632758);
  _Unwind_Resume(a1);
}

void sub_20AF9EC90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632738);
  _Unwind_Resume(a1);
}

uint64_t sub_20AF9ECA8(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20AED5C4C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20AF9D960((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C3F67F0[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C3F6808[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C3F6790[v11])(&p_dst, &__dst);
  return result;
}

void sub_20AF9EDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9EE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9EE14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9EE28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9EE3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AF9EE50(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

void sub_20AF9EE9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t **v5;
  uint64_t v6;
  __n128 v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  void *v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  uint64_t (***v34)();
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  void (*v42)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  uint64_t (**v47)();
  uint64_t v48;
  std::__shared_weak_count *v49;
  void *v50;
  unsigned int v51[4];
  char v52;
  uint64_t (**v53)();
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t (***v56)();
  char v57;
  char v58;

  v47 = &off_24C3F6928;
  sub_20AF861C4((uint64_t)&v48, a4);
  v7.n128_f64[0] = sub_20AF84F84((uint64_t)&v53, &v47);
  if (v58)
  {
    v9 = v54;
    v8 = v55;
    if (v55)
    {
      p_shared_owners = (unint64_t *)&v55->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
      do
        v12 = __ldxr(p_shared_owners);
      while (__stxr(v12 + 1, p_shared_owners));
      do
        v13 = __ldxr(p_shared_owners);
      while (__stxr(v13 + 1, p_shared_owners));
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
        std::__shared_weak_count::__release_weak(v8);
      }
      do
        v15 = __ldaxr(p_shared_owners);
      while (__stlxr(v15 - 1, p_shared_owners));
      if (!v15)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    if (v58)
    {
      v53 = &off_24C3F6830;
      v16 = v55;
      if (v55)
      {
        v17 = (unint64_t *)&v55->__shared_owners_;
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *, __n128))v16->__on_zero_shared)(v16, v7);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
    }
    if (v8)
    {
      v19 = (unint64_t *)&v8->__shared_owners_;
      do
        v20 = __ldxr(v19);
      while (__stxr(v20 + 1, v19));
      do
        v21 = __ldaxr(v19);
      while (__stlxr(v21 - 1, v19));
      if (!v21)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v8->__on_zero_shared)(v8, v7);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    sub_20B24F754(v9, v4);
    if (v8)
    {
      v22 = (unint64_t *)&v8->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    goto LABEL_55;
  }
  v24 = v50;
  v25 = v48;
  if (v52 && v50)
  {
    v26 = v49;
    if (v49)
    {
      v27 = (unint64_t *)&v49->__shared_owners_;
      do
        v28 = __ldxr(v27);
      while (__stxr(v28 + 1, v27));
      do
        v29 = __ldaxr(v27);
      while (__stlxr(v29 - 1, v27));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *, __n128))v26->__on_zero_shared)(v26, v7);
        std::__shared_weak_count::__release_weak(v26);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *, __n128))(*(_QWORD *)v25 + 88))(v25, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/SharedImage.h:1234", v7);
    v24 = v50;
    v25 = v48;
  }
  v30 = v51[3];
  v31 = v49;
  if (v49)
  {
    v32 = (unint64_t *)&v49->__shared_owners_;
    do
      v33 = __ldxr(v32);
    while (__stxr(v33 + 1, v32));
  }
  v53 = &off_24C3F8AC0;
  v54 = v25;
  v55 = v31;
  v56 = &v53;
  v57 = 1;
  sub_20B285FD0(v51, 0x4C303038u, v24, v30 | 0x100000000, (uint64_t)&v53, (uint64_t)v4);
  if (v57)
  {
    v34 = v56;
    if (v56 == &v53)
    {
      v35 = 4;
      v34 = &v53;
      goto LABEL_47;
    }
    if (v56)
    {
      v35 = 5;
LABEL_47:
      ((void (*)(uint64_t (***)()))(*v34)[v35])(v34);
    }
  }
  v36 = *v5;
  v37 = v4[1];
  v38 = v4[2];
  *(_QWORD *)(v6 - 80) = &off_24C4169B8;
  *(_QWORD *)(v6 - 72) = v37;
  *(_QWORD *)(v6 - 64) = v38;
  if (v38)
  {
    v39 = (unint64_t *)(v38 + 8);
    do
      v40 = __ldxr(v39);
    while (__stxr(v40 + 1, v39));
  }
  *(_QWORD *)(v6 - 88) = sub_20AFA2B84;
  v41 = *v36;
  if (*(_BYTE *)(*v36 + 480))
  {
    sub_20AFA2CC8((_QWORD *)(v41 + 448), (void (**)(uint64_t))(v6 - 88));
    v42 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(v6 - 88);
    if (v42)
      v42(0, v6 - 88, 0, 0, 0);
  }
  else
  {
    v43 = v6 - 88;
    *(_QWORD *)(v41 + 464) = v37;
    *(_QWORD *)(v41 + 472) = v38;
    *(_QWORD *)(v43 + 16) = 0;
    *(_QWORD *)(v43 + 24) = 0;
    *(_QWORD *)(v41 + 448) = sub_20AFA2B84;
    *(_QWORD *)(v41 + 456) = &off_24C4169B8;
    sub_20B285E60((_QWORD *)(v6 - 80));
    *(_BYTE *)(v41 + 480) = 1;
  }
LABEL_55:
  v47 = &off_24C3F6928;
  v44 = v49;
  if (v49)
  {
    v45 = (unint64_t *)&v49->__shared_owners_;
    do
      v46 = __ldaxr(v45);
    while (__stlxr(v46 - 1, v45));
    if (!v46)
    {
      ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
      std::__shared_weak_count::__release_weak(v44);
    }
  }
}

void sub_20AFA1EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20AFA2888(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8AC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA28FC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8AC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA2970(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8AC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA29C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8AC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA29F0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA2A48(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA2AB0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA2B0C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE1ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE1ENSO_13DynamicBuff"
                                "erELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE1ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE1ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA2B78()
{
  return &unk_24C3F8B20;
}

void sub_20AFA2B84(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20AFA2BB8(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t result;

  v5 = *(_QWORD *)(v3 + 16);
  v4 = *(_QWORD *)(v3 + 24);
  a3[1] = &off_24C4169B8;
  a3[2] = v5;
  a3[3] = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  result = 0;
  *a3 = sub_20AFA2B84;
  return result;
}

uint64_t sub_20AFA2C00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t result;

  *(_QWORD *)(a3 + 8) = &off_24C4169B8;
  *(_OWORD *)(a3 + 16) = *(_OWORD *)(v3 + 16);
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)a3 = sub_20AFA2B84;
  (**(void (***)(uint64_t))(v3 + 8))(v3 + 8);
  result = 0;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20AFA2C48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "N4cv3d3kit2cv14PixelBufferRefE")
    {
      if (((v6 & (unint64_t)"N4cv3d3kit2cv14PixelBufferRefE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "N4cv3d3kit2cv14PixelBufferRefE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit2cv14PixelBufferRefE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5BBC9C)
  {
    return 0;
  }
  return v5 + 8;
}

_QWORD *sub_20AFA2CC8(_QWORD *a1, void (**a2)(uint64_t))
{
  _QWORD v4[9];

  v4[8] = *MEMORY[0x24BDAC8D0];
  v4[0] = 0;
  v4[1] = 0;
  if (*a2)
    (*a2)(2);
  if (v4 != a1 && *a1 != (unsigned __int128)0)
    ((void (*)(uint64_t, _QWORD *, _QWORD *, _QWORD, _QWORD))*a1)(2, a1, v4, 0, 0);
  if (v4[0])
    ((void (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))v4[0])(0, v4, 0, 0, 0);
  return a1;
}

void sub_20AFA2E20(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AFA2E40(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8B40;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA2EB4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8B40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA2F28(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8B40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA2F78(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8B40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA2FA8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA3000(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA3068(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA30C4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE2ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE2ENSO_13DynamicBuff"
                                "erELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE2ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE2ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA3130()
{
  return &unk_24C3F8BA0;
}

_QWORD *sub_20AFA313C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8BC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA31B0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8BC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA3224(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8BC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA3274(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8BC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA32A4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA32FC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA3364(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA33C0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE3ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE3ENSO_13DynamicBuff"
                                "erELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE3ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE3ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA342C()
{
  return &unk_24C3F8C20;
}

_QWORD *sub_20AFA3438(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8C40;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA34AC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8C40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA3520(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8C40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA3570(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8C40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA35A0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA35F8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA3660(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA36BC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE4ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE4ENSO_13DynamicBuff"
                                "erELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE4ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE4ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA3728()
{
  return &unk_24C3F8CA0;
}

_QWORD *sub_20AFA3734(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8CC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA37A8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8CC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA381C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8CC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA386C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8CC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA389C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA38F4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA395C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA39B8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE5ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE5ENSO_13DynamicBuff"
                                "erELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE5ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE5ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA3A24()
{
  return &unk_24C3F8D20;
}

_QWORD *sub_20AFA3A30(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8D40;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA3AA4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8D40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA3B18(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8D40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA3B68(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8D40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA3B98(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA3BF0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA3C58(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA3CB4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE7ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE7ENSO_13DynamicBuff"
                                "erELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE7ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE7ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA3D20()
{
  return &unk_24C3F8DA0;
}

_QWORD *sub_20AFA3D2C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8DC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA3DA0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8DC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA3E14(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8DC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA3E64(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8DC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA3E94(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA3EEC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA3F54(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA3FB0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE8ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE8ENSO_13DynamicBuff"
                                "erELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE8ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE8ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA401C()
{
  return &unk_24C3F8E20;
}

_QWORD *sub_20AFA4028(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8E40;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA409C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8E40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA4110(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8E40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA4160(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8E40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA4190(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA41E8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA4250(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA42AC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE21ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE21ENSO_13DynamicBuf"
                                "ferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE21ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE21ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA4318()
{
  return &unk_24C3F8EA0;
}

_QWORD *sub_20AFA4324(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8EC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA4398(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8EC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA440C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8EC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA445C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8EC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA448C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA44E4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA454C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA45A8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE22ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE22ENSO_13DynamicBuf"
                                "ferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE22ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE22ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA4614()
{
  return &unk_24C3F8F20;
}

_QWORD *sub_20AFA4620(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8F40;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA4694(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8F40;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA4708(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8F40;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA4758(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8F40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA4788(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA47E0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA4848(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA48A4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE25ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE25ENSO_13DynamicBuf"
                                "ferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE25ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE25ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA4910()
{
  return &unk_24C3F8FA0;
}

_QWORD *sub_20AFA491C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F8FC0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA4990(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F8FC0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA4A04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F8FC0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA4A54(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F8FC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA4A84(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA4ADC(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA4B44(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA4BA0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE31ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE31ENSO_13DynamicBuf"
                                "ferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE31ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE31ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA4C0C()
{
  return &unk_24C3F9020;
}

_QWORD *sub_20AFA4C18(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F9040;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA4C8C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F9040;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA4D00(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F9040;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA4D50(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F9040;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA4D80(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA4DD8(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA4E40(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA4E9C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE32ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE32ENSO_13DynamicBuf"
                                "ferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE32ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE32ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA4F08()
{
  return &unk_24C3F90A0;
}

_QWORD *sub_20AFA4F14(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F90C0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA4F88(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F90C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA4FFC(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F90C0;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA504C(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F90C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA507C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA50D4(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA513C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA5198(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE37ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE37ENSO_13DynamicBuf"
                                "ferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE37ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE37ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA5204()
{
  return &unk_24C3F9120;
}

_QWORD *sub_20AFA5210(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C3F9140;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA5284(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C3F9140;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFA52F8(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;

  result = operator new(0x18uLL);
  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a1 + 16);
  *result = &off_24C3F9140;
  result[1] = v4;
  result[2] = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  return result;
}

uint64_t sub_20AFA5348(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = *(_QWORD *)(result + 8);
  v2 = *(_QWORD *)(result + 16);
  *a2 = &off_24C3F9140;
  a2[1] = v3;
  a2[2] = v2;
  if (v2)
  {
    v4 = (unint64_t *)(v2 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
  return result;
}

void sub_20AFA5378(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFA53D0(_QWORD *__p)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = (std::__shared_weak_count *)__p[2];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    operator delete(__p);
  }
  else
  {
LABEL_5:
    operator delete(__p);
  }
}

void sub_20AFA5438(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

uint64_t sub_20AFA5494(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4D"
                     "ataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENK"
                     "UlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE38ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferVi"
                                "ewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5Erro"
                                "rEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE38ENSO_13DynamicBuf"
                                "ferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE38ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12_GLOBAL__N_120GetCVPixelBufferImplIZNS1_20GetCVPixelBufferViewERKNS1_4DataEE3$_0EENSt12experimental8expectedINS_3kit2cv14PixelBufferRefENS_3esn5ErrorEEERKNS1_5ImageET_ENKUlRKSJ_E_clINSA_3img11SharedImageILNSO_6FormatE38ENSO_13DynamicBufferELNSO_10MutabilityE0EEEEESC_SL_EUlPvE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFA5500()
{
  return &unk_24C3F91A0;
}

void sub_20AFA550C(char *a1@<X0>, uint64_t a2@<X8>)
{
  size_t v4;
  unsigned __int128 v5;
  _BOOL4 v6;
  void *v7[2];
  uint64_t v8;
  char v9;
  void *__p[2];
  uint64_t v11;
  unsigned __int128 v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x24BDAC8D0];
  if (a1)
  {
    v4 = strlen(a1);
    sub_20B216330(a1, v4, (uint64_t)v7);
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 24) = 0;
    if (v9)
    {
      *(_OWORD *)a2 = *(_OWORD *)v7;
      *(_QWORD *)(a2 + 16) = v8;
      v7[1] = 0;
      v8 = 0;
      v7[0] = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    *(_BYTE *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 80) = 0;
    if (v13)
    {
      *(_OWORD *)(a2 + 32) = *(_OWORD *)__p;
      *(_QWORD *)(a2 + 48) = v11;
      __p[1] = 0;
      v11 = 0;
      __p[0] = 0;
      do
        v5 = __ldaxp(&v12);
      while (__stlxp(v5, &v12));
      *(_OWORD *)(a2 + 64) = v5;
      *(_BYTE *)(a2 + 80) = 1;
      v6 = v13 != 0;
      *(_BYTE *)(a2 + 96) = 0;
      *(_BYTE *)(a2 + 120) = 0;
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 144) = 0;
      if (v6 && SHIBYTE(v11) < 0)
        operator delete(__p[0]);
    }
    else
    {
      *(_BYTE *)(a2 + 96) = 0;
      *(_BYTE *)(a2 + 120) = 0;
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 144) = 0;
    }
    if (v9)
    {
      if (SHIBYTE(v8) < 0)
        operator delete(v7[0]);
    }
  }
  else
  {
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
  }
}

uint64_t sub_20AFA5678(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 80) && *(char *)(a1 + 55) < 0)
  {
    operator delete(*(void **)(a1 + 32));
    if (!*(_BYTE *)(a1 + 24))
      return a1;
  }
  else if (!*(_BYTE *)(a1 + 24))
  {
    return a1;
  }
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

size_t sub_20AFA56E4@<X0>(size_t result@<X0>, uint64_t a2@<X8>)
{
  const void *v3;
  size_t v4;
  _QWORD *p_dst;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  char v9;
  _QWORD *v10;
  unint64_t v11;
  _BYTE *v12;
  _BYTE *v13;
  unint64_t v14;
  int8x8_t v15;
  uint64_t v16;
  _BYTE *v17;
  _QWORD *__dst;
  __int128 v19;
  _QWORD *v20;
  _BYTE v21[15];
  char v22;
  _BYTE v23[15];
  _QWORD v24[3];

  v24[2] = *MEMORY[0x24BDAC8D0];
  if (!result)
  {
    *(_OWORD *)(a2 + 128) = 0u;
    *(_OWORD *)(a2 + 144) = 0u;
    *(_OWORD *)(a2 + 96) = 0u;
    *(_OWORD *)(a2 + 112) = 0u;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 80) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    return result;
  }
  v3 = (const void *)result;
  result = strlen((const char *)result);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v4 = result;
  if (result >= 0x17)
  {
    v6 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v6 = result | 7;
    v7 = v6 + 1;
    p_dst = operator new(v6 + 1);
    *(_QWORD *)&v19 = v4;
    *((_QWORD *)&v19 + 1) = v7 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v19) = result;
    p_dst = &__dst;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memcpy(p_dst, v3, v4);
LABEL_11:
  *((_BYTE *)p_dst + v4) = 0;
  *(_QWORD *)&v23[7] = *(_QWORD *)((char *)&v19 + 7);
  v8 = __dst;
  *(_QWORD *)v23 = v19;
  v9 = HIBYTE(v19);
  v10 = &v20;
  *(_QWORD *)&v21[7] = *(_QWORD *)&v23[7];
  v11 = v19;
  v20 = __dst;
  *(_QWORD *)v21 = v19;
  v22 = HIBYTE(v19);
  if (v19 >= 0)
    v11 = HIBYTE(v19);
  else
    v10 = __dst;
  if (v11)
  {
    v12 = v10;
    if (v11 >= 8)
    {
      v12 = (char *)v10 + (v11 & 0xFFFFFFFFFFFFFFF8);
      v13 = (char *)v10 + 3;
      v14 = v11 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v15 = vceq_s8(*(int8x8_t *)(v13 - 3), (int8x8_t)0x2323232323232323);
        if ((v15.i8[0] & 1) != 0)
        {
          *(v13 - 3) = 95;
          if ((v15.i8[1] & 1) == 0)
          {
LABEL_20:
            if ((v15.i8[2] & 1) == 0)
              goto LABEL_21;
            goto LABEL_29;
          }
        }
        else if ((v15.i8[1] & 1) == 0)
        {
          goto LABEL_20;
        }
        *(v13 - 2) = 95;
        if ((v15.i8[2] & 1) == 0)
        {
LABEL_21:
          if ((v15.i8[3] & 1) == 0)
            goto LABEL_22;
          goto LABEL_30;
        }
LABEL_29:
        *(v13 - 1) = 95;
        if ((v15.i8[3] & 1) == 0)
        {
LABEL_22:
          if ((v15.i8[4] & 1) == 0)
            goto LABEL_23;
          goto LABEL_31;
        }
LABEL_30:
        *v13 = 95;
        if ((v15.i8[4] & 1) == 0)
        {
LABEL_23:
          if ((v15.i8[5] & 1) == 0)
            goto LABEL_24;
          goto LABEL_32;
        }
LABEL_31:
        v13[1] = 95;
        if ((v15.i8[5] & 1) == 0)
        {
LABEL_24:
          if ((v15.i8[6] & 1) == 0)
            goto LABEL_25;
          goto LABEL_33;
        }
LABEL_32:
        v13[2] = 95;
        if ((v15.i8[6] & 1) == 0)
        {
LABEL_25:
          if ((v15.i8[7] & 1) != 0)
            goto LABEL_34;
          goto LABEL_17;
        }
LABEL_33:
        v13[3] = 95;
        if ((v15.i8[7] & 1) != 0)
LABEL_34:
          v13[4] = 95;
LABEL_17:
        v13 += 8;
        v14 -= 8;
        if (!v14)
        {
          if (v11 == (v11 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_36;
          break;
        }
      }
    }
    v17 = (char *)v10 + v11;
    do
    {
      if (*v12 == 35)
        *v12 = 95;
      ++v12;
    }
    while (v12 != v17);
LABEL_36:
    v8 = v20;
    v9 = v22;
  }
  v24[0] = *(_QWORD *)v21;
  *(_QWORD *)((char *)v24 + 7) = *(_QWORD *)&v21[7];
  v16 = v24[0];
  *(_QWORD *)a2 = v8;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v24 + 7);
  *(_BYTE *)(a2 + 23) = v9;
  *(_BYTE *)(a2 + 24) = 1;
  *(_BYTE *)(a2 + 32) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  *(_BYTE *)(a2 + 96) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 144) = 0;
  return result;
}

void sub_20AFA5988(char *__s@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  unsigned __int8 v4;
  unsigned __int8 v5;
  size_t v9;
  size_t v10;
  void **p_dst;
  void **v12;
  void *v13;
  void **v14;
  void *v15;
  char v16;
  uint64_t v17;
  uint64_t v18;
  size_t v19;
  size_t v20;
  void *p_p;
  uint64_t v22;
  uint64_t v23;
  void **v24;
  unint64_t v25;
  _BYTE *v26;
  _BYTE *v27;
  unint64_t v28;
  int8x8_t v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  void *__p;
  __int128 v34;
  void **__dst;
  __int128 v36;
  void **v37;
  _BYTE v38[15];
  unsigned __int8 v39;
  _QWORD v40[2];
  _QWORD v41[2];
  _QWORD v42[2];
  _QWORD v43[2];
  _QWORD v44[3];

  v44[2] = *MEMORY[0x24BDAC8D0];
  if (!__s)
  {
    v12 = 0;
    if (a2)
      goto LABEL_16;
LABEL_7:
    v13 = 0;
    if (__s)
      goto LABEL_25;
LABEL_8:
    v14 = 0;
    if (a2)
      goto LABEL_54;
    goto LABEL_9;
  }
  v9 = strlen(__s);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v17 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v17 = v9 | 7;
    v18 = v17 + 1;
    p_dst = (void **)operator new(v17 + 1);
    *(_QWORD *)&v36 = v10;
    *((_QWORD *)&v36 + 1) = v18 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_14;
  }
  HIBYTE(v36) = v9;
  p_dst = (void **)&__dst;
  if (v9)
LABEL_14:
    memcpy(p_dst, __s, v10);
  *((_BYTE *)p_dst + v10) = 0;
  v12 = __dst;
  v42[0] = v36;
  *(_QWORD *)((char *)v42 + 7) = *(_QWORD *)((char *)&v36 + 7);
  v5 = HIBYTE(v36);
  v36 = 0uLL;
  __dst = 0;
  if (!a2)
    goto LABEL_7;
LABEL_16:
  v19 = strlen(a2);
  if (v19 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v20 = v19;
  if (v19 >= 0x17)
  {
    v22 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v19 | 7) != 0x17)
      v22 = v19 | 7;
    v23 = v22 + 1;
    p_p = operator new(v22 + 1);
    *(_QWORD *)&v34 = v20;
    *((_QWORD *)&v34 + 1) = v23 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_23;
  }
  HIBYTE(v34) = v19;
  p_p = &__p;
  if (v19)
LABEL_23:
    memcpy(p_p, a2, v20);
  *((_BYTE *)p_p + v20) = 0;
  v13 = __p;
  v40[0] = v34;
  *(_QWORD *)((char *)v40 + 7) = *(_QWORD *)((char *)&v34 + 7);
  v3 = HIBYTE(v34);
  v34 = 0uLL;
  __p = 0;
  v41[0] = v40[0];
  *(_QWORD *)((char *)v41 + 7) = *(_QWORD *)((char *)v40 + 7);
  v40[0] = 0;
  *(_QWORD *)((char *)v40 + 7) = 0;
  if (!__s)
    goto LABEL_8;
LABEL_25:
  *(_QWORD *)&v38[7] = *(_QWORD *)((char *)v42 + 7);
  v37 = v12;
  *(_QWORD *)v38 = v42[0];
  v39 = v5;
  v42[0] = 0;
  *(_QWORD *)((char *)v42 + 7) = 0;
  if ((v5 & 0x80u) == 0)
    v24 = (void **)&v37;
  else
    v24 = v12;
  v25 = v5;
  if ((v5 & 0x80u) != 0)
    v25 = *(_QWORD *)v38;
  if (v25)
  {
    v26 = v24;
    if (v25 >= 8)
    {
      v26 = (char *)v24 + (v25 & 0xFFFFFFFFFFFFFFF8);
      v27 = (char *)v24 + 3;
      v28 = v25 & 0xFFFFFFFFFFFFFFF8;
      while (1)
      {
        v29 = vceq_s8(*(int8x8_t *)(v27 - 3), (int8x8_t)0x2323232323232323);
        if ((v29.i8[0] & 1) != 0)
        {
          *(v27 - 3) = 95;
          if ((v29.i8[1] & 1) == 0)
            goto LABEL_36;
        }
        else if ((v29.i8[1] & 1) == 0)
        {
LABEL_36:
          if ((v29.i8[2] & 1) != 0)
            goto LABEL_37;
          goto LABEL_45;
        }
        *(v27 - 2) = 95;
        if ((v29.i8[2] & 1) != 0)
        {
LABEL_37:
          *(v27 - 1) = 95;
          if ((v29.i8[3] & 1) == 0)
            goto LABEL_38;
          goto LABEL_46;
        }
LABEL_45:
        if ((v29.i8[3] & 1) == 0)
        {
LABEL_38:
          if ((v29.i8[4] & 1) != 0)
            goto LABEL_39;
          goto LABEL_47;
        }
LABEL_46:
        *v27 = 95;
        if ((v29.i8[4] & 1) != 0)
        {
LABEL_39:
          v27[1] = 95;
          if ((v29.i8[5] & 1) == 0)
            goto LABEL_40;
          goto LABEL_48;
        }
LABEL_47:
        if ((v29.i8[5] & 1) == 0)
        {
LABEL_40:
          if ((v29.i8[6] & 1) != 0)
            goto LABEL_41;
          goto LABEL_49;
        }
LABEL_48:
        v27[2] = 95;
        if ((v29.i8[6] & 1) != 0)
        {
LABEL_41:
          v27[3] = 95;
          if ((v29.i8[7] & 1) != 0)
            goto LABEL_50;
          goto LABEL_33;
        }
LABEL_49:
        if ((v29.i8[7] & 1) != 0)
LABEL_50:
          v27[4] = 95;
LABEL_33:
        v27 += 8;
        v28 -= 8;
        if (!v28)
        {
          if (v25 == (v25 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_52;
          break;
        }
      }
    }
    v32 = (char *)v24 + v25;
    do
    {
      if (*v26 == 35)
        *v26 = 95;
      ++v26;
    }
    while (v26 != v32);
LABEL_52:
    v12 = v37;
    v5 = v39;
  }
  v14 = v12;
  v44[0] = *(_QWORD *)v38;
  *(_QWORD *)((char *)v44 + 7) = *(_QWORD *)&v38[7];
  v4 = v5;
  v12 = 0;
  v5 = 0;
  if (a2)
  {
LABEL_54:
    v15 = 0;
    v16 = 0;
    v43[0] = v41[0];
    *(_QWORD *)((char *)v43 + 7) = *(_QWORD *)((char *)v41 + 7);
    v41[0] = 0;
    *(_QWORD *)((char *)v41 + 7) = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    if (!__s)
      goto LABEL_56;
    goto LABEL_55;
  }
LABEL_9:
  v15 = v13;
  v16 = v3;
  v13 = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (__s)
  {
LABEL_55:
    v30 = v44[0];
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 8) = v30;
    *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v44 + 7);
    *(_BYTE *)(a3 + 23) = v4;
    v44[0] = 0;
    *(_QWORD *)((char *)v44 + 7) = 0;
    *(_BYTE *)(a3 + 24) = 1;
    v4 = 0;
    v14 = 0;
  }
LABEL_56:
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  if (a2)
  {
    v31 = v43[0];
    *(_QWORD *)(a3 + 32) = v13;
    *(_QWORD *)(a3 + 40) = v31;
    *(_QWORD *)(a3 + 47) = *(_QWORD *)((char *)v43 + 7);
    *(_BYTE *)(a3 + 55) = v3;
    v43[0] = 0;
    *(_QWORD *)((char *)v43 + 7) = 0;
    *(_QWORD *)(a3 + 64) = 0;
    *(_QWORD *)(a3 + 72) = 0;
    *(_BYTE *)(a3 + 80) = 1;
  }
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  if (__s)
  {
    if ((v4 & 0x80) != 0)
      operator delete(v14);
  }
  if (a2)
  {
    if ((v16 & 0x80) == 0)
    {
      if ((SHIBYTE(v34) & 0x80000000) == 0)
        goto LABEL_64;
LABEL_73:
      operator delete(__p);
      if (!__s)
        return;
      goto LABEL_65;
    }
    operator delete(v15);
    if (SHIBYTE(v34) < 0)
      goto LABEL_73;
  }
LABEL_64:
  if (!__s)
    return;
LABEL_65:
  if ((v5 & 0x80) != 0)
  {
    operator delete(v12);
    if ((SHIBYTE(v36) & 0x80000000) == 0)
      return;
  }
  else if ((SHIBYTE(v36) & 0x80000000) == 0)
  {
    return;
  }
  operator delete(__dst);
}

void sub_20AFA5E14(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  char v3;

  if (v1)
  {
    if (v3 < 0)
      operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AFA5E30(char *__s@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 v3;
  size_t v7;
  size_t v8;
  void *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  char v14;
  unsigned __int128 v15;
  uint64_t *v16;
  unint64_t v17;
  uint64_t *v18;
  _BYTE *v19;
  unint64_t v20;
  int8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  void *v25;
  __int128 v26;
  uint64_t *v27;
  _BYTE v28[15];
  unsigned __int8 v29;
  void *__p;
  __int128 v31;
  unsigned __int128 v32;
  _QWORD v33[2];
  _QWORD v34[2];
  _QWORD v35[2];
  _QWORD v36[3];

  v36[2] = *MEMORY[0x24BDAC8D0];
  if (__s)
  {
    v7 = strlen(__s);
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v8 = v7;
    if (v7 >= 0x17)
    {
      v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v7 | 7) != 0x17)
        v11 = v7 | 7;
      v12 = v11 + 1;
      v9 = operator new(v11 + 1);
      *(_QWORD *)&v26 = v8;
      *((_QWORD *)&v26 + 1) = v12 | 0x8000000000000000;
      v25 = v9;
    }
    else
    {
      HIBYTE(v26) = v7;
      v9 = &v25;
      if (!v7)
        goto LABEL_11;
    }
    memcpy(v9, __s, v8);
LABEL_11:
    *((_BYTE *)v9 + v8) = 0;
    v10 = (uint64_t *)v25;
    v34[0] = v26;
    *(_QWORD *)((char *)v34 + 7) = *(_QWORD *)((char *)&v26 + 7);
    v3 = HIBYTE(v26);
    v26 = 0uLL;
    v25 = 0;
    goto LABEL_12;
  }
  v10 = 0;
LABEL_12:
  v27 = (uint64_t *)a2;
  sub_20B1E487C((uint64_t *)&v27);
  *(_QWORD *)&v32 = v27;
  *((_QWORD *)&v32 + 1) = 1;
  v13 = __p;
  v33[0] = v31;
  *(_QWORD *)((char *)v33 + 7) = *(_QWORD *)((char *)&v31 + 7);
  v14 = HIBYTE(v31);
  v31 = 0uLL;
  __p = 0;
  do
    v15 = __ldaxp(&v32);
  while (__stlxp(v15, &v32));
  if (__s)
  {
    *(_QWORD *)&v28[7] = *(_QWORD *)((char *)v34 + 7);
    v27 = v10;
    *(_QWORD *)v28 = v34[0];
    v29 = v3;
    v34[0] = 0;
    *(_QWORD *)((char *)v34 + 7) = 0;
    if ((v3 & 0x80u) == 0)
      v16 = (uint64_t *)&v27;
    else
      v16 = v10;
    v17 = v3;
    if ((v3 & 0x80u) != 0)
      v17 = *(_QWORD *)v28;
    if (v17)
    {
      v18 = v16;
      if (v17 >= 8)
      {
        v18 = (uint64_t *)((char *)v16 + (v17 & 0xFFFFFFFFFFFFFFF8));
        v19 = (char *)v16 + 3;
        v20 = v17 & 0xFFFFFFFFFFFFFFF8;
        while (1)
        {
          v21 = vceq_s8(*(int8x8_t *)(v19 - 3), (int8x8_t)0x2323232323232323);
          if ((v21.i8[0] & 1) != 0)
          {
            *(v19 - 3) = 95;
            if ((v21.i8[1] & 1) == 0)
              goto LABEL_26;
          }
          else if ((v21.i8[1] & 1) == 0)
          {
LABEL_26:
            if ((v21.i8[2] & 1) != 0)
              goto LABEL_27;
            goto LABEL_35;
          }
          *(v19 - 2) = 95;
          if ((v21.i8[2] & 1) != 0)
          {
LABEL_27:
            *(v19 - 1) = 95;
            if ((v21.i8[3] & 1) == 0)
              goto LABEL_28;
            goto LABEL_36;
          }
LABEL_35:
          if ((v21.i8[3] & 1) == 0)
          {
LABEL_28:
            if ((v21.i8[4] & 1) != 0)
              goto LABEL_29;
            goto LABEL_37;
          }
LABEL_36:
          *v19 = 95;
          if ((v21.i8[4] & 1) != 0)
          {
LABEL_29:
            v19[1] = 95;
            if ((v21.i8[5] & 1) == 0)
              goto LABEL_30;
            goto LABEL_38;
          }
LABEL_37:
          if ((v21.i8[5] & 1) == 0)
          {
LABEL_30:
            if ((v21.i8[6] & 1) != 0)
              goto LABEL_31;
            goto LABEL_39;
          }
LABEL_38:
          v19[2] = 95;
          if ((v21.i8[6] & 1) != 0)
          {
LABEL_31:
            v19[3] = 95;
            if ((v21.i8[7] & 1) != 0)
              goto LABEL_40;
            goto LABEL_23;
          }
LABEL_39:
          if ((v21.i8[7] & 1) != 0)
LABEL_40:
            v19[4] = 95;
LABEL_23:
          v19 += 8;
          v20 -= 8;
          if (!v20)
          {
            if (v17 == (v17 & 0xFFFFFFFFFFFFFFF8))
              goto LABEL_43;
            break;
          }
        }
      }
      v24 = (uint64_t *)((char *)v16 + v17);
      do
      {
        if (*(_BYTE *)v18 == 35)
          *(_BYTE *)v18 = 95;
        v18 = (uint64_t *)((char *)v18 + 1);
      }
      while (v18 != v24);
LABEL_43:
      v10 = v27;
      v3 = v29;
    }
    *(_QWORD *)((char *)v36 + 7) = *(_QWORD *)&v28[7];
    HIBYTE(v36[0]) = v28[7];
    v35[0] = v33[0];
    *(_QWORD *)((char *)v35 + 7) = *(_QWORD *)((char *)v33 + 7);
    v33[0] = 0;
    *(_QWORD *)((char *)v33 + 7) = 0;
    v22 = *(_QWORD *)v28;
    *(_QWORD *)a3 = v10;
    *(_QWORD *)(a3 + 8) = v22;
    *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v36 + 7);
    *(_BYTE *)(a3 + 23) = v3;
    *(_QWORD *)((char *)v36 + 7) = 0;
    v36[0] = 0;
    *(_BYTE *)(a3 + 24) = 1;
    v3 = 0;
    v10 = 0;
  }
  else
  {
    v35[0] = v33[0];
    *(_QWORD *)((char *)v35 + 7) = *(_QWORD *)((char *)v33 + 7);
    v33[0] = 0;
    *(_QWORD *)((char *)v33 + 7) = 0;
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
  }
  v23 = v35[0];
  *(_QWORD *)(a3 + 32) = v13;
  *(_QWORD *)(a3 + 40) = v23;
  *(_QWORD *)(a3 + 47) = *(_QWORD *)((char *)v35 + 7);
  *(_BYTE *)(a3 + 55) = v14;
  v35[0] = 0;
  *(_QWORD *)((char *)v35 + 7) = 0;
  *(_OWORD *)(a3 + 64) = v15;
  *(_BYTE *)(a3 + 80) = 1;
  *(_BYTE *)(a3 + 96) = 0;
  *(_BYTE *)(a3 + 120) = 0;
  *(_BYTE *)(a3 + 128) = 0;
  *(_BYTE *)(a3 + 144) = 0;
  if (SHIBYTE(v31) < 0)
  {
    operator delete(__p);
    if (!__s)
      return;
  }
  else if (!__s)
  {
    return;
  }
  if ((v3 & 0x80) == 0)
  {
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
LABEL_57:
    operator delete(v25);
    return;
  }
  operator delete(v10);
  if (SHIBYTE(v26) < 0)
    goto LABEL_57;
}

void sub_20AFA61F8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v2;
  char v3;

  if (v1)
  {
    if (v3 < 0)
      operator delete(v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20AFA6214(uint64_t a1)
{
  _QWORD *v2;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  unsigned int v7;
  char v8;
  char *v9;

  v2 = (_QWORD *)(a1 + 96);
  if (!*(_BYTE *)(a1 + 120))
  {
    v7 = 0;
    sub_20AFA98FC((uint64_t)&v4, (uint64_t)v6, a1);
    if (v7 == -1)
      sub_20AECFAB8();
    v9 = &v8;
    ((void (*)(__int128 *__return_ptr, char **, _BYTE *))*(&off_24C3FA580 + v7))(&v4, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _BYTE *))*(&off_24C3FA568 + v7))(&v9, v6);
    if (!*(_BYTE *)(a1 + 120))
    {
      *(_OWORD *)v2 = v4;
      v2[2] = v5;
      *(_BYTE *)(a1 + 120) = 1;
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        return v2;
      return (_QWORD *)*v2;
    }
    if (*(char *)(a1 + 119) < 0)
      operator delete((void *)*v2);
    *(_OWORD *)v2 = v4;
    v2[2] = v5;
  }
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    return v2;
  return (_QWORD *)*v2;
}

void sub_20AFA6324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFA6338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20AFA634C(char *__dst, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  unsigned __int128 *v6;
  unsigned __int128 v7;
  __int128 v8;
  _OWORD *v9;
  char v10;
  __int128 v12;
  __int128 v13;

  *__dst = 0;
  __dst[24] = 0;
  if (*(_BYTE *)(a2 + 40))
  {
    if (*(char *)(a2 + 39) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)(a2 + 16), *(_QWORD *)(a2 + 24));
    }
    else
    {
      v4 = *(_OWORD *)(a2 + 16);
      *((_QWORD *)__dst + 2) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)__dst = v4;
    }
    __dst[24] = 1;
  }
  __dst[32] = 0;
  __dst[80] = 0;
  if (*(_BYTE *)(a2 + 160))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_20AEC60F4(__dst + 32, *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 112);
      *((_QWORD *)__dst + 6) = *(_QWORD *)(a2 + 128);
      *((_OWORD *)__dst + 2) = v5;
    }
    v6 = (unsigned __int128 *)(a2 + 144);
    do
      v7 = __ldaxp(v6);
    while (__stlxp(v7, v6));
    *((_OWORD *)__dst + 4) = v7;
    __dst[80] = 1;
  }
  __dst[96] = 0;
  __dst[120] = 0;
  if (*(_BYTE *)(a2 + 72))
  {
    if (*(char *)(a2 + 71) < 0)
    {
      sub_20AEC60F4(__dst + 96, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 48);
      *((_QWORD *)__dst + 14) = *(_QWORD *)(a2 + 64);
      *((_OWORD *)__dst + 6) = v8;
    }
    __dst[120] = 1;
  }
  v9 = __dst + 128;
  v10 = *(_BYTE *)(a2 + 96);
  if (v10)
  {
    *(_QWORD *)&v13 = *(_QWORD *)(a2 + 80);
    BYTE8(v13) = *(_BYTE *)(a2 + 88);
    *v9 = v13;
    v10 = 1;
  }
  else
  {
    *(_BYTE *)v9 = 0;
  }
  __dst[144] = v10;
  *(_QWORD *)&v12 = *(_QWORD *)a2;
  BYTE8(v12) = *(_BYTE *)(a2 + 8);
  *(_OWORD *)(__dst + 152) = v12;
  __dst[168] = 1;
  sub_20AED3838((uint64_t)(__dst + 176), a2 + 176);
  __dst[208] = 0;
  __dst[368] = 0;
  return __dst;
}

void sub_20AFA64D0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(_BYTE *)(v1 + 120) && *(char *)(v1 + 119) < 0)
    operator delete(*v3);
  if (*(_BYTE *)(v1 + 80) && *(char *)(v1 + 55) < 0)
    operator delete(*v2);
  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AFA6538(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  int v6;
  void *v7;
  void **v8;
  void **v9;
  char v10;
  __int128 v11;
  __int128 v12;
  void *v13;
  size_t v14;
  unsigned __int128 *v15;
  unsigned __int128 v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  unsigned __int128 *v19;

  if (!a3)
    goto LABEL_14;
  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(_QWORD *)(a2 + 8) && *(_QWORD *)a2)
        goto LABEL_22;
    }
    else if (*(_BYTE *)(a2 + 23))
    {
      goto LABEL_22;
    }
  }
  if (!*(_BYTE *)(a2 + 80))
    goto LABEL_14;
  v5 = *(unsigned __int8 *)(a2 + 55);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 40);
  if (!v5 || v6 < 0 && !*(_QWORD *)(a2 + 32))
  {
LABEL_14:
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      *(_BYTE *)(a1 + 24) = 0;
    }
    if (*(_BYTE *)(a1 + 80))
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      {
LABEL_30:
        *(_BYTE *)(a1 + 80) = 0;
        goto LABEL_31;
      }
      v7 = *(void **)(a1 + 32);
LABEL_21:
      operator delete(v7);
      goto LABEL_30;
    }
    goto LABEL_31;
  }
LABEL_22:
  sub_20AFA945C(a1, (_QWORD *)a2);
  v8 = (void **)(a2 + 32);
  v9 = (void **)(a1 + 32);
  if (*(unsigned __int8 *)(a1 + 80) == *(unsigned __int8 *)(a2 + 80))
  {
    if (*(_BYTE *)(a1 + 80))
    {
      if (v9 != v8)
      {
        v10 = *(_BYTE *)(a2 + 55);
        if (*(char *)(a1 + 55) < 0)
        {
          if (v10 >= 0)
            v13 = (void *)(a2 + 32);
          else
            v13 = *(void **)(a2 + 32);
          if (v10 >= 0)
            v14 = *(unsigned __int8 *)(a2 + 55);
          else
            v14 = *(_QWORD *)(a2 + 40);
          sub_20AEC8090(v9, v13, v14);
        }
        else if ((*(_BYTE *)(a2 + 55) & 0x80) != 0)
        {
          sub_20AEC7FCC(v9, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
        }
        else
        {
          v11 = *(_OWORD *)v8;
          *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
          *(_OWORD *)v9 = v11;
        }
      }
      v17 = (unsigned __int128 *)(a2 + 64);
      do
        v18 = __ldaxp(v17);
      while (__stlxp(v18, v17));
      v19 = (unsigned __int128 *)(a1 + 64);
      do
        __ldaxp(v19);
      while (__stlxp(v18, v19));
    }
  }
  else
  {
    if (*(_BYTE *)(a1 + 80))
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_30;
      v7 = *v9;
      goto LABEL_21;
    }
    if (*(char *)(a2 + 55) < 0)
    {
      sub_20AEC60F4(v9, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      v12 = *(_OWORD *)v8;
      *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)v9 = v12;
    }
    v15 = (unsigned __int128 *)(a2 + 64);
    do
      v16 = __ldaxp(v15);
    while (__stlxp(v16, v15));
    *(_OWORD *)(a1 + 64) = v16;
    *(_BYTE *)(a1 + 80) = 1;
  }
LABEL_31:
  if (*(_BYTE *)(a1 + 368))
  {
    if (*(_BYTE *)(a1 + 328) && *(char *)(a1 + 327) < 0)
      operator delete(*(void **)(a1 + 304));
    if (*(_BYTE *)(a1 + 288) && *(char *)(a1 + 263) < 0)
      operator delete(*(void **)(a1 + 240));
    if (*(_BYTE *)(a1 + 232))
    {
      if (*(char *)(a1 + 231) < 0)
        operator delete(*(void **)(a1 + 208));
    }
    *(_BYTE *)(a1 + 368) = 0;
  }
}

void sub_20AFA674C(uint64_t a1, char *__s)
{
  size_t v4;
  unsigned __int128 v5;
  void *v6[2];
  uint64_t v7;
  char v8;
  void *v9[2];
  uint64_t v10;
  unsigned __int128 v11;
  char v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  unsigned __int128 v18;
  char v19;
  void *__p;
  char v21;
  char v22;
  char v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  if (__s && (v4 = strlen(__s)) != 0)
  {
    sub_20B216330(__s, v4, (uint64_t)v6);
    LOBYTE(v13[0]) = 0;
    v15 = 0;
    if (v8)
    {
      *(_OWORD *)v13 = *(_OWORD *)v6;
      v14 = v7;
      v6[1] = 0;
      v7 = 0;
      v6[0] = 0;
      v15 = 1;
    }
    LOBYTE(v16) = 0;
    v19 = 0;
    if (v12)
    {
      v16 = *(_OWORD *)v9;
      v17 = v10;
      v9[1] = 0;
      v10 = 0;
      v9[0] = 0;
      do
        v5 = __ldaxp(&v11);
      while (__stlxp(v5, &v11));
      v18 = v5;
      v19 = 1;
    }
    LOBYTE(__p) = 0;
    v22 = 0;
    v23 = 0;
    v24 = 0;
    sub_20AFA6538(a1, (uint64_t)v13, 1);
    if (v22 && v21 < 0)
      operator delete(__p);
    if (v19 && SHIBYTE(v17) < 0)
      operator delete((void *)v16);
    if (v15 && SHIBYTE(v14) < 0)
      operator delete(v13[0]);
    if (v12 && SHIBYTE(v10) < 0)
      operator delete(v9[0]);
    if (v8)
    {
      if (SHIBYTE(v7) < 0)
        operator delete(v6[0]);
    }
  }
  else
  {
    sub_20AFA6538(a1, 0, 0);
  }
}

void sub_20AFA6914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_20AFA6934((uint64_t)&a21);
  sub_20AFA5678((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFA6934(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 120) && *(char *)(a1 + 119) < 0)
  {
    operator delete(*(void **)(a1 + 96));
    if (!*(_BYTE *)(a1 + 80))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 80))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
LABEL_7:
  if (!*(_BYTE *)(a1 + 24) || (*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

unint64_t sub_20AFA69B8(uint64_t a1)
{
  char v1;
  unint64_t v2;
  int v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unsigned __int128 *v15;
  unsigned __int128 v16;
  _OWORD *v17;
  unint64_t v18;
  _BYTE *v19;
  _BYTE *v20;
  unint64_t v21;
  int8x8_t v22;
  unsigned __int128 v23;
  int v24;
  int v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  char v30;
  uint64_t v31;
  unsigned __int128 *v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v37;
  char v38;
  char v39;
  void *__p;
  void *v41;
  char v42;
  char v43;
  void *__dst[2];
  uint64_t v45;
  unsigned __int8 v46;
  _OWORD v47[2];
  void *v48[4];
  unsigned __int128 v49;
  unsigned __int8 v50;
  _QWORD v51[2];
  _QWORD v52[2];
  _DWORD v53[3];
  _BYTE v54[15];
  _QWORD v55[2];
  _QWORD v56[5];

  v56[2] = *MEMORY[0x24BDAC8D0];
  v4 = *(unsigned __int8 *)(a1 + 24);
  if (*(_BYTE *)(a1 + 24))
  {
    v5 = *(char *)(a1 + 23);
    if (v5 < 0)
    {
      if (*(_QWORD *)(a1 + 8))
      {
LABEL_4:
        v6 = a1 + 208;
        if (!*(_BYTE *)(a1 + 368))
        {
          LOBYTE(__dst[0]) = 0;
          v46 = 0;
          if ((v5 & 0x80) == 0)
          {
LABEL_6:
            *(_OWORD *)__dst = *(_OWORD *)a1;
            v45 = *(_QWORD *)(a1 + 16);
            goto LABEL_16;
          }
LABEL_15:
          sub_20AEC60F4(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
LABEL_16:
          v46 = 1;
          v8 = *(unsigned __int8 *)(a1 + 80);
          LOBYTE(v48[0]) = 0;
          v50 = 0;
          if (!v8)
          {
            v10 = 0;
            v11 = v46;
            goto LABEL_29;
          }
          if ((*(char *)(a1 + 55) & 0x80000000) == 0)
            goto LABEL_18;
          goto LABEL_25;
        }
        goto LABEL_119;
      }
    }
    else if (*(_BYTE *)(a1 + 23))
    {
      goto LABEL_4;
    }
  }
  if (*(_BYTE *)(a1 + 80))
  {
    v7 = *(unsigned __int8 *)(a1 + 55);
    if ((v7 & 0x80u) != 0)
      v7 = *(_QWORD *)(a1 + 40);
    if (v7)
    {
      v6 = a1 + 208;
      if (!*(_BYTE *)(a1 + 368))
      {
        LOBYTE(__dst[0]) = 0;
        v46 = 0;
        if (!v4)
        {
          LOBYTE(v48[0]) = 0;
          v50 = 0;
          if ((*(char *)(a1 + 55) & 0x80000000) == 0)
          {
LABEL_18:
            *(_OWORD *)v48 = *(_OWORD *)(a1 + 32);
            v48[2] = *(void **)(a1 + 48);
LABEL_26:
            v15 = (unsigned __int128 *)(a1 + 64);
            do
              v16 = __ldaxp(v15);
            while (__stlxp(v16, v15));
            v49 = v16;
            v10 = 1;
            v50 = 1;
            v11 = v46;
            if (!v46)
            {
              v12 = 0;
              goto LABEL_58;
            }
LABEL_29:
            *(_QWORD *)&v47[1] = v45;
            v47[0] = *(_OWORD *)__dst;
            __dst[1] = 0;
            v45 = 0;
            __dst[0] = 0;
            v1 = BYTE7(v47[1]);
            v12 = *(_QWORD *)&v47[0];
            if ((SBYTE7(v47[1]) & 0x80u) == 0)
              v17 = v47;
            else
              v17 = *(_OWORD **)&v47[0];
            v18 = BYTE7(v47[1]);
            if (SBYTE7(v47[1]) < 0)
              v18 = *((_QWORD *)&v47[0] + 1);
            if (v18)
            {
              v19 = v17;
              if (v18 >= 8)
              {
                v19 = (char *)v17 + (v18 & 0xFFFFFFFFFFFFFFF8);
                v20 = (char *)v17 + 3;
                v21 = v18 & 0xFFFFFFFFFFFFFFF8;
                while (1)
                {
                  v22 = vceq_s8(*(int8x8_t *)(v20 - 3), (int8x8_t)0x2323232323232323);
                  if ((v22.i8[0] & 1) != 0)
                  {
                    *(v20 - 3) = 95;
                    if ((v22.i8[1] & 1) == 0)
                    {
LABEL_40:
                      if ((v22.i8[2] & 1) == 0)
                        goto LABEL_41;
                      goto LABEL_49;
                    }
                  }
                  else if ((v22.i8[1] & 1) == 0)
                  {
                    goto LABEL_40;
                  }
                  *(v20 - 2) = 95;
                  if ((v22.i8[2] & 1) == 0)
                  {
LABEL_41:
                    if ((v22.i8[3] & 1) == 0)
                      goto LABEL_42;
                    goto LABEL_50;
                  }
LABEL_49:
                  *(v20 - 1) = 95;
                  if ((v22.i8[3] & 1) == 0)
                  {
LABEL_42:
                    if ((v22.i8[4] & 1) == 0)
                      goto LABEL_43;
                    goto LABEL_51;
                  }
LABEL_50:
                  *v20 = 95;
                  if ((v22.i8[4] & 1) == 0)
                  {
LABEL_43:
                    if ((v22.i8[5] & 1) == 0)
                      goto LABEL_44;
                    goto LABEL_52;
                  }
LABEL_51:
                  v20[1] = 95;
                  if ((v22.i8[5] & 1) == 0)
                  {
LABEL_44:
                    if ((v22.i8[6] & 1) == 0)
                      goto LABEL_45;
                    goto LABEL_53;
                  }
LABEL_52:
                  v20[2] = 95;
                  if ((v22.i8[6] & 1) == 0)
                  {
LABEL_45:
                    if ((v22.i8[7] & 1) != 0)
                      goto LABEL_54;
                    goto LABEL_37;
                  }
LABEL_53:
                  v20[3] = 95;
                  if ((v22.i8[7] & 1) != 0)
LABEL_54:
                    v20[4] = 95;
LABEL_37:
                  v20 += 8;
                  v21 -= 8;
                  if (!v21)
                  {
                    if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
                      goto LABEL_56;
                    break;
                  }
                }
              }
              v17 = (_OWORD *)((char *)v17 + v18);
              do
              {
                if (*v19 == 35)
                  *v19 = 95;
                ++v19;
              }
              while (v19 != (_BYTE *)v17);
LABEL_56:
              v12 = *(_QWORD *)&v47[0];
              v1 = BYTE7(v47[1]);
              v10 = v50;
            }
            v52[0] = *((_QWORD *)&v47[0] + 1);
            *(_QWORD *)((char *)v52 + 7) = *(_QWORD *)((char *)v47 + 15);
            memset(v47, 0, 24);
            if (!v10)
            {
              v13 = 0;
              v14 = 0;
              goto LABEL_60;
            }
LABEL_58:
            v13 = (unint64_t)v48[0];
            v51[0] = v48[1];
            *(void **)((char *)v51 + 7) = *(void **)((char *)&v48[1] + 7);
            LOBYTE(v17) = HIBYTE(v48[2]);
            memset(v48, 0, 24);
            do
            {
              v23 = __ldaxp(&v49);
              v14 = *((_QWORD *)&v23 + 1);
              v2 = v23;
            }
            while (__stlxp(v23, &v49));
LABEL_60:
            if (v11)
            {
              v41 = 0;
              v43 = 0;
              v56[0] = v52[0];
              *(_QWORD *)((char *)v56 + 7) = *(_QWORD *)((char *)v52 + 7);
              v52[0] = 0;
              *(_QWORD *)((char *)v52 + 7) = 0;
              v24 = 1;
              if (v10)
                goto LABEL_62;
            }
            else
            {
              v24 = 0;
              v41 = (void *)v12;
              v43 = v1;
              v12 = 0;
              if (v10)
              {
LABEL_62:
                __p = 0;
                v42 = 0;
                v55[0] = v51[0];
                *(_QWORD *)((char *)v55 + 7) = *(_QWORD *)((char *)v51 + 7);
                v51[0] = 0;
                *(_QWORD *)((char *)v51 + 7) = 0;
                v25 = 1;
                if (*(_BYTE *)(v6 + 160))
                  goto LABEL_63;
                goto LABEL_71;
              }
            }
            v14 = 0;
            v25 = 0;
            __p = (void *)v13;
            v42 = (char)v17;
            v13 = 0;
            if (*(_BYTE *)(v6 + 160))
            {
LABEL_63:
              if (*(unsigned __int8 *)(v6 + 24) == v24)
              {
                if (*(_BYTE *)(v6 + 24))
                {
                  if (*(char *)(v6 + 23) < 0)
                  {
                    v38 = (char)v17;
                    operator delete(*(void **)v6);
                    LOBYTE(v17) = v38;
                  }
                  *(_QWORD *)v6 = v12;
                  v26 = *(_QWORD *)((char *)v56 + 7);
                  *(_QWORD *)(v6 + 8) = v56[0];
                  *(_QWORD *)(v6 + 15) = v26;
                  *(_BYTE *)(v6 + 23) = v1;
                  v12 &= 0xFFFFFFFFFFFFFF00;
                  v1 = 0;
                  v27 = *(unsigned __int8 *)(v6 + 80);
                  if (v27 != v25)
                    goto LABEL_93;
LABEL_82:
                  if (v27)
                  {
                    if (*(char *)(v6 + 55) < 0)
                    {
                      v30 = (char)v17;
                      operator delete(*(void **)(v6 + 32));
                      LOBYTE(v17) = v30;
                    }
                    v31 = v55[0];
                    *(_QWORD *)(v6 + 32) = v13;
                    *(_QWORD *)(v6 + 40) = v31;
                    *(_QWORD *)(v6 + 47) = *(_QWORD *)((char *)v55 + 7);
                    *(_BYTE *)(v6 + 55) = (_BYTE)v17;
                    v13 &= 0xFFFFFFFFFFFFFF00;
                    v32 = (unsigned __int128 *)(v6 + 64);
                    *(_QWORD *)&v47[0] = v2;
                    *((_QWORD *)&v47[0] + 1) = v14;
                    do
                    {
                      __ldaxp(v32);
                      LODWORD(v17) = __stlxp(__PAIR128__(v14, v2), v32);
                    }
                    while ((_DWORD)v17);
                  }
                  goto LABEL_97;
                }
              }
              else
              {
                if (!*(_BYTE *)(v6 + 24))
                {
                  *(_QWORD *)v6 = v12;
                  v33 = *(_QWORD *)((char *)v56 + 7);
                  *(_QWORD *)(v6 + 8) = v56[0];
                  *(_QWORD *)(v6 + 15) = v33;
                  *(_BYTE *)(v6 + 23) = v1;
                  v56[0] = 0;
                  *(_QWORD *)((char *)v56 + 7) = 0;
                  *(_BYTE *)(v6 + 24) = 1;
                  v1 = 0;
                  v12 = 0;
                  v27 = *(unsigned __int8 *)(v6 + 80);
                  if (v27 == v25)
                    goto LABEL_82;
LABEL_93:
                  if (!v27)
                  {
                    v37 = v55[0];
                    *(_QWORD *)(v6 + 32) = v13;
                    *(_QWORD *)(v6 + 40) = v37;
                    *(_QWORD *)(v6 + 47) = *(_QWORD *)((char *)v55 + 7);
                    *(_BYTE *)(v6 + 55) = (_BYTE)v17;
                    v55[0] = 0;
                    *(_QWORD *)((char *)v55 + 7) = 0;
                    *(_QWORD *)(v6 + 64) = v2;
                    *(_QWORD *)(v6 + 72) = v14;
                    *(_BYTE *)(v6 + 80) = 1;
                    LOBYTE(v17) = 0;
                    v13 = 0;
                    if (!*(_BYTE *)(v6 + 120))
                      goto LABEL_101;
                    goto LABEL_98;
                  }
                  if (*(char *)(v6 + 55) < 0)
                  {
                    v34 = (char)v17;
                    operator delete(*(void **)(v6 + 32));
                    LOBYTE(v17) = v34;
                  }
                  *(_BYTE *)(v6 + 80) = 0;
LABEL_97:
                  if (!*(_BYTE *)(v6 + 120))
                    goto LABEL_101;
LABEL_98:
                  if (*(char *)(v6 + 119) < 0)
                  {
                    v35 = (char)v17;
                    operator delete(*(void **)(v6 + 96));
                    LOBYTE(v17) = v35;
                  }
                  *(_BYTE *)(v6 + 120) = 0;
LABEL_101:
                  *(_BYTE *)(v6 + 128) = 0;
                  *(_QWORD *)(v6 + 129) = *(_QWORD *)v54;
                  *(_QWORD *)(v6 + 136) = *(_QWORD *)&v54[7];
                  *(_BYTE *)(v6 + 144) = 0;
                  if (!v10)
                  {
LABEL_104:
                    if (v11 && v1 < 0)
                      operator delete((void *)v12);
                    if (v10 && v42 < 0)
                      operator delete(__p);
                    if (v11 && v43 < 0)
                      operator delete(v41);
                    if (v50 && SHIBYTE(v48[2]) < 0)
                      operator delete(v48[0]);
                    if (v46 && SHIBYTE(v45) < 0)
                      operator delete(__dst[0]);
                    goto LABEL_119;
                  }
LABEL_102:
                  if ((v17 & 0x80) != 0)
                    operator delete((void *)v13);
                  goto LABEL_104;
                }
                if (*(char *)(v6 + 23) < 0)
                {
                  v39 = (char)v17;
                  operator delete(*(void **)v6);
                  LOBYTE(v17) = v39;
                }
                *(_BYTE *)(v6 + 24) = 0;
              }
              v27 = *(unsigned __int8 *)(v6 + 80);
              if (v27 == v25)
                goto LABEL_82;
              goto LABEL_93;
            }
LABEL_71:
            *(_BYTE *)v6 = 0;
            *(_BYTE *)(v6 + 24) = 0;
            if (v11)
            {
              *(_QWORD *)v6 = v12;
              v28 = *(_QWORD *)((char *)v56 + 7);
              *(_QWORD *)(v6 + 8) = v56[0];
              *(_QWORD *)(v6 + 15) = v28;
              *(_BYTE *)(v6 + 23) = v1;
              v56[0] = 0;
              *(_QWORD *)((char *)v56 + 7) = 0;
              *(_BYTE *)(v6 + 24) = 1;
              v1 = 0;
              v12 = 0;
            }
            *(_BYTE *)(v6 + 32) = 0;
            *(_BYTE *)(v6 + 80) = 0;
            if (v10)
            {
              v29 = v55[0];
              *(_QWORD *)(v6 + 32) = v13;
              *(_QWORD *)(v6 + 40) = v29;
              *(_QWORD *)(v6 + 47) = *(_QWORD *)((char *)v55 + 7);
              *(_BYTE *)(v6 + 55) = (_BYTE)v17;
              v55[0] = 0;
              *(_QWORD *)((char *)v55 + 7) = 0;
              *(_QWORD *)(v6 + 64) = v2;
              *(_QWORD *)(v6 + 72) = v14;
              *(_BYTE *)(v6 + 80) = 1;
              LOBYTE(v17) = 0;
              v13 = 0;
            }
            *(_BYTE *)(v6 + 96) = 0;
            *(_BYTE *)(v6 + 120) = 0;
            *(_BYTE *)(v6 + 128) = 0;
            *(_QWORD *)(v6 + 129) = *(_QWORD *)v54;
            *(_QWORD *)(v6 + 136) = *(_QWORD *)&v54[7];
            *(_BYTE *)(v6 + 144) = 0;
            *(_DWORD *)(v6 + 145) = v53[0];
            *(_DWORD *)(v6 + 148) = *(_DWORD *)((char *)v53 + 3);
            *(_BYTE *)(v6 + 160) = 1;
            if (!v10)
              goto LABEL_104;
            goto LABEL_102;
          }
LABEL_25:
          sub_20AEC60F4(v48, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
          goto LABEL_26;
        }
        if ((*(_BYTE *)(a1 + 23) & 0x80) == 0)
          goto LABEL_6;
        goto LABEL_15;
      }
LABEL_119:
      v9 = v6 & 0xFFFFFFFFFFFFFF00;
      v7 = v6;
      return v7 | v9;
    }
    v9 = 0;
  }
  else
  {
    v9 = 0;
    v7 = 0;
  }
  return v7 | v9;
}

void sub_20AFA7098(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  if (a33 && a29 < 0)
    operator delete(__p);
  if (a19)
  {
    if (a18 < 0)
      operator delete(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AFA70DC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  __int128 v5;
  __int128 __p;
  uint64_t v7;
  unsigned __int8 v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;

  if (*(_BYTE *)(a1 + 168))
  {
    *(_QWORD *)a2 = *(_QWORD *)(a1 + 152);
    *(_BYTE *)(a2 + 120) = 1;
  }
  else
  {
    sub_20AFA7204((uint64_t)&v5);
    *(_OWORD *)a2 = v5;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v15)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v3 = v8;
      if (v8)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v7;
        v7 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v14)
      {
        v4 = v11;
        *(_QWORD *)(a2 + 64) = v10;
        *(_OWORD *)(a2 + 48) = v9;
        v9 = 0uLL;
        *(_QWORD *)(a2 + 72) = v4;
        *(_OWORD *)(a2 + 80) = v12;
        *(_QWORD *)(a2 + 96) = v13;
        v10 = 0;
        v12 = 0uLL;
        v13 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v3)
      {
        if (SHIBYTE(v7) < 0)
          operator delete((void *)__p);
      }
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
    }
  }
}

void sub_20AFA7204(uint64_t a1)
{
  void *__p[2];
  char v3;
  char v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  char v9;
  char v10;

  sub_20AF55B94((uint64_t)__p, "Data info does not yet contain a log timestamp (will be generated during data creation).");
  v10 = 1;
  sub_20AECCC3C(0x12u, (__int128 *)__p, a1);
  if (v10)
  {
    if (!v9)
      goto LABEL_5;
    if (v8 < 0)
    {
      operator delete(v7);
      if ((v6 & 0x80000000) == 0)
      {
LABEL_5:
        if (!v4)
          return;
        goto LABEL_6;
      }
    }
    else if ((v6 & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v5);
    if (!v4)
      return;
LABEL_6:
    if (v3 < 0)
      operator delete(__p[0]);
  }
}

void sub_20AFA72AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECCDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFA72C0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
    return *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 168))
    return *(_QWORD *)(a1 + 152);
  return 0;
}

uint64_t sub_20AFA72F0(unsigned __int8 *a1)
{
  if (a1[144])
    return a1[136];
  if (a1[168])
    return a1[160];
  return 0;
}

void sub_20AFA7320(uint64_t a1, char *__s)
{
  size_t v4;
  size_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  unsigned __int128 *v12;
  uint64_t v13;
  _QWORD *v14;
  __int128 v15;
  _QWORD v16[3];

  v16[2] = *MEMORY[0x24BDAC8D0];
  if (__s)
  {
    v4 = strlen(__s);
    if (v4 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    v5 = v4;
    if (v4 >= 0x17)
    {
      v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v4 | 7) != 0x17)
        v7 = v4 | 7;
      v8 = v7 + 1;
      v6 = operator new(v7 + 1);
      *(_QWORD *)&v15 = v5;
      *((_QWORD *)&v15 + 1) = v8 | 0x8000000000000000;
      v14 = v6;
    }
    else
    {
      HIBYTE(v15) = v4;
      v6 = &v14;
      if (!v4)
        goto LABEL_15;
    }
    memcpy(v6, __s, v5);
LABEL_15:
    *((_BYTE *)v6 + v5) = 0;
    v9 = v14;
    v16[0] = v15;
    *(_QWORD *)((char *)v16 + 7) = *(_QWORD *)((char *)&v15 + 7);
    v10 = HIBYTE(v15);
    v15 = 0uLL;
    v14 = 0;
    if (!*(_BYTE *)(a1 + 80))
    {
      v13 = v16[0];
      *(_QWORD *)(a1 + 32) = v9;
      *(_QWORD *)(a1 + 40) = v13;
      *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)v16 + 7);
      *(_BYTE *)(a1 + 55) = v10;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      *(_BYTE *)(a1 + 80) = 1;
      if (!*(_BYTE *)(a1 + 368))
        return;
      goto LABEL_21;
    }
    if (*(char *)(a1 + 55) < 0)
      operator delete(*(void **)(a1 + 32));
    v11 = v16[0];
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v11;
    *(_QWORD *)(a1 + 47) = *(_QWORD *)((char *)v16 + 7);
    *(_BYTE *)(a1 + 55) = v10;
    v12 = (unsigned __int128 *)(a1 + 64);
    do
      __ldaxp(v12);
    while (__stlxp(0, v12));
    goto LABEL_20;
  }
  if (!*(_BYTE *)(a1 + 80))
  {
LABEL_20:
    if (!*(_BYTE *)(a1 + 368))
      return;
    goto LABEL_21;
  }
  if (*(char *)(a1 + 55) < 0)
    operator delete(*(void **)(a1 + 32));
  *(_BYTE *)(a1 + 80) = 0;
  if (*(_BYTE *)(a1 + 368))
  {
LABEL_21:
    if (*(_BYTE *)(a1 + 328) && *(char *)(a1 + 327) < 0)
      operator delete(*(void **)(a1 + 304));
    if (*(_BYTE *)(a1 + 288) && *(char *)(a1 + 263) < 0)
      operator delete(*(void **)(a1 + 240));
    if (*(_BYTE *)(a1 + 232))
    {
      if (*(char *)(a1 + 231) < 0)
        operator delete(*(void **)(a1 + 208));
    }
    *(_BYTE *)(a1 + 368) = 0;
  }
}

void sub_20AFA750C(uint64_t a1, uint64_t a2)
{
  void **v3;
  unsigned __int128 v4;
  unsigned __int128 *v5;
  unsigned __int128 v6;
  unsigned __int128 v7;
  void *__p[2];
  uint64_t v9;
  unsigned __int128 v10;
  uint64_t v11;

  v11 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v7 = a2;
  sub_20B1E487C((uint64_t *)&v7);
  *(_QWORD *)&v10 = v7;
  *((_QWORD *)&v10 + 1) = 1;
  v3 = (void **)(a1 + 32);
  if (*(_BYTE *)(a1 + 80))
  {
    if (*(char *)(a1 + 55) < 0)
      operator delete(*v3);
    *(_OWORD *)v3 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 48) = v9;
    HIBYTE(v9) = 0;
    LOBYTE(__p[0]) = 0;
    do
      v4 = __ldaxp(&v10);
    while (__stlxp(v4, &v10));
    v5 = (unsigned __int128 *)(a1 + 64);
    v7 = v4;
    do
      __ldaxp(v5);
    while (__stlxp(v4, v5));
    if ((SHIBYTE(v9) & 0x80000000) == 0)
    {
LABEL_9:
      if (!*(_BYTE *)(a1 + 368))
        return;
      goto LABEL_15;
    }
  }
  else
  {
    *(_OWORD *)v3 = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 48) = v9;
    __p[1] = 0;
    v9 = 0;
    __p[0] = 0;
    do
      v6 = __ldaxp(&v10);
    while (__stlxp(v6, &v10));
    *(_OWORD *)(a1 + 64) = v6;
    *(_BYTE *)(a1 + 80) = 1;
    if ((SHIBYTE(v9) & 0x80000000) == 0)
      goto LABEL_9;
  }
  operator delete(__p[0]);
  if (!*(_BYTE *)(a1 + 368))
    return;
LABEL_15:
  if (*(_BYTE *)(a1 + 328) && *(char *)(a1 + 327) < 0)
    operator delete(*(void **)(a1 + 304));
  if (*(_BYTE *)(a1 + 288) && *(char *)(a1 + 263) < 0)
    operator delete(*(void **)(a1 + 240));
  if (*(_BYTE *)(a1 + 232))
  {
    if (*(char *)(a1 + 231) < 0)
      operator delete(*(void **)(a1 + 208));
  }
  *(_BYTE *)(a1 + 368) = 0;
}

uint64_t sub_20AFA7690(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  uint64_t v5;
  int v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  char *v10;

  if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
    {
      if (*(_QWORD *)(a2 + 8))
        v4 = *(_QWORD *)a2 == 0;
      else
        v4 = 1;
      if (!v4)
        goto LABEL_16;
    }
    else if (*(_BYTE *)(a2 + 23))
    {
      goto LABEL_16;
    }
  }
  if (!*(_BYTE *)(a2 + 80))
    return 0;
  v5 = *(unsigned __int8 *)(a2 + 55);
  v6 = (char)v5;
  if ((v5 & 0x80u) != 0)
    v5 = *(_QWORD *)(a2 + 40);
  if (!v5 || v6 < 0 && !*(_QWORD *)(a2 + 32))
    return 0;
LABEL_16:
  if (*(_BYTE *)(a1 + 200))
  {
    v8 = *(unsigned __int8 **)(a1 + 176);
    v7 = *(unsigned __int8 **)(a1 + 184);
    if (v8 == v7)
    {
      v7 = *(unsigned __int8 **)(a1 + 176);
      goto LABEL_25;
    }
    while ((sub_20B2167B8(v8, (unsigned __int8 *)a2) & 1) == 0)
    {
      v8 += 96;
      if (v8 == v7)
        goto LABEL_25;
    }
  }
  else
  {
    v7 = 0;
    v8 = 0;
    *(_QWORD *)(a1 + 176) = 0;
    *(_QWORD *)(a1 + 184) = 0;
    *(_QWORD *)(a1 + 192) = 0;
    *(_BYTE *)(a1 + 200) = 1;
  }
  if (v8 != v7)
    return 0;
LABEL_25:
  if ((unint64_t)v7 >= *(_QWORD *)(a1 + 192))
  {
    v10 = sub_20AFA9574((char **)(a1 + 176), (__int128 *)a2);
  }
  else
  {
    sub_20AED3B1C(v7, (__int128 *)a2);
    v10 = (char *)(v7 + 96);
    *(_QWORD *)(a1 + 184) = v7 + 96;
  }
  *(_QWORD *)(a1 + 184) = v10;
  return 1;
}

void sub_20AFA77D4(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 184) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20AFA77DC(uint64_t a1, char *__s)
{
  size_t v4;
  unsigned __int128 v5;
  uint64_t v6;
  void *v8[2];
  uint64_t v9;
  char v10;
  void *v11[2];
  uint64_t v12;
  unsigned __int128 v13;
  char v14;
  void *v15[2];
  uint64_t v16;
  char v17;
  __int128 v18;
  uint64_t v19;
  unsigned __int128 v20;
  char v21;
  void *__p;
  char v23;
  char v24;
  char v25;
  char v26;
  uint64_t v27;

  v27 = *MEMORY[0x24BDAC8D0];
  v4 = strlen(__s);
  sub_20B216330(__s, v4, (uint64_t)v8);
  LOBYTE(v15[0]) = 0;
  v17 = 0;
  if (v10)
  {
    *(_OWORD *)v15 = *(_OWORD *)v8;
    v16 = v9;
    v8[1] = 0;
    v9 = 0;
    v8[0] = 0;
    v17 = 1;
  }
  LOBYTE(v18) = 0;
  v21 = 0;
  if (v14)
  {
    v18 = *(_OWORD *)v11;
    v19 = v12;
    v11[1] = 0;
    v12 = 0;
    v11[0] = 0;
    do
      v5 = __ldaxp(&v13);
    while (__stlxp(v5, &v13));
    v20 = v5;
    v21 = 1;
  }
  LOBYTE(__p) = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v6 = sub_20AFA7690(a1, (uint64_t)v15);
  if (v24 && v23 < 0)
    operator delete(__p);
  if (v21 && SHIBYTE(v19) < 0)
    operator delete((void *)v18);
  if (v17 && SHIBYTE(v16) < 0)
    operator delete(v15[0]);
  if (v14 && SHIBYTE(v12) < 0)
    operator delete(v11[0]);
  if (v10 && SHIBYTE(v9) < 0)
    operator delete(v8[0]);
  return v6;
}

void sub_20AFA7968(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21)
{
  sub_20AFA6934((uint64_t)&a21);
  sub_20AFA5678((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AFA7988(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  unsigned __int128 v7;
  int v8;
  int v9;
  uint64_t v10;
  void *v11;
  __int128 v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;
  _DWORD v23[6];
  unsigned int v24;
  std::string v25;
  std::string *v26;
  std::string *v27;
  _DWORD *v28;
  std::string *v29;
  std::string *v30;
  std::string **v31;
  __int128 __dst;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  unsigned __int128 v36;
  __int128 v37;
  __int128 v38;
  uint64_t v39;
  unsigned __int8 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 200))
  {
    v6 = 0;
LABEL_11:
    v24 = 0;
    sub_20AEF7138(v23, "index ");
    std::to_string(&v25, a2);
    v26 = (std::string *)v23;
    v27 = &v25;
    v28 = v23;
    v29 = &v25;
    v30 = &v25;
    if (v24 == -1)
      sub_20AECFAB8();
    v31 = &v26;
    ((void (*)(std::string ***, _DWORD *))*(&off_24C3FA550 + v24))(&v31, v23);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    v26 = (std::string *)v23;
    v27 = (std::string *)" out of range for reference list of size ";
    v28 = v23;
    v29 = (std::string *)" out of range for reference list of size ";
    v30 = (std::string *)" out of range for reference list of size ";
    if (v24 == -1)
      sub_20AECFAB8();
    v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v26;
    ((void (*)(std::string *, _DWORD *))*(&off_24C3FA598 + v24))(&v25, v23);
    std::to_string(&v25, v6);
    v26 = (std::string *)v23;
    v27 = &v25;
    v28 = v23;
    v29 = &v25;
    v30 = &v25;
    if (v24 == -1)
      sub_20AECFAB8();
    v31 = &v26;
    ((void (*)(std::string ***, _DWORD *))*(&off_24C3FA550 + v24))(&v31, v23);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (v24 == -1)
      sub_20AECFAB8();
    v26 = &v25;
    ((void (*)(__int128 *__return_ptr, std::string **, _DWORD *))*(&off_24C3FA580 + v24))(&v12, &v26, v23);
    if (v24 != -1)
      ((void (*)(std::string **, _DWORD *))*(&off_24C3FA568 + v24))(&v26, v23);
    if (SHIBYTE(v13) < 0)
    {
      sub_20AEC60F4(__p, (void *)v12, *((unint64_t *)&v12 + 1));
    }
    else
    {
      *(_OWORD *)__p = v12;
      v15 = v13;
    }
    v16 = 1;
    LOBYTE(v17) = 0;
    v21 = 0;
    v22 = 1;
    sub_20AECCC3C(0xAu, (__int128 *)__p, (uint64_t)&__dst);
    *(_OWORD *)a3 = __dst;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if ((_BYTE)v39)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v9 = BYTE8(v34);
      if (BYTE8(v34))
      {
        *(_OWORD *)(a3 + 16) = v33;
        *(_QWORD *)(a3 + 32) = v34;
        *(_QWORD *)&v34 = 0;
        v33 = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (BYTE8(v38))
      {
        v10 = *((_QWORD *)&v36 + 1);
        *(_QWORD *)(a3 + 64) = v36;
        *(_OWORD *)(a3 + 48) = v35;
        v35 = 0uLL;
        *(_QWORD *)(a3 + 72) = v10;
        *(_OWORD *)(a3 + 80) = v37;
        *(_QWORD *)(a3 + 96) = v38;
        *(_QWORD *)&v36 = 0;
        v37 = 0uLL;
        *(_QWORD *)&v38 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 160) = 0;
      if (v9 && SBYTE7(v34) < 0)
        operator delete((void *)v33);
      if (!v22)
        goto LABEL_41;
    }
    else
    {
      *(_BYTE *)(a3 + 160) = 0;
      if (!v22)
        goto LABEL_41;
    }
    if (!v21)
      goto LABEL_38;
    if (v20 < 0)
    {
      operator delete(v19);
      if ((v18 & 0x80000000) == 0)
      {
LABEL_38:
        if (v16)
          goto LABEL_39;
        goto LABEL_41;
      }
    }
    else if ((v18 & 0x80000000) == 0)
    {
      goto LABEL_38;
    }
    operator delete(v17);
    if (v16)
    {
LABEL_39:
      if (SHIBYTE(v15) < 0)
        operator delete(__p[0]);
    }
LABEL_41:
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      return;
    v11 = (void *)v12;
    goto LABEL_50;
  }
  v5 = *(_QWORD *)(a1 + 176);
  v6 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a1 + 184) - v5) >> 5);
  if (v6 <= a2)
    goto LABEL_11;
  sub_20AED3B1C(&__dst, (__int128 *)(v5 + 96 * a2));
  LOBYTE(v38) = 0;
  v40 = 0;
  LOBYTE(v41) = 0;
  LOBYTE(v42) = 0;
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (BYTE8(v33))
  {
    *(_OWORD *)a3 = __dst;
    *(_QWORD *)(a3 + 16) = v33;
    *(_QWORD *)&v33 = 0;
    __dst = 0uLL;
    *(_BYTE *)(a3 + 24) = 1;
  }
  *(_BYTE *)(a3 + 32) = 0;
  *(_BYTE *)(a3 + 80) = 0;
  if ((_BYTE)v37)
  {
    *(_OWORD *)(a3 + 32) = v34;
    *(_QWORD *)(a3 + 48) = v35;
    *(_QWORD *)&v35 = 0;
    v34 = 0uLL;
    do
      v7 = __ldaxp(&v36);
    while (__stlxp(v7, &v36));
    *(_BYTE *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = v7;
    *(_BYTE *)(a3 + 80) = 1;
    v8 = v40;
    *(_BYTE *)(a3 + 120) = 0;
    if (v8)
    {
      *(_OWORD *)(a3 + 96) = v38;
      *(_QWORD *)(a3 + 112) = v39;
      v39 = 0;
      v38 = 0uLL;
      *(_BYTE *)(a3 + 120) = 1;
    }
  }
  else
  {
    *(_BYTE *)(a3 + 96) = 0;
    *(_BYTE *)(a3 + 120) = 0;
  }
  *(_OWORD *)(a3 + 128) = v41;
  *(_QWORD *)(a3 + 144) = v42;
  *(_BYTE *)(a3 + 160) = 1;
  if ((_BYTE)v37 && SBYTE7(v35) < 0)
    operator delete((void *)v34);
  if (BYTE8(v33) && SBYTE7(v33) < 0)
  {
    v11 = (void *)__dst;
LABEL_50:
    operator delete(v11);
  }
}

void sub_20AFA7E4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AFA7E8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20AECFA60((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20AFA7EA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20AECFA60((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20AFA7EB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20AECFA60((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20AFA7EC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20AECFA60((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20AFA7EDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0)
    operator delete(__p);
  sub_20AECFA60((uint64_t)&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFA7F18(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  std::logic_error *exception;

  v5 = *(_QWORD *)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  if (!v5)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AFA9828(exception, "SharedData is null");
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v9 = *(_QWORD *)(a2 + 8);
  if (v9)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 48))(v9);
    v10 = *(_QWORD *)(a2 + 8);
    if (v10)
      goto LABEL_15;
    goto LABEL_13;
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 8) + 48))(*(_QWORD *)(a2 + 8));
  v10 = *(_QWORD *)(a2 + 8);
  if (!v10)
  {
LABEL_13:
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v10 = *(_QWORD *)(a2 + 8);
  }
LABEL_15:
  v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
  sub_20AFA634C((char *)(a1 + 32), v11);
  v13 = *(_QWORD *)(a2 + 8);
  v12 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a1 + 416) = &off_24C411E78;
  *(_QWORD *)(a1 + 424) = v13;
  *(_QWORD *)(a1 + 432) = v12;
  if (v12)
  {
    v14 = (unint64_t *)(v12 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  *(_BYTE *)(a1 + 448) = 0;
  *(_BYTE *)(a1 + 480) = 0;
  *(_BYTE *)(a1 + 488) = 0;
  *(_BYTE *)(a1 + 512) = 0;
  return a1;
}

void sub_20AFA80CC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20AFA80E0(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AFA80FC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t result;
  _QWORD v10[6];
  _QWORD v11[6];
  char v12;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  if (*((_DWORD *)a1 + 6) != *((_DWORD *)v6 + 6))
    return 0;
  v11[0] = a1 + 32;
  v11[1] = a1 + 64;
  v11[2] = a1 + 128;
  v11[3] = a1 + 160;
  v11[4] = a1 + 184;
  v11[5] = a1 + 208;
  v10[0] = v6 + 32;
  v10[1] = v6 + 64;
  v10[2] = v6 + 128;
  v10[3] = v6 + 160;
  v10[4] = v6 + 184;
  v10[5] = v6 + 208;
  result = sub_20AEE9198((uint64_t)&v12, v11, v10);
  if ((_DWORD)result)
    return sub_20B216BD0((uint64_t)(a1 + 416), (_QWORD *)v6 + 52);
  return result;
}

void *sub_20AFA823C@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  void *result;
  int v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18[3];
  uint64_t v19[3];
  int v20;
  _OWORD v21[3];

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v17 = v4;
  v21[0] = xmmword_24C3FA610;
  v21[1] = *(_OWORD *)&off_24C3FA620;
  v21[2] = xmmword_24C3FA630;
  v20 = 0;
  sub_20AEC01D0((_QWORD *)(v4 + 16), (uint64_t)"{", 1);
  v19[0] = a1;
  v19[1] = a1 + 32;
  v19[2] = a1 + 416;
  v18[0] = &v20;
  v18[1] = (int *)(v4 + 16);
  v18[2] = (int *)v21;
  sub_20AFAA18C(v19, v18);
  result = sub_20AEC01D0((_QWORD *)(v4 + 16), (uint64_t)"}", 1);
  v6 = *(_DWORD *)(v4 + 120);
  if ((v6 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v7 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      a2[23] = 0;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v7 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_20:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    *((_QWORD *)a2 + 1) = v7;
    *((_QWORD *)a2 + 2) = v12 | 0x8000000000000000;
    *(_QWORD *)a2 = v13;
    a2 = v13;
    goto LABEL_13;
  }
  a2[23] = v7;
  if (v7)
LABEL_13:
    result = memmove(a2, v10, v7);
LABEL_14:
  a2[v7] = 0;
  if (v17)
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v17 = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v16;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v17 + 128);
    return (void *)MEMORY[0x20BD3583C](v17, 0x10B2C40EED050F3);
  }
  return result;
}

void sub_20AFA8478(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20AFA849C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B52CE84(&a9);
  _Unwind_Resume(a1);
}

void sub_20AFA84B0(uint64_t *a1, std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep a2)
{
  uint64_t v2;
  uint64_t *v3;
  uint64_t v6;
  unsigned __int8 v7;
  unsigned __int8 v8;
  _QWORD *v9;
  int v10;
  std::chrono::steady_clock::time_point v11;
  std::chrono::steady_clock::time_point *v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  unsigned __int8 v18;
  void **v19;
  uint64_t v20;
  size_t v21;
  void **v22;
  unint64_t v23;
  const void **v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  void **v28;
  uint64_t v29;
  const char *v30;
  size_t v31;
  unsigned __int8 v32;
  const char *v33;
  size_t v34;
  _BYTE *v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  void **v39;
  const char *v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  NSObject *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  size_t v47;
  size_t v48;
  void **v49;
  void *v50;
  uint64_t v51;
  uint64_t v52;
  void **v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  void *v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  unint64_t *v64;
  unint64_t v65;
  unint64_t v66;
  std::__shared_weak_count *v67;
  unint64_t *v68;
  unint64_t v69;
  uint64_t v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  const char *v75;
  uint64_t v76;
  __int128 v77;
  uint64_t v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  void **v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  const char *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  const char *v104;
  unint64_t v105;
  _QWORD v106[3];
  unsigned int v107;
  const char *v108;
  int v109;
  const char *v110;
  uint64_t v111;
  std::__shared_weak_count *v112;
  void *__dst[2];
  int64_t v114;
  void *v115[2];
  _QWORD v116[3];
  _QWORD v117[3];
  uint64_t v118;
  unint64_t v119;
  void *__p;
  char v121;
  unint64_t v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  char *v128;
  std::__shared_weak_count *v129;
  void **v130;
  __int128 v131;
  _BYTE v132[24];
  __int128 v133;
  void *v134[2];
  unint64_t v135;
  char v136;
  _QWORD v137[5];

  v137[2] = *MEMORY[0x24BDAC8D0];
  v2 = *((unsigned __int8 *)a1 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a1;
  else
    v3 = (uint64_t *)*a1;
  if ((v2 & 0x80u) != 0)
    v2 = a1[1];
  if (v2)
  {
    v6 = 0;
    while (*((_BYTE *)v3 + v6) != 35)
    {
      if (v2 == ++v6)
        return;
    }
    if (v2 != v6 && v6 != -1)
    {
      v7 = atomic_load((unsigned __int8 *)&qword_25463ADE0);
      if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_25463ADE0))
      {
        sub_20AEC0D64(v115, "cv3dapi.visual_logger");
        sub_20AECB098((uint64_t)v115, &qword_25463ADD8);
        if (SHIBYTE(v116[0]) < 0)
          operator delete(v115[0]);
        __cxa_guard_release(&qword_25463ADE0);
      }
      v125 = qword_25463ADD8;
      if (**(int **)(qword_25463ADD8 + 56) <= 4)
      {
        v8 = atomic_load((unsigned __int8 *)&qword_25463ADE8);
        if ((v8 & 1) == 0 && __cxa_guard_acquire(&qword_25463ADE8))
        {
          v103 = operator new(0x28uLL);
          v103[1] = 0;
          v103[2] = 0;
          *v103 = &off_24C3FA510;
          *((_BYTE *)v103 + 24) = 0;
          *((_BYTE *)v103 + 32) = 0;
          qword_25463ADF0 = (uint64_t)(v103 + 3);
          qword_25463ADF8 = (uint64_t)v103;
          unk_25463AE00 = a2;
          __cxa_atexit((void (*)(void *))sub_20AFA984C, &qword_25463ADF0, &dword_20AEBB000);
          __cxa_guard_release(&qword_25463ADE8);
        }
        v9 = (_QWORD *)qword_25463ADF0;
        v10 = *(unsigned __int8 *)(qword_25463ADF0 + 8);
        v11.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
        if (!v10 || a2 < 1)
        {
          v13 = (std::chrono::steady_clock::time_point *)qword_25463ADF0;
          if (!*(_BYTE *)(qword_25463ADF0 + 8))
            *(_BYTE *)(qword_25463ADF0 + 8) = 1;
        }
        else
        {
          if (v11.__d_.__rep_ - *v9 < a2)
            return;
          v13 = (std::chrono::steady_clock::time_point *)qword_25463ADF0;
        }
        v13->__d_.__rep_ = v11.__d_.__rep_;
        v14 = *(unsigned __int8 *)(v125 + 72);
        v15 = sub_20AEC3CD0(v125, "OSLogSurrogateAppender", 1, 0);
        v16 = v15;
        if (v14 || v15)
        {
          sub_20AEC0BD8((uint64_t)v115);
          if (*((char *)a1 + 23) >= 0)
            v17 = a1;
          else
            v17 = (uint64_t *)*a1;
          v18 = *((_BYTE *)v17 + v6);
          v107 = 0;
          sub_20AF5A61C(v106, "Data name \"");
          *(_QWORD *)v132 = v106;
          *(_QWORD *)&v132[8] = a1;
          *(_QWORD *)&v132[16] = v106;
          *(_QWORD *)&v133 = a1;
          *((_QWORD *)&v133 + 1) = a1;
          if (v107 == -1)
            sub_20AECFAB8();
          *(_QWORD *)&v126 = v132;
          ((void (*)(__int128 *, _QWORD *))off_24C3FA640[v107])(&v126, v106);
          *(_QWORD *)v132 = v106;
          *(_QWORD *)&v132[8] = "\" contains reserved character '";
          *(_QWORD *)&v132[16] = v106;
          *(_QWORD *)&v133 = "\" contains reserved character '";
          *((_QWORD *)&v133 + 1) = "\" contains reserved character '";
          if (v107 == -1)
            sub_20AECFAB8();
          *(_QWORD *)&v126 = v132;
          ((void (*)(__int128 *, _QWORD *))off_24C3FA658[v107])(&v126, v106);
          HIBYTE(v127) = 1;
          LOWORD(v126) = v18;
          *(_QWORD *)v132 = v106;
          *(_QWORD *)&v132[8] = &v126;
          *(_QWORD *)&v132[16] = v106;
          *(_QWORD *)&v133 = &v126;
          *((_QWORD *)&v133 + 1) = &v126;
          if (v107 == -1)
            sub_20AECFAB8();
          __dst[0] = v132;
          ((void (*)(void **, _QWORD *))*(&off_24C3FA550 + v107))(__dst, v106);
          if (SHIBYTE(v127) < 0)
            operator delete((void *)v126);
          *(_QWORD *)v132 = v106;
          *(_QWORD *)&v132[8] = "'. Using reserved characters in names could cause unintended equivalency with other data"
                                " when referencing. VisualLogger guidelines recommend to use underscores or other charact"
                                "ers instead. (Logged at most once per second)";
          *(_QWORD *)&v132[16] = v106;
          *(_QWORD *)&v133 = "'. Using reserved characters in names could cause unintended equivalency with other data wh"
                             "en referencing. VisualLogger guidelines recommend to use underscores or other characters in"
                             "stead. (Logged at most once per second)";
          *((_QWORD *)&v133 + 1) = "'. Using reserved characters in names could cause unintended equivalency with other d"
                                   "ata when referencing. VisualLogger guidelines recommend to use underscores or other c"
                                   "haracters instead. (Logged at most once per second)";
          if (v107 == -1)
            sub_20AECFAB8();
          *(_QWORD *)&v126 = v132;
          ((void (*)(__int128 *, _QWORD *))off_24C3FA670[v107])(&v126, v106);
          if (v107 == -1)
            sub_20AECFAB8();
          *(_QWORD *)v132 = &v126;
          ((void (*)(void ***__return_ptr, _BYTE *, _QWORD *))*(&off_24C3FA580 + v107))(&v130, v132, v106);
          if (v107 != -1)
            ((void (*)(_BYTE *, _QWORD *))*(&off_24C3FA568 + v107))(v132, v106);
          if (v131 >= 0)
            v19 = (void **)&v130;
          else
            v19 = v130;
          if (v131 >= 0)
            v20 = HIBYTE(v131);
          else
            v20 = v131;
          sub_20AEC01D0(v116, (uint64_t)v19, v20);
          if (SHIBYTE(v131) < 0)
            operator delete(v130);
          v105 = v16;
          if ((v123 & 0x10) != 0)
          {
            v23 = v122;
            if (v122 < v119)
            {
              v122 = v119;
              v23 = v119;
            }
            v24 = (const void **)&v118;
          }
          else
          {
            if ((v123 & 8) == 0)
            {
              v21 = 0;
              HIBYTE(v114) = 0;
              v22 = __dst;
              goto LABEL_62;
            }
            v24 = (const void **)v117;
            v23 = v117[2];
          }
          v25 = *v24;
          v21 = v23 - (_QWORD)*v24;
          if (v21 > 0x7FFFFFFFFFFFFFF7)
            sub_20AEC0138();
          if (v21 >= 0x17)
          {
            v26 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v21 | 7) != 0x17)
              v26 = v21 | 7;
            v27 = v26 + 1;
            v22 = (void **)operator new(v26 + 1);
            __dst[1] = (void *)v21;
            v114 = v27 | 0x8000000000000000;
            __dst[0] = v22;
          }
          else
          {
            HIBYTE(v114) = v23 - *(_BYTE *)v24;
            v22 = __dst;
            if (!v21)
            {
LABEL_62:
              *((_BYTE *)v22 + v21) = 0;
              v106[0] = &v125;
              v106[1] = std::chrono::steady_clock::now().__d_.__rep_;
              v106[2] = std::chrono::system_clock::now().__d_.__rep_;
              v107 = 4;
              v108 = "unknown file";
              v109 = 424;
              v111 = 0;
              v112 = 0;
              v110 = "unknown function";
              if (v114 >= 0)
                v28 = __dst;
              else
                v28 = (void **)__dst[0];
              v29 = *(_QWORD *)v106[0];
              v30 = (const char *)(*(_QWORD *)v106[0] + 16);
              v104 = v30;
              if (*(char *)(*(_QWORD *)v106[0] + 39) < 0)
              {
                v30 = *(const char **)(v29 + 16);
                v31 = *(_QWORD *)(v29 + 24);
              }
              else
              {
                v31 = *(unsigned __int8 *)(*(_QWORD *)v106[0] + 39);
              }
              v32 = atomic_load((unsigned __int8 *)&qword_254630278);
              if ((v32 & 1) == 0 && __cxa_guard_acquire(&qword_254630278))
              {
                sub_20B5271B0((uint64_t)v132);
                sub_20AECF058("com.apple.cv3d", (unint64_t)v132, &qword_254630260);
                if ((_BYTE)v133 && (v132[23] & 0x80000000) != 0)
                  operator delete(*(void **)v132);
                __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630260, &dword_20AEBB000);
                __cxa_guard_release(&qword_254630278);
              }
              if (byte_254630277 >= 0)
                v33 = (const char *)&qword_254630260;
              else
                v33 = (const char *)qword_254630260;
              if (byte_254630277 >= 0)
                v34 = byte_254630277;
              else
                v34 = unk_254630268;
              *(_QWORD *)v132 = os_log_create(v33, v30);
              v35 = &v132[8];
              if (v34 > 0x7FFFFFFFFFFFFFF7)
                sub_20AEC0138();
              if (v34 >= 0x17)
              {
                v36 = v14;
                v37 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((v34 | 7) != 0x17)
                  v37 = v34 | 7;
                v38 = v37 + 1;
                v35 = operator new(v37 + 1);
                *(_QWORD *)&v132[16] = v34;
                *(_QWORD *)&v133 = v38 | 0x8000000000000000;
                *(_QWORD *)&v132[8] = v35;
                v14 = v36;
              }
              else
              {
                BYTE7(v133) = v34;
                if (!v34)
                {
LABEL_83:
                  v35[v34] = 0;
                  BYTE8(v133) = 1;
                  v39 = v134;
                  if (v31 > 0x7FFFFFFFFFFFFFF7)
                    sub_20AEC0138();
                  v40 = (const char *)v28;
                  if (v31 >= 0x17)
                  {
                    v42 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
                    if ((v31 | 7) != 0x17)
                      v42 = v31 | 7;
                    v43 = v42 + 1;
                    v41 = v105;
                    v39 = (void **)operator new(v42 + 1);
                    v134[1] = (void *)v31;
                    v135 = v43 | 0x8000000000000000;
                    v134[0] = v39;
                  }
                  else
                  {
                    HIBYTE(v135) = v31;
                    v41 = v105;
                    if (!v31)
                    {
LABEL_91:
                      *((_BYTE *)v39 + v31) = 0;
                      v136 = 1;
                      v44 = *(NSObject **)v132;
                      if (SHIBYTE(v135) < 0)
                        operator delete(v134[0]);
                      if (BYTE8(v133) && SBYTE7(v133) < 0)
                        operator delete(*(void **)&v132[8]);
                      if (*(_QWORD *)v132)
                        os_release(*(void **)v132);
                      if (!v41 || !*(_QWORD *)(v41 + 24))
                      {
                        os_log_type_enabled(v44, OS_LOG_TYPE_ERROR);
                        *(_DWORD *)v132 = 136315138;
                        *(_QWORD *)&v132[4] = v40;
                        v50 = (void *)_os_log_send_and_compose_impl();
                        if (v50)
                          free(v50);
                        goto LABEL_170;
                      }
                      _os_log_pack_size();
                      v45 = MEMORY[0x20BD35848]();
                      v46 = (std::__shared_weak_count *)operator new();
                      v46->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F21E0;
                      v46->__shared_owners_ = 0;
                      v46->__shared_weak_owners_ = 0;
                      v46[1].__vftable = (std::__shared_weak_count_vtbl *)v45;
                      *(_QWORD *)&v126 = v45;
                      *((_QWORD *)&v126 + 1) = v45;
                      v128 = 0;
                      v129 = 0;
                      v127 = v46;
                      v47 = strlen(v40);
                      if (v47 > 0x7FFFFFFFFFFFFFF7)
                        sub_20AEC0138();
                      v48 = v47;
                      if (v47 >= 0x17)
                      {
                        v51 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
                        if ((v47 | 7) != 0x17)
                          v51 = v47 | 7;
                        v52 = v51 + 1;
                        v49 = (void **)operator new(v51 + 1);
                        *(_QWORD *)&v131 = v48;
                        *((_QWORD *)&v131 + 1) = v52 | 0x8000000000000000;
                        v130 = v49;
                      }
                      else
                      {
                        HIBYTE(v131) = v47;
                        v49 = (void **)&v130;
                        if (!v47)
                        {
LABEL_110:
                          *((_BYTE *)v49 + v48) = 0;
                          v53 = v130;
                          v137[0] = v131;
                          *(_QWORD *)((char *)v137 + 7) = *(_QWORD *)((char *)&v131 + 7);
                          v54 = HIBYTE(v131);
                          v55 = operator new(0x38uLL);
                          v55[1] = 0;
                          v55[2] = 0;
                          v55[3] = off_24C3F2280;
                          *v55 = &off_24C3F2230;
                          v56 = v137[0];
                          v55[4] = v53;
                          v55[5] = v56;
                          *(_QWORD *)((char *)v55 + 47) = *(_QWORD *)((char *)v137 + 7);
                          *((_BYTE *)v55 + 55) = v54;
                          v137[0] = 0;
                          *(_QWORD *)((char *)v137 + 7) = 0;
                          v57 = v129;
                          v128 = (char *)(v55 + 3);
                          v129 = (std::__shared_weak_count *)v55;
                          if (v57)
                          {
                            p_shared_owners = (unint64_t *)&v57->__shared_owners_;
                            do
                              v59 = __ldaxr(p_shared_owners);
                            while (__stlxr(v59 - 1, p_shared_owners));
                            if (!v59)
                            {
                              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
                              std::__shared_weak_count::__release_weak(v57);
                            }
                          }
                          *(_OWORD *)v132 = v126;
                          v60 = v128;
                          *(_QWORD *)&v132[16] = v127;
                          if (v127)
                          {
                            v61 = (unint64_t *)&v127->__shared_owners_;
                            do
                              v62 = __ldxr(v61);
                            while (__stxr(v62 + 1, v61));
                          }
                          v63 = v129;
                          *(_QWORD *)&v133 = v60;
                          *((_QWORD *)&v133 + 1) = v129;
                          if (v129)
                          {
                            v64 = (unint64_t *)&v129->__shared_owners_;
                            do
                              v65 = __ldxr(v64);
                            while (__stxr(v65 + 1, v64));
                            v134[0] = v60;
                            do
                              v66 = __ldaxr(v64);
                            while (__stlxr(v66 - 1, v64));
                            if (!v66)
                            {
                              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
                              std::__shared_weak_count::__release_weak(v63);
                            }
                          }
                          else
                          {
                            v134[0] = v60;
                          }
                          v67 = v127;
                          if (v127)
                          {
                            v68 = (unint64_t *)&v127->__shared_owners_;
                            do
                              v69 = __ldaxr(v68);
                            while (__stlxr(v69 - 1, v68));
                            if (!v69)
                            {
                              ((void (*)(std::__shared_weak_count *))v67->__on_zero_shared)(v67);
                              std::__shared_weak_count::__release_weak(v67);
                            }
                          }
                          v70 = *(_QWORD *)v132;
                          if (*((char *)v134[0] + 31) >= 0)
                            v71 = (char *)v134[0] + 8;
                          else
                            v71 = (char *)*((_QWORD *)v134[0] + 1);
                          v72 = _os_log_pack_fill();
                          *(_DWORD *)v72 = 136315138;
                          *(_QWORD *)(v72 + 4) = v71;
                          v73 = operator new();
                          v74 = *(unsigned __int8 *)(v29 + 39);
                          v75 = *(const char **)(v29 + 16);
                          v76 = *(_QWORD *)(v29 + 24);
                          v77 = v133;
                          *(_OWORD *)(v73 + 8) = *(_OWORD *)&v132[8];
                          if ((v74 & 0x80u) != 0)
                            v74 = v76;
                          else
                            v75 = v104;
                          *(_QWORD *)v73 = v70;
                          *(_QWORD *)&v132[8] = 0;
                          *(_QWORD *)&v132[16] = 0;
                          *(_OWORD *)(v73 + 24) = v77;
                          v133 = 0uLL;
                          *(_QWORD *)(v73 + 40) = v75;
                          *(_QWORD *)(v73 + 48) = v74;
                          *(_BYTE *)(v73 + 56) = 16;
                          v130 = 0;
                          *(_QWORD *)&v126 = v73;
                          (*(void (**)(_QWORD, __int128 *))(**(_QWORD **)(v41 + 24) + 40))(*(_QWORD *)(v41 + 24), &v126);
                          v78 = v126;
                          *(_QWORD *)&v126 = 0;
                          if (v78)
                          {
                            v79 = *(std::__shared_weak_count **)(v78 + 32);
                            if (v79)
                            {
                              v80 = (unint64_t *)&v79->__shared_owners_;
                              do
                                v81 = __ldaxr(v80);
                              while (__stlxr(v81 - 1, v80));
                              if (!v81)
                              {
                                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                                std::__shared_weak_count::__release_weak(v79);
                              }
                            }
                            v82 = *(std::__shared_weak_count **)(v78 + 16);
                            if (v82)
                            {
                              v83 = (unint64_t *)&v82->__shared_owners_;
                              do
                                v84 = __ldaxr(v83);
                              while (__stlxr(v84 - 1, v83));
                              if (!v84)
                              {
                                ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
                                std::__shared_weak_count::__release_weak(v82);
                              }
                            }
                            MEMORY[0x20BD3583C](v78, 0x10F0C40B62ED6C6);
                            v85 = v130;
                            v130 = 0;
                            if (v85)
                            {
                              v86 = (std::__shared_weak_count *)v85[4];
                              if (v86)
                              {
                                v87 = (unint64_t *)&v86->__shared_owners_;
                                do
                                  v88 = __ldaxr(v87);
                                while (__stlxr(v88 - 1, v87));
                                if (!v88)
                                {
                                  ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
                                  std::__shared_weak_count::__release_weak(v86);
                                }
                              }
                              v89 = (std::__shared_weak_count *)v85[2];
                              if (v89)
                              {
                                v90 = (unint64_t *)&v89->__shared_owners_;
                                do
                                  v91 = __ldaxr(v90);
                                while (__stlxr(v91 - 1, v90));
                                if (!v91)
                                {
                                  ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
                                  std::__shared_weak_count::__release_weak(v89);
                                }
                              }
                              MEMORY[0x20BD3583C](v85, 0x10F0C40B62ED6C6);
                            }
                          }
                          v92 = (std::__shared_weak_count *)*((_QWORD *)&v133 + 1);
                          if (*((_QWORD *)&v133 + 1))
                          {
                            v93 = (unint64_t *)(*((_QWORD *)&v133 + 1) + 8);
                            do
                              v94 = __ldaxr(v93);
                            while (__stlxr(v94 - 1, v93));
                            if (!v94)
                            {
                              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
                              std::__shared_weak_count::__release_weak(v92);
                            }
                          }
                          v95 = *(std::__shared_weak_count **)&v132[16];
                          if (*(_QWORD *)&v132[16])
                          {
                            v96 = (unint64_t *)(*(_QWORD *)&v132[16] + 8);
                            do
                              v97 = __ldaxr(v96);
                            while (__stlxr(v97 - 1, v96));
                            if (!v97)
                            {
                              ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
                              std::__shared_weak_count::__release_weak(v95);
                            }
                          }
LABEL_170:
                          if (v14)
                          {
                            v98 = (const char *)__dst;
                            if (v114 < 0)
                              v98 = (const char *)__dst[0];
                            sub_20AEC0664((uint64_t)v106, "%s", v98);
                            sub_20AECED58((uint64_t)v106);
                          }
                          sub_20AECED58((uint64_t)v106);
                          v99 = v112;
                          if (v112)
                          {
                            v100 = (unint64_t *)&v112->__shared_owners_;
                            do
                              v101 = __ldaxr(v100);
                            while (__stlxr(v101 - 1, v100));
                            if (!v101)
                            {
                              ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                              std::__shared_weak_count::__release_weak(v99);
                            }
                          }
                          if (SHIBYTE(v114) < 0)
                            operator delete(__dst[0]);
                          v115[0] = *(void **)MEMORY[0x24BEDB7F0];
                          v102 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
                          *(void **)((char *)v115 + *((_QWORD *)v115[0] - 3)) = *(void **)(MEMORY[0x24BEDB7F0] + 64);
                          v116[0] = v102;
                          v116[1] = MEMORY[0x24BEDB848] + 16;
                          if (v121 < 0)
                            operator delete(__p);
                          std::streambuf::~streambuf();
                          std::iostream::~basic_iostream();
                          MEMORY[0x20BD35758](&v124);
                          return;
                        }
                      }
                      memcpy(v49, v40, v48);
                      goto LABEL_110;
                    }
                  }
                  memmove(v39, v30, v31);
                  goto LABEL_91;
                }
              }
              memmove(v35, v33, v34);
              goto LABEL_83;
            }
          }
          memmove(v22, v25, v21);
          goto LABEL_62;
        }
      }
    }
  }
}

void sub_20AFA920C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  uint64_t v33;

  if (*(_BYTE *)(v33 - 168) && *(char *)(v33 - 169) < 0)
    operator delete(*(void **)(v33 - 192));
  __cxa_guard_abort(&qword_254630278);
  sub_20AFA93EC((uint64_t)&a13);
  if (a27 < 0)
  {
    operator delete(__p);
    sub_20AEC2E08((uint64_t)&a28);
    _Unwind_Resume(a1);
  }
  sub_20AEC2E08((uint64_t)&a28);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFA93EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  sub_20AECED58(a1);
  v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20AFA945C(uint64_t a1, _QWORD *a2)
{
  __int128 v3;
  __int128 v4;
  size_t v5;
  size_t v6;

  if (*(unsigned __int8 *)(a1 + 24) == *((unsigned __int8 *)a2 + 24))
  {
    if ((_QWORD *)a1 != a2 && *(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
      {
        v5 = a2[1];
        if (*((char *)a2 + 23) >= 0)
        {
          v6 = *((unsigned __int8 *)a2 + 23);
        }
        else
        {
          a2 = (_QWORD *)*a2;
          v6 = v5;
        }
        sub_20AEC8090((void **)a1, a2, v6);
      }
      else if ((*((_BYTE *)a2 + 23) & 0x80) != 0)
      {
        sub_20AEC7FCC((_QWORD *)a1, (void *)*a2, a2[1]);
      }
      else
      {
        v3 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = a2[2];
        *(_OWORD *)a1 = v3;
      }
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
    {
      operator delete(*(void **)a1);
      *(_BYTE *)(a1 + 24) = 0;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
    }
  }
  else if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)*a2, a2[1]);
    *(_BYTE *)(a1 + 24) = 1;
  }
  else
  {
    v4 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = a2[2];
    *(_OWORD *)a1 = v4;
    *(_BYTE *)(a1 + 24) = 1;
  }
}

char *sub_20AFA9574(char **a1, __int128 *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  void **v12;
  char *v14;
  __int128 v15;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v14 = &v7[96 * v3];
  *((_QWORD *)&v15 + 1) = &v7[96 * v6];
  sub_20AED3B1C(v14, a2);
  v8 = v14 + 96;
  v10 = *a1;
  v9 = a1[1];
  if (v9 != *a1)
  {
    v11 = 0;
    do
    {
      sub_20AED3B1C(&v14[v11 - 96], (__int128 *)&v9[v11 - 96]);
      v11 -= 96;
    }
    while (&v9[v11] != v10);
    v9 = *a1;
    v12 = (void **)a1[1];
    *a1 = &v14[v11];
    *(_QWORD *)&v15 = v14 + 96;
    *(_OWORD *)(a1 + 1) = v15;
    v8 = v14 + 96;
    while (1)
    {
      if (v12 == (void **)v9)
        goto LABEL_25;
      if (*((_BYTE *)v12 - 16) && *((char *)v12 - 41) < 0)
      {
        operator delete(*(v12 - 8));
        if (!*((_BYTE *)v12 - 72))
          goto LABEL_15;
      }
      else if (!*((_BYTE *)v12 - 72))
      {
        goto LABEL_15;
      }
      if (*((char *)v12 - 73) < 0)
        operator delete(*(v12 - 12));
LABEL_15:
      v12 -= 12;
    }
  }
  *a1 = v14;
  a1[1] = v8;
  a1[2] = (char *)*((_QWORD *)&v15 + 1);
LABEL_25:
  if (v9)
    operator delete(v9);
  return v8;
}

void sub_20AFA971C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AFA9798((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFA9730(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  va_list va;

  va_start(va, a2);
  if (!v2)
  {
LABEL_2:
    sub_20AFA9798((uint64_t)va);
    _Unwind_Resume(a1);
  }
  while (1)
  {
    v5 = v3 + v2;
    if (*(_BYTE *)(v3 + v2 + 80) && *(char *)(v5 + 55) < 0)
    {
      operator delete(*(void **)(v5 + 32));
      if (*(_BYTE *)(v5 + 24))
      {
LABEL_7:
        if (*(char *)(v3 + v2 + 23) < 0)
          operator delete(*(void **)v5);
      }
    }
    else if (*(_BYTE *)(v5 + 24))
    {
      goto LABEL_7;
    }
    v2 += 96;
    if (!v2)
      goto LABEL_2;
  }
}

uint64_t sub_20AFA9798(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 96;
    if (*(_BYTE *)(i - 16) && *(char *)(i - 41) < 0)
    {
      operator delete(*(void **)(i - 64));
      if (!*(_BYTE *)(i - 72))
        continue;
    }
    else if (!*(_BYTE *)(i - 72))
    {
      continue;
    }
    if (*(char *)(i - 73) < 0)
      operator delete(*(void **)(i - 96));
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

std::logic_error *sub_20AFA9828(std::logic_error *a1, const char *a2)
{
  std::logic_error *result;

  result = std::logic_error::logic_error(a1, a2);
  result->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
  return result;
}

uint64_t sub_20AFA984C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20AFA98B4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20AFA98C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA510;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFA98FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  size_t v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *__dst[2];
  unint64_t v30;
  _QWORD v31[5];
  _QWORD *v32;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v31[0] = v5;
  if (*(_BYTE *)(a3 + 24))
  {
    v6 = *(char *)(a3 + 23);
    if (v6 >= 0)
      v7 = a3;
    else
      v7 = *(_QWORD *)a3;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a3 + 23);
    else
      v8 = *(_QWORD *)(a3 + 8);
    sub_20AEC01D0((_QWORD *)(v5 + 16), v7, v8);
  }
  if (*(_BYTE *)(a3 + 80))
  {
    v9 = sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"#", 1);
    v12 = *(_QWORD *)(a3 + 32);
    v11 = a3 + 32;
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    sub_20AEC01D0(v9, v14, v15);
  }
  v16 = *(_DWORD *)(v5 + 120);
  if ((v16 & 0x10) != 0)
  {
    v19 = *(_QWORD *)(v5 + 112);
    v20 = *(_QWORD *)(v5 + 72);
    if (v19 < v20)
    {
      *(_QWORD *)(v5 + 112) = v20;
      v19 = v20;
    }
    v21 = *(const void **)(v5 + 64);
    v17 = v19 - (_QWORD)v21;
    if (v19 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_38;
  }
  else
  {
    if ((v16 & 8) == 0)
    {
      v17 = 0;
      HIBYTE(v30) = 0;
      v18 = __dst;
      goto LABEL_30;
    }
    v21 = *(const void **)(v5 + 40);
    v17 = *(_QWORD *)(v5 + 56) - (_QWORD)v21;
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
LABEL_38:
      sub_20AEC0138();
  }
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    v18 = (void **)operator new(v22 + 1);
    __dst[1] = (void *)v17;
    v30 = v23 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_29;
  }
  HIBYTE(v30) = v17;
  v18 = __dst;
  if (v17)
LABEL_29:
    memmove(v18, v21, v17);
LABEL_30:
  *((_BYTE *)v18 + v17) = 0;
  v24 = v31[0];
  if (v31[0])
  {
    v25 = MEMORY[0x24BEDB7F0];
    v26 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v31[0] = *MEMORY[0x24BEDB7F0];
    v27 = *(_QWORD *)(v25 + 72);
    *(_QWORD *)(v24 + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(v25 + 64);
    *(_QWORD *)(v24 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v24 + 16) = v27;
    if (*(char *)(v24 + 111) < 0)
      operator delete(*(void **)(v24 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v24 + 128);
    MEMORY[0x20BD3583C](v24, 0x10B2C40EED050F3);
  }
  v31[0] = a2;
  v31[1] = __dst;
  v31[2] = a2;
  v31[3] = __dst;
  v31[4] = __dst;
  v28 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v28 == -1)
    sub_20AECFAB8();
  v32 = v31;
  ((void (*)(_QWORD **, uint64_t))*(&off_24C3FA550 + v28))(&v32, a2);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
}

void sub_20AFA9BA8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20AFA9BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AFA9BE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AFA9BFC(uint64_t *a1, int **a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  int *v7;
  int *v8;
  int *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  int v15;
  int *v16;
  int *v17;
  int *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int *v23;
  int v24;
  int *v25;
  int *v26;
  int *v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int *v32;
  int v33;
  int *v34;
  int *v35;
  int *v36;
  uint64_t v37;
  int *v38;
  int v39;
  int *v40;
  int *v41;
  int *v42;
  uint64_t *v43;
  int *v44;
  int v45;
  int *v46;
  int *v47;
  int *v49;
  char v50;

  v4 = *a1;
  v5 = *a2;
  v6 = **a2;
  if (v6)
  {
    sub_20AEC01D0(a2[1], (uint64_t)", ", 2);
    v5 = *a2;
    v6 = **a2;
  }
  v8 = a2[1];
  v7 = a2[2];
  *v5 = v6 + 1;
  sub_20AEC01D0(v8, *(_QWORD *)&v7[4 * v6], *(_QWORD *)&v7[4 * v6 + 2]);
  sub_20AEC01D0(v8, (uint64_t)" = ", 3);
  v9 = a2[1];
  if (*(_BYTE *)(v4 + 24))
  {
    v10 = *(char *)(v4 + 23);
    if (v10 >= 0)
      v11 = v4;
    else
      v11 = *(_QWORD *)v4;
    if (v10 >= 0)
      v12 = *(unsigned __int8 *)(v4 + 23);
    else
      v12 = *(_QWORD *)(v4 + 8);
    sub_20AEC01D0(v9, v11, v12);
    v13 = a1[1];
    v14 = *a2;
    v15 = **a2;
    if (v15)
      goto LABEL_11;
  }
  else
  {
    sub_20AEC01D0(v9, (uint64_t)"nullopt", 7);
    v13 = a1[1];
    v14 = *a2;
    v15 = **a2;
    if (v15)
    {
LABEL_11:
      sub_20AEC01D0(a2[1], (uint64_t)", ", 2);
      v14 = *a2;
      v15 = **a2;
    }
  }
  v17 = a2[1];
  v16 = a2[2];
  *v14 = v15 + 1;
  sub_20AEC01D0(v17, *(_QWORD *)&v16[4 * v15], *(_QWORD *)&v16[4 * v15 + 2]);
  sub_20AEC01D0(v17, (uint64_t)" = ", 3);
  v18 = a2[1];
  if (*(_BYTE *)(v13 + 48))
  {
    v19 = *(char *)(v13 + 23);
    if (v19 >= 0)
      v20 = v13;
    else
      v20 = *(_QWORD *)v13;
    if (v19 >= 0)
      v21 = *(unsigned __int8 *)(v13 + 23);
    else
      v21 = *(_QWORD *)(v13 + 8);
    sub_20AEC01D0(v18, v20, v21);
    v22 = a1[2];
    v23 = *a2;
    v24 = **a2;
    if (v24)
      goto LABEL_20;
  }
  else
  {
    sub_20AEC01D0(v18, (uint64_t)"nullopt", 7);
    v22 = a1[2];
    v23 = *a2;
    v24 = **a2;
    if (v24)
    {
LABEL_20:
      sub_20AEC01D0(a2[1], (uint64_t)", ", 2);
      v23 = *a2;
      v24 = **a2;
    }
  }
  v26 = a2[1];
  v25 = a2[2];
  *v23 = v24 + 1;
  sub_20AEC01D0(v26, *(_QWORD *)&v25[4 * v24], *(_QWORD *)&v25[4 * v24 + 2]);
  sub_20AEC01D0(v26, (uint64_t)" = ", 3);
  v27 = a2[1];
  if (*(_BYTE *)(v22 + 24))
  {
    v28 = *(char *)(v22 + 23);
    if (v28 >= 0)
      v29 = v22;
    else
      v29 = *(_QWORD *)v22;
    if (v28 >= 0)
      v30 = *(unsigned __int8 *)(v22 + 23);
    else
      v30 = *(_QWORD *)(v22 + 8);
    sub_20AEC01D0(v27, v29, v30);
    v31 = a1[3];
    v32 = *a2;
    v33 = **a2;
    if (v33)
      goto LABEL_29;
  }
  else
  {
    sub_20AEC01D0(v27, (uint64_t)"nullopt", 7);
    v31 = a1[3];
    v32 = *a2;
    v33 = **a2;
    if (v33)
    {
LABEL_29:
      sub_20AEC01D0(a2[1], (uint64_t)", ", 2);
      v32 = *a2;
      v33 = **a2;
    }
  }
  v35 = a2[1];
  v34 = a2[2];
  *v32 = v33 + 1;
  sub_20AEC01D0(v35, *(_QWORD *)&v34[4 * v33], *(_QWORD *)&v34[4 * v33 + 2]);
  sub_20AEC01D0(v35, (uint64_t)" = ", 3);
  v36 = a2[1];
  if (*(_BYTE *)(v31 + 16))
  {
    sub_20B430618(v36, (uint64_t *)v31);
    v37 = a1[4];
    v38 = *a2;
    v39 = **a2;
    if (!v39)
      goto LABEL_33;
    goto LABEL_32;
  }
  sub_20AEC01D0(v36, (uint64_t)"nullopt", 7);
  v37 = a1[4];
  v38 = *a2;
  v39 = **a2;
  if (v39)
  {
LABEL_32:
    sub_20AEC01D0(a2[1], (uint64_t)", ", 2);
    v38 = *a2;
    v39 = **a2;
  }
LABEL_33:
  v41 = a2[1];
  v40 = a2[2];
  *v38 = v39 + 1;
  sub_20AEC01D0(v41, *(_QWORD *)&v40[4 * v39], *(_QWORD *)&v40[4 * v39 + 2]);
  sub_20AEC01D0(v41, (uint64_t)" = ", 3);
  v42 = a2[1];
  if (!*(_BYTE *)(v37 + 16))
  {
    sub_20AEC01D0(v42, (uint64_t)"nullopt", 7);
    v43 = (uint64_t *)a1[5];
    v44 = *a2;
    v45 = **a2;
    if (!v45)
      goto LABEL_36;
    goto LABEL_35;
  }
  sub_20B430618(v42, (uint64_t *)v37);
  v43 = (uint64_t *)a1[5];
  v44 = *a2;
  v45 = **a2;
  if (v45)
  {
LABEL_35:
    sub_20AEC01D0(a2[1], (uint64_t)", ", 2);
    v44 = *a2;
    v45 = **a2;
  }
LABEL_36:
  v47 = a2[1];
  v46 = a2[2];
  *v44 = v45 + 1;
  sub_20AEC01D0(v47, *(_QWORD *)&v46[4 * v45], *(_QWORD *)&v46[4 * v45 + 2]);
  sub_20AEC01D0(v47, (uint64_t)" = ", 3);
  v49 = a2[1];
  return sub_20AFA9FC0((uint64_t)&v50, (_QWORD **)&v49, v43);
}

_QWORD *sub_20AFA9FC0(uint64_t a1, _QWORD **a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  _QWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  uint64_t v25;

  if (!*((_BYTE *)a3 + 24))
    return sub_20AEC01D0(*a2, (uint64_t)"nullopt", 7);
  v5 = *a2;
  if (a3[1] - *a3 <= 95)
    return sub_20AEC01D0(v5, (uint64_t)"{}", 2);
  sub_20AEC01D0(v5, (uint64_t)"{", 1);
  v7 = *a3;
  v8 = *a2;
  if (*(_BYTE *)(*a3 + 24))
  {
    v9 = *(char *)(v7 + 23);
    if (v9 >= 0)
      v10 = *a3;
    else
      v10 = *(_QWORD *)v7;
    if (v9 >= 0)
      v11 = *(unsigned __int8 *)(v7 + 23);
    else
      v11 = *(_QWORD *)(v7 + 8);
    sub_20AEC01D0(*a2, v10, v11);
  }
  if (*(_BYTE *)(v7 + 80))
  {
    v12 = sub_20AEC01D0(v8, (uint64_t)"#", 1);
    v13 = *(char *)(v7 + 55);
    if (v13 >= 0)
      v14 = v7 + 32;
    else
      v14 = *(_QWORD *)(v7 + 32);
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v7 + 55);
    else
      v15 = *(_QWORD *)(v7 + 40);
    sub_20AEC01D0(v12, v14, v15);
  }
  v16 = a3[1];
  for (i = v7 + 96; i != v16; i += 96)
  {
    sub_20AEC01D0(*a2, (uint64_t)",", 1);
    v18 = *a2;
    if (*(_BYTE *)(i + 24))
    {
      v19 = *(char *)(i + 23);
      if (v19 >= 0)
        v20 = i;
      else
        v20 = *(_QWORD *)i;
      if (v19 >= 0)
        v21 = *(unsigned __int8 *)(i + 23);
      else
        v21 = *(_QWORD *)(i + 8);
      sub_20AEC01D0(*a2, v20, v21);
    }
    if (*(_BYTE *)(i + 80))
    {
      v22 = sub_20AEC01D0(v18, (uint64_t)"#", 1);
      v23 = *(char *)(i + 55);
      if (v23 >= 0)
        v24 = i + 32;
      else
        v24 = *(_QWORD *)(i + 32);
      if (v23 >= 0)
        v25 = *(unsigned __int8 *)(i + 55);
      else
        v25 = *(_QWORD *)(i + 40);
      sub_20AEC01D0(v22, v24, v25);
    }
  }
  return sub_20AEC01D0(*a2, (uint64_t)"}", 1);
}

void sub_20AFAA18C(uint64_t *a1, int **a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  int *v7;
  int *v8;
  int *v9;
  void **v10;
  uint64_t v11;
  void *__p[2];
  unsigned __int8 v13;

  sub_20AFAA2A4(a2, *a1);
  sub_20AFAA380(a2, a1[1]);
  v4 = a1[2];
  v5 = *a2;
  v6 = **a2;
  if (v6)
  {
    sub_20AEC01D0(a2[1], (uint64_t)", ", 2);
    v5 = *a2;
    v6 = **a2;
  }
  v8 = a2[1];
  v7 = a2[2];
  *v5 = v6 + 1;
  sub_20AEC01D0(v8, *(_QWORD *)&v7[4 * v6], *(_QWORD *)&v7[4 * v6 + 2]);
  sub_20AEC01D0(v8, (uint64_t)" = ", 3);
  v9 = a2[1];
  sub_20B2170B4(v4);
  if ((v13 & 0x80u) == 0)
    v10 = __p;
  else
    v10 = (void **)__p[0];
  if ((v13 & 0x80u) == 0)
    v11 = v13;
  else
    v11 = (uint64_t)__p[1];
  sub_20AEC01D0(v9, (uint64_t)v10, v11);
  if ((char)v13 < 0)
    operator delete(__p[0]);
}

void sub_20AFAA288(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20AFAA2A4(int **a1, uint64_t a2)
{
  int *v4;
  int v5;
  int *v6;
  int *v7;
  int *v9;
  uint64_t v10[2];
  char v11;
  char v12[8];
  int **v13;
  char *v14;

  v4 = *a1;
  v5 = **a1;
  if (v5)
  {
    sub_20AEC01D0(a1[1], (uint64_t)", ", 2);
    v4 = *a1;
    v5 = **a1;
  }
  v7 = a1[1];
  v6 = a1[2];
  *v4 = v5 + 1;
  sub_20AEC01D0(v7, *(_QWORD *)&v6[4 * v5], *(_QWORD *)&v6[4 * v5 + 2]);
  sub_20AEC01D0(v7, (uint64_t)" = ", 3);
  v9 = a1[1];
  v10[0] = a2;
  v10[1] = a2 + 24;
  sub_20AEC01D0(v9, (uint64_t)"{", 1);
  v12[0] = 1;
  v13 = &v9;
  v14 = &v11;
  sub_20AFAA494(v10, (uint64_t)v12);
  return sub_20AEC01D0(v9, (uint64_t)"}", 1);
}

_QWORD *sub_20AFAA380(int **a1, uint64_t a2)
{
  int *v4;
  int v5;
  int *v6;
  int *v7;
  int *v8;
  int *v10[3];
  uint64_t v11[6];
  int v12;
  _OWORD v13[6];

  v4 = *a1;
  v5 = **a1;
  if (v5)
  {
    sub_20AEC01D0(a1[1], (uint64_t)", ", 2);
    v4 = *a1;
    v5 = **a1;
  }
  v7 = a1[1];
  v6 = a1[2];
  *v4 = v5 + 1;
  sub_20AEC01D0(v7, *(_QWORD *)&v6[4 * v5], *(_QWORD *)&v6[4 * v5 + 2]);
  sub_20AEC01D0(v7, (uint64_t)" = ", 3);
  v8 = a1[1];
  v13[2] = xmmword_24C3FA5D0;
  v13[3] = *(_OWORD *)&off_24C3FA5E0;
  v13[4] = xmmword_24C3FA5F0;
  v13[5] = *(_OWORD *)&off_24C3FA600;
  v13[0] = xmmword_24C3FA5B0;
  v13[1] = *(_OWORD *)&off_24C3FA5C0;
  v12 = 0;
  sub_20AEC01D0(v8, (uint64_t)"{", 1);
  v11[0] = a2;
  v11[1] = a2 + 32;
  v11[2] = a2 + 96;
  v11[3] = a2 + 128;
  v11[4] = a2 + 152;
  v11[5] = a2 + 176;
  v10[0] = &v12;
  v10[1] = v8;
  v10[2] = (int *)v13;
  sub_20AFA9BFC(v11, v10);
  return sub_20AEC01D0(v8, (uint64_t)"}", 1);
}

void sub_20AFAA494(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  _QWORD **v9;
  std::string *v10;
  std::string::size_type size;
  std::string v12;

  v4 = *a1;
  if (!*(_BYTE *)a2)
    sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v5 = *(char *)(v4 + 23);
  if (v5 >= 0)
    v6 = v4;
  else
    v6 = *(_QWORD *)v4;
  if (v5 >= 0)
    v7 = *(unsigned __int8 *)(v4 + 23);
  else
    v7 = *(_QWORD *)(v4 + 8);
  sub_20AEC01D0(**(_QWORD ***)(a2 + 8), v6, v7);
  v8 = (unsigned int *)a1[1];
  if (!*(_BYTE *)a2)
    sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v9 = *(_QWORD ***)(a2 + 8);
  std::to_string(&v12, *v8);
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v10 = &v12;
  else
    v10 = (std::string *)v12.__r_.__value_.__r.__words[0];
  if ((v12.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v12.__r_.__value_.__r.__words[2]);
  else
    size = v12.__r_.__value_.__l.__size_;
  sub_20AEC01D0(*v9, (uint64_t)v10, size);
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v12.__r_.__value_.__l.__data_);
}

void sub_20AFAA590(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

size_t sub_20AFAA5AC(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))*(&off_24C3FA568 + v3))(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20AFAA698(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))*(&off_24C3FA568 + v10))(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20AFAA850(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20AFAA894(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20AFAAB24(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20AFAAB3C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_20AFAAB44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  char *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned int v15;
  char *v16;
  char *v17;
  void *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  int v22;
  uint64_t v23;
  void *v24;
  char *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  void *v28[2];
  char v29;
  char v30;
  void *v31;
  char v32;
  void *__p;
  char v34;
  char v35;
  char v36;
  char v37;
  void *__dst[2];
  char v39;
  char v40;
  void *v41;
  char v42;
  void *v43;
  char v44;
  char v45;
  char v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  unsigned __int8 v50;
  __int128 v51;
  uint64_t v52;
  uint64_t v53;
  __int128 v54;
  uint64_t v55;
  char v56;
  char v57;

  v5 = a1 + 416;
  v6 = sub_20B0C19F8(0);
  if (*(_BYTE *)(a2 + 24))
    v7 = a2;
  else
    v7 = (uint64_t)v6;
  sub_20AF43774(&v24, v7);
  sub_20B0C1F44(v5, (uint64_t)&v24, (uint64_t)&v26);
  if (v37)
  {
    v8 = (char *)operator new(0x38uLL);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = &off_24C3F5310;
    v9 = v27;
    *((_QWORD *)v8 + 3) = v26;
    *((_QWORD *)v8 + 4) = v9;
    if (v9)
    {
      p_shared_owners = (unint64_t *)&v9->__shared_owners_;
      do
        v11 = __ldxr(p_shared_owners);
      while (__stxr(v11 + 1, p_shared_owners));
    }
    *(_OWORD *)(v8 + 40) = *(_OWORD *)v28;
    *(_QWORD *)a3 = v8 + 24;
    *(_QWORD *)(a3 + 8) = v8;
    *(_BYTE *)(a3 + 120) = 1;
    goto LABEL_9;
  }
  if (v26 <= 0xDu)
  {
    if ((v26 - 1) > 0xCu)
      v15 = 0;
    else
      v15 = dword_20B5C11C8[(char)(v26 - 1)];
  }
  else
  {
    v15 = 1;
  }
  sub_20AECEBD0(__dst, (__int128 *)v28);
  sub_20AECCC3C(v15, (__int128 *)__dst, (uint64_t)&v47);
  *(_OWORD *)a3 = v47;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v57)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v46)
      goto LABEL_9;
    goto LABEL_52;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v22 = v50;
  if (v50)
  {
    *(_OWORD *)(a3 + 16) = v48;
    *(_QWORD *)(a3 + 32) = v49;
    v49 = 0;
    v48 = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v56)
  {
    v23 = v53;
    *(_QWORD *)(a3 + 64) = v52;
    *(_OWORD *)(a3 + 48) = v51;
    v51 = 0uLL;
    *(_QWORD *)(a3 + 72) = v23;
    *(_OWORD *)(a3 + 80) = v54;
    *(_QWORD *)(a3 + 96) = v55;
    v52 = 0;
    v54 = 0uLL;
    v55 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v22 && SHIBYTE(v49) < 0)
    operator delete((void *)v48);
  if (v46)
  {
LABEL_52:
    if (v45)
    {
      if (v44 < 0)
        operator delete(v43);
      if (v42 < 0)
        operator delete(v41);
    }
    if (v40 && v39 < 0)
      operator delete(__dst[0]);
  }
LABEL_9:
  if (v37)
  {
    v12 = v27;
    if (v27)
    {
      v13 = (unint64_t *)&v27->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else if (v36)
  {
    if (v35)
    {
      if (v34 < 0)
        operator delete(__p);
      if (v32 < 0)
        operator delete(v31);
    }
    if (v30 && v29 < 0)
      operator delete(v28[0]);
  }
  v16 = (char *)v24;
  if (v24)
  {
    v17 = v25;
    v18 = v24;
    if (v25 != v24)
    {
      do
      {
        v19 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
        if (v19)
        {
          v20 = (unint64_t *)&v19->__shared_owners_;
          do
            v21 = __ldaxr(v20);
          while (__stlxr(v21 - 1, v20));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        v17 -= 16;
      }
      while (v17 != v16);
      v18 = v24;
    }
    v25 = v16;
    operator delete(v18);
  }
}

void sub_20AFAAE78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20AECCDB4((uint64_t)&a29);
  sub_20AED7018((uint64_t)&a13);
  sub_20AFAAEB8(&a10);
  _Unwind_Resume(a1);
}

void sub_20AFAAEA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AFAAEB8((void **)va);
  _Unwind_Resume(a1);
}

void **sub_20AFAAEB8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20AFAAF50(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned int v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  char *v17;
  char *v18;
  void *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  void *v23;
  char *v24;
  int v25;
  void *v26[2];
  char v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  char v34;
  char v35;
  void *__dst;
  __int128 v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  char v44;
  __int128 v45;
  __int128 __p;
  uint64_t v47;
  unsigned __int8 v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  char v54;
  char v55;
  uint64_t v56;

  v56 = *MEMORY[0x24BDAC8D0];
  v5 = *a1;
  v6 = sub_20B0C19F8(0);
  if (*(_BYTE *)(a2 + 24))
    v7 = a2;
  else
    v7 = (uint64_t)v6;
  sub_20AF43774(&v23, v7);
  sub_20B0C268C(v5, (uint64_t)&v23, (uint64_t)&v25);
  if (v35)
  {
    __dst = &off_24C411E78;
    v37 = *(_OWORD *)v26;
    v26[0] = 0;
    v26[1] = 0;
    sub_20AFA7F18((uint64_t)&v45, (uint64_t)&__dst);
    sub_20AF4BAD4(a3, 0, &v45);
    *(_BYTE *)(a3 + 528) = 1;
    sub_20AED5474((uint64_t)&v45);
    v8 = (std::__shared_weak_count *)*((_QWORD *)&v37 + 1);
    if (*((_QWORD *)&v37 + 1))
    {
      v9 = (unint64_t *)(*((_QWORD *)&v37 + 1) + 8);
      do
        v10 = __ldaxr(v9);
      while (__stlxr(v10 - 1, v9));
      if (!v10)
      {
        ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
        std::__shared_weak_count::__release_weak(v8);
      }
    }
    goto LABEL_34;
  }
  if (v25 <= 0xDu)
  {
    if ((v25 - 1) > 0xCu)
      v11 = 0;
    else
      v11 = dword_20B5C11C8[(char)(v25 - 1)];
  }
  else
  {
    v11 = 1;
  }
  sub_20AECEBD0(&__dst, (__int128 *)&v26[1]);
  sub_20AECCC3C(v11, (__int128 *)&__dst, (uint64_t)&v45);
  *(_OWORD *)a3 = v45;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v55)
  {
    *(_BYTE *)(a3 + 528) = 0;
    if (!v44)
      goto LABEL_34;
    goto LABEL_26;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v12 = v48;
  if (v48)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v47;
    v47 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v54)
  {
    v13 = v51;
    *(_QWORD *)(a3 + 64) = v50;
    *(_OWORD *)(a3 + 48) = v49;
    v49 = 0uLL;
    *(_QWORD *)(a3 + 72) = v13;
    *(_OWORD *)(a3 + 80) = v52;
    *(_QWORD *)(a3 + 96) = v53;
    v50 = 0;
    v52 = 0uLL;
    v53 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 528) = 0;
  if (v12 && SHIBYTE(v47) < 0)
    operator delete((void *)__p);
  if (v44)
  {
LABEL_26:
    if (v43)
    {
      if (v42 < 0)
        operator delete(v41);
      if (v40 < 0)
        operator delete(v39);
    }
    if (v38 && SHIBYTE(v37) < 0)
      operator delete(__dst);
  }
LABEL_34:
  if (v35)
  {
    v14 = (std::__shared_weak_count *)v26[1];
    if (v26[1])
    {
      v15 = (unint64_t *)((char *)v26[1] + 8);
      do
        v16 = __ldaxr(v15);
      while (__stlxr(v16 - 1, v15));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
      }
    }
  }
  else if (v34)
  {
    if (v33)
    {
      if (v32 < 0)
        operator delete(v31);
      if (v30 < 0)
        operator delete(v29);
    }
    if (v28 && v27 < 0)
      operator delete(v26[1]);
  }
  v17 = (char *)v23;
  if (v23)
  {
    v18 = v24;
    v19 = v23;
    if (v24 != v23)
    {
      do
      {
        v20 = (std::__shared_weak_count *)*((_QWORD *)v18 - 1);
        if (v20)
        {
          p_shared_owners = (unint64_t *)&v20->__shared_owners_;
          do
            v22 = __ldaxr(p_shared_owners);
          while (__stlxr(v22 - 1, p_shared_owners));
          if (!v22)
          {
            ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
            std::__shared_weak_count::__release_weak(v20);
          }
        }
        v18 -= 16;
      }
      while (v18 != v17);
      v19 = v23;
    }
    v24 = v17;
    operator delete(v19);
  }
}

void sub_20AFAB2D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20AECCDB4((uint64_t)&a28);
  sub_20AFAB33C((uint64_t)&a12);
  sub_20AFAAEB8(&a9);
  _Unwind_Resume(a1);
}

void sub_20AFAB324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AFAAEB8(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFAB33C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_11;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_11:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_11;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_12:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20AFAB418(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  _QWORD v42[3];
  _QWORD *v43;
  char v44;
  _QWORD v45[3];
  _QWORD *v46;
  _QWORD v47[3];
  _QWORD *v48;
  char v49;
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v5 = (_QWORD *)a1[3];
  if (v5)
  {
    if (v5 == a1)
    {
      v48 = v47;
      (*(void (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, v47);
    }
    else
    {
      v48 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*v5 + 16))(a1[3]);
    }
  }
  else
  {
    v48 = 0;
  }
  v46 = 0;
  v6 = operator new(0x28uLL);
  v7 = v6;
  *v6 = &off_24C3FA698;
  v8 = v6 + 1;
  if (v48)
  {
    if (v48 == v47)
    {
      v6[4] = v8;
      (*(void (**)(_QWORD *))(v47[0] + 24))(v47);
    }
    else
    {
      v6[4] = v48;
      v48 = 0;
    }
  }
  else
  {
    v6[4] = 0;
  }
  v46 = v7;
  v9 = v48;
  if (v48 == v47)
  {
    v10 = 4;
    v9 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_16;
    v10 = 5;
  }
  (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_16:
  if (!*(_BYTE *)(a2 + 32))
  {
    LOBYTE(v42[0]) = 0;
    v44 = 0;
    goto LABEL_43;
  }
  v11 = *(_QWORD *)(a2 + 24);
  if (v11)
  {
    if (v11 != a2)
    {
      v12 = (_QWORD *)(*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v11 + 16))(v11, v8);
      v51 = v12;
      if (!v12)
        goto LABEL_23;
LABEL_25:
      if (v12 == v50)
      {
        v48 = v47;
        (*(void (**)(_QWORD *, _QWORD *))(v50[0] + 24))(v50, v47);
      }
      else
      {
        v48 = v12;
        v51 = 0;
      }
      goto LABEL_28;
    }
    v51 = v50;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, v50);
    v12 = v51;
    if (v51)
      goto LABEL_25;
  }
  else
  {
    v51 = 0;
  }
LABEL_23:
  v48 = 0;
LABEL_28:
  v43 = 0;
  v13 = operator new(0x28uLL);
  v14 = v13;
  *v13 = &off_24C3FA718;
  if (v48)
  {
    if (v48 == v47)
    {
      v13[4] = v13 + 1;
      (*(void (**)(_QWORD *))(v47[0] + 24))(v47);
    }
    else
    {
      v13[4] = v48;
      v48 = 0;
    }
  }
  else
  {
    v13[4] = 0;
  }
  v43 = v14;
  v15 = v48;
  if (v48 == v47)
  {
    v16 = 4;
    v15 = v47;
  }
  else
  {
    if (!v48)
      goto LABEL_38;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_38:
  v44 = 1;
  v17 = v51;
  if (v51 == v50)
  {
    v18 = 4;
    v17 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_43;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_43:
  v19 = (std::__shared_weak_count *)operator new(0x30uLL);
  v19->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v19->__shared_owners_;
  v19->__shared_weak_owners_ = 0;
  v19->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA818;
  if (v46)
  {
    if (v46 == v45)
    {
      v51 = v50;
      (*(void (**)(_QWORD *, _QWORD *))(v45[0] + 24))(v45, v50);
    }
    else
    {
      v51 = v46;
      v46 = 0;
    }
  }
  else
  {
    v51 = 0;
  }
  LOBYTE(v47[0]) = 0;
  v49 = 0;
  if (v44)
  {
    if (v43)
    {
      if (v43 == v42)
      {
        v48 = v47;
        (*(void (**)(_QWORD *, _QWORD *))(v42[0] + 24))(v42, v47);
      }
      else
      {
        v48 = v43;
        v43 = 0;
      }
    }
    else
    {
      v48 = 0;
    }
    v49 = 1;
  }
  v21 = v19 + 1;
  sub_20B0B25F0(&v19[1].__vftable, v50, (uint64_t)v47);
  if (v49)
  {
    v22 = v48;
    if (v48 == v47)
    {
      v23 = 4;
      v22 = v47;
    }
    else
    {
      if (!v48)
        goto LABEL_61;
      v23 = 5;
    }
    (*(void (**)(void))(*v22 + 8 * v23))();
  }
LABEL_61:
  v24 = v51;
  if (v51 == v50)
  {
    v25 = 4;
    v24 = v50;
  }
  else
  {
    if (!v51)
      goto LABEL_66;
    v25 = 5;
  }
  (*(void (**)(void))(*v24 + 8 * v25))();
LABEL_66:
  if (!v44)
    goto LABEL_72;
  v26 = v43;
  if (v43 == v42)
  {
    v27 = 4;
    v26 = v42;
  }
  else
  {
    if (!v43)
      goto LABEL_72;
    v27 = 5;
  }
  (*(void (**)(void))(*v26 + 8 * v27))();
LABEL_72:
  v28 = v46;
  if (v46 == v45)
  {
    v29 = 4;
    v28 = v45;
  }
  else
  {
    if (!v46)
      goto LABEL_77;
    v29 = 5;
  }
  (*(void (**)(void))(*v28 + 8 * v29))();
  do
LABEL_77:
    v30 = __ldxr(p_shared_owners);
  while (__stxr(v30 + 1, p_shared_owners));
  do
    v31 = __ldxr(p_shared_owners);
  while (__stxr(v31 + 1, p_shared_owners));
  v32 = operator new(0x28uLL);
  v33 = v32;
  v32[1] = 0;
  v32[2] = 0;
  *v32 = &off_24C3FA7C8;
  v34 = v32 + 3;
  do
    v35 = __ldxr(p_shared_owners);
  while (__stxr(v35 + 1, p_shared_owners));
  do
    v36 = __ldxr(p_shared_owners);
  while (__stxr(v36 + 1, p_shared_owners));
  v32[3] = v21;
  v32[4] = v19;
  do
    v37 = __ldaxr(p_shared_owners);
  while (__stlxr(v37 - 1, p_shared_owners));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
  *(_QWORD *)a3 = v21;
  *(_QWORD *)(a3 + 8) = v19;
  *(_QWORD *)(a3 + 16) = v34;
  *(_QWORD *)(a3 + 24) = v33;
  *(_BYTE *)(a3 + 120) = 1;
  if (v19)
  {
    v38 = (unint64_t *)&v19->__shared_owners_;
    do
      v39 = __ldaxr(v38);
    while (__stlxr(v39 - 1, v38));
    if (!v39)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
  if (v19)
  {
    v40 = (unint64_t *)&v19->__shared_owners_;
    do
      v41 = __ldaxr(v40);
    while (__stlxr(v41 - 1, v40));
    if (!v41)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
}

void sub_20AFAB9A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20AFABBA0(uint64_t a1, unint64_t a2)
{
  char *v2;
  _BYTE *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;

  v2 = *(char **)a1;
  if (a2 > (uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5)
  {
    if (a2 >> 59)
      sub_20AEC60B8();
    v4 = *(_BYTE **)(a1 + 8);
    v5 = 32 * a2;
    v6 = (char *)operator new(32 * a2);
    v7 = &v6[v5];
    v8 = &v6[v4 - v2];
    if (v4 != v2)
    {
      v9 = &v6[v4 - v2];
      do
      {
        v10 = *((_OWORD *)v4 - 2);
        v4 -= 32;
        *((_OWORD *)v9 - 2) = v10;
        v9 -= 32;
        *(_QWORD *)v4 = 0;
        *((_QWORD *)v4 + 1) = 0;
        *((_OWORD *)v9 + 1) = *((_OWORD *)v4 + 1);
        *((_QWORD *)v4 + 2) = 0;
        *((_QWORD *)v4 + 3) = 0;
      }
      while (v4 != v2);
      v2 = *(char **)a1;
      v11 = *(char **)(a1 + 8);
      *(_QWORD *)a1 = v9;
      *(_QWORD *)(a1 + 8) = v8;
      *(_QWORD *)(a1 + 16) = v7;
      while (1)
      {
        if (v11 == v2)
          goto LABEL_21;
        v12 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (!v12)
          goto LABEL_13;
        p_shared_owners = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(p_shared_owners);
        while (__stlxr(v14 - 1, p_shared_owners));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
          v15 = (std::__shared_weak_count *)*((_QWORD *)v11 - 3);
          if (!v15)
            goto LABEL_7;
        }
        else
        {
LABEL_13:
          v15 = (std::__shared_weak_count *)*((_QWORD *)v11 - 3);
          if (!v15)
            goto LABEL_7;
        }
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
LABEL_7:
        v11 -= 32;
      }
    }
    *(_QWORD *)a1 = v8;
    *(_QWORD *)(a1 + 8) = v8;
    *(_QWORD *)(a1 + 16) = v7;
LABEL_21:
    if (v2)
      operator delete(v2);
  }
}

_OWORD *sub_20AFABCE8(void **a1, __int128 *a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  unint64_t v7;
  uint64_t v9;
  char *v10;
  char *v11;
  char *v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  char *v16;
  char *v17;
  __int128 v18;
  char *v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;

  v3 = ((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5;
  v4 = v3 + 1;
  if ((unint64_t)(v3 + 1) >> 59)
    sub_20AEC60B8();
  v5 = (_BYTE *)a1[2] - (_BYTE *)*a1;
  if (v5 >> 4 > v4)
    v4 = v5 >> 4;
  v6 = (unint64_t)v5 >= 0x7FFFFFFFFFFFFFE0;
  v7 = 0x7FFFFFFFFFFFFFFLL;
  if (!v6)
    v7 = v4;
  if (v7 >> 59)
    sub_20AEC60CC();
  v9 = 32 * v7;
  v10 = (char *)operator new(32 * v7);
  v11 = &v10[32 * v3];
  v12 = &v10[v9];
  v13 = *a2;
  v14 = a2[1];
  *(_QWORD *)a2 = 0;
  *((_QWORD *)a2 + 1) = 0;
  *(_OWORD *)v11 = v13;
  *((_OWORD *)v11 + 1) = v14;
  *((_QWORD *)a2 + 2) = 0;
  *((_QWORD *)a2 + 3) = 0;
  v15 = v11 + 32;
  v16 = (char *)*a1;
  v17 = (char *)a1[1];
  if (v17 != *a1)
  {
    do
    {
      v18 = *((_OWORD *)v17 - 2);
      v17 -= 32;
      *((_OWORD *)v11 - 2) = v18;
      v11 -= 32;
      *(_QWORD *)v17 = 0;
      *((_QWORD *)v17 + 1) = 0;
      *((_OWORD *)v11 + 1) = *((_OWORD *)v17 + 1);
      *((_QWORD *)v17 + 2) = 0;
      *((_QWORD *)v17 + 3) = 0;
    }
    while (v17 != v16);
    v17 = (char *)*a1;
    v19 = (char *)a1[1];
    *a1 = v11;
    a1[1] = v15;
    a1[2] = v12;
    while (1)
    {
      if (v19 == v17)
        goto LABEL_24;
      v20 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
      if (!v20)
        goto LABEL_16;
      p_shared_owners = (unint64_t *)&v20->__shared_owners_;
      do
        v22 = __ldaxr(p_shared_owners);
      while (__stlxr(v22 - 1, p_shared_owners));
      if (!v22)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v20);
        v23 = (std::__shared_weak_count *)*((_QWORD *)v19 - 3);
        if (!v23)
          goto LABEL_10;
      }
      else
      {
LABEL_16:
        v23 = (std::__shared_weak_count *)*((_QWORD *)v19 - 3);
        if (!v23)
          goto LABEL_10;
      }
      v24 = (unint64_t *)&v23->__shared_owners_;
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        std::__shared_weak_count::__release_weak(v23);
      }
LABEL_10:
      v19 -= 32;
    }
  }
  *a1 = v11;
  a1[1] = v15;
  a1[2] = v12;
LABEL_24:
  if (v17)
    operator delete(v17);
  return v15;
}

_QWORD *sub_20AFABE68(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C3FA698;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20AFABEC4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C3FA698;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFABF30(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C3FA698;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_20AFABFB0(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFABFC4(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24C3FA698;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t sub_20AFAC040(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_20AFAC07C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_20AFAC0CC(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  uint64_t v8;
  std::__shared_weak_count_vtbl *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  std::__shared_weak_count *v20;
  unint64_t *p_shared_owners;
  unint64_t v22;
  _QWORD *v23;
  std::__shared_weak_count *v24;
  uint64_t v25;
  unsigned int *v26;
  char v27;

  v4 = (std::__shared_weak_count *)operator new(0x40uLL);
  v4->__shared_owners_ = 0;
  v4->__shared_weak_owners_ = 0;
  v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C38;
  v5 = (uint64_t)a2[1];
  v4[1].__vftable = *a2;
  v4[1].__shared_owners_ = v5;
  if (v5)
  {
    v6 = (unint64_t *)(v5 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  v9 = a2[3];
  v8 = (uint64_t)a2[4];
  v4[1].__shared_weak_owners_ = (uint64_t)&off_24C411E78;
  v4[2].__vftable = v9;
  v4[2].__shared_owners_ = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  v23 = &v4[1].__vftable;
  v24 = v4;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v12 = *(_QWORD *)(a1 + 32);
  if (!v12)
    sub_20AECABA4();
  (*(void (**)(uint64_t, _QWORD **))(*(_QWORD *)v12 + 48))(v12, &v23);
  v13 = v26;
  if (v26)
  {
    v14 = v26 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 16))(v13);
      v17 = v13 + 3;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(unsigned int *))(*(_QWORD *)v13 + 24))(v13);
    }
  }
  v20 = v24;
  if (v24)
  {
    p_shared_owners = (unint64_t *)&v24->__shared_owners_;
    do
      v22 = __ldaxr(p_shared_owners);
    while (__stlxr(v22 - 1, p_shared_owners));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
}

void sub_20AFAC230(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, unsigned int *a13)
{
  unsigned int *v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int *v17;
  unsigned int v18;
  unsigned int v19;
  unint64_t *p_shared_owners;
  unint64_t v21;

  if (a13)
  {
    v14 = a13 + 2;
    do
    {
      v15 = __ldaxr(v14);
      v16 = v15 - 1;
    }
    while (__stlxr(v16, v14));
    if (!v16)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 16))(a13);
      v17 = a13 + 3;
      do
      {
        v18 = __ldaxr(v17);
        v19 = v18 - 1;
      }
      while (__stlxr(v19, v17));
      if (!v19)
        (*(void (**)(unsigned int *))(*(_QWORD *)a13 + 24))(a13);
    }
  }
  if (a11)
  {
    p_shared_owners = (unint64_t *)&a11->__shared_owners_;
    do
      v21 = __ldaxr(p_shared_owners);
    while (__stlxr(v21 - 1, p_shared_owners));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))a11->__on_zero_shared)(a11);
      std::__shared_weak_count::__release_weak(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AFAC2D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger29CreateDestinationWithCallbackENSt3__18functionIFvRKNS1_10LogMessageEEEE"
                     "NS2_8optionalINS1_26CallbackDestinationOptionsEEENS9_INS3_IFvRKNS_3esn5ErrorEEEEEEENK3$_1clEvEUlRKN"
                     "S_3kit3viz11ContextDataEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger29CreateDestinationWithCallbackENSt3__18functionIFvRKNS1_10Log"
                                "MessageEEEENS2_8optionalINS1_26CallbackDestinationOptionsEEENS9_INS3_IFvRKNS_3esn5ErrorE"
                                "EEEEEENK3$_1clEvEUlRKNS_3kit3viz11ContextDataEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger29CreateDestinationWithCallbackENSt3__18functionIFvRKNS1_10LogMessageEEEENS2_8optionalINS1_26CallbackDestinationOptionsEEENS9_INS3_IFvRKNS_3esn5ErrorEEEEEEENK3$_1clEvEUlRKNS_3kit3viz11ContextDataEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger29CreateDestinationWithCallbackENSt3__18functionIFvRKNS1_10LogMessageEEEENS2_8optionalINS1_26CallbackDestinationOptionsEEENS9_INS3_IFvRKNS_3esn5ErrorEEEEEEENK3$_1clEvEUlRKNS_3kit3viz11ContextDataEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFAC33C()
{
  return &unk_24C3FA6F8;
}

_QWORD *sub_20AFAC348(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C3FA718;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20AFAC3A4(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C3FA718;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFAC410(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C3FA718;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_20AFAC490(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFAC4A4(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24C3FA718;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t sub_20AFAC520(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_20AFAC55C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_20AFAC5AC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5[2];
  uint64_t v6;
  void *__dst[2];
  uint64_t v8;
  int v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  _BYTE v16[16];
  void *__p;
  char v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  char v25;
  char v26;
  _QWORD v27[2];

  v9 = 0;
  sub_20AFAC918(__dst, "callback threw: ");
  sub_20AF57E5C((uint64_t)v27, (std::string::size_type)__dst, a2);
  if (v9 == -1)
    sub_20AECFAB8();
  v27[0] = &v26;
  ((void (*)(void **__return_ptr, _QWORD *, void **))off_24C3FA790[v9])(v5, v27, __dst);
  if (v9 != -1)
    ((void (*)(_QWORD *, void **))off_24C3FA778[v9])(v27, __dst);
  if (SHIBYTE(v6) < 0)
  {
    sub_20AEC60F4(__dst, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v5;
    v8 = v6;
  }
  LOBYTE(v9) = 1;
  LOBYTE(v10) = 0;
  v14 = 0;
  v15 = 1;
  sub_20AECF6E0((uint64_t)v16, 4u, (__int128 *)__dst);
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    sub_20AECABA4();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 48))(v4, v16);
  if (v25)
  {
    if (!v24)
      goto LABEL_12;
    if (v23 < 0)
    {
      operator delete(v22);
      if ((v21 & 0x80000000) == 0)
      {
LABEL_12:
        if (!v19)
          goto LABEL_15;
LABEL_13:
        if (v18 < 0)
          operator delete(__p);
        goto LABEL_15;
      }
    }
    else if ((v21 & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete(v20);
    if (!v19)
      goto LABEL_15;
    goto LABEL_13;
  }
LABEL_15:
  if (!v15)
    goto LABEL_22;
  if (v14)
  {
    if ((v13 & 0x80000000) == 0)
    {
      if ((v11 & 0x80000000) == 0)
        goto LABEL_19;
LABEL_28:
      operator delete(v10);
      if (!(_BYTE)v9)
        goto LABEL_22;
      goto LABEL_20;
    }
    operator delete(v12);
    if (v11 < 0)
      goto LABEL_28;
  }
LABEL_19:
  if (!(_BYTE)v9)
    goto LABEL_22;
LABEL_20:
  if (SHIBYTE(v8) < 0)
    operator delete(__dst[0]);
LABEL_22:
  if (SHIBYTE(v6) < 0)
    operator delete(v5[0]);
}

void sub_20AFAC7A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AFAC8A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger29CreateDestinationWithCallbackENSt3__18functionIFvRKNS1_10LogMessageEEEE"
                     "NS2_8optionalINS1_26CallbackDestinationOptionsEEENS9_INS3_IFvRKNS_3esn5ErrorEEEEEEENK3$_0clEvEUlSF_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger29CreateDestinationWithCallbackENSt3__18functionIFvRKNS1_10Log"
                                "MessageEEEENS2_8optionalINS1_26CallbackDestinationOptionsEEENS9_INS3_IFvRKNS_3esn5ErrorE"
                                "EEEEEENK3$_0clEvEUlSF_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger29CreateDestinationWithCallbackENSt3__18functionIFvRKNS1_10LogMessageEEEENS2_8optionalINS1_26CallbackDestinationOptionsEEENS9_INS3_IFvRKNS_3esn5ErrorEEEEEEENK3$_0clEvEUlSF_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger29CreateDestinationWithCallbackENSt3__18functionIFvRKNS1_10LogMessageEEEENS2_8optionalINS1_26CallbackDestinationOptionsEEENS9_INS3_IFvRKNS_3esn5ErrorEEEEEEENK3$_0clEvEUlSF_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFAC90C()
{
  return &unk_24C3FA7A8;
}

_DWORD *sub_20AFAC918(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3FA778[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20AFACA08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA7C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20AFACA18(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA7C8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFACA48(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20AFACAA4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA818;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20AFACAB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FA818;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFACAE4(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

uint64_t sub_20AFACAF4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v6;
  _QWORD v7[2];
  char v8;

  v7[0] = a2;
  v7[1] = 1;
  v8 = a3;
  result = sub_20B4164BC(*a1, (uint64_t)v7);
  if (*(char *)(result + 23) >= 0)
    v6 = result;
  else
    v6 = *(_QWORD *)result;
  *(_QWORD *)a4 = v6;
  *(_BYTE *)(a4 + 120) = 1;
  return result;
}

double sub_20AFACEC0@<D0>(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  double result;
  double v7[15];
  uint64_t v8;
  uint64_t **v9;
  uint64_t *v10;

  v3 = *a1;
  v4 = (unint64_t *)(*a1 + 88);
  v8 = v3;
  v5 = atomic_load(v4);
  if (v5 != -1)
  {
    v10 = &v8;
    v9 = &v10;
    std::__call_once(v4, &v9, (void (__cdecl *)(void *))sub_20B417E0C);
  }
  sub_20AEEC2D8(v7, v3 + 48);
  result = v7[0];
  *(_OWORD *)a2 = *(_OWORD *)v7;
  *(_BYTE *)(a2 + 120) = 1;
  return result;
}

double sub_20AFAD2B0@<D0>(const char *a1@<X0>, int a2@<W1>, int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v8;
  void *v9;
  void **v10;
  uint64_t v11;
  uint64_t v12;
  double result;
  double v14[15];
  void *__dst[2];
  unint64_t v16;

  v8 = strlen(a1);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v10 = (void **)operator new(v11 + 1);
    __dst[1] = v9;
    v16 = v12 | 0x8000000000000000;
    __dst[0] = v10;
    goto LABEL_8;
  }
  HIBYTE(v16) = v8;
  v10 = __dst;
  if (v8)
LABEL_8:
    memcpy(v10, a1, (size_t)v9);
  *((_BYTE *)v9 + (_QWORD)v10) = 0;
  sub_20B4169E8((uint64_t *)v14, (uint64_t)__dst, a2, a3);
  if (SHIBYTE(v16) < 0)
    operator delete(__dst[0]);
  result = v14[0];
  *(_OWORD *)a4 = *(_OWORD *)v14;
  *(_BYTE *)(a4 + 120) = 1;
  return result;
}

void sub_20AFAD3B0(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, __int128 __dst, int a14, __int16 a15, char a16, char a17, char a18, __int128 a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,__int128 a27,uint64_t a28,uint64_t a29,__int128 a30,uint64_t a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  __break(1u);
}

void sub_20AFAD6B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a22)
  {
    if (a21 < 0)
      operator delete(__p);
  }
  __cxa_end_catch();
  _Unwind_Resume(a1);
}

double sub_20AFAD724@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  double result;
  double v4[16];

  sub_20B416B18((uint64_t *)v4, a1, 1);
  result = v4[0];
  *(_OWORD *)a2 = *(_OWORD *)v4;
  *(_BYTE *)(a2 + 120) = 1;
  return result;
}

uint64_t sub_20AFADAE0@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  mach_timebase_info v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  unsigned __int128 *v15;
  unsigned __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  mach_timebase_info info;
  std::__shared_weak_count *v26;
  __int128 v27[33];
  mach_timebase_info v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  unsigned __int128 v40;
  char v41;
  _BYTE v42[40];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 384))
  {
    if (*((_BYTE *)a2 + 168))
    {
      v7 = (mach_timebase_info)*((_QWORD *)a2 + 19);
      v6 = *((_QWORD *)a2 + 20);
      if (*((_BYTE *)a2 + 24))
        goto LABEL_4;
    }
    else
    {
      v6 = mach_continuous_time();
      v14 = atomic_load((unsigned __int8 *)&qword_25463D170);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
      {
        mach_timebase_info(&v28);
        LODWORD(v23) = v28.numer;
        LODWORD(v24) = v28.denom;
        *(double *)&qword_25463D168 = (double)v23 / (double)v24;
        __cxa_guard_release(&qword_25463D170);
      }
      v7 = (mach_timebase_info)llround(*(double *)&qword_25463D168 * (double)v6);
      LOBYTE(v6) = 2;
      if (*((_BYTE *)a2 + 24))
      {
LABEL_4:
        sub_20AFA84B0((uint64_t *)a2, 1000000000);
        v8 = *((unsigned __int8 *)a2 + 24);
        v28 = v7;
        LOBYTE(v29) = v6;
        LOBYTE(v30) = 0;
        v32 = 0;
        if (v8)
        {
          if (*((char *)a2 + 23) < 0)
          {
            sub_20AEC60F4(&v30, *(void **)a2, *((_QWORD *)a2 + 1));
          }
          else
          {
            v30 = *a2;
            v31 = *((_QWORD *)a2 + 2);
          }
          v32 = 1;
          LOBYTE(v33) = 0;
          v35 = 0;
          if (!*((_BYTE *)a2 + 120))
          {
LABEL_24:
            LOBYTE(v36) = 0;
            v37 = 0;
            if (!*((_BYTE *)a2 + 144))
            {
LABEL_26:
              LOBYTE(v38) = 0;
              v41 = 0;
              if (*((_BYTE *)a2 + 80))
              {
                if (*((char *)a2 + 55) < 0)
                {
                  sub_20AEC60F4(&v38, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
                }
                else
                {
                  v38 = a2[2];
                  v39 = *((_QWORD *)a2 + 6);
                }
                v15 = (unsigned __int128 *)(a2 + 4);
                do
                  v16 = __ldaxp(v15);
                while (__stlxp(v16, v15));
                v40 = v16;
                v41 = 1;
              }
              sub_20AED3838((uint64_t)v42, (uint64_t)(a2 + 11));
              sub_20AFAE6BC(&info, a1, (uint64_t)&v28);
              sub_20AFA7F18((uint64_t)v27, (uint64_t)&info);
              v17 = v26;
              if (v26)
              {
                p_shared_owners = (unint64_t *)&v26->__shared_owners_;
                do
                  v19 = __ldaxr(p_shared_owners);
                while (__stlxr(v19 - 1, p_shared_owners));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }
              }
              sub_20AF4EA3C((uint64_t)&v28);
              goto LABEL_39;
            }
LABEL_25:
            v36 = a2[8];
            v37 = 1;
            goto LABEL_26;
          }
LABEL_17:
          if (*((char *)a2 + 119) < 0)
          {
            sub_20AEC60F4(&v33, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
          }
          else
          {
            v33 = a2[6];
            v34 = *((_QWORD *)a2 + 14);
          }
          v35 = 1;
          LOBYTE(v36) = 0;
          v37 = 0;
          if (!*((_BYTE *)a2 + 144))
            goto LABEL_26;
          goto LABEL_25;
        }
LABEL_16:
        LOBYTE(v33) = 0;
        v35 = 0;
        if (!*((_BYTE *)a2 + 120))
          goto LABEL_24;
        goto LABEL_17;
      }
    }
    v28 = v7;
    LOBYTE(v29) = v6;
    LOBYTE(v30) = 0;
    v32 = 0;
    goto LABEL_16;
  }
  v9 = mach_continuous_time();
  v10 = atomic_load((unsigned __int8 *)&qword_25463D170);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
  {
    mach_timebase_info(&info);
    LODWORD(v21) = info.numer;
    LODWORD(v22) = info.denom;
    *(double *)&qword_25463D168 = (double)v21 / (double)v22;
    __cxa_guard_release(&qword_25463D170);
  }
  v28 = (mach_timebase_info)llround(*(double *)&qword_25463D168 * (double)v9);
  v29 = 2;
  LOBYTE(v30) = 0;
  v32 = 0;
  LOBYTE(v33) = 0;
  v35 = 0;
  LOBYTE(v36) = 0;
  v37 = 0;
  LOBYTE(v38) = 0;
  v41 = 0;
  v42[0] = 0;
  v42[24] = 0;
  sub_20AFAE6BC(&info, a1, (uint64_t)&v28);
  sub_20AF4EA3C((uint64_t)&v28);
  sub_20AFA7F18((uint64_t)v27, (uint64_t)&info);
  v11 = v26;
  if (v26)
  {
    v12 = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_39:
  sub_20AF4BAD4(a3, 0, v27);
  *(_BYTE *)(a3 + 528) = 1;
  return sub_20AED5474((uint64_t)v27);
}

void sub_20AFADEC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20AFADEDC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20AFADEF4(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x258]))
  {
    if (SLOBYTE(STACK[0x257]) < 0)
      operator delete((void *)STACK[0x240]);
  }
  _Unwind_Resume(a1);
}

void sub_20AFADFB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AED5474((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFADFCC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  void **v22;
  void **v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  __int128 v28;
  char v29;
  void *v30[2];
  uint64_t v31;
  int v32;
  void *v33;
  void **v34;
  __int128 v35;
  __int128 __p;
  uint64_t v37;
  unsigned __int8 v38;
  __int128 v39;
  uint64_t v40;
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  char v44;
  char v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  __int128 __dst;
  uint64_t v49;
  int v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t (****)())(a1 + 424);
  v5 = *(std::__shared_weak_count **)(a1 + 432);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4 && *v4 == &off_24C40D700)
  {
    v8 = 1;
    if (!v5)
      goto LABEL_12;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_12;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_12:
    if ((v8 & 1) != 0)
      goto LABEL_13;
LABEL_22:
    v12 = 0;
    v46 = 0;
    v47 = 0;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if ((v8 & 1) == 0)
    goto LABEL_22;
LABEL_13:
  v11 = *(_QWORD *)(a1 + 424);
  v12 = *(std::__shared_weak_count **)(a1 + 432);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v46 = v11;
  v47 = v12;
  if (v11)
  {
    v16 = *(_QWORD *)(v11 + 8);
    v15 = *(_QWORD *)(v11 + 16);
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *(_QWORD *)a2 = v16;
    *(_QWORD *)(a2 + 8) = v15;
    *(_BYTE *)(a2 + 120) = 1;
    goto LABEL_55;
  }
LABEL_23:
  v19 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    *(_OWORD *)v30 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)v30);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CE5F < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_25463CE48, *((unint64_t *)&xmmword_25463CE48 + 1));
  }
  else
  {
    __dst = xmmword_25463CE48;
    v49 = unk_25463CE58;
  }
  v50 = dword_25463CE60;
  sub_20AF4BC0C(&v33, (uint64_t)&__dst, 1uLL);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AEC60F4(v30, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v30 = *(_OWORD *)a1;
    v31 = *(_QWORD *)(a1 + 16);
  }
  v32 = *(_DWORD *)(a1 + 24);
  v27 = operator new(0x28uLL);
  v28 = xmmword_20B5B4860;
  strcpy((char *)v27, "cannot return data as VZDictionary");
  v29 = 1;
  sub_20B099ED4((uint64_t *)&v33, (uint64_t)v30, (uint64_t)&v27, (uint64_t)&v35);
  *(_OWORD *)a2 = v35;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v45)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v20 = v38;
    if (v38)
    {
      *(_OWORD *)(a2 + 16) = __p;
      *(_QWORD *)(a2 + 32) = v37;
      v37 = 0;
      __p = 0uLL;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v44)
    {
      v21 = v41;
      *(_QWORD *)(a2 + 64) = v40;
      *(_OWORD *)(a2 + 48) = v39;
      v39 = 0uLL;
      *(_QWORD *)(a2 + 72) = v21;
      *(_OWORD *)(a2 + 80) = v42;
      *(_QWORD *)(a2 + 96) = v43;
      v40 = 0;
      v42 = 0uLL;
      v43 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v20 && SHIBYTE(v37) < 0)
      operator delete((void *)__p);
    if (!v29)
      goto LABEL_43;
    goto LABEL_41;
  }
  *(_BYTE *)(a2 + 120) = 0;
  if (v29)
  {
LABEL_41:
    if (SHIBYTE(v28) < 0)
      operator delete(v27);
  }
LABEL_43:
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  v22 = (void **)v33;
  if (v33)
  {
    v23 = v34;
    v24 = v33;
    if (v34 != v33)
    {
      do
      {
        if (*((char *)v23 - 9) < 0)
          operator delete(*(v23 - 4));
        v23 -= 4;
      }
      while (v23 != v22);
      v24 = v33;
    }
    v34 = v22;
    operator delete(v24);
  }
  if (SHIBYTE(v49) < 0)
    operator delete((void *)__dst);
LABEL_55:
  if (v12)
  {
    v25 = (unint64_t *)&v12->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20AFAE3C0(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C(v1 - 112);
  _Unwind_Resume(a1);
}

void sub_20AFAE3E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  sub_20AF4BA50(&a23);
  if (*(char *)(v23 - 73) < 0)
    operator delete(*(void **)(v23 - 96));
  sub_20AEC147C(v23 - 112);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFAE460(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20AFAE5CC(v4, "Failed to parse json string: ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C3FA898[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_10:
    sub_20AECFAB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_10;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C3FA880[v5])(&v11, v4);
LABEL_6:
  if (v5 == -1)
    sub_20AECFAB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C3FA8B0[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C3FA868[v5])(&v6, v4);
  return result;
}

void sub_20AFAE590(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AFAE5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AFAE5B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20AFAE5CC(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3FA868[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_QWORD *sub_20AFAE6BC(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _QWORD *result;

  v6 = (_QWORD *)operator new();
  v7 = v6;
  v9 = *a2;
  v8 = a2[1];
  *v6 = &off_24C3FA938;
  v6[1] = v9;
  v6[2] = v8;
  if (v8)
  {
    v10 = (unint64_t *)(v8 + 8);
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
  }
  sub_20AF4CAF4((uint64_t)(v6 + 4), a3);
  *v7 = &off_24C40D700;
  *a1 = &off_24C411E78;
  a1[1] = v7;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v7;
  a1[2] = result;
  return result;
}

void sub_20AFAE78C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20AF77C10((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_20AFAE7B0(_Unwind_Exception *a1)
{
  uint64_t v1;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  MEMORY[0x20BD3583C](v1, 0x10B3C40E92279A6);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFAE80C(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20AFAE814(uint64_t *a1, uint64_t *lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3FA910, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_20B416698(a1[1], *(_QWORD *)(result + 8));
  }
  return result;
}

_QWORD *sub_20AFAE878(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA938;
  sub_20AF4EA3C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20AFAE8F0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA938;
  sub_20AF4EA3C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFAE968(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20AFAEFE0();
  return sub_20AFAEABC(v2, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20AFAE9C0(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20AFAECE8((uint64_t)v5, (uint64_t)v2, (uint64_t *)(a1 + 8));
  if (v3 == -1)
    sub_20AECFAB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C3FA8B0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C3FA868[v3])(v5, v2);
  return result;
}

void sub_20AFAEA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C3FA868[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20AFAEA90(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20AFAEABC(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20AED5C4C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20AFAECE8((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C3FA8C8[v16])(&p_p_dst, &__dst);
  sub_20AF4D170((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C3FA8C8[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C3FA8B0[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C3FA868[v16])(&p_dst, &__dst);
  return result;
}

void sub_20AFAEC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFAEC70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFAEC84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFAEC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFAECAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFAECC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFAECD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFAECE8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  void **v14;
  unint64_t v15;
  unint64_t v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__dst[2];
  unint64_t v26;
  _QWORD v27[5];
  _QWORD *v28;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v27[0] = v5;
  v6 = (uint64_t *)(v5 + 16);
  v7 = *a3;
  if (*(_BYTE *)(*a3 + 24))
  {
    sub_20B4FA6D8(v6, *(_QWORD *)(v7 + 16));
  }
  else if (*(_BYTE *)(v7 + 8))
  {
    sub_20B4FA364(v6, *(_QWORD *)v7);
  }
  else
  {
    v8 = *(_QWORD *)(v7 + 32);
    if (v8)
    {
      v9 = *(char *)(v8 + 23);
      if (v9 >= 0)
        v10 = *(_QWORD *)(v7 + 32);
      else
        v10 = *(_QWORD *)v8;
      if (v9 >= 0)
        v11 = *(unsigned __int8 *)(v8 + 23);
      else
        v11 = *(_QWORD *)(v8 + 8);
      sub_20AEC01D0(v6, v10, v11);
    }
    else
    {
      sub_20B4F66B8(v6, *(CFTypeRef *)(v7 + 48));
    }
  }
  v12 = *(_DWORD *)(v5 + 120);
  if ((v12 & 0x10) != 0)
  {
    v15 = *(_QWORD *)(v5 + 112);
    v16 = *(_QWORD *)(v5 + 72);
    if (v15 < v16)
    {
      *(_QWORD *)(v5 + 112) = v16;
      v15 = v16;
    }
    v17 = *(const void **)(v5 + 64);
    v13 = v15 - (_QWORD)v17;
    if (v15 - (unint64_t)v17 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_35;
  }
  else
  {
    if ((v12 & 8) == 0)
    {
      v13 = 0;
      HIBYTE(v26) = 0;
      v14 = __dst;
      goto LABEL_27;
    }
    v17 = *(const void **)(v5 + 40);
    v13 = *(_QWORD *)(v5 + 56) - (_QWORD)v17;
    if (v13 >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
      sub_20AEC0138();
  }
  if (v13 >= 0x17)
  {
    v18 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v18 = v13 | 7;
    v19 = v18 + 1;
    v14 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)v13;
    v26 = v19 | 0x8000000000000000;
    __dst[0] = v14;
    goto LABEL_26;
  }
  HIBYTE(v26) = v13;
  v14 = __dst;
  if (v13)
LABEL_26:
    memmove(v14, v17, v13);
LABEL_27:
  *((_BYTE *)v14 + v13) = 0;
  v20 = v27[0];
  if (v27[0])
  {
    v21 = MEMORY[0x24BEDB7F0];
    v22 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v27[0] = *MEMORY[0x24BEDB7F0];
    v23 = *(_QWORD *)(v21 + 72);
    *(_QWORD *)(v20 + *(_QWORD *)(v22 - 24)) = *(_QWORD *)(v21 + 64);
    *(_QWORD *)(v20 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v20 + 16) = v23;
    if (*(char *)(v20 + 111) < 0)
      operator delete(*(void **)(v20 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v20 + 128);
    MEMORY[0x20BD3583C](v20, 0x10B2C40EED050F3);
  }
  v27[0] = a2;
  v27[1] = __dst;
  v27[2] = a2;
  v27[3] = __dst;
  v27[4] = __dst;
  v24 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v24 == -1)
    sub_20AECFAB8();
  v28 = v27;
  ((void (*)(_QWORD **, uint64_t))off_24C3FA8E0[v24])(&v28, a2);
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
}

void sub_20AFAEF8C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20AFAEFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AFAEFCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFAEFE0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632798);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632798))
    return &xmmword_254632780;
  v2 = sub_20AFAF0BC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254632780, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254632790 = v2->__r_.__value_.__r.__words[2];
    xmmword_254632780 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632780, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632798);
  return &xmmword_254632780;
}

void sub_20AFAF0A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632798);
  _Unwind_Resume(a1);
}

std::string *sub_20AFAF0BC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546327B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546327B8))
    return &stru_2546327A0;
  sub_20AFAF360((uint64_t)__p);
  sub_20AFAF1AC((char *)__p, &stru_2546327A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546327A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546327B8);
  return &stru_2546327A0;
}

void sub_20AFAF16C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546327B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546327B8);
  _Unwind_Resume(a1);
}

void sub_20AFAF1AC(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFAF544();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20AF4DB74();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 2uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20AFAF310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20AEC2E90((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20AFAF360(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254632838);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254632838))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::dict::Dictionary>]", qword_254632820);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632820, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632838);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254632858);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254632858))
  {
    v5 = sub_20AED4780(qword_254632820, "<", 0);
    sub_20AED467C(qword_254632820, 0, v5, qword_254632840);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632840, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632858);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254632878);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254632878))
  {
    sub_20B531658((uint64_t)qword_254632840, (uint64_t)&xmmword_254632860);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632860, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632878);
  }
  if (byte_254632877 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254632860, *((unint64_t *)&xmmword_254632860 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254632860;
    *(_QWORD *)(a1 + 16) = unk_254632870;
  }
}

void sub_20AFAF4FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632878);
  _Unwind_Resume(a1);
}

void sub_20AFAF514(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632858);
  _Unwind_Resume(a1);
}

void sub_20AFAF52C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632838);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFAF544()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546327D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546327D8))
    return &xmmword_2546327C0;
  v2 = (char *)sub_20AFAF620();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_2546327C0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_2546327D0 = *((_QWORD *)v2 + 2);
    xmmword_2546327C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546327C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546327D8);
  return &xmmword_2546327C0;
}

void sub_20AFAF608(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546327D8);
  _Unwind_Resume(a1);
}

void *sub_20AFAF620()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_2546327F8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546327F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::dict::Dictionary]", qword_2546327E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546327E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546327F8);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254632818);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254632818))
    return &unk_254632800;
  sub_20B531658((uint64_t)qword_2546327E0, (uint64_t)&unk_254632800);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254632800, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632818);
  return &unk_254632800;
}

void sub_20AFAF710(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632818);
  _Unwind_Resume(a1);
}

void sub_20AFAF728(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546327F8);
  _Unwind_Resume(a1);
}

void sub_20AFAF740(unsigned __int8 a1@<W0>, uint64_t a2@<X8>)
{
  unsigned __int8 v3;
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;

  v3 = a1;
  sub_20AFAF878("given enable-state value (", &v3, (std::string *)") is invalid");
  if (SHIBYTE(v5) < 0)
  {
    sub_20AEC60F4(__p, v4[0], (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v7 = v5;
  }
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_20AECCC3C(0xAu, (__int128 *)__p, a2);
  if (!v14)
    goto LABEL_11;
  if (v13)
  {
    if ((v12 & 0x80000000) == 0)
    {
      if ((v10 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v9);
      if (!v8)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v8)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_20AFAF84C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AFAF878(char *__s, unsigned __int8 *a2, std::string *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  std::string v8;
  std::string **v9;
  std::string *v10;
  std::string *v11;
  _DWORD *v12;
  std::string *v13;
  std::string *v14;

  v7 = 0;
  sub_20AF6A9E4(v6, __s);
  std::to_string(&v8, *a2);
  v10 = (std::string *)v6;
  v11 = &v8;
  v12 = v6;
  v13 = &v8;
  v14 = &v8;
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v10;
  ((void (*)(std::string ***, _DWORD *))off_24C3FA9A8[v7])(&v9, v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v10 = (std::string *)v6;
  v11 = a3;
  v12 = v6;
  v13 = a3;
  v14 = a3;
  if (v7 == -1)
    sub_20AECFAB8();
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  ((void (*)(std::string *, _DWORD *))off_24C3FA9C0[v7])(&v8, v6);
  if (v7 == -1)
    sub_20AECFAB8();
  v10 = &v8;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C3FA9D8[v7])(&v10, v6);
  if (v7 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C3FA978[v7])(&v10, v6);
  return result;
}

void sub_20AFAF9C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFAF9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20AFAF9D4);
}

BOOL sub_20AFAFA08(uint64_t a1, char *__s)
{
  size_t v4;
  const void *v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  const void *__dst[2];
  unint64_t v12;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = (const void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (const void **)operator new(v7 + 1);
    __dst[1] = v5;
    v12 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v12) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, __s, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v9 = sub_20AFB10A4(a1, __dst);
  if (SHIBYTE(v12) < 0)
    operator delete((void *)__dst[0]);
  return a1 + 8 != (_QWORD)v9;
}

void sub_20AFAFAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AFAFB04(char *__s@<X1>, uint64_t a2@<X0>, uint64_t a3@<X8>)
{
  size_t v6;
  size_t v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  void *v20;
  char v21;
  void *__p;
  char v23;
  char v24;
  char v25;
  __int128 __dst;
  __int128 v27;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  char *v37;
  _DWORD v38[6];
  int v39;
  _QWORD **v40;
  const char *v41;
  _DWORD *v42;
  const char *v43;
  const char *v44;
  _QWORD *v45;

  v37 = __s;
  v6 = strlen(__s);
  if (v6 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v7 = v6;
  if (v6 >= 0x17)
  {
    v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v9 = v6 | 7;
    v10 = v9 + 1;
    p_dst = (__int128 *)operator new(v9 + 1);
    *((_QWORD *)&__dst + 1) = v7;
    *(_QWORD *)&v27 = v10 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v27) = v6;
  p_dst = &__dst;
  if (v6)
LABEL_8:
    memcpy(p_dst, __s, v7);
  *((_BYTE *)p_dst + v7) = 0;
  v11 = sub_20AFB10A4(a2, (const void **)&__dst);
  v12 = v11;
  if (SBYTE7(v27) < 0)
  {
    operator delete((void *)__dst);
    if ((uint64_t *)(a2 + 8) != v12)
      goto LABEL_11;
  }
  else if ((uint64_t *)(a2 + 8) != v11)
  {
LABEL_11:
    *(_BYTE *)a3 = *((_BYTE *)v12 + 56);
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v39 = 0;
  sub_20AF6AFF0(v38, "key '");
  if (v37)
  {
    v40 = (_QWORD **)v38;
    v41 = (const char *)&v37;
    v42 = v38;
    v43 = (const char *)&v37;
    v44 = (const char *)&v37;
    if (v39 != -1)
    {
      v45 = &v40;
      ((void (*)(_QWORD **, _DWORD *))off_24C3FA9F0[v39])(&v45, v38);
      goto LABEL_18;
    }
LABEL_48:
    sub_20AECFAB8();
  }
  v40 = (_QWORD **)v38;
  v41 = "nullptr";
  v42 = v38;
  v43 = "nullptr";
  v44 = "nullptr";
  if (v39 == -1)
    goto LABEL_48;
  v45 = &v40;
  ((void (*)(_QWORD **, _DWORD *))off_24C3FA990[v39])(&v45, v38);
LABEL_18:
  v40 = (_QWORD **)v38;
  v41 = "' not contained in enable-states";
  v42 = v38;
  v43 = "' not contained in enable-states";
  v44 = "' not contained in enable-states";
  if (v39 == -1)
    sub_20AECFAB8();
  v45 = &v40;
  ((void (*)(_QWORD **, _DWORD *))off_24C3FAA08[v39])(&v45, v38);
  if (v39 == -1)
    sub_20AECFAB8();
  v40 = &v45;
  ((void (*)(void **__return_ptr, _QWORD ***, _DWORD *))off_24C3FA9D8[v39])(v15, &v40, v38);
  if (v39 != -1)
    ((void (*)(_QWORD ***, _DWORD *))off_24C3FA978[v39])(&v40, v38);
  if (SHIBYTE(v16) < 0)
  {
    sub_20AEC60F4(v17, v15[0], (unint64_t)v15[1]);
  }
  else
  {
    *(_OWORD *)v17 = *(_OWORD *)v15;
    v18 = v16;
  }
  v19 = 1;
  LOBYTE(v20) = 0;
  v24 = 0;
  v25 = 1;
  sub_20AECCC3C(0x16u, (__int128 *)v17, (uint64_t)&__dst);
  *(_OWORD *)a3 = __dst;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v13 = v29;
    if (v29)
    {
      *(_OWORD *)(a3 + 16) = v27;
      *(_QWORD *)(a3 + 32) = v28;
      v28 = 0;
      v27 = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v35)
    {
      v14 = v32;
      *(_QWORD *)(a3 + 64) = v31;
      *(_OWORD *)(a3 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a3 + 72) = v14;
      *(_OWORD *)(a3 + 80) = v33;
      *(_QWORD *)(a3 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v13 && SHIBYTE(v28) < 0)
      operator delete((void *)v27);
    if (!v25)
      goto LABEL_44;
    goto LABEL_36;
  }
  *(_BYTE *)(a3 + 120) = 0;
  if (v25)
  {
LABEL_36:
    if (v24)
    {
      if (v23 < 0)
        operator delete(__p);
      if (v21 < 0)
        operator delete(v20);
    }
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
LABEL_44:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20AFAFEE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AFAFF74(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v8;
  BOOL v9;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  unint64_t v14;
  void *v15[2];
  uint64_t v16;
  void *__dst[2];
  uint64_t v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  char v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  uint64_t v37;

  v37 = a2;
  if (*(_QWORD *)(a1 + 16) > (unint64_t)a2)
  {
    v4 = *(_QWORD **)a1;
    if (a2 < 0)
    {
      do
      {
        v11 = (_QWORD *)*v4;
        if (*v4)
        {
          do
          {
            v5 = v11;
            v11 = (_QWORD *)v11[1];
          }
          while (v11);
        }
        else
        {
          do
          {
            v5 = (_QWORD *)v4[2];
            v9 = *v5 == (_QWORD)v4;
            v4 = v5;
          }
          while (v9);
        }
        v4 = v5;
      }
      while (!__CFADD__(a2++, 1));
    }
    else if (a2)
    {
      do
      {
        v8 = (_QWORD *)v4[1];
        if (v8)
        {
          do
          {
            v5 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v5 = (_QWORD *)v4[2];
            v9 = *v5 == (_QWORD)v4;
            v4 = v5;
          }
          while (!v9);
        }
        v4 = v5;
      }
      while (a2-- > 1);
    }
    else
    {
      v5 = *(_QWORD **)a1;
    }
    v6 = v5 + 4;
    if (*((char *)v5 + 55) < 0)
      v6 = (_QWORD *)*v6;
    *(_QWORD *)a3 = v6;
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v14 = *(_QWORD *)(a1 + 16);
  sub_20AFB0230((uint64_t)v15, (unint64_t *)&v37, &v14);
  if (SHIBYTE(v16) < 0)
  {
    sub_20AEC60F4(__dst, v15[0], (unint64_t)v15[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v15;
    v18 = v16;
  }
  v19 = 1;
  LOBYTE(v20) = 0;
  v24 = 0;
  v25 = 1;
  sub_20AECCC3C(0x11u, (__int128 *)__dst, (uint64_t)&v26);
  *(_OWORD *)a3 = v26;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v12 = v29;
    if (v29)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v35)
    {
      v13 = v32;
      *(_QWORD *)(a3 + 64) = v31;
      *(_OWORD *)(a3 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a3 + 72) = v13;
      *(_OWORD *)(a3 + 80) = v33;
      *(_QWORD *)(a3 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v12 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
    if (!v25)
      goto LABEL_42;
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v25)
      goto LABEL_42;
  }
  if (!v24)
    goto LABEL_39;
  if (v23 < 0)
  {
    operator delete(v22);
    if ((v21 & 0x80000000) == 0)
    {
LABEL_39:
      if (v19)
        goto LABEL_40;
      goto LABEL_42;
    }
  }
  else if ((v21 & 0x80000000) == 0)
  {
    goto LABEL_39;
  }
  operator delete(v20);
  if (v19)
  {
LABEL_40:
    if (SHIBYTE(v18) < 0)
      operator delete(__dst[0]);
  }
LABEL_42:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20AFB0204(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AFB0230(uint64_t a1, unint64_t *a2, unint64_t *a3)
{
  uint64_t result;
  _DWORD v6[6];
  int v7;
  std::string v8;
  std::string **v9;
  std::string *v10;
  std::string *v11;
  _DWORD *v12;
  std::string *v13;
  std::string *v14;

  v7 = 0;
  sub_20AFB1764(v6, "given index is ");
  std::to_string(&v8, *a2);
  v10 = (std::string *)v6;
  v11 = &v8;
  v12 = v6;
  v13 = &v8;
  v14 = &v8;
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v10;
  ((void (*)(std::string ***, _DWORD *))off_24C3FA9A8[v7])(&v9, v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v10 = (std::string *)v6;
  v11 = (std::string *)" but enable-states only contain ";
  v12 = v6;
  v13 = (std::string *)" but enable-states only contain ";
  v14 = (std::string *)" but enable-states only contain ";
  if (v7 == -1)
    sub_20AECFAB8();
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  ((void (*)(std::string *, _DWORD *))off_24C3FAA08[v7])(&v8, v6);
  std::to_string(&v8, *a3);
  v10 = (std::string *)v6;
  v11 = &v8;
  v12 = v6;
  v13 = &v8;
  v14 = &v8;
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v10;
  ((void (*)(std::string ***, _DWORD *))off_24C3FA9A8[v7])(&v9, v6);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v10 = (std::string *)v6;
  v11 = (std::string *)" entries";
  v12 = v6;
  v13 = (std::string *)" entries";
  v14 = (std::string *)" entries";
  if (v7 == -1)
    sub_20AECFAB8();
  v8.__r_.__value_.__r.__words[0] = (std::string::size_type)&v10;
  ((void (*)(std::string *, _DWORD *))off_24C3FAA20[v7])(&v8, v6);
  if (v7 == -1)
    sub_20AECFAB8();
  v10 = &v8;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C3FA9D8[v7])(&v10, v6);
  if (v7 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C3FA978[v7])(&v10, v6);
  return result;
}

void sub_20AFB0430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20AFB0480(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  void *v14[2];
  uint64_t v15;
  void *__dst[2];
  uint64_t v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24;
  __int128 v25;
  __int128 __p;
  uint64_t v27;
  unsigned __int8 v28;
  __int128 v29;
  uint64_t v30;
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  char v34;
  char v35;
  uint64_t v36;

  v36 = a2;
  if (*(_QWORD *)(a1 + 16) > (unint64_t)a2)
  {
    v4 = *(_QWORD **)a1;
    if (a2 < 0)
    {
      do
      {
        v10 = (_QWORD *)*v4;
        if (*v4)
        {
          do
          {
            v5 = v10;
            v10 = (_QWORD *)v10[1];
          }
          while (v10);
        }
        else
        {
          do
          {
            v5 = (_QWORD *)v4[2];
            v8 = *v5 == (_QWORD)v4;
            v4 = v5;
          }
          while (v8);
        }
        v4 = v5;
      }
      while (!__CFADD__(a2++, 1));
    }
    else if (a2)
    {
      do
      {
        v7 = (_QWORD *)v4[1];
        if (v7)
        {
          do
          {
            v5 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v5 = (_QWORD *)v4[2];
            v8 = *v5 == (_QWORD)v4;
            v4 = v5;
          }
          while (!v8);
        }
        v4 = v5;
      }
      while (a2-- > 1);
    }
    else
    {
      v5 = *(_QWORD **)a1;
    }
    *(_BYTE *)a3 = *((_BYTE *)v5 + 56);
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v13 = *(_QWORD *)(a1 + 16);
  sub_20AFB0230((uint64_t)v14, (unint64_t *)&v36, &v13);
  if (SHIBYTE(v15) < 0)
  {
    sub_20AEC60F4(__dst, v14[0], (unint64_t)v14[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v14;
    v17 = v15;
  }
  v18 = 1;
  LOBYTE(v19) = 0;
  v23 = 0;
  v24 = 1;
  sub_20AECCC3C(0x11u, (__int128 *)__dst, (uint64_t)&v25);
  *(_OWORD *)a3 = v25;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v35)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v11 = v28;
    if (v28)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v27;
      v27 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v34)
    {
      v12 = v31;
      *(_QWORD *)(a3 + 64) = v30;
      *(_OWORD *)(a3 + 48) = v29;
      v29 = 0uLL;
      *(_QWORD *)(a3 + 72) = v12;
      *(_OWORD *)(a3 + 80) = v32;
      *(_QWORD *)(a3 + 96) = v33;
      v30 = 0;
      v32 = 0uLL;
      v33 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v11 && SHIBYTE(v27) < 0)
      operator delete((void *)__p);
    if (!v24)
      goto LABEL_40;
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v24)
      goto LABEL_40;
  }
  if (!v23)
    goto LABEL_37;
  if (v22 < 0)
  {
    operator delete(v21);
    if ((v20 & 0x80000000) == 0)
    {
LABEL_37:
      if (v18)
        goto LABEL_38;
      goto LABEL_40;
    }
  }
  else if ((v20 & 0x80000000) == 0)
  {
    goto LABEL_37;
  }
  operator delete(v19);
  if (v18)
  {
LABEL_38:
    if (SHIBYTE(v17) < 0)
      operator delete(__dst[0]);
  }
LABEL_40:
  if (SHIBYTE(v15) < 0)
    operator delete(v14[0]);
}

void sub_20AFB0704(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AFB0730(char *__s@<X1>, uint64_t **a2@<X0>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  size_t v8;
  size_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  __int128 *p_dst;
  uint64_t v14;
  uint64_t v15;
  char v16;
  uint64_t **v17;
  char v18;
  __int128 __dst;
  unint64_t v20;
  void *v21[2];
  __int128 __p;
  uint64_t v23;
  unsigned __int8 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  uint64_t v29;
  char v30;
  char v31;

  if (a3 <= 2)
  {
    v8 = strlen(__s);
    v9 = v8;
    if (!a3 && !v8)
    {
      sub_20AFB22CC((uint64_t)v21);
      *(_OWORD *)a4 = *(_OWORD *)v21;
      *(_BYTE *)(a4 + 16) = 0;
      v10 = a4 + 16;
      *(_BYTE *)(a4 + 112) = 0;
      if (v31)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v11 = v24;
        if (v24)
          goto LABEL_9;
        goto LABEL_10;
      }
LABEL_15:
      *(_BYTE *)(a4 + 120) = 0;
      return;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
      sub_20AEC0138();
    if (v8 >= 0x17)
    {
      v14 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v8 | 7) != 0x17)
        v14 = v8 | 7;
      v15 = v14 + 1;
      p_dst = (__int128 *)operator new(v14 + 1);
      *((_QWORD *)&__dst + 1) = v9;
      v20 = v15 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v20) = v8;
      p_dst = &__dst;
      if (!v8)
      {
LABEL_24:
        *((_BYTE *)p_dst + v9) = 0;
        *(_OWORD *)v21 = __dst;
        *(_QWORD *)&__p = v20;
        BYTE8(__p) = a3;
        v17 = sub_20AFB1E60(a2, (const void **)v21, (uint64_t)v21);
        v18 = v16;
        if (SBYTE7(__p) < 0)
        {
          operator delete(v21[0]);
          if (v18)
            goto LABEL_26;
        }
        else if (v16)
        {
LABEL_26:
          *(_BYTE *)(a4 + 120) = 1;
          return;
        }
        *((_BYTE *)v17 + 56) = a3;
        goto LABEL_26;
      }
    }
    memcpy(p_dst, __s, v9);
    goto LABEL_24;
  }
  sub_20AFAF740(a3, (uint64_t)v21);
  *(_OWORD *)a4 = *(_OWORD *)v21;
  *(_BYTE *)(a4 + 16) = 0;
  v10 = a4 + 16;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v31)
    goto LABEL_15;
  *(_BYTE *)(a4 + 40) = 0;
  v11 = v24;
  if (v24)
  {
LABEL_9:
    *(_OWORD *)v10 = __p;
    *(_QWORD *)(v10 + 16) = v23;
    v23 = 0;
    __p = 0uLL;
    *(_BYTE *)(a4 + 40) = 1;
  }
LABEL_10:
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (v30)
  {
    v12 = v27;
    *(_QWORD *)(a4 + 64) = v26;
    *(_OWORD *)(a4 + 48) = v25;
    v25 = 0uLL;
    *(_QWORD *)(a4 + 72) = v12;
    *(_OWORD *)(a4 + 80) = v28;
    *(_QWORD *)(a4 + 96) = v29;
    v26 = 0;
    v28 = 0uLL;
    v29 = 0;
    *(_BYTE *)(a4 + 104) = 1;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (v11)
  {
    if (SHIBYTE(v23) < 0)
      operator delete((void *)__p);
  }
}

void sub_20AFB0974(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

BOOL sub_20AFB0990(uint64_t **a1, char *__s)
{
  size_t v4;
  const void *v5;
  const void **v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t *v12;
  BOOL v13;
  uint64_t *v14;
  const void *__dst[2];
  unint64_t v17;

  v4 = strlen(__s);
  if (v4 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = (const void *)v4;
  if (v4 >= 0x17)
  {
    v7 = (v4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v4 | 7) != 0x17)
      v7 = v4 | 7;
    v8 = v7 + 1;
    v6 = (const void **)operator new(v7 + 1);
    __dst[1] = v5;
    v17 = v8 | 0x8000000000000000;
    __dst[0] = v6;
    goto LABEL_8;
  }
  HIBYTE(v17) = v4;
  v6 = __dst;
  if (v4)
LABEL_8:
    memcpy(v6, __s, (size_t)v5);
  *((_BYTE *)v5 + (_QWORD)v6) = 0;
  v9 = sub_20AFB10A4((uint64_t)a1, __dst);
  if (SHIBYTE(v17) < 0)
    operator delete((void *)__dst[0]);
  if (a1 + 1 != (uint64_t **)v9)
  {
    v10 = (uint64_t *)v9[1];
    if (v10)
    {
      do
      {
        v11 = v10;
        v10 = (uint64_t *)*v10;
      }
      while (v10);
    }
    else
    {
      v12 = v9;
      do
      {
        v11 = (uint64_t *)v12[2];
        v13 = *v11 == (_QWORD)v12;
        v12 = v11;
      }
      while (!v13);
    }
    if (*a1 == v9)
      *a1 = v11;
    v14 = a1[1];
    a1[2] = (uint64_t *)((char *)a1[2] - 1);
    sub_20AEC867C(v14, v9);
    if (*((char *)v9 + 55) < 0)
      operator delete((void *)v9[4]);
    operator delete(v9);
  }
  return a1 + 1 != (uint64_t **)v9;
}

void sub_20AFB0AE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20AFB0B00(_DWORD ***a1)
{
  return sub_20AEDBB6C(**a1, (char *)(*a1)[1]);
}

void sub_20AFB0B0C(uint64_t a1, uint64_t a2)
{
  sub_20AECFF5C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

char *sub_20AFB0B1C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20AFB0C14((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20AFB0C0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20AFB0C14(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20AFB0E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AFB0E24(uint64_t a1, _QWORD **a2, _QWORD *a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t v12;
  char **v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  BOOL v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unint64_t v25;
  char **v26;
  const char *v27;
  uint64_t v28;
  _QWORD *v29;
  _QWORD *v30;

  v3 = a3 + 1;
  v4 = *a2;
  if ((_QWORD *)*a3 == a3 + 1)
  {
    v16 = "{}";
    v17 = 2;
  }
  else
  {
    sub_20AEC01D0(v4, (uint64_t)"{", 1);
    v7 = (_QWORD *)*a3;
    sub_20AEC01D0(*a2, (uint64_t)"{", 1);
    v8 = *((char *)v7 + 55);
    if (v8 >= 0)
      v9 = (uint64_t)(v7 + 4);
    else
      v9 = v7[4];
    if (v8 >= 0)
      v10 = *((unsigned __int8 *)v7 + 55);
    else
      v10 = v7[5];
    sub_20AEC01D0(*a2, v9, v10);
    sub_20AEC01D0(*a2, (uint64_t)",", 1);
    v11 = *a2;
    v12 = *((unsigned __int8 *)v7 + 56);
    if (v12 > 2)
    {
      sub_20AEC01D0(v11, (uint64_t)"Invalid(", 8);
      v11 = (_QWORD *)std::ostream::operator<<();
      v14 = ")";
      v15 = 1;
    }
    else
    {
      v13 = &(&off_24C411D90)[2 * v12];
      v14 = *v13;
      v15 = (uint64_t)v13[1];
    }
    sub_20AEC01D0(v11, (uint64_t)v14, v15);
    sub_20AEC01D0(*a2, (uint64_t)"}", 1);
    v18 = (_QWORD *)v7[1];
    if (v18)
    {
      do
      {
        v19 = v18;
        v18 = (_QWORD *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        v19 = (_QWORD *)v7[2];
        v20 = *v19 == (_QWORD)v7;
        v7 = v19;
      }
      while (!v20);
    }
    if (v19 != v3)
    {
      do
      {
        sub_20AEC01D0(*a2, (uint64_t)",", 1);
        sub_20AEC01D0(*a2, (uint64_t)"{", 1);
        v21 = *((char *)v19 + 55);
        if (v21 >= 0)
          v22 = (uint64_t)(v19 + 4);
        else
          v22 = v19[4];
        if (v21 >= 0)
          v23 = *((unsigned __int8 *)v19 + 55);
        else
          v23 = v19[5];
        sub_20AEC01D0(*a2, v22, v23);
        sub_20AEC01D0(*a2, (uint64_t)",", 1);
        v24 = *a2;
        v25 = *((unsigned __int8 *)v19 + 56);
        if (v25 > 2)
        {
          sub_20AEC01D0(v24, (uint64_t)"Invalid(", 8);
          v24 = (_QWORD *)std::ostream::operator<<();
          v27 = ")";
          v28 = 1;
        }
        else
        {
          v26 = &(&off_24C411D90)[2 * v25];
          v27 = *v26;
          v28 = (uint64_t)v26[1];
        }
        sub_20AEC01D0(v24, (uint64_t)v27, v28);
        sub_20AEC01D0(*a2, (uint64_t)"}", 1);
        v29 = (_QWORD *)v19[1];
        if (v29)
        {
          do
          {
            v30 = v29;
            v29 = (_QWORD *)*v29;
          }
          while (v29);
        }
        else
        {
          do
          {
            v30 = (_QWORD *)v19[2];
            v20 = *v30 == (_QWORD)v19;
            v19 = v30;
          }
          while (!v20);
        }
        v19 = v30;
      }
      while (v30 != v3);
    }
    v4 = *a2;
    v16 = "}";
    v17 = 1;
  }
  return sub_20AEC01D0(v4, (uint64_t)v16, v17);
}

uint64_t *sub_20AFB10A4(uint64_t a1, const void **a2)
{
  uint64_t *v2;
  uint64_t *v3;
  int v4;
  const void *v5;
  size_t v6;
  uint64_t *v7;
  int v8;
  uint64_t *v9;
  size_t v10;
  size_t v11;
  int v12;
  int v13;
  const void *v14;
  size_t v15;
  size_t v16;
  int v17;

  v2 = (uint64_t *)(a1 + 8);
  v3 = *(uint64_t **)(a1 + 8);
  if (!v3)
    return v2;
  v4 = *((char *)a2 + 23);
  if (v4 >= 0)
    v5 = a2;
  else
    v5 = *a2;
  if (v4 >= 0)
    v6 = *((unsigned __int8 *)a2 + 23);
  else
    v6 = (size_t)a2[1];
  v7 = (uint64_t *)(a1 + 8);
  do
  {
    while (1)
    {
      v8 = *((char *)v3 + 55);
      v9 = v8 >= 0 ? v3 + 4 : (uint64_t *)v3[4];
      v10 = v8 >= 0 ? *((unsigned __int8 *)v3 + 55) : v3[5];
      v11 = v6 >= v10 ? v10 : v6;
      v12 = memcmp(v9, v5, v11);
      if (v12)
        break;
      if (v10 >= v6)
        goto LABEL_23;
LABEL_9:
      v3 = (uint64_t *)v3[1];
      if (!v3)
        goto LABEL_24;
    }
    if (v12 < 0)
      goto LABEL_9;
LABEL_23:
    v7 = v3;
    v3 = (uint64_t *)*v3;
  }
  while (v3);
LABEL_24:
  if (v7 == v2)
    return v2;
  v13 = *((char *)v7 + 55);
  if (v13 >= 0)
    v14 = v7 + 4;
  else
    v14 = (const void *)v7[4];
  if (v13 >= 0)
    v15 = *((unsigned __int8 *)v7 + 55);
  else
    v15 = v7[5];
  if (v15 >= v6)
    v16 = v6;
  else
    v16 = v15;
  v17 = memcmp(v5, v14, v16);
  if (v17)
  {
    if ((v17 & 0x80000000) == 0)
      return v7;
    return v2;
  }
  else
  {
    if (v6 < v15)
      return v2;
    return v7;
  }
}

_DWORD *sub_20AFB11BC(_DWORD ***a1)
{
  return sub_20AFB1674(**a1, (char *)(*a1)[1]);
}

void sub_20AFB11C8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C3FA978[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20AFB1380(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20AFB13C4(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20AFB1654(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20AFB166C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_20AFB1674(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3FA978[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20AFB1764(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3FA978[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20AFB1854(_DWORD ***a1)
{
  return sub_20AFB1870(**a1, (char *)(*a1)[1]);
}

void sub_20AFB1860(uint64_t a1, uint64_t a2)
{
  sub_20AFB1960((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20AFB1870(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3FA978[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20AFB1960(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C3FA978[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20AFB1B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20AFB1B58(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20AFB1C50((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20AFB1C48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20AFB1C50(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20AFB1E4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_20AFB1E60(uint64_t **a1, const void **a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t **v6;
  int v7;
  const void *v8;
  const void *v9;
  uint64_t **v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  _QWORD *v15;
  const void *v16;
  size_t v17;
  int v18;
  int v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;

  v6 = a1 + 1;
  v5 = a1[1];
  if (!v5)
  {
    v10 = a1 + 1;
    goto LABEL_29;
  }
  v7 = *((char *)a2 + 23);
  if (v7 >= 0)
    v8 = a2;
  else
    v8 = *a2;
  if (v7 >= 0)
    v9 = (const void *)*((unsigned __int8 *)a2 + 23);
  else
    v9 = a2[1];
  do
  {
    while (1)
    {
      v10 = (uint64_t **)v5;
      v13 = v5[4];
      v11 = v5 + 4;
      v12 = (_QWORD *)v13;
      v14 = *((char *)v11 + 23);
      v15 = v14 >= 0 ? v11 : v12;
      v16 = v14 >= 0 ? (const void *)*((unsigned __int8 *)v11 + 23) : (const void *)v11[1];
      v17 = (size_t)(v16 >= v9 ? v9 : v16);
      v18 = memcmp(v8, v15, v17);
      if (v18)
        break;
      if (v9 >= v16)
        goto LABEL_22;
LABEL_8:
      v5 = *v10;
      v6 = v10;
      if (!*v10)
        goto LABEL_29;
    }
    if (v18 < 0)
      goto LABEL_8;
LABEL_22:
    v19 = memcmp(v15, v8, v17);
    if (v19)
    {
      if ((v19 & 0x80000000) == 0)
        return v10;
    }
    else if (v16 >= v9)
    {
      return v10;
    }
    v5 = v10[1];
  }
  while (v5);
  v6 = v10 + 1;
LABEL_29:
  v20 = (uint64_t *)v10;
  v10 = (uint64_t **)operator new(0x40uLL);
  *((_OWORD *)v10 + 2) = *(_OWORD *)a3;
  v10[6] = *(uint64_t **)(a3 + 16);
  *(_QWORD *)a3 = 0;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *((_BYTE *)v10 + 56) = *(_BYTE *)(a3 + 24);
  *v10 = 0;
  v10[1] = 0;
  v10[2] = v20;
  *v6 = (uint64_t *)v10;
  v21 = (uint64_t *)**a1;
  v22 = (uint64_t *)v10;
  if (v21)
  {
    *a1 = v21;
    v22 = *v6;
  }
  sub_20AEC84C8(a1[1], v22);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return v10;
}

void sub_20AFB1FC8(unsigned __int8 *a1@<X0>, uint64_t a2@<X8>)
{
  unsigned int v3;
  __int128 *v4;
  std::string v5;
  std::string __p;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  void *__dst[2];
  char v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  char v22;

  if (*a1 > 0xDu)
  {
LABEL_3:
    sub_20B5287D4((uint64_t)a1, &v5);
    if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
      sub_20AEC60F4(&__p, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
    else
      __p = v5;
    v7 = 1;
    LOBYTE(v8) = 0;
    v12 = 0;
    v13 = 1;
    sub_20AECF6E0(a2, 5u, (__int128 *)&__p);
    if (!v13)
      goto LABEL_13;
    if (v12)
    {
      if ((v11 & 0x80000000) == 0)
      {
        if ((v9 & 0x80000000) == 0)
          goto LABEL_10;
LABEL_16:
        operator delete(v8);
        if (v7)
        {
LABEL_11:
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
        }
LABEL_13:
        if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v5.__r_.__value_.__l.__data_);
        return;
      }
      operator delete(v10);
      if (v9 < 0)
        goto LABEL_16;
    }
LABEL_10:
    if (v7)
      goto LABEL_11;
    goto LABEL_13;
  }
  switch(*a1)
  {
    case 1u:
    case 4u:
    case 8u:
    case 0xCu:
    case 0xDu:
      goto LABEL_3;
    case 2u:
      v3 = 14;
      break;
    case 3u:
      v3 = 4;
      break;
    case 5u:
      v3 = 15;
      break;
    case 6u:
      v3 = 16;
      break;
    case 7u:
      v3 = 31;
      break;
    case 9u:
      v3 = 19;
      break;
    case 0xAu:
      v3 = 20;
      break;
    case 0xBu:
      v3 = 21;
      break;
    default:
      v3 = 0;
      break;
  }
  if (a1[112])
    v4 = (__int128 *)(a1 + 16);
  else
    v4 = (__int128 *)&unk_20B610E70;
  sub_20AFB2208(__dst, v4);
  sub_20AECF6E0(a2, v3, (__int128 *)__dst);
  if (v22)
  {
    if (v21)
    {
      if (v20 < 0)
        operator delete(v19);
      if (v18 < 0)
        operator delete(v17);
    }
    if (v16 && v15 < 0)
      operator delete(__dst[0]);
  }
}

void sub_20AFB21C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20AFB2208(_BYTE *__dst, __int128 *a2)
{
  __int128 v3;

  *__dst = 0;
  __dst[96] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v3;
    }
    __dst[24] = 1;
    __dst[32] = 0;
    __dst[88] = 0;
    __dst[96] = 1;
  }
  return __dst;
}

void sub_20AFB2278(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 96))
  {
    if (*(_BYTE *)(v1 + 88))
    {
      if (*(char *)(v1 + 87) < 0)
        operator delete(*(void **)(v1 + 64));
      if (*(char *)(v1 + 55) < 0)
        operator delete(*(void **)(v1 + 32));
    }
    if (*(_BYTE *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20AFB22CC(uint64_t a1@<X8>)
{
  void *__p[2];
  char v3;
  char v4;
  void *v5;
  char v6;
  void *v7;
  char v8;
  char v9;
  char v10;

  sub_20AF55B94((uint64_t)__p, "Invalid VZEnableState 'VZEnableStateInherit'");
  v10 = 1;
  sub_20AECCC3C(0x1Eu, (__int128 *)__p, a1);
  if (v10)
  {
    if (!v9)
      goto LABEL_5;
    if (v8 < 0)
    {
      operator delete(v7);
      if ((v6 & 0x80000000) == 0)
      {
LABEL_5:
        if (!v4)
          return;
        goto LABEL_6;
      }
    }
    else if ((v6 & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v5);
    if (!v4)
      return;
LABEL_6:
    if (v3 < 0)
      operator delete(__p[0]);
  }
}

void sub_20AFB2374(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECCDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFB2388(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 104);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 40);
  if (!v2 || (v2(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24)), LODWORD(v2) = *(_DWORD *)(a1 + 104), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC1F8[v2])(&v4, a1 + 24);
LABEL_7:
  *(_DWORD *)(a1 + 104) = -1;
  return a1;
}

uint64_t sub_20AFB2408(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 104);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 40);
  if (!v2 || (v2(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24)), LODWORD(v2) = *(_DWORD *)(a1 + 104), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC1F8[v2])(&v4, a1 + 24);
LABEL_7:
  *(_DWORD *)(a1 + 104) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C406B89191FLL);
}

uint64_t sub_20AFB249C()
{
  return 1;
}

uint64_t (***sub_20AFB24A4())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB24F8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FAA48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_BYTE *)(result + 24) = 0;
  *(_DWORD *)(result + 104) = -1;
  v6 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC208[v6])(v7, result + 24, a1 + 24);
    *(_DWORD *)(v5 + 104) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB25A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 104);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC1F8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 104) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C406B89191FLL);
  _Unwind_Resume(a1);
}

size_t *sub_20AFB25F4(uint64_t a1, void *lpsrc)
{
  size_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;
  size_t v17[2];

  result = (size_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBE38, 0);
  if (result)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(result + 1);
    v5 = *(unsigned int *)(a1 + 104);
    v6 = *((unsigned int *)result + 26);
    if ((_DWORD)v5 != -1)
    {
      if ((_DWORD)v6 == -1)
      {
        result = (size_t *)((uint64_t (*)(__int128 *, uint64_t))off_24C3FC1F8[v5])(&v15, a1 + 24);
        *(_DWORD *)(a1 + 104) = -1;
        return result;
      }
LABEL_10:
      *(_QWORD *)&v15 = a1 + 24;
      return (size_t *)((uint64_t (*)(__int128 *))off_24C3FC9C0[v6])(&v15);
    }
    if ((_DWORD)v6 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v14, lpsrc, 1);
    v7 = *(_QWORD *)(v14[0] + 16);
    v15 = *(_OWORD *)v14[0];
    v16 = v7;
    v14[0] = 0;
    MEMORY[0x20BD3583C]();
    v8 = *(_DWORD *)(a1 + 104);
    if (v8 == 1)
    {
      v9 = (uint64_t *)(a1 + 72);
    }
    else
    {
      if (v8)
        sub_20AECFAB8();
      v9 = (uint64_t *)(a1 + 24);
    }
    v10 = *v9;
    if (*(_DWORD *)(a1 + 12))
      v11 = *(_DWORD *)(a1 + 8) == 0;
    else
      v11 = 1;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v11)
      v12 = 0;
    v14[0] = v10;
    v14[1] = v12;
    v14[2] = v13;
    if (HIDWORD(v12) * HIDWORD(v13) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v17[0] = (size_t)&v15;
    v17[1] = (size_t)v14;
    return sub_20AFC3DF8(v17);
  }
  return result;
}

uint64_t sub_20AFB27A4(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 104);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 72);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 24);
}

_QWORD *sub_20AFB27E0@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  if (a2 != 1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_16;
  }
  v5 = *(_DWORD *)(a1 + 104);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 72);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 24);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 8) == 0;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v8 ? 0 : v9;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_16:
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v7;
  result[1] = v11;
  result[2] = v10;
  *a3 = result;
  return result;
}

_QWORD *sub_20AFB28EC@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  if (a2 != 1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_16;
  }
  v5 = *(_DWORD *)(a1 + 104);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 72);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 24);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 8) == 0;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v8 ? 0 : v9;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_16:
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v7;
  result[1] = v11;
  result[2] = v10;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB29FC(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 104);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 40);
  if (!v2 || (v2(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24)), LODWORD(v2) = *(_DWORD *)(a1 + 104), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC218[v2])(&v4, a1 + 24);
LABEL_7:
  *(_DWORD *)(a1 + 104) = -1;
  return a1;
}

uint64_t sub_20AFB2A7C(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 104);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 40);
  if (!v2 || (v2(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24)), LODWORD(v2) = *(_DWORD *)(a1 + 104), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC218[v2])(&v4, a1 + 24);
LABEL_7:
  *(_DWORD *)(a1 + 104) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C406B89191FLL);
}

uint64_t sub_20AFB2B10()
{
  return 2;
}

uint64_t (***sub_20AFB2B18())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB2B6C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FAAC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_BYTE *)(result + 24) = 0;
  *(_DWORD *)(result + 104) = -1;
  v6 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC228[v6])(v7, result + 24, a1 + 24);
    *(_DWORD *)(v5 + 104) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB2C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 104);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC218[v16])(&a13, v14);
  *(_DWORD *)(v13 + 104) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C406B89191FLL);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFB2C68(uint64_t a1, void *lpsrc)
{
  uint64_t *result;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;

  result = (uint64_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBE50, 0);
  if (result)
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)(result + 1);
    v5 = *(unsigned int *)(a1 + 104);
    v6 = *((unsigned int *)result + 26);
    if ((_DWORD)v5 != -1)
    {
      if ((_DWORD)v6 == -1)
      {
        result = (uint64_t *)((uint64_t (*)(__int128 *, uint64_t))off_24C3FC218[v5])(&v15, a1 + 24);
        *(_DWORD *)(a1 + 104) = -1;
        return result;
      }
LABEL_10:
      *(_QWORD *)&v15 = a1 + 24;
      return (uint64_t *)((uint64_t (*)(__int128 *))off_24C3FC9D0[v6])(&v15);
    }
    if ((_DWORD)v6 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v14, lpsrc, 2);
    v7 = *(_QWORD *)(v14[0] + 16);
    v15 = *(_OWORD *)v14[0];
    v16 = v7;
    v14[0] = 0;
    MEMORY[0x20BD3583C]();
    v8 = *(_DWORD *)(a1 + 104);
    if (v8 == 1)
    {
      v9 = (uint64_t *)(a1 + 72);
    }
    else
    {
      if (v8)
        sub_20AECFAB8();
      v9 = (uint64_t *)(a1 + 24);
    }
    v10 = *v9;
    if (*(_DWORD *)(a1 + 12))
      v11 = *(_DWORD *)(a1 + 8) == 0;
    else
      v11 = 1;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = *(_QWORD *)(a1 + 16);
    if (v11)
      v12 = 0;
    v14[0] = v10;
    v14[1] = v12;
    v14[2] = v13;
    if (HIDWORD(v12) * HIDWORD(v13) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    return sub_20AFC48E4((uint64_t *)&v15, (uint64_t)v14);
  }
  return result;
}

uint64_t sub_20AFB2E10(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 104);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 72);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 24);
}

_QWORD *sub_20AFB2E4C@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  if (a2 != 2
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_16;
  }
  v5 = *(_DWORD *)(a1 + 104);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 72);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 24);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 8) == 0;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v8 ? 0 : v9;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_16:
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v7;
  result[1] = v11;
  result[2] = v10;
  *a3 = result;
  return result;
}

_QWORD *sub_20AFB2F58@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  if (a2 != 2
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_16;
  }
  v5 = *(_DWORD *)(a1 + 104);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 72);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 24);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 8) == 0;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v8 ? 0 : v9;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_16:
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v7;
  result[1] = v11;
  result[2] = v10;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB3064(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 104);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 40);
  if (!v2 || (v2(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24)), LODWORD(v2) = *(_DWORD *)(a1 + 104), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC238[v2])(&v4, a1 + 24);
LABEL_7:
  *(_DWORD *)(a1 + 104) = -1;
  return a1;
}

uint64_t sub_20AFB30E4(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 104);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 40);
  if (!v2 || (v2(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24)), LODWORD(v2) = *(_DWORD *)(a1 + 104), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC238[v2])(&v4, a1 + 24);
LABEL_7:
  *(_DWORD *)(a1 + 104) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C406B89191FLL);
}

uint64_t sub_20AFB3178()
{
  return 3;
}

uint64_t (***sub_20AFB3180())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB31D4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FAB48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_BYTE *)(result + 24) = 0;
  *(_DWORD *)(result + 104) = -1;
  v6 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC248[v6])(v7, result + 24, a1 + 24);
    *(_DWORD *)(v5 + 104) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB327C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 104);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC238[v16])(&a13, v14);
  *(_DWORD *)(v13 + 104) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C406B89191FLL);
  _Unwind_Resume(a1);
}

double sub_20AFB32D0(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  __int128 v17;
  uint64_t v18;
  uint64_t v19[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBE68, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v6 = *(unsigned int *)(a1 + 104);
    v7 = *((unsigned int *)v4 + 26);
    if ((_DWORD)v6 == -1)
    {
      if ((_DWORD)v7 == -1)
        return *(double *)&v5;
    }
    else if ((_DWORD)v7 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C3FC238[v6])(&v17, a1 + 24);
      *(_DWORD *)(a1 + 104) = -1;
      return *(double *)&v5;
    }
    *(_QWORD *)&v17 = a1 + 24;
    ((void (*)(__int128 *))off_24C3FC9E0[v7])(&v17);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v16, lpsrc, 3);
    v8 = *(_QWORD *)(v16[0] + 16);
    v17 = *(_OWORD *)v16[0];
    v18 = v8;
    v16[0] = 0;
    MEMORY[0x20BD3583C]();
    v9 = *(_DWORD *)(a1 + 104);
    if (v9 == 1)
    {
      v10 = (uint64_t *)(a1 + 72);
    }
    else
    {
      if (v9)
        sub_20AECFAB8();
      v10 = (uint64_t *)(a1 + 24);
    }
    v11 = *v10;
    if (*(_DWORD *)(a1 + 12))
      v12 = *(_DWORD *)(a1 + 8) == 0;
    else
      v12 = 1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v12)
      v13 = 0;
    v16[0] = v11;
    v16[1] = v13;
    v16[2] = v14;
    if (HIDWORD(v13) * HIDWORD(v14) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v19[0] = (uint64_t)&v17;
    v19[1] = (uint64_t)v16;
    *(_QWORD *)&v5 = sub_20AFE4B3C(v19);
  }
  return *(double *)&v5;
}

uint64_t sub_20AFB3480(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 104);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 72);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 24);
}

_QWORD *sub_20AFB34BC@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  if (a2 != 3
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_16;
  }
  v5 = *(_DWORD *)(a1 + 104);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 72);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 24);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 8) == 0;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v8 ? 0 : v9;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_16:
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v7;
  result[1] = v11;
  result[2] = v10;
  *a3 = result;
  return result;
}

_QWORD *sub_20AFB35C8@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  if (a2 != 3
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_16;
  }
  v5 = *(_DWORD *)(a1 + 104);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 72);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 24);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 8) == 0;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v8 ? 0 : v9;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_16:
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v7;
  result[1] = v11;
  result[2] = v10;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB36D8(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 104);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 40);
  if (!v2 || (v2(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24)), LODWORD(v2) = *(_DWORD *)(a1 + 104), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC258[v2])(&v4, a1 + 24);
LABEL_7:
  *(_DWORD *)(a1 + 104) = -1;
  return a1;
}

uint64_t sub_20AFB3758(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 104);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 40);
  if (!v2 || (v2(*(_QWORD *)(a1 + 32), *(_QWORD *)(a1 + 24)), LODWORD(v2) = *(_DWORD *)(a1 + 104), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC258[v2])(&v4, a1 + 24);
LABEL_7:
  *(_DWORD *)(a1 + 104) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C406B89191FLL);
}

uint64_t sub_20AFB37EC()
{
  return 4;
}

uint64_t (***sub_20AFB37F4())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB3848@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FABC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_BYTE *)(result + 24) = 0;
  *(_DWORD *)(result + 104) = -1;
  v6 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC268[v6])(v7, result + 24, a1 + 24);
    *(_DWORD *)(v5 + 104) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB38F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 104);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC258[v16])(&a13, v14);
  *(_DWORD *)(v13 + 104) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C406B89191FLL);
  _Unwind_Resume(a1);
}

float sub_20AFB3944(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[3];
  __int128 v17;
  uint64_t v18;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBE80, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    *(_OWORD *)(a1 + 8) = v5;
    v6 = *(unsigned int *)(a1 + 104);
    v7 = *((unsigned int *)v4 + 26);
    if ((_DWORD)v6 == -1)
    {
      if ((_DWORD)v7 == -1)
        return *(float *)&v5;
    }
    else if ((_DWORD)v7 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C3FC258[v6])(&v17, a1 + 24);
      *(_DWORD *)(a1 + 104) = -1;
      return *(float *)&v5;
    }
    *(_QWORD *)&v17 = a1 + 24;
    ((void (*)(__int128 *))off_24C3FC9F0[v7])(&v17);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v16, lpsrc, 4);
    v8 = *(_QWORD *)(v16[0] + 16);
    v17 = *(_OWORD *)v16[0];
    v18 = v8;
    v16[0] = 0;
    MEMORY[0x20BD3583C]();
    v9 = *(_DWORD *)(a1 + 104);
    if (v9 == 1)
    {
      v10 = (uint64_t *)(a1 + 72);
    }
    else
    {
      if (v9)
        sub_20AECFAB8();
      v10 = (uint64_t *)(a1 + 24);
    }
    v11 = *v10;
    if (*(_DWORD *)(a1 + 12))
      v12 = *(_DWORD *)(a1 + 8) == 0;
    else
      v12 = 1;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v12)
      v13 = 0;
    v16[0] = v11;
    v16[1] = v13;
    v16[2] = v14;
    if (HIDWORD(v13) * HIDWORD(v14) == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(float *)&v5 = sub_20AFC5D04((uint64_t)&v17, (uint64_t)v16);
  }
  return *(float *)&v5;
}

uint64_t sub_20AFB3AEC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 104);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 72);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 24);
}

_QWORD *sub_20AFB3B28@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  if (a2 != 4
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_16;
  }
  v5 = *(_DWORD *)(a1 + 104);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 72);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 24);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 8) == 0;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v8 ? 0 : v9;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_16:
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v7;
  result[1] = v11;
  result[2] = v10;
  *a3 = result;
  return result;
}

_QWORD *sub_20AFB3C34@<X0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *result;

  if (a2 != 4
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_16;
  }
  v5 = *(_DWORD *)(a1 + 104);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 72);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 24);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 12) || *(_DWORD *)(a1 + 8) == 0;
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 16);
  v11 = v8 ? 0 : v9;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_16:
    abort();
  }
  result = (_QWORD *)operator new();
  *result = v7;
  result[1] = v11;
  result[2] = v10;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB3D44(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v2 = *(_DWORD *)(a2 + 160);
  if (v2 == 1)
  {
    v3 = (uint64_t *)(a2 + 120);
  }
  else
  {
    if (v2)
      sub_20AECFAB8();
    v3 = (uint64_t *)(a2 + 48);
  }
  v4 = *v3;
  if (*(_DWORD *)(a2 + 16))
    v5 = *(_DWORD *)(a2 + 12) == 0;
  else
    v5 = 1;
  v6 = v5 || *(_DWORD *)(a2 + 8) == 0;
  v7 = *(_QWORD *)(a2 + 12);
  if (v6)
    v7 = 0;
  LODWORD(v9) = 2;
  DWORD1(v9) = v7;
  v8 = v9;
  LODWORD(v9) = 1;
  *(_QWORD *)((char *)&v9 + 4) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 16) = HIDWORD(v7);
  *(_QWORD *)(result + 20) = v9;
  *(_DWORD *)(result + 28) = DWORD2(v9);
  *(_QWORD *)(result + 32) = v7;
  *(_QWORD *)(result + 40) = *(_QWORD *)((char *)&v9 + 4);
  if (DWORD2(v9) * HIDWORD(v7) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      abort();
  }
  return result;
}

uint64_t sub_20AFB3E68(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC278[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB3EE8(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC278[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB3F7C()
{
  return 5;
}

uint64_t (***sub_20AFB3F84())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB3FD8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FAC48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC288[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB4090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC278[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

size_t *sub_20AFB40E4(uint64_t a1, void *lpsrc)
{
  size_t *result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  size_t v14[2];

  result = (size_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBE98, 0);
  if (!result)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 5);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB3D44((uint64_t)v12, a1);
    v14[0] = (size_t)v13;
    v14[1] = (size_t)v12;
    return sub_20AFE5C6C(v14);
  }
  v5 = *(_OWORD *)(result + 1);
  v6 = *(_OWORD *)(result + 3);
  *(_QWORD *)(a1 + 40) = result[5];
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)result + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      result = (size_t *)((uint64_t (*)(_OWORD *, uint64_t))off_24C3FC278[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return result;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    return (size_t *)((uint64_t (*)(_OWORD *))off_24C3FCA00[v8])(v13);
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
  return result;
}

uint64_t sub_20AFB4234(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB4270@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB3D44((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB4310@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 5
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 2;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB44B8(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC298[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB4538(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC298[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB45CC()
{
  return 6;
}

uint64_t (***sub_20AFB45D4())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB4628@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FACC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC2A8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB46E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC298[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFB4734(uint64_t a1, void *lpsrc)
{
  uint64_t *result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  uint64_t v14[2];

  result = (uint64_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBEB0, 0);
  if (!result)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 6);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB3D44((uint64_t)v12, a1);
    v14[0] = (uint64_t)v13;
    v14[1] = (uint64_t)v12;
    return sub_20AFE6878(v14);
  }
  v5 = *(_OWORD *)(result + 1);
  v6 = *(_OWORD *)(result + 3);
  *(_QWORD *)(a1 + 40) = result[5];
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)result + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      result = (uint64_t *)((uint64_t (*)(_OWORD *, uint64_t))off_24C3FC298[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return result;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    return (uint64_t *)((uint64_t (*)(_OWORD *))off_24C3FCA10[v8])(v13);
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
  return result;
}

uint64_t sub_20AFB4884(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB48C0@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 6
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB3D44((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB4960@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 6
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 2;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB4B08(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC2B8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB4B88(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC2B8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB4C1C()
{
  return 7;
}

uint64_t (***sub_20AFB4C24())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB4C78@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FAD48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC2C8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB4D30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC2B8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFB4D84(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  uint64_t v14[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBEC8, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 7);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB3D44((uint64_t)v12, a1);
    v14[0] = (uint64_t)v13;
    v14[1] = (uint64_t)v12;
    sub_20AFE741C(v14);
    return;
  }
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))off_24C3FC2B8[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    ((void (*)(_OWORD *))off_24C3FCA20[v8])(v13);
    return;
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
}

uint64_t sub_20AFB4ED4(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB4F10@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 7
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB3D44((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB4FB0@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 7
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 2;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB5158(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC2D8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB51D8(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC2D8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB526C()
{
  return 8;
}

uint64_t (***sub_20AFB5274())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB52C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FADC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC2E8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB5380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC2D8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFB53D4(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  uint64_t v14[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBEE0, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 8);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB3D44((uint64_t)v12, a1);
    v14[0] = (uint64_t)v13;
    v14[1] = (uint64_t)v12;
    sub_20AFE84BC(v14);
    return;
  }
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))off_24C3FC2D8[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    ((void (*)(_OWORD *))off_24C3FCA30[v8])(v13);
    return;
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
}

uint64_t sub_20AFB5524(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB5560@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 8
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB3D44((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB5600@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 8
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 2;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB57A8(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v2 = *(_DWORD *)(a2 + 160);
  if (v2 == 1)
  {
    v3 = (uint64_t *)(a2 + 120);
  }
  else
  {
    if (v2)
      sub_20AECFAB8();
    v3 = (uint64_t *)(a2 + 48);
  }
  v4 = *v3;
  if (*(_DWORD *)(a2 + 16))
    v5 = *(_DWORD *)(a2 + 12) == 0;
  else
    v5 = 1;
  v6 = v5 || *(_DWORD *)(a2 + 8) == 0;
  v7 = *(_QWORD *)(a2 + 12);
  if (v6)
    v7 = 0;
  LODWORD(v9) = 3;
  DWORD1(v9) = v7;
  v8 = v9;
  LODWORD(v9) = 1;
  *(_QWORD *)((char *)&v9 + 4) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 16) = HIDWORD(v7);
  *(_QWORD *)(result + 20) = v9;
  *(_DWORD *)(result + 28) = DWORD2(v9);
  *(_QWORD *)(result + 32) = v7;
  *(_QWORD *)(result + 40) = *(_QWORD *)((char *)&v9 + 4);
  if (DWORD2(v9) * HIDWORD(v7) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      abort();
  }
  return result;
}

uint64_t sub_20AFB58CC(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC2F8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB594C(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC2F8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB59E0()
{
  return 9;
}

uint64_t (***sub_20AFB59E8())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB5A3C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FAE48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC308[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB5AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC2F8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

size_t *sub_20AFB5B48(uint64_t a1, void *lpsrc)
{
  size_t *result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  size_t *v21;
  _BYTE *v22;
  int v23;
  _QWORD v24[2];
  int v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  size_t v31[2];

  result = (size_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBEF8, 0);
  if (result)
  {
    v5 = *(_OWORD *)(result + 1);
    v6 = *(_OWORD *)(result + 3);
    *(_QWORD *)(a1 + 40) = result[5];
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)result + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        result = (size_t *)((uint64_t (*)(__int128 *, uint64_t))off_24C3FC2F8[v7])(&v28, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return result;
      }
LABEL_10:
      *(_QWORD *)&v28 = a1 + 48;
      return (size_t *)((uint64_t (*)(__int128 *))off_24C3FCA40[v8])(&v28);
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v24, lpsrc, 9);
    v10 = *(_OWORD *)(v24[0] + 16);
    v9 = *(_OWORD *)(v24[0] + 32);
    v28 = *(_OWORD *)v24[0];
    v29 = v10;
    v30 = v9;
    v24[0] = 0;
    MEMORY[0x20BD3583C]();
    result = (size_t *)sub_20AFB57A8((uint64_t)v24, a1);
    v31[0] = (size_t)&v28;
    v31[1] = (size_t)v24;
    if (DWORD1(v29) == 1 && v25 == 1)
    {
      return sub_20AFE5D88(v31);
    }
    else if (DWORD2(v28) && HIDWORD(v28) && (_DWORD)v29)
    {
      v11 = HIDWORD(v28) - 1;
      v12 = DWORD2(v29);
      v13 = v26;
      v14 = (_BYTE *)v28;
      v15 = (_BYTE *)v24[0];
      v16 = v29 - 1;
      if ((_DWORD)v29 != 1)
      {
        v17 = v27;
        v18 = HIDWORD(v29);
        if (HIDWORD(v28) == 1)
        {
          do
          {
            *v15 = *v14;
            v15[1] = v14[1];
            v15[2] = v14[2];
            v14 += v18;
            v15 += v17;
            --v16;
          }
          while (v16);
        }
        else
        {
          v19 = 0;
          v20 = v24[0] + 2;
          result = (size_t *)(v28 + 2);
          do
          {
            v21 = result;
            v22 = (_BYTE *)v20;
            v23 = v11;
            do
            {
              *(v22 - 2) = *((_BYTE *)v21 - 2);
              *(v22 - 1) = *((_BYTE *)v21 - 1);
              *v22 = *(_BYTE *)v21;
              v22 += v13;
              v21 = (size_t *)((char *)v21 + v12);
              --v23;
            }
            while (v23);
            *(v22 - 2) = *((_BYTE *)v21 - 2);
            *(v22 - 1) = *((_BYTE *)v21 - 1);
            *v22 = *(_BYTE *)v21;
            v14 += v18;
            v15 += v17;
            ++v19;
            v20 += v17;
            result = (size_t *)((char *)result + v18);
          }
          while (v19 != v16);
        }
      }
      for (; v11; --v11)
      {
        *v15 = *v14;
        v15[1] = v14[1];
        v15[2] = v14[2];
        v14 += v12;
        v15 += v13;
      }
      *v15 = *v14;
      v15[1] = v14[1];
      v15[2] = v14[2];
    }
  }
  return result;
}

uint64_t sub_20AFB5DE8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB5E24@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 9
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB5EC4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 9
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB606C(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC318[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB60EC(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC318[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB6180()
{
  return 10;
}

uint64_t (***sub_20AFB6188())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB61DC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FAEC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC328[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB6294(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC318[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFB62E8(uint64_t a1, void *lpsrc)
{
  uint64_t *result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  _WORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  _WORD *v23;
  int v24;
  _QWORD v25[2];
  int v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];

  result = (uint64_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBF10, 0);
  if (!result)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v25, lpsrc, 10);
    v10 = *(_OWORD *)(v25[0] + 16);
    v9 = *(_OWORD *)(v25[0] + 32);
    v29 = *(_OWORD *)v25[0];
    v30 = v10;
    v31 = v9;
    v25[0] = 0;
    MEMORY[0x20BD3583C]();
    result = (uint64_t *)sub_20AFB57A8((uint64_t)v25, a1);
    v32[0] = (uint64_t)&v29;
    v32[1] = (uint64_t)v25;
    if (DWORD1(v30) == 1 && v26 == 1)
      return sub_20AFC7BE4(v32);
    if (!DWORD2(v29) || !HIDWORD(v29) || !(_DWORD)v30)
      return result;
    v11 = HIDWORD(v29) - 1;
    v12 = DWORD2(v30);
    v13 = v27;
    v14 = (_WORD *)v29;
    v15 = (_WORD *)v25[0];
    v16 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v17 = v28;
      v18 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v15 = *v14;
          v15[1] = v14[1];
          v15[2] = v14[2];
          v14 += v18;
          v15 += v17;
          --v16;
        }
        while (v16);
LABEL_24:
        *v15 = *v14;
        v15[1] = v14[1];
        v15[2] = v14[2];
        return result;
      }
      v19 = 0;
      result = (uint64_t *)(2 * v27);
      v20 = v25[0] + 4;
      v21 = (_WORD *)(v29 + 4);
      do
      {
        v22 = v21;
        v23 = (_WORD *)v20;
        v24 = v11;
        do
        {
          *(v23 - 2) = *(v22 - 2);
          *(v23 - 1) = *(v22 - 1);
          *v23 = *v22;
          v23 = (_WORD *)((char *)result + (_QWORD)v23);
          v22 += v12;
          --v24;
        }
        while (v24);
        *(v23 - 2) = *(v22 - 2);
        *(v23 - 1) = *(v22 - 1);
        *v23 = *v22;
        v14 += v18;
        v15 += v17;
        ++v19;
        v20 += 2 * v17;
        v21 += v18;
      }
      while (v19 != v16);
    }
    for (; v11; --v11)
    {
      *v15 = *v14;
      v15[1] = v14[1];
      v15[2] = v14[2];
      v14 += v12;
      v15 += v13;
    }
    goto LABEL_24;
  }
  v5 = *(_OWORD *)(result + 1);
  v6 = *(_OWORD *)(result + 3);
  *(_QWORD *)(a1 + 40) = result[5];
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)result + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      result = (uint64_t *)((uint64_t (*)(__int128 *, uint64_t))off_24C3FC318[v7])(&v29, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return result;
    }
LABEL_10:
    *(_QWORD *)&v29 = a1 + 48;
    return (uint64_t *)((uint64_t (*)(__int128 *))off_24C3FCA50[v8])(&v29);
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_10;
  return result;
}

uint64_t sub_20AFB65A8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB65E4@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 10
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB6684@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 10
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB682C(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC338[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB68AC(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC338[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB6940()
{
  return 11;
}

uint64_t (***sub_20AFB6948())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB699C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FAF48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC348[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB6A54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC338[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFB6AA8(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  _QWORD v14[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBF28, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 11);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB57A8((uint64_t)v12, a1);
    v14[0] = v13;
    v14[1] = v12;
    sub_20AFE98D0(v14);
    return;
  }
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))off_24C3FC338[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    ((void (*)(_OWORD *))off_24C3FCA60[v8])(v13);
    return;
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
}

uint64_t sub_20AFB6BF8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB6C34@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 11
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB6CD4@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 11
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB6E7C(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC358[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB6EFC(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC358[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB6F90()
{
  return 12;
}

uint64_t (***sub_20AFB6F98())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB6FEC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FAFC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC368[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB70A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC358[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

float sub_20AFB70F8(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  _QWORD v27[2];
  int v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBF40, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 == -1)
    {
      if ((_DWORD)v8 == -1)
        return *(float *)&v5;
    }
    else if ((_DWORD)v8 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C3FC358[v7])(&v31, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return *(float *)&v5;
    }
    *(_QWORD *)&v31 = a1 + 48;
    ((void (*)(__int128 *))off_24C3FCA70[v8])(&v31);
    return *(float *)&v5;
  }
  (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v27, lpsrc, 12);
  v10 = *(_OWORD *)(v27[0] + 16);
  v9 = *(_OWORD *)(v27[0] + 32);
  v31 = *(_OWORD *)v27[0];
  v32 = v10;
  v33 = v9;
  v27[0] = 0;
  MEMORY[0x20BD3583C]();
  sub_20AFB57A8((uint64_t)v27, a1);
  v34[0] = (uint64_t)&v31;
  v34[1] = (uint64_t)v27;
  if (DWORD1(v32) == 1 && v28 == 1)
  {
    sub_20AFC9A3C(v34);
    return *(float *)&v5;
  }
  if (DWORD2(v31) && HIDWORD(v31) && (_DWORD)v32)
  {
    v11 = HIDWORD(v31) - 1;
    v12 = DWORD2(v32);
    v13 = v29;
    v14 = (_DWORD *)v31;
    v15 = (_DWORD *)v27[0];
    v16 = v32 - 1;
    if ((_DWORD)v32 != 1)
    {
      v17 = v30;
      v18 = HIDWORD(v32);
      if (HIDWORD(v31) == 1)
      {
        do
        {
          *v15 = *v14;
          v15[1] = v14[1];
          v15[2] = v14[2];
          v14 += v18;
          v15 += v17;
          --v16;
        }
        while (v16);
LABEL_24:
        *v15 = *v14;
        v15[1] = v14[1];
        LODWORD(v5) = v14[2];
        v15[2] = v5;
        return *(float *)&v5;
      }
      v19 = 0;
      v20 = 4 * v29;
      v21 = v27[0] + 8;
      v22 = (_DWORD *)(v31 + 8);
      do
      {
        v23 = v22;
        v24 = (_DWORD *)v21;
        v25 = v11;
        do
        {
          *(v24 - 2) = *(v23 - 2);
          *(v24 - 1) = *(v23 - 1);
          *v24 = *v23;
          v24 = (_DWORD *)((char *)v24 + v20);
          v23 += v12;
          --v25;
        }
        while (v25);
        *(v24 - 2) = *(v23 - 2);
        *(v24 - 1) = *(v23 - 1);
        *v24 = *v23;
        v14 += v18;
        v15 += v17;
        ++v19;
        v21 += 4 * v17;
        v22 += v18;
      }
      while (v19 != v16);
    }
    for (; v11; --v11)
    {
      *v15 = *v14;
      v15[1] = v14[1];
      v15[2] = v14[2];
      v14 += v12;
      v15 += v13;
    }
    goto LABEL_24;
  }
  return *(float *)&v5;
}

uint64_t sub_20AFB73B8(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB73F4@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 12
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB7494@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 12
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB763C(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t *v3;
  uint64_t v4;
  BOOL v5;
  BOOL v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;

  v2 = *(_DWORD *)(a2 + 160);
  if (v2 == 1)
  {
    v3 = (uint64_t *)(a2 + 120);
  }
  else
  {
    if (v2)
      sub_20AECFAB8();
    v3 = (uint64_t *)(a2 + 48);
  }
  v4 = *v3;
  if (*(_DWORD *)(a2 + 16))
    v5 = *(_DWORD *)(a2 + 12) == 0;
  else
    v5 = 1;
  v6 = v5 || *(_DWORD *)(a2 + 8) == 0;
  v7 = *(_QWORD *)(a2 + 12);
  if (v6)
    v7 = 0;
  LODWORD(v9) = 4;
  DWORD1(v9) = v7;
  v8 = v9;
  LODWORD(v9) = 1;
  *(_QWORD *)((char *)&v9 + 4) = *(_QWORD *)(a2 + 24);
  *(_QWORD *)result = v4;
  *(_QWORD *)(result + 8) = v8;
  *(_DWORD *)(result + 16) = HIDWORD(v7);
  *(_QWORD *)(result + 20) = v9;
  *(_DWORD *)(result + 28) = DWORD2(v9);
  *(_QWORD *)(result + 32) = v7;
  *(_QWORD *)(result + 40) = *(_QWORD *)((char *)&v9 + 4);
  if (DWORD2(v9) * HIDWORD(v7) == -1)
  {
    result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
    if ((_DWORD)result)
      abort();
  }
  return result;
}

uint64_t sub_20AFB7760(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC378[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB77E0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC378[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB7874()
{
  return 13;
}

uint64_t (***sub_20AFB787C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB78D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB048;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC388[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB7988(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC378[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFB79DC(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  size_t v17[2];
  char v18;
  char *v19;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBF58, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        ((void (*)(__int128 *, uint64_t))off_24C3FC378[v7])(&v14, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
LABEL_10:
      *(_QWORD *)&v14 = a1 + 48;
      ((void (*)(__int128 *))off_24C3FCA80[v8])(&v14);
      return;
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 13);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v14 = *(_OWORD *)v12[0];
    v15 = v11;
    v16 = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v17[0] = (size_t)&v14;
    v17[1] = (size_t)v12;
    if (DWORD1(v15) == 1 && v13 == 1)
    {
      sub_20AFE5D88(v17);
    }
    else
    {
      v18 = 0;
      if (DWORD2(v14) && HIDWORD(v14))
      {
        if ((_DWORD)v15)
        {
          v19 = &v18;
          sub_20AFEA3E0((uint64_t)&v19, (uint64_t)&v14, (uint64_t)v12);
        }
      }
    }
  }
}

uint64_t sub_20AFB7B8C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB7BC8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 13
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB7C68@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 13
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB7E10(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC398[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB7E90(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC398[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB7F24()
{
  return 14;
}

uint64_t (***sub_20AFB7F2C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB7F80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB0C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC3A8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB8038(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC398[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFB808C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17[2];
  char v18;
  char *v19;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBF70, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        ((void (*)(__int128 *, uint64_t))off_24C3FC398[v7])(&v14, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
LABEL_10:
      *(_QWORD *)&v14 = a1 + 48;
      ((void (*)(__int128 *))off_24C3FCA90[v8])(&v14);
      return;
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 14);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v14 = *(_OWORD *)v12[0];
    v15 = v11;
    v16 = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v17[0] = (uint64_t)&v14;
    v17[1] = (uint64_t)v12;
    if (DWORD1(v15) == 1 && v13 == 1)
    {
      sub_20AFC7BE4(v17);
    }
    else
    {
      v18 = 0;
      if (DWORD2(v14) && HIDWORD(v14))
      {
        if ((_DWORD)v15)
        {
          v19 = &v18;
          sub_20AFEA8F4((uint64_t)&v19, (uint64_t)&v14, (uint64_t)v12);
        }
      }
    }
  }
}

uint64_t sub_20AFB823C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB8278@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 14
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB8318@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 14
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB84C0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC3B8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB8540(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC3B8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB85D4()
{
  return 15;
}

uint64_t (***sub_20AFB85DC())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB8630@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB148;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC3C8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB86E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC3B8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFB873C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  _QWORD v14[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBF88, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 15);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v14[0] = v13;
    v14[1] = v12;
    sub_20AFEAE58(v14);
    return;
  }
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))off_24C3FC3B8[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    ((void (*)(_OWORD *))off_24C3FCAA0[v8])(v13);
    return;
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
}

uint64_t sub_20AFB888C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB88C8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 15
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB8968@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 15
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB8B10(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC3D8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB8B90(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC3D8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB8C24()
{
  return 16;
}

uint64_t (***sub_20AFB8C2C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB8C80@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB1C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC3E8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB8D38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC3D8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

float sub_20AFB8D8C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[2];
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18[2];
  char v19;
  char *v20;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBFA0, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 == -1)
    {
      if ((_DWORD)v8 == -1)
        return *(float *)&v5;
    }
    else if ((_DWORD)v8 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C3FC3D8[v7])(&v15, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return *(float *)&v5;
    }
    *(_QWORD *)&v15 = a1 + 48;
    ((void (*)(__int128 *))off_24C3FCAB0[v8])(&v15);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v13, lpsrc, 16);
    v9 = v13[0];
    v11 = *(_OWORD *)(v13[0] + 16);
    v10 = *(_OWORD *)(v13[0] + 32);
    v15 = *(_OWORD *)v13[0];
    v16 = v11;
    v17 = v10;
    v13[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v13, a1);
    v18[0] = (uint64_t)&v15;
    v18[1] = (uint64_t)v13;
    if (DWORD1(v16) == 1 && v14 == 1)
    {
      sub_20AFC9A3C(v18);
    }
    else
    {
      v19 = 0;
      if (DWORD2(v15) && HIDWORD(v15) && (_DWORD)v16)
      {
        v20 = &v19;
        *(float *)&v5 = sub_20AFEB5FC((uint64_t)&v20, (uint64_t)&v15, (uint64_t)v13);
      }
    }
  }
  return *(float *)&v5;
}

uint64_t sub_20AFB8F3C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB8F78@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 16
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB9018@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 16
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB91C0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC3F8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB9240(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC3F8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB92D4()
{
  return 17;
}

uint64_t (***sub_20AFB92DC())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB9330@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB248;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC408[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB93E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC3F8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

size_t *sub_20AFB943C(uint64_t a1, void *lpsrc)
{
  size_t *result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  size_t *v21;
  _BYTE *v22;
  int v23;
  _QWORD v24[2];
  int v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  size_t v31[2];

  result = (size_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBFB8, 0);
  if (result)
  {
    v5 = *(_OWORD *)(result + 1);
    v6 = *(_OWORD *)(result + 3);
    *(_QWORD *)(a1 + 40) = result[5];
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)result + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        result = (size_t *)((uint64_t (*)(__int128 *, uint64_t))off_24C3FC3F8[v7])(&v28, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return result;
      }
LABEL_10:
      *(_QWORD *)&v28 = a1 + 48;
      return (size_t *)((uint64_t (*)(__int128 *))off_24C3FCAC0[v8])(&v28);
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v24, lpsrc, 17);
    v10 = *(_OWORD *)(v24[0] + 16);
    v9 = *(_OWORD *)(v24[0] + 32);
    v28 = *(_OWORD *)v24[0];
    v29 = v10;
    v30 = v9;
    v24[0] = 0;
    MEMORY[0x20BD3583C]();
    result = (size_t *)sub_20AFB57A8((uint64_t)v24, a1);
    v31[0] = (size_t)&v28;
    v31[1] = (size_t)v24;
    if (DWORD1(v29) == 1 && v25 == 1)
    {
      return sub_20AFE5D88(v31);
    }
    else if (DWORD2(v28) && HIDWORD(v28) && (_DWORD)v29)
    {
      v11 = HIDWORD(v28) - 1;
      v12 = DWORD2(v29);
      v13 = v26;
      v14 = (_BYTE *)v28;
      v15 = (_BYTE *)v24[0];
      v16 = v29 - 1;
      if ((_DWORD)v29 != 1)
      {
        v17 = v27;
        v18 = HIDWORD(v29);
        if (HIDWORD(v28) == 1)
        {
          do
          {
            *v15 = *v14;
            v15[1] = v14[1];
            v15[2] = v14[2];
            v14 += v18;
            v15 += v17;
            --v16;
          }
          while (v16);
        }
        else
        {
          v19 = 0;
          v20 = v24[0] + 2;
          result = (size_t *)(v28 + 2);
          do
          {
            v21 = result;
            v22 = (_BYTE *)v20;
            v23 = v11;
            do
            {
              *(v22 - 2) = *((_BYTE *)v21 - 2);
              *(v22 - 1) = *((_BYTE *)v21 - 1);
              *v22 = *(_BYTE *)v21;
              v22 += v13;
              v21 = (size_t *)((char *)v21 + v12);
              --v23;
            }
            while (v23);
            *(v22 - 2) = *((_BYTE *)v21 - 2);
            *(v22 - 1) = *((_BYTE *)v21 - 1);
            *v22 = *(_BYTE *)v21;
            v14 += v18;
            v15 += v17;
            ++v19;
            v20 += v17;
            result = (size_t *)((char *)result + v18);
          }
          while (v19 != v16);
        }
      }
      for (; v11; --v11)
      {
        *v15 = *v14;
        v15[1] = v14[1];
        v15[2] = v14[2];
        v14 += v12;
        v15 += v13;
      }
      *v15 = *v14;
      v15[1] = v14[1];
      v15[2] = v14[2];
    }
  }
  return result;
}

uint64_t sub_20AFB96DC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB9718@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 17
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB97B8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 17
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFB9960(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC418[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFB99E0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC418[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFB9A74()
{
  return 18;
}

uint64_t (***sub_20AFB9A7C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFB9AD0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB2C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC428[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFB9B88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC418[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFB9BDC(uint64_t a1, void *lpsrc)
{
  uint64_t *result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  _WORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  _WORD *v23;
  int v24;
  _QWORD v25[2];
  int v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];

  result = (uint64_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBFD0, 0);
  if (!result)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v25, lpsrc, 18);
    v10 = *(_OWORD *)(v25[0] + 16);
    v9 = *(_OWORD *)(v25[0] + 32);
    v29 = *(_OWORD *)v25[0];
    v30 = v10;
    v31 = v9;
    v25[0] = 0;
    MEMORY[0x20BD3583C]();
    result = (uint64_t *)sub_20AFB57A8((uint64_t)v25, a1);
    v32[0] = (uint64_t)&v29;
    v32[1] = (uint64_t)v25;
    if (DWORD1(v30) == 1 && v26 == 1)
      return sub_20AFC7BE4(v32);
    if (!DWORD2(v29) || !HIDWORD(v29) || !(_DWORD)v30)
      return result;
    v11 = HIDWORD(v29) - 1;
    v12 = DWORD2(v30);
    v13 = v27;
    v14 = (_WORD *)v29;
    v15 = (_WORD *)v25[0];
    v16 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v17 = v28;
      v18 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v15 = *v14;
          v15[1] = v14[1];
          v15[2] = v14[2];
          v14 += v18;
          v15 += v17;
          --v16;
        }
        while (v16);
LABEL_24:
        *v15 = *v14;
        v15[1] = v14[1];
        v15[2] = v14[2];
        return result;
      }
      v19 = 0;
      result = (uint64_t *)(2 * v27);
      v20 = v25[0] + 4;
      v21 = (_WORD *)(v29 + 4);
      do
      {
        v22 = v21;
        v23 = (_WORD *)v20;
        v24 = v11;
        do
        {
          *(v23 - 2) = *(v22 - 2);
          *(v23 - 1) = *(v22 - 1);
          *v23 = *v22;
          v23 = (_WORD *)((char *)result + (_QWORD)v23);
          v22 += v12;
          --v24;
        }
        while (v24);
        *(v23 - 2) = *(v22 - 2);
        *(v23 - 1) = *(v22 - 1);
        *v23 = *v22;
        v14 += v18;
        v15 += v17;
        ++v19;
        v20 += 2 * v17;
        v21 += v18;
      }
      while (v19 != v16);
    }
    for (; v11; --v11)
    {
      *v15 = *v14;
      v15[1] = v14[1];
      v15[2] = v14[2];
      v14 += v12;
      v15 += v13;
    }
    goto LABEL_24;
  }
  v5 = *(_OWORD *)(result + 1);
  v6 = *(_OWORD *)(result + 3);
  *(_QWORD *)(a1 + 40) = result[5];
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)result + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      result = (uint64_t *)((uint64_t (*)(__int128 *, uint64_t))off_24C3FC418[v7])(&v29, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return result;
    }
LABEL_10:
    *(_QWORD *)&v29 = a1 + 48;
    return (uint64_t *)((uint64_t (*)(__int128 *))off_24C3FCAD0[v8])(&v29);
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_10;
  return result;
}

uint64_t sub_20AFB9E9C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFB9ED8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 18
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFB9F78@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 18
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBA120(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC438[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBA1A0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC438[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBA234()
{
  return 19;
}

uint64_t (***sub_20AFBA23C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBA290@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB348;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC448[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBA348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC438[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFBA39C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  _QWORD v14[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FBFE8, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 19);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB57A8((uint64_t)v12, a1);
    v14[0] = v13;
    v14[1] = v12;
    sub_20AFE98D0(v14);
    return;
  }
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))off_24C3FC438[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    ((void (*)(_OWORD *))off_24C3FCAE0[v8])(v13);
    return;
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
}

uint64_t sub_20AFBA4EC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBA528@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 19
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBA5C8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 19
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBA770(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC458[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBA7F0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC458[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBA884()
{
  return 20;
}

uint64_t (***sub_20AFBA88C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBA8E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB3C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC468[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBA998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC458[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

float sub_20AFBA9EC(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  _QWORD v27[2];
  int v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC000, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 == -1)
    {
      if ((_DWORD)v8 == -1)
        return *(float *)&v5;
    }
    else if ((_DWORD)v8 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C3FC458[v7])(&v31, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return *(float *)&v5;
    }
    *(_QWORD *)&v31 = a1 + 48;
    ((void (*)(__int128 *))off_24C3FCAF0[v8])(&v31);
    return *(float *)&v5;
  }
  (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v27, lpsrc, 20);
  v10 = *(_OWORD *)(v27[0] + 16);
  v9 = *(_OWORD *)(v27[0] + 32);
  v31 = *(_OWORD *)v27[0];
  v32 = v10;
  v33 = v9;
  v27[0] = 0;
  MEMORY[0x20BD3583C]();
  sub_20AFB57A8((uint64_t)v27, a1);
  v34[0] = (uint64_t)&v31;
  v34[1] = (uint64_t)v27;
  if (DWORD1(v32) == 1 && v28 == 1)
  {
    sub_20AFC9A3C(v34);
    return *(float *)&v5;
  }
  if (DWORD2(v31) && HIDWORD(v31) && (_DWORD)v32)
  {
    v11 = HIDWORD(v31) - 1;
    v12 = DWORD2(v32);
    v13 = v29;
    v14 = (_DWORD *)v31;
    v15 = (_DWORD *)v27[0];
    v16 = v32 - 1;
    if ((_DWORD)v32 != 1)
    {
      v17 = v30;
      v18 = HIDWORD(v32);
      if (HIDWORD(v31) == 1)
      {
        do
        {
          *v15 = *v14;
          v15[1] = v14[1];
          v15[2] = v14[2];
          v14 += v18;
          v15 += v17;
          --v16;
        }
        while (v16);
LABEL_24:
        *v15 = *v14;
        v15[1] = v14[1];
        LODWORD(v5) = v14[2];
        v15[2] = v5;
        return *(float *)&v5;
      }
      v19 = 0;
      v20 = 4 * v29;
      v21 = v27[0] + 8;
      v22 = (_DWORD *)(v31 + 8);
      do
      {
        v23 = v22;
        v24 = (_DWORD *)v21;
        v25 = v11;
        do
        {
          *(v24 - 2) = *(v23 - 2);
          *(v24 - 1) = *(v23 - 1);
          *v24 = *v23;
          v24 = (_DWORD *)((char *)v24 + v20);
          v23 += v12;
          --v25;
        }
        while (v25);
        *(v24 - 2) = *(v23 - 2);
        *(v24 - 1) = *(v23 - 1);
        *v24 = *v23;
        v14 += v18;
        v15 += v17;
        ++v19;
        v21 += 4 * v17;
        v22 += v18;
      }
      while (v19 != v16);
    }
    for (; v11; --v11)
    {
      *v15 = *v14;
      v15[1] = v14[1];
      v15[2] = v14[2];
      v14 += v12;
      v15 += v13;
    }
    goto LABEL_24;
  }
  return *(float *)&v5;
}

uint64_t sub_20AFBACAC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBACE8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 20
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBAD88@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 20
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBAF30(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC478[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBAFB0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC478[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBB044()
{
  return 21;
}

uint64_t (***sub_20AFBB04C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBB0A0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB448;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC488[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBB158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC478[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

size_t *sub_20AFBB1AC(uint64_t a1, void *lpsrc)
{
  size_t *result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  size_t *v21;
  _BYTE *v22;
  int v23;
  _QWORD v24[2];
  int v25;
  unsigned int v26;
  unsigned int v27;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  size_t v31[2];

  result = (size_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC018, 0);
  if (result)
  {
    v5 = *(_OWORD *)(result + 1);
    v6 = *(_OWORD *)(result + 3);
    *(_QWORD *)(a1 + 40) = result[5];
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)result + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        result = (size_t *)((uint64_t (*)(__int128 *, uint64_t))off_24C3FC478[v7])(&v28, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return result;
      }
LABEL_10:
      *(_QWORD *)&v28 = a1 + 48;
      return (size_t *)((uint64_t (*)(__int128 *))off_24C3FCB00[v8])(&v28);
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v24, lpsrc, 21);
    v10 = *(_OWORD *)(v24[0] + 16);
    v9 = *(_OWORD *)(v24[0] + 32);
    v28 = *(_OWORD *)v24[0];
    v29 = v10;
    v30 = v9;
    v24[0] = 0;
    MEMORY[0x20BD3583C]();
    result = (size_t *)sub_20AFB57A8((uint64_t)v24, a1);
    v31[0] = (size_t)&v28;
    v31[1] = (size_t)v24;
    if (DWORD1(v29) == 1 && v25 == 1)
    {
      return sub_20AFE5D88(v31);
    }
    else if (DWORD2(v28) && HIDWORD(v28) && (_DWORD)v29)
    {
      v11 = HIDWORD(v28) - 1;
      v12 = DWORD2(v29);
      v13 = v26;
      v14 = (_BYTE *)v28;
      v15 = (_BYTE *)v24[0];
      v16 = v29 - 1;
      if ((_DWORD)v29 != 1)
      {
        v17 = v27;
        v18 = HIDWORD(v29);
        if (HIDWORD(v28) == 1)
        {
          do
          {
            *v15 = *v14;
            v15[1] = v14[1];
            v15[2] = v14[2];
            v14 += v18;
            v15 += v17;
            --v16;
          }
          while (v16);
        }
        else
        {
          v19 = 0;
          v20 = v24[0] + 2;
          result = (size_t *)(v28 + 2);
          do
          {
            v21 = result;
            v22 = (_BYTE *)v20;
            v23 = v11;
            do
            {
              *(v22 - 2) = *((_BYTE *)v21 - 2);
              *(v22 - 1) = *((_BYTE *)v21 - 1);
              *v22 = *(_BYTE *)v21;
              v22 += v13;
              v21 = (size_t *)((char *)v21 + v12);
              --v23;
            }
            while (v23);
            *(v22 - 2) = *((_BYTE *)v21 - 2);
            *(v22 - 1) = *((_BYTE *)v21 - 1);
            *v22 = *(_BYTE *)v21;
            v14 += v18;
            v15 += v17;
            ++v19;
            v20 += v17;
            result = (size_t *)((char *)result + v18);
          }
          while (v19 != v16);
        }
      }
      for (; v11; --v11)
      {
        *v15 = *v14;
        v15[1] = v14[1];
        v15[2] = v14[2];
        v14 += v12;
        v15 += v13;
      }
      *v15 = *v14;
      v15[1] = v14[1];
      v15[2] = v14[2];
    }
  }
  return result;
}

uint64_t sub_20AFBB44C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBB488@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 21
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBB528@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 21
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBB6D0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC498[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBB750(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC498[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBB7E4()
{
  return 22;
}

uint64_t (***sub_20AFBB7EC())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBB840@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB4C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC4A8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBB8F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC498[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFBB94C(uint64_t a1, void *lpsrc)
{
  uint64_t *result;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  _WORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  _WORD *v23;
  int v24;
  _QWORD v25[2];
  int v26;
  unsigned int v27;
  unsigned int v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  uint64_t v32[2];

  result = (uint64_t *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC030, 0);
  if (!result)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v25, lpsrc, 22);
    v10 = *(_OWORD *)(v25[0] + 16);
    v9 = *(_OWORD *)(v25[0] + 32);
    v29 = *(_OWORD *)v25[0];
    v30 = v10;
    v31 = v9;
    v25[0] = 0;
    MEMORY[0x20BD3583C]();
    result = (uint64_t *)sub_20AFB57A8((uint64_t)v25, a1);
    v32[0] = (uint64_t)&v29;
    v32[1] = (uint64_t)v25;
    if (DWORD1(v30) == 1 && v26 == 1)
      return sub_20AFC7BE4(v32);
    if (!DWORD2(v29) || !HIDWORD(v29) || !(_DWORD)v30)
      return result;
    v11 = HIDWORD(v29) - 1;
    v12 = DWORD2(v30);
    v13 = v27;
    v14 = (_WORD *)v29;
    v15 = (_WORD *)v25[0];
    v16 = v30 - 1;
    if ((_DWORD)v30 != 1)
    {
      v17 = v28;
      v18 = HIDWORD(v30);
      if (HIDWORD(v29) == 1)
      {
        do
        {
          *v15 = *v14;
          v15[1] = v14[1];
          v15[2] = v14[2];
          v14 += v18;
          v15 += v17;
          --v16;
        }
        while (v16);
LABEL_24:
        *v15 = *v14;
        v15[1] = v14[1];
        v15[2] = v14[2];
        return result;
      }
      v19 = 0;
      result = (uint64_t *)(2 * v27);
      v20 = v25[0] + 4;
      v21 = (_WORD *)(v29 + 4);
      do
      {
        v22 = v21;
        v23 = (_WORD *)v20;
        v24 = v11;
        do
        {
          *(v23 - 2) = *(v22 - 2);
          *(v23 - 1) = *(v22 - 1);
          *v23 = *v22;
          v23 = (_WORD *)((char *)result + (_QWORD)v23);
          v22 += v12;
          --v24;
        }
        while (v24);
        *(v23 - 2) = *(v22 - 2);
        *(v23 - 1) = *(v22 - 1);
        *v23 = *v22;
        v14 += v18;
        v15 += v17;
        ++v19;
        v20 += 2 * v17;
        v21 += v18;
      }
      while (v19 != v16);
    }
    for (; v11; --v11)
    {
      *v15 = *v14;
      v15[1] = v14[1];
      v15[2] = v14[2];
      v14 += v12;
      v15 += v13;
    }
    goto LABEL_24;
  }
  v5 = *(_OWORD *)(result + 1);
  v6 = *(_OWORD *)(result + 3);
  *(_QWORD *)(a1 + 40) = result[5];
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)result + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      result = (uint64_t *)((uint64_t (*)(__int128 *, uint64_t))off_24C3FC498[v7])(&v29, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return result;
    }
LABEL_10:
    *(_QWORD *)&v29 = a1 + 48;
    return (uint64_t *)((uint64_t (*)(__int128 *))off_24C3FCB10[v8])(&v29);
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_10;
  return result;
}

uint64_t sub_20AFBBC0C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBBC48@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 22
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBBCE8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 22
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBBE90(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC4B8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBBF10(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC4B8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBBFA4()
{
  return 23;
}

uint64_t (***sub_20AFBBFAC())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBC000@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB548;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC4C8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBC0B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC4B8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFBC10C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  _QWORD v14[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC048, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 23);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB57A8((uint64_t)v12, a1);
    v14[0] = v13;
    v14[1] = v12;
    sub_20AFE98D0(v14);
    return;
  }
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))off_24C3FC4B8[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    ((void (*)(_OWORD *))off_24C3FCB20[v8])(v13);
    return;
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
}

uint64_t sub_20AFBC25C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBC298@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 23
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBC338@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 23
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBC4E0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC4D8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBC560(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC4D8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBC5F4()
{
  return 24;
}

uint64_t (***sub_20AFBC5FC())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBC650@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB5C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC4E8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBC708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC4D8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

float sub_20AFBC75C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  _DWORD *v14;
  _DWORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  int v25;
  _QWORD v27[2];
  int v28;
  unsigned int v29;
  unsigned int v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  uint64_t v34[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC060, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 == -1)
    {
      if ((_DWORD)v8 == -1)
        return *(float *)&v5;
    }
    else if ((_DWORD)v8 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C3FC4D8[v7])(&v31, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return *(float *)&v5;
    }
    *(_QWORD *)&v31 = a1 + 48;
    ((void (*)(__int128 *))off_24C3FCB30[v8])(&v31);
    return *(float *)&v5;
  }
  (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v27, lpsrc, 24);
  v10 = *(_OWORD *)(v27[0] + 16);
  v9 = *(_OWORD *)(v27[0] + 32);
  v31 = *(_OWORD *)v27[0];
  v32 = v10;
  v33 = v9;
  v27[0] = 0;
  MEMORY[0x20BD3583C]();
  sub_20AFB57A8((uint64_t)v27, a1);
  v34[0] = (uint64_t)&v31;
  v34[1] = (uint64_t)v27;
  if (DWORD1(v32) == 1 && v28 == 1)
  {
    sub_20AFC9A3C(v34);
    return *(float *)&v5;
  }
  if (DWORD2(v31) && HIDWORD(v31) && (_DWORD)v32)
  {
    v11 = HIDWORD(v31) - 1;
    v12 = DWORD2(v32);
    v13 = v29;
    v14 = (_DWORD *)v31;
    v15 = (_DWORD *)v27[0];
    v16 = v32 - 1;
    if ((_DWORD)v32 != 1)
    {
      v17 = v30;
      v18 = HIDWORD(v32);
      if (HIDWORD(v31) == 1)
      {
        do
        {
          *v15 = *v14;
          v15[1] = v14[1];
          v15[2] = v14[2];
          v14 += v18;
          v15 += v17;
          --v16;
        }
        while (v16);
LABEL_24:
        *v15 = *v14;
        v15[1] = v14[1];
        LODWORD(v5) = v14[2];
        v15[2] = v5;
        return *(float *)&v5;
      }
      v19 = 0;
      v20 = 4 * v29;
      v21 = v27[0] + 8;
      v22 = (_DWORD *)(v31 + 8);
      do
      {
        v23 = v22;
        v24 = (_DWORD *)v21;
        v25 = v11;
        do
        {
          *(v24 - 2) = *(v23 - 2);
          *(v24 - 1) = *(v23 - 1);
          *v24 = *v23;
          v24 = (_DWORD *)((char *)v24 + v20);
          v23 += v12;
          --v25;
        }
        while (v25);
        *(v24 - 2) = *(v23 - 2);
        *(v24 - 1) = *(v23 - 1);
        *v24 = *v23;
        v14 += v18;
        v15 += v17;
        ++v19;
        v21 += 4 * v17;
        v22 += v18;
      }
      while (v19 != v16);
    }
    for (; v11; --v11)
    {
      *v15 = *v14;
      v15[1] = v14[1];
      v15[2] = v14[2];
      v14 += v12;
      v15 += v13;
    }
    goto LABEL_24;
  }
  return *(float *)&v5;
}

uint64_t sub_20AFBCA1C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBCA58@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 24
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB57A8((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBCAF8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 24
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 3;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBCCA0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC4F8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBCD20(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC4F8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBCDB4()
{
  return 25;
}

uint64_t (***sub_20AFBCDBC())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBCE10@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB648;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC508[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBCEC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC4F8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFBCF1C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  size_t v17[2];
  char v18;
  char *v19;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC078, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        ((void (*)(__int128 *, uint64_t))off_24C3FC4F8[v7])(&v14, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
LABEL_10:
      *(_QWORD *)&v14 = a1 + 48;
      ((void (*)(__int128 *))off_24C3FCB40[v8])(&v14);
      return;
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 25);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v14 = *(_OWORD *)v12[0];
    v15 = v11;
    v16 = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v17[0] = (size_t)&v14;
    v17[1] = (size_t)v12;
    if (DWORD1(v15) == 1 && v13 == 1)
    {
      sub_20AFE5D88(v17);
    }
    else
    {
      v18 = 0;
      if (DWORD2(v14) && HIDWORD(v14))
      {
        if ((_DWORD)v15)
        {
          v19 = &v18;
          sub_20AFEA3E0((uint64_t)&v19, (uint64_t)&v14, (uint64_t)v12);
        }
      }
    }
  }
}

uint64_t sub_20AFBD0CC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBD108@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 25
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBD1A8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 25
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBD350(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC518[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBD3D0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC518[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBD464()
{
  return 26;
}

uint64_t (***sub_20AFBD46C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBD4C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB6C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC528[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBD578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC518[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFBD5CC(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17[2];
  char v18;
  char *v19;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC090, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        ((void (*)(__int128 *, uint64_t))off_24C3FC518[v7])(&v14, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
LABEL_10:
      *(_QWORD *)&v14 = a1 + 48;
      ((void (*)(__int128 *))off_24C3FCB50[v8])(&v14);
      return;
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 26);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v14 = *(_OWORD *)v12[0];
    v15 = v11;
    v16 = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v17[0] = (uint64_t)&v14;
    v17[1] = (uint64_t)v12;
    if (DWORD1(v15) == 1 && v13 == 1)
    {
      sub_20AFC7BE4(v17);
    }
    else
    {
      v18 = 0;
      if (DWORD2(v14) && HIDWORD(v14))
      {
        if ((_DWORD)v15)
        {
          v19 = &v18;
          sub_20AFEA8F4((uint64_t)&v19, (uint64_t)&v14, (uint64_t)v12);
        }
      }
    }
  }
}

uint64_t sub_20AFBD77C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBD7B8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 26
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBD858@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 26
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBDA00(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC538[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBDA80(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC538[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBDB14()
{
  return 27;
}

uint64_t (***sub_20AFBDB1C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBDB70@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB748;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC548[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBDC28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC538[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFBDC7C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  _QWORD v14[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC0A8, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 27);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v14[0] = v13;
    v14[1] = v12;
    sub_20AFEAE58(v14);
    return;
  }
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))off_24C3FC538[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    ((void (*)(_OWORD *))off_24C3FCB60[v8])(v13);
    return;
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
}

uint64_t sub_20AFBDDCC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBDE08@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 27
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBDEA8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 27
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBE050(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC558[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBE0D0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC558[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBE164()
{
  return 28;
}

uint64_t (***sub_20AFBE16C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBE1C0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB7C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC568[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBE278(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC558[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

float sub_20AFBE2CC(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[2];
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18[2];
  char v19;
  char *v20;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC0C0, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 == -1)
    {
      if ((_DWORD)v8 == -1)
        return *(float *)&v5;
    }
    else if ((_DWORD)v8 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C3FC558[v7])(&v15, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return *(float *)&v5;
    }
    *(_QWORD *)&v15 = a1 + 48;
    ((void (*)(__int128 *))off_24C3FCB70[v8])(&v15);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v13, lpsrc, 28);
    v9 = v13[0];
    v11 = *(_OWORD *)(v13[0] + 16);
    v10 = *(_OWORD *)(v13[0] + 32);
    v15 = *(_OWORD *)v13[0];
    v16 = v11;
    v17 = v10;
    v13[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v13, a1);
    v18[0] = (uint64_t)&v15;
    v18[1] = (uint64_t)v13;
    if (DWORD1(v16) == 1 && v14 == 1)
    {
      sub_20AFC9A3C(v18);
    }
    else
    {
      v19 = 0;
      if (DWORD2(v15) && HIDWORD(v15) && (_DWORD)v16)
      {
        v20 = &v19;
        *(float *)&v5 = sub_20AFEB5FC((uint64_t)&v20, (uint64_t)&v15, (uint64_t)v13);
      }
    }
  }
  return *(float *)&v5;
}

uint64_t sub_20AFBE47C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBE4B8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 28
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBE558@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 28
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBE700(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC578[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBE780(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC578[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBE814()
{
  return 29;
}

uint64_t (***sub_20AFBE81C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBE870@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB848;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC588[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBE928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC578[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFBE97C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  size_t v17[2];
  char v18;
  char *v19;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC0D8, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        ((void (*)(__int128 *, uint64_t))off_24C3FC578[v7])(&v14, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
LABEL_10:
      *(_QWORD *)&v14 = a1 + 48;
      ((void (*)(__int128 *))off_24C3FCB80[v8])(&v14);
      return;
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 29);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v14 = *(_OWORD *)v12[0];
    v15 = v11;
    v16 = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v17[0] = (size_t)&v14;
    v17[1] = (size_t)v12;
    if (DWORD1(v15) == 1 && v13 == 1)
    {
      sub_20AFE5D88(v17);
    }
    else
    {
      v18 = 0;
      if (DWORD2(v14) && HIDWORD(v14))
      {
        if ((_DWORD)v15)
        {
          v19 = &v18;
          sub_20AFEA3E0((uint64_t)&v19, (uint64_t)&v14, (uint64_t)v12);
        }
      }
    }
  }
}

uint64_t sub_20AFBEB2C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBEB68@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 29
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBEC08@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 29
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBEDB0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC598[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBEE30(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC598[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBEEC4()
{
  return 30;
}

uint64_t (***sub_20AFBEECC())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBEF20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB8C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC5A8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBEFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC598[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFBF02C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17[2];
  char v18;
  char *v19;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC0F0, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        ((void (*)(__int128 *, uint64_t))off_24C3FC598[v7])(&v14, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
LABEL_10:
      *(_QWORD *)&v14 = a1 + 48;
      ((void (*)(__int128 *))off_24C3FCB90[v8])(&v14);
      return;
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 30);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v14 = *(_OWORD *)v12[0];
    v15 = v11;
    v16 = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v17[0] = (uint64_t)&v14;
    v17[1] = (uint64_t)v12;
    if (DWORD1(v15) == 1 && v13 == 1)
    {
      sub_20AFC7BE4(v17);
    }
    else
    {
      v18 = 0;
      if (DWORD2(v14) && HIDWORD(v14))
      {
        if ((_DWORD)v15)
        {
          v19 = &v18;
          sub_20AFEA8F4((uint64_t)&v19, (uint64_t)&v14, (uint64_t)v12);
        }
      }
    }
  }
}

uint64_t sub_20AFBF1DC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBF218@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 30
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBF2B8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 30
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBF460(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC5B8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBF4E0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC5B8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBF574()
{
  return 31;
}

uint64_t (***sub_20AFBF57C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBF5D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB948;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC5C8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBF688(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC5B8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFBF6DC(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  _QWORD v14[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC108, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 31);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v14[0] = v13;
    v14[1] = v12;
    sub_20AFEAE58(v14);
    return;
  }
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))off_24C3FC5B8[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    ((void (*)(_OWORD *))off_24C3FCBA0[v8])(v13);
    return;
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
}

uint64_t sub_20AFBF82C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBF868@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 31
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBF908@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 31
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFBFAB0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC5D8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFBFB30(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC5D8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFBFBC4()
{
  return 32;
}

uint64_t (***sub_20AFBFBCC())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFBFC20@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FB9C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC5E8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFBFCD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC5D8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

float sub_20AFBFD2C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[2];
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18[2];
  char v19;
  char *v20;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC120, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 == -1)
    {
      if ((_DWORD)v8 == -1)
        return *(float *)&v5;
    }
    else if ((_DWORD)v8 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C3FC5D8[v7])(&v15, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return *(float *)&v5;
    }
    *(_QWORD *)&v15 = a1 + 48;
    ((void (*)(__int128 *))off_24C3FCBB0[v8])(&v15);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v13, lpsrc, 32);
    v9 = v13[0];
    v11 = *(_OWORD *)(v13[0] + 16);
    v10 = *(_OWORD *)(v13[0] + 32);
    v15 = *(_OWORD *)v13[0];
    v16 = v11;
    v17 = v10;
    v13[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v13, a1);
    v18[0] = (uint64_t)&v15;
    v18[1] = (uint64_t)v13;
    if (DWORD1(v16) == 1 && v14 == 1)
    {
      sub_20AFC9A3C(v18);
    }
    else
    {
      v19 = 0;
      if (DWORD2(v15) && HIDWORD(v15) && (_DWORD)v16)
      {
        v20 = &v19;
        *(float *)&v5 = sub_20AFEB5FC((uint64_t)&v20, (uint64_t)&v15, (uint64_t)v13);
      }
    }
  }
  return *(float *)&v5;
}

uint64_t sub_20AFBFEDC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFBFF18@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 32
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFBFFB8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 32
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFC0160(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC5F8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFC01E0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC5F8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFC0274()
{
  return 33;
}

uint64_t (***sub_20AFC027C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFC02D0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FBA48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC608[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFC0388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC5F8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFC03DC(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  size_t v17[2];
  char v18;
  char *v19;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC138, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        ((void (*)(__int128 *, uint64_t))off_24C3FC5F8[v7])(&v14, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
LABEL_10:
      *(_QWORD *)&v14 = a1 + 48;
      ((void (*)(__int128 *))off_24C3FCBC0[v8])(&v14);
      return;
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 33);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v14 = *(_OWORD *)v12[0];
    v15 = v11;
    v16 = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v17[0] = (size_t)&v14;
    v17[1] = (size_t)v12;
    if (DWORD1(v15) == 1 && v13 == 1)
    {
      sub_20AFE5D88(v17);
    }
    else
    {
      v18 = 0;
      if (DWORD2(v14) && HIDWORD(v14))
      {
        if ((_DWORD)v15)
        {
          v19 = &v18;
          sub_20AFEA3E0((uint64_t)&v19, (uint64_t)&v14, (uint64_t)v12);
        }
      }
    }
  }
}

uint64_t sub_20AFC058C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFC05C8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 33
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFC0668@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 33
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFC0810(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC618[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFC0890(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC618[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFC0924()
{
  return 34;
}

uint64_t (***sub_20AFC092C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFC0980@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FBAC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC628[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFC0A38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC618[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFC0A8C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17[2];
  char v18;
  char *v19;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC150, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        ((void (*)(__int128 *, uint64_t))off_24C3FC618[v7])(&v14, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
LABEL_10:
      *(_QWORD *)&v14 = a1 + 48;
      ((void (*)(__int128 *))off_24C3FCBD0[v8])(&v14);
      return;
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 34);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v14 = *(_OWORD *)v12[0];
    v15 = v11;
    v16 = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v17[0] = (uint64_t)&v14;
    v17[1] = (uint64_t)v12;
    if (DWORD1(v15) == 1 && v13 == 1)
    {
      sub_20AFC7BE4(v17);
    }
    else
    {
      v18 = 0;
      if (DWORD2(v14) && HIDWORD(v14))
      {
        if ((_DWORD)v15)
        {
          v19 = &v18;
          sub_20AFEA8F4((uint64_t)&v19, (uint64_t)&v14, (uint64_t)v12);
        }
      }
    }
  }
}

uint64_t sub_20AFC0C3C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFC0C78@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 34
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFC0D18@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 34
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFC0EC0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC638[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFC0F40(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC638[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFC0FD4()
{
  return 35;
}

uint64_t (***sub_20AFC0FDC())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFC1030@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FBB48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC648[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFC10E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC638[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFC113C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  _QWORD v14[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC168, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 35);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v14[0] = v13;
    v14[1] = v12;
    sub_20AFEAE58(v14);
    return;
  }
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))off_24C3FC638[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    ((void (*)(_OWORD *))off_24C3FCBE0[v8])(v13);
    return;
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
}

uint64_t sub_20AFC128C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFC12C8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 35
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFC1368@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 35
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFC1510(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC658[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFC1590(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC658[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFC1624()
{
  return 36;
}

uint64_t (***sub_20AFC162C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFC1680@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FBBC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC668[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFC1738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC658[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

float sub_20AFC178C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[2];
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18[2];
  char v19;
  char *v20;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC180, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 == -1)
    {
      if ((_DWORD)v8 == -1)
        return *(float *)&v5;
    }
    else if ((_DWORD)v8 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C3FC658[v7])(&v15, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return *(float *)&v5;
    }
    *(_QWORD *)&v15 = a1 + 48;
    ((void (*)(__int128 *))off_24C3FCBF0[v8])(&v15);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v13, lpsrc, 36);
    v9 = v13[0];
    v11 = *(_OWORD *)(v13[0] + 16);
    v10 = *(_OWORD *)(v13[0] + 32);
    v15 = *(_OWORD *)v13[0];
    v16 = v11;
    v17 = v10;
    v13[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v13, a1);
    v18[0] = (uint64_t)&v15;
    v18[1] = (uint64_t)v13;
    if (DWORD1(v16) == 1 && v14 == 1)
    {
      sub_20AFC9A3C(v18);
    }
    else
    {
      v19 = 0;
      if (DWORD2(v15) && HIDWORD(v15) && (_DWORD)v16)
      {
        v20 = &v19;
        *(float *)&v5 = sub_20AFEB5FC((uint64_t)&v20, (uint64_t)&v15, (uint64_t)v13);
      }
    }
  }
  return *(float *)&v5;
}

uint64_t sub_20AFC193C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFC1978@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 36
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFC1A18@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 36
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFC1BC0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC678[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFC1C40(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC678[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFC1CD4()
{
  return 37;
}

uint64_t (***sub_20AFC1CDC())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFC1D30@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FBC48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC688[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFC1DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC678[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFC1E3C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  size_t v17[2];
  char v18;
  char *v19;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC198, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        ((void (*)(__int128 *, uint64_t))off_24C3FC678[v7])(&v14, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
LABEL_10:
      *(_QWORD *)&v14 = a1 + 48;
      ((void (*)(__int128 *))off_24C3FCC00[v8])(&v14);
      return;
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 37);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v14 = *(_OWORD *)v12[0];
    v15 = v11;
    v16 = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v17[0] = (size_t)&v14;
    v17[1] = (size_t)v12;
    if (DWORD1(v15) == 1 && v13 == 1)
    {
      sub_20AFE5D88(v17);
    }
    else
    {
      v18 = 0;
      if (DWORD2(v14) && HIDWORD(v14))
      {
        if ((_DWORD)v15)
        {
          v19 = &v18;
          sub_20AFEA3E0((uint64_t)&v19, (uint64_t)&v14, (uint64_t)v12);
        }
      }
    }
  }
}

uint64_t sub_20AFC1FEC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFC2028@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 37
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFC20C8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 37
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFC2270(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC698[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFC22F0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC698[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFC2384()
{
  return 38;
}

uint64_t (***sub_20AFC238C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFC23E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FBCC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC6A8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFC2498(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC698[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFC24EC(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[2];
  int v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17[2];
  char v18;
  char *v19;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC1B0, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 != -1)
    {
      if ((_DWORD)v8 == -1)
      {
        ((void (*)(__int128 *, uint64_t))off_24C3FC698[v7])(&v14, a1 + 48);
        *(_DWORD *)(a1 + 160) = -1;
        return;
      }
LABEL_10:
      *(_QWORD *)&v14 = a1 + 48;
      ((void (*)(__int128 *))off_24C3FCC10[v8])(&v14);
      return;
    }
    if ((_DWORD)v8 != -1)
      goto LABEL_10;
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 38);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v14 = *(_OWORD *)v12[0];
    v15 = v11;
    v16 = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v17[0] = (uint64_t)&v14;
    v17[1] = (uint64_t)v12;
    if (DWORD1(v15) == 1 && v13 == 1)
    {
      sub_20AFC7BE4(v17);
    }
    else
    {
      v18 = 0;
      if (DWORD2(v14) && HIDWORD(v14))
      {
        if ((_DWORD)v15)
        {
          v19 = &v18;
          sub_20AFEA8F4((uint64_t)&v19, (uint64_t)&v14, (uint64_t)v12);
        }
      }
    }
  }
}

uint64_t sub_20AFC269C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFC26D8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 38
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFC2778@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 38
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFC2920(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC6B8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFC29A0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC6B8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFC2A34()
{
  return 39;
}

uint64_t (***sub_20AFC2A3C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFC2A90@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FBD48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC6C8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFC2B48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC6B8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

void sub_20AFC2B9C(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v12[6];
  _OWORD v13[3];
  _QWORD v14[2];

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC1C8, 0);
  if (!v4)
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v12, lpsrc, 39);
    v9 = v12[0];
    v11 = *(_OWORD *)(v12[0] + 16);
    v10 = *(_OWORD *)(v12[0] + 32);
    v13[0] = *(_OWORD *)v12[0];
    v13[1] = v11;
    v13[2] = v10;
    v12[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v12, a1);
    v14[0] = v13;
    v14[1] = v12;
    sub_20AFEAE58(v14);
    return;
  }
  v5 = *(_OWORD *)(v4 + 8);
  v6 = *(_OWORD *)(v4 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
  *(_OWORD *)(a1 + 24) = v6;
  *(_OWORD *)(a1 + 8) = v5;
  v7 = *(unsigned int *)(a1 + 160);
  v8 = *((unsigned int *)v4 + 40);
  if ((_DWORD)v7 != -1)
  {
    if ((_DWORD)v8 == -1)
    {
      ((void (*)(_OWORD *, uint64_t))off_24C3FC6B8[v7])(v13, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return;
    }
LABEL_8:
    *(_QWORD *)&v13[0] = a1 + 48;
    ((void (*)(_OWORD *))off_24C3FCC20[v8])(v13);
    return;
  }
  if ((_DWORD)v8 != -1)
    goto LABEL_8;
}

uint64_t sub_20AFC2CEC(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFC2D28@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 39
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFC2DC8@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 39
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

uint64_t sub_20AFC2F70(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC6D8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return a1;
}

uint64_t sub_20AFC2FF0(uint64_t a1)
{
  void (*v2)(_QWORD, _QWORD);
  char v4;

  LODWORD(v2) = *(_DWORD *)(a1 + 160);
  if ((_DWORD)v2)
  {
    if ((_DWORD)v2 == -1)
      goto LABEL_7;
    goto LABEL_6;
  }
  v2 = *(void (**)(_QWORD, _QWORD))(a1 + 64);
  if (!v2 || (v2(*(_QWORD *)(a1 + 56), *(_QWORD *)(a1 + 48)), LODWORD(v2) = *(_DWORD *)(a1 + 160), (_DWORD)v2 != -1))
LABEL_6:
    ((void (*)(char *, uint64_t))off_24C3FC6D8[v2])(&v4, a1 + 48);
LABEL_7:
  *(_DWORD *)(a1 + 160) = -1;
  return MEMORY[0x20BD3583C](a1, 0x1093C40699DA9F5);
}

uint64_t sub_20AFC3084()
{
  return 40;
}

uint64_t (***sub_20AFC308C())()
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463AE08);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AE08))
    return &off_253EC3180;
  __cxa_guard_release(&qword_25463AE08);
  return &off_253EC3180;
}

uint64_t sub_20AFC30E0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  char v7[2];

  result = operator new();
  v5 = result;
  *(_QWORD *)result = off_24C3FBDC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(result + 24) = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(result + 40) = *(_QWORD *)(a1 + 40);
  *(_BYTE *)(result + 48) = 0;
  *(_DWORD *)(result + 160) = -1;
  v6 = *(unsigned int *)(a1 + 160);
  if ((_DWORD)v6 != -1)
  {
    result = ((uint64_t (*)(char *, uint64_t, uint64_t))off_24C3FC6E8[v6])(v7, result + 48, a1 + 48);
    *(_DWORD *)(v5 + 160) = v6;
  }
  *a2 = v5;
  return result;
}

void sub_20AFC3198(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;

  v16 = *(unsigned int *)(v13 + 160);
  if ((_DWORD)v16 != -1)
    ((void (*)(char *, uint64_t))off_24C3FC6D8[v16])(&a13, v14);
  *(_DWORD *)(v13 + 160) = -1;
  MEMORY[0x20BD3583C](v13, 0x1093C40699DA9F5);
  _Unwind_Resume(a1);
}

float sub_20AFC31EC(uint64_t a1, void *lpsrc)
{
  char *v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  _QWORD v13[2];
  int v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18[2];
  char v19;
  char *v20;

  v4 = (char *)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C41DF08, (const struct __class_type_info *)&unk_24C3FC1E0, 0);
  if (v4)
  {
    v5 = *(_OWORD *)(v4 + 8);
    v6 = *(_OWORD *)(v4 + 24);
    *(_QWORD *)(a1 + 40) = *((_QWORD *)v4 + 5);
    *(_OWORD *)(a1 + 24) = v6;
    *(_OWORD *)(a1 + 8) = v5;
    v7 = *(unsigned int *)(a1 + 160);
    v8 = *((unsigned int *)v4 + 40);
    if ((_DWORD)v7 == -1)
    {
      if ((_DWORD)v8 == -1)
        return *(float *)&v5;
    }
    else if ((_DWORD)v8 == -1)
    {
      ((void (*)(__int128 *, uint64_t))off_24C3FC6D8[v7])(&v15, a1 + 48);
      *(_DWORD *)(a1 + 160) = -1;
      return *(float *)&v5;
    }
    *(_QWORD *)&v15 = a1 + 48;
    ((void (*)(__int128 *))off_24C3FCC30[v8])(&v15);
  }
  else
  {
    (*(void (**)(_QWORD *__return_ptr, void *, uint64_t))(*(_QWORD *)lpsrc + 72))(v13, lpsrc, 40);
    v9 = v13[0];
    v11 = *(_OWORD *)(v13[0] + 16);
    v10 = *(_OWORD *)(v13[0] + 32);
    v15 = *(_OWORD *)v13[0];
    v16 = v11;
    v17 = v10;
    v13[0] = 0;
    MEMORY[0x20BD3583C](v9);
    sub_20AFB763C((uint64_t)v13, a1);
    v18[0] = (uint64_t)&v15;
    v18[1] = (uint64_t)v13;
    if (DWORD1(v16) == 1 && v14 == 1)
    {
      sub_20AFC9A3C(v18);
    }
    else
    {
      v19 = 0;
      if (DWORD2(v15) && HIDWORD(v15) && (_DWORD)v16)
      {
        v20 = &v19;
        *(float *)&v5 = sub_20AFEB5FC((uint64_t)&v20, (uint64_t)&v15, (uint64_t)v13);
      }
    }
  }
  return *(float *)&v5;
}

uint64_t sub_20AFC339C(uint64_t a1)
{
  int v1;

  v1 = *(_DWORD *)(a1 + 160);
  if (v1 == 1)
    return *(_QWORD *)(a1 + 120);
  if (v1)
    sub_20AECFAB8();
  return *(_QWORD *)(a1 + 48);
}

double sub_20AFC33D8@<D0>(uint64_t a1@<X0>, int a2@<W1>, _QWORD *a3@<X8>)
{
  _OWORD *v5;
  __int128 v6;
  double result;
  _OWORD v8[2];
  __int128 v9;

  if (a2 != 40
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 102, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFB763C((uint64_t)v8, a1);
  v5 = (_OWORD *)operator new();
  v6 = v8[1];
  *v5 = v8[0];
  v5[1] = v6;
  result = *(double *)&v9;
  v5[2] = v9;
  *a3 = v5;
  return result;
}

uint64_t sub_20AFC3478@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  int v5;
  uint64_t *v6;
  uint64_t v7;
  BOOL v8;
  BOOL v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a2 != 40
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/VL/VisualLogger/src/ExternalBuffer.cpp", 108, (uint64_t)"F == format", 11, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_18;
  }
  v5 = *(_DWORD *)(a1 + 160);
  if (v5 == 1)
  {
    v6 = (uint64_t *)(a1 + 120);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    v6 = (uint64_t *)(a1 + 48);
  }
  v7 = *v6;
  v8 = !*(_DWORD *)(a1 + 16) || *(_DWORD *)(a1 + 12) == 0;
  v9 = v8 || *(_DWORD *)(a1 + 8) == 0;
  v10 = *(_QWORD *)(a1 + 12);
  if (v9)
    v10 = 0;
  LODWORD(v16) = 4;
  HIDWORD(v16) = v10;
  v15 = v10;
  v11 = *(_QWORD *)(a1 + 24);
  v12 = v16;
  v13 = HIDWORD(v10);
  LODWORD(v17) = 1;
  HIDWORD(v17) = v11;
  if (HIDWORD(v11) * HIDWORD(v10) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
LABEL_18:
    abort();
  }
  result = operator new();
  *(_QWORD *)result = v7;
  *(_QWORD *)(result + 8) = v12;
  *(_DWORD *)(result + 16) = v13;
  *(_QWORD *)(result + 20) = v17;
  *(_DWORD *)(result + 28) = HIDWORD(v11);
  *(_QWORD *)(result + 32) = v15;
  *(_QWORD *)(result + 40) = v11;
  *a3 = result;
  return result;
}

const char *sub_20AFC361C()
{
  return "{unknown buffer type}";
}

void sub_20AFC3630(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_20AFC3638()
{
  return 0;
}

uint64_t sub_20AFC3640()
{
  return 1;
}

__int128 *sub_20AFC364C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632BD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254632BD8))
  {
    v2 = sub_20AFC3724();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254632BC0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254632BD0 = *((_QWORD *)v2 + 2);
      xmmword_254632BC0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632BC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632BD8);
  }
  if (byte_254632BD7 >= 0)
    return &xmmword_254632BC0;
  else
    return (__int128 *)xmmword_254632BC0;
}

void sub_20AFC370C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632BD8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFC3724()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632BF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632BF8))
    return &xmmword_254632BE0;
  v2 = sub_20AFC3800();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254632BE0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254632BF0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254632BE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632BE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632BF8);
  return &xmmword_254632BE0;
}

void sub_20AFC37E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632BF8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFC3800()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632C18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632C18))
    return &stru_254632C00;
  sub_20AFC3A18((uint64_t)__p);
  sub_20AFC38F0((char *)__p, &stru_254632C00);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632C00, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632C18);
  return &stru_254632C00;
}

void sub_20AFC38B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632C18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632C18);
  _Unwind_Resume(a1);
}

void sub_20AFC38F0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF8595C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFC39EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFC3A18(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254632C38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254632C38))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray8u>]", qword_254632C20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632C20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632C38);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254632C58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254632C58))
  {
    v5 = sub_20AED4780(qword_254632C20, "<", 0);
    sub_20AED467C(qword_254632C20, 0, v5, qword_254632C40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632C40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632C58);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254632C78);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254632C78))
  {
    sub_20B531658((uint64_t)qword_254632C40, (uint64_t)&xmmword_254632C60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632C60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632C78);
  }
  if (byte_254632C77 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254632C60, *((unint64_t *)&xmmword_254632C60 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254632C60;
    *(_QWORD *)(a1 + 16) = unk_254632C70;
  }
}

void sub_20AFC3BB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632C78);
  _Unwind_Resume(a1);
}

void sub_20AFC3BCC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632C58);
  _Unwind_Resume(a1);
}

void sub_20AFC3BE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632C38);
  _Unwind_Resume(a1);
}

void sub_20AFC3C00(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 48);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 48) = 0;
}

__n128 sub_20AFC3C2C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFC3C40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;

  *(_QWORD *)a2 = &off_24C3FCC50;
  v3 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC3C68(a2 + 40, a3 + 40);
}

uint64_t sub_20AFC3C68(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  void *v11;
  void *v12;
  _QWORD v14[3];
  void *memptr[3];
  size_t v16[2];

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr[0] = 0;
    v6 = malloc_type_posix_memalign(memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_20B525948(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = memptr[0];
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  if (*(_DWORD *)(a2 + 28))
    v7 = *(_DWORD *)(a2 + 24) == 0;
  else
    v7 = 1;
  v8 = *(_QWORD *)(a2 + 32);
  if (v7)
    v9 = 0;
  else
    v9 = *(_QWORD *)(a2 + 24);
  v14[0] = *(_QWORD *)(a2 + 8);
  v14[1] = v9;
  v14[2] = v8;
  if (HIDWORD(v9) * HIDWORD(v8) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_24;
  }
  if ((_DWORD)v9 && HIDWORD(v9))
  {
    if (*(_DWORD *)(a1 + 28))
      v10 = *(_DWORD *)(a1 + 24) == 0;
    else
      v10 = 1;
    v12 = *(void **)(a1 + 24);
    v11 = *(void **)(a1 + 32);
    if (v10)
      v12 = 0;
    memptr[0] = *(void **)(a1 + 8);
    memptr[1] = v12;
    memptr[2] = v11;
    if (HIDWORD(v12) * HIDWORD(v11) != -1
      || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      v16[0] = (size_t)v14;
      v16[1] = (size_t)memptr;
      sub_20AFC3DF8(v16);
      return a1;
    }
LABEL_24:
    abort();
  }
  return a1;
}

void sub_20AFC3DDC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

size_t *sub_20AFC3DF8(size_t *result)
{
  size_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  size_t *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int i;
  int v16;
  char *v17;
  int v18;
  unsigned int v19;
  size_t v20;
  char *v21;
  BOOL v22;
  BOOL v23;
  size_t v24;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 16);
  v4 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v18 = *(_DWORD *)(v1 + 20);
    if (v18 == *(_DWORD *)(v2 + 20))
    {
      v19 = *(_DWORD *)(v1 + 8);
      if (v18 == v19)
      {
        v20 = (*(_DWORD *)(v1 + 12) * v18);
        v21 = *(char **)v1;
        if ((_DWORD)v20)
          v22 = v21 == 0;
        else
          v22 = 0;
        if (v22)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            abort();
          }
        }
        else if (!(_DWORD)v20)
        {
          return result;
        }
        return (size_t *)memmove(*(void **)v2, v21, v20);
      }
    }
    else
    {
      v19 = *(_DWORD *)(v1 + 8);
    }
    v24 = v19;
    if (v19)
      v23 = *(_DWORD *)(v1 + 12) == 0;
    else
      v23 = 1;
    if (!v23)
      return sub_20AFC3FBC(&v24, (char **)v1, (char **)v2);
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 8);
    v7 = *(_DWORD *)(v1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)v1;
      v11 = *(size_t **)v2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(v2 + 20);
        v14 = *(unsigned int *)(v1 + 20);
        if (v9)
        {
          for (i = 0; i != v12; ++i)
          {
            v16 = v9;
            v17 = v10;
            result = v11;
            do
            {
              *(_BYTE *)result = *v17;
              v17 += v3;
              result = (size_t *)((char *)result + v4);
              --v16;
            }
            while (v16);
            *(_BYTE *)result = *v17;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
          }
        }
        else
        {
          do
          {
            *(_BYTE *)v11 = *v10;
            v10 += v14;
            v11 = (size_t *)((char *)v11 + v13);
            --v12;
          }
          while (v12);
        }
      }
      for (; v9; --v9)
      {
        *(_BYTE *)v11 = *v10;
        v10 += v3;
        v11 = (size_t *)((char *)v11 + v4);
      }
      *(_BYTE *)v11 = *v10;
    }
  }
  return result;
}

size_t *sub_20AFC3FBC(size_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  size_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = *((unsigned int *)a3 + 5);
      v10 = *((unsigned int *)a2 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (size_t *)memmove(v7, v6, v11);
LABEL_11:
        v6 += v10;
        v7 += v9;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_19:
        abort();
      }
      return (size_t *)memmove(v7, v6, v12);
    }
    if (v12)
      return (size_t *)memmove(v7, v6, v12);
  }
  return result;
}

uint64_t sub_20AFC4108()
{
  return 2;
}

__int128 *sub_20AFC4114()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632C98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254632C98))
  {
    v2 = sub_20AFC41EC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254632C80, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254632C90 = *((_QWORD *)v2 + 2);
      xmmword_254632C80 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632C80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632C98);
  }
  if (byte_254632C97 >= 0)
    return &xmmword_254632C80;
  else
    return (__int128 *)xmmword_254632C80;
}

void sub_20AFC41D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632C98);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFC41EC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632CB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632CB8))
    return &xmmword_254632CA0;
  v2 = sub_20AFC42C8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254632CA0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254632CB0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254632CA0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632CA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632CB8);
  return &xmmword_254632CA0;
}

void sub_20AFC42B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632CB8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFC42C8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632CD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632CD8))
    return &stru_254632CC0;
  sub_20AFC44E0((uint64_t)__p);
  sub_20AFC43B8((char *)__p, &stru_254632CC0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632CC0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632CD8);
  return &stru_254632CC0;
}

void sub_20AFC4378(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632CD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632CD8);
  _Unwind_Resume(a1);
}

void sub_20AFC43B8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF87E08();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFC44B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFC44E0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254632CF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254632CF8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray16u>]", qword_254632CE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632CE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632CF8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254632D18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254632D18))
  {
    v5 = sub_20AED4780(qword_254632CE0, "<", 0);
    sub_20AED467C(qword_254632CE0, 0, v5, qword_254632D00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632D00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632D18);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254632D38);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254632D38))
  {
    sub_20B531658((uint64_t)qword_254632D00, (uint64_t)&xmmword_254632D20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632D20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632D38);
  }
  if (byte_254632D37 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254632D20, *((unint64_t *)&xmmword_254632D20 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254632D20;
    *(_QWORD *)(a1 + 16) = unk_254632D30;
  }
}

void sub_20AFC467C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632D38);
  _Unwind_Resume(a1);
}

void sub_20AFC4694(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632D18);
  _Unwind_Resume(a1);
}

void sub_20AFC46AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632CF8);
  _Unwind_Resume(a1);
}

void sub_20AFC46C4()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFC46DC(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 48);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 48) = 0;
}

__n128 sub_20AFC4708(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFC471C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;

  *(_QWORD *)a2 = &off_24C3FCCD0;
  v3 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC4744(a2 + 40, a3 + 40);
}

uint64_t sub_20AFC4744(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  void *v12;
  uint64_t v14[3];
  void *memptr[3];

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr[0] = 0;
    v6 = malloc_type_posix_memalign(memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_20B525948(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = memptr[0];
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 28))
    v8 = *(_DWORD *)(a2 + 24) == 0;
  else
    v8 = 1;
  if (v8)
    v9 = 0;
  else
    v9 = *(_QWORD *)(a2 + 24);
  v14[0] = *(_QWORD *)(a2 + 8);
  v14[1] = v9;
  v14[2] = (v7 >> 1) & 0x7FFFFFFF7FFFFFFFLL;
  if (HIDWORD(v9) * (v7 >> 33) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_24;
  }
  if ((_DWORD)v9 && HIDWORD(v9))
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 28))
      v11 = *(_DWORD *)(a1 + 24) == 0;
    else
      v11 = 1;
    v12 = *(void **)(a1 + 24);
    if (v11)
      v12 = 0;
    memptr[0] = *(void **)(a1 + 8);
    memptr[1] = v12;
    memptr[2] = (void *)((v10 >> 1) & 0x7FFFFFFF7FFFFFFFLL);
    if (HIDWORD(v12) * (v10 >> 33) != -1
      || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      sub_20AFC48E4(v14, (uint64_t)memptr);
      return a1;
    }
LABEL_24:
    abort();
  }
  return a1;
}

void sub_20AFC48C8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20AFC48E4(uint64_t *result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _WORD *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v26;
  uint64_t v27;
  char *v28;
  BOOL v29;
  uint64_t v30;

  v3 = *((unsigned int *)result + 4);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v23 = *((_DWORD *)result + 5);
    v24 = *((_DWORD *)result + 2);
    if (v23 == *(_DWORD *)(a2 + 20) && v23 == v24)
    {
      v27 = (*((_DWORD *)result + 3) * v23);
      v28 = (char *)*result;
      if ((_DWORD)v27)
        v29 = v28 == 0;
      else
        v29 = 0;
      if (v29)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
      }
      else if (!(_DWORD)v27)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)a2, v28, 2 * v27);
    }
    v30 = *((unsigned int *)result + 2);
    if (v24)
      v26 = *((_DWORD *)result + 3) == 0;
    else
      v26 = 1;
    if (!v26)
      return sub_20AFC4AC0(&v30, (char **)result, (char **)a2);
  }
  else
  {
    v6 = *((_DWORD *)result + 2);
    v7 = *((_DWORD *)result + 3);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = (char *)*result;
      v11 = *(_WORD **)a2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(a2 + 20);
        v14 = *((unsigned int *)result + 5);
        if (!v9)
        {
          do
          {
            *v11 = *(_WORD *)v10;
            v10 += 2 * v14;
            v11 += v13;
            --v12;
          }
          while (v12);
LABEL_38:
          *v11 = *(_WORD *)v10;
          return result;
        }
        v15 = 0;
        v16 = 2 * v14;
        v17 = 2 * v13;
        result = (uint64_t *)(2 * v4);
        do
        {
          v18 = v11;
          v19 = v10;
          v20 = v9;
          do
          {
            *v18 = *(_WORD *)v19;
            v19 += 2 * v3;
            v18 = (_WORD *)((char *)result + (_QWORD)v18);
            --v20;
          }
          while (v20);
          *v18 = *(_WORD *)v19;
          v10 += v16;
          v11 = (_WORD *)((char *)v11 + v17);
          ++v15;
        }
        while (v15 != v12);
      }
      if (v9)
      {
        v21 = 2 * v3;
        v22 = 2 * v4;
        do
        {
          *v11 = *(_WORD *)v10;
          v10 += v21;
          v11 = (_WORD *)((char *)v11 + v22);
          --v9;
        }
        while (v9);
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t *sub_20AFC4AC0(uint64_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = 2 * *((unsigned int *)a2 + 5);
      v10 = 2 * *((unsigned int *)a3 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (uint64_t *)memmove(v7, v6, 2 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_19:
        abort();
      }
      return (uint64_t *)memmove(v7, v6, 2 * v12);
    }
    if (v12)
      return (uint64_t *)memmove(v7, v6, 2 * v12);
  }
  return result;
}

uint64_t sub_20AFC4C14()
{
  return 3;
}

__int128 *sub_20AFC4C20()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632D58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254632D58))
  {
    v2 = sub_20AFC4CF8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254632D40, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254632D50 = *((_QWORD *)v2 + 2);
      xmmword_254632D40 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632D40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632D58);
  }
  if (byte_254632D57 >= 0)
    return &xmmword_254632D40;
  else
    return (__int128 *)xmmword_254632D40;
}

void sub_20AFC4CE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632D58);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFC4CF8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632D78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632D78))
    return &xmmword_254632D60;
  v2 = sub_20AFC4DD4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254632D60, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254632D70 = v2->__r_.__value_.__r.__words[2];
    xmmword_254632D60 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632D60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632D78);
  return &xmmword_254632D60;
}

void sub_20AFC4DBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632D78);
  _Unwind_Resume(a1);
}

std::string *sub_20AFC4DD4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632D98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632D98))
    return &stru_254632D80;
  sub_20AFC4FEC((uint64_t)__p);
  sub_20AFC4EC4((char *)__p, &stru_254632D80);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632D80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632D98);
  return &stru_254632D80;
}

void sub_20AFC4E84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632D98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632D98);
  _Unwind_Resume(a1);
}

void sub_20AFC4EC4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF88FFC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFC4FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFC4FEC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254632DB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254632DB8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray16f>]", qword_254632DA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632DA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632DB8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254632DD8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254632DD8))
  {
    v5 = sub_20AED4780(qword_254632DA0, "<", 0);
    sub_20AED467C(qword_254632DA0, 0, v5, qword_254632DC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632DC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632DD8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254632DF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254632DF8))
  {
    sub_20B531658((uint64_t)qword_254632DC0, (uint64_t)&xmmword_254632DE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632DE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632DF8);
  }
  if (byte_254632DF7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254632DE0, *((unint64_t *)&xmmword_254632DE0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254632DE0;
    *(_QWORD *)(a1 + 16) = unk_254632DF0;
  }
}

void sub_20AFC5188(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632DF8);
  _Unwind_Resume(a1);
}

void sub_20AFC51A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632DD8);
  _Unwind_Resume(a1);
}

void sub_20AFC51B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632DB8);
  _Unwind_Resume(a1);
}

void sub_20AFC51D4(uint64_t a1, uint64_t a2)
{
  void *v3;
  BOOL v4;
  int v5;

  v3 = *(void **)(a2 + 48);
  if (v3)
  {
    v4 = !*(_DWORD *)(a2 + 68) || *(_DWORD *)(a2 + 64) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a2 + 68);
    if (v5 * (*(_QWORD *)(a2 + 72) >> 33) != -1)
      goto LABEL_11;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(void **)(a2 + 48);
    if (v3)
LABEL_11:
      free(v3);
  }
  *(_QWORD *)(a2 + 48) = 0;
}

__n128 sub_20AFC526C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFC5280(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;

  *(_QWORD *)a2 = &off_24C3FCD50;
  v3 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC52A8(a2 + 40, a3 + 40);
}

uint64_t sub_20AFC52A8(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  void *v9;
  void *memptr[3];

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr[0] = 0;
    v6 = malloc_type_posix_memalign(memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_20B525948(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = memptr[0];
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 28))
    v8 = *(_DWORD *)(a2 + 24) == 0;
  else
    v8 = 1;
  v9 = *(void **)(a2 + 24);
  if (v8)
    v9 = 0;
  memptr[0] = *(void **)(a2 + 8);
  memptr[1] = v9;
  memptr[2] = (void *)((v7 >> 1) & 0x7FFFFFFF7FFFFFFFLL);
  if (HIDWORD(v9) * (v7 >> 33) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFC53CC(a1, (uint64_t)memptr);
  return a1;
}

void sub_20AFC53B0(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AFC53CC(uint64_t result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  _WORD *v6;
  unint64_t v7;
  BOOL v8;
  int v9;
  unint64_t v10;
  int v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  if (v2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v6 = *(_WORD **)(result + 8);
    v7 = *(_QWORD *)(result + 32);
    if (*(_DWORD *)(result + 28))
      v8 = *(_DWORD *)(result + 24) == 0;
    else
      v8 = 1;
    if (v8)
      v9 = 0;
    else
      v9 = *(_DWORD *)(result + 28);
    v10 = v7 >> 33;
    if (v9 * (v7 >> 33) == -1)
    {
      result = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360);
      if ((result & 1) != 0)
        abort();
      v2 = *(_DWORD *)(a2 + 8);
      v3 = *(_DWORD *)(a2 + 12);
    }
    if (v2 && v3)
    {
      v11 = v2 - 1;
      v12 = *(_WORD **)a2;
      v13 = 2 * *(unsigned int *)(a2 + 16);
      v14 = 2 * (v7 >> 1);
      v15 = v3 - 1;
      if (v15)
      {
        v16 = *(unsigned int *)(a2 + 20);
        if (v11)
        {
          v17 = 0;
          v18 = 2 * v16;
          do
          {
            v19 = v6;
            v20 = v12;
            LODWORD(result) = v11;
            do
            {
              *v19 = *v20;
              v20 = (_WORD *)((char *)v20 + v13);
              v19 = (_WORD *)((char *)v19 + v14);
              result = (result - 1);
            }
            while ((_DWORD)result);
            *v19 = *v20;
            v12 = (_WORD *)((char *)v12 + v18);
            v6 += v10;
            ++v17;
          }
          while (v17 != v15);
        }
        else
        {
          do
          {
            *v6 = *v12;
            v12 += v16;
            v6 += v10;
            --v15;
          }
          while (v15);
        }
      }
      for (; v11; --v11)
      {
        *v6 = *v12;
        v12 = (_WORD *)((char *)v12 + v13);
        v6 = (_WORD *)((char *)v6 + v14);
      }
      *v6 = *v12;
    }
  }
  return result;
}

uint64_t sub_20AFC5528()
{
  return 4;
}

__int128 *sub_20AFC5534()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632E18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254632E18))
  {
    v2 = sub_20AFC560C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254632E00, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254632E10 = *((_QWORD *)v2 + 2);
      xmmword_254632E00 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632E00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632E18);
  }
  if (byte_254632E17 >= 0)
    return &xmmword_254632E00;
  else
    return (__int128 *)xmmword_254632E00;
}

void sub_20AFC55F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632E18);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFC560C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632E38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632E38))
    return &xmmword_254632E20;
  v2 = sub_20AFC56E8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254632E20, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254632E30 = v2->__r_.__value_.__r.__words[2];
    xmmword_254632E20 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632E20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632E38);
  return &xmmword_254632E20;
}

void sub_20AFC56D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632E38);
  _Unwind_Resume(a1);
}

std::string *sub_20AFC56E8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632E58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632E58))
    return &stru_254632E40;
  sub_20AFC5900((uint64_t)__p);
  sub_20AFC57D8((char *)__p, &stru_254632E40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632E40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632E58);
  return &stru_254632E40;
}

void sub_20AFC5798(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632E58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632E58);
  _Unwind_Resume(a1);
}

void sub_20AFC57D8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF8A1F0();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFC58D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFC5900(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254632E78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254632E78))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Gray32f>]", qword_254632E60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632E60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632E78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254632E98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254632E98))
  {
    v5 = sub_20AED4780(qword_254632E60, "<", 0);
    sub_20AED467C(qword_254632E60, 0, v5, qword_254632E80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632E80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632E98);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254632EB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254632EB8))
  {
    sub_20B531658((uint64_t)qword_254632E80, (uint64_t)&xmmword_254632EA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632EA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632EB8);
  }
  if (byte_254632EB7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254632EA0, *((unint64_t *)&xmmword_254632EA0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254632EA0;
    *(_QWORD *)(a1 + 16) = unk_254632EB0;
  }
}

void sub_20AFC5A9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632EB8);
  _Unwind_Resume(a1);
}

void sub_20AFC5AB4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632E98);
  _Unwind_Resume(a1);
}

void sub_20AFC5ACC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632E78);
  _Unwind_Resume(a1);
}

void sub_20AFC5AE4()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFC5AFC(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 48);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 48) = 0;
}

__n128 sub_20AFC5B28(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFC5B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;

  *(_QWORD *)a2 = &off_24C3FCDD0;
  v3 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC5B64(a2 + 40, a3 + 40);
}

uint64_t sub_20AFC5B64(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  unint64_t v7;
  BOOL v8;
  uint64_t v9;
  unint64_t v10;
  BOOL v11;
  void *v12;
  _QWORD v14[3];
  void *memptr[3];

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr[0] = 0;
    v6 = malloc_type_posix_memalign(memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_20B525948(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = memptr[0];
  }
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  v7 = *(_QWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 28))
    v8 = *(_DWORD *)(a2 + 24) == 0;
  else
    v8 = 1;
  if (v8)
    v9 = 0;
  else
    v9 = *(_QWORD *)(a2 + 24);
  v14[0] = *(_QWORD *)(a2 + 8);
  v14[1] = v9;
  v14[2] = (v7 >> 2) & 0x3FFFFFFF3FFFFFFFLL;
  if (HIDWORD(v9) * (v7 >> 34) == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_24;
  }
  if ((_DWORD)v9 && HIDWORD(v9))
  {
    v10 = *(_QWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 28))
      v11 = *(_DWORD *)(a1 + 24) == 0;
    else
      v11 = 1;
    v12 = *(void **)(a1 + 24);
    if (v11)
      v12 = 0;
    memptr[0] = *(void **)(a1 + 8);
    memptr[1] = v12;
    memptr[2] = (void *)((v10 >> 2) & 0x3FFFFFFF3FFFFFFFLL);
    if (HIDWORD(v12) * (v10 >> 34) != -1
      || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      sub_20AFC5D04((uint64_t)v14, (uint64_t)memptr);
      return a1;
    }
LABEL_24:
    abort();
  }
  return a1;
}

void sub_20AFC5CE8(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

float sub_20AFC5D04(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  char *v10;
  _DWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  BOOL v26;
  float result;
  uint64_t v28;
  char *v29;
  BOOL v30;
  uint64_t v31;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(unsigned int *)(a2 + 16);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v23 = *(_DWORD *)(a1 + 20);
    v24 = *(_DWORD *)(a1 + 8);
    if (v23 == *(_DWORD *)(a2 + 20) && v23 == v24)
    {
      v28 = (*(_DWORD *)(a1 + 12) * v23);
      v29 = *(char **)a1;
      if ((_DWORD)v28)
        v30 = v29 == 0;
      else
        v30 = 0;
      if (v30)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
      }
      else if (!(_DWORD)v28)
      {
        return result;
      }
      memmove(*(void **)a2, v29, 4 * v28);
      return result;
    }
    v31 = *(unsigned int *)(a1 + 8);
    if (v24)
      v26 = *(_DWORD *)(a1 + 12) == 0;
    else
      v26 = 1;
    if (!v26)
      sub_20AFC5EE0(&v31, (char **)a1, (char **)a2);
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 12);
    if (v6)
      v8 = v7 == 0;
    else
      v8 = 1;
    if (!v8)
    {
      v9 = v6 - 1;
      v10 = *(char **)a1;
      v11 = *(_DWORD **)a2;
      v12 = v7 - 1;
      if (v12)
      {
        v13 = *(unsigned int *)(a2 + 20);
        v14 = *(unsigned int *)(a1 + 20);
        if (!v9)
        {
          do
          {
            *v11 = *(_DWORD *)v10;
            v10 += 4 * v14;
            v11 += v13;
            --v12;
          }
          while (v12);
LABEL_38:
          result = *(float *)v10;
          *v11 = *(_DWORD *)v10;
          return result;
        }
        v15 = 0;
        v16 = 4 * v14;
        v17 = 4 * v13;
        do
        {
          v18 = v11;
          v19 = v10;
          v20 = v9;
          do
          {
            *v18 = *(_DWORD *)v19;
            v19 += 4 * v3;
            v18 += v4;
            --v20;
          }
          while (v20);
          *v18 = *(_DWORD *)v19;
          v10 += v16;
          v11 = (_DWORD *)((char *)v11 + v17);
          ++v15;
        }
        while (v15 != v12);
      }
      if (v9)
      {
        v21 = 4 * v3;
        v22 = 4 * v4;
        do
        {
          *v11 = *(_DWORD *)v10;
          v10 += v21;
          v11 = (_DWORD *)((char *)v11 + v22);
          --v9;
        }
        while (v9);
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t *sub_20AFC5EE0(uint64_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *((_DWORD *)a2 + 3);
  if (*((_DWORD *)a2 + 2))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *a2;
    v7 = *a3;
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = 4 * *((unsigned int *)a2 + 5);
      v10 = 4 * *((unsigned int *)a3 + 5);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (uint64_t *)memmove(v7, v6, 4 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_19:
        abort();
      }
      return (uint64_t *)memmove(v7, v6, 4 * v12);
    }
    if (v12)
      return (uint64_t *)memmove(v7, v6, 4 * v12);
  }
  return result;
}

uint64_t sub_20AFC6034()
{
  return 5;
}

__int128 *sub_20AFC6040()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632ED8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254632ED8))
  {
    v2 = sub_20AFC6118();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254632EC0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254632ED0 = *((_QWORD *)v2 + 2);
      xmmword_254632EC0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632EC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632ED8);
  }
  if (byte_254632ED7 >= 0)
    return &xmmword_254632EC0;
  else
    return (__int128 *)xmmword_254632EC0;
}

void sub_20AFC6100(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632ED8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFC6118()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632EF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632EF8))
    return &xmmword_254632EE0;
  v2 = sub_20AFC61F4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254632EE0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254632EF0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254632EE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632EE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632EF8);
  return &xmmword_254632EE0;
}

void sub_20AFC61DC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632EF8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFC61F4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632F18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632F18))
    return &stru_254632F00;
  sub_20AFC640C((uint64_t)__p);
  sub_20AFC62E4((char *)__p, &stru_254632F00);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632F00, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632F18);
  return &stru_254632F00;
}

void sub_20AFC62A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632F18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632F18);
  _Unwind_Resume(a1);
}

void sub_20AFC62E4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF8B3EC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFC63E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFC640C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254632F38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254632F38))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two8u>]", qword_254632F20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632F20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632F38);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254632F58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254632F58))
  {
    v5 = sub_20AED4780(qword_254632F20, "<", 0);
    sub_20AED467C(qword_254632F20, 0, v5, qword_254632F40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632F40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632F58);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254632F78);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254632F78))
  {
    sub_20B531658((uint64_t)qword_254632F40, (uint64_t)&xmmword_254632F60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632F60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632F78);
  }
  if (byte_254632F77 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254632F60, *((unint64_t *)&xmmword_254632F60 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254632F60;
    *(_QWORD *)(a1 + 16) = unk_254632F70;
  }
}

void sub_20AFC65A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632F78);
  _Unwind_Resume(a1);
}

void sub_20AFC65C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632F58);
  _Unwind_Resume(a1);
}

void sub_20AFC65D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632F38);
  _Unwind_Resume(a1);
}

void sub_20AFC65F0()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFC6608(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFC6634(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFC6648(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FCE50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC6680(a2 + 64, a3 + 64);
}

uint64_t sub_20AFC6680(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  BOOL v12;
  BOOL v13;
  char v14;
  unint64_t v15;
  int v16;
  BOOL v17;
  char v18;
  uint64_t v19;
  int v20;
  int v21;
  BOOL v22;
  BOOL v23;
  void *v24;
  _QWORD v26[2];
  int v27;
  uint64_t v28;
  int v29;
  void *memptr[2];
  int v31;
  uint64_t v32;
  int v33;
  size_t v34[2];

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    memptr[0] = 0;
    v6 = malloc_type_posix_memalign(memptr, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_20B525948(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = memptr[0];
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_QWORD *)(a2 + 8);
  v9 = *(_QWORD *)(a2 + 36);
  v10 = *(_DWORD *)(a2 + 44);
  v11 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 24))
    v12 = *(_DWORD *)(a2 + 28) == 0;
  else
    v12 = 1;
  v13 = v12 || v11 == 0;
  v14 = v13;
  if (v13)
    v15 = 0;
  else
    v15 = *(_QWORD *)(a2 + 24);
  if (v13)
    v16 = 0;
  else
    v16 = v11;
  v26[0] = v8;
  v26[1] = v15;
  v27 = v16;
  v28 = v9;
  v29 = v10;
  if (v16 * v10 == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_41;
  }
  if (HIDWORD(v15))
    v17 = (_DWORD)v15 == 0;
  else
    v17 = 1;
  if (v17)
    v18 = 1;
  else
    v18 = v14;
  if ((v18 & 1) == 0)
  {
    v19 = *(_QWORD *)(a1 + 36);
    v20 = *(_DWORD *)(a1 + 44);
    v21 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 24))
      v22 = *(_DWORD *)(a1 + 28) == 0;
    else
      v22 = 1;
    v23 = v22 || v21 == 0;
    v24 = *(void **)(a1 + 24);
    if (v23)
    {
      v24 = 0;
      v21 = 0;
    }
    memptr[0] = *(void **)(a1 + 8);
    memptr[1] = v24;
    v31 = v21;
    v32 = v19;
    v33 = v20;
    if (v21 * v20 != -1
      || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      v34[0] = (size_t)v26;
      v34[1] = (size_t)memptr;
      sub_20AFC6850(v34);
      return a1;
    }
LABEL_41:
    abort();
  }
  return a1;
}

void sub_20AFC6834(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_20AFC6850(size_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  BOOL v4;
  int v6;
  unsigned int v7;
  BOOL v8;
  size_t v10;
  char v11;

  v1 = *a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v2 + 20) == 1)
  {
    v6 = *(_DWORD *)(v1 + 24);
    if (v6 == *(_DWORD *)(v2 + 24))
    {
      v7 = *(_DWORD *)(v1 + 8);
      if (v6 == v7)
      {
        sub_20AFC6900(a1);
        return;
      }
    }
    else
    {
      v7 = *(_DWORD *)(v1 + 8);
    }
    v10 = v7;
    if (v7)
      v8 = *(_DWORD *)(v1 + 12) == 0;
    else
      v8 = 1;
    if (!v8 && *(_DWORD *)(v1 + 16) != 0)
      sub_20AFC6B60(&v10, (char **)v1, (char **)v2);
  }
  else
  {
    v11 = 0;
    if (*(_DWORD *)(v1 + 8))
      v4 = *(_DWORD *)(v1 + 12) == 0;
    else
      v4 = 1;
    if (!v4 && *(_DWORD *)(v1 + 16) != 0)
      sub_20AFC6FBC((uint64_t)&v11, v1, v2);
  }
}

size_t *sub_20AFC6900(size_t *result)
{
  size_t v1;
  size_t v2;
  int v3;
  int v4;
  size_t v5;
  char *v6;
  BOOL v7;
  int v8;
  BOOL v9;
  size_t v11;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 28);
  v4 = *(_DWORD *)(*result + 12);
  if (v3 == *(_DWORD *)(v2 + 28) && v3 == *(_DWORD *)(v1 + 24) * v4)
  {
    v5 = (*(_DWORD *)(v1 + 8) * v4 * *(_DWORD *)(v1 + 16));
    v6 = *(char **)v1;
    if ((_DWORD)v5)
      v7 = v6 == 0;
    else
      v7 = 0;
    if (v7)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
    }
    else if (!(_DWORD)v5)
    {
      return result;
    }
    return (size_t *)memmove(*(void **)v2, v6, v5);
  }
  v8 = *(_DWORD *)(v1 + 8);
  v11 = (v8 * v4);
  if (v8)
    v9 = v4 == 0;
  else
    v9 = 1;
  if (!v9 && *(_DWORD *)(v1 + 16) != 0)
    return sub_20AFC6A0C(&v11, (char **)v1, (char **)v2);
  return result;
}

size_t *sub_20AFC6A0C(size_t *result, char **a2, char **a3)
{
  int v3;
  BOOL v4;
  size_t *v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;

  v3 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v4 = *((_DWORD *)a2 + 3) == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = result;
    v7 = *a2;
    v8 = *a3;
    v9 = v3 - 1;
    if (v3 != 1)
    {
      v10 = *((unsigned int *)a3 + 7);
      v11 = *((unsigned int *)a2 + 7);
      do
      {
        v12 = *v6;
        if (!v7 && v12)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_22;
          }
        }
        else if (!v12)
        {
          goto LABEL_14;
        }
        result = (size_t *)memmove(v8, v7, v12);
LABEL_14:
        v7 += v11;
        v8 += v10;
        --v9;
      }
      while (v9);
    }
    v13 = *v6;
    if (!v7 && v13)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_22:
        abort();
      }
      return (size_t *)memmove(v8, v7, v13);
    }
    if (v13)
      return (size_t *)memmove(v8, v7, v13);
  }
  return result;
}

size_t *sub_20AFC6B60(size_t *result, char **a2, char **a3)
{
  int v3;
  int v4;
  BOOL v5;
  size_t *v7;
  int v8;
  char *v9;
  char *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  size_t v17;
  unsigned __int8 v18;
  unsigned __int8 v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void (*v23)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  size_t v24;
  size_t v25;
  size_t v26;
  size_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char *v31;
  char *v32;
  int v33;
  uint64_t v34;
  uint64_t v35;

  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = result;
    v8 = v3 - 1;
    v35 = *((unsigned int *)a2 + 6);
    v34 = *((unsigned int *)a3 + 6);
    v9 = *a2;
    v10 = *a3;
    v33 = v4 - 1;
    if (v4 != 1)
    {
      v29 = *((unsigned int *)a3 + 7);
      v28 = *((unsigned int *)a2 + 7);
      if (v3 != 1)
      {
        v11 = 0;
        while (1)
        {
          v30 = v11;
          v12 = 0;
          v13 = v10;
          v14 = v9;
          v31 = v13;
          v32 = v9;
          v15 = v13;
          do
          {
            v16 = v14;
            v17 = *v7;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              sub_20B531CBC("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
              v18 = atomic_load((unsigned __int8 *)&qword_25463D258);
              if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_25463D258))
              {
                __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
                __cxa_guard_release(&qword_25463D258);
              }
              if (!byte_25463D248 || byte_25463D250)
              {
                v20 = qword_25463D220;
                v21 = qword_25463D228;
                while (v20 != v21)
                {
                  v23 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v20;
                  v22 = *(_QWORD *)(v20 + 8);
                  v20 += 16;
                  v23(v22, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v19 = atomic_load((unsigned __int8 *)&qword_25463D258);
              if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_25463D258))
              {
                __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
                __cxa_guard_release(&qword_25463D258);
              }
              if (!byte_25463D248)
                goto LABEL_59;
              qword_25463D238(unk_25463D240, "ptr != nullptr || size == 0", 27, "", 0);
            }
            result = (size_t *)memmove(v15, v16, v17);
LABEL_19:
            v14 = &v16[v35];
            v15 += v34;
            ++v12;
          }
          while (v12 != v8);
          v24 = *v7;
          if (!v16 && v24)
          {
            if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
LABEL_14:
              result = (size_t *)memmove(v15, v14, v24);
              goto LABEL_15;
            }
LABEL_59:
            abort();
          }
          if (v24)
            goto LABEL_14;
LABEL_15:
          v9 = &v32[v28];
          v10 = &v31[v29];
          v11 = v30 + 1;
          if (v30 + 1 == v33)
            goto LABEL_47;
        }
      }
      do
      {
        v25 = *v7;
        if (!v9 && v25)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_59;
          }
        }
        else if (!v25)
        {
          goto LABEL_42;
        }
        result = (size_t *)memmove(v10, v9, v25);
LABEL_42:
        v9 += v28;
        v10 += v29;
        --v33;
      }
      while (v33);
    }
LABEL_47:
    while (v8)
    {
      v26 = *v7;
      if (!v9 && v26)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_59;
        }
      }
      else if (!v26)
      {
        goto LABEL_51;
      }
      result = (size_t *)memmove(v10, v9, v26);
LABEL_51:
      v9 += v35;
      v10 += v34;
      --v8;
    }
    v27 = *v7;
    if (!v9 && v27)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_59;
      }
      return (size_t *)memmove(v10, v9, v27);
    }
    if (v27)
      return (size_t *)memmove(v10, v9, v27);
  }
  return result;
}

void sub_20AFC6FBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _BYTE *v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  _BYTE *v21;
  _BYTE *v22;
  int v23;
  _BYTE *v24;
  _BYTE *v25;
  int v26;
  int v27;
  _BYTE *v28;
  _BYTE *v29;
  int i;
  int v31;
  _BYTE *v32;
  _BYTE *v33;
  int j;
  int v35;
  _BYTE *v36;
  _BYTE *v37;

  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v3 - 1;
    v9 = v4 - 1;
    v10 = *(unsigned int *)(a2 + 20);
    v11 = *(unsigned int *)(a2 + 24);
    v12 = *(unsigned int *)(a3 + 20);
    v13 = *(unsigned int *)(a3 + 24);
    v14 = *(_BYTE **)a2;
    v15 = *(_BYTE **)a3;
    v16 = v5 - 1;
    if (v16)
    {
      v17 = *(unsigned int *)(a3 + 28);
      v18 = *(unsigned int *)(a2 + 28);
      if (v9)
      {
        v19 = 0;
        if (v8)
        {
          do
          {
            v20 = 0;
            v21 = v14;
            v22 = v15;
            do
            {
              v23 = v8;
              v24 = v21;
              v25 = v22;
              do
              {
                *v25 = *v24;
                v24 += v10;
                v25 += v12;
                --v23;
              }
              while (v23);
              *v25 = *v24;
              v21 += v11;
              v22 += v13;
              ++v20;
            }
            while (v20 != v9);
            v26 = v8;
            do
            {
              *v22 = *v21;
              v21 += v10;
              v22 += v12;
              --v26;
            }
            while (v26);
            *v22 = *v21;
            v14 += v18;
            v15 += v17;
            ++v19;
          }
          while (v19 != v16);
        }
        else
        {
          do
          {
            v27 = v9;
            v28 = v14;
            v29 = v15;
            do
            {
              *v29 = *v28;
              v28 += v11;
              v29 += v13;
              --v27;
            }
            while (v27);
            *v29 = *v28;
            v14 += v18;
            v15 += v17;
            ++v19;
          }
          while (v19 != v16);
        }
      }
      else if (v8)
      {
        for (i = 0; i != v16; ++i)
        {
          v31 = v8;
          v32 = v14;
          v33 = v15;
          do
          {
            *v33 = *v32;
            v32 += v10;
            v33 += v12;
            --v31;
          }
          while (v31);
          *v33 = *v32;
          v14 += v18;
          v15 += v17;
        }
      }
      else
      {
        do
        {
          *v15 = *v14;
          v14 += v18;
          v15 += v17;
          --v16;
        }
        while (v16);
      }
    }
    if (v9)
    {
      if (v8)
      {
        for (j = 0; j != v9; ++j)
        {
          v35 = v8;
          v36 = v14;
          v37 = v15;
          do
          {
            *v37 = *v36;
            v36 += v10;
            v37 += v12;
            --v35;
          }
          while (v35);
          *v37 = *v36;
          v14 += v11;
          v15 += v13;
        }
      }
      else
      {
        do
        {
          *v15 = *v14;
          v14 += v11;
          v15 += v13;
          --v9;
        }
        while (v9);
      }
    }
    for (; v8; --v8)
    {
      *v15 = *v14;
      v14 += v10;
      v15 += v12;
    }
    *v15 = *v14;
  }
}

uint64_t sub_20AFC71D0()
{
  return 6;
}

__int128 *sub_20AFC71DC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632F98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254632F98))
  {
    v2 = sub_20AFC72B4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254632F80, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254632F90 = *((_QWORD *)v2 + 2);
      xmmword_254632F80 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632F80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632F98);
  }
  if (byte_254632F97 >= 0)
    return &xmmword_254632F80;
  else
    return (__int128 *)xmmword_254632F80;
}

void sub_20AFC729C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632F98);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFC72B4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632FB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632FB8))
    return &xmmword_254632FA0;
  v2 = sub_20AFC7390();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254632FA0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254632FB0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254632FA0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254632FA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632FB8);
  return &xmmword_254632FA0;
}

void sub_20AFC7378(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632FB8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFC7390()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632FD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632FD8))
    return &stru_254632FC0;
  sub_20AFC75A8((uint64_t)__p);
  sub_20AFC7480((char *)__p, &stru_254632FC0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632FC0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632FD8);
  return &stru_254632FC0;
}

void sub_20AFC7440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632FD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632FD8);
  _Unwind_Resume(a1);
}

void sub_20AFC7480(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFC778C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFC757C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFC75A8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254632FF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254632FF8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two16u>]", qword_254632FE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254632FE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254632FF8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633018);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633018))
  {
    v5 = sub_20AED4780(qword_254632FE0, "<", 0);
    sub_20AED467C(qword_254632FE0, 0, v5, qword_254633000);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633000, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633018);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633038);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633038))
  {
    sub_20B531658((uint64_t)qword_254633000, (uint64_t)&xmmword_254633020);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633020, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633038);
  }
  if (byte_254633037 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633020, *((unint64_t *)&xmmword_254633020 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633020;
    *(_QWORD *)(a1 + 16) = unk_254633030;
  }
}

void sub_20AFC7744(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633038);
  _Unwind_Resume(a1);
}

void sub_20AFC775C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633018);
  _Unwind_Resume(a1);
}

void sub_20AFC7774(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254632FF8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFC778C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632898);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632898))
    return &stru_254632880;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Two16u]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632880);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632880, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632898);
  return &stru_254632880;
}

void sub_20AFC7844(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632898);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632898);
  _Unwind_Resume(a1);
}

void sub_20AFC7884()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFC789C(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFC78C8(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFC78DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FCED0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC7914(a2 + 64, a3 + 64);
}

uint64_t sub_20AFC7914(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  void *v15[2];
  int v16;
  uint64_t v17;
  int v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    v15[0] = 0;
    v6 = malloc_type_posix_memalign(v15, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_20B525948(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = v15[0];
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 24))
    v9 = *(_DWORD *)(a2 + 28) == 0;
  else
    v9 = 1;
  v10 = *(_DWORD *)(a2 + 44) >> 1;
  v11 = (*(_QWORD *)(a2 + 36) >> 1) & 0x7FFFFFFF7FFFFFFFLL;
  v12 = v9 || v8 == 0;
  v13 = *(void **)(a2 + 24);
  if (v12)
  {
    v13 = 0;
    v8 = 0;
  }
  v15[0] = *(void **)(a2 + 8);
  v15[1] = v13;
  v16 = v8;
  v17 = v11;
  v18 = v10;
  if (v8 * v10 == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFC7A54((uint64_t *)a1, v15);
  return a1;
}

void sub_20AFC7A38(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

uint64_t *sub_20AFC7A54(uint64_t *result, _DWORD *a2)
{
  BOOL v2;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15[2];

  if (a2[2])
    v2 = a2[3] == 0;
  else
    v2 = 1;
  if (!v2 && a2[4] != 0)
  {
    v5 = *((_DWORD *)result + 8);
    if (*((_DWORD *)result + 6))
      v6 = *((_DWORD *)result + 7) == 0;
    else
      v6 = 1;
    v7 = *((_DWORD *)result + 11) >> 1;
    v8 = (*(unint64_t *)((char *)result + 36) >> 1) & 0x7FFFFFFF7FFFFFFFLL;
    v9 = v6 || v5 == 0;
    v10 = result[3];
    if (v9)
    {
      v10 = 0;
      v5 = 0;
    }
    v11[0] = result[1];
    v11[1] = v10;
    v12 = v5;
    v13 = v8;
    v14 = v7;
    if (v5 * v7 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v15[0] = (uint64_t)a2;
    v15[1] = (uint64_t)v11;
    return sub_20AFC7B2C(v15);
  }
  return result;
}

uint64_t *sub_20AFC7B2C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  _WORD *v11;
  _WORD *v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  char v21;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 20);
  v4 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
    return sub_20AFC7BE4(result);
  v13 = 0;
  v7 = *(_DWORD *)(v1 + 8);
  v6 = *(_DWORD *)(v1 + 12);
  v8 = *(_DWORD *)(v1 + 16);
  if (v7)
    v9 = v6 == 0;
  else
    v9 = 1;
  if (!v9 && v8 != 0)
  {
    v14 = 0;
    v15 = v7 - 1;
    v16 = v3 | (v4 << 32);
    v17 = v6 - 1;
    v18 = *(unsigned int *)(v1 + 24) | ((unint64_t)*(unsigned int *)(v2 + 24) << 32);
    v19 = v8 - 1;
    v20 = *(unsigned int *)(v1 + 28) | ((unint64_t)*(unsigned int *)(v2 + 28) << 32);
    v11 = *(_WORD **)v1;
    v12 = *(_WORD **)v2;
    v21 = 0;
    return (uint64_t *)sub_20AFC82DC((unint64_t)&v14, (uint64_t)&v21, (uint64_t)&v13, v11, v12);
  }
  return result;
}

uint64_t *sub_20AFC7BE4(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 24);
  if (v3 == *(_DWORD *)(v2 + 24))
  {
    v4 = *(_DWORD *)(v1 + 8);
    if (v3 == *(_DWORD *)(v1 + 20) * v4)
    {
      v5 = *(_DWORD *)(v1 + 28);
      if (v5 != *(_DWORD *)(v2 + 28))
        return (uint64_t *)sub_20AFC7D18((_DWORD *)*result, (char **)v2);
      v6 = *(_DWORD *)(v1 + 12);
      if (v5 != v6 * v3)
        return (uint64_t *)sub_20AFC7D18((_DWORD *)*result, (char **)v2);
      v7 = v6 * v4 * *(_DWORD *)(v1 + 16);
      v8 = *(char **)v1;
      if ((_DWORD)v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      if (v9)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
      }
      else if (!(_DWORD)v7)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)v2, v8, 2 * v7);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 8);
  }
  v12 = v4;
  if (v4)
    v10 = *(_DWORD *)(v1 + 12) == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 16) != 0)
    return sub_20AFC7E6C(&v12, (char **)v1, (char **)v2);
  return result;
}

_DWORD *sub_20AFC7D18(_DWORD *result, char **a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = result[2];
  v3 = result[3];
  v4 = result[4];
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = (v3 * v2);
    v8 = *(char **)result;
    v9 = *a2;
    v10 = v4 - 1;
    if (v4 == 1)
    {
LABEL_17:
      if (!(_DWORD)v7 || v8)
      {
        if (!(_DWORD)v7)
          return result;
      }
      else if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_16;
      }
      return memmove(v9, v8, 2 * v7);
    }
    if ((_DWORD)v7)
    {
      v11 = 2 * result[7];
      v12 = 2 * *((unsigned int *)a2 + 7);
      while (v8
           || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        result = memmove(v9, v8, 2 * v7);
        v8 += v11;
        v9 += v12;
        if (!--v10)
          goto LABEL_17;
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_20AFC7E6C(uint64_t *result, char **a2, char **a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = result;
  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v43 = *((unsigned int *)a2 + 6);
    v8 = *((unsigned int *)a3 + 6);
    v9 = v4 - 1;
    v5 = v9 == 0;
    v41 = v9;
    v10 = *a2;
    if (!v5)
    {
      if (v3 != 1)
      {
        v11 = 0;
        v12 = (unsigned __int8 *)&qword_25463D258;
        v13 = *a3;
        v36 = *((unsigned int *)a2 + 7);
        v37 = *((unsigned int *)a3 + 7);
        v42 = v3 - 1;
        while (1)
        {
          v38 = v11;
          v14 = 0;
          v39 = v13;
          v40 = v10;
          v15 = v10;
          do
          {
            v16 = v15;
            v17 = *v44;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              v18 = v8;
              sub_20B531CBC("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
              v19 = atomic_load(v12);
              if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v12))
              {
                __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
                __cxa_guard_release((__guard *)v12);
              }
              v20 = v12;
              if (!byte_25463D248 || byte_25463D250)
              {
                v22 = qword_25463D220;
                v23 = qword_25463D228;
                while (v22 != v23)
                {
                  v25 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v22;
                  v24 = *(_QWORD *)(v22 + 8);
                  v22 += 16;
                  v25(v24, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v12 = v20;
              v21 = atomic_load(v20);
              if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)v20))
              {
                __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
                __cxa_guard_release((__guard *)v20);
              }
              if (!byte_25463D248)
                goto LABEL_52;
              v8 = v18;
              qword_25463D238(unk_25463D240, "ptr != nullptr || size == 0", 27, "", 0);
              v7 = v42;
            }
            result = (uint64_t *)memmove(v13, v16, 2 * v17);
LABEL_19:
            v15 = &v16[2 * v43];
            v13 += 2 * v8;
            ++v14;
          }
          while (v14 != v7);
          v26 = *v44;
          if (!v16 && v26)
          {
            if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
LABEL_14:
              result = (uint64_t *)memmove(v13, v15, 2 * v26);
              goto LABEL_15;
            }
LABEL_52:
            abort();
          }
          if (v26)
            goto LABEL_14;
LABEL_15:
          v10 = &v40[2 * v36];
          v13 = &v39[2 * v37];
          v11 = v38 + 1;
          if (v38 + 1 == v41)
            goto LABEL_40;
        }
      }
      v32 = 2 * *((unsigned int *)a2 + 7);
      v33 = 2 * *((unsigned int *)a3 + 7);
      v13 = *a3;
      while (1)
      {
        v34 = *v44;
        v35 = v10;
        if (!v10 && v34)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_52;
          }
        }
        else if (!v34)
        {
          goto LABEL_58;
        }
        result = (uint64_t *)memmove(v13, v35, 2 * v34);
LABEL_58:
        v10 = &v35[v32];
        v13 += v33;
        if (!--v41)
          goto LABEL_40;
      }
    }
    v13 = *a3;
LABEL_40:
    v27 = v13;
    v28 = v10;
    if (v7)
    {
      v29 = 2 * v8;
      do
      {
        v30 = *v44;
        if (!v28 && v30)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_52;
          }
        }
        else if (!v30)
        {
          goto LABEL_44;
        }
        result = (uint64_t *)memmove(v27, v28, 2 * v30);
LABEL_44:
        v28 += 2 * v43;
        v27 += v29;
        --v7;
      }
      while (v7);
    }
    v31 = *v44;
    if (!v28 && v31)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_52;
      }
      return (uint64_t *)memmove(v27, v28, 2 * v31);
    }
    if (v31)
      return (uint64_t *)memmove(v27, v28, 2 * v31);
  }
  return result;
}

unint64_t sub_20AFC82DC(unint64_t result, uint64_t a2, uint64_t a3, _WORD *a4, _WORD *a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _WORD *v19;
  _WORD *v20;
  int v21;
  _WORD *v22;
  _WORD *v23;
  _WORD *v24;
  _WORD *v25;
  _WORD *v26;
  _WORD *v27;
  _WORD *v28;
  _WORD *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _WORD *v37;
  _WORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _WORD *v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _WORD *v50;
  _WORD *v51;
  int v52;

  v5 = *(_DWORD *)(result + 32);
  v6 = *(_DWORD *)(result + 20);
  if (v5)
  {
    v7 = *(_DWORD *)(result + 8);
    v8 = *(unsigned int *)(result + 36);
    v9 = *(unsigned int *)(result + 40);
    if (v6)
    {
      v10 = *(unsigned int *)(result + 24);
      v11 = *(unsigned int *)(result + 28);
      if (!v7)
      {
        do
        {
          v50 = a5;
          v51 = a4;
          v52 = v6;
          do
          {
            *v50 = *v51;
            v51 += v10;
            v50 += v11;
            --v52;
          }
          while (v52);
          result = (unsigned __int16)*v51;
          *v50 = result;
          a4 += v8;
          a5 += v9;
          ++v7;
        }
        while (v7 != v5);
        goto LABEL_32;
      }
      v12 = 0;
      v13 = 2 * v8;
      v14 = v10;
      v15 = 2 * *(unsigned int *)(result + 12);
      v16 = 2 * v9;
      v17 = v11;
      v18 = 2 * *(unsigned int *)(result + 16);
      v19 = &a4[v14];
      v20 = &a5[v17];
      do
      {
        v21 = 0;
        v22 = v20;
        v23 = v19;
        v24 = a5;
        v25 = a4;
        do
        {
          v26 = v23;
          v27 = v22;
          v28 = v24;
          v29 = v25;
          v30 = v7;
          do
          {
            *v28 = *v29;
            v29 = (_WORD *)((char *)v29 + v15);
            v28 = (_WORD *)((char *)v28 + v18);
            --v30;
          }
          while (v30);
          *v28 = *v29;
          v25 = (_WORD *)((char *)v25 + v14 * 2);
          v24 = (_WORD *)((char *)v24 + v17 * 2);
          ++v21;
          v23 = &v26[v14];
          v22 = &v27[v17];
        }
        while (v21 != v6);
        v31 = v7;
        do
        {
          *v27 = *v26;
          v26 = (_WORD *)((char *)v26 + v15);
          v27 = (_WORD *)((char *)v27 + v18);
          --v31;
        }
        while (v31);
        *v27 = *v26;
        a4 = (_WORD *)((char *)a4 + v13);
        a5 = (_WORD *)((char *)a5 + v16);
        ++v12;
        v19 = (_WORD *)((char *)v19 + v13);
        v20 = (_WORD *)((char *)v20 + v16);
      }
      while (v12 != v5);
LABEL_14:
      v10 = *(unsigned int *)(result + 24);
      v11 = *(unsigned int *)(result + 28);
      if (v7)
      {
        v32 = 0;
        v33 = 2 * v10;
        v34 = 2 * *(unsigned int *)(result + 12);
        v35 = 2 * v11;
        v36 = 2 * *(unsigned int *)(result + 16);
        do
        {
          v37 = a5;
          v38 = a4;
          v39 = v7;
          do
          {
            *v37 = *v38;
            v38 = (_WORD *)((char *)v38 + v34);
            v37 = (_WORD *)((char *)v37 + v36);
            --v39;
          }
          while (v39);
          *v37 = *v38;
          a4 = (_WORD *)((char *)a4 + v33);
          a5 = (_WORD *)((char *)a5 + v35);
          ++v32;
        }
        while (v32 != v6);
        goto LABEL_25;
      }
      do
      {
LABEL_32:
        *a5 = *a4;
        a4 += v10;
        a5 += v11;
        --v6;
      }
      while (v6);
      goto LABEL_35;
    }
    if (!v7)
    {
      do
      {
        *a5 = *a4;
        a4 += v8;
        a5 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_35;
    }
    v40 = 0;
    v41 = 2 * v8;
    v42 = 2 * *(unsigned int *)(result + 12);
    v43 = 2 * v9;
    v44 = 2 * *(unsigned int *)(result + 16);
    do
    {
      v45 = a5;
      v46 = a4;
      v47 = v7;
      do
      {
        *v45 = *v46;
        v46 = (_WORD *)((char *)v46 + v42);
        v45 = (_WORD *)((char *)v45 + v44);
        --v47;
      }
      while (v47);
      *v45 = *v46;
      a4 = (_WORD *)((char *)a4 + v41);
      a5 = (_WORD *)((char *)a5 + v43);
      ++v40;
    }
    while (v40 != v5);
  }
  else
  {
    v7 = *(_DWORD *)(result + 8);
    if (v6)
      goto LABEL_14;
  }
LABEL_25:
  if (v7)
  {
    v48 = 2 * *(unsigned int *)(result + 12);
    v49 = 2 * *(unsigned int *)(result + 16);
    do
    {
      *a5 = *a4;
      a4 = (_WORD *)((char *)a4 + v48);
      a5 = (_WORD *)((char *)a5 + v49);
      --v7;
    }
    while (v7);
  }
LABEL_35:
  *a5 = *a4;
  return result;
}

uint64_t sub_20AFC857C()
{
  return 7;
}

__int128 *sub_20AFC8588()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633058);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633058))
  {
    v2 = sub_20AFC8660();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633040, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633050 = *((_QWORD *)v2 + 2);
      xmmword_254633040 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633040, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633058);
  }
  if (byte_254633057 >= 0)
    return &xmmword_254633040;
  else
    return (__int128 *)xmmword_254633040;
}

void sub_20AFC8648(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633058);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFC8660()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633078);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633078))
    return &xmmword_254633060;
  v2 = sub_20AFC873C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633060, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633070 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633060 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633060, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633078);
  return &xmmword_254633060;
}

void sub_20AFC8724(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633078);
  _Unwind_Resume(a1);
}

std::string *sub_20AFC873C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633098);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633098))
    return &stru_254633080;
  sub_20AFC8954((uint64_t)__p);
  sub_20AFC882C((char *)__p, &stru_254633080);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633080, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633098);
  return &stru_254633080;
}

void sub_20AFC87EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633098);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633098);
  _Unwind_Resume(a1);
}

void sub_20AFC882C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF8C668();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFC8928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFC8954(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546330B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546330B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two16f>]", qword_2546330A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546330A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546330B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546330D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546330D8))
  {
    v5 = sub_20AED4780(qword_2546330A0, "<", 0);
    sub_20AED467C(qword_2546330A0, 0, v5, qword_2546330C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546330C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546330D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546330F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546330F8))
  {
    sub_20B531658((uint64_t)qword_2546330C0, (uint64_t)&xmmword_2546330E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546330E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546330F8);
  }
  if (byte_2546330F7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546330E0, *((unint64_t *)&xmmword_2546330E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546330E0;
    *(_QWORD *)(a1 + 16) = unk_2546330F0;
  }
}

void sub_20AFC8AF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546330F8);
  _Unwind_Resume(a1);
}

void sub_20AFC8B08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546330D8);
  _Unwind_Resume(a1);
}

void sub_20AFC8B20(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546330B8);
  _Unwind_Resume(a1);
}

void sub_20AFC8B38()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFC8B50(uint64_t a1, uint64_t a2)
{
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v3 = *(void **)(a2 + 72);
  if (v3)
  {
    v4 = !*(_DWORD *)(a2 + 96) || *(_DWORD *)(a2 + 92) == 0;
    v5 = v4 || *(_DWORD *)(a2 + 88) == 0;
    v6 = v5 ? 0 : *(_DWORD *)(a2 + 96);
    if (v6 * (*(_DWORD *)(a2 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(void **)(a2 + 72);
    if (v3)
LABEL_14:
      free(v3);
  }
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFC8BF0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFC8C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FCF50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC8C3C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFC8C3C(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  void *v15[2];
  int v16;
  uint64_t v17;
  int v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    v15[0] = 0;
    v6 = malloc_type_posix_memalign(v15, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_20B525948(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = v15[0];
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 24))
    v9 = *(_DWORD *)(a2 + 28) == 0;
  else
    v9 = 1;
  v10 = *(_DWORD *)(a2 + 44) >> 1;
  v11 = (*(_QWORD *)(a2 + 36) >> 1) & 0x7FFFFFFF7FFFFFFFLL;
  v12 = v9 || v8 == 0;
  v13 = *(void **)(a2 + 24);
  if (v12)
  {
    v13 = 0;
    v8 = 0;
  }
  v15[0] = *(void **)(a2 + 8);
  v15[1] = v13;
  v16 = v8;
  v17 = v11;
  v18 = v10;
  if (v8 * v10 == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFC8D7C(a1, v15);
  return a1;
}

void sub_20AFC8D60(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_20AFC8D7C(uint64_t a1, _DWORD *a2)
{
  BOOL v2;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  char v11;
  _QWORD v12[2];
  int v13;
  uint64_t v14;
  int v15;

  if (a2[2])
    v2 = a2[3] == 0;
  else
    v2 = 1;
  if (!v2 && a2[4] != 0)
  {
    v5 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 24))
      v6 = *(_DWORD *)(a1 + 28) == 0;
    else
      v6 = 1;
    v7 = *(_DWORD *)(a1 + 44) >> 1;
    v8 = (*(_QWORD *)(a1 + 36) >> 1) & 0x7FFFFFFF7FFFFFFFLL;
    v9 = v6 || v5 == 0;
    v10 = *(_QWORD *)(a1 + 24);
    if (v9)
    {
      v10 = 0;
      v5 = 0;
    }
    v12[0] = *(_QWORD *)(a1 + 8);
    v12[1] = v10;
    v13 = v5;
    v14 = v8;
    v15 = v7;
    if (v5 * v7 != -1)
      goto LABEL_21;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    if (a2[2] && a2[3] && a2[4])
LABEL_21:
      sub_20AFC8E6C((uint64_t)&v11, (uint64_t)a2, (uint64_t)v12);
  }
}

void sub_20AFC8E6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _WORD *v14;
  _WORD *v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _WORD *v25;
  _WORD *v26;
  uint64_t v27;
  int v28;
  _WORD *v29;
  _WORD *v30;
  _WORD *v31;
  _WORD *v32;
  _WORD *v33;
  _WORD *v34;
  _WORD *v35;
  _WORD *v36;
  int v37;
  int v38;
  int v39;
  uint64_t v40;
  _WORD *v41;
  _WORD *v42;
  int v43;
  int v44;
  _WORD *v45;
  _WORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _WORD *v50;
  _WORD *v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;

  v3 = *(_DWORD *)(a2 + 8);
  v4 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  if (v3)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v3 - 1;
    v9 = v4 - 1;
    v10 = *(unsigned int *)(a2 + 20);
    v11 = *(unsigned int *)(a2 + 24);
    v12 = *(unsigned int *)(a3 + 20);
    v13 = *(unsigned int *)(a3 + 24);
    v14 = *(_WORD **)a2;
    v15 = *(_WORD **)a3;
    v16 = v5 - 1;
    if (v16)
    {
      v17 = *(unsigned int *)(a3 + 28);
      v18 = *(unsigned int *)(a2 + 28);
      if (v9)
      {
        v19 = 0;
        v20 = 2 * v18;
        v21 = v11;
        if (v8)
        {
          v22 = 2 * v10;
          v23 = 2 * v17;
          v24 = v13;
          v25 = &v14[v21];
          v26 = &v15[v13];
          v27 = 2 * v12;
          do
          {
            v28 = 0;
            v29 = v26;
            v30 = v25;
            v31 = v15;
            v32 = v14;
            do
            {
              v33 = v30;
              v34 = v29;
              v35 = v31;
              v36 = v32;
              v37 = v8;
              do
              {
                *v35 = *v36;
                v36 = (_WORD *)((char *)v36 + v22);
                v35 = (_WORD *)((char *)v35 + v27);
                --v37;
              }
              while (v37);
              *v35 = *v36;
              v32 = (_WORD *)((char *)v32 + v21 * 2);
              v31 = (_WORD *)((char *)v31 + v24 * 2);
              ++v28;
              v30 = &v33[v21];
              v29 = &v34[v24];
            }
            while (v28 != v9);
            v38 = v8;
            do
            {
              *v34 = *v33;
              v33 = (_WORD *)((char *)v33 + v22);
              v34 = (_WORD *)((char *)v34 + v27);
              --v38;
            }
            while (v38);
            *v34 = *v33;
            v14 = (_WORD *)((char *)v14 + v20);
            v15 = (_WORD *)((char *)v15 + v23);
            ++v19;
            v25 = (_WORD *)((char *)v25 + v20);
            v26 = (_WORD *)((char *)v26 + v23);
          }
          while (v19 != v16);
        }
        else
        {
          do
          {
            v44 = v9;
            v45 = v15;
            v46 = v14;
            do
            {
              *v45 = *v46;
              v46 = (_WORD *)((char *)v46 + v21 * 2);
              v45 += v13;
              --v44;
            }
            while (v44);
            *v45 = *v46;
            v14 = (_WORD *)((char *)v14 + v20);
            v15 += v17;
            ++v19;
          }
          while (v19 != v16);
        }
      }
      else if (v8)
      {
        v39 = 0;
        v40 = 2 * v18;
        do
        {
          v41 = v15;
          v42 = v14;
          v43 = v8;
          do
          {
            *v41 = *v42;
            v42 += v10;
            v41 += v12;
            --v43;
          }
          while (v43);
          *v41 = *v42;
          v14 = (_WORD *)((char *)v14 + v40);
          v15 += v17;
          ++v39;
        }
        while (v39 != v16);
      }
      else
      {
        do
        {
          *v15 = *v14;
          v14 += v18;
          v15 += v17;
          --v16;
        }
        while (v16);
      }
    }
    if (v9)
    {
      if (v8)
      {
        v47 = 0;
        v48 = 2 * v11;
        v49 = 2 * v13;
        do
        {
          v50 = v15;
          v51 = v14;
          v52 = v8;
          do
          {
            *v50 = *v51;
            v51 += v10;
            v50 += v12;
            --v52;
          }
          while (v52);
          *v50 = *v51;
          v14 = (_WORD *)((char *)v14 + v48);
          v15 = (_WORD *)((char *)v15 + v49);
          ++v47;
        }
        while (v47 != v9);
      }
      else
      {
        v53 = 2 * v11;
        v54 = 2 * v13;
        do
        {
          *v15 = *v14;
          v14 = (_WORD *)((char *)v14 + v53);
          v15 = (_WORD *)((char *)v15 + v54);
          --v9;
        }
        while (v9);
      }
    }
    if (v8)
    {
      v55 = 2 * v10;
      v56 = 2 * v12;
      do
      {
        *v15 = *v14;
        v14 = (_WORD *)((char *)v14 + v55);
        v15 = (_WORD *)((char *)v15 + v56);
        --v8;
      }
      while (v8);
    }
    *v15 = *v14;
  }
}

uint64_t sub_20AFC9120()
{
  return 8;
}

__int128 *sub_20AFC912C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633118);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633118))
  {
    v2 = sub_20AFC9204();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633100, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633110 = *((_QWORD *)v2 + 2);
      xmmword_254633100 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633100, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633118);
  }
  if (byte_254633117 >= 0)
    return &xmmword_254633100;
  else
    return (__int128 *)xmmword_254633100;
}

void sub_20AFC91EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633118);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFC9204()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633138);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633138))
    return &xmmword_254633120;
  v2 = sub_20AFC92E0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633120, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633130 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633120 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633120, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633138);
  return &xmmword_254633120;
}

void sub_20AFC92C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633138);
  _Unwind_Resume(a1);
}

std::string *sub_20AFC92E0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633158);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633158))
    return &stru_254633140;
  sub_20AFC94F8((uint64_t)__p);
  sub_20AFC93D0((char *)__p, &stru_254633140);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633140, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633158);
  return &stru_254633140;
}

void sub_20AFC9390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633158);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633158);
  _Unwind_Resume(a1);
}

void sub_20AFC93D0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF8D8EC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFC94CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFC94F8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633178);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633178))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Two32f>]", qword_254633160);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633160, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633178);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633198);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633198))
  {
    v5 = sub_20AED4780(qword_254633160, "<", 0);
    sub_20AED467C(qword_254633160, 0, v5, qword_254633180);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633180, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633198);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546331B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546331B8))
  {
    sub_20B531658((uint64_t)qword_254633180, (uint64_t)&xmmword_2546331A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546331A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546331B8);
  }
  if (byte_2546331B7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546331A0, *((unint64_t *)&xmmword_2546331A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546331A0;
    *(_QWORD *)(a1 + 16) = unk_2546331B0;
  }
}

void sub_20AFC9694(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546331B8);
  _Unwind_Resume(a1);
}

void sub_20AFC96AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633198);
  _Unwind_Resume(a1);
}

void sub_20AFC96C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633178);
  _Unwind_Resume(a1);
}

void sub_20AFC96DC()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFC96F4(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFC9720(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFC9734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FCFD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC976C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFC976C(uint64_t a1, uint64_t a2)
{
  size_t v4;
  size_t v5;
  int v6;
  __int128 v7;
  int v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  void *v13;
  void *v15[2];
  int v16;
  uint64_t v17;
  int v18;

  v4 = *(_QWORD *)a2;
  v5 = *(_QWORD *)(a2 + 16);
  *(_QWORD *)a1 = v4;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = v5;
  if (v4)
  {
    v15[0] = 0;
    v6 = malloc_type_posix_memalign(v15, v5, v4, 0x1F88E90uLL);
    if (v6)
      sub_20B525948(v6, *(_QWORD *)(a1 + 16), v4);
    *(void **)(a1 + 8) = v15[0];
  }
  v7 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
  *(_OWORD *)(a1 + 24) = v7;
  v8 = *(_DWORD *)(a2 + 32);
  if (*(_DWORD *)(a2 + 24))
    v9 = *(_DWORD *)(a2 + 28) == 0;
  else
    v9 = 1;
  v10 = *(_DWORD *)(a2 + 44) >> 2;
  v11 = (*(_QWORD *)(a2 + 36) >> 2) & 0x3FFFFFFF3FFFFFFFLL;
  v12 = v9 || v8 == 0;
  v13 = *(void **)(a2 + 24);
  if (v12)
  {
    v13 = 0;
    v8 = 0;
  }
  v15[0] = *(void **)(a2 + 8);
  v15[1] = v13;
  v16 = v8;
  v17 = v11;
  v18 = v10;
  if (v8 * v10 == -1
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AFC98AC(a1, v15);
  return a1;
}

void sub_20AFC9890(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void *v3;

  v3 = *(void **)(v1 + 8);
  if (v3)
    free(v3);
  *(_QWORD *)(v1 + 8) = 0;
  _Unwind_Resume(exception_object);
}

void sub_20AFC98AC(uint64_t a1, _DWORD *a2)
{
  BOOL v2;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _QWORD v11[2];
  int v12;
  uint64_t v13;
  int v14;
  uint64_t v15[2];

  if (a2[2])
    v2 = a2[3] == 0;
  else
    v2 = 1;
  if (!v2 && a2[4] != 0)
  {
    v5 = *(_DWORD *)(a1 + 32);
    if (*(_DWORD *)(a1 + 24))
      v6 = *(_DWORD *)(a1 + 28) == 0;
    else
      v6 = 1;
    v7 = *(_DWORD *)(a1 + 44) >> 2;
    v8 = (*(_QWORD *)(a1 + 36) >> 2) & 0x3FFFFFFF3FFFFFFFLL;
    v9 = v6 || v5 == 0;
    v10 = *(_QWORD *)(a1 + 24);
    if (v9)
    {
      v10 = 0;
      v5 = 0;
    }
    v11[0] = *(_QWORD *)(a1 + 8);
    v11[1] = v10;
    v12 = v5;
    v13 = v8;
    v14 = v7;
    if (v5 * v7 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v15[0] = (uint64_t)a2;
    v15[1] = (uint64_t)v11;
    sub_20AFC9984(v15);
  }
}

void sub_20AFC9984(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  int v7;
  int v8;
  BOOL v9;
  _DWORD *v11;
  _DWORD *v12;
  char v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  char v21;

  v1 = *a1;
  v2 = a1[1];
  v3 = *(unsigned int *)(*a1 + 20);
  v4 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    sub_20AFC9A3C(a1);
  }
  else
  {
    v13 = 0;
    v7 = *(_DWORD *)(v1 + 8);
    v6 = *(_DWORD *)(v1 + 12);
    v8 = *(_DWORD *)(v1 + 16);
    if (v7)
      v9 = v6 == 0;
    else
      v9 = 1;
    if (!v9 && v8 != 0)
    {
      v14 = 0;
      v15 = v7 - 1;
      v16 = v3 | (v4 << 32);
      v17 = v6 - 1;
      v18 = *(unsigned int *)(v1 + 24) | ((unint64_t)*(unsigned int *)(v2 + 24) << 32);
      v19 = v8 - 1;
      v20 = *(unsigned int *)(v1 + 28) | ((unint64_t)*(unsigned int *)(v2 + 28) << 32);
      v11 = *(_DWORD **)v1;
      v12 = *(_DWORD **)v2;
      v21 = 0;
      sub_20AFCA134(&v14, (uint64_t)&v21, (uint64_t)&v13, v11, v12);
    }
  }
}

uint64_t *sub_20AFC9A3C(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 24);
  if (v3 == *(_DWORD *)(v2 + 24))
  {
    v4 = *(_DWORD *)(v1 + 8);
    if (v3 == *(_DWORD *)(v1 + 20) * v4)
    {
      v5 = *(_DWORD *)(v1 + 28);
      if (v5 != *(_DWORD *)(v2 + 28))
        return (uint64_t *)sub_20AFC9B70((_DWORD *)*result, (char **)v2);
      v6 = *(_DWORD *)(v1 + 12);
      if (v5 != v6 * v3)
        return (uint64_t *)sub_20AFC9B70((_DWORD *)*result, (char **)v2);
      v7 = v6 * v4 * *(_DWORD *)(v1 + 16);
      v8 = *(char **)v1;
      if ((_DWORD)v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      if (v9)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
      }
      else if (!(_DWORD)v7)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)v2, v8, 4 * v7);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 8);
  }
  v12 = v4;
  if (v4)
    v10 = *(_DWORD *)(v1 + 12) == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 16) != 0)
    return sub_20AFC9CC4(&v12, (char **)v1, (char **)v2);
  return result;
}

_DWORD *sub_20AFC9B70(_DWORD *result, char **a2)
{
  int v2;
  int v3;
  int v4;
  BOOL v5;
  uint64_t v7;
  char *v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;

  v2 = result[2];
  v3 = result[3];
  v4 = result[4];
  if (v2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = (v3 * v2);
    v8 = *(char **)result;
    v9 = *a2;
    v10 = v4 - 1;
    if (v4 == 1)
    {
LABEL_17:
      if (!(_DWORD)v7 || v8)
      {
        if (!(_DWORD)v7)
          return result;
      }
      else if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_16;
      }
      return memmove(v9, v8, 4 * v7);
    }
    if ((_DWORD)v7)
    {
      v11 = 4 * result[7];
      v12 = 4 * *((unsigned int *)a2 + 7);
      while (v8
           || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        result = memmove(v9, v8, 4 * v7);
        v8 += v11;
        v9 += v12;
        if (!--v10)
          goto LABEL_17;
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_20AFC9CC4(uint64_t *result, char **a2, char **a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = result;
  v3 = *((_DWORD *)a2 + 3);
  v4 = *((_DWORD *)a2 + 4);
  if (*((_DWORD *)a2 + 2))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v43 = *((unsigned int *)a2 + 6);
    v8 = *((unsigned int *)a3 + 6);
    v9 = v4 - 1;
    v5 = v9 == 0;
    v41 = v9;
    v10 = *a2;
    if (!v5)
    {
      if (v3 != 1)
      {
        v11 = 0;
        v12 = (unsigned __int8 *)&qword_25463D258;
        v13 = *a3;
        v36 = *((unsigned int *)a2 + 7);
        v37 = *((unsigned int *)a3 + 7);
        v42 = v3 - 1;
        while (1)
        {
          v38 = v11;
          v14 = 0;
          v39 = v13;
          v40 = v10;
          v15 = v10;
          do
          {
            v16 = v15;
            v17 = *v44;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              v18 = v8;
              sub_20B531CBC("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
              v19 = atomic_load(v12);
              if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v12))
              {
                __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
                __cxa_guard_release((__guard *)v12);
              }
              v20 = v12;
              if (!byte_25463D248 || byte_25463D250)
              {
                v22 = qword_25463D220;
                v23 = qword_25463D228;
                while (v22 != v23)
                {
                  v25 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v22;
                  v24 = *(_QWORD *)(v22 + 8);
                  v22 += 16;
                  v25(v24, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v12 = v20;
              v21 = atomic_load(v20);
              if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)v20))
              {
                __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
                __cxa_guard_release((__guard *)v20);
              }
              if (!byte_25463D248)
                goto LABEL_52;
              v8 = v18;
              qword_25463D238(unk_25463D240, "ptr != nullptr || size == 0", 27, "", 0);
              v7 = v42;
            }
            result = (uint64_t *)memmove(v13, v16, 4 * v17);
LABEL_19:
            v15 = &v16[4 * v43];
            v13 += 4 * v8;
            ++v14;
          }
          while (v14 != v7);
          v26 = *v44;
          if (!v16 && v26)
          {
            if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
LABEL_14:
              result = (uint64_t *)memmove(v13, v15, 4 * v26);
              goto LABEL_15;
            }
LABEL_52:
            abort();
          }
          if (v26)
            goto LABEL_14;
LABEL_15:
          v10 = &v40[4 * v36];
          v13 = &v39[4 * v37];
          v11 = v38 + 1;
          if (v38 + 1 == v41)
            goto LABEL_40;
        }
      }
      v32 = 4 * *((unsigned int *)a2 + 7);
      v33 = 4 * *((unsigned int *)a3 + 7);
      v13 = *a3;
      while (1)
      {
        v34 = *v44;
        v35 = v10;
        if (!v10 && v34)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_52;
          }
        }
        else if (!v34)
        {
          goto LABEL_58;
        }
        result = (uint64_t *)memmove(v13, v35, 4 * v34);
LABEL_58:
        v10 = &v35[v32];
        v13 += v33;
        if (!--v41)
          goto LABEL_40;
      }
    }
    v13 = *a3;
LABEL_40:
    v27 = v13;
    v28 = v10;
    if (v7)
    {
      v29 = 4 * v8;
      do
      {
        v30 = *v44;
        if (!v28 && v30)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_52;
          }
        }
        else if (!v30)
        {
          goto LABEL_44;
        }
        result = (uint64_t *)memmove(v27, v28, 4 * v30);
LABEL_44:
        v28 += 4 * v43;
        v27 += v29;
        --v7;
      }
      while (v7);
    }
    v31 = *v44;
    if (!v28 && v31)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_52;
      }
      return (uint64_t *)memmove(v27, v28, 4 * v31);
    }
    if (v31)
      return (uint64_t *)memmove(v27, v28, 4 * v31);
  }
  return result;
}

float sub_20AFCA134(_DWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  _DWORD *v23;
  _DWORD *v24;
  _DWORD *v25;
  _DWORD *v26;
  _DWORD *v27;
  _DWORD *v28;
  _DWORD *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _DWORD *v37;
  _DWORD *v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  _DWORD *v45;
  _DWORD *v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  _DWORD *v50;
  _DWORD *v51;
  int v52;
  float result;

  v5 = a1[8];
  v6 = a1[5];
  if (v5)
  {
    v7 = a1[2];
    v8 = a1[9];
    v9 = a1[10];
    if (v6)
    {
      v10 = a1[6];
      v11 = a1[7];
      if (!v7)
      {
        do
        {
          v50 = a5;
          v51 = a4;
          v52 = v6;
          do
          {
            *v50 = *v51;
            v51 += v10;
            v50 += v11;
            --v52;
          }
          while (v52);
          *v50 = *v51;
          a4 += v8;
          a5 += v9;
          ++v7;
        }
        while (v7 != v5);
        goto LABEL_32;
      }
      v12 = 0;
      v13 = 4 * v8;
      v14 = v10;
      v15 = 4 * a1[3];
      v16 = 4 * v9;
      v17 = v11;
      v18 = 4 * a1[4];
      v19 = &a4[v14];
      v20 = &a5[v17];
      do
      {
        v21 = 0;
        v22 = v20;
        v23 = v19;
        v24 = a5;
        v25 = a4;
        do
        {
          v26 = v23;
          v27 = v22;
          v28 = v24;
          v29 = v25;
          v30 = v7;
          do
          {
            *v28 = *v29;
            v29 = (_DWORD *)((char *)v29 + v15);
            v28 = (_DWORD *)((char *)v28 + v18);
            --v30;
          }
          while (v30);
          *v28 = *v29;
          v25 = (_DWORD *)((char *)v25 + v14 * 4);
          v24 = (_DWORD *)((char *)v24 + v17 * 4);
          ++v21;
          v23 = &v26[v14];
          v22 = &v27[v17];
        }
        while (v21 != v6);
        v31 = v7;
        do
        {
          *v27 = *v26;
          v26 = (_DWORD *)((char *)v26 + v15);
          v27 = (_DWORD *)((char *)v27 + v18);
          --v31;
        }
        while (v31);
        *v27 = *v26;
        a4 = (_DWORD *)((char *)a4 + v13);
        a5 = (_DWORD *)((char *)a5 + v16);
        ++v12;
        v19 = (_DWORD *)((char *)v19 + v13);
        v20 = (_DWORD *)((char *)v20 + v16);
      }
      while (v12 != v5);
LABEL_14:
      v10 = a1[6];
      v11 = a1[7];
      if (v7)
      {
        v32 = 0;
        v33 = 4 * v10;
        v34 = 4 * a1[3];
        v35 = 4 * v11;
        v36 = 4 * a1[4];
        do
        {
          v37 = a5;
          v38 = a4;
          v39 = v7;
          do
          {
            *v37 = *v38;
            v38 = (_DWORD *)((char *)v38 + v34);
            v37 = (_DWORD *)((char *)v37 + v36);
            --v39;
          }
          while (v39);
          *v37 = *v38;
          a4 = (_DWORD *)((char *)a4 + v33);
          a5 = (_DWORD *)((char *)a5 + v35);
          ++v32;
        }
        while (v32 != v6);
        goto LABEL_25;
      }
      do
      {
LABEL_32:
        *a5 = *a4;
        a4 += v10;
        a5 += v11;
        --v6;
      }
      while (v6);
      goto LABEL_35;
    }
    if (!v7)
    {
      do
      {
        *a5 = *a4;
        a4 += v8;
        a5 += v9;
        --v5;
      }
      while (v5);
      goto LABEL_35;
    }
    v40 = 0;
    v41 = 4 * v8;
    v42 = 4 * a1[3];
    v43 = 4 * v9;
    v44 = 4 * a1[4];
    do
    {
      v45 = a5;
      v46 = a4;
      v47 = v7;
      do
      {
        *v45 = *v46;
        v46 = (_DWORD *)((char *)v46 + v42);
        v45 = (_DWORD *)((char *)v45 + v44);
        --v47;
      }
      while (v47);
      *v45 = *v46;
      a4 = (_DWORD *)((char *)a4 + v41);
      a5 = (_DWORD *)((char *)a5 + v43);
      ++v40;
    }
    while (v40 != v5);
  }
  else
  {
    v7 = a1[2];
    if (v6)
      goto LABEL_14;
  }
LABEL_25:
  if (v7)
  {
    v48 = 4 * a1[3];
    v49 = 4 * a1[4];
    do
    {
      *a5 = *a4;
      a4 = (_DWORD *)((char *)a4 + v48);
      a5 = (_DWORD *)((char *)a5 + v49);
      --v7;
    }
    while (v7);
  }
LABEL_35:
  result = *(float *)a4;
  *a5 = *a4;
  return result;
}

uint64_t sub_20AFCA3D4()
{
  return 9;
}

__int128 *sub_20AFCA3E0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546331D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546331D8))
  {
    v2 = sub_20AFCA4B8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_2546331C0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2546331D0 = *((_QWORD *)v2 + 2);
      xmmword_2546331C0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546331C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546331D8);
  }
  if (byte_2546331D7 >= 0)
    return &xmmword_2546331C0;
  else
    return (__int128 *)xmmword_2546331C0;
}

void sub_20AFCA4A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546331D8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCA4B8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546331F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546331F8))
    return &xmmword_2546331E0;
  v2 = sub_20AFCA594();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546331E0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546331F0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546331E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546331E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546331F8);
  return &xmmword_2546331E0;
}

void sub_20AFCA57C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546331F8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCA594()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633218);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633218))
    return &stru_254633200;
  sub_20AFCA7AC((uint64_t)__p);
  sub_20AFCA684((char *)__p, &stru_254633200);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633200, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633218);
  return &stru_254633200;
}

void sub_20AFCA644(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633218);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633218);
  _Unwind_Resume(a1);
}

void sub_20AFCA684(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCA990();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCA780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCA7AC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633238);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633238))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three8u>]", qword_254633220);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633220, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633238);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633258);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633258))
  {
    v5 = sub_20AED4780(qword_254633220, "<", 0);
    sub_20AED467C(qword_254633220, 0, v5, qword_254633240);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633240, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633258);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633278);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633278))
  {
    sub_20B531658((uint64_t)qword_254633240, (uint64_t)&xmmword_254633260);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633260, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633278);
  }
  if (byte_254633277 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633260, *((unint64_t *)&xmmword_254633260 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633260;
    *(_QWORD *)(a1 + 16) = unk_254633270;
  }
}

void sub_20AFCA948(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633278);
  _Unwind_Resume(a1);
}

void sub_20AFCA960(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633258);
  _Unwind_Resume(a1);
}

void sub_20AFCA978(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633238);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCA990()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546328B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546328B8))
    return &stru_2546328A0;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three8u]", __p);
  sub_20B531884((uint64_t)__p, &stru_2546328A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546328A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546328B8);
  return &stru_2546328A0;
}

void sub_20AFCAA48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546328B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546328B8);
  _Unwind_Resume(a1);
}

void sub_20AFCAA88()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCAAA0(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCAACC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCAAE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD050;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC6680(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCAB18()
{
  return 10;
}

__int128 *sub_20AFCAB24()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633298);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633298))
  {
    v2 = sub_20AFCABFC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633280, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633290 = *((_QWORD *)v2 + 2);
      xmmword_254633280 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633280, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633298);
  }
  if (byte_254633297 >= 0)
    return &xmmword_254633280;
  else
    return (__int128 *)xmmword_254633280;
}

void sub_20AFCABE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633298);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCABFC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546332B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546332B8))
    return &xmmword_2546332A0;
  v2 = sub_20AFCACD8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546332A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546332B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546332A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546332A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546332B8);
  return &xmmword_2546332A0;
}

void sub_20AFCACC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546332B8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCACD8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546332D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546332D8))
    return &stru_2546332C0;
  sub_20AFCAEF0((uint64_t)__p);
  sub_20AFCADC8((char *)__p, &stru_2546332C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546332C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546332D8);
  return &stru_2546332C0;
}

void sub_20AFCAD88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546332D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546332D8);
  _Unwind_Resume(a1);
}

void sub_20AFCADC8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCB0D4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCAEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCAEF0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546332F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546332F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three16u>]", qword_2546332E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546332E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546332F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633318);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633318))
  {
    v5 = sub_20AED4780(qword_2546332E0, "<", 0);
    sub_20AED467C(qword_2546332E0, 0, v5, qword_254633300);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633300, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633318);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633338);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633338))
  {
    sub_20B531658((uint64_t)qword_254633300, (uint64_t)&xmmword_254633320);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633320, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633338);
  }
  if (byte_254633337 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633320, *((unint64_t *)&xmmword_254633320 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633320;
    *(_QWORD *)(a1 + 16) = unk_254633330;
  }
}

void sub_20AFCB08C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633338);
  _Unwind_Resume(a1);
}

void sub_20AFCB0A4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633318);
  _Unwind_Resume(a1);
}

void sub_20AFCB0BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546332F8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCB0D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546328D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546328D8))
    return &stru_2546328C0;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three16u]", __p);
  sub_20B531884((uint64_t)__p, &stru_2546328C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546328C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546328D8);
  return &stru_2546328C0;
}

void sub_20AFCB18C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546328D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546328D8);
  _Unwind_Resume(a1);
}

void sub_20AFCB1CC()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCB1E4(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCB210(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCB224(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD0D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC7914(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCB25C()
{
  return 11;
}

__int128 *sub_20AFCB268()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633358);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633358))
  {
    v2 = sub_20AFCB340();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633340, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633350 = *((_QWORD *)v2 + 2);
      xmmword_254633340 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633340, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633358);
  }
  if (byte_254633357 >= 0)
    return &xmmword_254633340;
  else
    return (__int128 *)xmmword_254633340;
}

void sub_20AFCB328(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633358);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCB340()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633378);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633378))
    return &xmmword_254633360;
  v2 = sub_20AFCB41C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633360, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633370 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633360 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633360, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633378);
  return &xmmword_254633360;
}

void sub_20AFCB404(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633378);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCB41C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633398);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633398))
    return &stru_254633380;
  sub_20AFCB634((uint64_t)__p);
  sub_20AFCB50C((char *)__p, &stru_254633380);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633380, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633398);
  return &stru_254633380;
}

void sub_20AFCB4CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633398);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633398);
  _Unwind_Resume(a1);
}

void sub_20AFCB50C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCB818();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCB608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCB634(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546333B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546333B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three16f>]", qword_2546333A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546333A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546333B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546333D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546333D8))
  {
    v5 = sub_20AED4780(qword_2546333A0, "<", 0);
    sub_20AED467C(qword_2546333A0, 0, v5, qword_2546333C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546333C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546333D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546333F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546333F8))
  {
    sub_20B531658((uint64_t)qword_2546333C0, (uint64_t)&xmmword_2546333E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546333E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546333F8);
  }
  if (byte_2546333F7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546333E0, *((unint64_t *)&xmmword_2546333E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546333E0;
    *(_QWORD *)(a1 + 16) = unk_2546333F0;
  }
}

void sub_20AFCB7D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546333F8);
  _Unwind_Resume(a1);
}

void sub_20AFCB7E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546333D8);
  _Unwind_Resume(a1);
}

void sub_20AFCB800(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546333B8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCB818()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546328F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546328F8))
    return &stru_2546328E0;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three16f]", __p);
  sub_20B531884((uint64_t)__p, &stru_2546328E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546328E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546328F8);
  return &stru_2546328E0;
}

void sub_20AFCB8D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546328F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546328F8);
  _Unwind_Resume(a1);
}

void sub_20AFCB910()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCB928(uint64_t a1, uint64_t a2)
{
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v3 = *(void **)(a2 + 72);
  if (v3)
  {
    v4 = !*(_DWORD *)(a2 + 96) || *(_DWORD *)(a2 + 92) == 0;
    v5 = v4 || *(_DWORD *)(a2 + 88) == 0;
    v6 = v5 ? 0 : *(_DWORD *)(a2 + 96);
    if (v6 * (*(_DWORD *)(a2 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(void **)(a2 + 72);
    if (v3)
LABEL_14:
      free(v3);
  }
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCB9C8(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCB9DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD150;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC8C3C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCBA14()
{
  return 12;
}

__int128 *sub_20AFCBA20()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633418);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633418))
  {
    v2 = sub_20AFCBAF8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633400, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633410 = *((_QWORD *)v2 + 2);
      xmmword_254633400 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633400, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633418);
  }
  if (byte_254633417 >= 0)
    return &xmmword_254633400;
  else
    return (__int128 *)xmmword_254633400;
}

void sub_20AFCBAE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633418);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCBAF8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633438);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633438))
    return &xmmword_254633420;
  v2 = sub_20AFCBBD4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633420, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633430 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633420 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633420, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633438);
  return &xmmword_254633420;
}

void sub_20AFCBBBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633438);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCBBD4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633458);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633458))
    return &stru_254633440;
  sub_20AFCBDEC((uint64_t)__p);
  sub_20AFCBCC4((char *)__p, &stru_254633440);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633440, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633458);
  return &stru_254633440;
}

void sub_20AFCBC84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633458);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633458);
  _Unwind_Resume(a1);
}

void sub_20AFCBCC4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCBFD0();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCBDC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCBDEC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633478);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633478))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Three32f>]", qword_254633460);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633460, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633478);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633498);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633498))
  {
    v5 = sub_20AED4780(qword_254633460, "<", 0);
    sub_20AED467C(qword_254633460, 0, v5, qword_254633480);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633480, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633498);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546334B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546334B8))
  {
    sub_20B531658((uint64_t)qword_254633480, (uint64_t)&xmmword_2546334A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546334A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546334B8);
  }
  if (byte_2546334B7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546334A0, *((unint64_t *)&xmmword_2546334A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546334A0;
    *(_QWORD *)(a1 + 16) = unk_2546334B0;
  }
}

void sub_20AFCBF88(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546334B8);
  _Unwind_Resume(a1);
}

void sub_20AFCBFA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633498);
  _Unwind_Resume(a1);
}

void sub_20AFCBFB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633478);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCBFD0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632918);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632918))
    return &stru_254632900;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Three32f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632900);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632900, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632918);
  return &stru_254632900;
}

void sub_20AFCC088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632918);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632918);
  _Unwind_Resume(a1);
}

void sub_20AFCC0C8()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCC0E0(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCC10C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCC120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD1D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC976C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCC158()
{
  return 13;
}

__int128 *sub_20AFCC164()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546334D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546334D8))
  {
    v2 = sub_20AFCC23C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_2546334C0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2546334D0 = *((_QWORD *)v2 + 2);
      xmmword_2546334C0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546334C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546334D8);
  }
  if (byte_2546334D7 >= 0)
    return &xmmword_2546334C0;
  else
    return (__int128 *)xmmword_2546334C0;
}

void sub_20AFCC224(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546334D8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCC23C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546334F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546334F8))
    return &xmmword_2546334E0;
  v2 = sub_20AFCC318();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546334E0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546334F0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546334E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546334E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546334F8);
  return &xmmword_2546334E0;
}

void sub_20AFCC300(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546334F8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCC318()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633518);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633518))
    return &stru_254633500;
  sub_20AFCC530((uint64_t)__p);
  sub_20AFCC408((char *)__p, &stru_254633500);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633500, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633518);
  return &stru_254633500;
}

void sub_20AFCC3C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633518);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633518);
  _Unwind_Resume(a1);
}

void sub_20AFCC408(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCC714();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCC504(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCC530(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633538);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633538))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four8u>]", qword_254633520);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633520, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633538);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633558);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633558))
  {
    v5 = sub_20AED4780(qword_254633520, "<", 0);
    sub_20AED467C(qword_254633520, 0, v5, qword_254633540);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633540, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633558);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633578);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633578))
  {
    sub_20B531658((uint64_t)qword_254633540, (uint64_t)&xmmword_254633560);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633560, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633578);
  }
  if (byte_254633577 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633560, *((unint64_t *)&xmmword_254633560 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633560;
    *(_QWORD *)(a1 + 16) = unk_254633570;
  }
}

void sub_20AFCC6CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633578);
  _Unwind_Resume(a1);
}

void sub_20AFCC6E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633558);
  _Unwind_Resume(a1);
}

void sub_20AFCC6FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633538);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCC714()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632938);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632938))
    return &stru_254632920;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four8u]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632920);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632920, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632938);
  return &stru_254632920;
}

void sub_20AFCC7CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632938);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632938);
  _Unwind_Resume(a1);
}

void sub_20AFCC80C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCC824(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCC850(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCC864(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD250;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC6680(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCC89C()
{
  return 14;
}

__int128 *sub_20AFCC8A8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633598);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633598))
  {
    v2 = sub_20AFCC980();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633580, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633590 = *((_QWORD *)v2 + 2);
      xmmword_254633580 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633580, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633598);
  }
  if (byte_254633597 >= 0)
    return &xmmword_254633580;
  else
    return (__int128 *)xmmword_254633580;
}

void sub_20AFCC968(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633598);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCC980()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546335B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546335B8))
    return &xmmword_2546335A0;
  v2 = sub_20AFCCA5C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546335A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546335B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546335A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546335A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546335B8);
  return &xmmword_2546335A0;
}

void sub_20AFCCA44(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546335B8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCCA5C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546335D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546335D8))
    return &stru_2546335C0;
  sub_20AFCCC74((uint64_t)__p);
  sub_20AFCCB4C((char *)__p, &stru_2546335C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546335C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546335D8);
  return &stru_2546335C0;
}

void sub_20AFCCB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546335D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546335D8);
  _Unwind_Resume(a1);
}

void sub_20AFCCB4C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCCE58();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCCC48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCCC74(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546335F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546335F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four16u>]", qword_2546335E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546335E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546335F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633618);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633618))
  {
    v5 = sub_20AED4780(qword_2546335E0, "<", 0);
    sub_20AED467C(qword_2546335E0, 0, v5, qword_254633600);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633600, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633618);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633638);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633638))
  {
    sub_20B531658((uint64_t)qword_254633600, (uint64_t)&xmmword_254633620);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633620, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633638);
  }
  if (byte_254633637 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633620, *((unint64_t *)&xmmword_254633620 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633620;
    *(_QWORD *)(a1 + 16) = unk_254633630;
  }
}

void sub_20AFCCE10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633638);
  _Unwind_Resume(a1);
}

void sub_20AFCCE28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633618);
  _Unwind_Resume(a1);
}

void sub_20AFCCE40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546335F8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCCE58()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632958);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632958))
    return &stru_254632940;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four16u]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632940);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632940, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632958);
  return &stru_254632940;
}

void sub_20AFCCF10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632958);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632958);
  _Unwind_Resume(a1);
}

void sub_20AFCCF50()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCCF68(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCCF94(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCCFA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD2D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC7914(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCCFE0()
{
  return 15;
}

__int128 *sub_20AFCCFEC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633658);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633658))
  {
    v2 = sub_20AFCD0C4();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633640, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633650 = *((_QWORD *)v2 + 2);
      xmmword_254633640 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633640, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633658);
  }
  if (byte_254633657 >= 0)
    return &xmmword_254633640;
  else
    return (__int128 *)xmmword_254633640;
}

void sub_20AFCD0AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633658);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCD0C4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633678);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633678))
    return &xmmword_254633660;
  v2 = sub_20AFCD1A0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633660, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633670 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633660 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633660, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633678);
  return &xmmword_254633660;
}

void sub_20AFCD188(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633678);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCD1A0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633698);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633698))
    return &stru_254633680;
  sub_20AFCD3B8((uint64_t)__p);
  sub_20AFCD290((char *)__p, &stru_254633680);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633680, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633698);
  return &stru_254633680;
}

void sub_20AFCD250(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633698);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633698);
  _Unwind_Resume(a1);
}

void sub_20AFCD290(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCD59C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCD38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCD3B8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546336B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546336B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four16f>]", qword_2546336A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546336A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546336B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546336D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546336D8))
  {
    v5 = sub_20AED4780(qword_2546336A0, "<", 0);
    sub_20AED467C(qword_2546336A0, 0, v5, qword_2546336C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546336C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546336D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546336F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546336F8))
  {
    sub_20B531658((uint64_t)qword_2546336C0, (uint64_t)&xmmword_2546336E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546336E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546336F8);
  }
  if (byte_2546336F7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546336E0, *((unint64_t *)&xmmword_2546336E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546336E0;
    *(_QWORD *)(a1 + 16) = unk_2546336F0;
  }
}

void sub_20AFCD554(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546336F8);
  _Unwind_Resume(a1);
}

void sub_20AFCD56C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546336D8);
  _Unwind_Resume(a1);
}

void sub_20AFCD584(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546336B8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCD59C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632978);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632978))
    return &stru_254632960;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four16f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632960);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632960, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632978);
  return &stru_254632960;
}

void sub_20AFCD654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632978);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632978);
  _Unwind_Resume(a1);
}

void sub_20AFCD694()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCD6AC(uint64_t a1, uint64_t a2)
{
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v3 = *(void **)(a2 + 72);
  if (v3)
  {
    v4 = !*(_DWORD *)(a2 + 96) || *(_DWORD *)(a2 + 92) == 0;
    v5 = v4 || *(_DWORD *)(a2 + 88) == 0;
    v6 = v5 ? 0 : *(_DWORD *)(a2 + 96);
    if (v6 * (*(_DWORD *)(a2 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(void **)(a2 + 72);
    if (v3)
LABEL_14:
      free(v3);
  }
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCD74C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCD760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD350;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC8C3C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCD798()
{
  return 16;
}

__int128 *sub_20AFCD7A4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633718);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633718))
  {
    v2 = sub_20AFCD87C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633700, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633710 = *((_QWORD *)v2 + 2);
      xmmword_254633700 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633700, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633718);
  }
  if (byte_254633717 >= 0)
    return &xmmword_254633700;
  else
    return (__int128 *)xmmword_254633700;
}

void sub_20AFCD864(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633718);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCD87C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633738);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633738))
    return &xmmword_254633720;
  v2 = sub_20AFCD958();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633720, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633730 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633720 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633720, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633738);
  return &xmmword_254633720;
}

void sub_20AFCD940(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633738);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCD958()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633758);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633758))
    return &stru_254633740;
  sub_20AFCDB70((uint64_t)__p);
  sub_20AFCDA48((char *)__p, &stru_254633740);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633740, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633758);
  return &stru_254633740;
}

void sub_20AFCDA08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633758);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633758);
  _Unwind_Resume(a1);
}

void sub_20AFCDA48(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCDD54();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCDB44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCDB70(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633778);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633778))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Four32f>]", qword_254633760);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633760, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633778);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633798);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633798))
  {
    v5 = sub_20AED4780(qword_254633760, "<", 0);
    sub_20AED467C(qword_254633760, 0, v5, qword_254633780);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633780, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633798);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546337B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546337B8))
  {
    sub_20B531658((uint64_t)qword_254633780, (uint64_t)&xmmword_2546337A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546337A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546337B8);
  }
  if (byte_2546337B7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546337A0, *((unint64_t *)&xmmword_2546337A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546337A0;
    *(_QWORD *)(a1 + 16) = unk_2546337B0;
  }
}

void sub_20AFCDD0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546337B8);
  _Unwind_Resume(a1);
}

void sub_20AFCDD24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633798);
  _Unwind_Resume(a1);
}

void sub_20AFCDD3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633778);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCDD54()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632998);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632998))
    return &stru_254632980;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Four32f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632980);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632980, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632998);
  return &stru_254632980;
}

void sub_20AFCDE0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632998);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632998);
  _Unwind_Resume(a1);
}

void sub_20AFCDE4C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCDE64(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCDE90(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCDEA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD3D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC976C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCDEDC()
{
  return 17;
}

__int128 *sub_20AFCDEE8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546337D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546337D8))
  {
    v2 = sub_20AFCDFC0();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_2546337C0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2546337D0 = *((_QWORD *)v2 + 2);
      xmmword_2546337C0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546337C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546337D8);
  }
  if (byte_2546337D7 >= 0)
    return &xmmword_2546337C0;
  else
    return (__int128 *)xmmword_2546337C0;
}

void sub_20AFCDFA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546337D8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCDFC0()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546337F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546337F8))
    return &xmmword_2546337E0;
  v2 = sub_20AFCE09C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546337E0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546337F0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546337E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546337E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546337F8);
  return &xmmword_2546337E0;
}

void sub_20AFCE084(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546337F8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCE09C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633818);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633818))
    return &stru_254633800;
  sub_20AFCE2B4((uint64_t)__p);
  sub_20AFCE18C((char *)__p, &stru_254633800);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633800, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633818);
  return &stru_254633800;
}

void sub_20AFCE14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633818);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633818);
  _Unwind_Resume(a1);
}

void sub_20AFCE18C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCE498();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCE288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCE2B4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633838);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633838))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr8u>]", qword_254633820);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633820, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633838);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633858);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633858))
  {
    v5 = sub_20AED4780(qword_254633820, "<", 0);
    sub_20AED467C(qword_254633820, 0, v5, qword_254633840);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633840, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633858);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633878);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633878))
  {
    sub_20B531658((uint64_t)qword_254633840, (uint64_t)&xmmword_254633860);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633860, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633878);
  }
  if (byte_254633877 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633860, *((unint64_t *)&xmmword_254633860 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633860;
    *(_QWORD *)(a1 + 16) = unk_254633870;
  }
}

void sub_20AFCE450(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633878);
  _Unwind_Resume(a1);
}

void sub_20AFCE468(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633858);
  _Unwind_Resume(a1);
}

void sub_20AFCE480(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633838);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCE498()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546329B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546329B8))
    return &stru_2546329A0;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr8u]", __p);
  sub_20B531884((uint64_t)__p, &stru_2546329A0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546329A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546329B8);
  return &stru_2546329A0;
}

void sub_20AFCE550(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546329B8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546329B8);
  _Unwind_Resume(a1);
}

void sub_20AFCE590()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCE5A8(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCE5D4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCE5E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD450;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC6680(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCE620()
{
  return 18;
}

__int128 *sub_20AFCE62C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633898);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633898))
  {
    v2 = sub_20AFCE704();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633880, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633890 = *((_QWORD *)v2 + 2);
      xmmword_254633880 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633880, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633898);
  }
  if (byte_254633897 >= 0)
    return &xmmword_254633880;
  else
    return (__int128 *)xmmword_254633880;
}

void sub_20AFCE6EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633898);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCE704()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546338B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546338B8))
    return &xmmword_2546338A0;
  v2 = sub_20AFCE7E0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546338A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546338B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546338A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546338A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546338B8);
  return &xmmword_2546338A0;
}

void sub_20AFCE7C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546338B8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCE7E0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546338D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546338D8))
    return &stru_2546338C0;
  sub_20AFCE9F8((uint64_t)__p);
  sub_20AFCE8D0((char *)__p, &stru_2546338C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546338C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546338D8);
  return &stru_2546338C0;
}

void sub_20AFCE890(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546338D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546338D8);
  _Unwind_Resume(a1);
}

void sub_20AFCE8D0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCEBDC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCE9CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCE9F8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546338F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546338F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr16u>]", qword_2546338E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546338E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546338F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633918);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633918))
  {
    v5 = sub_20AED4780(qword_2546338E0, "<", 0);
    sub_20AED467C(qword_2546338E0, 0, v5, qword_254633900);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633900, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633918);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633938);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633938))
  {
    sub_20B531658((uint64_t)qword_254633900, (uint64_t)&xmmword_254633920);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633920, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633938);
  }
  if (byte_254633937 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633920, *((unint64_t *)&xmmword_254633920 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633920;
    *(_QWORD *)(a1 + 16) = unk_254633930;
  }
}

void sub_20AFCEB94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633938);
  _Unwind_Resume(a1);
}

void sub_20AFCEBAC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633918);
  _Unwind_Resume(a1);
}

void sub_20AFCEBC4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546338F8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCEBDC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546329D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546329D8))
    return &stru_2546329C0;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr16u]", __p);
  sub_20B531884((uint64_t)__p, &stru_2546329C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546329C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546329D8);
  return &stru_2546329C0;
}

void sub_20AFCEC94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546329D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546329D8);
  _Unwind_Resume(a1);
}

void sub_20AFCECD4()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCECEC(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCED18(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCED2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD4D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC7914(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCED64()
{
  return 19;
}

__int128 *sub_20AFCED70()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633958);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633958))
  {
    v2 = sub_20AFCEE48();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633940, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633950 = *((_QWORD *)v2 + 2);
      xmmword_254633940 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633940, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633958);
  }
  if (byte_254633957 >= 0)
    return &xmmword_254633940;
  else
    return (__int128 *)xmmword_254633940;
}

void sub_20AFCEE30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633958);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCEE48()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633978);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633978))
    return &xmmword_254633960;
  v2 = sub_20AFCEF24();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633960, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633970 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633960 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633960, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633978);
  return &xmmword_254633960;
}

void sub_20AFCEF0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633978);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCEF24()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633998);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633998))
    return &stru_254633980;
  sub_20AFCF13C((uint64_t)__p);
  sub_20AFCF014((char *)__p, &stru_254633980);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633980, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633998);
  return &stru_254633980;
}

void sub_20AFCEFD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633998);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633998);
  _Unwind_Resume(a1);
}

void sub_20AFCF014(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCF320();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCF110(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCF13C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546339B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546339B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr16f>]", qword_2546339A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546339A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546339B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546339D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546339D8))
  {
    v5 = sub_20AED4780(qword_2546339A0, "<", 0);
    sub_20AED467C(qword_2546339A0, 0, v5, qword_2546339C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546339C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546339D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546339F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546339F8))
  {
    sub_20B531658((uint64_t)qword_2546339C0, (uint64_t)&xmmword_2546339E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546339E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546339F8);
  }
  if (byte_2546339F7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546339E0, *((unint64_t *)&xmmword_2546339E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546339E0;
    *(_QWORD *)(a1 + 16) = unk_2546339F0;
  }
}

void sub_20AFCF2D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546339F8);
  _Unwind_Resume(a1);
}

void sub_20AFCF2F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546339D8);
  _Unwind_Resume(a1);
}

void sub_20AFCF308(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546339B8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCF320()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546329F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546329F8))
    return &stru_2546329E0;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr16f]", __p);
  sub_20B531884((uint64_t)__p, &stru_2546329E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546329E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546329F8);
  return &stru_2546329E0;
}

void sub_20AFCF3D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546329F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546329F8);
  _Unwind_Resume(a1);
}

void sub_20AFCF418()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCF430(uint64_t a1, uint64_t a2)
{
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v3 = *(void **)(a2 + 72);
  if (v3)
  {
    v4 = !*(_DWORD *)(a2 + 96) || *(_DWORD *)(a2 + 92) == 0;
    v5 = v4 || *(_DWORD *)(a2 + 88) == 0;
    v6 = v5 ? 0 : *(_DWORD *)(a2 + 96);
    if (v6 * (*(_DWORD *)(a2 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(void **)(a2 + 72);
    if (v3)
LABEL_14:
      free(v3);
  }
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCF4D0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCF4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD550;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC8C3C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCF51C()
{
  return 20;
}

__int128 *sub_20AFCF528()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633A18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633A18))
  {
    v2 = sub_20AFCF600();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633A00, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633A10 = *((_QWORD *)v2 + 2);
      xmmword_254633A00 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633A00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633A18);
  }
  if (byte_254633A17 >= 0)
    return &xmmword_254633A00;
  else
    return (__int128 *)xmmword_254633A00;
}

void sub_20AFCF5E8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633A18);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCF600()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633A38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633A38))
    return &xmmword_254633A20;
  v2 = sub_20AFCF6DC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633A20, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633A30 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633A20 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633A20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633A38);
  return &xmmword_254633A20;
}

void sub_20AFCF6C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633A38);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCF6DC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633A58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633A58))
    return &stru_254633A40;
  sub_20AFCF8F4((uint64_t)__p);
  sub_20AFCF7CC((char *)__p, &stru_254633A40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633A40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633A58);
  return &stru_254633A40;
}

void sub_20AFCF78C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633A58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633A58);
  _Unwind_Resume(a1);
}

void sub_20AFCF7CC(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFCFAD8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFCF8C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFCF8F4(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633A78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633A78))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgr32f>]", qword_254633A60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633A60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633A78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633A98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633A98))
  {
    v5 = sub_20AED4780(qword_254633A60, "<", 0);
    sub_20AED467C(qword_254633A60, 0, v5, qword_254633A80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633A80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633A98);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633AB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633AB8))
  {
    sub_20B531658((uint64_t)qword_254633A80, (uint64_t)&xmmword_254633AA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633AA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633AB8);
  }
  if (byte_254633AB7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633AA0, *((unint64_t *)&xmmword_254633AA0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633AA0;
    *(_QWORD *)(a1 + 16) = unk_254633AB0;
  }
}

void sub_20AFCFA90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633AB8);
  _Unwind_Resume(a1);
}

void sub_20AFCFAA8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633A98);
  _Unwind_Resume(a1);
}

void sub_20AFCFAC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633A78);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCFAD8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632A18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632A18))
    return &stru_254632A00;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgr32f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632A00);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632A00, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632A18);
  return &stru_254632A00;
}

void sub_20AFCFB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632A18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632A18);
  _Unwind_Resume(a1);
}

void sub_20AFCFBD0()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFCFBE8(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFCFC14(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFCFC28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD5D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC976C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFCFC60()
{
  return 21;
}

__int128 *sub_20AFCFC6C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633AD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633AD8))
  {
    v2 = sub_20AFCFD44();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633AC0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633AD0 = *((_QWORD *)v2 + 2);
      xmmword_254633AC0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633AC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633AD8);
  }
  if (byte_254633AD7 >= 0)
    return &xmmword_254633AC0;
  else
    return (__int128 *)xmmword_254633AC0;
}

void sub_20AFCFD2C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633AD8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFCFD44()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633AF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633AF8))
    return &xmmword_254633AE0;
  v2 = sub_20AFCFE20();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633AE0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633AF0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633AE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633AE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633AF8);
  return &xmmword_254633AE0;
}

void sub_20AFCFE08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633AF8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFCFE20()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633B18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633B18))
    return &stru_254633B00;
  sub_20AFD0038((uint64_t)__p);
  sub_20AFCFF10((char *)__p, &stru_254633B00);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633B00, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633B18);
  return &stru_254633B00;
}

void sub_20AFCFED0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633B18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633B18);
  _Unwind_Resume(a1);
}

void sub_20AFCFF10(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF8EB6C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD000C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD0038(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633B38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633B38))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb8u>]", qword_254633B20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633B20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633B38);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633B58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633B58))
  {
    v5 = sub_20AED4780(qword_254633B20, "<", 0);
    sub_20AED467C(qword_254633B20, 0, v5, qword_254633B40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633B40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633B58);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633B78);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633B78))
  {
    sub_20B531658((uint64_t)qword_254633B40, (uint64_t)&xmmword_254633B60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633B60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633B78);
  }
  if (byte_254633B77 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633B60, *((unint64_t *)&xmmword_254633B60 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633B60;
    *(_QWORD *)(a1 + 16) = unk_254633B70;
  }
}

void sub_20AFD01D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633B78);
  _Unwind_Resume(a1);
}

void sub_20AFD01EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633B58);
  _Unwind_Resume(a1);
}

void sub_20AFD0204(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633B38);
  _Unwind_Resume(a1);
}

void sub_20AFD021C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD0234(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD0260(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD0274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD650;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC6680(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD02AC()
{
  return 22;
}

__int128 *sub_20AFD02B8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633B98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633B98))
  {
    v2 = sub_20AFD0390();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633B80, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633B90 = *((_QWORD *)v2 + 2);
      xmmword_254633B80 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633B80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633B98);
  }
  if (byte_254633B97 >= 0)
    return &xmmword_254633B80;
  else
    return (__int128 *)xmmword_254633B80;
}

void sub_20AFD0378(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633B98);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD0390()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633BB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633BB8))
    return &xmmword_254633BA0;
  v2 = sub_20AFD046C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633BA0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633BB0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633BA0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633BA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633BB8);
  return &xmmword_254633BA0;
}

void sub_20AFD0454(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633BB8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD046C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633BD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633BD8))
    return &stru_254633BC0;
  sub_20AFD0684((uint64_t)__p);
  sub_20AFD055C((char *)__p, &stru_254633BC0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633BC0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633BD8);
  return &stru_254633BC0;
}

void sub_20AFD051C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633BD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633BD8);
  _Unwind_Resume(a1);
}

void sub_20AFD055C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF8FDE8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD0658(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD0684(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633BF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633BF8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb16u>]", qword_254633BE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633BE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633BF8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633C18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633C18))
  {
    v5 = sub_20AED4780(qword_254633BE0, "<", 0);
    sub_20AED467C(qword_254633BE0, 0, v5, qword_254633C00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633C00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633C18);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633C38);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633C38))
  {
    sub_20B531658((uint64_t)qword_254633C00, (uint64_t)&xmmword_254633C20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633C20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633C38);
  }
  if (byte_254633C37 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633C20, *((unint64_t *)&xmmword_254633C20 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633C20;
    *(_QWORD *)(a1 + 16) = unk_254633C30;
  }
}

void sub_20AFD0820(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633C38);
  _Unwind_Resume(a1);
}

void sub_20AFD0838(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633C18);
  _Unwind_Resume(a1);
}

void sub_20AFD0850(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633BF8);
  _Unwind_Resume(a1);
}

void sub_20AFD0868()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD0880(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD08AC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD08C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD6D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC7914(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD08F8()
{
  return 23;
}

__int128 *sub_20AFD0904()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633C58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633C58))
  {
    v2 = sub_20AFD09DC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633C40, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633C50 = *((_QWORD *)v2 + 2);
      xmmword_254633C40 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633C40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633C58);
  }
  if (byte_254633C57 >= 0)
    return &xmmword_254633C40;
  else
    return (__int128 *)xmmword_254633C40;
}

void sub_20AFD09C4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633C58);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD09DC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633C78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633C78))
    return &xmmword_254633C60;
  v2 = sub_20AFD0AB8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633C60, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633C70 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633C60 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633C60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633C78);
  return &xmmword_254633C60;
}

void sub_20AFD0AA0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633C78);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD0AB8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633C98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633C98))
    return &stru_254633C80;
  sub_20AFD0CD0((uint64_t)__p);
  sub_20AFD0BA8((char *)__p, &stru_254633C80);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633C80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633C98);
  return &stru_254633C80;
}

void sub_20AFD0B68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633C98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633C98);
  _Unwind_Resume(a1);
}

void sub_20AFD0BA8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD0EB4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD0CA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD0CD0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633CB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633CB8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb16f>]", qword_254633CA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633CA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633CB8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633CD8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633CD8))
  {
    v5 = sub_20AED4780(qword_254633CA0, "<", 0);
    sub_20AED467C(qword_254633CA0, 0, v5, qword_254633CC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633CC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633CD8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633CF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633CF8))
  {
    sub_20B531658((uint64_t)qword_254633CC0, (uint64_t)&xmmword_254633CE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633CE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633CF8);
  }
  if (byte_254633CF7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633CE0, *((unint64_t *)&xmmword_254633CE0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633CE0;
    *(_QWORD *)(a1 + 16) = unk_254633CF0;
  }
}

void sub_20AFD0E6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633CF8);
  _Unwind_Resume(a1);
}

void sub_20AFD0E84(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633CD8);
  _Unwind_Resume(a1);
}

void sub_20AFD0E9C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633CB8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD0EB4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632A38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632A38))
    return &stru_254632A20;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb16f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632A20);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632A20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632A38);
  return &stru_254632A20;
}

void sub_20AFD0F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632A38);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632A38);
  _Unwind_Resume(a1);
}

void sub_20AFD0FAC()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD0FC4(uint64_t a1, uint64_t a2)
{
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v3 = *(void **)(a2 + 72);
  if (v3)
  {
    v4 = !*(_DWORD *)(a2 + 96) || *(_DWORD *)(a2 + 92) == 0;
    v5 = v4 || *(_DWORD *)(a2 + 88) == 0;
    v6 = v5 ? 0 : *(_DWORD *)(a2 + 96);
    if (v6 * (*(_DWORD *)(a2 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(void **)(a2 + 72);
    if (v3)
LABEL_14:
      free(v3);
  }
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD1064(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD1078(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD750;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC8C3C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD10B0()
{
  return 24;
}

__int128 *sub_20AFD10BC()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633D18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633D18))
  {
    v2 = sub_20AFD1194();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633D00, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633D10 = *((_QWORD *)v2 + 2);
      xmmword_254633D00 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633D00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633D18);
  }
  if (byte_254633D17 >= 0)
    return &xmmword_254633D00;
  else
    return (__int128 *)xmmword_254633D00;
}

void sub_20AFD117C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633D18);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD1194()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633D38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633D38))
    return &xmmword_254633D20;
  v2 = sub_20AFD1270();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633D20, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633D30 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633D20 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633D20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633D38);
  return &xmmword_254633D20;
}

void sub_20AFD1258(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633D38);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD1270()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633D58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633D58))
    return &stru_254633D40;
  sub_20AFD1488((uint64_t)__p);
  sub_20AFD1360((char *)__p, &stru_254633D40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633D40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633D58);
  return &stru_254633D40;
}

void sub_20AFD1320(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633D58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633D58);
  _Unwind_Resume(a1);
}

void sub_20AFD1360(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD166C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD145C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD1488(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633D78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633D78))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgb32f>]", qword_254633D60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633D60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633D78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633D98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633D98))
  {
    v5 = sub_20AED4780(qword_254633D60, "<", 0);
    sub_20AED467C(qword_254633D60, 0, v5, qword_254633D80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633D80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633D98);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633DB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633DB8))
  {
    sub_20B531658((uint64_t)qword_254633D80, (uint64_t)&xmmword_254633DA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633DA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633DB8);
  }
  if (byte_254633DB7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633DA0, *((unint64_t *)&xmmword_254633DA0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633DA0;
    *(_QWORD *)(a1 + 16) = unk_254633DB0;
  }
}

void sub_20AFD1624(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633DB8);
  _Unwind_Resume(a1);
}

void sub_20AFD163C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633D98);
  _Unwind_Resume(a1);
}

void sub_20AFD1654(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633D78);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD166C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632A58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632A58))
    return &stru_254632A40;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgb32f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632A40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632A40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632A58);
  return &stru_254632A40;
}

void sub_20AFD1724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632A58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632A58);
  _Unwind_Resume(a1);
}

void sub_20AFD1764()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD177C(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD17A8(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD17BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD7D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC976C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD17F4()
{
  return 25;
}

__int128 *sub_20AFD1800()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633DD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633DD8))
  {
    v2 = sub_20AFD18D8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633DC0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633DD0 = *((_QWORD *)v2 + 2);
      xmmword_254633DC0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633DC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633DD8);
  }
  if (byte_254633DD7 >= 0)
    return &xmmword_254633DC0;
  else
    return (__int128 *)xmmword_254633DC0;
}

void sub_20AFD18C0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633DD8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD18D8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633DF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633DF8))
    return &xmmword_254633DE0;
  v2 = sub_20AFD19B4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633DE0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633DF0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633DE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633DE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633DF8);
  return &xmmword_254633DE0;
}

void sub_20AFD199C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633DF8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD19B4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633E18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633E18))
    return &stru_254633E00;
  sub_20AFD1BCC((uint64_t)__p);
  sub_20AFD1AA4((char *)__p, &stru_254633E00);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633E00, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633E18);
  return &stru_254633E00;
}

void sub_20AFD1A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633E18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633E18);
  _Unwind_Resume(a1);
}

void sub_20AFD1AA4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF91068();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD1BA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD1BCC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633E38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633E38))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra8u>]", qword_254633E20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633E20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633E38);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633E58);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633E58))
  {
    v5 = sub_20AED4780(qword_254633E20, "<", 0);
    sub_20AED467C(qword_254633E20, 0, v5, qword_254633E40);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633E40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633E58);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633E78);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633E78))
  {
    sub_20B531658((uint64_t)qword_254633E40, (uint64_t)&xmmword_254633E60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633E60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633E78);
  }
  if (byte_254633E77 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633E60, *((unint64_t *)&xmmword_254633E60 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633E60;
    *(_QWORD *)(a1 + 16) = unk_254633E70;
  }
}

void sub_20AFD1D68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633E78);
  _Unwind_Resume(a1);
}

void sub_20AFD1D80(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633E58);
  _Unwind_Resume(a1);
}

void sub_20AFD1D98(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633E38);
  _Unwind_Resume(a1);
}

void sub_20AFD1DB0()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD1DC8(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD1DF4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD1E08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD850;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC6680(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD1E40()
{
  return 26;
}

__int128 *sub_20AFD1E4C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633E98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633E98))
  {
    v2 = sub_20AFD1F24();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633E80, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633E90 = *((_QWORD *)v2 + 2);
      xmmword_254633E80 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633E80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633E98);
  }
  if (byte_254633E97 >= 0)
    return &xmmword_254633E80;
  else
    return (__int128 *)xmmword_254633E80;
}

void sub_20AFD1F0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633E98);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD1F24()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633EB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633EB8))
    return &xmmword_254633EA0;
  v2 = sub_20AFD2000();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633EA0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633EB0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633EA0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633EA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633EB8);
  return &xmmword_254633EA0;
}

void sub_20AFD1FE8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633EB8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD2000()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633ED8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633ED8))
    return &stru_254633EC0;
  sub_20AFD2218((uint64_t)__p);
  sub_20AFD20F0((char *)__p, &stru_254633EC0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633EC0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633ED8);
  return &stru_254633EC0;
}

void sub_20AFD20B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633ED8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633ED8);
  _Unwind_Resume(a1);
}

void sub_20AFD20F0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD23FC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD21EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD2218(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633EF8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633EF8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra16u>]", qword_254633EE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633EE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633EF8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633F18);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633F18))
  {
    v5 = sub_20AED4780(qword_254633EE0, "<", 0);
    sub_20AED467C(qword_254633EE0, 0, v5, qword_254633F00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633F00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633F18);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633F38);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633F38))
  {
    sub_20B531658((uint64_t)qword_254633F00, (uint64_t)&xmmword_254633F20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633F20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633F38);
  }
  if (byte_254633F37 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633F20, *((unint64_t *)&xmmword_254633F20 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633F20;
    *(_QWORD *)(a1 + 16) = unk_254633F30;
  }
}

void sub_20AFD23B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633F38);
  _Unwind_Resume(a1);
}

void sub_20AFD23CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633F18);
  _Unwind_Resume(a1);
}

void sub_20AFD23E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633EF8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD23FC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632A78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632A78))
    return &stru_254632A60;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra16u]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632A60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632A60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632A78);
  return &stru_254632A60;
}

void sub_20AFD24B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632A78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632A78);
  _Unwind_Resume(a1);
}

void sub_20AFD24F4()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD250C(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD2538(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD254C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD8D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC7914(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD2584()
{
  return 27;
}

__int128 *sub_20AFD2590()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633F58);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254633F58))
  {
    v2 = sub_20AFD2668();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254633F40, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254633F50 = *((_QWORD *)v2 + 2);
      xmmword_254633F40 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633F40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633F58);
  }
  if (byte_254633F57 >= 0)
    return &xmmword_254633F40;
  else
    return (__int128 *)xmmword_254633F40;
}

void sub_20AFD2650(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633F58);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD2668()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633F78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633F78))
    return &xmmword_254633F60;
  v2 = sub_20AFD2744();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254633F60, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254633F70 = v2->__r_.__value_.__r.__words[2];
    xmmword_254633F60 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633F60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633F78);
  return &xmmword_254633F60;
}

void sub_20AFD272C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633F78);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD2744()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254633F98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254633F98))
    return &stru_254633F80;
  sub_20AFD295C((uint64_t)__p);
  sub_20AFD2834((char *)__p, &stru_254633F80);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254633F80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254633F98);
  return &stru_254633F80;
}

void sub_20AFD27F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254633F98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254633F98);
  _Unwind_Resume(a1);
}

void sub_20AFD2834(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD2B40();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD2930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD295C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254633FB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254633FB8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra16f>]", qword_254633FA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633FA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633FB8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254633FD8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254633FD8))
  {
    v5 = sub_20AED4780(qword_254633FA0, "<", 0);
    sub_20AED467C(qword_254633FA0, 0, v5, qword_254633FC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254633FC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633FD8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254633FF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254633FF8))
  {
    sub_20B531658((uint64_t)qword_254633FC0, (uint64_t)&xmmword_254633FE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254633FE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254633FF8);
  }
  if (byte_254633FF7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254633FE0, *((unint64_t *)&xmmword_254633FE0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254633FE0;
    *(_QWORD *)(a1 + 16) = unk_254633FF0;
  }
}

void sub_20AFD2AF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633FF8);
  _Unwind_Resume(a1);
}

void sub_20AFD2B10(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633FD8);
  _Unwind_Resume(a1);
}

void sub_20AFD2B28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254633FB8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD2B40()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632A98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632A98))
    return &stru_254632A80;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra16f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632A80);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632A80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632A98);
  return &stru_254632A80;
}

void sub_20AFD2BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632A98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632A98);
  _Unwind_Resume(a1);
}

void sub_20AFD2C38()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD2C50(uint64_t a1, uint64_t a2)
{
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v3 = *(void **)(a2 + 72);
  if (v3)
  {
    v4 = !*(_DWORD *)(a2 + 96) || *(_DWORD *)(a2 + 92) == 0;
    v5 = v4 || *(_DWORD *)(a2 + 88) == 0;
    v6 = v5 ? 0 : *(_DWORD *)(a2 + 96);
    if (v6 * (*(_DWORD *)(a2 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(void **)(a2 + 72);
    if (v3)
LABEL_14:
      free(v3);
  }
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD2CF0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD2D04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD950;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC8C3C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD2D3C()
{
  return 28;
}

__int128 *sub_20AFD2D48()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634018);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634018))
  {
    v2 = sub_20AFD2E20();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254634000, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254634010 = *((_QWORD *)v2 + 2);
      xmmword_254634000 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634000, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634018);
  }
  if (byte_254634017 >= 0)
    return &xmmword_254634000;
  else
    return (__int128 *)xmmword_254634000;
}

void sub_20AFD2E08(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634018);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD2E20()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634038);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634038))
    return &xmmword_254634020;
  v2 = sub_20AFD2EFC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254634020, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254634030 = v2->__r_.__value_.__r.__words[2];
    xmmword_254634020 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634020, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634038);
  return &xmmword_254634020;
}

void sub_20AFD2EE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634038);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD2EFC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634058);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634058))
    return &stru_254634040;
  sub_20AFD3114((uint64_t)__p);
  sub_20AFD2FEC((char *)__p, &stru_254634040);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634040, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634058);
  return &stru_254634040;
}

void sub_20AFD2FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634058);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634058);
  _Unwind_Resume(a1);
}

void sub_20AFD2FEC(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD32F8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD30E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD3114(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634078);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634078))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Bgra32f>]", qword_254634060);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634060, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634078);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634098);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634098))
  {
    v5 = sub_20AED4780(qword_254634060, "<", 0);
    sub_20AED467C(qword_254634060, 0, v5, qword_254634080);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634080, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634098);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546340B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546340B8))
  {
    sub_20B531658((uint64_t)qword_254634080, (uint64_t)&xmmword_2546340A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546340A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546340B8);
  }
  if (byte_2546340B7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546340A0, *((unint64_t *)&xmmword_2546340A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546340A0;
    *(_QWORD *)(a1 + 16) = unk_2546340B0;
  }
}

void sub_20AFD32B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546340B8);
  _Unwind_Resume(a1);
}

void sub_20AFD32C8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634098);
  _Unwind_Resume(a1);
}

void sub_20AFD32E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634078);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD32F8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632AB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632AB8))
    return &stru_254632AA0;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Bgra32f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632AA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632AA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632AB8);
  return &stru_254632AA0;
}

void sub_20AFD33B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632AB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632AB8);
  _Unwind_Resume(a1);
}

void sub_20AFD33F0()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD3408(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD3434(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD3448(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FD9D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC976C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD3480()
{
  return 29;
}

__int128 *sub_20AFD348C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546340D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546340D8))
  {
    v2 = sub_20AFD3564();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_2546340C0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2546340D0 = *((_QWORD *)v2 + 2);
      xmmword_2546340C0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546340C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546340D8);
  }
  if (byte_2546340D7 >= 0)
    return &xmmword_2546340C0;
  else
    return (__int128 *)xmmword_2546340C0;
}

void sub_20AFD354C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546340D8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD3564()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546340F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546340F8))
    return &xmmword_2546340E0;
  v2 = sub_20AFD3640();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546340E0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546340F0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546340E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546340E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546340F8);
  return &xmmword_2546340E0;
}

void sub_20AFD3628(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546340F8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD3640()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634118);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634118))
    return &stru_254634100;
  sub_20AFD3858((uint64_t)__p);
  sub_20AFD3730((char *)__p, &stru_254634100);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634100, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634118);
  return &stru_254634100;
}

void sub_20AFD36F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634118);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634118);
  _Unwind_Resume(a1);
}

void sub_20AFD3730(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD3A3C();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD382C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD3858(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634138);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634138))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba8u>]", qword_254634120);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634120, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634138);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634158);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634158))
  {
    v5 = sub_20AED4780(qword_254634120, "<", 0);
    sub_20AED467C(qword_254634120, 0, v5, qword_254634140);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634140, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634158);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254634178);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254634178))
  {
    sub_20B531658((uint64_t)qword_254634140, (uint64_t)&xmmword_254634160);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634160, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634178);
  }
  if (byte_254634177 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254634160, *((unint64_t *)&xmmword_254634160 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254634160;
    *(_QWORD *)(a1 + 16) = unk_254634170;
  }
}

void sub_20AFD39F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634178);
  _Unwind_Resume(a1);
}

void sub_20AFD3A0C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634158);
  _Unwind_Resume(a1);
}

void sub_20AFD3A24(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634138);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD3A3C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632AD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632AD8))
    return &stru_254632AC0;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba8u]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632AC0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632AC0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632AD8);
  return &stru_254632AC0;
}

void sub_20AFD3AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632AD8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632AD8);
  _Unwind_Resume(a1);
}

void sub_20AFD3B34()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD3B4C(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD3B78(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD3B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDA50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC6680(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD3BC4()
{
  return 30;
}

__int128 *sub_20AFD3BD0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634198);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634198))
  {
    v2 = sub_20AFD3CA8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254634180, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254634190 = *((_QWORD *)v2 + 2);
      xmmword_254634180 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634180, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634198);
  }
  if (byte_254634197 >= 0)
    return &xmmword_254634180;
  else
    return (__int128 *)xmmword_254634180;
}

void sub_20AFD3C90(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634198);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD3CA8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546341B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546341B8))
    return &xmmword_2546341A0;
  v2 = sub_20AFD3D84();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546341A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546341B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546341A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546341A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546341B8);
  return &xmmword_2546341A0;
}

void sub_20AFD3D6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546341B8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD3D84()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546341D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546341D8))
    return &stru_2546341C0;
  sub_20AFD3F9C((uint64_t)__p);
  sub_20AFD3E74((char *)__p, &stru_2546341C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546341C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546341D8);
  return &stru_2546341C0;
}

void sub_20AFD3E34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546341D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546341D8);
  _Unwind_Resume(a1);
}

void sub_20AFD3E74(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD4180();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD3F70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD3F9C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546341F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546341F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba16u>]", qword_2546341E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546341E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546341F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634218);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634218))
  {
    v5 = sub_20AED4780(qword_2546341E0, "<", 0);
    sub_20AED467C(qword_2546341E0, 0, v5, qword_254634200);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634200, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634218);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254634238);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254634238))
  {
    sub_20B531658((uint64_t)qword_254634200, (uint64_t)&xmmword_254634220);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634220, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634238);
  }
  if (byte_254634237 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254634220, *((unint64_t *)&xmmword_254634220 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254634220;
    *(_QWORD *)(a1 + 16) = unk_254634230;
  }
}

void sub_20AFD4138(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634238);
  _Unwind_Resume(a1);
}

void sub_20AFD4150(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634218);
  _Unwind_Resume(a1);
}

void sub_20AFD4168(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546341F8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD4180()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632AF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632AF8))
    return &stru_254632AE0;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Rgba16u]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632AE0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632AE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632AF8);
  return &stru_254632AE0;
}

void sub_20AFD4238(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632AF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632AF8);
  _Unwind_Resume(a1);
}

void sub_20AFD4278()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD4290(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD42BC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD42D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDAD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC7914(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD4308()
{
  return 31;
}

__int128 *sub_20AFD4314()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634258);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634258))
  {
    v2 = sub_20AFD43EC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254634240, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254634250 = *((_QWORD *)v2 + 2);
      xmmword_254634240 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634240, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634258);
  }
  if (byte_254634257 >= 0)
    return &xmmword_254634240;
  else
    return (__int128 *)xmmword_254634240;
}

void sub_20AFD43D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634258);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD43EC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634278);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634278))
    return &xmmword_254634260;
  v2 = sub_20AFD44C8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254634260, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254634270 = v2->__r_.__value_.__r.__words[2];
    xmmword_254634260 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634260, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634278);
  return &xmmword_254634260;
}

void sub_20AFD44B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634278);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD44C8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634298);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634298))
    return &stru_254634280;
  sub_20AFD46E0((uint64_t)__p);
  sub_20AFD45B8((char *)__p, &stru_254634280);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634280, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634298);
  return &stru_254634280;
}

void sub_20AFD4578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634298);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634298);
  _Unwind_Resume(a1);
}

void sub_20AFD45B8(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF922E4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD46B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD46E0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546342B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546342B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba16f>]", qword_2546342A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546342A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546342B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546342D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546342D8))
  {
    v5 = sub_20AED4780(qword_2546342A0, "<", 0);
    sub_20AED467C(qword_2546342A0, 0, v5, qword_2546342C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546342C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546342D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546342F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546342F8))
  {
    sub_20B531658((uint64_t)qword_2546342C0, (uint64_t)&xmmword_2546342E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546342E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546342F8);
  }
  if (byte_2546342F7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546342E0, *((unint64_t *)&xmmword_2546342E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546342E0;
    *(_QWORD *)(a1 + 16) = unk_2546342F0;
  }
}

void sub_20AFD487C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546342F8);
  _Unwind_Resume(a1);
}

void sub_20AFD4894(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546342D8);
  _Unwind_Resume(a1);
}

void sub_20AFD48AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546342B8);
  _Unwind_Resume(a1);
}

void sub_20AFD48C4()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD48DC(uint64_t a1, uint64_t a2)
{
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v3 = *(void **)(a2 + 72);
  if (v3)
  {
    v4 = !*(_DWORD *)(a2 + 96) || *(_DWORD *)(a2 + 92) == 0;
    v5 = v4 || *(_DWORD *)(a2 + 88) == 0;
    v6 = v5 ? 0 : *(_DWORD *)(a2 + 96);
    if (v6 * (*(_DWORD *)(a2 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(void **)(a2 + 72);
    if (v3)
LABEL_14:
      free(v3);
  }
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD497C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD4990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDB50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC8C3C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD49C8()
{
  return 32;
}

__int128 *sub_20AFD49D4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634318);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634318))
  {
    v2 = sub_20AFD4AAC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254634300, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254634310 = *((_QWORD *)v2 + 2);
      xmmword_254634300 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634300, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634318);
  }
  if (byte_254634317 >= 0)
    return &xmmword_254634300;
  else
    return (__int128 *)xmmword_254634300;
}

void sub_20AFD4A94(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634318);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD4AAC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634338);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634338))
    return &xmmword_254634320;
  v2 = sub_20AFD4B88();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254634320, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254634330 = v2->__r_.__value_.__r.__words[2];
    xmmword_254634320 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634320, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634338);
  return &xmmword_254634320;
}

void sub_20AFD4B70(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634338);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD4B88()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634358);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634358))
    return &stru_254634340;
  sub_20AFD4DA0((uint64_t)__p);
  sub_20AFD4C78((char *)__p, &stru_254634340);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634340, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634358);
  return &stru_254634340;
}

void sub_20AFD4C38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634358);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634358);
  _Unwind_Resume(a1);
}

void sub_20AFD4C78(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF93568();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD4D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD4DA0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634378);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634378))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Rgba32f>]", qword_254634360);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634360, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634378);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634398);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634398))
  {
    v5 = sub_20AED4780(qword_254634360, "<", 0);
    sub_20AED467C(qword_254634360, 0, v5, qword_254634380);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634380, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634398);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546343B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546343B8))
  {
    sub_20B531658((uint64_t)qword_254634380, (uint64_t)&xmmword_2546343A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546343A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546343B8);
  }
  if (byte_2546343B7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546343A0, *((unint64_t *)&xmmword_2546343A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546343A0;
    *(_QWORD *)(a1 + 16) = unk_2546343B0;
  }
}

void sub_20AFD4F3C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546343B8);
  _Unwind_Resume(a1);
}

void sub_20AFD4F54(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634398);
  _Unwind_Resume(a1);
}

void sub_20AFD4F6C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634378);
  _Unwind_Resume(a1);
}

void sub_20AFD4F84()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD4F9C(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD4FC8(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD4FDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDBD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC976C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD5014()
{
  return 33;
}

__int128 *sub_20AFD5020()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546343D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546343D8))
  {
    v2 = sub_20AFD50F8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_2546343C0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2546343D0 = *((_QWORD *)v2 + 2);
      xmmword_2546343C0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546343C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546343D8);
  }
  if (byte_2546343D7 >= 0)
    return &xmmword_2546343C0;
  else
    return (__int128 *)xmmword_2546343C0;
}

void sub_20AFD50E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546343D8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD50F8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546343F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546343F8))
    return &xmmword_2546343E0;
  v2 = sub_20AFD51D4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546343E0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546343F0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546343E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546343E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546343F8);
  return &xmmword_2546343E0;
}

void sub_20AFD51BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546343F8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD51D4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634418);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634418))
    return &stru_254634400;
  sub_20AFD53EC((uint64_t)__p);
  sub_20AFD52C4((char *)__p, &stru_254634400);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634400, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634418);
  return &stru_254634400;
}

void sub_20AFD5284(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634418);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634418);
  _Unwind_Resume(a1);
}

void sub_20AFD52C4(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD55D0();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD53C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD53EC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634438);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634438))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr8u>]", qword_254634420);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634420, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634438);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634458);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634458))
  {
    v5 = sub_20AED4780(qword_254634420, "<", 0);
    sub_20AED467C(qword_254634420, 0, v5, qword_254634440);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634440, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634458);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254634478);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254634478))
  {
    sub_20B531658((uint64_t)qword_254634440, (uint64_t)&xmmword_254634460);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634460, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634478);
  }
  if (byte_254634477 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254634460, *((unint64_t *)&xmmword_254634460 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254634460;
    *(_QWORD *)(a1 + 16) = unk_254634470;
  }
}

void sub_20AFD5588(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634478);
  _Unwind_Resume(a1);
}

void sub_20AFD55A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634458);
  _Unwind_Resume(a1);
}

void sub_20AFD55B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634438);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD55D0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632B18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632B18))
    return &stru_254632B00;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr8u]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632B00);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632B00, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632B18);
  return &stru_254632B00;
}

void sub_20AFD5688(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632B18);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632B18);
  _Unwind_Resume(a1);
}

void sub_20AFD56C8()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD56E0(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD570C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD5720(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDC50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC6680(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD5758()
{
  return 34;
}

__int128 *sub_20AFD5764()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634498);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634498))
  {
    v2 = sub_20AFD583C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254634480, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254634490 = *((_QWORD *)v2 + 2);
      xmmword_254634480 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634480, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634498);
  }
  if (byte_254634497 >= 0)
    return &xmmword_254634480;
  else
    return (__int128 *)xmmword_254634480;
}

void sub_20AFD5824(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634498);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD583C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546344B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546344B8))
    return &xmmword_2546344A0;
  v2 = sub_20AFD5918();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546344A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546344B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546344A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546344A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546344B8);
  return &xmmword_2546344A0;
}

void sub_20AFD5900(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546344B8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD5918()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546344D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546344D8))
    return &stru_2546344C0;
  sub_20AFD5B30((uint64_t)__p);
  sub_20AFD5A08((char *)__p, &stru_2546344C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546344C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546344D8);
  return &stru_2546344C0;
}

void sub_20AFD59C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546344D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546344D8);
  _Unwind_Resume(a1);
}

void sub_20AFD5A08(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD5D14();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD5B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD5B30(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546344F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546344F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr16u>]", qword_2546344E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546344E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546344F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634518);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634518))
  {
    v5 = sub_20AED4780(qword_2546344E0, "<", 0);
    sub_20AED467C(qword_2546344E0, 0, v5, qword_254634500);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634500, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634518);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254634538);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254634538))
  {
    sub_20B531658((uint64_t)qword_254634500, (uint64_t)&xmmword_254634520);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634520, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634538);
  }
  if (byte_254634537 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254634520, *((unint64_t *)&xmmword_254634520 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254634520;
    *(_QWORD *)(a1 + 16) = unk_254634530;
  }
}

void sub_20AFD5CCC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634538);
  _Unwind_Resume(a1);
}

void sub_20AFD5CE4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634518);
  _Unwind_Resume(a1);
}

void sub_20AFD5CFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546344F8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD5D14()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632B38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632B38))
    return &stru_254632B20;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr16u]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632B20);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632B20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632B38);
  return &stru_254632B20;
}

void sub_20AFD5DCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632B38);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632B38);
  _Unwind_Resume(a1);
}

void sub_20AFD5E0C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD5E24(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD5E50(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD5E64(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDCD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC7914(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD5E9C()
{
  return 35;
}

__int128 *sub_20AFD5EA8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634558);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634558))
  {
    v2 = sub_20AFD5F80();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254634540, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254634550 = *((_QWORD *)v2 + 2);
      xmmword_254634540 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634540, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634558);
  }
  if (byte_254634557 >= 0)
    return &xmmword_254634540;
  else
    return (__int128 *)xmmword_254634540;
}

void sub_20AFD5F68(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634558);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD5F80()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634578);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634578))
    return &xmmword_254634560;
  v2 = sub_20AFD605C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254634560, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254634570 = v2->__r_.__value_.__r.__words[2];
    xmmword_254634560 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634560, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634578);
  return &xmmword_254634560;
}

void sub_20AFD6044(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634578);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD605C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634598);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634598))
    return &stru_254634580;
  sub_20AFD6274((uint64_t)__p);
  sub_20AFD614C((char *)__p, &stru_254634580);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634580, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634598);
  return &stru_254634580;
}

void sub_20AFD610C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634598);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634598);
  _Unwind_Resume(a1);
}

void sub_20AFD614C(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD6458();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD6248(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD6274(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546345B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546345B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr16f>]", qword_2546345A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546345A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546345B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546345D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546345D8))
  {
    v5 = sub_20AED4780(qword_2546345A0, "<", 0);
    sub_20AED467C(qword_2546345A0, 0, v5, qword_2546345C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546345C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546345D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546345F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546345F8))
  {
    sub_20B531658((uint64_t)qword_2546345C0, (uint64_t)&xmmword_2546345E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546345E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546345F8);
  }
  if (byte_2546345F7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546345E0, *((unint64_t *)&xmmword_2546345E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546345E0;
    *(_QWORD *)(a1 + 16) = unk_2546345F0;
  }
}

void sub_20AFD6410(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546345F8);
  _Unwind_Resume(a1);
}

void sub_20AFD6428(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546345D8);
  _Unwind_Resume(a1);
}

void sub_20AFD6440(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546345B8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD6458()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632B58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632B58))
    return &stru_254632B40;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr16f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632B40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632B40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632B58);
  return &stru_254632B40;
}

void sub_20AFD6510(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632B58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632B58);
  _Unwind_Resume(a1);
}

void sub_20AFD6550()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD6568(uint64_t a1, uint64_t a2)
{
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v3 = *(void **)(a2 + 72);
  if (v3)
  {
    v4 = !*(_DWORD *)(a2 + 96) || *(_DWORD *)(a2 + 92) == 0;
    v5 = v4 || *(_DWORD *)(a2 + 88) == 0;
    v6 = v5 ? 0 : *(_DWORD *)(a2 + 96);
    if (v6 * (*(_DWORD *)(a2 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(void **)(a2 + 72);
    if (v3)
LABEL_14:
      free(v3);
  }
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD6608(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD661C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDD50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC8C3C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD6654()
{
  return 36;
}

__int128 *sub_20AFD6660()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634618);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634618))
  {
    v2 = sub_20AFD6738();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254634600, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254634610 = *((_QWORD *)v2 + 2);
      xmmword_254634600 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634600, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634618);
  }
  if (byte_254634617 >= 0)
    return &xmmword_254634600;
  else
    return (__int128 *)xmmword_254634600;
}

void sub_20AFD6720(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634618);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD6738()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634638);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634638))
    return &xmmword_254634620;
  v2 = sub_20AFD6814();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254634620, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254634630 = v2->__r_.__value_.__r.__words[2];
    xmmword_254634620 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634620, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634638);
  return &xmmword_254634620;
}

void sub_20AFD67FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634638);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD6814()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634658);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634658))
    return &stru_254634640;
  sub_20AFD6A2C((uint64_t)__p);
  sub_20AFD6904((char *)__p, &stru_254634640);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634640, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634658);
  return &stru_254634640;
}

void sub_20AFD68C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634658);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634658);
  _Unwind_Resume(a1);
}

void sub_20AFD6904(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD6C10();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD6A00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD6A2C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634678);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634678))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Abgr32f>]", qword_254634660);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634660, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634678);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634698);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634698))
  {
    v5 = sub_20AED4780(qword_254634660, "<", 0);
    sub_20AED467C(qword_254634660, 0, v5, qword_254634680);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634680, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634698);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546346B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546346B8))
  {
    sub_20B531658((uint64_t)qword_254634680, (uint64_t)&xmmword_2546346A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546346A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546346B8);
  }
  if (byte_2546346B7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546346A0, *((unint64_t *)&xmmword_2546346A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546346A0;
    *(_QWORD *)(a1 + 16) = unk_2546346B0;
  }
}

void sub_20AFD6BC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546346B8);
  _Unwind_Resume(a1);
}

void sub_20AFD6BE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634698);
  _Unwind_Resume(a1);
}

void sub_20AFD6BF8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634678);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD6C10()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632B78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632B78))
    return &stru_254632B60;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Abgr32f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632B60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632B60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632B78);
  return &stru_254632B60;
}

void sub_20AFD6CC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632B78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632B78);
  _Unwind_Resume(a1);
}

void sub_20AFD6D08()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD6D20(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD6D4C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD6D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDDD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC976C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD6D98()
{
  return 37;
}

__int128 *sub_20AFD6DA4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546346D8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_2546346D8))
  {
    v2 = sub_20AFD6E7C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_2546346C0, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_2546346D0 = *((_QWORD *)v2 + 2);
      xmmword_2546346C0 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546346C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546346D8);
  }
  if (byte_2546346D7 >= 0)
    return &xmmword_2546346C0;
  else
    return (__int128 *)xmmword_2546346C0;
}

void sub_20AFD6E64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546346D8);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD6E7C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546346F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546346F8))
    return &xmmword_2546346E0;
  v2 = sub_20AFD6F58();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546346E0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546346F0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546346E0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546346E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546346F8);
  return &xmmword_2546346E0;
}

void sub_20AFD6F40(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546346F8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD6F58()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634718);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634718))
    return &stru_254634700;
  sub_20AFD7170((uint64_t)__p);
  sub_20AFD7048((char *)__p, &stru_254634700);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634700, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634718);
  return &stru_254634700;
}

void sub_20AFD7008(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634718);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634718);
  _Unwind_Resume(a1);
}

void sub_20AFD7048(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF947E8();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD7144(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD7170(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634738);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634738))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb8u>]", qword_254634720);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634720, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634738);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634758);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634758))
  {
    v5 = sub_20AED4780(qword_254634720, "<", 0);
    sub_20AED467C(qword_254634720, 0, v5, qword_254634740);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634740, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634758);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254634778);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254634778))
  {
    sub_20B531658((uint64_t)qword_254634740, (uint64_t)&xmmword_254634760);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634760, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634778);
  }
  if (byte_254634777 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254634760, *((unint64_t *)&xmmword_254634760 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254634760;
    *(_QWORD *)(a1 + 16) = unk_254634770;
  }
}

void sub_20AFD730C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634778);
  _Unwind_Resume(a1);
}

void sub_20AFD7324(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634758);
  _Unwind_Resume(a1);
}

void sub_20AFD733C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634738);
  _Unwind_Resume(a1);
}

void sub_20AFD7354()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD736C(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD7398(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD73AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDE50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC6680(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD73E4()
{
  return 38;
}

__int128 *sub_20AFD73F0()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634798);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634798))
  {
    v2 = sub_20AFD74C8();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254634780, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254634790 = *((_QWORD *)v2 + 2);
      xmmword_254634780 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634780, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634798);
  }
  if (byte_254634797 >= 0)
    return &xmmword_254634780;
  else
    return (__int128 *)xmmword_254634780;
}

void sub_20AFD74B0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634798);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD74C8()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546347B8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546347B8))
    return &xmmword_2546347A0;
  v2 = sub_20AFD75A4();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546347A0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546347B0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546347A0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546347A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546347B8);
  return &xmmword_2546347A0;
}

void sub_20AFD758C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546347B8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD75A4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546347D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546347D8))
    return &stru_2546347C0;
  sub_20AFD77BC((uint64_t)__p);
  sub_20AFD7694((char *)__p, &stru_2546347C0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546347C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546347D8);
  return &stru_2546347C0;
}

void sub_20AFD7654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546347D8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546347D8);
  _Unwind_Resume(a1);
}

void sub_20AFD7694(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF95A64();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD7790(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD77BC(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546347F8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546347F8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb16u>]", qword_2546347E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546347E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546347F8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634818);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634818))
  {
    v5 = sub_20AED4780(qword_2546347E0, "<", 0);
    sub_20AED467C(qword_2546347E0, 0, v5, qword_254634800);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634800, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634818);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254634838);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254634838))
  {
    sub_20B531658((uint64_t)qword_254634800, (uint64_t)&xmmword_254634820);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634820, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634838);
  }
  if (byte_254634837 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254634820, *((unint64_t *)&xmmword_254634820 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254634820;
    *(_QWORD *)(a1 + 16) = unk_254634830;
  }
}

void sub_20AFD7958(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634838);
  _Unwind_Resume(a1);
}

void sub_20AFD7970(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634818);
  _Unwind_Resume(a1);
}

void sub_20AFD7988(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546347F8);
  _Unwind_Resume(a1);
}

void sub_20AFD79A0()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD79B8(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD79E4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD79F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDED0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC7914(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD7A30()
{
  return 39;
}

__int128 *sub_20AFD7A3C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634858);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634858))
  {
    v2 = sub_20AFD7B14();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254634840, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254634850 = *((_QWORD *)v2 + 2);
      xmmword_254634840 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634840, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634858);
  }
  if (byte_254634857 >= 0)
    return &xmmword_254634840;
  else
    return (__int128 *)xmmword_254634840;
}

void sub_20AFD7AFC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634858);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD7B14()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634878);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634878))
    return &xmmword_254634860;
  v2 = sub_20AFD7BF0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254634860, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254634870 = v2->__r_.__value_.__r.__words[2];
    xmmword_254634860 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634860, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634878);
  return &xmmword_254634860;
}

void sub_20AFD7BD8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634878);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD7BF0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634898);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634898))
    return &stru_254634880;
  sub_20AFD7E08((uint64_t)__p);
  sub_20AFD7CE0((char *)__p, &stru_254634880);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634880, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634898);
  return &stru_254634880;
}

void sub_20AFD7CA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634898);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634898);
  _Unwind_Resume(a1);
}

void sub_20AFD7CE0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD7FEC();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD7DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD7E08(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_2546348B8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_2546348B8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb16f>]", qword_2546348A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546348A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546348B8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_2546348D8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_2546348D8))
  {
    v5 = sub_20AED4780(qword_2546348A0, "<", 0);
    sub_20AED467C(qword_2546348A0, 0, v5, qword_2546348C0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_2546348C0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546348D8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546348F8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546348F8))
  {
    sub_20B531658((uint64_t)qword_2546348C0, (uint64_t)&xmmword_2546348E0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546348E0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546348F8);
  }
  if (byte_2546348F7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546348E0, *((unint64_t *)&xmmword_2546348E0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546348E0;
    *(_QWORD *)(a1 + 16) = unk_2546348F0;
  }
}

void sub_20AFD7FA4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546348F8);
  _Unwind_Resume(a1);
}

void sub_20AFD7FBC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546348D8);
  _Unwind_Resume(a1);
}

void sub_20AFD7FD4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546348B8);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD7FEC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632B98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632B98))
    return &stru_254632B80;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb16f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632B80);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632B80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632B98);
  return &stru_254632B80;
}

void sub_20AFD80A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632B98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632B98);
  _Unwind_Resume(a1);
}

void sub_20AFD80E4()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD80FC(uint64_t a1, uint64_t a2)
{
  void *v3;
  BOOL v4;
  BOOL v5;
  int v6;

  v3 = *(void **)(a2 + 72);
  if (v3)
  {
    v4 = !*(_DWORD *)(a2 + 96) || *(_DWORD *)(a2 + 92) == 0;
    v5 = v4 || *(_DWORD *)(a2 + 88) == 0;
    v6 = v5 ? 0 : *(_DWORD *)(a2 + 96);
    if (v6 * (*(_DWORD *)(a2 + 108) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v3 = *(void **)(a2 + 72);
    if (v3)
LABEL_14:
      free(v3);
  }
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD819C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD81B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDF50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC8C3C(a2 + 64, a3 + 64);
}

uint64_t sub_20AFD81E8()
{
  return 40;
}

__int128 *sub_20AFD81F4()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634918);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634918))
  {
    v2 = sub_20AFD82CC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(&xmmword_254634900, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      unk_254634910 = *((_QWORD *)v2 + 2);
      xmmword_254634900 = v3;
    }
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634900, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634918);
  }
  if (byte_254634917 >= 0)
    return &xmmword_254634900;
  else
    return (__int128 *)xmmword_254634900;
}

void sub_20AFD82B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634918);
  _Unwind_Resume(a1);
}

__int128 *sub_20AFD82CC()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634938);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634938))
    return &xmmword_254634920;
  v2 = sub_20AFD83A8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254634920, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254634930 = v2->__r_.__value_.__r.__words[2];
    xmmword_254634920 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634920, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634938);
  return &xmmword_254634920;
}

void sub_20AFD8390(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634938);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD83A8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634958);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634958))
    return &stru_254634940;
  sub_20AFD85C0((uint64_t)__p);
  sub_20AFD8498((char *)__p, &stru_254634940);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634940, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634958);
  return &stru_254634940;
}

void sub_20AFD8458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634958);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634958);
  _Unwind_Resume(a1);
}

void sub_20AFD8498(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AFD87A4();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20AFD8594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20AFD85C0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634978);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634978))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::ArrayImageBuffer<cv3d::kit::img::Format::Argb32f>]", qword_254634960);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634960, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634978);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634998);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634998))
  {
    v5 = sub_20AED4780(qword_254634960, "<", 0);
    sub_20AED467C(qword_254634960, 0, v5, qword_254634980);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634980, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634998);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546349B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546349B8))
  {
    sub_20B531658((uint64_t)qword_254634980, (uint64_t)&xmmword_2546349A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546349A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546349B8);
  }
  if (byte_2546349B7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546349A0, *((unint64_t *)&xmmword_2546349A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546349A0;
    *(_QWORD *)(a1 + 16) = unk_2546349B0;
  }
}

void sub_20AFD875C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546349B8);
  _Unwind_Resume(a1);
}

void sub_20AFD8774(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634998);
  _Unwind_Resume(a1);
}

void sub_20AFD878C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634978);
  _Unwind_Resume(a1);
}

std::string *sub_20AFD87A4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254632BB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254632BB8))
    return &stru_254632BA0;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::img::Format::Argb32f]", __p);
  sub_20B531884((uint64_t)__p, &stru_254632BA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254632BA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254632BB8);
  return &stru_254632BA0;
}

void sub_20AFD885C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254632BB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254632BB8);
  _Unwind_Resume(a1);
}

void sub_20AFD889C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD88B4(uint64_t a1, uint64_t a2)
{
  void *v3;

  v3 = *(void **)(a2 + 72);
  if (v3)
    free(v3);
  *(_QWORD *)(a2 + 72) = 0;
}

__n128 sub_20AFD88E0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

uint64_t sub_20AFD88F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;

  *(_QWORD *)a2 = &off_24C3FDFD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  return sub_20AFC976C(a2 + 64, a3 + 64);
}

void sub_20AFD8930()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFD8944(int a1@<W1>, uint64_t a2@<X8>)
{
  sub_20AFD8994(a2, a1);
}

void sub_20AFD896C(int a1@<W1>, uint64_t a2@<X8>)
{
  sub_20AFDED6C(a2, a1);
}

void sub_20AFD8994(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_20AFD89E8(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  size_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;
  uint64_t v18;
  int v19;
  int v20;
  char v21;
  _QWORD v22[2];
  __int128 v23;
  uint64_t (**v24)();
  _BYTE v25[28];
  size_t v26;
  uint64_t v27;
  uint64_t v28;
  __int128 v29;
  int v30;
  void *v31[30];

  LODWORD(v6) = *a3;
  if (a3[1])
    v6 = v6;
  else
    v6 = 0;
  v7 = (*a3 != 0) | (unint64_t)(v6 << 32);
  v8 = *(_QWORD *)a3;
  v21 = 0;
  v22[1] = off_24C3FAA48;
  *(_QWORD *)&v23 = v8;
  *((_QWORD *)&v23 + 1) = v7;
  if (HIDWORD(v8))
    v9 = (_DWORD)v8 == 0;
  else
    v9 = 1;
  v10 = v9;
  if (v9)
    v8 = 0;
  *(_QWORD *)(v4 + 208) = &off_24C3FCC50;
  *(_QWORD *)(v4 + 216) = v8;
  *(_QWORD *)(v4 + 224) = v7;
  *(_BYTE *)(v5 - 160) = 0;
  *(_BYTE *)(v5 - 152) = 0;
  *(_QWORD *)(v4 + 168) = v7;
  if ((_DWORD)v8)
    v11 = v10;
  else
    v11 = 1;
  if (v11)
    v12 = 0;
  else
    v12 = v8;
  v22[0] = v12;
  if ((v6 & (v6 - 1)) != 0)
    v13 = 1;
  else
    v13 = v6;
  v14 = sub_20B4C20F0((size_t *)(v5 - 144), v22, v31, 1, (void **)&v21, 1, v13);
  v24 = &off_24C3FCC50;
  *(_OWORD *)v25 = *(_OWORD *)(v5 - 176);
  *(_OWORD *)&v25[12] = *(_OWORD *)(v5 - 164);
  v15 = *(_QWORD *)(v4 + 256);
  v16 = *(_QWORD *)(v4 + 264);
  v26 = *v14;
  v27 = v15;
  v28 = v16;
  v29 = *(_OWORD *)(v4 + 272);
  v30 = 1;
  result = operator new();
  v18 = result;
  *(_QWORD *)result = off_24C3FAA48;
  *(_OWORD *)(result + 8) = v23;
  *(_BYTE *)(result + 24) = 0;
  *(_DWORD *)(result + 104) = -1;
  v19 = v30;
  if (v30 != -1)
  {
    result = ((uint64_t (*)(void **, uint64_t, uint64_t (***)()))off_24C3FC740[v30])(v31, result + 24, &v24);
    *(_DWORD *)(v18 + 104) = v19;
    v20 = v30;
    if (!v30)
    {
      v20 = *(_DWORD *)&v25[8];
      if (!*(_QWORD *)&v25[8])
      {
LABEL_26:
        result = ((uint64_t (*)(uint64_t, uint64_t (***)()))off_24C3FC1F8[v20])(v5 - 184, &v24);
        goto LABEL_27;
      }
      result = (*(uint64_t (**)(_QWORD, uint64_t (**)()))&v25[8])(*(_QWORD *)v25, v24);
      v20 = v30;
    }
    if (v20 != -1)
      goto LABEL_26;
  }
LABEL_27:
  *v3 = v18;
  return result;
}

void sub_20AFDC958()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFDC98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20AFDDC64(_DWORD *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  int v6;
  unint64_t v7;
  int v8;
  unint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  size_t v15;
  int v16;
  void *v17;
  void *memptr;

  v2 = a2;
  LODWORD(a2) = *a1;
  if (a1[1])
    a2 = a2;
  else
    a2 = 0;
  v3 = (*a1 != 0) | (unint64_t)(a2 << 32);
  v4 = *(_QWORD *)a1;
  *(_QWORD *)v2 = off_24C3FAA48;
  *(_QWORD *)(v2 + 8) = v4;
  *(_QWORD *)(v2 + 16) = v3;
  if (HIDWORD(v4))
    v5 = (_DWORD)v4 == 0;
  else
    v5 = 1;
  v6 = v5;
  if (v5)
    v7 = 0;
  else
    v7 = v4;
  if ((_DWORD)v7)
    v8 = v6;
  else
    v8 = 1;
  if (v8)
    v9 = 0;
  else
    v9 = v7;
  v10 = (HIDWORD(v9) * a2);
  if ((a2 & (a2 - 1)) != 0)
    v11 = 0;
  else
    v11 = a2 - 1;
  v12 = v11 | (v11 >> 1) | ((v11 | (v11 >> 1)) >> 2);
  v13 = v12 | (v12 >> 4) | ((v12 | (v12 >> 4)) >> 8);
  v14 = v13 | (v13 >> 16) | ((v13 | (v13 >> 16)) >> 32);
  if (v14 + 1 > 8)
    v15 = v14 + 1;
  else
    v15 = 8;
  if ((_DWORD)v10)
  {
    memptr = 0;
    v16 = malloc_type_posix_memalign(&memptr, v15, v10, 0x1F88E90uLL);
    if (v16)
      sub_20B525948(v16, v15, v10);
    v17 = memptr;
  }
  else
  {
    v17 = 0;
  }
  *(_QWORD *)(v2 + 24) = &off_24C3FCC50;
  *(_QWORD *)(v2 + 32) = v7;
  *(_QWORD *)(v2 + 40) = v3;
  *(_BYTE *)(v2 + 48) = 0;
  *(_BYTE *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = v10;
  *(_QWORD *)(v2 + 72) = v17;
  *(_QWORD *)(v2 + 80) = v15;
  *(_QWORD *)(v2 + 88) = v9;
  *(_QWORD *)(v2 + 96) = v3;
  *(_DWORD *)(v2 + 104) = 1;
}

__n128 sub_20AFDDD8C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDDDA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FCC50;
  v3 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

__n128 sub_20AFDDDDC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDDDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FCCD0;
  v3 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

__n128 sub_20AFDDE2C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDDE40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FCD50;
  v3 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

__n128 sub_20AFDDE7C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDDE90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FCDD0;
  v3 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(a2 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 40) = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_QWORD *)(a3 + 40) = 0;
  *(_QWORD *)(a3 + 48) = 0;
  result = *(__n128 *)(a3 + 64);
  *(__n128 *)(a2 + 64) = result;
  return result;
}

__n128 sub_20AFDDECC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDDEE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FCE50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDDF34(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDDF48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FCED0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDDF9C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDDFB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FCF50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE004(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE018(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FCFD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE06C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD050;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE0D4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE0E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD0D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE13C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE150(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD150;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE1A4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE1B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD1D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE20C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD250;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE274(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD2D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE2DC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE2F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD350;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE344(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE358(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD3D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE3AC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE3C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD450;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE414(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD4D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE47C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD550;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE4E4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE4F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD5D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE54C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE560(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD650;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE5B4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE5C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD6D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE61C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE630(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD750;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE684(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD7D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE6EC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE700(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD850;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE754(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE768(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD8D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE7BC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE7D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD950;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE824(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE838(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FD9D0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE88C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDA50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE8F4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE908(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDAD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE95C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE970(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDB50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDE9C4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDE9D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDBD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDEA2C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDEA40(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDC50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDEA94(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDEAA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDCD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDEAFC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDEB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDD50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDEB64(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDEB78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDDD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDEBCC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDEBE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDE50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDEC34(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDEC48(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDED0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDEC9C(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDECB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDF50;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

__n128 sub_20AFDED04(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  return result;
}

__n128 sub_20AFDED18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FDFD0;
  v3 = *(_OWORD *)(a3 + 8);
  v4 = *(_OWORD *)(a3 + 24);
  v5 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(a2 + 40) = v5;
  *(_OWORD *)(a2 + 24) = v4;
  *(_OWORD *)(a2 + 8) = v3;
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a3 + 64);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a3 + 80);
  *(_QWORD *)(a3 + 64) = 0;
  *(_QWORD *)(a3 + 72) = 0;
  result = *(__n128 *)(a3 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a3 + 104);
  *(__n128 *)(a2 + 88) = result;
  return result;
}

void sub_20AFDED6C(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

uint64_t sub_20AFDEDBC(uint64_t a1, uint64_t a2, _DWORD *a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  int v7;
  int v8;
  _BYTE v9[24];
  _QWORD v10[2];
  uint64_t (*v11)(_QWORD, _QWORD);
  int v12;
  uint64_t v13;

  sub_20AFDDC64(a3, (uint64_t)v9);
  result = operator new();
  v6 = result;
  *(_QWORD *)result = off_24C3FAA48;
  *(_OWORD *)(result + 8) = *(_OWORD *)&v9[8];
  *(_BYTE *)(result + 24) = 0;
  *(_DWORD *)(result + 104) = -1;
  v7 = v12;
  if (v12 != -1)
  {
    result = ((uint64_t (*)(uint64_t *, uint64_t, _QWORD *))off_24C3FC740[v12])(&v13, result + 24, v10);
    *(_DWORD *)(v6 + 104) = v7;
    v8 = v12;
    if (!v12)
    {
      v8 = (int)v11;
      if (!v11)
      {
LABEL_6:
        result = ((uint64_t (*)(uint64_t, _QWORD *))off_24C3FC1F8[v8])(v4 - 168, v10);
        goto LABEL_7;
      }
      result = v11(v10[1], v10[0]);
      v8 = v12;
    }
    if (v8 != -1)
      goto LABEL_6;
  }
LABEL_7:
  *v3 = v6;
  return result;
}

void sub_20AFE2DF0()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFE2E24(_Unwind_Exception *exception_object, int a2)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

__n128 sub_20AFE40FC(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[5].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC1F8[v5])(&v7, v4);
  }
  v4[5].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[5].n128_u32[0] = 0;
  return result;
}

void sub_20AFE418C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  size_t v12[4];
  _QWORD v13[3];
  __int128 v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 80);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(size_t *, uint64_t))off_24C3FC1F8[v5])(v12, v4);
LABEL_10:
    *(_DWORD *)(v4 + 80) = -1;
    *(_QWORD *)v4 = &off_24C3FCC50;
    v9 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v4 + 20) = *(_OWORD *)(a3 + 20);
    *(_OWORD *)(v4 + 8) = v9;
    sub_20AFC3C68(v4 + 40, a3 + 40);
    *(_DWORD *)(v4 + 80) = 1;
    return;
  }
  v7 = (_OWORD *)(a2 + 8);
  v8 = (_OWORD *)(a3 + 8);
  if (*(_QWORD *)(a2 + 48)
    && *(_DWORD *)v8 == *(_DWORD *)v7
    && *(_DWORD *)(a3 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a3 + 16) == *(_DWORD *)(a2 + 16)
    && *(_DWORD *)(a3 + 20) == *(_DWORD *)(a2 + 20))
  {
    v12[0] = a3 + 8;
    v12[1] = a2 + 8;
    sub_20AFE4300(v12);
  }
  else
  {
    *(_OWORD *)v12 = *v8;
    *(_OWORD *)((char *)&v12[1] + 4) = *(_OWORD *)(a3 + 20);
    sub_20AFC3C68((uint64_t)v13, a3 + 40);
    *v7 = *(_OWORD *)v12;
    *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)&v12[1] + 4);
    *(_OWORD *)(a2 + 64) = v14;
    *(_QWORD *)(a2 + 40) = v13[0];
    v10 = *(void **)(a2 + 48);
    if (v10)
      free(v10);
    v11 = v13[2];
    *(_QWORD *)(a2 + 48) = v13[1];
    *(_QWORD *)(a2 + 56) = v11;
  }
}

size_t *sub_20AFE4300(size_t *result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v6;
  BOOL v7;
  int v8;
  _BYTE *v9;
  size_t *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int i;
  int v15;
  _BYTE *v16;
  int v17;
  unsigned int v18;
  size_t v19;
  const void *v20;
  BOOL v21;
  BOOL v22;
  size_t v23;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 8);
  v4 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v17 = *(_DWORD *)(v1 + 12);
    if (v17 == *(_DWORD *)(v2 + 12))
    {
      v18 = *(_DWORD *)v1;
      if (v17 == *(_DWORD *)v1)
      {
        v19 = (*(_DWORD *)(v1 + 4) * v17);
        v20 = *(const void **)(v1 + 40);
        if ((_DWORD)v19)
          v21 = v20 == 0;
        else
          v21 = 0;
        if (v21)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            abort();
          }
        }
        else if (!(_DWORD)v19)
        {
          return result;
        }
        return (size_t *)memmove(*(void **)(v2 + 40), v20, v19);
      }
    }
    else
    {
      v18 = *(_DWORD *)v1;
    }
    v23 = v18;
    if (v18)
      v22 = *(_DWORD *)(v1 + 4) == 0;
    else
      v22 = 1;
    if (!v22)
      return sub_20AFE44C4(&v23, v1, v2);
  }
  else
  {
    v6 = *(_DWORD *)(v1 + 4);
    if (*(_DWORD *)v1)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = *(_DWORD *)v1 - 1;
      v9 = *(_BYTE **)(v1 + 40);
      v10 = *(size_t **)(v2 + 40);
      v11 = v6 - 1;
      if (v11)
      {
        v12 = *(unsigned int *)(v2 + 12);
        v13 = *(unsigned int *)(v1 + 12);
        if (*(_DWORD *)v1 == 1)
        {
          do
          {
            *(_BYTE *)v10 = *v9;
            v9 += v13;
            v10 = (size_t *)((char *)v10 + v12);
            --v11;
          }
          while (v11);
        }
        else
        {
          for (i = 0; i != v11; ++i)
          {
            v15 = v8;
            v16 = v9;
            result = v10;
            do
            {
              *(_BYTE *)result = *v16;
              v16 += v3;
              result = (size_t *)((char *)result + v4);
              --v15;
            }
            while (v15);
            *(_BYTE *)result = *v16;
            v9 += v13;
            v10 = (size_t *)((char *)v10 + v12);
          }
        }
      }
      for (; v8; --v8)
      {
        *(_BYTE *)v10 = *v9;
        v9 += v3;
        v10 = (size_t *)((char *)v10 + v4);
      }
      *(_BYTE *)v10 = *v9;
    }
  }
  return result;
}

size_t *sub_20AFE44C4(size_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  size_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  size_t v12;

  v3 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *(char **)(a2 + 40);
    v7 = *(char **)(a3 + 40);
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = *(unsigned int *)(a3 + 12);
      v10 = *(unsigned int *)(a2 + 12);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (size_t *)memmove(v7, v6, v11);
LABEL_11:
        v6 += v10;
        v7 += v9;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_19:
        abort();
      }
      return (size_t *)memmove(v7, v6, v12);
    }
    if (v12)
      return (size_t *)memmove(v7, v6, v12);
  }
  return result;
}

__n128 sub_20AFE4610(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[5].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC218[v5])(&v7, v4);
  }
  v4[5].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[5].n128_u32[0] = 0;
  return result;
}

void sub_20AFE46A0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v7;
  _OWORD *v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  _OWORD v12[2];
  _QWORD v13[3];
  __int128 v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 80);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C3FC218[v5])(v12, v4);
LABEL_10:
    *(_DWORD *)(v4 + 80) = -1;
    *(_QWORD *)v4 = &off_24C3FCCD0;
    v9 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v4 + 20) = *(_OWORD *)(a3 + 20);
    *(_OWORD *)(v4 + 8) = v9;
    sub_20AFC4744(v4 + 40, a3 + 40);
    *(_DWORD *)(v4 + 80) = 1;
    return;
  }
  v7 = (_OWORD *)(a2 + 8);
  v8 = (_OWORD *)(a3 + 8);
  if (*(_QWORD *)(a2 + 48)
    && *(_DWORD *)v8 == *(_DWORD *)v7
    && *(_DWORD *)(a3 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a3 + 16) == *(_DWORD *)(a2 + 16)
    && *(_DWORD *)(a3 + 20) == *(_DWORD *)(a2 + 20))
  {
    sub_20AFE480C((uint64_t)v8, a2 + 8);
  }
  else
  {
    v12[0] = *v8;
    *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)(a3 + 20);
    sub_20AFC4744((uint64_t)v13, a3 + 40);
    *v7 = v12[0];
    *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)v12 + 12);
    *(_OWORD *)(a2 + 64) = v14;
    *(_QWORD *)(a2 + 40) = v13[0];
    v10 = *(void **)(a2 + 48);
    if (v10)
      free(v10);
    v11 = v13[2];
    *(_QWORD *)(a2 + 48) = v13[1];
    *(_QWORD *)(a2 + 56) = v11;
  }
}

uint64_t sub_20AFE480C(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v6;
  BOOL v7;
  int v8;
  _WORD *v9;
  _WORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _WORD *v17;
  _WORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  int v23;
  BOOL v25;
  uint64_t v26;
  const void *v27;
  BOOL v28;
  uint64_t v29;

  v3 = *(unsigned int *)(result + 8);
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v22 = *(_DWORD *)(result + 12);
    v23 = *(_DWORD *)result;
    if (v22 == *(_DWORD *)(a2 + 12) && v22 == v23)
    {
      v26 = (*(_DWORD *)(result + 4) * v22);
      v27 = *(const void **)(result + 40);
      if ((_DWORD)v26)
        v28 = v27 == 0;
      else
        v28 = 0;
      if (v28)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
      }
      else if (!(_DWORD)v26)
      {
        return result;
      }
      return (uint64_t)memmove(*(void **)(a2 + 40), v27, 2 * v26);
    }
    v29 = *(unsigned int *)result;
    if (v23)
      v25 = *(_DWORD *)(result + 4) == 0;
    else
      v25 = 1;
    if (!v25)
      return (uint64_t)sub_20AFE49E8(&v29, result, a2);
  }
  else
  {
    v6 = *(_DWORD *)(result + 4);
    if (*(_DWORD *)result)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = *(_DWORD *)result - 1;
      v9 = *(_WORD **)(result + 40);
      v10 = *(_WORD **)(a2 + 40);
      v11 = v6 - 1;
      if (v11)
      {
        v12 = *(unsigned int *)(a2 + 12);
        v13 = *(unsigned int *)(result + 12);
        if (*(_DWORD *)result == 1)
        {
          do
          {
            *v10 = *v9;
            v9 += v13;
            v10 += v12;
            --v11;
          }
          while (v11);
LABEL_38:
          *v10 = *v9;
          return result;
        }
        v14 = 0;
        v15 = 2 * v13;
        v16 = 2 * v12;
        result = 2 * v4;
        do
        {
          v17 = v10;
          v18 = v9;
          v19 = v8;
          do
          {
            *v17 = *v18;
            v18 += v3;
            v17 = (_WORD *)((char *)v17 + result);
            --v19;
          }
          while (v19);
          *v17 = *v18;
          v9 = (_WORD *)((char *)v9 + v15);
          v10 = (_WORD *)((char *)v10 + v16);
          ++v14;
        }
        while (v14 != v11);
      }
      if (v8)
      {
        v20 = 2 * v3;
        v21 = 2 * v4;
        do
        {
          *v10 = *v9;
          v9 = (_WORD *)((char *)v9 + v20);
          v10 = (_WORD *)((char *)v10 + v21);
          --v8;
        }
        while (v8);
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t *sub_20AFE49E8(uint64_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *(char **)(a2 + 40);
    v7 = *(char **)(a3 + 40);
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = 2 * *(unsigned int *)(a2 + 12);
      v10 = 2 * *(unsigned int *)(a3 + 12);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (uint64_t *)memmove(v7, v6, 2 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_19:
        abort();
      }
      return (uint64_t *)memmove(v7, v6, 2 * v12);
    }
    if (v12)
      return (uint64_t *)memmove(v7, v6, 2 * v12);
  }
  return result;
}

__int16 sub_20AFE4B3C@<H0>(uint64_t *a1@<X0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  int v8;
  BOOL v9;
  int v10;
  _WORD *v11;
  _WORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  _WORD *v21;
  _WORD *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  __int128 v28;
  _WORD *v29;
  unint64_t v30;
  __int16 *v31;
  unint64_t v32;
  unint64_t v33;
  _WORD *v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  __int16 v39;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(v2 + 16);
  v5 = *(unsigned int *)(v3 + 16);
  if ((_DWORD)v4 == 1 && (_DWORD)v5 == 1)
  {
    v24 = *(_DWORD *)(v2 + 20);
    if (v24 != *(_DWORD *)(v3 + 20) || v24 != *(_DWORD *)(v2 + 8))
    {
      LOWORD(v28) = sub_20AFE4D64((uint64_t *)v2, (uint64_t *)v3);
      return v28;
    }
    v25 = (*(_DWORD *)(v2 + 12) * v24);
    v26 = *(_QWORD *)v2;
    if ((_DWORD)v25)
      v27 = v26 == 0;
    else
      v27 = 0;
    if (v27)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
    }
    else if (!(_DWORD)v25)
    {
      return v28;
    }
    v29 = *(_WORD **)v3;
    v30 = (v25 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v30 < 0xF)
    {
      v31 = (__int16 *)v26;
    }
    else
    {
      v31 = (__int16 *)v26;
      if ((unint64_t)v29 - v26 >= 0x20)
      {
        v32 = v30 + 1;
        v33 = v32 & 0xFFFFFFFFFFFFFFF0;
        v34 = &v29[v33];
        v31 = (__int16 *)(v26 + v33 * 2);
        v35 = (__int128 *)(v26 + 16);
        v36 = v29 + 8;
        v37 = v32 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v28 = *(v35 - 1);
          v38 = *v35;
          *(v36 - 1) = v28;
          *v36 = v38;
          v35 += 2;
          v36 += 2;
          v37 -= 16;
        }
        while (v37);
        v29 = v34;
        if (v32 == (v32 & 0xFFFFFFFFFFFFFFF0))
          return v28;
      }
    }
    do
    {
      v39 = *v31++;
      LOWORD(v28) = v39;
      *v29++ = v39;
    }
    while (v31 != (__int16 *)(v26 + 2 * v25));
    return v28;
  }
  v7 = *(_DWORD *)(v2 + 8);
  v8 = *(_DWORD *)(v2 + 12);
  if (v7)
    v9 = v8 == 0;
  else
    v9 = 1;
  if (!v9)
  {
    v10 = v7 - 1;
    v11 = *(_WORD **)v2;
    v12 = *(_WORD **)v3;
    v13 = 2 * v4;
    v14 = 2 * v5;
    v15 = v8 - 1;
    if (v15)
    {
      v16 = *(unsigned int *)(v3 + 20);
      v17 = *(unsigned int *)(v2 + 20);
      if (v10)
      {
        v18 = 0;
        v19 = 2 * v17;
        v20 = 2 * v16;
        do
        {
          v21 = v12;
          v22 = v11;
          v23 = v10;
          do
          {
            *v21 = *v22;
            v22 = (_WORD *)((char *)v22 + v13);
            v21 = (_WORD *)((char *)v21 + v14);
            --v23;
          }
          while (v23);
          *v21 = *v22;
          v11 = (_WORD *)((char *)v11 + v19);
          v12 = (_WORD *)((char *)v12 + v20);
          ++v18;
        }
        while (v18 != v15);
      }
      else
      {
        do
        {
          *v12 = *v11;
          v11 += v17;
          v12 += v16;
          --v15;
        }
        while (v15);
      }
    }
    for (; v10; --v10)
    {
      *v12 = *v11;
      v11 = (_WORD *)((char *)v11 + v13);
      v12 = (_WORD *)((char *)v12 + v14);
    }
    LOWORD(v28) = *v11;
    *v12 = *v11;
  }
  return v28;
}

__int16 sub_20AFE4D64@<H0>(uint64_t *a1@<X0>, uint64_t *a2@<X1>)
{
  int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _WORD *v16;
  __int16 *v17;
  uint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int16 v22;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _WORD *v27;
  __int16 *v28;
  __int128 *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  uint64_t v36;
  uint64_t v37;

  v3 = *((unsigned int *)a1 + 2);
  v2 = *((_DWORD *)a1 + 3);
  if ((_DWORD)v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *a1;
    v6 = *a2;
    v7 = v2 - 1;
    v36 = *((unsigned int *)a1 + 2);
    if (v2 != 1)
    {
      v8 = 0;
      v9 = 2 * *((unsigned int *)a2 + 5);
      v10 = 2 * *((unsigned int *)a1 + 5);
      v11 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v12 = (v11 + 1) & 0xFFFFFFFFFFFFFFF0;
      v37 = 2 * v12;
      v13 = *a2;
      v14 = *a1;
      while (1)
      {
        if (!v14)
        {
          v15 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
          v3 = v36;
          if (v15)
            goto LABEL_29;
        }
        v16 = (_WORD *)v13;
        v17 = (__int16 *)v14;
        if (v11 < 0xF)
          goto LABEL_33;
        v16 = (_WORD *)v13;
        v17 = (__int16 *)v14;
        if ((unint64_t)(v6 + v9 * v8 - (v5 + v10 * v8)) < 0x20)
          goto LABEL_33;
        v18 = 0;
        v16 = (_WORD *)(v13 + v37);
        v17 = (__int16 *)(v14 + v37);
        v19 = (v11 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v20 = (_OWORD *)(v13 + v18);
          v21 = *(_OWORD *)(v14 + v18 + 16);
          *v20 = *(_OWORD *)(v14 + v18);
          v20[1] = v21;
          v18 += 32;
          v19 -= 16;
        }
        while (v19);
        if (v11 + 1 != v12)
        {
LABEL_33:
          do
          {
            v22 = *v17++;
            *v16++ = v22;
          }
          while (v17 != (__int16 *)(v14 + 2 * v3));
        }
        v14 += v10;
        v13 += v9;
        if ((_DWORD)++v8 == v7)
          goto LABEL_18;
      }
    }
    v13 = *a2;
    v14 = *a1;
LABEL_18:
    if (!v14)
    {
      v23 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
      v3 = v36;
      if (v23)
LABEL_29:
        abort();
    }
    v24 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v24 < 0xF || (unint64_t)(v13 - v14) < 0x20)
    {
      v27 = (_WORD *)v13;
      v28 = (__int16 *)v14;
    }
    else
    {
      v25 = v24 + 1;
      v26 = (v24 + 1) & 0xFFFFFFFFFFFFFFF0;
      v27 = (_WORD *)(v13 + 2 * v26);
      v28 = (__int16 *)(v14 + 2 * v26);
      v29 = (__int128 *)(v14 + 16);
      v30 = (_OWORD *)(v13 + 16);
      v31 = v26;
      do
      {
        v32 = *(v29 - 1);
        v33 = *v29;
        *(v30 - 1) = v32;
        *v30 = v33;
        v29 += 2;
        v30 += 2;
        v31 -= 16;
      }
      while (v31);
      if (v25 == v26)
        return v32;
    }
    do
    {
      v34 = *v28++;
      LOWORD(v32) = v34;
      *v27++ = v34;
    }
    while (v28 != (__int16 *)(v14 + 2 * v3));
  }
  return v32;
}

__n128 sub_20AFE4F98(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[5].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC238[v5])(&v7, v4);
  }
  v4[5].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[5].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFE5028(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  char v8;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 80);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE50D0(a2 + 8, (_DWORD *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC238[v5])(&v8, v4);
  }
  *(_DWORD *)(v4 + 80) = -1;
  *(_QWORD *)v4 = &off_24C3FCD50;
  v7 = *(_OWORD *)(a3 + 8);
  *(_OWORD *)(v4 + 20) = *(_OWORD *)(a3 + 20);
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC52A8(v4 + 40, a3 + 40);
  *(_DWORD *)(v4 + 80) = 1;
  return result;
}

uint64_t sub_20AFE50D0(uint64_t a1, _DWORD *a2)
{
  void *v4;
  BOOL v5;
  int v6;
  uint64_t v7;
  uint64_t v8[4];
  _QWORD v9[3];
  __int128 v10;

  if (*(_QWORD *)(a1 + 40)
    && *a2 == *(_DWORD *)a1
    && a2[1] == *(_DWORD *)(a1 + 4)
    && a2[2] == *(_DWORD *)(a1 + 8)
    && a2[3] == *(_DWORD *)(a1 + 12))
  {
    v8[0] = (uint64_t)a2;
    v8[1] = a1;
    sub_20AFE52E4(v8);
    return a1;
  }
  *(_OWORD *)v8 = *(_OWORD *)a2;
  *(_OWORD *)((char *)&v8[1] + 4) = *(_OWORD *)(a2 + 3);
  sub_20AFC52A8((uint64_t)v9, (uint64_t)(a2 + 8));
  *(_OWORD *)a1 = *(_OWORD *)v8;
  *(_OWORD *)(a1 + 12) = *(_OWORD *)((char *)&v8[1] + 4);
  *(_OWORD *)(a1 + 56) = v10;
  v4 = *(void **)(a1 + 40);
  if (v4)
  {
    if (*(_DWORD *)(a1 + 60))
      v5 = *(_DWORD *)(a1 + 56) == 0;
    else
      v5 = 1;
    if (v5)
      v6 = 0;
    else
      v6 = *(_DWORD *)(a1 + 60);
    if (v6 * (*(_QWORD *)(a1 + 64) >> 33) == -1)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v4 = *(void **)(a1 + 40);
      *(_QWORD *)(a1 + 32) = v9[0];
      if (!v4)
        goto LABEL_20;
    }
    else
    {
      *(_QWORD *)(a1 + 32) = v9[0];
    }
    free(v4);
  }
  else
  {
    *(_QWORD *)(a1 + 32) = v9[0];
  }
LABEL_20:
  v7 = v9[2];
  *(_QWORD *)(a1 + 40) = v9[1];
  *(_QWORD *)(a1 + 48) = v7;
  return a1;
}

void sub_20AFE5234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AFE5248((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFE5248(uint64_t a1)
{
  void *v2;
  BOOL v3;
  int v4;

  v2 = *(void **)(a1 + 40);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 60) || *(_DWORD *)(a1 + 56) == 0;
    v4 = v3 ? 0 : *(_DWORD *)(a1 + 60);
    if (v4 * (*(_QWORD *)(a1 + 64) >> 33) != -1)
      goto LABEL_11;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 40);
    if (v2)
LABEL_11:
      free(v2);
  }
  *(_QWORD *)(a1 + 40) = 0;
  return a1;
}

__int16 sub_20AFE52E4@<H0>(uint64_t *a1@<X0>)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v7;
  BOOL v8;
  int v9;
  _WORD *v10;
  _WORD *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  _WORD *v20;
  _WORD *v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  BOOL v26;
  __int128 v27;
  _WORD *v28;
  unint64_t v29;
  __int16 *v30;
  unint64_t v31;
  unint64_t v32;
  _WORD *v33;
  __int128 *v34;
  _OWORD *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;

  v2 = *a1;
  v3 = a1[1];
  v4 = *(unsigned int *)(v2 + 8);
  v5 = *(unsigned int *)(v3 + 8);
  if ((_DWORD)v4 == 1 && (_DWORD)v5 == 1)
  {
    v23 = *(_DWORD *)(v2 + 12);
    if (v23 != *(_DWORD *)(v3 + 12) || v23 != *(_DWORD *)v2)
    {
      LOWORD(v27) = sub_20AFE550C((unsigned int *)v2, v3);
      return v27;
    }
    v24 = (*(_DWORD *)(v2 + 4) * v23);
    v25 = *(_QWORD *)(v2 + 40);
    if ((_DWORD)v24)
      v26 = v25 == 0;
    else
      v26 = 0;
    if (v26)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
    }
    else if (!(_DWORD)v24)
    {
      return v27;
    }
    v28 = *(_WORD **)(v3 + 40);
    v29 = (v24 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v29 < 0xF)
    {
      v30 = (__int16 *)v25;
    }
    else
    {
      v30 = (__int16 *)v25;
      if ((unint64_t)v28 - v25 >= 0x20)
      {
        v31 = v29 + 1;
        v32 = v31 & 0xFFFFFFFFFFFFFFF0;
        v33 = &v28[v32];
        v30 = (__int16 *)(v25 + v32 * 2);
        v34 = (__int128 *)(v25 + 16);
        v35 = v28 + 8;
        v36 = v31 & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v27 = *(v34 - 1);
          v37 = *v34;
          *(v35 - 1) = v27;
          *v35 = v37;
          v34 += 2;
          v35 += 2;
          v36 -= 16;
        }
        while (v36);
        v28 = v33;
        if (v31 == (v31 & 0xFFFFFFFFFFFFFFF0))
          return v27;
      }
    }
    do
    {
      v38 = *v30++;
      LOWORD(v27) = v38;
      *v28++ = v38;
    }
    while (v30 != (__int16 *)(v25 + 2 * v24));
    return v27;
  }
  v7 = *(_DWORD *)(v2 + 4);
  if (*(_DWORD *)v2)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8)
  {
    v9 = *(_DWORD *)v2 - 1;
    v10 = *(_WORD **)(v2 + 40);
    v11 = *(_WORD **)(v3 + 40);
    v12 = 2 * v4;
    v13 = 2 * v5;
    v14 = v7 - 1;
    if (v14)
    {
      v15 = *(unsigned int *)(v3 + 12);
      v16 = *(unsigned int *)(v2 + 12);
      if (*(_DWORD *)v2 == 1)
      {
        do
        {
          *v11 = *v10;
          v10 += v16;
          v11 += v15;
          --v14;
        }
        while (v14);
      }
      else
      {
        v17 = 0;
        v18 = 2 * v16;
        v19 = 2 * v15;
        do
        {
          v20 = v11;
          v21 = v10;
          v22 = v9;
          do
          {
            *v20 = *v21;
            v21 = (_WORD *)((char *)v21 + v12);
            v20 = (_WORD *)((char *)v20 + v13);
            --v22;
          }
          while (v22);
          *v20 = *v21;
          v10 = (_WORD *)((char *)v10 + v18);
          v11 = (_WORD *)((char *)v11 + v19);
          ++v17;
        }
        while (v17 != v14);
      }
    }
    for (; v9; --v9)
    {
      *v11 = *v10;
      v10 = (_WORD *)((char *)v10 + v12);
      v11 = (_WORD *)((char *)v11 + v13);
    }
    LOWORD(v27) = *v10;
    *v11 = *v10;
  }
  return v27;
}

__int16 sub_20AFE550C@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>)
{
  unsigned int v2;
  uint64_t v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BOOL4 v15;
  _WORD *v16;
  __int16 *v17;
  uint64_t v18;
  unint64_t v19;
  _OWORD *v20;
  __int128 v21;
  __int16 v22;
  _BOOL4 v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  _WORD *v27;
  __int16 *v28;
  __int128 *v29;
  _OWORD *v30;
  unint64_t v31;
  __int128 v32;
  __int128 v33;
  __int16 v34;
  uint64_t v36;
  uint64_t v37;

  v3 = *a1;
  v2 = a1[1];
  if ((_DWORD)v3)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = *((_QWORD *)a1 + 5);
    v6 = *(_QWORD *)(a2 + 40);
    v7 = v2 - 1;
    v36 = *a1;
    if (v2 != 1)
    {
      v8 = 0;
      v9 = 2 * *(unsigned int *)(a2 + 12);
      v10 = 2 * a1[3];
      v11 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      v12 = (v11 + 1) & 0xFFFFFFFFFFFFFFF0;
      v37 = 2 * v12;
      v13 = *(_QWORD *)(a2 + 40);
      v14 = *((_QWORD *)a1 + 5);
      while (1)
      {
        if (!v14)
        {
          v15 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
          v3 = v36;
          if (v15)
            goto LABEL_29;
        }
        v16 = (_WORD *)v13;
        v17 = (__int16 *)v14;
        if (v11 < 0xF)
          goto LABEL_33;
        v16 = (_WORD *)v13;
        v17 = (__int16 *)v14;
        if ((unint64_t)(v6 + v9 * v8 - (v5 + v10 * v8)) < 0x20)
          goto LABEL_33;
        v18 = 0;
        v16 = (_WORD *)(v13 + v37);
        v17 = (__int16 *)(v14 + v37);
        v19 = (v11 + 1) & 0xFFFFFFFFFFFFFFF0;
        do
        {
          v20 = (_OWORD *)(v13 + v18);
          v21 = *(_OWORD *)(v14 + v18 + 16);
          *v20 = *(_OWORD *)(v14 + v18);
          v20[1] = v21;
          v18 += 32;
          v19 -= 16;
        }
        while (v19);
        if (v11 + 1 != v12)
        {
LABEL_33:
          do
          {
            v22 = *v17++;
            *v16++ = v22;
          }
          while (v17 != (__int16 *)(v14 + 2 * v3));
        }
        v14 += v10;
        v13 += v9;
        if ((_DWORD)++v8 == v7)
          goto LABEL_18;
      }
    }
    v13 = *(_QWORD *)(a2 + 40);
    v14 = *((_QWORD *)a1 + 5);
LABEL_18:
    if (!v14)
    {
      v23 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
      v3 = v36;
      if (v23)
LABEL_29:
        abort();
    }
    v24 = (v3 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v24 < 0xF || (unint64_t)(v13 - v14) < 0x20)
    {
      v27 = (_WORD *)v13;
      v28 = (__int16 *)v14;
    }
    else
    {
      v25 = v24 + 1;
      v26 = (v24 + 1) & 0xFFFFFFFFFFFFFFF0;
      v27 = (_WORD *)(v13 + 2 * v26);
      v28 = (__int16 *)(v14 + 2 * v26);
      v29 = (__int128 *)(v14 + 16);
      v30 = (_OWORD *)(v13 + 16);
      v31 = v26;
      do
      {
        v32 = *(v29 - 1);
        v33 = *v29;
        *(v30 - 1) = v32;
        *v30 = v33;
        v29 += 2;
        v30 += 2;
        v31 -= 16;
      }
      while (v31);
      if (v25 == v26)
        return v32;
    }
    do
    {
      v34 = *v28++;
      LOWORD(v32) = v34;
      *v27++ = v34;
    }
    while (v28 != (__int16 *)(v14 + 2 * v3));
  }
  return v32;
}

__n128 sub_20AFE5740(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[5].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC258[v5])(&v7, v4);
  }
  v4[5].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[5].n128_u32[0] = 0;
  return result;
}

void sub_20AFE57D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  _OWORD *v7;
  unsigned int *v8;
  __int128 v9;
  void *v10;
  uint64_t v11;
  _OWORD v12[2];
  _QWORD v13[3];
  __int128 v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 80);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(_OWORD *, uint64_t))off_24C3FC258[v5])(v12, v4);
LABEL_10:
    *(_DWORD *)(v4 + 80) = -1;
    *(_QWORD *)v4 = &off_24C3FCDD0;
    v9 = *(_OWORD *)(a3 + 8);
    *(_OWORD *)(v4 + 20) = *(_OWORD *)(a3 + 20);
    *(_OWORD *)(v4 + 8) = v9;
    sub_20AFC5B64(v4 + 40, a3 + 40);
    *(_DWORD *)(v4 + 80) = 1;
    return;
  }
  v7 = (_OWORD *)(a2 + 8);
  v8 = (unsigned int *)(a3 + 8);
  if (*(_QWORD *)(a2 + 48)
    && *v8 == *(_DWORD *)v7
    && *(_DWORD *)(a3 + 12) == *(_DWORD *)(a2 + 12)
    && *(_DWORD *)(a3 + 16) == *(_DWORD *)(a2 + 16)
    && *(_DWORD *)(a3 + 20) == *(_DWORD *)(a2 + 20))
  {
    sub_20AFE593C(v8, a2 + 8);
  }
  else
  {
    v12[0] = *(_OWORD *)v8;
    *(_OWORD *)((char *)v12 + 12) = *(_OWORD *)(a3 + 20);
    sub_20AFC5B64((uint64_t)v13, a3 + 40);
    *v7 = v12[0];
    *(_OWORD *)((char *)v7 + 12) = *(_OWORD *)((char *)v12 + 12);
    *(_OWORD *)(a2 + 64) = v14;
    *(_QWORD *)(a2 + 40) = v13[0];
    v10 = *(void **)(a2 + 48);
    if (v10)
      free(v10);
    v11 = v13[2];
    *(_QWORD *)(a2 + 48) = v13[1];
    *(_QWORD *)(a2 + 56) = v11;
  }
}

float sub_20AFE593C(unsigned int *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v6;
  BOOL v7;
  int v8;
  _DWORD *v9;
  _DWORD *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  _DWORD *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  BOOL v25;
  float result;
  uint64_t v27;
  const void *v28;
  BOOL v29;
  uint64_t v30;

  v3 = a1[2];
  v4 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v3 == 1 && (_DWORD)v4 == 1)
  {
    v22 = a1[3];
    v23 = *a1;
    if (v22 == *(_DWORD *)(a2 + 12) && v22 == v23)
    {
      v27 = a1[1] * v22;
      v28 = (const void *)*((_QWORD *)a1 + 5);
      if ((_DWORD)v27)
        v29 = v28 == 0;
      else
        v29 = 0;
      if (v29)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
      }
      else if (!(_DWORD)v27)
      {
        return result;
      }
      memmove(*(void **)(a2 + 40), v28, 4 * v27);
      return result;
    }
    v30 = *a1;
    if (v23)
      v25 = a1[1] == 0;
    else
      v25 = 1;
    if (!v25)
      sub_20AFE5B18(&v30, (uint64_t)a1, a2);
  }
  else
  {
    v6 = a1[1];
    if (*a1)
      v7 = v6 == 0;
    else
      v7 = 1;
    if (!v7)
    {
      v8 = *a1 - 1;
      v9 = (_DWORD *)*((_QWORD *)a1 + 5);
      v10 = *(_DWORD **)(a2 + 40);
      v11 = v6 - 1;
      if (v11)
      {
        v12 = *(unsigned int *)(a2 + 12);
        v13 = a1[3];
        if (*a1 == 1)
        {
          do
          {
            *v10 = *v9;
            v9 += v13;
            v10 += v12;
            --v11;
          }
          while (v11);
LABEL_38:
          result = *(float *)v9;
          *v10 = *v9;
          return result;
        }
        v14 = 0;
        v15 = 4 * v13;
        v16 = 4 * v12;
        do
        {
          v17 = v10;
          v18 = v9;
          v19 = v8;
          do
          {
            *v17 = *v18;
            v18 += v3;
            v17 += v4;
            --v19;
          }
          while (v19);
          *v17 = *v18;
          v9 = (_DWORD *)((char *)v9 + v15);
          v10 = (_DWORD *)((char *)v10 + v16);
          ++v14;
        }
        while (v14 != v11);
      }
      if (v8)
      {
        v20 = 4 * v3;
        v21 = 4 * v4;
        do
        {
          *v10 = *v9;
          v9 = (_DWORD *)((char *)v9 + v20);
          v10 = (_DWORD *)((char *)v10 + v21);
          --v8;
        }
        while (v8);
      }
      goto LABEL_38;
    }
  }
  return result;
}

uint64_t *sub_20AFE5B18(uint64_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  uint64_t *v5;
  char *v6;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(a2 + 4);
  if (*(_DWORD *)a2)
    v4 = v3 == 0;
  else
    v4 = 1;
  if (!v4)
  {
    v5 = result;
    v6 = *(char **)(a2 + 40);
    v7 = *(char **)(a3 + 40);
    v8 = v3 - 1;
    if (v3 != 1)
    {
      v9 = 4 * *(unsigned int *)(a2 + 12);
      v10 = 4 * *(unsigned int *)(a3 + 12);
      do
      {
        v11 = *v5;
        if (!v6 && v11)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_19;
          }
        }
        else if (!v11)
        {
          goto LABEL_11;
        }
        result = (uint64_t *)memmove(v7, v6, 4 * v11);
LABEL_11:
        v6 += v9;
        v7 += v10;
        --v8;
      }
      while (v8);
    }
    v12 = *v5;
    if (!v6 && v12)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_19:
        abort();
      }
      return (uint64_t *)memmove(v7, v6, 4 * v12);
    }
    if (v12)
      return (uint64_t *)memmove(v7, v6, 4 * v12);
  }
  return result;
}

size_t *sub_20AFE5C6C(size_t *result)
{
  size_t v1;
  size_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  size_t *v18;
  _BYTE *v19;
  int v20;

  v2 = *result;
  v1 = result[1];
  if (*(_DWORD *)(*result + 20) == 1 && *(_DWORD *)(v1 + 20) == 1)
    return sub_20AFE5D88(result);
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v2 + 24);
    v10 = *(unsigned int *)(v1 + 24);
    v11 = *(_BYTE **)v2;
    v12 = *(_BYTE **)v1;
    v13 = v5 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(v1 + 28);
      v15 = *(unsigned int *)(v2 + 28);
      if (v8)
      {
        v16 = 0;
        v17 = v11 + 1;
        result = (size_t *)(v12 + 1);
        do
        {
          v18 = result;
          v19 = v17;
          v20 = v8;
          do
          {
            *((_BYTE *)v18 - 1) = *(v19 - 1);
            *(_BYTE *)v18 = *v19;
            v19 += v9;
            v18 = (size_t *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *((_BYTE *)v18 - 1) = *(v19 - 1);
          *(_BYTE *)v18 = *v19;
          v11 += v15;
          v12 += v14;
          ++v16;
          v17 += v15;
          result = (size_t *)((char *)result + v14);
        }
        while (v16 != v13);
      }
      else
      {
        do
        {
          *v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
      }
    }
    for (; v8; --v8)
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    *v12 = *v11;
    v12[1] = v11[1];
  }
  return result;
}

size_t *sub_20AFE5D88(size_t *result)
{
  size_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  BOOL v8;
  size_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 24);
  v4 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v3 == (_DWORD)v4)
  {
    v5 = *(_DWORD *)(v1 + 8);
    if ((_DWORD)v3 == *(_DWORD *)(v1 + 20) * v5)
      return sub_20AFC6900(result);
  }
  else
  {
    v5 = *(_DWORD *)(v1 + 8);
  }
  v10 = v5;
  v7 = *(_DWORD *)(v1 + 12);
  v6 = *(_DWORD *)(v1 + 16);
  if (v5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8 && v6 != 0)
  {
    v13 = 0;
    v14 = v5 - 1;
    v15 = *(unsigned int *)(v1 + 20) | ((unint64_t)*(unsigned int *)(v2 + 20) << 32);
    v16 = v7 - 1;
    v17 = v3 | (v4 << 32);
    v18 = v6 - 1;
    v19 = *(unsigned int *)(v1 + 28) | ((unint64_t)*(unsigned int *)(v2 + 28) << 32);
    v12 = *(const void **)v1;
    v11 = *(void **)v2;
    return (size_t *)sub_20AFE5E5C(&v13, &v10, &v12, &v11);
  }
  return result;
}

_DWORD *sub_20AFE5E5C(_DWORD *result, size_t *a2, const void **a3, void **a4)
{
  size_t *v4;
  _DWORD *v5;
  char *v6;
  char *v7;
  int v8;
  unsigned __int8 *v9;
  char *v10;
  unsigned int v11;
  char *v12;
  char *v13;
  int v14;
  size_t v15;
  unsigned __int8 v16;
  unsigned __int8 *v17;
  unsigned __int8 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void (*v22)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  size_t v23;
  unsigned int v24;
  unsigned int i;
  char *v26;
  _BOOL4 v27;
  size_t v28;
  char *v29;
  size_t v30;
  size_t v31;
  BOOL v32;
  char *v33;
  _BOOL4 v34;
  int v35;
  char *v36;
  char *v37;

  v4 = a2;
  v5 = result;
  v6 = (char *)*a3;
  v7 = (char *)*a4;
  if (result[8])
  {
    v8 = 0;
    v9 = (unsigned __int8 *)&qword_25463D258;
    do
    {
      v35 = v8;
      v11 = v5[5];
      v36 = v7;
      v37 = v6;
      v12 = v7;
      v13 = v6;
      if (v11)
      {
        v14 = 0;
        v12 = v7;
        v13 = v37;
        while (1)
        {
          v15 = *v4;
          if (!v13)
          {
            if (v15)
              break;
          }
          if (v15)
            goto LABEL_9;
LABEL_10:
          v13 += v5[6];
          v12 += v5[7];
          if (++v14 >= v11)
            goto LABEL_26;
        }
        sub_20B531CBC("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
        v16 = atomic_load(v9);
        if ((v16 & 1) == 0 && __cxa_guard_acquire((__guard *)v9))
        {
          __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
          __cxa_guard_release((__guard *)v9);
        }
        v17 = v9;
        if (!byte_25463D248 || byte_25463D250)
        {
          v19 = qword_25463D220;
          v20 = qword_25463D228;
          while (v19 != v20)
          {
            v22 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v19;
            v21 = *(_QWORD *)(v19 + 8);
            v19 += 16;
            v22(v21, "ptr != nullptr || size == 0", 27, "", 0);
          }
        }
        v9 = v17;
        v18 = atomic_load(v17);
        if ((v18 & 1) == 0 && __cxa_guard_acquire((__guard *)v17))
        {
          __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
          __cxa_guard_release((__guard *)v17);
        }
        v4 = a2;
        if (!byte_25463D248)
          goto LABEL_48;
        qword_25463D238(unk_25463D240, "ptr != nullptr || size == 0", 27, "", 0);
LABEL_9:
        result = memmove(v12, v13, v15);
        v11 = v5[5];
        goto LABEL_10;
      }
LABEL_26:
      v23 = *v4;
      if (!v13 && v23)
      {
        v10 = v37;
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_48;
        }
      }
      else
      {
        v10 = v37;
        if (!v23)
          goto LABEL_5;
      }
      result = memmove(v12, v13, v23);
LABEL_5:
      v6 = &v10[v5[9]];
      v7 = &v36[v5[10]];
      v8 = v35 + 1;
    }
    while ((v35 + 1) < v5[8]);
  }
  v24 = v5[5];
  if (v24)
  {
    for (i = 0; i < v24; ++i)
    {
      v30 = *v4;
      if (!v6 && v30)
      {
        v26 = v7;
        v27 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
        v7 = v26;
        if (v27)
          goto LABEL_48;
      }
      else if (!v30)
      {
        goto LABEL_34;
      }
      v28 = v30;
      v29 = v7;
      result = memmove(v7, v6, v28);
      v7 = v29;
      v24 = v5[5];
LABEL_34:
      v6 += v5[6];
      v7 += v5[7];
    }
  }
  v31 = *v4;
  if (v6)
    v32 = 1;
  else
    v32 = v31 == 0;
  if (!v32)
  {
    v33 = v7;
    v34 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
    v7 = v33;
    if (v34)
LABEL_48:
      abort();
    return memmove(v7, v6, v31);
  }
  if (v31)
    return memmove(v7, v6, v31);
  return result;
}

__n128 sub_20AFE620C(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC278[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFE629C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE6354(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC278[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FCE50;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC6680(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFE6354(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 64)
    && *(_QWORD *)((char *)a2 + 4) == *(_QWORD *)(a1 + 4)
    && *((_QWORD *)a2 + 2) == *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)&v9 = a2;
    *((_QWORD *)&v9 + 1) = a1;
    sub_20AFE6428((size_t *)&v9);
    return a1;
  }
  else
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v11 = a2[2];
    v12 = *((_QWORD *)a2 + 6);
    sub_20AFC6680((uint64_t)v13, (uint64_t)a2 + 56);
    v4 = v10;
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 96) = v15;
    v5 = v13[0];
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(void **)(a1 + 64);
    if (v6)
      free(v6);
    v7 = v13[2];
    *(_QWORD *)(a1 + 64) = v13[1];
    *(_QWORD *)(a1 + 72) = v7;
    return a1;
  }
}

size_t *sub_20AFE6428(size_t *result)
{
  size_t v1;
  size_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v11;
  _BYTE *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _BYTE *v17;
  size_t *v18;
  _BYTE *v19;
  int v20;

  v2 = *result;
  v1 = result[1];
  if (*(_DWORD *)(*result + 12) == 1 && *(_DWORD *)(v1 + 12) == 1)
    return sub_20AFE6544(result);
  v4 = *(_DWORD *)(v2 + 4);
  v5 = *(_DWORD *)(v2 + 8);
  if (*(_DWORD *)v2)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v2 + 16);
    v10 = *(unsigned int *)(v1 + 16);
    v11 = *(_BYTE **)(v2 + 64);
    v12 = *(_BYTE **)(v1 + 64);
    v13 = v5 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(v1 + 20);
      v15 = *(unsigned int *)(v2 + 20);
      if (v8)
      {
        v16 = 0;
        v17 = v11 + 1;
        result = (size_t *)(v12 + 1);
        do
        {
          v18 = result;
          v19 = v17;
          v20 = v8;
          do
          {
            *((_BYTE *)v18 - 1) = *(v19 - 1);
            *(_BYTE *)v18 = *v19;
            v19 += v9;
            v18 = (size_t *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *((_BYTE *)v18 - 1) = *(v19 - 1);
          *(_BYTE *)v18 = *v19;
          v11 += v15;
          v12 += v14;
          ++v16;
          v17 += v15;
          result = (size_t *)((char *)result + v14);
        }
        while (v16 != v13);
      }
      else
      {
        do
        {
          *v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
      }
    }
    for (; v8; --v8)
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    *v12 = *v11;
    v12[1] = v11[1];
  }
  return result;
}

size_t *sub_20AFE6544(size_t *result)
{
  size_t v1;
  size_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;
  int v7;
  BOOL v8;
  size_t v10;
  void *v11;
  const void *v12;
  uint64_t v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  unint64_t v19;

  v1 = *result;
  v2 = result[1];
  v3 = *(unsigned int *)(*result + 16);
  v4 = *(unsigned int *)(v2 + 16);
  if ((_DWORD)v3 == (_DWORD)v4)
  {
    v5 = *(_DWORD *)v1;
    if ((_DWORD)v3 == *(_DWORD *)(v1 + 12) * *(_DWORD *)v1)
      return sub_20AFE6614(result);
  }
  else
  {
    v5 = *(_DWORD *)v1;
  }
  v10 = v5;
  v7 = *(_DWORD *)(v1 + 4);
  v6 = *(_DWORD *)(v1 + 8);
  if (v5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (!v8 && v6 != 0)
  {
    v14 = v5 - 1;
    v15 = *(unsigned int *)(v1 + 12) | ((unint64_t)*(unsigned int *)(v2 + 12) << 32);
    v16 = v7 - 1;
    v17 = v3 | (v4 << 32);
    v18 = v6 - 1;
    v19 = *(unsigned int *)(v1 + 20) | ((unint64_t)*(unsigned int *)(v2 + 20) << 32);
    v12 = *(const void **)(v1 + 64);
    v13 = 0;
    v11 = *(void **)(v2 + 64);
    return (size_t *)sub_20AFE5E5C(&v13, &v10, &v12, &v11);
  }
  return result;
}

size_t *sub_20AFE6614(size_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  int v4;
  size_t v5;
  const void *v6;
  BOOL v7;
  int v8;
  BOOL v9;
  size_t v11;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 20);
  if (v3 == *(_DWORD *)(v2 + 20))
  {
    v4 = *(_DWORD *)(v1 + 4);
    if (v3 == *(_DWORD *)(v1 + 16) * v4)
    {
      v5 = (*(_DWORD *)v1 * v4 * *(_DWORD *)(v1 + 8));
      v6 = *(const void **)(v1 + 64);
      if ((_DWORD)v5)
        v7 = v6 == 0;
      else
        v7 = 0;
      if (v7)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
      }
      else if (!(_DWORD)v5)
      {
        return result;
      }
      return (size_t *)memmove(*(void **)(v2 + 64), v6, v5);
    }
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 4);
  }
  v8 = *(_DWORD *)v1;
  v11 = (*(_DWORD *)v1 * v4);
  if (v8)
    v9 = v4 == 0;
  else
    v9 = 1;
  if (!v9 && *(_DWORD *)(v1 + 8) != 0)
    return sub_20AFE6724(&v11, v1, v2);
  return result;
}

size_t *sub_20AFE6724(size_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  size_t *v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  size_t v13;

  v3 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v4 = *(_DWORD *)(a2 + 4) == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = result;
    v7 = *(char **)(a2 + 64);
    v8 = *(char **)(a3 + 64);
    v9 = v3 - 1;
    if (v3 != 1)
    {
      v10 = *(unsigned int *)(a3 + 20);
      v11 = *(unsigned int *)(a2 + 20);
      do
      {
        v12 = *v6;
        if (!v7 && v12)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_22;
          }
        }
        else if (!v12)
        {
          goto LABEL_14;
        }
        result = (size_t *)memmove(v8, v7, v12);
LABEL_14:
        v7 += v11;
        v8 += v10;
        --v9;
      }
      while (v9);
    }
    v13 = *v6;
    if (!v7 && v13)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
LABEL_22:
        abort();
      }
      return (size_t *)memmove(v8, v7, v13);
    }
    if (v13)
      return (size_t *)memmove(v8, v7, v13);
  }
  return result;
}

uint64_t *sub_20AFE6878(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  int v21;

  v2 = *result;
  v1 = result[1];
  if (*(_DWORD *)(*result + 20) == 1 && *(_DWORD *)(v1 + 20) == 1)
    return sub_20AFC7BE4(result);
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v2 + 24);
    v10 = *(unsigned int *)(v1 + 24);
    v11 = *(_WORD **)v2;
    v12 = *(_WORD **)v1;
    v13 = v5 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(v1 + 28);
      v15 = *(unsigned int *)(v2 + 28);
      if (!v8)
      {
        do
        {
          *v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
LABEL_23:
        *v12 = *v11;
        v12[1] = v11[1];
        return result;
      }
      v16 = 0;
      result = (uint64_t *)(2 * v9);
      v17 = v11 + 1;
      v18 = v12 + 1;
      do
      {
        v19 = v18;
        v20 = v17;
        v21 = v8;
        do
        {
          *(v19 - 1) = *(v20 - 1);
          *v19 = *v20;
          v20 = (_WORD *)((char *)result + (_QWORD)v20);
          v19 += v10;
          --v21;
        }
        while (v21);
        *(v19 - 1) = *(v20 - 1);
        *v19 = *v20;
        v11 += v15;
        v12 += v14;
        ++v16;
        v17 += v15;
        v18 += v14;
      }
      while (v16 != v13);
    }
    for (; v8; --v8)
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    goto LABEL_23;
  }
  return result;
}

__n128 sub_20AFE69C0(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC298[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFE6A50(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE6B08(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC298[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FCED0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC7914(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFE6B08(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 64)
    && *(_QWORD *)((char *)a2 + 4) == *(_QWORD *)(a1 + 4)
    && *((_QWORD *)a2 + 2) == *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)&v9 = a2;
    *((_QWORD *)&v9 + 1) = a1;
    sub_20AFE6BDC((uint64_t *)&v9);
    return a1;
  }
  else
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v11 = a2[2];
    v12 = *((_QWORD *)a2 + 6);
    sub_20AFC7914((uint64_t)v13, (uint64_t)a2 + 56);
    v4 = v10;
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 96) = v15;
    v5 = v13[0];
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(void **)(a1 + 64);
    if (v6)
      free(v6);
    v7 = v13[2];
    *(_QWORD *)(a1 + 64) = v13[1];
    *(_QWORD *)(a1 + 72) = v7;
    return a1;
  }
}

uint64_t *sub_20AFE6BDC(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  _WORD *v11;
  _WORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  int v21;

  v2 = *result;
  v1 = result[1];
  if (*(_DWORD *)(*result + 12) == 1 && *(_DWORD *)(v1 + 12) == 1)
    return sub_20AFE6D24(result);
  v4 = *(_DWORD *)(v2 + 4);
  v5 = *(_DWORD *)(v2 + 8);
  if (*(_DWORD *)v2)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v2 + 16);
    v10 = *(unsigned int *)(v1 + 16);
    v11 = *(_WORD **)(v2 + 64);
    v12 = *(_WORD **)(v1 + 64);
    v13 = v5 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(v1 + 20);
      v15 = *(unsigned int *)(v2 + 20);
      if (!v8)
      {
        do
        {
          *v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
LABEL_23:
        *v12 = *v11;
        v12[1] = v11[1];
        return result;
      }
      v16 = 0;
      result = (uint64_t *)(2 * v9);
      v17 = v11 + 1;
      v18 = v12 + 1;
      do
      {
        v19 = v18;
        v20 = v17;
        v21 = v8;
        do
        {
          *(v19 - 1) = *(v20 - 1);
          *v19 = *v20;
          v20 = (_WORD *)((char *)result + (_QWORD)v20);
          v19 += v10;
          --v21;
        }
        while (v21);
        *(v19 - 1) = *(v20 - 1);
        *v19 = *v20;
        v11 += v15;
        v12 += v14;
        ++v16;
        v17 += v15;
        v18 += v14;
      }
      while (v16 != v13);
    }
    for (; v8; --v8)
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    goto LABEL_23;
  }
  return result;
}

uint64_t *sub_20AFE6D24(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  const void *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 16);
  if (v3 == *(_DWORD *)(v2 + 16))
  {
    v4 = *(_DWORD *)v1;
    if (v3 == *(_DWORD *)(v1 + 12) * *(_DWORD *)v1)
    {
      v5 = *(_DWORD *)(v1 + 20);
      if (v5 != *(_DWORD *)(v2 + 20))
        return (uint64_t *)sub_20AFE6E58((_DWORD *)*result, v2);
      v6 = *(_DWORD *)(v1 + 4);
      if (v5 != v6 * v3)
        return (uint64_t *)sub_20AFE6E58((_DWORD *)*result, v2);
      v7 = v6 * v4 * *(_DWORD *)(v1 + 8);
      v8 = *(const void **)(v1 + 64);
      if ((_DWORD)v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      if (v9)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
      }
      else if (!(_DWORD)v7)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)(v2 + 64), v8, 2 * v7);
    }
  }
  else
  {
    v4 = *(_DWORD *)v1;
  }
  v12 = v4;
  if (v4)
    v10 = *(_DWORD *)(v1 + 4) == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 8) != 0)
    return sub_20AFE6FAC(&v12, v1, v2);
  return result;
}

_DWORD *sub_20AFE6E58(_DWORD *result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = result[1];
  v3 = result[2];
  if (*result)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = (v2 * *result);
    v7 = (char *)*((_QWORD *)result + 8);
    v8 = *(char **)(a2 + 64);
    v9 = v3 - 1;
    if (v3 == 1)
    {
LABEL_17:
      if (!(_DWORD)v6 || v7)
      {
        if (!(_DWORD)v6)
          return result;
      }
      else if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_16;
      }
      return memmove(v8, v7, 2 * v6);
    }
    if ((_DWORD)v6)
    {
      v10 = 2 * result[5];
      v11 = 2 * *(unsigned int *)(a2 + 20);
      while (v7
           || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        result = memmove(v8, v7, 2 * v6);
        v7 += v10;
        v8 += v11;
        if (!--v9)
          goto LABEL_17;
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_20AFE6FAC(uint64_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = result;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v43 = *(unsigned int *)(a2 + 16);
    v8 = *(unsigned int *)(a3 + 16);
    v9 = v4 - 1;
    v5 = v9 == 0;
    v41 = v9;
    v10 = *(char **)(a2 + 64);
    if (!v5)
    {
      if (v3 != 1)
      {
        v11 = 0;
        v12 = (unsigned __int8 *)&qword_25463D258;
        v13 = *(char **)(a3 + 64);
        v36 = *(unsigned int *)(a2 + 20);
        v37 = *(unsigned int *)(a3 + 20);
        v42 = v3 - 1;
        while (1)
        {
          v38 = v11;
          v14 = 0;
          v39 = v13;
          v40 = v10;
          v15 = v10;
          do
          {
            v16 = v15;
            v17 = *v44;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              v18 = v8;
              sub_20B531CBC("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
              v19 = atomic_load(v12);
              if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v12))
              {
                __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
                __cxa_guard_release((__guard *)v12);
              }
              v20 = v12;
              if (!byte_25463D248 || byte_25463D250)
              {
                v22 = qword_25463D220;
                v23 = qword_25463D228;
                while (v22 != v23)
                {
                  v25 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v22;
                  v24 = *(_QWORD *)(v22 + 8);
                  v22 += 16;
                  v25(v24, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v12 = v20;
              v21 = atomic_load(v20);
              if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)v20))
              {
                __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
                __cxa_guard_release((__guard *)v20);
              }
              if (!byte_25463D248)
                goto LABEL_52;
              v8 = v18;
              qword_25463D238(unk_25463D240, "ptr != nullptr || size == 0", 27, "", 0);
              v7 = v42;
            }
            result = (uint64_t *)memmove(v13, v16, 2 * v17);
LABEL_19:
            v15 = &v16[2 * v43];
            v13 += 2 * v8;
            ++v14;
          }
          while (v14 != v7);
          v26 = *v44;
          if (!v16 && v26)
          {
            if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
LABEL_14:
              result = (uint64_t *)memmove(v13, v15, 2 * v26);
              goto LABEL_15;
            }
LABEL_52:
            abort();
          }
          if (v26)
            goto LABEL_14;
LABEL_15:
          v10 = &v40[2 * v36];
          v13 = &v39[2 * v37];
          v11 = v38 + 1;
          if (v38 + 1 == v41)
            goto LABEL_40;
        }
      }
      v32 = 2 * *(unsigned int *)(a2 + 20);
      v33 = 2 * *(unsigned int *)(a3 + 20);
      v13 = *(char **)(a3 + 64);
      while (1)
      {
        v34 = *v44;
        v35 = v10;
        if (!v10 && v34)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_52;
          }
        }
        else if (!v34)
        {
          goto LABEL_58;
        }
        result = (uint64_t *)memmove(v13, v35, 2 * v34);
LABEL_58:
        v10 = &v35[v32];
        v13 += v33;
        if (!--v41)
          goto LABEL_40;
      }
    }
    v13 = *(char **)(a3 + 64);
LABEL_40:
    v27 = v13;
    v28 = v10;
    if (v7)
    {
      v29 = 2 * v8;
      do
      {
        v30 = *v44;
        if (!v28 && v30)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_52;
          }
        }
        else if (!v30)
        {
          goto LABEL_44;
        }
        result = (uint64_t *)memmove(v27, v28, 2 * v30);
LABEL_44:
        v28 += 2 * v43;
        v27 += v29;
        --v7;
      }
      while (v7);
    }
    v31 = *v44;
    if (!v28 && v31)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_52;
      }
      return (uint64_t *)memmove(v27, v28, 2 * v31);
    }
    if (v31)
      return (uint64_t *)memmove(v27, v28, 2 * v31);
  }
  return result;
}

__int16 sub_20AFE741C@<H0>(uint64_t *a1@<X0>)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  int v21;
  int v22;
  unsigned int v23;
  double v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v1 = *a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v2 + 20) == 1)
  {
    v22 = *(_DWORD *)(v1 + 24);
    if (v22 == *(_DWORD *)(v2 + 24))
    {
      v23 = *(_DWORD *)(v1 + 8);
      if (v22 == v23)
      {
        v24 = sub_20AFE75BC(a1);
        return LOWORD(v24);
      }
    }
    else
    {
      v23 = *(_DWORD *)(v1 + 8);
    }
    v30 = v23;
    if (v23)
      v25 = *(_DWORD *)(v1 + 12) == 0;
    else
      v25 = 1;
    if (!v25 && *(_DWORD *)(v1 + 16) != 0)
      v24 = sub_20AFE79D4(&v30, v1, v2);
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 12);
    v5 = *(_DWORD *)(v1 + 16);
    if (*(_DWORD *)(v1 + 8))
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6 && v5 != 0)
    {
      v8 = v4 - 1;
      v9 = *(_WORD **)v1;
      v10 = *(_WORD **)v2;
      v11 = 2 * *(unsigned int *)(v1 + 24);
      v12 = 2 * *(unsigned int *)(v2 + 24);
      v13 = v5 - 1;
      if (v13)
      {
        v14 = *(unsigned int *)(v2 + 28);
        v15 = *(unsigned int *)(v1 + 28);
        if (v8)
        {
          v16 = 0;
          v17 = v9 + 1;
          v18 = v10 + 1;
          do
          {
            v19 = v18;
            v20 = v17;
            v21 = v8;
            do
            {
              *(v19 - 1) = *(v20 - 1);
              *v19 = *v20;
              v20 = (_WORD *)((char *)v20 + v11);
              v19 = (_WORD *)((char *)v19 + v12);
              --v21;
            }
            while (v21);
            *(v19 - 1) = *(v20 - 1);
            *v19 = *v20;
            v9 += v15;
            v10 += v14;
            ++v16;
            v17 += v15;
            v18 += v14;
          }
          while (v16 != v13);
        }
        else
        {
          v27 = 2 * v15;
          v28 = 2 * v14;
          do
          {
            *v10 = *v9;
            v10[1] = v9[1];
            v9 = (_WORD *)((char *)v9 + v27);
            v10 = (_WORD *)((char *)v10 + v28);
            --v13;
          }
          while (v13);
        }
      }
      for (; v8; --v8)
      {
        *v10 = *v9;
        v10[1] = v9[1];
        v9 = (_WORD *)((char *)v9 + v11);
        v10 = (_WORD *)((char *)v10 + v12);
      }
      *v10 = *v9;
      LOWORD(v24) = v9[1];
      v10[1] = LOWORD(v24);
    }
  }
  return LOWORD(v24);
}

double sub_20AFE75BC(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  _WORD *v18;
  unint64_t v19;
  __int16 *v20;
  unint64_t v21;
  unint64_t v22;
  _WORD *v23;
  __int128 *v24;
  _OWORD *v25;
  unint64_t v26;
  __int128 v27;
  __int16 v28;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  _OWORD v38[3];

  v1 = *a1;
  v2 = a1[1];
  v3 = *(unsigned int *)(*a1 + 28);
  v4 = *(unsigned int *)(v2 + 28);
  v5 = *(_DWORD *)(*a1 + 12);
  if ((_DWORD)v3 == (_DWORD)v4 && (_DWORD)v3 == *(_DWORD *)(v1 + 24) * v5)
  {
    v6 = (*(_DWORD *)(v1 + 8) * v5 * *(_DWORD *)(v1 + 16));
    v7 = *(_QWORD *)v1;
    if ((_DWORD)v6)
      v8 = v7 == 0;
    else
      v8 = 0;
    if (v8)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
    }
    else if (!(_DWORD)v6)
    {
      return *(double *)&v17;
    }
    v18 = *(_WORD **)v2;
    v19 = (v6 - 1) & 0x7FFFFFFFFFFFFFFFLL;
    if (v19 < 0xF)
    {
      v20 = (__int16 *)v7;
      do
      {
LABEL_25:
        v28 = *v20++;
        LOWORD(v17) = v28;
        *v18++ = v28;
      }
      while (v20 != (__int16 *)(v7 + 2 * v6));
      return *(double *)&v17;
    }
    v20 = (__int16 *)v7;
    if ((unint64_t)v18 - v7 < 0x20)
      goto LABEL_25;
    v21 = v19 + 1;
    v22 = v21 & 0xFFFFFFFFFFFFFFF0;
    v23 = &v18[v22];
    v20 = (__int16 *)(v7 + v22 * 2);
    v24 = (__int128 *)(v7 + 16);
    v25 = v18 + 8;
    v26 = v21 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v17 = *(v24 - 1);
      v27 = *v24;
      *(v25 - 1) = v17;
      *v25 = v27;
      v24 += 2;
      v25 += 2;
      v26 -= 16;
    }
    while (v26);
    v18 = v23;
    if (v21 != (v21 & 0xFFFFFFFFFFFFFFF0))
      goto LABEL_25;
  }
  else
  {
    v9 = *(_DWORD *)(v1 + 8);
    v30 = (v9 * v5);
    v10 = *(_DWORD *)(v1 + 16);
    if (v9)
      v11 = v5 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v32 = v9 - 1;
      v13 = *(unsigned int *)(v1 + 24);
      v14 = *(unsigned int *)(v2 + 24);
      v33 = *(unsigned int *)(v1 + 20) | ((unint64_t)*(unsigned int *)(v2 + 20) << 32);
      v31 = 0;
      v34 = v5 - 1;
      v35 = v13 | (v14 << 32);
      v36 = v10 - 1;
      v37 = v3 | (v4 << 32);
      v15 = *(_QWORD *)v1;
      v16 = *(_QWORD *)v2;
      memset(v38, 0, sizeof(v38));
      *(_QWORD *)&v17 = sub_20AFE7784((unsigned int *)&v31, (uint64_t)v38, &v30, v15, v16);
    }
  }
  return *(double *)&v17;
}

__int16 sub_20AFE7784@<H0>(unsigned int *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int i;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  _WORD *v21;
  __int16 *v22;
  __int128 *v23;
  _OWORD *v24;
  unint64_t v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  unint64_t v32;
  _WORD *v33;
  __int16 *v34;
  __int128 *v35;
  _OWORD *v36;
  unint64_t v37;
  __int128 v38;
  __int16 v39;

  v5 = a5;
  v6 = a4;
  v9 = a1[6];
  v10 = a1[7];
  v11 = a1[3] | (unint64_t)(v9 << 32);
  v12 = a1[4] | (unint64_t)(v10 << 32);
  *(_QWORD *)a2 = a4;
  *(_QWORD *)(a2 + 8) = v11;
  *(_DWORD *)(a2 + 16) = v9;
  *(_QWORD *)(a2 + 24) = a5;
  *(_QWORD *)(a2 + 32) = v12;
  *(_DWORD *)(a2 + 40) = v10;
  v13 = a1[8];
  if (v13)
  {
    for (i = 0; i < v13; ++i)
    {
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 24) = v5;
      v16 = *a3;
      if (v6 || !v16)
      {
        v17 = v5;
        if (!v16)
          goto LABEL_4;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_33;
        }
        v17 = *(_QWORD *)(a2 + 24);
      }
      v18 = (v16 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v18 < 0xF || (unint64_t)(v17 - v6) < 0x20)
      {
        v21 = (_WORD *)v17;
        v22 = (__int16 *)v6;
      }
      else
      {
        v19 = v18 + 1;
        v20 = (v18 + 1) & 0xFFFFFFFFFFFFFFF0;
        v21 = (_WORD *)(v17 + 2 * v20);
        v22 = (__int16 *)(v6 + 2 * v20);
        v23 = (__int128 *)(v6 + 16);
        v24 = (_OWORD *)(v17 + 16);
        v25 = v20;
        do
        {
          v26 = *(v23 - 1);
          v27 = *v23;
          *(v24 - 1) = v26;
          *v24 = v27;
          v23 += 2;
          v24 += 2;
          v25 -= 16;
        }
        while (v25);
        if (v19 == v20)
          goto LABEL_3;
      }
      do
      {
        v28 = *v22++;
        LOWORD(v26) = v28;
        *v21++ = v28;
      }
      while (v22 != (__int16 *)(v6 + 2 * v16));
LABEL_3:
      v13 = a1[8];
LABEL_4:
      v6 += 2 * a1[9];
      v5 += 2 * a1[10];
    }
  }
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 24) = v5;
  v29 = *a3;
  if (v6 || !v29)
  {
    if (!v29)
      return v26;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
LABEL_33:
      abort();
    }
    v5 = *(_QWORD *)(a2 + 24);
  }
  v30 = (v29 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v30 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    v33 = (_WORD *)v5;
    v34 = (__int16 *)v6;
    do
    {
LABEL_31:
      v39 = *v34++;
      LOWORD(v26) = v39;
      *v33++ = v39;
    }
    while (v34 != (__int16 *)(v6 + 2 * v29));
    return v26;
  }
  v31 = v30 + 1;
  v32 = (v30 + 1) & 0xFFFFFFFFFFFFFFF0;
  v33 = (_WORD *)(v5 + 2 * v32);
  v34 = (__int16 *)(v6 + 2 * v32);
  v35 = (__int128 *)(v6 + 16);
  v36 = (_OWORD *)(v5 + 16);
  v37 = v32;
  do
  {
    v26 = *(v35 - 1);
    v38 = *v35;
    *(v36 - 1) = v26;
    *v36 = v38;
    v35 += 2;
    v36 += 2;
    v37 -= 16;
  }
  while (v37);
  if (v31 != v32)
    goto LABEL_31;
  return v26;
}

double sub_20AFE79D4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  int v5;
  BOOL v6;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  double result;
  uint64_t v15;
  int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  unint64_t v21;
  _OWORD v22[2];

  v4 = *(_DWORD *)(a2 + 8);
  v3 = *(_DWORD *)(a2 + 12);
  v5 = *(_DWORD *)(a2 + 16);
  if (v4)
    v6 = v3 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v16 = v4 - 1;
    v9 = *(unsigned int *)(a2 + 24);
    v10 = *(unsigned int *)(a3 + 24);
    v17 = *(unsigned int *)(a2 + 20) | ((unint64_t)*(unsigned int *)(a3 + 20) << 32);
    v15 = 0;
    v18 = v3 - 1;
    v19 = v9 | (v10 << 32);
    v21 = *(unsigned int *)(a2 + 28) | ((unint64_t)*(unsigned int *)(a3 + 28) << 32);
    v11 = *(_QWORD *)a2;
    v12 = *(_QWORD *)a3;
    memset(v22, 0, sizeof(v22));
    v20 = v5 - 1;
    if (v5 != 1)
    {
      v13 = 0;
      do
      {
        sub_20AFE7AC0(&v15, v22, a1, v11, v12);
        v11 += 2 * v21;
        v12 += 2 * HIDWORD(v21);
        ++v13;
      }
      while (v13 < v20);
    }
    *(_QWORD *)&result = sub_20AFE7AC0(&v15, v22, a1, v11, v12);
  }
  return result;
}

__int16 sub_20AFE7AC0@<H0>(_DWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>)
{
  uint64_t v5;
  uint64_t v6;
  unsigned int v9;
  unsigned int i;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  _WORD *v17;
  __int16 *v18;
  __int128 *v19;
  _OWORD *v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int16 v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  _WORD *v29;
  __int16 *v30;
  __int128 *v31;
  _OWORD *v32;
  unint64_t v33;
  __int128 v34;
  __int16 v35;

  v5 = a5;
  v6 = a4;
  *a2 = a4;
  a2[2] = a5;
  v9 = a1[5];
  if (v9)
  {
    for (i = 0; i < v9; ++i)
    {
      *a2 = v6;
      a2[2] = v5;
      v12 = *a3;
      if (v6 || !v12)
      {
        v13 = v5;
        if (!v12)
          goto LABEL_4;
      }
      else
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_33;
        }
        v13 = a2[2];
      }
      v14 = (v12 - 1) & 0x7FFFFFFFFFFFFFFFLL;
      if (v14 < 0xF || (unint64_t)(v13 - v6) < 0x20)
      {
        v17 = (_WORD *)v13;
        v18 = (__int16 *)v6;
      }
      else
      {
        v15 = v14 + 1;
        v16 = (v14 + 1) & 0xFFFFFFFFFFFFFFF0;
        v17 = (_WORD *)(v13 + 2 * v16);
        v18 = (__int16 *)(v6 + 2 * v16);
        v19 = (__int128 *)(v6 + 16);
        v20 = (_OWORD *)(v13 + 16);
        v21 = v16;
        do
        {
          v22 = *(v19 - 1);
          v23 = *v19;
          *(v20 - 1) = v22;
          *v20 = v23;
          v19 += 2;
          v20 += 2;
          v21 -= 16;
        }
        while (v21);
        if (v15 == v16)
          goto LABEL_3;
      }
      do
      {
        v24 = *v18++;
        LOWORD(v22) = v24;
        *v17++ = v24;
      }
      while (v18 != (__int16 *)(v6 + 2 * v12));
LABEL_3:
      v9 = a1[5];
LABEL_4:
      v6 += 2 * a1[6];
      v5 += 2 * a1[7];
    }
  }
  *a2 = v6;
  a2[2] = v5;
  v25 = *a3;
  if (v6 || !v25)
  {
    if (!v25)
      return v22;
  }
  else
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
LABEL_33:
      abort();
    }
    v5 = a2[2];
  }
  v26 = (v25 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v26 < 0xF || (unint64_t)(v5 - v6) < 0x20)
  {
    v29 = (_WORD *)v5;
    v30 = (__int16 *)v6;
    do
    {
LABEL_31:
      v35 = *v30++;
      LOWORD(v22) = v35;
      *v29++ = v35;
    }
    while (v30 != (__int16 *)(v6 + 2 * v25));
    return v22;
  }
  v27 = v26 + 1;
  v28 = (v26 + 1) & 0xFFFFFFFFFFFFFFF0;
  v29 = (_WORD *)(v5 + 2 * v28);
  v30 = (__int16 *)(v6 + 2 * v28);
  v31 = (__int128 *)(v6 + 16);
  v32 = (_OWORD *)(v5 + 16);
  v33 = v28;
  do
  {
    v22 = *(v31 - 1);
    v34 = *v31;
    *(v32 - 1) = v22;
    *v32 = v34;
    v31 += 2;
    v32 += 2;
    v33 -= 16;
  }
  while (v33);
  if (v27 != v28)
    goto LABEL_31;
  return v22;
}

__n128 sub_20AFE7CF8(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC2B8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFE7D88(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE7E40(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC2B8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FCF50;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC8C3C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFE7E40(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  void *v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  __int128 v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 64)
    || *(_QWORD *)((char *)a2 + 4) != *(_QWORD *)(a1 + 4)
    || *((_QWORD *)a2 + 2) != *(_QWORD *)(a1 + 16))
  {
    v3 = a2[1];
    v11 = *a2;
    v12 = v3;
    v13 = a2[2];
    v14 = *((_QWORD *)a2 + 6);
    sub_20AFC8C3C((uint64_t)v15, (uint64_t)a2 + 56);
    v4 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_OWORD *)(a1 + 80) = v16;
    *(_QWORD *)(a1 + 96) = v17;
    v5 = *(void **)(a1 + 64);
    if (v5)
    {
      if (*(_DWORD *)(a1 + 88))
        v6 = *(_DWORD *)(a1 + 84) == 0;
      else
        v6 = 1;
      if (v6 || *(_DWORD *)(a1 + 80) == 0)
        v8 = 0;
      else
        v8 = *(_DWORD *)(a1 + 88);
      if (v8 * (*(_DWORD *)(a1 + 100) >> 1) == -1)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v5 = *(void **)(a1 + 64);
        *(_QWORD *)(a1 + 56) = v15[0];
        if (!v5)
          goto LABEL_20;
      }
      else
      {
        *(_QWORD *)(a1 + 56) = v15[0];
      }
      free(v5);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v15[0];
    }
LABEL_20:
    v9 = v15[2];
    *(_QWORD *)(a1 + 64) = v15[1];
    *(_QWORD *)(a1 + 72) = v9;
    return a1;
  }
  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = a1;
  sub_20AFE805C((uint64_t *)&v11);
  return a1;
}

void sub_20AFE7FA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AFE7FB8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFE7FB8(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 80) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 88);
    if (v5 * (*(_DWORD *)(a1 + 100) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 64);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

__int16 sub_20AFE805C@<H0>(uint64_t *a1@<X0>)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  _WORD *v9;
  _WORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  _WORD *v20;
  int v21;
  int v22;
  unsigned int v23;
  double v24;
  BOOL v25;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;

  v1 = *a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 12) == 1 && *(_DWORD *)(v2 + 12) == 1)
  {
    v22 = *(_DWORD *)(v1 + 16);
    if (v22 == *(_DWORD *)(v2 + 16))
    {
      v23 = *(_DWORD *)v1;
      if (v22 == *(_DWORD *)v1)
      {
        v24 = sub_20AFE81FC(a1);
        return LOWORD(v24);
      }
    }
    else
    {
      v23 = *(_DWORD *)v1;
    }
    v30 = v23;
    if (v23)
      v25 = *(_DWORD *)(v1 + 4) == 0;
    else
      v25 = 1;
    if (!v25 && *(_DWORD *)(v1 + 8) != 0)
      v24 = sub_20AFE83D0(&v30, v1, v2);
  }
  else
  {
    v4 = *(_DWORD *)(v1 + 4);
    v5 = *(_DWORD *)(v1 + 8);
    if (*(_DWORD *)v1)
      v6 = v4 == 0;
    else
      v6 = 1;
    if (!v6 && v5 != 0)
    {
      v8 = v4 - 1;
      v9 = *(_WORD **)(v1 + 64);
      v10 = *(_WORD **)(v2 + 64);
      v11 = 2 * *(unsigned int *)(v1 + 16);
      v12 = 2 * *(unsigned int *)(v2 + 16);
      v13 = v5 - 1;
      if (v13)
      {
        v14 = *(unsigned int *)(v2 + 20);
        v15 = *(unsigned int *)(v1 + 20);
        if (v8)
        {
          v16 = 0;
          v17 = v9 + 1;
          v18 = v10 + 1;
          do
          {
            v19 = v18;
            v20 = v17;
            v21 = v8;
            do
            {
              *(v19 - 1) = *(v20 - 1);
              *v19 = *v20;
              v20 = (_WORD *)((char *)v20 + v11);
              v19 = (_WORD *)((char *)v19 + v12);
              --v21;
            }
            while (v21);
            *(v19 - 1) = *(v20 - 1);
            *v19 = *v20;
            v9 += v15;
            v10 += v14;
            ++v16;
            v17 += v15;
            v18 += v14;
          }
          while (v16 != v13);
        }
        else
        {
          v27 = 2 * v15;
          v28 = 2 * v14;
          do
          {
            *v10 = *v9;
            v10[1] = v9[1];
            v9 = (_WORD *)((char *)v9 + v27);
            v10 = (_WORD *)((char *)v10 + v28);
            --v13;
          }
          while (v13);
        }
      }
      for (; v8; --v8)
      {
        *v10 = *v9;
        v10[1] = v9[1];
        v9 = (_WORD *)((char *)v9 + v11);
        v10 = (_WORD *)((char *)v10 + v12);
      }
      *v10 = *v9;
      LOWORD(v24) = v9[1];
      v10[1] = LOWORD(v24);
    }
  }
  return LOWORD(v24);
}

double sub_20AFE81FC(_QWORD *a1)
{
  int *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  _WORD *v16;
  unint64_t v17;
  __int16 *v18;
  unint64_t v19;
  unint64_t v20;
  _WORD *v21;
  __int128 *v22;
  _OWORD *v23;
  unint64_t v24;
  __int128 v25;
  __int16 v26;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unint64_t v31;
  int v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  _OWORD v36[3];

  v1 = (int *)*a1;
  v2 = a1[1];
  v3 = *(unsigned int *)(*a1 + 20);
  v4 = *(unsigned int *)(v2 + 20);
  if ((_DWORD)v3 != (_DWORD)v4)
  {
    v5 = v1[1];
LABEL_10:
    v9 = *v1;
    v28 = (*v1 * v5);
    v10 = v1[2];
    if (v9)
      v11 = v5 == 0;
    else
      v11 = 1;
    if (!v11 && v10 != 0)
    {
      v29 = 0;
      v30 = v9 - 1;
      v31 = v1[3] | ((unint64_t)*(unsigned int *)(v2 + 12) << 32);
      v32 = v5 - 1;
      v33 = v1[4] | ((unint64_t)*(unsigned int *)(v2 + 16) << 32);
      v34 = v10 - 1;
      v35 = v3 | (v4 << 32);
      v13 = *((_QWORD *)v1 + 8);
      v14 = *(_QWORD *)(v2 + 64);
      memset(v36, 0, sizeof(v36));
      *(_QWORD *)&v15 = sub_20AFE7784((unsigned int *)&v29, (uint64_t)v36, &v28, v13, v14);
    }
    return *(double *)&v15;
  }
  v5 = v1[1];
  if ((_DWORD)v3 != v1[4] * v5)
    goto LABEL_10;
  v6 = (*v1 * v5 * v1[2]);
  v7 = *((_QWORD *)v1 + 8);
  if ((_DWORD)v6)
    v8 = v7 == 0;
  else
    v8 = 0;
  if (v8)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
  }
  else if (!(_DWORD)v6)
  {
    return *(double *)&v15;
  }
  v16 = *(_WORD **)(v2 + 64);
  v17 = (v6 - 1) & 0x7FFFFFFFFFFFFFFFLL;
  if (v17 < 0xF)
  {
    v18 = (__int16 *)v7;
    do
    {
LABEL_26:
      v26 = *v18++;
      LOWORD(v15) = v26;
      *v16++ = v26;
    }
    while (v18 != (__int16 *)(v7 + 2 * v6));
    return *(double *)&v15;
  }
  v18 = (__int16 *)v7;
  if ((unint64_t)v16 - v7 < 0x20)
    goto LABEL_26;
  v19 = v17 + 1;
  v20 = v19 & 0xFFFFFFFFFFFFFFF0;
  v21 = &v16[v20];
  v18 = (__int16 *)(v7 + v20 * 2);
  v22 = (__int128 *)(v7 + 16);
  v23 = v16 + 8;
  v24 = v19 & 0xFFFFFFFFFFFFFFF0;
  do
  {
    v15 = *(v22 - 1);
    v25 = *v22;
    *(v23 - 1) = v15;
    *v23 = v25;
    v22 += 2;
    v23 += 2;
    v24 -= 16;
  }
  while (v24);
  v16 = v21;
  if (v19 != (v19 & 0xFFFFFFFFFFFFFFF0))
    goto LABEL_26;
  return *(double *)&v15;
}

double sub_20AFE83D0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  double result;
  uint64_t v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  _OWORD v21[2];

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v15 = *(_DWORD *)a2 - 1;
    v8 = *(unsigned int *)(a2 + 16);
    v9 = *(unsigned int *)(a3 + 16);
    v16 = *(unsigned int *)(a2 + 12) | ((unint64_t)*(unsigned int *)(a3 + 12) << 32);
    v14 = 0;
    v17 = v3 - 1;
    v18 = v8 | (v9 << 32);
    v20 = *(unsigned int *)(a2 + 20) | ((unint64_t)*(unsigned int *)(a3 + 20) << 32);
    v10 = *(_QWORD *)(a2 + 64);
    v11 = *(_QWORD *)(a3 + 64);
    memset(v21, 0, sizeof(v21));
    v19 = v4 - 1;
    if (v4 != 1)
    {
      v12 = 0;
      do
      {
        sub_20AFE7AC0(&v14, v21, a1, v10, v11);
        v10 += 2 * v20;
        v11 += 2 * HIDWORD(v20);
        ++v12;
      }
      while (v12 < v19);
    }
    *(_QWORD *)&result = sub_20AFE7AC0(&v14, v21, a1, v10, v11);
  }
  return result;
}

float sub_20AFE84BC(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  float result;

  v2 = *a1;
  v1 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v1 + 20) == 1)
  {
    sub_20AFC9A3C(a1);
    return result;
  }
  v4 = *(_DWORD *)(v2 + 12);
  v5 = *(_DWORD *)(v2 + 16);
  if (*(_DWORD *)(v2 + 8))
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v2 + 24);
    v10 = *(unsigned int *)(v1 + 24);
    v11 = *(float **)v2;
    v12 = *(float **)v1;
    v13 = v5 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(v1 + 28);
      v15 = *(unsigned int *)(v2 + 28);
      if (!v8)
      {
        do
        {
          *v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
LABEL_23:
        *v12 = *v11;
        result = v11[1];
        v12[1] = result;
        return result;
      }
      v16 = 0;
      v17 = v11 + 1;
      v18 = v12 + 1;
      do
      {
        v19 = v18;
        v20 = v17;
        v21 = v8;
        do
        {
          *(v19 - 1) = *(v20 - 1);
          *v19 = *v20;
          v20 += v9;
          v19 += v10;
          --v21;
        }
        while (v21);
        *(v19 - 1) = *(v20 - 1);
        *v19 = *v20;
        v11 += v15;
        v12 += v14;
        ++v16;
        v17 += v15;
        v18 += v14;
      }
      while (v16 != v13);
    }
    for (; v8; --v8)
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    goto LABEL_23;
  }
  return result;
}

__n128 sub_20AFE85F8(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC2D8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFE8688(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE8740(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC2D8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FCFD0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC976C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFE8740(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  _QWORD v13[3];
  __int128 v14;
  uint64_t v15;

  if (*(_QWORD *)(a1 + 64)
    && *(_QWORD *)((char *)a2 + 4) == *(_QWORD *)(a1 + 4)
    && *((_QWORD *)a2 + 2) == *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)&v9 = a2;
    *((_QWORD *)&v9 + 1) = a1;
    sub_20AFE8814((uint64_t *)&v9);
    return a1;
  }
  else
  {
    v3 = a2[1];
    v9 = *a2;
    v10 = v3;
    v11 = a2[2];
    v12 = *((_QWORD *)a2 + 6);
    sub_20AFC976C((uint64_t)v13, (uint64_t)a2 + 56);
    v4 = v10;
    *(_OWORD *)a1 = v9;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v11;
    *(_OWORD *)(a1 + 80) = v14;
    *(_QWORD *)(a1 + 96) = v15;
    v5 = v13[0];
    *(_QWORD *)(a1 + 48) = v12;
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(void **)(a1 + 64);
    if (v6)
      free(v6);
    v7 = v13[2];
    *(_QWORD *)(a1 + 64) = v13[1];
    *(_QWORD *)(a1 + 72) = v7;
    return a1;
  }
}

float sub_20AFE8814(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  int v4;
  int v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  uint64_t v10;
  float *v11;
  float *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  _DWORD *v20;
  int v21;
  float result;

  v2 = *a1;
  v1 = a1[1];
  if (*(_DWORD *)(*a1 + 12) == 1 && *(_DWORD *)(v1 + 12) == 1)
  {
    sub_20AFE8950(a1);
    return result;
  }
  v4 = *(_DWORD *)(v2 + 4);
  v5 = *(_DWORD *)(v2 + 8);
  if (*(_DWORD *)v2)
    v6 = v4 == 0;
  else
    v6 = 1;
  if (!v6 && v5 != 0)
  {
    v8 = v4 - 1;
    v9 = *(unsigned int *)(v2 + 16);
    v10 = *(unsigned int *)(v1 + 16);
    v11 = *(float **)(v2 + 64);
    v12 = *(float **)(v1 + 64);
    v13 = v5 - 1;
    if (v13)
    {
      v14 = *(unsigned int *)(v1 + 20);
      v15 = *(unsigned int *)(v2 + 20);
      if (!v8)
      {
        do
        {
          *v12 = *v11;
          v12[1] = v11[1];
          v11 += v15;
          v12 += v14;
          --v13;
        }
        while (v13);
LABEL_23:
        *v12 = *v11;
        result = v11[1];
        v12[1] = result;
        return result;
      }
      v16 = 0;
      v17 = v11 + 1;
      v18 = v12 + 1;
      do
      {
        v19 = v18;
        v20 = v17;
        v21 = v8;
        do
        {
          *(v19 - 1) = *(v20 - 1);
          *v19 = *v20;
          v20 += v9;
          v19 += v10;
          --v21;
        }
        while (v21);
        *(v19 - 1) = *(v20 - 1);
        *v19 = *v20;
        v11 += v15;
        v12 += v14;
        ++v16;
        v17 += v15;
        v18 += v14;
      }
      while (v16 != v13);
    }
    for (; v8; --v8)
    {
      *v12 = *v11;
      v12[1] = v11[1];
      v11 += v9;
      v12 += v10;
    }
    goto LABEL_23;
  }
  return result;
}

uint64_t *sub_20AFE8950(uint64_t *result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  unsigned int v4;
  int v5;
  int v6;
  uint64_t v7;
  const void *v8;
  BOOL v9;
  BOOL v10;
  uint64_t v12;

  v1 = *result;
  v2 = result[1];
  v3 = *(_DWORD *)(*result + 16);
  if (v3 == *(_DWORD *)(v2 + 16))
  {
    v4 = *(_DWORD *)v1;
    if (v3 == *(_DWORD *)(v1 + 12) * *(_DWORD *)v1)
    {
      v5 = *(_DWORD *)(v1 + 20);
      if (v5 != *(_DWORD *)(v2 + 20))
        return (uint64_t *)sub_20AFE8A84((_DWORD *)*result, v2);
      v6 = *(_DWORD *)(v1 + 4);
      if (v5 != v6 * v3)
        return (uint64_t *)sub_20AFE8A84((_DWORD *)*result, v2);
      v7 = v6 * v4 * *(_DWORD *)(v1 + 8);
      v8 = *(const void **)(v1 + 64);
      if ((_DWORD)v7)
        v9 = v8 == 0;
      else
        v9 = 0;
      if (v9)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
      }
      else if (!(_DWORD)v7)
      {
        return result;
      }
      return (uint64_t *)memmove(*(void **)(v2 + 64), v8, 4 * v7);
    }
  }
  else
  {
    v4 = *(_DWORD *)v1;
  }
  v12 = v4;
  if (v4)
    v10 = *(_DWORD *)(v1 + 4) == 0;
  else
    v10 = 1;
  if (!v10 && *(_DWORD *)(v1 + 8) != 0)
    return sub_20AFE8BD8(&v12, v1, v2);
  return result;
}

_DWORD *sub_20AFE8A84(_DWORD *result, uint64_t a2)
{
  int v2;
  int v3;
  BOOL v4;
  uint64_t v6;
  char *v7;
  char *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;

  v2 = result[1];
  v3 = result[2];
  if (*result)
    v4 = v2 == 0;
  else
    v4 = 1;
  if (!v4 && v3 != 0)
  {
    v6 = (v2 * *result);
    v7 = (char *)*((_QWORD *)result + 8);
    v8 = *(char **)(a2 + 64);
    v9 = v3 - 1;
    if (v3 == 1)
    {
LABEL_17:
      if (!(_DWORD)v6 || v7)
      {
        if (!(_DWORD)v6)
          return result;
      }
      else if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_16;
      }
      return memmove(v8, v7, 4 * v6);
    }
    if ((_DWORD)v6)
    {
      v10 = 4 * result[5];
      v11 = 4 * *(unsigned int *)(a2 + 20);
      while (v7
           || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        result = memmove(v8, v7, 4 * v6);
        v7 += v10;
        v8 += v11;
        if (!--v9)
          goto LABEL_17;
      }
LABEL_16:
      abort();
    }
  }
  return result;
}

uint64_t *sub_20AFE8BD8(uint64_t *result, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  int v9;
  char *v10;
  int v11;
  unsigned __int8 *v12;
  char *v13;
  int v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 v19;
  unsigned __int8 *v20;
  unsigned __int8 v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void (*v25)(uint64_t, const char *, uint64_t, const char *, _QWORD);
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  char *v39;
  char *v40;
  int v41;
  int v42;
  uint64_t v43;
  uint64_t *v44;

  v44 = result;
  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v43 = *(unsigned int *)(a2 + 16);
    v8 = *(unsigned int *)(a3 + 16);
    v9 = v4 - 1;
    v5 = v9 == 0;
    v41 = v9;
    v10 = *(char **)(a2 + 64);
    if (!v5)
    {
      if (v3 != 1)
      {
        v11 = 0;
        v12 = (unsigned __int8 *)&qword_25463D258;
        v13 = *(char **)(a3 + 64);
        v36 = *(unsigned int *)(a2 + 20);
        v37 = *(unsigned int *)(a3 + 20);
        v42 = v3 - 1;
        while (1)
        {
          v38 = v11;
          v14 = 0;
          v39 = v13;
          v40 = v10;
          v15 = v10;
          do
          {
            v16 = v15;
            v17 = *v44;
            if (v16 || !v17)
            {
              if (!v17)
                goto LABEL_19;
            }
            else
            {
              v18 = v8;
              sub_20B531CBC("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360);
              v19 = atomic_load(v12);
              if ((v19 & 1) == 0 && __cxa_guard_acquire((__guard *)v12))
              {
                __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
                __cxa_guard_release((__guard *)v12);
              }
              v20 = v12;
              if (!byte_25463D248 || byte_25463D250)
              {
                v22 = qword_25463D220;
                v23 = qword_25463D228;
                while (v22 != v23)
                {
                  v25 = *(void (**)(uint64_t, const char *, uint64_t, const char *, _QWORD))v22;
                  v24 = *(_QWORD *)(v22 + 8);
                  v22 += 16;
                  v25(v24, "ptr != nullptr || size == 0", 27, "", 0);
                }
              }
              v12 = v20;
              v21 = atomic_load(v20);
              if ((v21 & 1) == 0 && __cxa_guard_acquire((__guard *)v20))
              {
                __cxa_atexit((void (*)(void *))sub_20B5324E0, &qword_25463D220, &dword_20AEBB000);
                __cxa_guard_release((__guard *)v20);
              }
              if (!byte_25463D248)
                goto LABEL_52;
              v8 = v18;
              qword_25463D238(unk_25463D240, "ptr != nullptr || size == 0", 27, "", 0);
              v7 = v42;
            }
            result = (uint64_t *)memmove(v13, v16, 4 * v17);
LABEL_19:
            v15 = &v16[4 * v43];
            v13 += 4 * v8;
            ++v14;
          }
          while (v14 != v7);
          v26 = *v44;
          if (!v16 && v26)
          {
            if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
LABEL_14:
              result = (uint64_t *)memmove(v13, v15, 4 * v26);
              goto LABEL_15;
            }
LABEL_52:
            abort();
          }
          if (v26)
            goto LABEL_14;
LABEL_15:
          v10 = &v40[4 * v36];
          v13 = &v39[4 * v37];
          v11 = v38 + 1;
          if (v38 + 1 == v41)
            goto LABEL_40;
        }
      }
      v32 = 4 * *(unsigned int *)(a2 + 20);
      v33 = 4 * *(unsigned int *)(a3 + 20);
      v13 = *(char **)(a3 + 64);
      while (1)
      {
        v34 = *v44;
        v35 = v10;
        if (!v10 && v34)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_52;
          }
        }
        else if (!v34)
        {
          goto LABEL_58;
        }
        result = (uint64_t *)memmove(v13, v35, 4 * v34);
LABEL_58:
        v10 = &v35[v32];
        v13 += v33;
        if (!--v41)
          goto LABEL_40;
      }
    }
    v13 = *(char **)(a3 + 64);
LABEL_40:
    v27 = v13;
    v28 = v10;
    if (v7)
    {
      v29 = 4 * v8;
      do
      {
        v30 = *v44;
        if (!v28 && v30)
        {
          if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
          {
            goto LABEL_52;
          }
        }
        else if (!v30)
        {
          goto LABEL_44;
        }
        result = (uint64_t *)memmove(v27, v28, 4 * v30);
LABEL_44:
        v28 += 4 * v43;
        v27 += v29;
        --v7;
      }
      while (v7);
    }
    v31 = *v44;
    if (!v28 && v31)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_52;
      }
      return (uint64_t *)memmove(v27, v28, 4 * v31);
    }
    if (v31)
      return (uint64_t *)memmove(v27, v28, 4 * v31);
  }
  return result;
}

void sub_20AFE9048(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(_BYTE **)a2;
    v11 = *(_BYTE **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        v15 = 0;
        v16 = v11 + 2;
        v17 = v10 + 2;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *v19 = *v18;
            v19 += v9;
            v18 += v8;
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v10 += v14;
          v11 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v10 += v8;
      v11 += v9;
    }
    *v11 = *v10;
    v11[1] = v10[1];
    v11[2] = v10[2];
  }
}

__n128 sub_20AFE9170(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC2F8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFE9200(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE92B8(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC2F8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD050;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC6680(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFE92B8(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;
  char v17;
  char *v18;

  if (!*(_QWORD *)(a1 + 64)
    || *(_QWORD *)(a2 + 4) != *(_QWORD *)(a1 + 4)
    || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a1 + 16))
  {
    v3 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)a2;
    v11 = v3;
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 48);
    sub_20AFC6680((uint64_t)v14, a2 + 56);
    v4 = v11;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    v5 = v14[0];
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(void **)(a1 + 64);
    if (v6)
      free(v6);
    v7 = v14[2];
    *(_QWORD *)(a1 + 64) = v14[1];
    *(_QWORD *)(a1 + 72) = v7;
    return a1;
  }
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a1;
  if (*(_DWORD *)(a2 + 12) == 1 && *(_DWORD *)(a1 + 12) == 1)
  {
    sub_20AFE6544((size_t *)&v10);
    return a1;
  }
  else
  {
    v17 = 0;
    if (!*(_DWORD *)a2 || !*(_DWORD *)(a2 + 4) || !*(_DWORD *)(a2 + 8))
      return a1;
    v18 = &v17;
    sub_20AFE93E4((uint64_t)&v18, a2, a1);
    return a1;
  }
}

void sub_20AFE93E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 16);
    v9 = *(unsigned int *)(a3 + 16);
    v10 = *(_BYTE **)(a2 + 64);
    v11 = *(_BYTE **)(a3 + 64);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 20);
      v14 = *(unsigned int *)(a2 + 20);
      if (v7)
      {
        v15 = 0;
        v16 = v11 + 2;
        v17 = v10 + 2;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *v19 = *v18;
            v19 += v9;
            v18 += v8;
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v10 += v14;
          v11 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v10 += v8;
      v11 += v9;
    }
    *v11 = *v10;
    v11[1] = v10[1];
    v11[2] = v10[2];
  }
}

__n128 sub_20AFE950C(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC318[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFE959C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE9654(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC318[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD0D0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC7914(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFE9654(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;
  char v17;
  char *v18;

  if (!*(_QWORD *)(a1 + 64)
    || *(_QWORD *)(a2 + 4) != *(_QWORD *)(a1 + 4)
    || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a1 + 16))
  {
    v3 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)a2;
    v11 = v3;
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 48);
    sub_20AFC7914((uint64_t)v14, a2 + 56);
    v4 = v11;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    v5 = v14[0];
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(void **)(a1 + 64);
    if (v6)
      free(v6);
    v7 = v14[2];
    *(_QWORD *)(a1 + 64) = v14[1];
    *(_QWORD *)(a1 + 72) = v7;
    return a1;
  }
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a1;
  if (*(_DWORD *)(a2 + 12) == 1 && *(_DWORD *)(a1 + 12) == 1)
  {
    sub_20AFE6D24((uint64_t *)&v10);
    return a1;
  }
  else
  {
    v17 = 0;
    if (!*(_DWORD *)a2 || !*(_DWORD *)(a2 + 4) || !*(_DWORD *)(a2 + 8))
      return a1;
    v18 = &v17;
    sub_20AFE9780((uint64_t)&v18, a2, a1);
    return a1;
  }
}

void sub_20AFE9780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 16);
    v9 = *(unsigned int *)(a3 + 16);
    v10 = *(_WORD **)(a2 + 64);
    v11 = *(_WORD **)(a3 + 64);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 20);
      v14 = *(unsigned int *)(a2 + 20);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        v11[2] = v10[2];
        return;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
}

double sub_20AFE98D0(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v2;
  BOOL v4;
  double result;
  int v7;
  unsigned int v8;
  BOOL v9;
  char v11;
  char *v12;

  v1 = (_DWORD *)*a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v2 + 20) == 1)
  {
    v7 = v1[6];
    if (v7 == *(_DWORD *)(v2 + 24))
    {
      v8 = v1[2];
      if (v7 == v8)
        return sub_20AFE75BC(a1);
    }
    else
    {
      v8 = v1[2];
    }
    v12 = (char *)v8;
    if (v8)
      v9 = v1[3] == 0;
    else
      v9 = 1;
    if (!v9 && v1[4] != 0)
      return sub_20AFE79D4((uint64_t *)&v12, (uint64_t)v1, v2);
  }
  else
  {
    v11 = 0;
    if (v1[2])
      v4 = v1[3] == 0;
    else
      v4 = 1;
    if (!v4 && v1[4] != 0)
    {
      v12 = &v11;
      *(_QWORD *)&result = sub_20AFE9988((uint64_t)&v12, (uint64_t)v1, v2);
    }
  }
  return result;
}

__int16 sub_20AFE9988@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 result;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(_WORD **)a2;
    v9 = *(_WORD **)a3;
    v10 = 2 * *(unsigned int *)(a2 + 24);
    v11 = 2 * *(unsigned int *)(a3 + 24);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        v15 = 0;
        v16 = v9 + 2;
        v17 = v8 + 2;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *v19 = *v18;
            v19 = (_WORD *)((char *)v19 + v11);
            v18 = (_WORD *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v8 += v14;
          v9 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        v21 = 2 * v14;
        v22 = 2 * v13;
        do
        {
          *v9 = *v8;
          v9[1] = v8[1];
          v9[2] = v8[2];
          v8 = (_WORD *)((char *)v8 + v21);
          v9 = (_WORD *)((char *)v9 + v22);
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v9 = *v8;
      v9[1] = v8[1];
      v9[2] = v8[2];
      v8 = (_WORD *)((char *)v8 + v10);
      v9 = (_WORD *)((char *)v9 + v11);
    }
    *v9 = *v8;
    v9[1] = v8[1];
    result = v8[2];
    v9[2] = result;
  }
  return result;
}

__n128 sub_20AFE9AC8(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC338[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFE9B58(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE9C10(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC338[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD150;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC8C3C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFE9C10(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  void *v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  __int128 v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 64)
    || *(_QWORD *)((char *)a2 + 4) != *(_QWORD *)(a1 + 4)
    || *((_QWORD *)a2 + 2) != *(_QWORD *)(a1 + 16))
  {
    v3 = a2[1];
    v11 = *a2;
    v12 = v3;
    v13 = a2[2];
    v14 = *((_QWORD *)a2 + 6);
    sub_20AFC8C3C((uint64_t)v15, (uint64_t)a2 + 56);
    v4 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_OWORD *)(a1 + 80) = v16;
    *(_QWORD *)(a1 + 96) = v17;
    v5 = *(void **)(a1 + 64);
    if (v5)
    {
      if (*(_DWORD *)(a1 + 88))
        v6 = *(_DWORD *)(a1 + 84) == 0;
      else
        v6 = 1;
      if (v6 || *(_DWORD *)(a1 + 80) == 0)
        v8 = 0;
      else
        v8 = *(_DWORD *)(a1 + 88);
      if (v8 * (*(_DWORD *)(a1 + 100) >> 1) == -1)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v5 = *(void **)(a1 + 64);
        *(_QWORD *)(a1 + 56) = v15[0];
        if (!v5)
          goto LABEL_20;
      }
      else
      {
        *(_QWORD *)(a1 + 56) = v15[0];
      }
      free(v5);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v15[0];
    }
LABEL_20:
    v9 = v15[2];
    *(_QWORD *)(a1 + 64) = v15[1];
    *(_QWORD *)(a1 + 72) = v9;
    return a1;
  }
  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = a1;
  sub_20AFE9E2C((unsigned int **)&v11);
  return a1;
}

void sub_20AFE9D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AFE9D88((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFE9D88(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 80) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 88);
    if (v5 * (*(_DWORD *)(a1 + 100) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 64);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

double sub_20AFE9E2C(unsigned int **a1)
{
  unsigned int *v1;
  uint64_t v2;
  BOOL v4;
  double result;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  char v11;
  char *v12;

  v1 = *a1;
  v2 = (uint64_t)a1[1];
  if ((*a1)[3] == 1 && *(_DWORD *)(v2 + 12) == 1)
  {
    v7 = v1[4];
    if (v7 == *(_DWORD *)(v2 + 16))
    {
      v8 = *v1;
      if (v7 == *v1)
        return sub_20AFE81FC(a1);
    }
    else
    {
      v8 = *v1;
    }
    v12 = (char *)v8;
    if (v8)
      v9 = v1[1] == 0;
    else
      v9 = 1;
    if (!v9 && v1[2] != 0)
      return sub_20AFE83D0((uint64_t *)&v12, (uint64_t)v1, v2);
  }
  else
  {
    v11 = 0;
    if (*v1)
      v4 = v1[1] == 0;
    else
      v4 = 1;
    if (!v4 && v1[2] != 0)
    {
      v12 = &v11;
      *(_QWORD *)&result = sub_20AFE9EE4((uint64_t)&v12, (uint64_t)v1, v2);
    }
  }
  return result;
}

__int16 sub_20AFE9EE4@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 result;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(_WORD **)(a2 + 64);
    v9 = *(_WORD **)(a3 + 64);
    v10 = 2 * *(unsigned int *)(a2 + 16);
    v11 = 2 * *(unsigned int *)(a3 + 16);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 20);
      v14 = *(unsigned int *)(a2 + 20);
      if (v7)
      {
        v15 = 0;
        v16 = v9 + 2;
        v17 = v8 + 2;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *v19 = *v18;
            v19 = (_WORD *)((char *)v19 + v11);
            v18 = (_WORD *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v8 += v14;
          v9 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        v21 = 2 * v14;
        v22 = 2 * v13;
        do
        {
          *v9 = *v8;
          v9[1] = v8[1];
          v9[2] = v8[2];
          v8 = (_WORD *)((char *)v8 + v21);
          v9 = (_WORD *)((char *)v9 + v22);
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v9 = *v8;
      v9[1] = v8[1];
      v9[2] = v8[2];
      v8 = (_WORD *)((char *)v8 + v10);
      v9 = (_WORD *)((char *)v9 + v11);
    }
    *v9 = *v8;
    v9[1] = v8[1];
    result = v8[2];
    v9[2] = result;
  }
  return result;
}

__n128 sub_20AFEA024(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC358[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEA0B4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEA16C(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC358[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD1D0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC976C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFEA16C(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;
  char v17;
  char *v18;

  if (!*(_QWORD *)(a1 + 64)
    || *(_QWORD *)(a2 + 4) != *(_QWORD *)(a1 + 4)
    || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a1 + 16))
  {
    v3 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)a2;
    v11 = v3;
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 48);
    sub_20AFC976C((uint64_t)v14, a2 + 56);
    v4 = v11;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    v5 = v14[0];
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(void **)(a1 + 64);
    if (v6)
      free(v6);
    v7 = v14[2];
    *(_QWORD *)(a1 + 64) = v14[1];
    *(_QWORD *)(a1 + 72) = v7;
    return a1;
  }
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a1;
  if (*(_DWORD *)(a2 + 12) == 1 && *(_DWORD *)(a1 + 12) == 1)
  {
    sub_20AFE8950((uint64_t *)&v10);
    return a1;
  }
  else
  {
    v17 = 0;
    if (!*(_DWORD *)a2 || !*(_DWORD *)(a2 + 4) || !*(_DWORD *)(a2 + 8))
      return a1;
    v18 = &v17;
    sub_20AFEA298((uint64_t)&v18, a2, a1);
    return a1;
  }
}

float sub_20AFEA298(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  float result;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 16);
    v9 = *(unsigned int *)(a3 + 16);
    v10 = *(float **)(a2 + 64);
    v11 = *(float **)(a3 + 64);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 20);
      v14 = *(unsigned int *)(a2 + 20);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        result = v10[2];
        v11[2] = result;
        return result;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
  return result;
}

void sub_20AFEA3E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(_BYTE **)a2;
    v11 = *(_BYTE **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        v15 = 0;
        v16 = v11 + 3;
        v17 = v10 + 1;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 3) = *(v18 - 1);
            *(v19 - 2) = *v18;
            *(v19 - 1) = v18[1];
            *v19 = v18[2];
            v19 += v9;
            v18 += v8;
            --v20;
          }
          while (v20);
          *(v19 - 3) = *(v18 - 1);
          *(v19 - 2) = *v18;
          *(v19 - 1) = v18[1];
          *v19 = v18[2];
          v10 += v14;
          v11 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    *v11 = *v10;
    v11[1] = v10[1];
    v11[2] = v10[2];
    v11[3] = v10[3];
  }
}

__n128 sub_20AFEA530(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC378[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEA5C0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEA678(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC378[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD250;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC6680(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFEA678(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;
  char v17;
  char *v18;

  if (!*(_QWORD *)(a1 + 64)
    || *(_QWORD *)(a2 + 4) != *(_QWORD *)(a1 + 4)
    || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a1 + 16))
  {
    v3 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)a2;
    v11 = v3;
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 48);
    sub_20AFC6680((uint64_t)v14, a2 + 56);
    v4 = v11;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    v5 = v14[0];
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(void **)(a1 + 64);
    if (v6)
      free(v6);
    v7 = v14[2];
    *(_QWORD *)(a1 + 64) = v14[1];
    *(_QWORD *)(a1 + 72) = v7;
    return a1;
  }
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a1;
  if (*(_DWORD *)(a2 + 12) == 1 && *(_DWORD *)(a1 + 12) == 1)
  {
    sub_20AFE6544((size_t *)&v10);
    return a1;
  }
  else
  {
    v17 = 0;
    if (!*(_DWORD *)a2 || !*(_DWORD *)(a2 + 4) || !*(_DWORD *)(a2 + 8))
      return a1;
    v18 = &v17;
    sub_20AFEA7A4((uint64_t)&v18, a2, a1);
    return a1;
  }
}

void sub_20AFEA7A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  _BYTE *v17;
  _BYTE *v18;
  _BYTE *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 16);
    v9 = *(unsigned int *)(a3 + 16);
    v10 = *(_BYTE **)(a2 + 64);
    v11 = *(_BYTE **)(a3 + 64);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 20);
      v14 = *(unsigned int *)(a2 + 20);
      if (v7)
      {
        v15 = 0;
        v16 = v11 + 3;
        v17 = v10 + 1;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 3) = *(v18 - 1);
            *(v19 - 2) = *v18;
            *(v19 - 1) = v18[1];
            *v19 = v18[2];
            v19 += v9;
            v18 += v8;
            --v20;
          }
          while (v20);
          *(v19 - 3) = *(v18 - 1);
          *(v19 - 2) = *v18;
          *(v19 - 1) = v18[1];
          *v19 = v18[2];
          v10 += v14;
          v11 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    *v11 = *v10;
    v11[1] = v10[1];
    v11[2] = v10[2];
    v11[3] = v10[3];
  }
}

void sub_20AFEA8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(_WORD **)a2;
    v11 = *(_WORD **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        v11[2] = v10[2];
        v11[3] = v10[3];
        return;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v19[1] = v18[1];
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
}

__n128 sub_20AFEAA6C(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC398[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEAAFC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEABB4(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC398[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD2D0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC7914(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFEABB4(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;
  char v17;
  char *v18;

  if (!*(_QWORD *)(a1 + 64)
    || *(_QWORD *)(a2 + 4) != *(_QWORD *)(a1 + 4)
    || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a1 + 16))
  {
    v3 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)a2;
    v11 = v3;
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 48);
    sub_20AFC7914((uint64_t)v14, a2 + 56);
    v4 = v11;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    v5 = v14[0];
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(void **)(a1 + 64);
    if (v6)
      free(v6);
    v7 = v14[2];
    *(_QWORD *)(a1 + 64) = v14[1];
    *(_QWORD *)(a1 + 72) = v7;
    return a1;
  }
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a1;
  if (*(_DWORD *)(a2 + 12) == 1 && *(_DWORD *)(a1 + 12) == 1)
  {
    sub_20AFE6D24((uint64_t *)&v10);
    return a1;
  }
  else
  {
    v17 = 0;
    if (!*(_DWORD *)a2 || !*(_DWORD *)(a2 + 4) || !*(_DWORD *)(a2 + 8))
      return a1;
    v18 = &v17;
    sub_20AFEACE0((uint64_t)&v18, a2, a1);
    return a1;
  }
}

void sub_20AFEACE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _WORD *v10;
  _WORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 16);
    v9 = *(unsigned int *)(a3 + 16);
    v10 = *(_WORD **)(a2 + 64);
    v11 = *(_WORD **)(a3 + 64);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 20);
      v14 = *(unsigned int *)(a2 + 20);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        v11[2] = v10[2];
        v11[3] = v10[3];
        return;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v19[1] = v18[1];
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
}

double sub_20AFEAE58(_QWORD *a1)
{
  _DWORD *v1;
  uint64_t v2;
  BOOL v4;
  double result;
  int v7;
  unsigned int v8;
  BOOL v9;
  char v11;
  char *v12;

  v1 = (_DWORD *)*a1;
  v2 = a1[1];
  if (*(_DWORD *)(*a1 + 20) == 1 && *(_DWORD *)(v2 + 20) == 1)
  {
    v7 = v1[6];
    if (v7 == *(_DWORD *)(v2 + 24))
    {
      v8 = v1[2];
      if (v7 == v8)
        return sub_20AFE75BC(a1);
    }
    else
    {
      v8 = v1[2];
    }
    v12 = (char *)v8;
    if (v8)
      v9 = v1[3] == 0;
    else
      v9 = 1;
    if (!v9 && v1[4] != 0)
      return sub_20AFE79D4((uint64_t *)&v12, (uint64_t)v1, v2);
  }
  else
  {
    v11 = 0;
    if (v1[2])
      v4 = v1[3] == 0;
    else
      v4 = 1;
    if (!v4 && v1[4] != 0)
    {
      v12 = &v11;
      *(_QWORD *)&result = sub_20AFEAF10((uint64_t)&v12, (uint64_t)v1, v2);
    }
  }
  return result;
}

__int16 sub_20AFEAF10@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 result;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(_WORD **)a2;
    v9 = *(_WORD **)a3;
    v10 = 2 * *(unsigned int *)(a2 + 24);
    v11 = 2 * *(unsigned int *)(a3 + 24);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (v7)
      {
        v15 = 0;
        v16 = v9 + 2;
        v17 = v8 + 2;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *v19 = *v18;
            v19[1] = v18[1];
            v19 = (_WORD *)((char *)v19 + v11);
            v18 = (_WORD *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v8 += v14;
          v9 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        v21 = 2 * v14;
        v22 = 2 * v13;
        do
        {
          *v9 = *v8;
          v9[1] = v8[1];
          v9[2] = v8[2];
          v9[3] = v8[3];
          v8 = (_WORD *)((char *)v8 + v21);
          v9 = (_WORD *)((char *)v9 + v22);
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v9 = *v8;
      v9[1] = v8[1];
      v9[2] = v8[2];
      v9[3] = v8[3];
      v8 = (_WORD *)((char *)v8 + v10);
      v9 = (_WORD *)((char *)v9 + v11);
    }
    *v9 = *v8;
    v9[1] = v8[1];
    v9[2] = v8[2];
    result = v8[3];
    v9[3] = result;
  }
  return result;
}

__n128 sub_20AFEB078(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC3B8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEB108(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEB1C0(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC3B8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD350;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC8C3C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFEB1C0(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  __int128 v4;
  void *v5;
  BOOL v6;
  int v8;
  uint64_t v9;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  _QWORD v15[3];
  __int128 v16;
  uint64_t v17;

  if (!*(_QWORD *)(a1 + 64)
    || *(_QWORD *)((char *)a2 + 4) != *(_QWORD *)(a1 + 4)
    || *((_QWORD *)a2 + 2) != *(_QWORD *)(a1 + 16))
  {
    v3 = a2[1];
    v11 = *a2;
    v12 = v3;
    v13 = a2[2];
    v14 = *((_QWORD *)a2 + 6);
    sub_20AFC8C3C((uint64_t)v15, (uint64_t)a2 + 56);
    v4 = v12;
    *(_OWORD *)a1 = v11;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v13;
    *(_QWORD *)(a1 + 48) = v14;
    *(_OWORD *)(a1 + 80) = v16;
    *(_QWORD *)(a1 + 96) = v17;
    v5 = *(void **)(a1 + 64);
    if (v5)
    {
      if (*(_DWORD *)(a1 + 88))
        v6 = *(_DWORD *)(a1 + 84) == 0;
      else
        v6 = 1;
      if (v6 || *(_DWORD *)(a1 + 80) == 0)
        v8 = 0;
      else
        v8 = *(_DWORD *)(a1 + 88);
      if (v8 * (*(_DWORD *)(a1 + 100) >> 1) == -1)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v5 = *(void **)(a1 + 64);
        *(_QWORD *)(a1 + 56) = v15[0];
        if (!v5)
          goto LABEL_20;
      }
      else
      {
        *(_QWORD *)(a1 + 56) = v15[0];
      }
      free(v5);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = v15[0];
    }
LABEL_20:
    v9 = v15[2];
    *(_QWORD *)(a1 + 64) = v15[1];
    *(_QWORD *)(a1 + 72) = v9;
    return a1;
  }
  *(_QWORD *)&v11 = a2;
  *((_QWORD *)&v11 + 1) = a1;
  sub_20AFEB3DC((unsigned int **)&v11);
  return a1;
}

void sub_20AFEB324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AFEB338((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFEB338(uint64_t a1)
{
  void *v2;
  BOOL v3;
  BOOL v4;
  int v5;

  v2 = *(void **)(a1 + 64);
  if (v2)
  {
    v3 = !*(_DWORD *)(a1 + 88) || *(_DWORD *)(a1 + 84) == 0;
    v4 = v3 || *(_DWORD *)(a1 + 80) == 0;
    v5 = v4 ? 0 : *(_DWORD *)(a1 + 88);
    if (v5 * (*(_DWORD *)(a1 + 100) >> 1) != -1)
      goto LABEL_14;
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v2 = *(void **)(a1 + 64);
    if (v2)
LABEL_14:
      free(v2);
  }
  *(_QWORD *)(a1 + 64) = 0;
  return a1;
}

double sub_20AFEB3DC(unsigned int **a1)
{
  unsigned int *v1;
  uint64_t v2;
  BOOL v4;
  double result;
  unsigned int v7;
  unsigned int v8;
  BOOL v9;
  char v11;
  char *v12;

  v1 = *a1;
  v2 = (uint64_t)a1[1];
  if ((*a1)[3] == 1 && *(_DWORD *)(v2 + 12) == 1)
  {
    v7 = v1[4];
    if (v7 == *(_DWORD *)(v2 + 16))
    {
      v8 = *v1;
      if (v7 == *v1)
        return sub_20AFE81FC(a1);
    }
    else
    {
      v8 = *v1;
    }
    v12 = (char *)v8;
    if (v8)
      v9 = v1[1] == 0;
    else
      v9 = 1;
    if (!v9 && v1[2] != 0)
      return sub_20AFE83D0((uint64_t *)&v12, (uint64_t)v1, v2);
  }
  else
  {
    v11 = 0;
    if (*v1)
      v4 = v1[1] == 0;
    else
      v4 = 1;
    if (!v4 && v1[2] != 0)
    {
      v12 = &v11;
      *(_QWORD *)&result = sub_20AFEB494((uint64_t)&v12, (uint64_t)v1, v2);
    }
  }
  return result;
}

__int16 sub_20AFEB494@<H0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  _WORD *v8;
  _WORD *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _WORD *v16;
  _WORD *v17;
  _WORD *v18;
  _WORD *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 result;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(_WORD **)(a2 + 64);
    v9 = *(_WORD **)(a3 + 64);
    v10 = 2 * *(unsigned int *)(a2 + 16);
    v11 = 2 * *(unsigned int *)(a3 + 16);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 20);
      v14 = *(unsigned int *)(a2 + 20);
      if (v7)
      {
        v15 = 0;
        v16 = v9 + 2;
        v17 = v8 + 2;
        do
        {
          v18 = v17;
          v19 = v16;
          v20 = v7;
          do
          {
            *(v19 - 2) = *(v18 - 2);
            *(v19 - 1) = *(v18 - 1);
            *v19 = *v18;
            v19[1] = v18[1];
            v19 = (_WORD *)((char *)v19 + v11);
            v18 = (_WORD *)((char *)v18 + v10);
            --v20;
          }
          while (v20);
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v8 += v14;
          v9 += v13;
          ++v15;
          v16 += v13;
          v17 += v14;
        }
        while (v15 != v12);
      }
      else
      {
        v21 = 2 * v14;
        v22 = 2 * v13;
        do
        {
          *v9 = *v8;
          v9[1] = v8[1];
          v9[2] = v8[2];
          v9[3] = v8[3];
          v8 = (_WORD *)((char *)v8 + v21);
          v9 = (_WORD *)((char *)v9 + v22);
          --v12;
        }
        while (v12);
      }
    }
    for (; v7; --v7)
    {
      *v9 = *v8;
      v9[1] = v8[1];
      v9[2] = v8[2];
      v9[3] = v8[3];
      v8 = (_WORD *)((char *)v8 + v10);
      v9 = (_WORD *)((char *)v9 + v11);
    }
    *v9 = *v8;
    v9[1] = v8[1];
    v9[2] = v8[2];
    result = v8[3];
    v9[3] = result;
  }
  return result;
}

float sub_20AFEB5FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  float result;

  v3 = *(_DWORD *)(a2 + 12);
  v4 = *(_DWORD *)(a2 + 16);
  if (*(_DWORD *)(a2 + 8))
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 24);
    v9 = *(unsigned int *)(a3 + 24);
    v10 = *(float **)a2;
    v11 = *(float **)a3;
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 28);
      v14 = *(unsigned int *)(a2 + 28);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        v11[2] = v10[2];
        result = v10[3];
        v11[3] = result;
        return result;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v19[1] = v18[1];
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
  return result;
}

__n128 sub_20AFEB76C(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC3D8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEB7FC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEB8B4(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC3D8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD3D0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC976C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

uint64_t sub_20AFEB8B4(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  uint64_t v5;
  void *v6;
  uint64_t v7;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD v14[3];
  __int128 v15;
  uint64_t v16;
  char v17;
  char *v18;

  if (!*(_QWORD *)(a1 + 64)
    || *(_QWORD *)(a2 + 4) != *(_QWORD *)(a1 + 4)
    || *(_QWORD *)(a2 + 16) != *(_QWORD *)(a1 + 16))
  {
    v3 = *(_OWORD *)(a2 + 16);
    v10 = *(_OWORD *)a2;
    v11 = v3;
    v12 = *(_OWORD *)(a2 + 32);
    v13 = *(_QWORD *)(a2 + 48);
    sub_20AFC976C((uint64_t)v14, a2 + 56);
    v4 = v11;
    *(_OWORD *)a1 = v10;
    *(_OWORD *)(a1 + 16) = v4;
    *(_OWORD *)(a1 + 32) = v12;
    *(_OWORD *)(a1 + 80) = v15;
    *(_QWORD *)(a1 + 96) = v16;
    v5 = v14[0];
    *(_QWORD *)(a1 + 48) = v13;
    *(_QWORD *)(a1 + 56) = v5;
    v6 = *(void **)(a1 + 64);
    if (v6)
      free(v6);
    v7 = v14[2];
    *(_QWORD *)(a1 + 64) = v14[1];
    *(_QWORD *)(a1 + 72) = v7;
    return a1;
  }
  *(_QWORD *)&v10 = a2;
  *((_QWORD *)&v10 + 1) = a1;
  if (*(_DWORD *)(a2 + 12) == 1 && *(_DWORD *)(a1 + 12) == 1)
  {
    sub_20AFE8950((uint64_t *)&v10);
    return a1;
  }
  else
  {
    v17 = 0;
    if (!*(_DWORD *)a2 || !*(_DWORD *)(a2 + 4) || !*(_DWORD *)(a2 + 8))
      return a1;
    v18 = &v17;
    sub_20AFEB9E0((uint64_t)&v18, a2, a1);
    return a1;
  }
}

float sub_20AFEB9E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  int v4;
  BOOL v5;
  int v7;
  uint64_t v8;
  uint64_t v9;
  float *v10;
  float *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _DWORD *v16;
  _DWORD *v17;
  _DWORD *v18;
  _DWORD *v19;
  int v20;
  float result;

  v3 = *(_DWORD *)(a2 + 4);
  v4 = *(_DWORD *)(a2 + 8);
  if (*(_DWORD *)a2)
    v5 = v3 == 0;
  else
    v5 = 1;
  if (!v5 && v4 != 0)
  {
    v7 = v3 - 1;
    v8 = *(unsigned int *)(a2 + 16);
    v9 = *(unsigned int *)(a3 + 16);
    v10 = *(float **)(a2 + 64);
    v11 = *(float **)(a3 + 64);
    v12 = v4 - 1;
    if (v12)
    {
      v13 = *(unsigned int *)(a3 + 20);
      v14 = *(unsigned int *)(a2 + 20);
      if (!v7)
      {
        do
        {
          *v11 = *v10;
          v11[1] = v10[1];
          v11[2] = v10[2];
          v11[3] = v10[3];
          v10 += v14;
          v11 += v13;
          --v12;
        }
        while (v12);
LABEL_18:
        *v11 = *v10;
        v11[1] = v10[1];
        v11[2] = v10[2];
        result = v10[3];
        v11[3] = result;
        return result;
      }
      v15 = 0;
      v16 = v11 + 2;
      v17 = v10 + 2;
      do
      {
        v18 = v17;
        v19 = v16;
        v20 = v7;
        do
        {
          *(v19 - 2) = *(v18 - 2);
          *(v19 - 1) = *(v18 - 1);
          *v19 = *v18;
          v19[1] = v18[1];
          v19 += v9;
          v18 += v8;
          --v20;
        }
        while (v20);
        *(v19 - 2) = *(v18 - 2);
        *(v19 - 1) = *(v18 - 1);
        *v19 = *v18;
        v19[1] = v18[1];
        v10 += v14;
        v11 += v13;
        ++v15;
        v16 += v13;
        v17 += v14;
      }
      while (v15 != v12);
    }
    for (; v7; --v7)
    {
      *v11 = *v10;
      v11[1] = v10[1];
      v11[2] = v10[2];
      v11[3] = v10[3];
      v10 += v8;
      v11 += v9;
    }
    goto LABEL_18;
  }
  return result;
}

__n128 sub_20AFEBB50(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC3F8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEBBE0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE92B8(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC3F8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD450;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC6680(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFEBC98(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC418[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEBD28(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE9654(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC418[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD4D0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC7914(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFEBDE0(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC438[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEBE70(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE9C10(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC438[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD550;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC8C3C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFEBF28(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC458[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEBFB8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEA16C(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC458[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD5D0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC976C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFEC070(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC478[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEC100(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE92B8(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC478[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD650;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC6680(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFEC1B8(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC498[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEC248(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE9654(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC498[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD6D0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC7914(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFEC300(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC4B8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEC390(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFE9C10(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC4B8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD750;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC8C3C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFEC448(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC4D8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEC4D8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEA16C(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC4D8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD7D0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC976C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFEC590(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC4F8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEC620(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEA678(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC4F8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD850;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC6680(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFEC6D8(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC518[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEC768(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEABB4(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC518[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD8D0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC7914(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFEC820(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC538[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEC8B0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEB1C0(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC538[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD950;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC8C3C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFEC968(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC558[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFEC9F8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEB8B4(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC558[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FD9D0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC976C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFECAB0(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC578[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFECB40(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEA678(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC578[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDA50;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC6680(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFECBF8(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC598[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFECC88(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEABB4(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC598[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDAD0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC7914(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFECD40(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC5B8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFECDD0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEB1C0(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC5B8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDB50;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC8C3C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFECE88(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC5D8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFECF18(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEB8B4(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC5D8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDBD0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC976C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFECFD0(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC5F8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFED060(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEA678(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC5F8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDC50;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC6680(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFED118(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC618[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFED1A8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEABB4(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC618[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDCD0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC7914(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFED260(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC638[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFED2F0(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEB1C0(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC638[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDD50;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC8C3C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFED3A8(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC658[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFED438(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEB8B4(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC658[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDDD0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC976C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFED4F0(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC678[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFED580(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEA678(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC678[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDE50;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC6680(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFED638(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC698[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFED6C8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEABB4(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC698[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDED0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC7914(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFED780(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC6B8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFED810(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEB1C0(a2 + 8, (__int128 *)(a3 + 8));
    ((void (*)(char *, uint64_t))off_24C3FC6B8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDF50;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC8C3C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

__n128 sub_20AFED8C8(__n128 **a1, __n128 *a2, __n128 *a3)
{
  __n128 *v4;
  uint64_t v5;
  __n128 result;
  char v7;

  v4 = *a1;
  v5 = (*a1)[7].n128_u32[0];
  if ((_DWORD)v5 != -1)
  {
    if (!(_DWORD)v5)
    {
      result = *a3;
      a2[1].n128_u64[0] = a3[1].n128_u64[0];
      *a2 = result;
      return result;
    }
    ((void (*)(char *, __n128 *))off_24C3FC6D8[v5])(&v7, v4);
  }
  v4[7].n128_u32[0] = -1;
  result = *a3;
  v4[1].n128_u64[0] = a3[1].n128_u64[0];
  *v4 = result;
  v4[7].n128_u32[0] = 0;
  return result;
}

uint64_t sub_20AFED958(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 112);
  if ((_DWORD)v5 != -1)
  {
    if ((_DWORD)v5 == 1)
      return sub_20AFEB8B4(a2 + 8, a3 + 8);
    ((void (*)(char *, uint64_t))off_24C3FC6D8[v5])(&v10, v4);
  }
  *(_DWORD *)(v4 + 112) = -1;
  *(_QWORD *)v4 = &off_24C3FDFD0;
  v7 = *(_OWORD *)(a3 + 8);
  v8 = *(_OWORD *)(a3 + 24);
  v9 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(v4 + 56) = *(_QWORD *)(a3 + 56);
  *(_OWORD *)(v4 + 40) = v9;
  *(_OWORD *)(v4 + 24) = v8;
  *(_OWORD *)(v4 + 8) = v7;
  result = sub_20AFC976C(v4 + 64, a3 + 64);
  *(_DWORD *)(v4 + 112) = 1;
  return result;
}

void sub_20AFEDA10(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  void *v6[2];
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 __p;
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;

  if (a2 <= 3)
  {
    *(_QWORD *)(a1 + 56) = a2;
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  sub_20AF55B94((uint64_t)v6, "invalid value for VZFileExportBehavior");
  v14 = 1;
  sub_20AECCC3C(0xAu, (__int128 *)v6, (uint64_t)&v15);
  *(_OWORD *)a3 = v15;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v25)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v14)
      return;
LABEL_15:
    if (!v13)
      goto LABEL_18;
    if (v12 < 0)
    {
      operator delete(v11);
      if ((v10 & 0x80000000) == 0)
      {
LABEL_18:
        if (!v8)
          return;
        goto LABEL_19;
      }
    }
    else if ((v10 & 0x80000000) == 0)
    {
      goto LABEL_18;
    }
    operator delete(v9);
    if (!v8)
      return;
LABEL_19:
    if (v7 < 0)
      operator delete(v6[0]);
    return;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v4 = v18;
  if (v18)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v17;
    v17 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v24)
  {
    v5 = v21;
    *(_QWORD *)(a3 + 64) = v20;
    *(_OWORD *)(a3 + 48) = v19;
    v19 = 0uLL;
    *(_QWORD *)(a3 + 72) = v5;
    *(_OWORD *)(a3 + 80) = v22;
    *(_QWORD *)(a3 + 96) = v23;
    v20 = 0;
    v22 = 0uLL;
    v23 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v4 && SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  if (v14)
    goto LABEL_15;
}

void sub_20AFEDBBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCDB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFEDBD0(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *(_BYTE *)(result + 40) = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      v2 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(result + 16) = v2;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(result + 40) = 1;
    }
    *(_BYTE *)(result + 48) = 0;
    *(_BYTE *)(result + 104) = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      v3 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 48) = v3;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
      v4 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(result + 80) = v4;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_BYTE *)(result + 104) = 1;
    }
    *(_BYTE *)(result + 112) = 1;
  }
  *(_BYTE *)(result + 120) = 0;
  return result;
}

void sub_20AFEDC80(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v7;
  std::string::size_type v8;
  unint64_t v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  const char *v15;
  std::string *v16;
  const char *v17;
  const char *v18;
  int v19;
  std::string::size_type v20;
  std::string *v21;
  char *v22;
  char *v23;
  uint64_t v24;
  std::string::size_type *v25;
  const char *v26;
  const char *v27;
  std::string::size_type *v28;
  uint64_t v29;
  std::string::size_type size;
  std::string *v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  std::string::size_type *v35;
  std::string v36;
  std::string __dst;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  char v44;
  std::string v45;
  char v46;
  __int128 v47;
  char v48[2];
  __int128 v49;
  __int128 __p;
  uint64_t v51;
  unsigned __int8 v52;
  __int128 v53;
  uint64_t v54;
  uint64_t v55;
  __int128 v56;
  uint64_t v57;
  char v58;
  char v59;
  _QWORD v60[4];
  int v61;
  char v62;
  const char *v63;
  std::string::size_type v64;
  std::string *v65;
  const char *v66;
  const char *v67;
  uint64_t v68;
  uint64_t v69[3];

  v69[0] = *MEMORY[0x24BDAC8D0];
  if (!*(_BYTE *)(a1 + 24))
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
  sub_20B07A768(a2, &v49);
  v60[0] = a3;
  v61 = 0;
  v62 = 1;
  v8 = a1 + 16;
  v7 = *(_QWORD *)(a1 + 16);
  v9 = *(_QWORD *)(a1 + 8);
  if (v9 < v7)
  {
    *(_QWORD *)v9 = &off_24C411BF8;
    sub_20AFF305C(v9 + 16, (uint64_t)&__p);
    *(_BYTE *)(v9 + 768) = 0;
    *(_BYTE *)(v9 + 808) = 0;
    if (v62)
    {
      *(_DWORD *)(v9 + 800) = -1;
      v10 = v61;
      if (v61 != -1)
      {
        ((void (*)(const char **, unint64_t, _QWORD *))off_24C3FEBF0[v61])(&v63, v9 + 768, v60);
        *(_DWORD *)(v9 + 800) = v10;
      }
      *(_BYTE *)(v9 + 808) = 1;
    }
    *(_QWORD *)(a1 + 8) = v9 + 816;
    *(_QWORD *)(a1 + 8) = v9 + 816;
    if (!v62)
      goto LABEL_9;
LABEL_45:
    if (v61 != -1)
      ((void (*)(const char **, _QWORD *))off_24C3FEB80[v61])(&v63, v60);
    v61 = -1;
    *(_QWORD *)&v49 = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)&__p);
    if (a3 < 0x200)
      goto LABEL_10;
    goto LABEL_48;
  }
  v11 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(v9 - *(_QWORD *)a1) >> 4);
  if (v11 + 1 > 0x50505050505050)
    sub_20AEC60B8();
  v12 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(v7 - *(_QWORD *)a1) >> 4);
  v13 = 2 * v12;
  if (2 * v12 <= v11 + 1)
    v13 = v11 + 1;
  if (v12 >= 0x28282828282828)
    v14 = 0x50505050505050;
  else
    v14 = v13;
  v67 = (const char *)(a1 + 16);
  if (v14)
  {
    if (v14 > 0x50505050505050)
      sub_20AEC60CC();
    v15 = (const char *)operator new(816 * v14);
  }
  else
  {
    v15 = 0;
  }
  v16 = (std::string *)&v15[816 * v11];
  v63 = v15;
  v64 = (std::string::size_type)v16;
  v65 = v16;
  v66 = &v15[816 * v14];
  v16->__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C411BF8;
  sub_20AFF305C((uint64_t)&v16->__r_.__value_.__r.__words[2], (uint64_t)&__p);
  v35 = (std::string::size_type *)a1;
  v17 = &v15[816 * v11];
  *((_BYTE *)v17 + 768) = 0;
  *((_BYTE *)v17 + 808) = 0;
  if (v62)
  {
    v18 = &v15[816 * v11];
    *((_DWORD *)v18 + 200) = -1;
    v19 = v61;
    if (v61 != -1)
    {
      ((void (*)(std::string *, const char *, _QWORD *))off_24C3FEBF0[v61])(&v45, v17 + 768, v60);
      *((_DWORD *)v18 + 200) = v19;
    }
    *((_BYTE *)v17 + 808) = 1;
  }
  v20 = v64;
  v21 = v65 + 34;
  v65 += 34;
  v22 = (char *)*v35;
  v23 = (char *)v35[1];
  v36.__r_.__value_.__r.__words[0] = v64;
  v36.__r_.__value_.__l.__size_ = v64;
  v47 = *(_OWORD *)&v36.__r_.__value_.__l.__data_;
  v45.__r_.__value_.__r.__words[0] = v8;
  v45.__r_.__value_.__l.__size_ = (std::string::size_type)&v47;
  v45.__r_.__value_.__r.__words[2] = (std::string::size_type)&v36;
  v46 = 0;
  if (v23 == v22)
  {
    v26 = v23;
    v25 = v35;
  }
  else
  {
    v34 = a4;
    do
    {
      *(_QWORD *)(v20 - 816) = &off_24C411BF8;
      sub_20AF054F8(v20 - 800, (uint64_t)(v23 - 800));
      *(_BYTE *)(v20 - 48) = 0;
      *(_BYTE *)(v20 - 8) = 0;
      if (*(v23 - 8))
      {
        *(_BYTE *)(v20 - 48) = 0;
        *(_DWORD *)(v20 - 16) = -1;
        v24 = *((unsigned int *)v23 - 4);
        if ((_DWORD)v24 != -1)
        {
          ((void (*)(char *, std::string::size_type, char *))off_24C3FEB90[v24])(v48, v20 - 48, v23 - 48);
          *(_DWORD *)(v20 - 16) = v24;
        }
        *(_BYTE *)(v20 - 8) = 1;
      }
      v23 -= 816;
      v20 = v36.__r_.__value_.__l.__size_ - 816;
      v36.__r_.__value_.__l.__size_ -= 816;
    }
    while (v23 != v22);
    v25 = v35;
    v26 = (const char *)*v35;
    v23 = (char *)v35[1];
    a4 = v34;
  }
  *v25 = v20;
  v25[1] = (std::string::size_type)v21;
  v27 = (const char *)v25[2];
  v25[2] = (std::string::size_type)v66;
  v66 = v27;
  v63 = v26;
  v64 = (std::string::size_type)v26;
  v28 = v25;
  if (v23 != v26)
  {
    do
    {
      v65 = (std::string *)(v23 - 816);
      if (*(v23 - 8))
      {
        v29 = *((unsigned int *)v23 - 4);
        if ((_DWORD)v29 != -1)
          ((void (*)(std::string *, char *))off_24C3FEB80[v29])(&v45, v23 - 48);
        *((_DWORD *)v23 - 4) = -1;
      }
      *((_QWORD *)v23 - 102) = &off_24C411BF8;
      sub_20B07AE6C((uint64_t)(v23 - 800));
      v23 = (char *)v65;
    }
    while (v65 != (std::string *)v26);
    v23 = (char *)v63;
  }
  if (v23)
    operator delete(v23);
  v28[1] = (std::string::size_type)v21;
  if (v62)
    goto LABEL_45;
LABEL_9:
  *(_QWORD *)&v49 = &off_24C411BF8;
  sub_20B07AE6C((uint64_t)&__p);
  if (a3 < 0x200)
  {
LABEL_10:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
LABEL_48:
  *(_QWORD *)&v47 = a3 & 0xFFFFFFFFFFFFFE00;
  sub_20B524370(8, (uint64_t)&v47, (uint64_t)"0x", 2, &v36);
  v63 = "VZStoragePreference contains invalid flags ";
  v64 = 43;
  size = HIBYTE(v36.__r_.__value_.__r.__words[2]);
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v31 = &v36;
  else
    v31 = (std::string *)v36.__r_.__value_.__r.__words[0];
  if ((v36.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v36.__r_.__value_.__l.__size_;
  v65 = v31;
  v66 = (const char *)size;
  v67 = " which will be ignored";
  v68 = 22;
  sub_20AECFDF8((uint64_t)&v63, (uint64_t)v69, 0, 0, &v45);
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__dst, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
  else
    __dst = v45;
  v38 = 1;
  LOBYTE(v39) = 0;
  v43 = 0;
  v44 = 1;
  sub_20AECCC3C(0xAu, (__int128 *)&__dst, (uint64_t)&v49);
  *(_OWORD *)a4 = v49;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v59)
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v44)
      goto LABEL_73;
LABEL_67:
    if (!v43)
      goto LABEL_70;
    if (v42 < 0)
    {
      operator delete(v41);
      if ((v40 & 0x80000000) == 0)
      {
LABEL_70:
        if (!v38)
          goto LABEL_73;
LABEL_71:
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        goto LABEL_73;
      }
    }
    else if ((v40 & 0x80000000) == 0)
    {
      goto LABEL_70;
    }
    operator delete(v39);
    if (!v38)
      goto LABEL_73;
    goto LABEL_71;
  }
  *(_BYTE *)(a4 + 40) = 0;
  v32 = v52;
  if (v52)
  {
    *(_OWORD *)(a4 + 16) = __p;
    *(_QWORD *)(a4 + 32) = v51;
    v51 = 0;
    __p = 0uLL;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (v58)
  {
    v33 = v55;
    *(_QWORD *)(a4 + 64) = v54;
    *(_OWORD *)(a4 + 48) = v53;
    v53 = 0uLL;
    *(_QWORD *)(a4 + 72) = v33;
    *(_OWORD *)(a4 + 80) = v56;
    *(_QWORD *)(a4 + 96) = v57;
    v54 = 0;
    v56 = 0uLL;
    v57 = 0;
    *(_BYTE *)(a4 + 104) = 1;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (v32 && SHIBYTE(v51) < 0)
    operator delete((void *)__p);
  if (v44)
    goto LABEL_67;
LABEL_73:
  if ((SHIBYTE(v45.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v36.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      return;
LABEL_77:
    operator delete(v36.__r_.__value_.__l.__data_);
    return;
  }
  operator delete(v45.__r_.__value_.__l.__data_);
  if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
    goto LABEL_77;
}

void sub_20AFEE354(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,char a48)
{
  if (a39 < 0)
    operator delete(__p);
  if (a19 < 0)
  {
    operator delete(a14);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AFEE470(uint64_t a1)
{
  uint64_t v2;
  char v4;

  if (*(_BYTE *)(a1 + 808))
  {
    v2 = *(unsigned int *)(a1 + 800);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C3FEB80[v2])(&v4, a1 + 768);
    *(_DWORD *)(a1 + 800) = -1;
  }
  *(_QWORD *)a1 = &off_24C411BF8;
  sub_20B07AE6C(a1 + 16);
  return a1;
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_20AFEE4E4(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  char v4;
  char v5;

  sub_20AEC01D0(a1, (uint64_t)"{", 1);
  sub_20AFF5880((uint64_t)&v4, &v3, (uint64_t *)a2);
  sub_20AEC01D0(v3, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 56))
    sub_20AFF5970((uint64_t)&v5, &v3, (uint64_t *)(a2 + 32));
  else
    sub_20AEC01D0(v3, (uint64_t)"nullopt", 7);
  sub_20AEC01D0(v3, (uint64_t)"}", 1);
}

void sub_20AFEE588(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, _UNKNOWN **a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  unsigned __int8 v11;
  __int128 v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  _QWORD *v22;
  uint64_t v23;
  void (**v24)(_QWORD *);
  void (**v25)(_QWORD *);
  void *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _DWORD *v30;
  _DWORD *v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  _QWORD *v34;
  unint64_t *p_shared_owners;
  unint64_t v36;
  unint64_t v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  unint64_t *v41;
  unint64_t v42;
  unint64_t v43;
  unint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  char v50;
  int v51;
  std::__shared_weak_count *v52;
  __int128 v53;
  __int128 v54;
  void *__p;
  _DWORD *v56;
  char v57;
  __int128 v58;
  __int128 v59;
  _QWORD *v60;
  std::__shared_weak_count *v61;
  void *__dst[2];
  uint64_t v63;
  char v64;
  _QWORD v65[3];
  _QWORD *v66;
  char v67;
  _QWORD v68[3];
  _QWORD *v69;
  char v70;
  void (**v71)(_QWORD *);
  void (**v72)(_QWORD *);
  _QWORD *v73;
  __int128 v74;
  __int128 v75;
  uint64_t v76;

  v76 = *MEMORY[0x24BDAC8D0];
  v11 = atomic_load((unsigned __int8 *)&qword_25463CFA8);
  if ((v11 & 1) == 0)
  {
    v50 = a5;
    v51 = __cxa_guard_acquire(&qword_25463CFA8);
    a5 = v50;
    if (v51)
    {
      __cxa_atexit((void (*)(void *))nullsub_288, &off_253EC31C8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CFA8);
      a5 = v50;
    }
  }
  if (!a5)
    a4 = &off_253EC31C8;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)a1;
    v63 = *(_QWORD *)(a1 + 16);
  }
  *(_QWORD *)&v53 = 1000;
  BYTE8(v53) = 1;
  LOBYTE(v54) = 1;
  *((_QWORD *)&v54 + 1) = 0;
  if (*(_BYTE *)(a2 + 64))
  {
    sub_20AF05070((uint64_t)&__p, a2);
    v12 = *(_OWORD *)(a2 + 48);
    v58 = *(_OWORD *)(a2 + 32);
    v59 = v12;
    if (*(_BYTE *)(a3 + 32))
      goto LABEL_9;
LABEL_14:
    LOBYTE(v65[0]) = 0;
    v67 = 0;
    goto LABEL_36;
  }
  LOBYTE(__p) = 0;
  v57 = 0;
  v58 = v53;
  v59 = v54;
  if (!*(_BYTE *)(a3 + 32))
    goto LABEL_14;
LABEL_9:
  v13 = *(_QWORD *)(a3 + 24);
  if (v13)
  {
    if (v13 != a3)
    {
      v14 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 16))(v13);
      v69 = v14;
      if (!v14)
        goto LABEL_16;
LABEL_18:
      if (v14 == v68)
      {
        v73 = &v71;
        (*(void (**)(_QWORD *, void (***)(_QWORD *)))(v68[0] + 24))(v68, &v71);
      }
      else
      {
        v73 = v14;
        v69 = 0;
      }
      goto LABEL_21;
    }
    v69 = v68;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 24))(a3, v68);
    v14 = v69;
    if (v69)
      goto LABEL_18;
  }
  else
  {
    v69 = 0;
  }
LABEL_16:
  v73 = 0;
LABEL_21:
  v66 = 0;
  v15 = operator new(0x28uLL);
  v16 = v15;
  *v15 = &off_24C3FEC10;
  if (v73)
  {
    if (v73 == &v71)
    {
      v15[4] = v15 + 1;
      v71[3](&v71);
    }
    else
    {
      v15[4] = v73;
      v73 = 0;
    }
  }
  else
  {
    v15[4] = 0;
  }
  v66 = v16;
  v17 = v73;
  if (v73 == &v71)
  {
    v18 = 4;
    v17 = &v71;
  }
  else
  {
    if (!v73)
      goto LABEL_31;
    v18 = 5;
  }
  (*(void (**)(void))(*v17 + 8 * v18))();
LABEL_31:
  v67 = 1;
  v19 = v69;
  if (v69 == v68)
  {
    v20 = 4;
    v19 = v68;
  }
  else
  {
    if (!v69)
      goto LABEL_36;
    v20 = 5;
  }
  (*(void (**)(void))(*v19 + 8 * v20))();
LABEL_36:
  v21 = (std::__shared_weak_count *)operator new(0x30uLL);
  v21->__shared_owners_ = 0;
  v21->__shared_weak_owners_ = 0;
  v21->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FEE38;
  sub_20AF05070((uint64_t)&v71, (uint64_t)&__p);
  v74 = v58;
  v75 = v59;
  LOBYTE(v68[0]) = 0;
  v70 = 0;
  if (v67)
  {
    if (v66)
    {
      if (v66 == v65)
      {
        v69 = v68;
        (*(void (**)(_QWORD *, _QWORD *))(v65[0] + 24))(v65, v68);
      }
      else
      {
        v69 = v66;
        v66 = 0;
      }
    }
    else
    {
      v69 = 0;
    }
    v70 = 1;
  }
  sub_20B1E9904(&v21[1].__vftable, a1, (uint64_t)&v71, (uint64_t)v68, (uint64_t)a4);
  if (v70)
  {
    v22 = v69;
    if (v69 == v68)
    {
      v23 = 4;
      v22 = v68;
      goto LABEL_48;
    }
    if (v69)
    {
      v23 = 5;
LABEL_48:
      (*(void (**)(void))(*v22 + 8 * v23))();
    }
  }
  if ((_BYTE)v73)
  {
    v24 = v71;
    if (v71)
    {
      v25 = v72;
      v26 = v71;
      if (v72 != v71)
      {
        do
        {
          if (*((_BYTE *)v25 - 8))
          {
            v27 = *((unsigned int *)v25 - 4);
            if ((_DWORD)v27 != -1)
              ((void (*)(char *, void (**)(_QWORD *)))off_24C3FEB80[v27])(&v64, v25 - 6);
            *((_DWORD *)v25 - 4) = -1;
          }
          *(v25 - 102) = (void (*)(_QWORD *))&off_24C411BF8;
          sub_20B07AE6C((uint64_t)(v25 - 100));
          v25 -= 102;
        }
        while (v25 != v24);
        v26 = v71;
      }
      v72 = v24;
      operator delete(v26);
    }
  }
  v60 = &v21[1].__vftable;
  v61 = v21;
  if (v67)
  {
    v28 = v66;
    if (v66 == v65)
    {
      v29 = 4;
      v28 = v65;
      goto LABEL_65;
    }
    if (v66)
    {
      v29 = 5;
LABEL_65:
      (*(void (**)(void))(*v28 + 8 * v29))();
    }
  }
  if (v57)
  {
    v30 = __p;
    if (__p)
    {
      v31 = v56;
      if (v56 == __p)
      {
        v56 = __p;
        operator delete(__p);
      }
      else
      {
        do
        {
          if (*((_BYTE *)v31 - 8))
          {
            v32 = *(v31 - 4);
            if ((_DWORD)v32 != -1)
              ((void (*)(void (***)(_QWORD *), _DWORD *))off_24C3FEB80[v32])(&v71, v31 - 12);
            *(v31 - 4) = -1;
          }
          *((_QWORD *)v31 - 102) = &off_24C411BF8;
          sub_20B07AE6C((uint64_t)(v31 - 200));
          v31 -= 204;
        }
        while (v31 != v30);
        v56 = v30;
        operator delete(__p);
      }
    }
  }
  v34 = v60;
  v33 = v61;
  v52 = v61;
  if (v61)
  {
    p_shared_owners = (unint64_t *)&v61->__shared_owners_;
    do
      v36 = __ldxr(p_shared_owners);
    while (__stxr(v36 + 1, p_shared_owners));
    do
      v37 = __ldxr(p_shared_owners);
    while (__stxr(v37 + 1, p_shared_owners));
  }
  v38 = operator new(0x28uLL);
  v39 = v38;
  v38[1] = 0;
  v38[2] = 0;
  *v38 = &off_24C3FA7C8;
  v40 = v38 + 3;
  if (v33)
  {
    v41 = (unint64_t *)&v33->__shared_owners_;
    do
      v42 = __ldxr(v41);
    while (__stxr(v42 + 1, v41));
    do
      v43 = __ldxr(v41);
    while (__stxr(v43 + 1, v41));
    v38[3] = v34;
    v38[4] = v33;
    do
      v44 = __ldaxr(v41);
    while (__stlxr(v44 - 1, v41));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
    }
  }
  else
  {
    v38[3] = v34;
    v38[4] = 0;
  }
  *(_QWORD *)a6 = v34;
  *(_QWORD *)(a6 + 8) = v33;
  *(_QWORD *)(a6 + 16) = v40;
  *(_QWORD *)(a6 + 24) = v39;
  *(_BYTE *)(a6 + 120) = 1;
  if (!v52)
    goto LABEL_94;
  v45 = (unint64_t *)&v52->__shared_owners_;
  do
    v46 = __ldaxr(v45);
  while (__stlxr(v46 - 1, v45));
  if (!v46)
  {
    ((void (*)(std::__shared_weak_count *))v52->__on_zero_shared)(v52);
    std::__shared_weak_count::__release_weak(v52);
    v47 = v61;
    if (!v61)
      goto LABEL_98;
  }
  else
  {
LABEL_94:
    v47 = v61;
    if (!v61)
      goto LABEL_98;
  }
  v48 = (unint64_t *)&v47->__shared_owners_;
  do
    v49 = __ldaxr(v48);
  while (__stlxr(v49 - 1, v48));
  if (v49)
  {
LABEL_98:
    if ((SHIBYTE(v63) & 0x80000000) == 0)
      return;
    goto LABEL_99;
  }
  ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
  std::__shared_weak_count::__release_weak(v47);
  if (SHIBYTE(v63) < 0)
LABEL_99:
    operator delete(__dst[0]);
}

void sub_20AFEEC78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20AEC01C0(exception_object);
}

uint64_t sub_20AFEEE14(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  char v7;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_DWORD **)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(_DWORD **)(a1 + 8);
      v4 = *(_DWORD **)a1;
      if (v3 != v2)
      {
        do
        {
          if (*((_BYTE *)v3 - 8))
          {
            v5 = *(v3 - 4);
            if ((_DWORD)v5 != -1)
              ((void (*)(char *, _DWORD *))off_24C3FEB80[v5])(&v7, v3 - 12);
            *(v3 - 4) = -1;
          }
          *((_QWORD *)v3 - 102) = &off_24C411BF8;
          sub_20B07AE6C((uint64_t)(v3 - 200));
          v3 -= 204;
        }
        while (v3 != v2);
        v4 = *(_DWORD **)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

void sub_20AFEEEE4(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v10;
  char **v11;
  _QWORD *v12;
  _BYTE *v13;
  char **v14;
  uint64_t v15;
  char **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  char *v21;
  void *v22;
  char *v23;
  uint64_t v24;
  void (***v25)(_QWORD);
  void *v26;
  void (***v27)(_QWORD);
  BOOL v28;
  char *v29;
  char *v30;
  void *v31;
  char *v32;
  uint64_t v33;
  void (***tv_sec)(_QWORD);
  void (***v35)(_QWORD);
  char *v36;
  char *v37;
  void *v38;
  std::__shared_weak_count *v39;
  unint64_t *p_shared_owners;
  unint64_t v41;
  char *v42;
  char *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  char *v48;
  int64_t v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  unsigned __int8 *v55;
  int v56;
  int v57;
  int v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int *v61;
  unsigned int v62;
  int v63;
  _BYTE *v64;
  int v65;
  uint64_t v66;
  char *v67;
  void *v68[3];
  char v69;
  void *__p;
  char *v71;
  void *v72;
  char v73;
  char v74;
  void *v75;
  char v76;
  char v77;
  char v78;
  char v79;
  __int128 v80;
  __int128 v81;
  char v82;
  char v83;
  void *v84;
  char v85;
  void *v86;
  char v87;
  char v88;
  char v89;
  unsigned __int8 v90;
  __int128 v91;
  char *v92;
  __int128 v93;
  void *v94;
  char v95;
  unsigned __int8 v96;
  void *v97[2];
  uint64_t v98;
  uint64_t v99;
  void *v100[2];
  uint64_t v101;
  char v102;
  char v103;
  char v104;
  timespec __rqtp;
  void *v106[2];
  void *v107[2];
  void *v108[2];
  char v109;
  void *v110;
  char v111;
  char v112;
  char v113;
  void *v114[2];
  uint64_t v115;
  void *v116[2];
  uint64_t v117;
  char v118;
  char *v119;
  char *v120;
  __int128 v121;
  __int128 v122[6];
  char v123;
  __int128 v124;
  void *v125;
  char **v126;
  char v127;
  char v128;
  void *v129;
  char v130;
  void *v131;
  char v132;
  char v133;
  char v134;
  _BYTE v135[24];
  _BYTE *v136;
  char v137;
  void (**v138)(char **, __int128 *);
  __int128 v139;
  char **v140;
  uint64_t v141;

  v141 = *MEMORY[0x24BDAC8D0];
  v90 = 1;
  sub_20AFF0A60(v114);
  *(_OWORD *)v116 = *(_OWORD *)v114;
  v117 = v115;
  v115 = 0;
  v114[1] = 0;
  v114[0] = 0;
  v118 = 1;
  *(_OWORD *)v107 = 0u;
  *(_OWORD *)v108 = 0u;
  __rqtp = (timespec)0;
  *(_OWORD *)v106 = 0u;
  if (*(_BYTE *)(a2 + 64))
  {
    sub_20AF07468((uint64_t)v68, a2);
    if (*(_BYTE *)(a3 + 32))
      goto LABEL_3;
LABEL_8:
    v135[0] = 0;
    v137 = 0;
    goto LABEL_30;
  }
  LOBYTE(v68[0]) = 0;
  v69 = 0;
  LOBYTE(__p) = 0;
  v73 = 0;
  if (!*(_BYTE *)(a3 + 32))
    goto LABEL_8;
LABEL_3:
  v10 = *(_QWORD *)(a3 + 24);
  if (v10)
  {
    if (v10 != a3)
    {
      v11 = (char **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
      v140 = v11;
      if (!v11)
        goto LABEL_10;
LABEL_12:
      if (v11 == (char **)&v138)
      {
        v126 = (char **)&v124;
        v138[3]((char **)&v138, &v124);
      }
      else
      {
        v126 = v11;
        v140 = 0;
      }
      goto LABEL_15;
    }
    v140 = (char **)&v138;
    (*(void (**)(uint64_t, char **))(*(_QWORD *)a3 + 24))(a3, (char **)&v138);
    v11 = v140;
    if (v140)
      goto LABEL_12;
  }
  else
  {
    v140 = 0;
  }
LABEL_10:
  v126 = 0;
LABEL_15:
  v136 = 0;
  v12 = operator new(0x28uLL);
  v13 = v12;
  *v12 = &off_24C3FEE88;
  if (v126)
  {
    if (v126 == (char **)&v124)
    {
      v12[4] = v12 + 1;
      (*(void (**)(__int128 *))(v124 + 24))(&v124);
    }
    else
    {
      v12[4] = v126;
      v126 = 0;
    }
  }
  else
  {
    v12[4] = 0;
  }
  v136 = v13;
  v14 = v126;
  if (v126 == (char **)&v124)
  {
    v15 = 4;
    v14 = (char **)&v124;
  }
  else
  {
    if (!v126)
      goto LABEL_25;
    v15 = 5;
  }
  (*(void (**)(void))&(*v14)[8 * v15])();
LABEL_25:
  v137 = 1;
  v16 = v140;
  if (v140 == (char **)&v138)
  {
    v17 = 4;
    v16 = (char **)&v138;
  }
  else
  {
    if (!v140)
      goto LABEL_30;
    v17 = 5;
  }
  (*(void (**)(void))&(*v16)[8 * v17])();
LABEL_30:
  sub_20B1F3698(a1, (uint64_t)v116, (uint64_t)v68, (uint64_t)v135, a4, (uint64_t)&v119);
  if (!v137)
    goto LABEL_36;
  v18 = v136;
  if (v136 == v135)
  {
    v19 = 4;
    v18 = v135;
  }
  else
  {
    if (!v136)
      goto LABEL_36;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_36:
  if (!v73)
    goto LABEL_48;
  v20 = (char *)__p;
  if (!__p)
    goto LABEL_48;
  v21 = v71;
  v22 = __p;
  if (v71 == __p)
    goto LABEL_47;
  do
  {
    v23 = (char *)*((_QWORD *)v21 - 1);
    if (v21 - 32 == v23)
    {
      v23 = v21 - 32;
      v24 = 4;
LABEL_41:
      (*(void (**)(void))(*(_QWORD *)v23 + 8 * v24))();
      goto LABEL_42;
    }
    if (v23)
    {
      v24 = 5;
      goto LABEL_41;
    }
LABEL_42:
    *((_QWORD *)v21 - 100) = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)(v21 - 784));
    v21 -= 800;
  }
  while (v21 != v20);
  v22 = __p;
LABEL_47:
  v71 = v20;
  operator delete(v22);
LABEL_48:
  if (v69)
  {
    v25 = (void (***)(_QWORD))v68[0];
    if (v68[0])
    {
      v26 = v68[0];
      if (v68[1] != v68[0])
      {
        v27 = (void (***)(_QWORD))((char *)v68[1] - 768);
        do
        {
          (**v27)(v27);
          v28 = v27 == v25;
          v27 -= 96;
        }
        while (!v28);
        v26 = v68[0];
      }
      v68[1] = v25;
      operator delete(v26);
    }
  }
  if (!LOBYTE(v108[1]))
    goto LABEL_68;
  v29 = (char *)v107[0];
  if (!v107[0])
    goto LABEL_68;
  v30 = (char *)v107[1];
  v31 = v107[0];
  if (v107[1] == v107[0])
    goto LABEL_67;
  while (2)
  {
    v32 = (char *)*((_QWORD *)v30 - 1);
    if (v30 - 32 == v32)
    {
      v32 = v30 - 32;
      v33 = 4;
      goto LABEL_61;
    }
    if (v32)
    {
      v33 = 5;
LABEL_61:
      (*(void (**)(void))(*(_QWORD *)v32 + 8 * v33))();
    }
    *((_QWORD *)v30 - 100) = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)(v30 - 784));
    v30 -= 800;
    if (v30 != v29)
      continue;
    break;
  }
  v31 = v107[0];
LABEL_67:
  v107[1] = v29;
  operator delete(v31);
LABEL_68:
  if (LOBYTE(v106[1]))
  {
    tv_sec = (void (***)(_QWORD))__rqtp.tv_sec;
    if (__rqtp.tv_sec)
    {
      if (__rqtp.tv_nsec != __rqtp.tv_sec)
      {
        v35 = (void (***)(_QWORD))(__rqtp.tv_nsec - 768);
        do
        {
          (**v35)(v35);
          v28 = v35 == tv_sec;
          v35 -= 96;
        }
        while (!v28);
        tv_sec = (void (***)(_QWORD))__rqtp.tv_sec;
      }
      operator delete(tv_sec);
    }
  }
  if (v118)
  {
    v36 = (char *)v116[0];
    if (v116[0])
    {
      v37 = (char *)v116[1];
      v38 = v116[0];
      if (v116[1] != v116[0])
      {
        do
        {
          v39 = (std::__shared_weak_count *)*((_QWORD *)v37 - 1);
          if (v39)
          {
            p_shared_owners = (unint64_t *)&v39->__shared_owners_;
            do
              v41 = __ldaxr(p_shared_owners);
            while (__stlxr(v41 - 1, p_shared_owners));
            if (!v41)
            {
              ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
              std::__shared_weak_count::__release_weak(v39);
            }
          }
          v37 -= 16;
        }
        while (v37 != v36);
        v38 = v116[0];
      }
      v116[1] = v36;
      operator delete(v38);
    }
  }
  v42 = (char *)v114[0];
  if (v114[0])
  {
    v43 = (char *)v114[1];
    v44 = v114[0];
    if (v114[1] != v114[0])
    {
      do
      {
        v45 = (std::__shared_weak_count *)*((_QWORD *)v43 - 1);
        if (v45)
        {
          v46 = (unint64_t *)&v45->__shared_owners_;
          do
            v47 = __ldaxr(v46);
          while (__stlxr(v47 - 1, v46));
          if (!v47)
          {
            ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
            std::__shared_weak_count::__release_weak(v45);
          }
        }
        v43 -= 16;
      }
      while (v43 != v42);
      v44 = v114[0];
    }
    v114[1] = v42;
    operator delete(v44);
  }
  if (!v123)
  {
    v124 = v121;
    sub_20AECEBD0(&v125, v122);
    sub_20AFB1FC8((unsigned __int8 *)&v124, (uint64_t)&__rqtp);
    *(timespec *)v68 = __rqtp;
    sub_20AECEBD0(&v68[2], (__int128 *)v106);
    sub_20AECEEFC((uint64_t)&v80, (__int128 *)v68);
    if (v78)
    {
      if (v77)
      {
        if (v76 < 0)
          operator delete(v75);
        if (v74 < 0)
          operator delete(v72);
      }
      if ((_BYTE)v71 && SHIBYTE(__p) < 0)
        operator delete(v68[2]);
    }
    if (v113)
    {
      if (v112)
      {
        if (v111 < 0)
          operator delete(v110);
        if (v109 < 0)
          operator delete(v108[0]);
      }
      if (LOBYTE(v107[1]) && SHIBYTE(v107[0]) < 0)
        operator delete(v106[0]);
    }
    if (v134)
    {
      if (v133)
      {
        if (v132 < 0)
          operator delete(v131);
        if (v130 < 0)
          operator delete(v129);
      }
      if (v128 && v127 < 0)
        operator delete(v125);
    }
  }
  v139 = 0uLL;
  v138 = 0;
  sub_20AFF65E4((char **)&v138, 0xCCCCCCCCCCCCCCCDLL * ((v120 - v119) >> 3));
  sub_20AFF683C(v119, v120, (char **)&v138);
  v48 = (char *)v138;
  v68[0] = v138;
  v67 = (char *)v139;
  *(_OWORD *)&v68[1] = v139;
  v139 = 0uLL;
  v138 = 0;
  __rqtp.tv_sec = (__darwin_time_t)&v138;
  sub_20AF048EC((void ***)&__rqtp);
  v92 = 0;
  v91 = 0uLL;
  v138 = (void (**)(char **, __int128 *))&v91;
  LOBYTE(v139) = 0;
  v49 = v67 - v48;
  if (v67 != v48)
  {
    v50 = 0xCCCCCCCCCCCCCCCDLL * (v49 >> 3);
    if (v50 >= 0x666666666666667)
      sub_20AEC60B8();
    v51 = operator new(v49);
    *(_QWORD *)&v91 = v51;
    *((_QWORD *)&v91 + 1) = v51;
    v92 = (char *)&v51[5 * v50];
    do
    {
      *v51 = *(_QWORD *)v48;
      v52 = *((_QWORD *)v48 + 1);
      v51[1] = v52;
      if (v52)
      {
        v53 = (unint64_t *)(v52 + 8);
        do
          v54 = __ldxr(v53);
        while (__stxr(v54 + 1, v53));
      }
      v55 = (unsigned __int8 *)(v48 + 32);
      do
        v56 = __ldaxr(v55);
      while (__stxr(1u, v55));
      if (v56)
      {
        v57 = 0;
        do
        {
          if (v57)
          {
            __rqtp = (timespec)xmmword_20B5B0ED0;
            nanosleep(&__rqtp, 0);
          }
          ++v57;
          do
            v58 = __ldaxr(v55);
          while (__stxr(1u, v55));
        }
        while (v58);
      }
      v59 = *((_QWORD *)v48 + 2);
      v60 = *((_QWORD *)v48 + 3);
      if (v60)
      {
        v61 = (unsigned int *)(v60 + 8);
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      atomic_store(0, (unsigned __int8 *)v48 + 32);
      v51[2] = v59;
      v51[3] = v60;
      *((_BYTE *)v51 + 32) = 0;
      v48 += 40;
      v51 += 5;
    }
    while (v48 != v67);
    *((_QWORD *)&v91 + 1) = v51;
  }
  __rqtp.tv_sec = (__darwin_time_t)v68;
  sub_20AF048EC((void ***)&__rqtp);
  sub_20AFF6DC4(&v119);
  v93 = v91;
  v94 = v92;
  v91 = 0uLL;
  v92 = 0;
  v104 = 1;
  sub_20AFF5BF0((uint64_t)v68, (uint64_t)&v93);
  if (v104)
  {
    v119 = (char *)&v93;
    sub_20AF048EC((void ***)&v119);
  }
  else if (v103)
  {
    if (v102)
    {
      if (SHIBYTE(v101) < 0)
        operator delete(v100[0]);
      if (SHIBYTE(v98) < 0)
        operator delete(v97[0]);
    }
    if (v96 && v95 < 0)
      operator delete(v94);
  }
  v119 = (char *)&v91;
  sub_20AF048EC((void ***)&v119);
  if (v79)
  {
    *(_OWORD *)a5 = *(_OWORD *)v68;
    *(void **)(a5 + 16) = v68[2];
    memset(v68, 0, sizeof(v68));
    *(_BYTE *)(a5 + 24) = 1;
    *(_BYTE *)(a5 + 32) = 0;
    v63 = v90;
    *(_BYTE *)(a5 + 152) = v90;
    if (!v63)
    {
      *(_OWORD *)(a5 + 32) = v80;
      sub_20AECEBD0((_BYTE *)(a5 + 48), &v81);
    }
    goto LABEL_161;
  }
  v93 = *(_OWORD *)v68;
  v64 = sub_20AECEBD0(&v94, (__int128 *)&v68[2]);
  *(_BYTE *)a5 = 0;
  *(_BYTE *)(a5 + 24) = 0;
  *(_OWORD *)(a5 + 32) = v93;
  *(_BYTE *)(a5 + 48) = 0;
  *(_BYTE *)(a5 + 144) = 0;
  if (v103)
  {
    *(_BYTE *)(a5 + 72) = 0;
    v65 = v96;
    if (v96)
    {
      *(_OWORD *)(a5 + 48) = *(_OWORD *)v64;
      *(_QWORD *)(a5 + 64) = *((_QWORD *)v64 + 2);
      *((_QWORD *)v64 + 1) = 0;
      *((_QWORD *)v64 + 2) = 0;
      *(_QWORD *)v64 = 0;
      *(_BYTE *)(a5 + 72) = 1;
    }
    *(_BYTE *)(a5 + 80) = 0;
    *(_BYTE *)(a5 + 136) = 0;
    if (v102)
    {
      v66 = v99;
      *(_QWORD *)(a5 + 96) = v98;
      *(_OWORD *)(a5 + 80) = *(_OWORD *)v97;
      v97[0] = 0;
      v97[1] = 0;
      *(_QWORD *)(a5 + 104) = v66;
      *(_OWORD *)(a5 + 112) = *(_OWORD *)v100;
      *(_QWORD *)(a5 + 128) = v101;
      v98 = 0;
      v100[0] = 0;
      v100[1] = 0;
      v101 = 0;
      *(_BYTE *)(a5 + 136) = 1;
    }
    *(_BYTE *)(a5 + 144) = 1;
    *(_BYTE *)(a5 + 152) = 0;
    if (v65 && v95 < 0)
      operator delete(v94);
LABEL_161:
    if (v79)
    {
LABEL_162:
      *(_QWORD *)&v93 = v68;
      sub_20AF048EC((void ***)&v93);
      goto LABEL_163;
    }
  }
  else
  {
    *(_BYTE *)(a5 + 152) = 0;
    if (v79)
      goto LABEL_162;
  }
  if (v78)
  {
    if (v77)
    {
      if (v76 < 0)
        operator delete(v75);
      if (v74 < 0)
        operator delete(v72);
    }
    if ((_BYTE)v71 && SHIBYTE(__p) < 0)
      operator delete(v68[2]);
  }
LABEL_163:
  if (!v90 && v89)
  {
    if (v88)
    {
      if (v87 < 0)
        operator delete(v86);
      if (v85 < 0)
        operator delete(v84);
    }
    if (v83)
    {
      if (v82 < 0)
        operator delete((void *)v81);
    }
  }
}

void sub_20AFEF994(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFEFEA0(uint64_t a1)
{
  void **v3;

  if (*(_BYTE *)(a1 + 120))
  {
    v3 = (void **)a1;
    sub_20AF048EC(&v3);
    return a1;
  }
  if (!*(_BYTE *)(a1 + 112))
    return a1;
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_8;
  if ((*(char *)(a1 + 103) & 0x80000000) == 0)
  {
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_12:
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
    goto LABEL_9;
  }
  operator delete(*(void **)(a1 + 80));
  if (*(char *)(a1 + 71) < 0)
    goto LABEL_12;
LABEL_8:
  if (!*(_BYTE *)(a1 + 40))
    return a1;
LABEL_9:
  if ((*(char *)(a1 + 39) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20AFEFF4C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  _BYTE *v12;
  __int128 *p_dst;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  _QWORD *v24;
  uint64_t v25;
  void (***v26)(_QWORD);
  void *v27;
  void (***v28)(_QWORD);
  BOOL v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  char *v35;
  void *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  void *v40;
  char *v41;
  char *v42;
  char *v43;
  void *v44;
  std::__shared_weak_count *v45;
  unint64_t *p_shared_owners;
  unint64_t v47;
  char *v48;
  char *v49;
  void *v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  char *v54;
  char *v55;
  void *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  void *v60;
  char *v61;
  void *v62;
  char *v63;
  char v64;
  void *__p;
  char *v66;
  char v67;
  void *v68[2];
  uint64_t v69;
  void *v70[2];
  uint64_t v71;
  char v72;
  uint64_t (**v73)();
  uint64_t v74;
  _OWORD v75[3];
  __int128 v76;
  uint64_t v77;
  char v78;
  __int128 v79;
  uint64_t v80;
  char v81;
  char v82;
  char v83;
  void *v84;
  char *v85;
  char v86;
  void *v87;
  char *v88;
  char v89;
  __int128 __dst;
  uint64_t v91;
  __int128 v92;
  uint64_t v93;
  unsigned __int8 v94;
  __int128 v95;
  uint64_t v96;
  unsigned __int8 v97;
  _BYTE v98[24];
  _BYTE *v99;
  char v100;
  _QWORD v101[3];
  _QWORD *v102;
  uint64_t v103;

  v103 = *MEMORY[0x24BDAC8D0];
  v76 = 0u;
  memset(v75, 0, sizeof(v75));
  if (*(_BYTE *)(a2 + 64))
  {
    sub_20AF07468((uint64_t)&v84, a2);
  }
  else
  {
    LOBYTE(v84) = 0;
    v86 = 0;
    LOBYTE(v87) = 0;
    v89 = 0;
  }
  sub_20AFF0A60(v68);
  *(_OWORD *)v70 = *(_OWORD *)v68;
  v71 = v69;
  v68[1] = 0;
  v69 = 0;
  v68[0] = 0;
  v72 = 1;
  sub_20AF07468((uint64_t)&v62, (uint64_t)&v84);
  if (!*(_BYTE *)(a3 + 32))
  {
    v98[0] = 0;
    v100 = 0;
    goto LABEL_31;
  }
  v9 = *(_QWORD *)(a3 + 24);
  if (v9)
  {
    if (v9 != a3)
    {
      v10 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
      v102 = v10;
      if (!v10)
        goto LABEL_11;
LABEL_13:
      if (v10 == v101)
      {
        *(_QWORD *)&v92 = &__dst;
        (*(void (**)(_QWORD *, __int128 *))(v101[0] + 24))(v101, &__dst);
      }
      else
      {
        *(_QWORD *)&v92 = v10;
        v102 = 0;
      }
      goto LABEL_16;
    }
    v102 = v101;
    (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 24))(a3, v101);
    v10 = v102;
    if (v102)
      goto LABEL_13;
  }
  else
  {
    v102 = 0;
  }
LABEL_11:
  *(_QWORD *)&v92 = 0;
LABEL_16:
  v99 = 0;
  v11 = operator new(0x28uLL);
  v12 = v11;
  *v11 = &off_24C3FED98;
  if ((_QWORD)v92)
  {
    if ((__int128 *)v92 == &__dst)
    {
      v11[4] = v11 + 1;
      (*(void (**)(__int128 *))(__dst + 24))(&__dst);
    }
    else
    {
      v11[4] = v92;
      *(_QWORD *)&v92 = 0;
    }
  }
  else
  {
    v11[4] = 0;
  }
  v99 = v12;
  p_dst = (__int128 *)v92;
  if ((__int128 *)v92 == &__dst)
  {
    v14 = 4;
    p_dst = &__dst;
    goto LABEL_25;
  }
  if ((_QWORD)v92)
  {
    v14 = 5;
LABEL_25:
    (*(void (**)(void))(*(_QWORD *)p_dst + 8 * v14))();
  }
  v100 = 1;
  v15 = v102;
  if (v102 == v101)
  {
    v16 = 4;
    v15 = v101;
    goto LABEL_30;
  }
  if (v102)
  {
    v16 = 5;
LABEL_30:
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
LABEL_31:
  v73 = &off_24C410CA8;
  sub_20B1F284C(a1, v70, (uint64_t)&v62, (uint64_t)v98, a4, &v74);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    __dst = *(_OWORD *)a1;
    v91 = *(_QWORD *)(a1 + 16);
  }
  v17 = (_QWORD *)sub_20AF07468((uint64_t)&v92, (uint64_t)&v84);
  *(_QWORD *)&v75[0] = &off_24C3FEB40;
  *((_QWORD *)&v75[0] + 1) = &off_24C410CA8;
  v18 = v74;
  v74 = 0;
  *(_OWORD *)((char *)&v75[1] + 8) = __dst;
  *((_QWORD *)&v75[2] + 1) = v91;
  __dst = 0uLL;
  v91 = 0;
  LOBYTE(v76) = 0;
  v78 = 0;
  v19 = v94;
  if (v94)
  {
    v76 = v92;
    v77 = v93;
    v17[1] = 0;
    v17[2] = 0;
    *v17 = 0;
    v78 = 1;
  }
  LOBYTE(v79) = 0;
  v81 = 0;
  v20 = v97;
  if (v97)
  {
    v79 = v95;
    v80 = v96;
    v96 = 0;
    v95 = 0uLL;
    v81 = 1;
  }
  v82 = 0;
  v83 = 0;
  *(_QWORD *)a5 = &off_24C3FEB40;
  *(_QWORD *)(a5 + 8) = &off_24C410CA8;
  *(_QWORD *)&v75[1] = 0;
  *(_QWORD *)(a5 + 16) = v18;
  *(_OWORD *)(a5 + 24) = *(_OWORD *)((char *)&v75[1] + 8);
  *(_QWORD *)(a5 + 40) = *((_QWORD *)&v75[2] + 1);
  memset((char *)&v75[1] + 8, 0, 24);
  *(_BYTE *)(a5 + 48) = 0;
  *(_BYTE *)(a5 + 72) = 0;
  if (v19)
  {
    *(_OWORD *)(a5 + 48) = v76;
    *(_QWORD *)(a5 + 64) = v77;
    v77 = 0;
    v76 = 0uLL;
    *(_BYTE *)(a5 + 72) = 1;
  }
  *(_BYTE *)(a5 + 80) = 0;
  *(_BYTE *)(a5 + 104) = 0;
  if (v20)
  {
    *(_OWORD *)(a5 + 80) = v79;
    *(_QWORD *)(a5 + 96) = v80;
    v80 = 0;
    v79 = 0uLL;
    *(_BYTE *)(a5 + 104) = 1;
  }
  *(_BYTE *)(a5 + 112) = 0;
  *(_BYTE *)(a5 + 152) = 0;
  *(_BYTE *)(a5 + 160) = 1;
  sub_20AFF0E38((uint64_t)v75);
  if (!v97)
    goto LABEL_54;
  v21 = v95;
  if (!(_QWORD)v95)
    goto LABEL_54;
  v22 = *((_QWORD *)&v95 + 1);
  v23 = (void *)v95;
  if (*((_QWORD *)&v95 + 1) == (_QWORD)v95)
    goto LABEL_53;
  do
  {
    v24 = *(_QWORD **)(v22 - 8);
    if ((_QWORD *)(v22 - 32) == v24)
    {
      v24 = (_QWORD *)(v22 - 32);
      v25 = 4;
LABEL_47:
      (*(void (**)(void))(*v24 + 8 * v25))();
      goto LABEL_48;
    }
    if (v24)
    {
      v25 = 5;
      goto LABEL_47;
    }
LABEL_48:
    *(_QWORD *)(v22 - 800) = &off_24C411BF8;
    sub_20B07AE6C(v22 - 784);
    v22 -= 800;
  }
  while (v22 != v21);
  v23 = (void *)v95;
LABEL_53:
  *((_QWORD *)&v95 + 1) = v21;
  operator delete(v23);
LABEL_54:
  if (v94)
  {
    v26 = (void (***)(_QWORD))v92;
    if ((_QWORD)v92)
    {
      v27 = (void *)v92;
      if (*((_QWORD *)&v92 + 1) != (_QWORD)v92)
      {
        v28 = (void (***)(_QWORD))(*((_QWORD *)&v92 + 1) - 768);
        do
        {
          (**v28)(v28);
          v29 = v28 == v26;
          v28 -= 96;
        }
        while (!v29);
        v27 = (void *)v92;
      }
      *((_QWORD *)&v92 + 1) = v26;
      operator delete(v27);
    }
  }
  if (SHIBYTE(v91) < 0)
    operator delete((void *)__dst);
  v30 = v74;
  v73 = &off_24C410CA8;
  v74 = 0;
  if (v30)
  {
    v31 = sub_20B1F671C(v30);
    MEMORY[0x20BD3583C](v31, 0x10F2C4013865076);
  }
  if (v100)
  {
    v32 = v99;
    if (v99 == v98)
    {
      v33 = 4;
      v32 = v98;
LABEL_71:
      (*(void (**)(void))(*v32 + 8 * v33))();
    }
    else if (v99)
    {
      v33 = 5;
      goto LABEL_71;
    }
  }
  if (!v67)
    goto LABEL_84;
  v34 = (char *)__p;
  if (!__p)
    goto LABEL_84;
  v35 = v66;
  v36 = __p;
  if (v66 == __p)
    goto LABEL_83;
  while (2)
  {
    v37 = (char *)*((_QWORD *)v35 - 1);
    if (v35 - 32 == v37)
    {
      v37 = v35 - 32;
      v38 = 4;
      goto LABEL_77;
    }
    if (v37)
    {
      v38 = 5;
LABEL_77:
      (*(void (**)(void))(*(_QWORD *)v37 + 8 * v38))();
    }
    *((_QWORD *)v35 - 100) = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)(v35 - 784));
    v35 -= 800;
    if (v35 != v34)
      continue;
    break;
  }
  v36 = __p;
LABEL_83:
  v66 = v34;
  operator delete(v36);
LABEL_84:
  if (v64)
  {
    v39 = (char *)v62;
    if (v62)
    {
      v40 = v62;
      if (v63 != v62)
      {
        v41 = v63 - 768;
        do
        {
          (**(void (***)(char *))v41)(v41);
          v29 = v41 == v39;
          v41 -= 768;
        }
        while (!v29);
        v40 = v62;
      }
      v63 = v39;
      operator delete(v40);
    }
  }
  if (v72)
  {
    v42 = (char *)v70[0];
    if (v70[0])
    {
      v43 = (char *)v70[1];
      v44 = v70[0];
      if (v70[1] != v70[0])
      {
        do
        {
          v45 = (std::__shared_weak_count *)*((_QWORD *)v43 - 1);
          if (v45)
          {
            p_shared_owners = (unint64_t *)&v45->__shared_owners_;
            do
              v47 = __ldaxr(p_shared_owners);
            while (__stlxr(v47 - 1, p_shared_owners));
            if (!v47)
            {
              ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
              std::__shared_weak_count::__release_weak(v45);
            }
          }
          v43 -= 16;
        }
        while (v43 != v42);
        v44 = v70[0];
      }
      v70[1] = v42;
      operator delete(v44);
    }
  }
  v48 = (char *)v68[0];
  if (v68[0])
  {
    v49 = (char *)v68[1];
    v50 = v68[0];
    if (v68[1] != v68[0])
    {
      do
      {
        v51 = (std::__shared_weak_count *)*((_QWORD *)v49 - 1);
        if (v51)
        {
          v52 = (unint64_t *)&v51->__shared_owners_;
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        v49 -= 16;
      }
      while (v49 != v48);
      v50 = v68[0];
    }
    v68[1] = v48;
    operator delete(v50);
  }
  if (!v89)
    goto LABEL_127;
  v54 = (char *)v87;
  if (!v87)
    goto LABEL_127;
  v55 = v88;
  v56 = v87;
  if (v88 == v87)
    goto LABEL_126;
  while (2)
  {
    v57 = (char *)*((_QWORD *)v55 - 1);
    if (v55 - 32 == v57)
    {
      v57 = v55 - 32;
      v58 = 4;
      goto LABEL_120;
    }
    if (v57)
    {
      v58 = 5;
LABEL_120:
      (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
    }
    *((_QWORD *)v55 - 100) = &off_24C411BF8;
    sub_20B07AE6C((uint64_t)(v55 - 784));
    v55 -= 800;
    if (v55 != v54)
      continue;
    break;
  }
  v56 = v87;
LABEL_126:
  v88 = v54;
  operator delete(v56);
LABEL_127:
  if (v86)
  {
    v59 = (char *)v84;
    if (v84)
    {
      v60 = v84;
      if (v85 != v84)
      {
        v61 = v85 - 768;
        do
        {
          (**(void (***)(char *))v61)(v61);
          v29 = v61 == v59;
          v61 -= 768;
        }
        while (!v29);
        v60 = v84;
      }
      v85 = v59;
      operator delete(v60);
    }
  }
}

void sub_20AFF06FC(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

void sub_20AFF094C(uint64_t a1, int a2)
{
  if (!a2)
    JUMPOUT(0x20AFF0710);
  JUMPOUT(0x20AFF083CLL);
}

uint64_t sub_20AFF095C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void (***v9)(_QWORD);
  void (***v10)(_QWORD);
  BOOL v11;

  if (!*(_BYTE *)(a1 + 56))
    goto LABEL_13;
  v2 = *(_QWORD *)(a1 + 32);
  if (!v2)
    goto LABEL_13;
  v3 = *(_QWORD *)(a1 + 40);
  v4 = *(void **)(a1 + 32);
  if (v3 == v2)
    goto LABEL_12;
  do
  {
    v5 = *(_QWORD **)(v3 - 8);
    if ((_QWORD *)(v3 - 32) == v5)
    {
      v5 = (_QWORD *)(v3 - 32);
      v6 = 4;
LABEL_6:
      (*(void (**)(void))(*v5 + 8 * v6))();
      goto LABEL_7;
    }
    if (v5)
    {
      v6 = 5;
      goto LABEL_6;
    }
LABEL_7:
    *(_QWORD *)(v3 - 800) = &off_24C411BF8;
    sub_20B07AE6C(v3 - 784);
    v3 -= 800;
  }
  while (v3 != v2);
  v4 = *(void **)(a1 + 32);
LABEL_12:
  *(_QWORD *)(a1 + 40) = v2;
  operator delete(v4);
LABEL_13:
  if (*(_BYTE *)(a1 + 24))
  {
    v7 = *(void (****)(_QWORD))a1;
    if (*(_QWORD *)a1)
    {
      v8 = *(void (****)(_QWORD))(a1 + 8);
      v9 = *(void (****)(_QWORD))a1;
      if (v8 != v7)
      {
        v10 = v8 - 96;
        do
        {
          (**v10)(v10);
          v11 = v10 == v7;
          v10 -= 96;
        }
        while (!v11);
        v9 = *(void (****)(_QWORD))a1;
      }
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v9);
    }
  }
  return a1;
}

void sub_20AFF0A60(_QWORD *a1)
{
  _QWORD *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  char *v6;
  std::__shared_weak_count *v7;
  uint64_t v8;

  v8 = *MEMORY[0x24BDAC8D0];
  v2 = operator new(0x28uLL);
  v2[1] = 0;
  v2[2] = 0;
  *v2 = &off_24C3FED48;
  *((_DWORD *)v2 + 8) = 0;
  v7 = (std::__shared_weak_count *)v2;
  v2[3] = &off_24C4134E8;
  v6 = (char *)(v2 + 3);
  sub_20AFF4C9C(a1, &v6, 1uLL);
  v3 = v7;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20AFF0B64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  sub_20AEC147C((uint64_t)va1);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_20AFF0B84(char **a1)
{
  char *v2;
  char *v3;
  char *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (*((_BYTE *)a1 + 24))
  {
    v2 = *a1;
    if (*a1)
    {
      v3 = a1[1];
      v4 = *a1;
      if (v3 != v2)
      {
        do
        {
          v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = *a1;
      }
      a1[1] = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_20AFF0C24(uint64_t result, uint64_t a2)
{
  __int128 v2;
  __int128 v3;
  __int128 v4;

  *(_OWORD *)result = *(_OWORD *)a2;
  *(_BYTE *)(result + 16) = 0;
  *(_BYTE *)(result + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *(_BYTE *)(result + 40) = 0;
    if (*(_BYTE *)(a2 + 40))
    {
      v2 = *(_OWORD *)(a2 + 16);
      *(_QWORD *)(result + 32) = *(_QWORD *)(a2 + 32);
      *(_OWORD *)(result + 16) = v2;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(result + 40) = 1;
    }
    *(_BYTE *)(result + 48) = 0;
    *(_BYTE *)(result + 104) = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      v3 = *(_OWORD *)(a2 + 48);
      *(_QWORD *)(result + 64) = *(_QWORD *)(a2 + 64);
      *(_OWORD *)(result + 48) = v3;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(result + 72) = *(_QWORD *)(a2 + 72);
      v4 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(result + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(result + 80) = v4;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_BYTE *)(result + 104) = 1;
    }
    *(_BYTE *)(result + 112) = 1;
  }
  *(_BYTE *)(result + 160) = 0;
  return result;
}

uint64_t sub_20AFF0CD4(uint64_t a1, const char *a2)
{
  uint64_t result;
  char *v4;
  __int128 v5;
  int v6;
  char **v7;
  const char *v8;
  char **v9;
  const char *v10;
  const char *v11;
  char v12;

  v4 = (char *)operator new(0x40uLL);
  v5 = xmmword_20B5C33B0;
  strcpy(v4, "Caught unexpected exception during creation of file importer: ");
  v6 = 1;
  if (*(_QWORD *)a2)
  {
    v7 = &v4;
    v8 = a2;
    v9 = &v4;
    v10 = a2;
    v11 = a2;
    sub_20AED0870((uint64_t *)&v9, (uint64_t)&v4);
  }
  else
  {
    v7 = &v4;
    v8 = "nullptr";
    v9 = &v4;
    v10 = "nullptr";
    v11 = "nullptr";
    sub_20AED0260((uint64_t *)&v9, (uint64_t)&v4);
  }
  if (v6 == -1)
    sub_20AECFAB8();
  v7 = (char **)&v12;
  result = ((uint64_t (*)(char ***, char **))off_24C3FED10[v6])(&v7, &v4);
  if (v6 != -1)
    return ((uint64_t (*)(char ***, char **))off_24C3FEC80[v6])(&v7, &v4);
  return result;
}

void sub_20AFF0DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AFF0E10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AFF0E24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFF0E38(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  _QWORD *v5;
  uint64_t v6;
  void (***v7)(_QWORD);
  void (***v8)(_QWORD);
  void *v9;
  void (***v10)(_QWORD);
  BOOL v11;
  uint64_t v12;
  uint64_t v13;

  *(_QWORD *)a1 = &off_24C3FEB40;
  if (*(_BYTE *)(a1 + 152) && *(char *)(a1 + 151) < 0)
  {
    operator delete(*(void **)(a1 + 128));
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_17;
  }
  else if (!*(_BYTE *)(a1 + 104))
  {
    goto LABEL_17;
  }
  v2 = *(_QWORD *)(a1 + 80);
  if (!v2)
    goto LABEL_17;
  v3 = *(_QWORD *)(a1 + 88);
  v4 = *(void **)(a1 + 80);
  if (v3 == v2)
    goto LABEL_16;
  do
  {
    v5 = *(_QWORD **)(v3 - 8);
    if ((_QWORD *)(v3 - 32) == v5)
    {
      v5 = (_QWORD *)(v3 - 32);
      v6 = 4;
LABEL_8:
      (*(void (**)(void))(*v5 + 8 * v6))();
      goto LABEL_9;
    }
    if (v5)
    {
      v6 = 5;
      goto LABEL_8;
    }
LABEL_9:
    *(_QWORD *)(v3 - 800) = &off_24C411BF8;
    sub_20B07AE6C(v3 - 784);
    v3 -= 800;
  }
  while (v3 != v2);
  v4 = *(void **)(a1 + 80);
LABEL_16:
  *(_QWORD *)(a1 + 88) = v2;
  operator delete(v4);
LABEL_17:
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(void (****)(_QWORD))(a1 + 48);
    if (v7)
    {
      v8 = *(void (****)(_QWORD))(a1 + 56);
      v9 = *(void **)(a1 + 48);
      if (v8 != v7)
      {
        v10 = v8 - 96;
        do
        {
          (**v10)(v10);
          v11 = v10 == v7;
          v10 -= 96;
        }
        while (!v11);
        v9 = *(void **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 56) = v7;
      operator delete(v9);
    }
  }
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = &off_24C410CA8;
    *(_QWORD *)(a1 + 16) = 0;
    if (v12)
    {
LABEL_27:
      v13 = sub_20B1F671C(v12);
      MEMORY[0x20BD3583C](v13, 0x10F2C4013865076);
    }
  }
  else
  {
    v12 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 8) = &off_24C410CA8;
    *(_QWORD *)(a1 + 16) = 0;
    if (v12)
      goto LABEL_27;
  }
  return a1;
}

void sub_20AFF0FC0(uint64_t a1)
{
  sub_20AFF0E38(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFF0FE4(uint64_t a1)
{
  _QWORD *v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void **v6;
  __int128 v7;
  void **v8;
  __int128 v9;
  BOOL v10;
  uint64_t result;
  void **v12;
  void *v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  void *__p[3];
  _QWORD v20[3];

  v20[2] = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD **)(a1 + 16);
  v3 = v2[36];
  v4 = v2[35];
  if (v4 >= 0x86BCA1AF286BCA1BLL * ((v2[37] - v3) >> 3) && !v2[32])
    return 0;
  v5 = v3 + 152 * v4;
  if (*(_BYTE *)(a1 + 152))
  {
    if (*(_QWORD *)(a1 + 112) != v5)
    {
      *(_QWORD *)(a1 + 112) = v5;
      *(_QWORD *)(a1 + 120) = 1;
      v6 = (void **)(v3 + 152 * v4 + 96);
      if (*(char *)(v5 + 119) < 0)
      {
        sub_20AEC60F4(__p, *v6, *(_QWORD *)(v3 + 152 * v4 + 104));
      }
      else
      {
        v7 = *(_OWORD *)v6;
        __p[2] = *(void **)(v3 + 152 * v4 + 112);
        *(_OWORD *)__p = v7;
      }
      v12 = (void **)(a1 + 128);
      if (*(char *)(a1 + 151) < 0)
        operator delete(*v12);
      *(_OWORD *)v12 = *(_OWORD *)__p;
      *(void **)(a1 + 144) = __p[2];
    }
  }
  else
  {
    v8 = (void **)(v3 + 152 * v4 + 96);
    if (*(char *)(v5 + 119) < 0)
    {
      sub_20AEC60F4(__p, *v8, *(_QWORD *)(v3 + 152 * v4 + 104));
      v10 = *(_BYTE *)(a1 + 152) == 0;
    }
    else
    {
      v9 = *(_OWORD *)v8;
      __p[2] = *(void **)(v3 + 152 * v4 + 112);
      *(_OWORD *)__p = v9;
      v10 = 1;
    }
    v13 = __p[0];
    v20[0] = __p[1];
    *(void **)((char *)v20 + 7) = *(void **)((char *)&__p[1] + 7);
    v14 = HIBYTE(__p[2]);
    memset(__p, 0, sizeof(__p));
    *(_QWORD *)(a1 + 112) = v5;
    *(_QWORD *)(a1 + 120) = 1;
    if (v10)
    {
      v15 = v20[0];
      *(_QWORD *)(a1 + 128) = v13;
      *(_QWORD *)(a1 + 136) = v15;
      *(_QWORD *)(a1 + 143) = *(_QWORD *)((char *)v20 + 7);
      *(_BYTE *)(a1 + 151) = v14;
      *(_BYTE *)(a1 + 152) = 1;
    }
    else if (*(char *)(a1 + 151) < 0)
    {
      operator delete(*(void **)(a1 + 128));
      v17 = SHIBYTE(__p[2]);
      v18 = v20[0];
      *(_QWORD *)(a1 + 128) = v13;
      *(_QWORD *)(a1 + 136) = v18;
      *(_QWORD *)(a1 + 143) = *(_QWORD *)((char *)v20 + 7);
      *(_BYTE *)(a1 + 151) = v14;
      if (v17 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v16 = v20[0];
      *(_QWORD *)(a1 + 128) = v13;
      *(_QWORD *)(a1 + 136) = v16;
      *(_QWORD *)(a1 + 143) = *(_QWORD *)((char *)v20 + 7);
      *(_BYTE *)(a1 + 151) = v14;
    }
  }
  result = a1 + 128;
  if (*(char *)(a1 + 151) < 0)
    return *(_QWORD *)result;
  return result;
}

uint64_t sub_20AFF11FC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  char *v3;
  int v4;
  int v5;
  int v6;
  void *v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int *v13;
  unsigned int v14;
  unsigned int v15;
  _BYTE *v16;
  int v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  int v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int *v26;
  unsigned int v27;
  unsigned __int8 v29;
  unsigned __int8 v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  int v36;
  unsigned int *v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  unsigned int v41;
  uint64_t v42;
  uint64_t v43;
  const std::error_category *v44;
  _UNKNOWN **v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  void *v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  char v55;
  char v56;
  unsigned __int8 v57;
  timespec v58;
  void *v59;
  char v60;
  char v61;
  void *v62;
  char v63;
  void *v64;
  char v65;
  char v66;
  char v67;
  timespec __rqtp;
  __int128 v69;
  char v70;
  char v71;
  void *v72;
  char v73;
  void *v74;
  char v75;
  char v76;
  char v77;
  __int128 __dst;
  void *__p;
  unsigned int *v80;
  void *v81;
  unsigned __int8 v82;
  __int128 v83;
  void *v84;
  uint64_t v85;
  __int128 v86;
  uint64_t v87;
  char v88;
  char v89;
  timespec v90;
  _BYTE v91[24];
  unsigned __int8 v92;
  __int128 v93;
  uint64_t v94;
  uint64_t v95;
  __int128 v96;
  uint64_t v97;
  char v98;
  char v99;
  char v100;

  sub_20B1EBD4C(*(_QWORD *)(a1 + 16), (uint64_t)&v90);
  if (v100)
  {
    v3 = (char *)operator new(0x40uLL);
    *((_QWORD *)v3 + 1) = 0;
    *((_QWORD *)v3 + 2) = 0;
    *(_QWORD *)v3 = &off_24C3F3C38;
    *(timespec *)(v3 + 24) = v90;
    v90.tv_sec = 0;
    v90.tv_nsec = 0;
    *((_QWORD *)v3 + 5) = &off_24C411E78;
    *((_OWORD *)v3 + 3) = *(_OWORD *)&v91[8];
    *(_QWORD *)&v91[8] = 0;
    *(_QWORD *)&v91[16] = 0;
    __p = 0;
    v80 = 0;
    LOBYTE(v81) = 0;
    *(_QWORD *)&v46 = v3 + 24;
    *((_QWORD *)&v46 + 1) = v3;
    __dst = 0uLL;
    do
      v4 = __ldaxr((unsigned __int8 *)&v81);
    while (__stxr(1u, (unsigned __int8 *)&v81));
    if (v4)
    {
      v5 = 0;
      do
      {
        if (v5)
        {
          __rqtp = (timespec)xmmword_20B5B0ED0;
          nanosleep(&__rqtp, 0);
        }
        ++v5;
        do
          v6 = __ldaxr((unsigned __int8 *)&v81);
        while (__stxr(1u, (unsigned __int8 *)&v81));
      }
      while (v6);
    }
    v7 = __p;
    v8 = v80;
    if (v80)
    {
      v9 = v80 + 2;
      do
        v10 = __ldxr(v9);
      while (__stxr(v10 + 1, v9));
      atomic_store(0, (unsigned __int8 *)&v81);
      *(_QWORD *)&v47 = v7;
      *((_QWORD *)&v47 + 1) = v8;
      LOBYTE(v48) = 0;
      v57 = 1;
      do
      {
        v11 = __ldaxr(v9);
        v12 = v11 - 1;
      }
      while (__stlxr(v12, v9));
      if (!v12)
      {
        (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 16))(v8);
        v13 = v8 + 3;
        do
        {
          v14 = __ldaxr(v13);
          v15 = v14 - 1;
        }
        while (__stlxr(v15, v13));
        if (!v15)
          (*(void (**)(unsigned int *))(*(_QWORD *)v8 + 24))(v8);
      }
    }
    else
    {
      atomic_store(0, (unsigned __int8 *)&v81);
      v47 = (unint64_t)v7;
      LOBYTE(v48) = 0;
      v57 = 1;
    }
    v18 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
    if (*((_QWORD *)&__dst + 1))
    {
      v19 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    goto LABEL_55;
  }
  v58 = v90;
  sub_20AECEBD0(&v59, (__int128 *)v91);
  sub_20AFB1FC8((unsigned __int8 *)&v58, (uint64_t)&__rqtp);
  __dst = (__int128)__rqtp;
  v16 = sub_20AECEBD0(&__p, &v69);
  v46 = __dst;
  LOBYTE(v47) = 0;
  v56 = 0;
  if (v89)
  {
    v49 = 0;
    v17 = v82;
    if (v82)
    {
      v47 = *(_OWORD *)v16;
      v48 = *((_QWORD *)v16 + 2);
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      *(_QWORD *)v16 = 0;
      v49 = 1;
    }
    LOBYTE(v50) = 0;
    v55 = 0;
    if (v88)
    {
      v51 = v84;
      v50 = v83;
      v83 = 0uLL;
      v52 = v85;
      v53 = v86;
      v54 = v87;
      v84 = 0;
      v86 = 0uLL;
      v87 = 0;
      v55 = 1;
    }
    v56 = 1;
    v57 = 0;
    if (v17 && SHIBYTE(v81) < 0)
      operator delete(__p);
    if (!v77)
      goto LABEL_46;
    goto LABEL_38;
  }
  v57 = 0;
  if (v77)
  {
LABEL_38:
    if (v76)
    {
      if (v75 < 0)
        operator delete(v74);
      if (v73 < 0)
        operator delete(v72);
    }
    if (v71 && v70 < 0)
      operator delete((void *)v69);
  }
LABEL_46:
  if (v67)
  {
    if (v66)
    {
      if (v65 < 0)
        operator delete(v64);
      if (v63 < 0)
        operator delete(v62);
    }
    if (v61 && v60 < 0)
      operator delete(v59);
  }
LABEL_55:
  sub_20AFF6F08((uint64_t)&v90);
  if (v57)
  {
    *(_BYTE *)(a2 + 120) = 1;
    *(_OWORD *)a2 = v46;
    v46 = 0uLL;
    do
      v21 = __ldaxr((unsigned __int8 *)&v48);
    while (__stxr(1u, (unsigned __int8 *)&v48));
    if (v21)
    {
      v22 = 0;
      do
      {
        if (v22)
        {
          v90 = (timespec)xmmword_20B5B0ED0;
          nanosleep(&v90, 0);
        }
        ++v22;
        do
          v23 = __ldaxr((unsigned __int8 *)&v48);
        while (__stxr(1u, (unsigned __int8 *)&v48));
      }
      while (v23);
    }
    v24 = *((_QWORD *)&v47 + 1);
    v25 = v47;
    if (*((_QWORD *)&v47 + 1))
    {
      v26 = (unsigned int *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v27 = __ldxr(v26);
      while (__stxr(v27 + 1, v26));
    }
LABEL_68:
    atomic_store(0, (unsigned __int8 *)&v48);
    *(_QWORD *)(a2 + 16) = v25;
    *(_QWORD *)(a2 + 24) = v24;
    *(_BYTE *)(a2 + 32) = 0;
    return sub_20AF04A10((uint64_t)&v46);
  }
  v29 = atomic_load((unsigned __int8 *)&qword_25463AE20);
  if ((v29 & 1) == 0 && __cxa_guard_acquire(&qword_25463AE20))
  {
    v44 = std::generic_category();
    qword_25463AE50 = 22;
    qword_25463AE58 = (uint64_t)v44;
    __cxa_guard_release(&qword_25463AE20);
  }
  if (*((_QWORD *)&v46 + 1) == qword_25463AE58 && (_DWORD)v46 == (_DWORD)qword_25463AE50)
  {
    sub_20AECEBD0(&__dst, &v47);
    sub_20AECCC3C(0xAu, &__dst, (uint64_t)&v90);
    *(timespec *)a2 = v90;
    *(_BYTE *)(a2 + 16) = 0;
    v39 = a2 + 16;
    *(_BYTE *)(a2 + 112) = 0;
    if (v99)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v40 = v92;
      if (!v92)
        goto LABEL_108;
LABEL_107:
      *(_OWORD *)v39 = *(_OWORD *)v91;
      *(_QWORD *)(v39 + 16) = *(_QWORD *)&v91[16];
      memset(v91, 0, sizeof(v91));
      *(_BYTE *)(a2 + 40) = 1;
LABEL_108:
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v98)
      {
        v43 = v95;
        *(_QWORD *)(a2 + 64) = v94;
        *(_OWORD *)(a2 + 48) = v93;
        v93 = 0uLL;
        *(_QWORD *)(a2 + 72) = v43;
        *(_OWORD *)(a2 + 80) = v96;
        *(_QWORD *)(a2 + 96) = v97;
        v94 = 0;
        v96 = 0uLL;
        v97 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v40 && (v91[23] & 0x80000000) != 0)
        operator delete(*(void **)v91);
      if (!(_BYTE)v87)
        return sub_20AF04A10((uint64_t)&v46);
LABEL_116:
      if (BYTE8(v86))
      {
        if (SBYTE7(v86) < 0)
          operator delete(v84);
        if (SBYTE7(v83) < 0)
          operator delete(v81);
      }
      if ((_BYTE)v80 && SHIBYTE(__p) < 0)
        operator delete((void *)__dst);
      return sub_20AF04A10((uint64_t)&v46);
    }
LABEL_115:
    *(_BYTE *)(a2 + 120) = 0;
    if (!(_BYTE)v87)
      return sub_20AF04A10((uint64_t)&v46);
    goto LABEL_116;
  }
  v31 = atomic_load((unsigned __int8 *)&qword_25463AE28);
  if ((v31 & 1) == 0 && __cxa_guard_acquire(&qword_25463AE28))
  {
    v45 = sub_20B1E193C();
    qword_25463AE60 = 1;
    qword_25463AE68 = (uint64_t)v45;
    __cxa_guard_release(&qword_25463AE28);
  }
  v32 = *((_QWORD *)&v46 + 1);
  if (qword_25463AE68 == *((_QWORD *)&v46 + 1))
  {
    if (v46 <= 0xDu)
    {
      if ((v46 - 1) > 0xCu)
        v41 = 0;
      else
        v41 = dword_20B5C3BF8[(char)(v46 - 1)];
    }
    else
    {
      v41 = 1;
    }
    sub_20AECEBD0(&__dst, &v47);
    sub_20AECCC3C(v41, &__dst, (uint64_t)&v90);
    *(timespec *)a2 = v90;
    *(_BYTE *)(a2 + 16) = 0;
    v39 = a2 + 16;
    *(_BYTE *)(a2 + 112) = 0;
    if (v99)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v40 = v92;
      if (!v92)
        goto LABEL_108;
      goto LABEL_107;
    }
    goto LABEL_115;
  }
  *(_BYTE *)a2 = 0;
  v33 = v57;
  *(_BYTE *)(a2 + 120) = v57;
  if (v33)
  {
    *(_QWORD *)a2 = v46;
    *(_QWORD *)(a2 + 8) = v32;
    v46 = 0uLL;
    do
      v34 = __ldaxr((unsigned __int8 *)&v48);
    while (__stxr(1u, (unsigned __int8 *)&v48));
    if (v34)
    {
      v35 = 0;
      do
      {
        if (v35)
        {
          v90 = (timespec)xmmword_20B5B0ED0;
          nanosleep(&v90, 0);
        }
        ++v35;
        do
          v36 = __ldaxr((unsigned __int8 *)&v48);
        while (__stxr(1u, (unsigned __int8 *)&v48));
      }
      while (v36);
    }
    v24 = *((_QWORD *)&v47 + 1);
    v25 = v47;
    if (*((_QWORD *)&v47 + 1))
    {
      v37 = (unsigned int *)(*((_QWORD *)&v47 + 1) + 8);
      do
        v38 = __ldxr(v37);
      while (__stxr(v38 + 1, v37));
    }
    goto LABEL_68;
  }
  *(_OWORD *)a2 = v46;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v56)
  {
    *(_BYTE *)(a2 + 40) = 0;
    if (v49)
    {
      *(_OWORD *)(a2 + 16) = v47;
      *(_QWORD *)(a2 + 32) = v48;
      v48 = 0;
      v47 = 0uLL;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v55)
    {
      v42 = v52;
      *(_QWORD *)(a2 + 64) = v51;
      *(_OWORD *)(a2 + 48) = v50;
      v50 = 0uLL;
      *(_QWORD *)(a2 + 72) = v42;
      *(_OWORD *)(a2 + 80) = v53;
      *(_QWORD *)(a2 + 96) = v54;
      v51 = 0;
      v53 = 0uLL;
      v54 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
  }
  return sub_20AF04A10((uint64_t)&v46);
}

void sub_20AFF19F4(void *a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,__int128 __p,int a46,__int16 a47,char a48,char a49,char a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,char a63)
{
  uint64_t v63;
  void *v66;
  void *v67;
  void *v68;
  void *v69;

  sub_20AECCDB4((uint64_t)&a63);
  sub_20AF04A10((uint64_t)&a13);
  switch(a2)
  {
    case 5:
      v66 = __cxa_begin_catch(a1);
      a12 = (*(uint64_t (**)(void *))(*(_QWORD *)v66 + 16))(v66);
      sub_20AED4C84(&__p, (const char **)&a12);
      sub_20B099E24(&__p, (uint64_t)&a13);
      break;
    case 4:
      v67 = __cxa_begin_catch(a1);
      a12 = (*(uint64_t (**)(void *))(*(_QWORD *)v67 + 16))(v67);
      sub_20AED4C84(&__p, (const char **)&a12);
      sub_20B09A738(&__p, (uint64_t)&a13);
      break;
    case 3:
      v68 = __cxa_begin_catch(a1);
      a12 = (*(uint64_t (**)(void *))(*(_QWORD *)v68 + 16))(v68);
      sub_20AED4C84(&__p, (const char **)&a12);
      sub_20B099D74(&__p, (uint64_t)&a13);
      break;
    default:
      v69 = __cxa_begin_catch(a1);
      if (a2 == 2)
      {
        a12 = (*(uint64_t (**)(void *))(*(_QWORD *)v69 + 16))(v69);
        sub_20AED4C84(&__p, (const char **)&a12);
        sub_20B099D74(&__p, (uint64_t)&a13);
      }
      else
      {
        LOBYTE(__p) = 0;
        a50 = 0;
        sub_20B099B50(&__p, (uint64_t)&a13);
      }
      break;
  }
  sub_20AFEDBD0(v63, (uint64_t)&a13);
  sub_20AECCE40((uint64_t)&a13);
  if (a50 && a49 < 0)
    operator delete((void *)__p);
  __cxa_end_catch();
  JUMPOUT(0x20AFF1618);
}

void sub_20AFF1B9C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,char a51)
{
  if (a51)
  {
    if (a50 < 0)
      operator delete(__p);
  }
  __cxa_end_catch();
  sub_20AEC01C0(a1);
}

void sub_20AFF1C88(uint64_t a1@<X0>, void *a2@<X1>, uint64_t a3@<X8>)
{
  __darwin_time_t tv_sec;
  int64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  unsigned __int8 *v11;
  int v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int v18;
  __darwin_time_t v19;
  void *v20;
  __darwin_time_t v21;
  uint64_t v22;
  int64_t v23;
  unint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unsigned __int8 *v29;
  int v30;
  int v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int *v35;
  unsigned int v36;
  int v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  uint64_t tv_nsec;
  timespec v42;
  void *v43[2];
  char v44;
  char v45;
  void *v46;
  char v47;
  void *__p;
  char v49;
  char v50;
  char v51;
  char v52;
  __int128 v53;
  __int128 v54;
  char v55;
  char v56;
  void *v57;
  char v58;
  void *v59;
  char v60;
  char v61;
  char v62;
  unsigned __int8 v63;
  timespec v64;
  void *v65;
  char v66;
  unsigned __int8 v67;
  void *v68[2];
  uint64_t v69;
  uint64_t v70;
  void *v71[2];
  uint64_t v72;
  char v73;
  char v74;
  char v75;
  __int128 v76;
  void *v77;
  char v78;
  char v79;
  void *v80;
  char v81;
  void *v82;
  char v83;
  char v84;
  char v85;
  _BYTE v86[24];
  char v87;
  char v88;
  void *v89;
  char v90;
  void *v91;
  char v92;
  char v93;
  char v94;
  timespec *v95;
  char *v96;
  __int128 v97;
  __int128 v98[6];
  char v99;
  timespec __rqtp[2];
  timespec *v101;
  char v102;

  v63 = 1;
  sub_20B1F19AC(a2, *(_QWORD *)(a1 + 16), (uint64_t)&v95);
  if (!v99)
  {
    v76 = v97;
    sub_20AECEBD0(&v77, v98);
    sub_20AFB1FC8((unsigned __int8 *)&v76, (uint64_t)v86);
    v42 = *(timespec *)v86;
    sub_20AECEBD0(v43, (__int128 *)&v86[16]);
    sub_20AECEEFC((uint64_t)&v53, (__int128 *)&v42.tv_sec);
    if (v51)
    {
      if (v50)
      {
        if (v49 < 0)
          operator delete(__p);
        if (v47 < 0)
          operator delete(v46);
      }
      if (v45 && v44 < 0)
        operator delete(v43[0]);
    }
    if (v94)
    {
      if (v93)
      {
        if (v92 < 0)
          operator delete(v91);
        if (v90 < 0)
          operator delete(v89);
      }
      if (v88 && v87 < 0)
        operator delete(*(void **)&v86[16]);
    }
    if (v85)
    {
      if (v84)
      {
        if (v83 < 0)
          operator delete(v82);
        if (v81 < 0)
          operator delete(v80);
      }
      if (v79 && v78 < 0)
        operator delete(v77);
    }
  }
  memset(__rqtp, 0, 24);
  sub_20AFF65E4((char **)__rqtp, 0xCCCCCCCCCCCCCCCDLL * ((v96 - (char *)v95) >> 3));
  sub_20AFF683C(v95, v96, (char **)__rqtp);
  tv_sec = __rqtp[0].tv_sec;
  *(_QWORD *)v86 = __rqtp[0].tv_sec;
  tv_nsec = __rqtp[0].tv_nsec;
  *(timespec *)&v86[8] = *(timespec *)&__rqtp[0].tv_nsec;
  memset(__rqtp, 0, 24);
  v101 = __rqtp;
  sub_20AF048EC((void ***)&v101);
  v43[0] = 0;
  v42 = (timespec)0;
  v101 = &v42;
  v102 = 0;
  v5 = tv_nsec - tv_sec;
  if (tv_nsec == tv_sec)
  {
    v20 = 0;
    v7 = 0;
    v19 = 0;
  }
  else
  {
    v6 = 0xCCCCCCCCCCCCCCCDLL * (v5 >> 3);
    if (v6 > 0x666666666666666)
      sub_20AEC60B8();
    v7 = operator new(v5);
    v42.tv_sec = (__darwin_time_t)v7;
    v42.tv_nsec = (uint64_t)v7;
    v43[0] = &v7[5 * v6];
    do
    {
      *v7 = *(_QWORD *)tv_sec;
      v8 = *(_QWORD *)(tv_sec + 8);
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v11 = (unsigned __int8 *)(tv_sec + 32);
      do
        v12 = __ldaxr(v11);
      while (__stxr(1u, v11));
      if (v12)
      {
        v13 = 0;
        do
        {
          if (v13)
          {
            __rqtp[0] = (timespec)xmmword_20B5B0ED0;
            nanosleep(__rqtp, 0);
          }
          ++v13;
          do
            v14 = __ldaxr(v11);
          while (__stxr(1u, v11));
        }
        while (v14);
      }
      v15 = *(_QWORD *)(tv_sec + 16);
      v16 = *(_QWORD *)(tv_sec + 24);
      if (v16)
      {
        v17 = (unsigned int *)(v16 + 8);
        do
          v18 = __ldxr(v17);
        while (__stxr(v18 + 1, v17));
      }
      atomic_store(0, (unsigned __int8 *)(tv_sec + 32));
      v7[2] = v15;
      v7[3] = v16;
      *((_BYTE *)v7 + 32) = 0;
      tv_sec += 40;
      v7 += 5;
    }
    while (tv_sec != tv_nsec);
    v19 = v42.tv_sec;
    v20 = v43[0];
  }
  v64.tv_sec = v19;
  v64.tv_nsec = (uint64_t)v7;
  v65 = v20;
  v43[0] = 0;
  v42 = (timespec)0;
  v75 = 1;
  __rqtp[0].tv_sec = (__darwin_time_t)&v42;
  sub_20AF048EC((void ***)__rqtp);
  __rqtp[0].tv_sec = (__darwin_time_t)v86;
  sub_20AF048EC((void ***)__rqtp);
  sub_20AFF6DC4((char **)&v95);
  sub_20AFF5BF0((uint64_t)&v42, (uint64_t)&v64);
  if (v75)
  {
    v95 = &v64;
    sub_20AF048EC((void ***)&v95);
  }
  else if (v74)
  {
    if (v73)
    {
      if (SHIBYTE(v72) < 0)
        operator delete(v71[0]);
      if (SHIBYTE(v69) < 0)
        operator delete(v68[0]);
    }
    if (v67 && v66 < 0)
      operator delete(v65);
  }
  if (v52)
  {
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    v22 = v42.tv_nsec;
    v21 = v42.tv_sec;
    *(_QWORD *)v86 = a3;
    v86[8] = 0;
    v23 = v42.tv_nsec - v42.tv_sec;
    if (v42.tv_nsec != v42.tv_sec)
    {
      v24 = 0xCCCCCCCCCCCCCCCDLL * (v23 >> 3);
      if (v24 > 0x666666666666666)
        sub_20AEC60B8();
      v25 = operator new(v23);
      *(_QWORD *)a3 = v25;
      *(_QWORD *)(a3 + 8) = v25;
      *(_QWORD *)(a3 + 16) = &v25[5 * v24];
      do
      {
        *v25 = *(_QWORD *)v21;
        v26 = *(_QWORD *)(v21 + 8);
        v25[1] = v26;
        if (v26)
        {
          v27 = (unint64_t *)(v26 + 8);
          do
            v28 = __ldxr(v27);
          while (__stxr(v28 + 1, v27));
        }
        v29 = (unsigned __int8 *)(v21 + 32);
        do
          v30 = __ldaxr(v29);
        while (__stxr(1u, v29));
        if (v30)
        {
          v31 = 0;
          do
          {
            if (v31)
            {
              v64 = (timespec)xmmword_20B5B0ED0;
              nanosleep(&v64, 0);
            }
            ++v31;
            do
              v32 = __ldaxr(v29);
            while (__stxr(1u, v29));
          }
          while (v32);
        }
        v33 = *(_QWORD *)(v21 + 16);
        v34 = *(_QWORD *)(v21 + 24);
        if (v34)
        {
          v35 = (unsigned int *)(v34 + 8);
          do
            v36 = __ldxr(v35);
          while (__stxr(v36 + 1, v35));
        }
        atomic_store(0, (unsigned __int8 *)(v21 + 32));
        v25[2] = v33;
        v25[3] = v34;
        *((_BYTE *)v25 + 32) = 0;
        v21 += 40;
        v25 += 5;
      }
      while (v21 != v22);
      *(_QWORD *)(a3 + 8) = v25;
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 24) = 1;
    v37 = v63;
    *(_BYTE *)(a3 + 152) = v63;
    if (!v37)
    {
      *(_OWORD *)(a3 + 32) = v53;
      sub_20AECEBD0((_BYTE *)(a3 + 48), &v54);
    }
  }
  else
  {
    v64 = v42;
    v38 = sub_20AECEBD0(&v65, (__int128 *)v43);
    *(_BYTE *)a3 = 0;
    *(_BYTE *)(a3 + 24) = 0;
    *(timespec *)(a3 + 32) = v64;
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 144) = 0;
    if (!v74)
    {
      *(_BYTE *)(a3 + 152) = 0;
      if (v52)
        goto LABEL_86;
      goto LABEL_108;
    }
    *(_BYTE *)(a3 + 72) = 0;
    v39 = v67;
    if (v67)
    {
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v38;
      *(_QWORD *)(a3 + 64) = *((_QWORD *)v38 + 2);
      *((_QWORD *)v38 + 1) = 0;
      *((_QWORD *)v38 + 2) = 0;
      *(_QWORD *)v38 = 0;
      *(_BYTE *)(a3 + 72) = 1;
    }
    *(_BYTE *)(a3 + 80) = 0;
    *(_BYTE *)(a3 + 136) = 0;
    if (v73)
    {
      v40 = v70;
      *(_QWORD *)(a3 + 96) = v69;
      *(_OWORD *)(a3 + 80) = *(_OWORD *)v68;
      v68[0] = 0;
      v68[1] = 0;
      *(_QWORD *)(a3 + 104) = v40;
      *(_OWORD *)(a3 + 112) = *(_OWORD *)v71;
      *(_QWORD *)(a3 + 128) = v72;
      v69 = 0;
      v71[0] = 0;
      v71[1] = 0;
      v72 = 0;
      *(_BYTE *)(a3 + 136) = 1;
    }
    *(_BYTE *)(a3 + 144) = 1;
    *(_BYTE *)(a3 + 152) = 0;
    if (v39 && v66 < 0)
      operator delete(v65);
  }
  if (v52)
  {
LABEL_86:
    v64.tv_sec = (__darwin_time_t)&v42;
    sub_20AF048EC((void ***)&v64);
    goto LABEL_87;
  }
LABEL_108:
  if (v51)
  {
    if (v50)
    {
      if (v49 < 0)
        operator delete(__p);
      if (v47 < 0)
        operator delete(v46);
    }
    if (v45 && v44 < 0)
      operator delete(v43[0]);
  }
LABEL_87:
  if (!v63 && v62)
  {
    if (v61)
    {
      if (v60 < 0)
        operator delete(v59);
      if (v58 < 0)
        operator delete(v57);
    }
    if (v56)
    {
      if (v55 < 0)
        operator delete((void *)v54);
    }
  }
}

void sub_20AFF236C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,__int128 a43)
{
  uint64_t v43;

  if (*(_BYTE *)(v43 + 24))
  {
    *(_QWORD *)&a43 = v43;
    sub_20AF048EC((void ***)&a43);
    sub_20AEC01C0(a1);
  }
  sub_20AEC01C0(a1);
}

void sub_20AFF26F8(void *a1)
{
  uint64_t v1;

  sub_20AF048EC((void ***)(v1 - 96));
  sub_20AEC01C0(a1);
}

void sub_20AFF2714(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _QWORD *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v3 = *(_QWORD **)(a1 + 16);
  v4 = v3[35];
  v5 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v3[37] - v3[36]) >> 3);
  if (v4 < v5 || v3[32])
  {
    v6 = v4 + 1;
    v3[35] = v6;
    if (v6 >= v5)
      sub_20B1EA4B0(v3);
    sub_20B1EB268((uint64_t)v3);
  }
  *(_BYTE *)(a2 + 120) = 1;
}

void sub_20AFF2A28(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v5 = *(_QWORD **)(a1 + 16);
  while (1)
  {
    v6 = v5[36];
    v7 = v5[35];
    v8 = 0x86BCA1AF286BCA1BLL * ((v5[37] - v6) >> 3);
    if (v7 >= v8 && !v5[32])
      break;
    if (*(_QWORD *)(v6 + 152 * v7) >= a2)
      break;
    v9 = v7 + 1;
    v5[35] = v9;
    if (v9 >= v8)
      sub_20B1EA4B0(v5);
  }
  *(_BYTE *)(a3 + 120) = 1;
}

uint64_t sub_20AFF2D60@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)(*(_QWORD *)(result + 16) + 280) = 0;
  *(_BYTE *)(a2 + 120) = 1;
  return result;
}

void *sub_20AFF2D74@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4;
  void *result;
  int v6;
  size_t v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  _BYTE *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int *v18[3];
  uint64_t v19[2];
  int v20;
  _OWORD v21[2];

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v17 = v4;
  v21[0] = xmmword_24C3FEEF8;
  v21[1] = *(_OWORD *)&off_24C3FEF08;
  v20 = 0;
  sub_20AEC01D0((_QWORD *)(v4 + 16), (uint64_t)"{", 1);
  v19[0] = a1;
  v19[1] = a1 + 24;
  v18[0] = &v20;
  v18[1] = (int *)(v4 + 16);
  v18[2] = (int *)v21;
  sub_20AFF701C(v19, v18);
  result = sub_20AEC01D0((_QWORD *)(v4 + 16), (uint64_t)"}", 1);
  v6 = *(_DWORD *)(v4 + 120);
  if ((v6 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v7 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_20;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      a2[23] = 0;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v7 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_20:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v11 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v11 = v7 | 7;
    v12 = v11 + 1;
    v13 = operator new(v11 + 1);
    *((_QWORD *)a2 + 1) = v7;
    *((_QWORD *)a2 + 2) = v12 | 0x8000000000000000;
    *(_QWORD *)a2 = v13;
    a2 = v13;
    goto LABEL_13;
  }
  a2[23] = v7;
  if (v7)
LABEL_13:
    result = memmove(a2, v10, v7);
LABEL_14:
  a2[v7] = 0;
  if (v17)
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v17 = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v16;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v17 + 128);
    return (void *)MEMORY[0x20BD3583C](v17, 0x10B2C40EED050F3);
  }
  return result;
}

void sub_20AFF2FA0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20AFF2FC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFF2FD8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 88))
  {
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if (!*(_BYTE *)(a1 + 24))
        return a1;
      goto LABEL_5;
    }
    operator delete(*(void **)(a1 + 64));
    if (*(char *)(a1 + 55) < 0)
      goto LABEL_8;
  }
LABEL_4:
  if (!*(_BYTE *)(a1 + 24))
    return a1;
LABEL_5:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20AFF305C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  char v18;
  char v19;
  char v20;
  char v21;
  _BYTE v22[2];
  _BYTE v23[2];
  char v24;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    *(_BYTE *)(a1 + 8) = 0;
    *(_DWORD *)(a1 + 40) = -1;
    v4 = *(unsigned int *)(a2 + 40);
    if ((_DWORD)v4 != -1)
    {
      ((void (*)(char *))off_24C3FEBA0[v4])(&v18);
      *(_DWORD *)(a1 + 40) = v4;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v5 = *(_QWORD *)(a2 + 56);
  v6 = *(_DWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 64) = v6;
  *(_QWORD *)(a1 + 56) = v5;
  *(_BYTE *)(a1 + 112) = 0;
  if (*(_BYTE *)(a2 + 112))
  {
    *(_BYTE *)(a1 + 104) = 0;
    if (*(_BYTE *)(a2 + 104))
    {
      v7 = *(_OWORD *)(a2 + 72);
      *(_QWORD *)(a1 + 88) = *(_QWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 72) = v7;
      *(_QWORD *)(a2 + 80) = 0;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
  }
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    *(_DWORD *)(a1 + 144) = -1;
    v8 = *(unsigned int *)(a2 + 144);
    if ((_DWORD)v8 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24C3FEBB0[v8])(&v19, a1 + 120, a2 + 120);
      *(_DWORD *)(a1 + 144) = v8;
    }
    *(_BYTE *)(a1 + 152) = 1;
  }
  *(_BYTE *)(a1 + 160) = 0;
  *(_BYTE *)(a1 + 224) = 0;
  if (*(_BYTE *)(a2 + 224))
  {
    *(_DWORD *)(a1 + 216) = -1;
    v9 = *(unsigned int *)(a2 + 216);
    if ((_DWORD)v9 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24C3FEBC0[v9])(&v20, a1 + 160, a2 + 160);
      *(_DWORD *)(a1 + 216) = v9;
    }
    *(_BYTE *)(a1 + 224) = 1;
  }
  *(_BYTE *)(a1 + 232) = 0;
  *(_BYTE *)(a1 + 256) = 0;
  if (*(_BYTE *)(a2 + 256))
  {
    *(_QWORD *)(a1 + 232) = &off_24C411E78;
    *(_OWORD *)(a1 + 240) = *(_OWORD *)(a2 + 240);
    *(_QWORD *)(a2 + 240) = 0;
    *(_QWORD *)(a2 + 248) = 0;
    *(_BYTE *)(a1 + 256) = 1;
  }
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 312) = 0;
  if (*(_BYTE *)(a2 + 312))
  {
    *(_BYTE *)(a1 + 272) = 0;
    *(_DWORD *)(a1 + 304) = -1;
    v10 = *(unsigned int *)(a2 + 304);
    if ((_DWORD)v10 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24C3FEBA0[v10])(&v21, a1 + 272, a2 + 272);
      *(_DWORD *)(a1 + 304) = v10;
    }
    *(_BYTE *)(a1 + 312) = 1;
  }
  *(_BYTE *)(a1 + 320) = 0;
  *(_BYTE *)(a1 + 416) = 0;
  if (*(_BYTE *)(a2 + 416))
  {
    *(_BYTE *)(a1 + 336) = 0;
    *(_DWORD *)(a1 + 400) = -1;
    v11 = *(unsigned int *)(a2 + 400);
    if ((_DWORD)v11 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C3FEBD0[v11])(v22, a1 + 336, a2 + 336);
      *(_DWORD *)(a1 + 400) = v11;
    }
    *(_BYTE *)(a1 + 416) = 1;
  }
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 576) = 0;
  if (*(_BYTE *)(a2 + 576))
  {
    *(_BYTE *)(a1 + 448) = 0;
    *(_DWORD *)(a1 + 560) = -1;
    v12 = *(unsigned int *)(a2 + 560);
    if ((_DWORD)v12 != -1)
    {
      ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C3FEBE0[v12])(v23, a1 + 448, a2 + 448);
      *(_DWORD *)(a1 + 560) = v12;
    }
    *(_BYTE *)(a1 + 576) = 1;
  }
  *(_BYTE *)(a1 + 592) = 0;
  *(_BYTE *)(a1 + 624) = 0;
  if (*(_BYTE *)(a2 + 624))
  {
    *(_BYTE *)(a1 + 616) = 0;
    if (*(_BYTE *)(a2 + 616))
    {
      *(_QWORD *)(a1 + 592) = 0;
      *(_QWORD *)(a1 + 600) = 0;
      *(_QWORD *)(a1 + 608) = 0;
      *(_OWORD *)(a1 + 592) = *(_OWORD *)(a2 + 592);
      *(_QWORD *)(a1 + 608) = *(_QWORD *)(a2 + 608);
      *(_QWORD *)(a2 + 592) = 0;
      *(_QWORD *)(a2 + 600) = 0;
      *(_QWORD *)(a2 + 608) = 0;
      *(_BYTE *)(a1 + 616) = 1;
    }
    *(_BYTE *)(a1 + 624) = 1;
  }
  *(_BYTE *)(a1 + 632) = 0;
  *(_BYTE *)(a1 + 680) = 0;
  if (*(_BYTE *)(a2 + 680))
  {
    *(_BYTE *)(a1 + 640) = 0;
    *(_DWORD *)(a1 + 672) = -1;
    v13 = *(unsigned int *)(a2 + 672);
    if ((_DWORD)v13 != -1)
    {
      ((void (*)(char *, uint64_t, uint64_t))off_24C3FEBA0[v13])(&v24, a1 + 640, a2 + 640);
      *(_DWORD *)(a1 + 672) = v13;
    }
    *(_BYTE *)(a1 + 680) = 1;
  }
  v14 = *(_OWORD *)(a2 + 688);
  v15 = *(_OWORD *)(a2 + 704);
  v16 = *(_OWORD *)(a2 + 720);
  *(_OWORD *)(a1 + 729) = *(_OWORD *)(a2 + 729);
  *(_OWORD *)(a1 + 704) = v15;
  *(_OWORD *)(a1 + 720) = v16;
  *(_OWORD *)(a1 + 688) = v14;
  return a1;
}

void sub_20AFF33F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, __int16 a11, char a12)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v20;

  v20 = *(unsigned int *)(v12 + 560);
  if ((_DWORD)v20 != -1)
    ((void (*)(char *, uint64_t))off_24C3FEB70[v20])(&a12, v18);
  *(_DWORD *)(v12 + 560) = -1;
  sub_20AF05B30(v17);
  sub_20AF05B90(v12 + 264);
  if (*(_BYTE *)(v12 + 256))
    sub_20B216B00(v16);
  sub_20AF05BF0(v15);
  sub_20AF05C50(v14);
  sub_20AF05CB0(v13);
  sub_20AF05B90(v12);
  _Unwind_Resume(a1);
}

__n128 sub_20AFF34B8(uint64_t a1, uint64_t a2, __n128 *a3)
{
  __n128 result;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 24) = 0;
  if (a3[1].n128_u8[8])
  {
    result = *a3;
    *(_QWORD *)(a2 + 16) = a3[1].n128_u64[0];
    *(__n128 *)a2 = result;
    a3->n128_u64[1] = 0;
    a3[1].n128_u64[0] = 0;
    a3->n128_u64[0] = 0;
    *(_BYTE *)(a2 + 24) = 1;
  }
  return result;
}

__n128 sub_20AFF34EC(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 sub_20AFF3508(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 sub_20AFF3524(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

__n128 sub_20AFF3540(uint64_t a1, __n128 *a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)a3;
  a2[1].n128_u64[0] = *(_QWORD *)(a3 + 16);
  *a2 = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a3 = 0;
  a2[1].n128_u8[8] = 0;
  a2[3].n128_u8[0] = 0;
  if (*(_BYTE *)(a3 + 48))
  {
    result = *(__n128 *)(a3 + 24);
    a2[2].n128_u64[1] = *(_QWORD *)(a3 + 40);
    *(__n128 *)((char *)a2 + 24) = result;
    *(_QWORD *)(a3 + 32) = 0;
    *(_QWORD *)(a3 + 40) = 0;
    *(_QWORD *)(a3 + 24) = 0;
    a2[3].n128_u8[0] = 1;
  }
  return result;
}

__n128 sub_20AFF3590(uint64_t a1, __n128 *a2, __n128 *a3)
{
  __n128 result;

  result = *a3;
  a2[1].n128_u64[0] = a3[1].n128_u64[0];
  *a2 = result;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_20AFF35AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int128 *v4;
  unsigned __int128 v5;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 48) = 0;
  if (*(_BYTE *)(a3 + 48))
  {
    v3 = *(_QWORD *)(a3 + 16);
    *(_OWORD *)a2 = *(_OWORD *)a3;
    *(_QWORD *)(a2 + 16) = v3;
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    *(_QWORD *)a3 = 0;
    v4 = (unsigned __int128 *)(a3 + 32);
    do
      v5 = __ldaxp(v4);
    while (__stlxp(v5, v4));
    *(_OWORD *)(a2 + 32) = v5;
    *(_BYTE *)(a2 + 48) = 1;
  }
}

__n128 sub_20AFF35F4(uint64_t a1, __n128 *a2, __n128 *a3)
{
  unint64_t v3;
  __n128 result;

  v3 = a3[1].n128_u64[0];
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = v3;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_20AFF3610(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unsigned __int128 *v5;
  unsigned __int128 v6;

  *(_BYTE *)a2 = 0;
  *(_BYTE *)(a2 + 96) = 0;
  if (*(_BYTE *)(a3 + 96))
  {
    *(_BYTE *)(a2 + 24) = 0;
    if (*(_BYTE *)(a3 + 24))
    {
      v3 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v3;
      *(_QWORD *)(a3 + 8) = 0;
      *(_QWORD *)(a3 + 16) = 0;
      *(_QWORD *)a3 = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    *(_BYTE *)(a2 + 32) = 0;
    *(_BYTE *)(a2 + 80) = 0;
    if (*(_BYTE *)(a3 + 80))
    {
      v4 = *(_QWORD *)(a3 + 48);
      *(_OWORD *)(a2 + 32) = *(_OWORD *)(a3 + 32);
      *(_QWORD *)(a2 + 48) = v4;
      *(_QWORD *)(a3 + 40) = 0;
      *(_QWORD *)(a3 + 48) = 0;
      *(_QWORD *)(a3 + 32) = 0;
      v5 = (unsigned __int128 *)(a3 + 64);
      do
        v6 = __ldaxp(v5);
      while (__stlxp(v6, v5));
      *(_OWORD *)(a2 + 64) = v6;
      *(_BYTE *)(a2 + 80) = 1;
    }
    *(_BYTE *)(a2 + 96) = 1;
  }
}

__n128 sub_20AFF36A0(uint64_t a1, __n128 *a2, __n128 *a3)
{
  unint64_t v3;
  __n128 result;

  v3 = a3[1].n128_u64[0];
  result = *a3;
  *a2 = *a3;
  a2[1].n128_u64[0] = v3;
  a3->n128_u64[1] = 0;
  a3[1].n128_u64[0] = 0;
  a3->n128_u64[0] = 0;
  return result;
}

void sub_20AFF36BC(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  *a2 = *a3;
}

uint64_t sub_20AFF36C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t result;

  v3 = (_QWORD *)(a3 + 24);
  v4 = *(_QWORD *)(a3 + 24);
  if (!v4)
  {
    v3 = (_QWORD *)(a2 + 24);
    goto LABEL_5;
  }
  if (v4 != a3)
  {
    *(_QWORD *)(a2 + 24) = v4;
LABEL_5:
    *v3 = 0;
    return result;
  }
  *(_QWORD *)(a2 + 24) = a2;
  return (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v3 + 24))(*v3);
}

uint64_t sub_20AFF371C(uint64_t a1)
{
  uint64_t v2;
  uint64_t i;
  uint64_t v4;
  char v6;

  v2 = *(_QWORD *)(a1 + 8);
  for (i = *(_QWORD *)(a1 + 16); i != v2; i = *(_QWORD *)(a1 + 16))
  {
    *(_QWORD *)(a1 + 16) = i - 816;
    if (*(_BYTE *)(i - 8))
    {
      v4 = *(unsigned int *)(i - 16);
      if ((_DWORD)v4 != -1)
        ((void (*)(char *, uint64_t))off_24C3FEB80[v4])(&v6, i - 48);
      *(_DWORD *)(i - 16) = -1;
    }
    *(_QWORD *)(i - 816) = &off_24C411BF8;
    sub_20B07AE6C(i - 800);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20AFF37DC(uint64_t a1)
{
  uint64_t v3;
  uint64_t i;
  uint64_t v5;
  char v6;

  if (!*(_BYTE *)(a1 + 24))
  {
    v3 = *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8);
    for (i = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8); v3 != i; v3 += 816)
    {
      if (*(_BYTE *)(v3 + 808))
      {
        v5 = *(unsigned int *)(v3 + 800);
        if ((_DWORD)v5 != -1)
          ((void (*)(char *, uint64_t))off_24C3FEB80[v5])(&v6, v3 + 768);
        *(_DWORD *)(v3 + 800) = -1;
      }
      *(_QWORD *)v3 = &off_24C411BF8;
      sub_20B07AE6C(v3 + 16);
    }
  }
  return a1;
}

_QWORD *sub_20AFF3890(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C3FEC10;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20AFF38EC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C3FEC10;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFF3958(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C3FEC10;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_20AFF39D8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFF39EC(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24C3FEC10;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t sub_20AFF3A68(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_20AFF3AA4(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_20AFF3AF4(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v7;
  uint64_t v9;
  void *v10[2];
  char v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[2];
  char v15;
  _QWORD *v16;
  const char *v17;
  void *v18;
  const char *v19;
  const char *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  _BYTE v28[16];
  void *__p;
  char v30;
  char v31;
  void *v32;
  char v33;
  void *v34;
  char v35;
  char v36;
  char v37;
  char v38;
  _DWORD v39[6];
  int v40;
  _QWORD v41[2];
  char v42;
  _QWORD *v43;

  v7 = *(_QWORD *)(a3 + 8);
  if (v7)
  {
    v13 = *(_QWORD *)(a3 + 8);
    goto LABEL_7;
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_45;
  }
  v7 = *(_QWORD *)(a3 + 8);
  v13 = v7;
  if (v7)
    goto LABEL_7;
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
  {
LABEL_45:
    abort();
  }
  v7 = *(_QWORD *)(a3 + 8);
LABEL_7:
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v7 + 48))(v10);
  v40 = 0;
  sub_20AFF4744(v39, "while exporting data ");
  sub_20AED5838((uint64_t)&v38, (uint64_t)v39, &v13);
  v16 = v39;
  v17 = " of type ";
  v18 = v39;
  v19 = " of type ";
  v20 = " of type ";
  if (v40 == -1)
    sub_20AECFAB8();
  v41[0] = &v16;
  ((void (*)(_QWORD *, _DWORD *))off_24C3FECB0[v40])(v41, v39);
  v41[0] = v10;
  v41[1] = &v12;
  v16 = v39;
  v17 = "{";
  v18 = v39;
  v19 = "{";
  v20 = "{";
  if (v40 == -1)
    goto LABEL_40;
  v43 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C3FECC8[v40])(&v43, v39);
  LOBYTE(v16) = 1;
  v17 = (const char *)v39;
  v18 = &v42;
  sub_20AFF4834((uint64_t)v41, (uint64_t)&v16);
  v16 = v39;
  v17 = "}";
  v18 = v39;
  v19 = "}";
  v20 = "}";
  if (v40 == -1)
LABEL_40:
    sub_20AECFAB8();
  v43 = &v16;
  ((void (*)(_QWORD **, _DWORD *))off_24C3FECC8[v40])(&v43, v39);
  v16 = v39;
  v17 = " to directory ";
  v18 = v39;
  v19 = " to directory ";
  v20 = " to directory ";
  if (v40 == -1)
    sub_20AECFAB8();
  v41[0] = &v16;
  ((void (*)(_QWORD *, _DWORD *))off_24C3FECF8[v40])(v41, v39);
  sub_20AFF447C((uint64_t)&v16, (uint64_t)v39, a2);
  if (v40 == -1)
    sub_20AECFAB8();
  v16 = v41;
  ((void (*)(void **__return_ptr, _QWORD **, _DWORD *))off_24C3FED10[v40])(v14, &v16, v39);
  if (v40 != -1)
    ((void (*)(_QWORD **, _DWORD *))off_24C3FEC80[v40])(&v16, v39);
  sub_20AFF4064(a4, v14, (uint64_t)&v16);
  sub_20AFB1FC8((unsigned __int8 *)&v16, (uint64_t)v28);
  v9 = *(_QWORD *)(a1 + 32);
  if (!v9)
    sub_20AECABA4();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v9 + 48))(v9, v28);
  if (v37)
  {
    if (!v36)
      goto LABEL_19;
    if (v35 < 0)
    {
      operator delete(v34);
      if ((v33 & 0x80000000) == 0)
      {
LABEL_19:
        if (!v31)
          goto LABEL_22;
LABEL_20:
        if (v30 < 0)
          operator delete(__p);
        goto LABEL_22;
      }
    }
    else if ((v33 & 0x80000000) == 0)
    {
      goto LABEL_19;
    }
    operator delete(v32);
    if (!v31)
      goto LABEL_22;
    goto LABEL_20;
  }
LABEL_22:
  if (!v27)
    goto LABEL_29;
  if (v26)
  {
    if ((v25 & 0x80000000) == 0)
    {
      if ((v23 & 0x80000000) == 0)
        goto LABEL_26;
LABEL_38:
      operator delete(v22);
      if (!v21)
        goto LABEL_29;
      goto LABEL_27;
    }
    operator delete(v24);
    if (v23 < 0)
      goto LABEL_38;
  }
LABEL_26:
  if (!v21)
    goto LABEL_29;
LABEL_27:
  if (SHIBYTE(v20) < 0)
    operator delete(v18);
LABEL_29:
  if ((v15 & 0x80000000) == 0)
  {
    if ((v11 & 0x80000000) == 0)
      return;
LABEL_33:
    operator delete(v10[0]);
    return;
  }
  operator delete(v14[0]);
  if (v11 < 0)
    goto LABEL_33;
}

void sub_20AFF3EE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45,char a46,int a47,char a48)
{
  if (a48)
  {
    if (a46)
    {
      if (a45 < 0)
        operator delete(__p);
      if (a38 < 0)
        operator delete(a33);
    }
    if (a32)
    {
      if (a31 < 0)
        operator delete(a26);
    }
  }
  if (a23 < 0)
  {
    operator delete(a18);
    if ((a15 & 0x80000000) == 0)
LABEL_12:
      _Unwind_Resume(a1);
  }
  else if ((a15 & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFF3FEC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger33CreateDestinationWithFileExporterERKNSt3__14__fs10filesystem4pathENS2_8"
                     "optionalINS1_17FileExportOptionsEEENS8_INS2_8functionIFvRKNS_3esn5ErrorEEEEEENSC_11OptionalRefINS_3"
                     "kit2fs11IFilesystemEEEENK3$_0clEvEUlS7_RKNSK_3viz10SharedDataERKNSC_6ErrorCINSP_11IOErrorCodeEEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger33CreateDestinationWithFileExporterERKNSt3__14__fs10filesystem"
                                "4pathENS2_8optionalINS1_17FileExportOptionsEEENS8_INS2_8functionIFvRKNS_3esn5ErrorEEEEEE"
                                "NSC_11OptionalRefINS_3kit2fs11IFilesystemEEEENK3$_0clEvEUlS7_RKNSK_3viz10SharedDataERKNS"
                                "C_6ErrorCINSP_11IOErrorCodeEEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger33CreateDestinationWithFileExporterERKNSt3__14__fs10filesystem4pathENS2_8optionalINS1_17FileExportOptionsEEENS8_INS2_8functionIFvRKNS_3esn5ErrorEEEEEENSC_11OptionalRefINS_3kit2fs11IFilesystemEEEENK3$_0clEvEUlS7_RKNSK_3viz10SharedDataERKNSC_6ErrorCINSP_11IOErrorCodeEEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger33CreateDestinationWithFileExporterERKNSt3__14__fs10filesystem4pathENS2_8optionalINS1_17FileExportOptionsEEENS8_INS2_8functionIFvRKNS_3esn5ErrorEEEEEENSC_11OptionalRefINS_3kit2fs11IFilesystemEEEENK3$_0clEvEUlS7_RKNSK_3viz10SharedDataERKNSC_6ErrorCINSP_11IOErrorCodeEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFF4058()
{
  return &unk_24C3FED28;
}

void sub_20AFF4064(char *a1@<X0>, void **a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  void *v8;
  char v9;
  uint64_t v10;
  char v11;
  int v12;
  void *v13;
  int v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  char v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  void *v26[2];
  char v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  void *__p;
  __int128 v35;
  unsigned __int8 v36;
  void *v37;
  __int128 v38;
  uint64_t v39;
  void *v40;
  __int128 v41;
  unsigned __int8 v42;
  _QWORD v43[2];
  _QWORD v44[2];
  _QWORD v45[3];

  v45[2] = *MEMORY[0x24BDAC8D0];
  v5 = *(_QWORD *)a1;
  v6 = *((_QWORD *)a1 + 1);
  LOBYTE(v18) = 0;
  v20 = 0;
  LOBYTE(v21) = 0;
  v25 = 0;
  sub_20AFF435C(a1 + 16, (uint64_t)&v18, (uint64_t)v26);
  sub_20B528F00((uint64_t)v26, a2, (uint64_t)&__p);
  v12 = v36;
  if (v36)
  {
    v13 = __p;
    v45[0] = v35;
    *(_QWORD *)((char *)v45 + 7) = *(_QWORD *)((char *)&v35 + 7);
    v7 = HIBYTE(v35);
    v35 = 0uLL;
    __p = 0;
    v14 = v42;
    if (v42)
      goto LABEL_3;
  }
  else
  {
    v13 = 0;
    v14 = v42;
    if (v42)
    {
LABEL_3:
      v15 = v37;
      v44[0] = v38;
      *(_QWORD *)((char *)v44 + 7) = *(_QWORD *)((char *)&v38 + 7);
      v9 = HIBYTE(v38);
      v37 = 0;
      v38 = 0uLL;
      v10 = v39;
      v8 = v40;
      v43[0] = v41;
      *(_QWORD *)((char *)v43 + 7) = *(_QWORD *)((char *)&v41 + 7);
      v11 = HIBYTE(v41);
      v40 = 0;
      v41 = 0uLL;
      *(_QWORD *)a3 = v5;
      *(_QWORD *)(a3 + 8) = v6;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      *(_BYTE *)(a3 + 40) = 0;
      if (!v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  v15 = 0;
  *(_QWORD *)a3 = v5;
  *(_QWORD *)(a3 + 8) = v6;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  *(_BYTE *)(a3 + 40) = 0;
  if (v12)
  {
LABEL_4:
    v16 = v45[0];
    *(_QWORD *)(a3 + 16) = v13;
    *(_QWORD *)(a3 + 24) = v16;
    *(_QWORD *)(a3 + 31) = *(_QWORD *)((char *)v45 + 7);
    *(_BYTE *)(a3 + 39) = v7;
    v45[0] = 0;
    *(_QWORD *)((char *)v45 + 7) = 0;
    *(_BYTE *)(a3 + 40) = 1;
    v13 = 0;
    v7 = 0;
  }
LABEL_5:
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v14)
  {
    v17 = v44[0];
    *(_QWORD *)(a3 + 48) = v15;
    *(_QWORD *)(a3 + 56) = v17;
    *(_QWORD *)(a3 + 63) = *(_QWORD *)((char *)v44 + 7);
    *(_BYTE *)(a3 + 71) = v9;
    v44[0] = 0;
    *(_QWORD *)((char *)v44 + 7) = 0;
    *(_QWORD *)(a3 + 72) = v10;
    *(_QWORD *)(a3 + 80) = v8;
    *(_QWORD *)(a3 + 88) = v43[0];
    *(_QWORD *)(a3 + 95) = *(_QWORD *)((char *)v43 + 7);
    *(_BYTE *)(a3 + 103) = v11;
    v43[0] = 0;
    *(_QWORD *)((char *)v43 + 7) = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  if (v12 && v7 < 0)
  {
    operator delete(v13);
    v14 = v42;
  }
  if (v14)
  {
    if ((SHIBYTE(v41) & 0x80000000) == 0)
    {
      if ((SHIBYTE(v38) & 0x80000000) == 0)
        goto LABEL_13;
LABEL_33:
      operator delete(v37);
      if (!v36)
        goto LABEL_16;
      goto LABEL_14;
    }
    operator delete(v40);
    if (SHIBYTE(v38) < 0)
      goto LABEL_33;
  }
LABEL_13:
  if (!v36)
    goto LABEL_16;
LABEL_14:
  if (SHIBYTE(v35) < 0)
    operator delete(__p);
LABEL_16:
  if (!v33)
    goto LABEL_19;
  if ((v32 & 0x80000000) == 0)
  {
    if ((v30 & 0x80000000) == 0)
      goto LABEL_19;
LABEL_36:
    operator delete(v29);
    if (!v28)
      goto LABEL_22;
    goto LABEL_20;
  }
  operator delete(v31);
  if (v30 < 0)
    goto LABEL_36;
LABEL_19:
  if (!v28)
    goto LABEL_22;
LABEL_20:
  if (v27 < 0)
    operator delete(v26[0]);
LABEL_22:
  if (!v25)
    goto LABEL_25;
  if (v24 < 0)
  {
    operator delete(v23);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_25:
      if (!v20)
        return;
      goto LABEL_26;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_25;
  }
  operator delete(v21);
  if (!v20)
    return;
LABEL_26:
  if (v19 < 0)
    operator delete(v18);
}

void sub_20AFF432C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  sub_20AFF2FD8((uint64_t)va1);
  sub_20AFF2FD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFF4348(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AFF2FD8((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20AFF435C@<X0>(char *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  char *v5;
  uint64_t v6;

  v4 = result[96];
  *(_BYTE *)a3 = 0;
  *(_BYTE *)(a3 + 24) = 0;
  if (v4)
  {
    v5 = result;
    if (result[24])
    {
      if (result[23] < 0)
      {
        sub_20AEC60F4((_BYTE *)a3, *(void **)result, *((_QWORD *)result + 1));
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)result;
        *(_QWORD *)(a3 + 16) = *((_QWORD *)result + 2);
      }
      *(_BYTE *)(a3 + 24) = 1;
    }
    return sub_20AECEC88((char *)(a3 + 32), (__int128 *)v5 + 2);
  }
  else
  {
    if (*(_BYTE *)(a2 + 24))
    {
      *(_OWORD *)a3 = *(_OWORD *)a2;
      *(_QWORD *)(a3 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a3 + 24) = 1;
    }
    *(_BYTE *)(a3 + 32) = 0;
    *(_BYTE *)(a3 + 88) = 0;
    if (*(_BYTE *)(a2 + 88))
    {
      v6 = *(_QWORD *)(a2 + 56);
      *(_QWORD *)(a3 + 48) = *(_QWORD *)(a2 + 48);
      *(_OWORD *)(a3 + 32) = *(_OWORD *)(a2 + 32);
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a3 + 56) = v6;
      *(_OWORD *)(a3 + 64) = *(_OWORD *)(a2 + 64);
      *(_QWORD *)(a3 + 80) = *(_QWORD *)(a2 + 80);
      *(_QWORD *)(a2 + 64) = 0;
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      *(_BYTE *)(a3 + 88) = 1;
    }
  }
  return result;
}

void sub_20AFF4454(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AFF447C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _BYTE *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v24[0] = v5;
  v6 = *(unsigned __int8 *)(a3 + 23);
  if ((v6 & 0x80u) == 0)
    v7 = (_BYTE *)a3;
  else
    v7 = *(_BYTE **)a3;
  if ((v6 & 0x80u) != 0)
    v6 = *(_QWORD *)(a3 + 8);
  sub_20AFF4A04((_QWORD *)(v5 + 16), v7, &v7[v6], 0x22u, 0x5Cu);
  v8 = v24[0];
  v9 = *(_DWORD *)(v24[0] + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v24[0] + 112);
    v13 = *(_QWORD *)(v24[0] + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v24[0] + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v8 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_27;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v23) = 0;
      v11 = __dst;
      goto LABEL_19;
    }
    v14 = *(const void **)(v24[0] + 40);
    v10 = *(_QWORD *)(v24[0] + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_27:
      sub_20AEC0138();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v23 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_18;
  }
  HIBYTE(v23) = v10;
  v11 = __dst;
  if (v10)
LABEL_18:
    memmove(v11, v14, v10);
LABEL_19:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v24[0];
  if (v24[0])
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v20;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v17 + 128);
    MEMORY[0x20BD3583C](v17, 0x10B2C40EED050F3);
  }
  v24[0] = a2;
  v24[1] = __dst;
  v24[2] = a2;
  v24[3] = __dst;
  v24[4] = __dst;
  v21 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v21 == -1)
    sub_20AECFAB8();
  v25 = v24;
  ((void (*)(_QWORD **, uint64_t))off_24C3FEC98[v21])(&v25, a2);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
}

void sub_20AFF46F0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20AFF4714(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20AFF4730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20AFF4744(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C3FEC80[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20AFF4834(uint64_t a1, uint64_t a2)
{
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  uint64_t v9;
  const char *v10;
  const char *v11;
  uint64_t *v12;

  v4 = *(const char **)a1;
  if (!*(_BYTE *)a2)
  {
    v7 = *(_QWORD *)(a2 + 8);
    v8 = ",";
    v9 = v7;
    v10 = ",";
    v11 = ",";
    v5 = *(unsigned int *)(v7 + 24);
    if ((_DWORD)v5 == -1)
      goto LABEL_6;
    v12 = &v7;
    ((void (*)(uint64_t **))off_24C3FECC8[v5])(&v12);
  }
  *(_BYTE *)a2 = 0;
  v7 = *(_QWORD *)(a2 + 8);
  v8 = v4;
  v9 = v7;
  v10 = v4;
  v11 = v4;
  v6 = *(unsigned int *)(v7 + 24);
  if ((_DWORD)v6 == -1)
LABEL_6:
    sub_20AECFAB8();
  v12 = &v7;
  ((void (*)(uint64_t **))off_24C3FECE0[v6])(&v12);
  sub_20AFF48FC(a2, *(unsigned int **)(a1 + 8));
}

void sub_20AFF48FC(uint64_t a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string v7;
  uint64_t v8;
  std::string *v9;
  uint64_t v10;
  std::string *v11;
  std::string *v12;
  uint64_t *v13;

  if (!*(_BYTE *)a1)
  {
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (std::string *)",";
    v10 = v8;
    v11 = (std::string *)",";
    v12 = (std::string *)",";
    v4 = *(unsigned int *)(v8 + 24);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v7.__r_.__value_.__r.__words[0] = (std::string::size_type)&v8;
    ((void (*)(std::string *))off_24C3FECC8[v4])(&v7);
  }
  *(_BYTE *)a1 = 0;
  v5 = *(_QWORD *)(a1 + 8);
  std::to_string(&v7, *a2);
  v8 = v5;
  v9 = &v7;
  v10 = v5;
  v11 = &v7;
  v12 = &v7;
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6 == -1)
    sub_20AECFAB8();
  v13 = &v8;
  ((void (*)(uint64_t **, uint64_t))off_24C3FEC98[v6])(&v13, v5);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_20AFF49E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20AFF4A04(_QWORD *a1, _BYTE *a2, _BYTE *a3, unsigned __int8 __c, unsigned __int8 a5)
{
  int v10;
  std::string *v11;
  std::string::size_type size;
  _QWORD *v13;
  std::string v15;

  memset(&v15, 0, sizeof(v15));
  std::string::push_back(&v15, __c);
  for (; a2 != a3; ++a2)
  {
    v10 = *a2;
    if (v10 == a5 || v10 == __c)
    {
      std::string::push_back(&v15, a5);
      LOBYTE(v10) = *a2;
    }
    std::string::push_back(&v15, v10);
  }
  std::string::push_back(&v15, __c);
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v11 = &v15;
  else
    v11 = (std::string *)v15.__r_.__value_.__r.__words[0];
  if ((v15.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v15.__r_.__value_.__r.__words[2]);
  else
    size = v15.__r_.__value_.__l.__size_;
  v13 = sub_20AEC01D0(a1, (uint64_t)v11, size);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v15.__r_.__value_.__l.__data_);
  return v13;
}

void sub_20AFF4AE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AFF4B08(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  _DWORD *v4;
  uint64_t v5;
  char v7;

  if (*(_BYTE *)(a1 + 24))
  {
    v2 = *(_DWORD **)a1;
    if (*(_QWORD *)a1)
    {
      v3 = *(_DWORD **)(a1 + 8);
      v4 = *(_DWORD **)a1;
      if (v3 != v2)
      {
        do
        {
          if (*((_BYTE *)v3 - 8))
          {
            v5 = *(v3 - 4);
            if ((_DWORD)v5 != -1)
              ((void (*)(char *, _DWORD *))off_24C3FEB80[v5])(&v7, v3 - 12);
            *(v3 - 4) = -1;
          }
          *((_QWORD *)v3 - 102) = &off_24C411BF8;
          sub_20B07AE6C((uint64_t)(v3 - 200));
          v3 -= 204;
        }
        while (v3 != v2);
        v4 = *(_DWORD **)a1;
      }
      *(_QWORD *)(a1 + 8) = v2;
      operator delete(v4);
    }
  }
  return a1;
}

uint64_t sub_20AFF4BD8(uint64_t a1)
{
  unsigned int *v2;
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;

  v2 = *(unsigned int **)(a1 + 24);
  if (v2)
  {
    v3 = v2 + 2;
    do
    {
      v4 = __ldaxr(v3);
      v5 = v4 - 1;
    }
    while (__stlxr(v5, v3));
    if (!v5)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 16))(v2);
      v6 = v2 + 3;
      do
      {
        v7 = __ldaxr(v6);
        v8 = v7 - 1;
      }
      while (__stlxr(v8, v6));
      if (!v8)
        (*(void (**)(unsigned int *))(*(_QWORD *)v2 + 24))(v2);
    }
  }
  v9 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v9)
    return a1;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (v11)
    return a1;
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  return a1;
}

_QWORD *sub_20AFF4C9C(_QWORD *a1, _QWORD *a2, unint64_t a3)
{
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3)
  {
    if (a3 >> 60)
      sub_20AEC60B8();
    v5 = 2 * a3;
    v6 = operator new(16 * a3);
    *a1 = v6;
    a1[1] = v6;
    a1[2] = &v6[v5];
    v7 = &a2[v5];
    do
    {
      v8 = a2[1];
      *v6 = *a2;
      v6[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      a2 += 2;
      v6 += 2;
    }
    while (a2 != v7);
    a1[1] = v6;
  }
  return a1;
}

void sub_20AFF4D48(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AFF4DC4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FED48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20AFF4DD4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FED48;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFF4E0C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C3FED98;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20AFF4E68(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C3FED98;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFF4ED4(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C3FED98;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_20AFF4F54(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFF4F68(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24C3FED98;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t sub_20AFF4FE4(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_20AFF5020(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_20AFF5070(uint64_t a1, char *a2)
{
  uint64_t v3;
  void *v4[4];
  unsigned __int8 v5[16];
  void *__p;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  _BYTE v15[16];
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24;

  HIBYTE(v4[2]) = 20;
  strcpy((char *)v4, "while importing data");
  sub_20AFF4064(a2, v4, (uint64_t)v5);
  sub_20AFB1FC8(v5, (uint64_t)v15);
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_20AECABA4();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 48))(v3, v15);
  if (v24)
  {
    if (!v23)
      goto LABEL_6;
    if (v22 < 0)
    {
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_6:
        if (!v18)
          goto LABEL_9;
LABEL_7:
        if (v17 < 0)
          operator delete(v16);
        goto LABEL_9;
      }
    }
    else if ((v20 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v19);
    if (!v18)
      goto LABEL_9;
    goto LABEL_7;
  }
LABEL_9:
  if (!v14)
    goto LABEL_16;
  if (v13)
  {
    if ((v12 & 0x80000000) == 0)
    {
      if ((v10 & 0x80000000) == 0)
        goto LABEL_13;
LABEL_22:
      operator delete(v9);
      if (!v8)
        goto LABEL_16;
      goto LABEL_14;
    }
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_22;
  }
LABEL_13:
  if (!v8)
    goto LABEL_16;
LABEL_14:
  if (v7 < 0)
    operator delete(__p);
LABEL_16:
  if (SHIBYTE(v4[2]) < 0)
    operator delete(v4[0]);
}

void sub_20AFF51D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  if ((_BYTE)a40)
  {
    if (a38)
    {
      if (a37 < 0)
        operator delete(__p);
      if (a30 < 0)
        operator delete(a25);
    }
    if (a24 && a23 < 0)
      operator delete(a18);
  }
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AFF5290(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger12FileImporter6CreateERKNSt3__14__fs10filesystem4pathENS3_8optionalINS1_1"
                     "7FileImportOptionsEEENS9_INS3_8functionIFvRKNS_3esn5ErrorEEEEEERKNS_3kit2fs11IFilesystemEENK3$_0clE"
                     "vEUlRKNSD_6ErrorCINSK_3viz11IOErrorCodeEEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger12FileImporter6CreateERKNSt3__14__fs10filesystem4pathENS3_8opt"
                                "ionalINS1_17FileImportOptionsEEENS9_INS3_8functionIFvRKNS_3esn5ErrorEEEEEERKNS_3kit2fs11"
                                "IFilesystemEENK3$_0clEvEUlRKNSD_6ErrorCINSK_3viz11IOErrorCodeEEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger12FileImporter6CreateERKNSt3__14__fs10filesystem4pathENS3_8optionalINS1_17FileImportOptionsEEENS9_INS3_8functionIFvRKNS_3esn5ErrorEEEEEERKNS_3kit2fs11IFilesystemEENK3$_0clEvEUlRKNSD_6ErrorCINSK_3viz11IOErrorCodeEEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger12FileImporter6CreateERKNSt3__14__fs10filesystem4pathENS3_8optionalINS1_17FileImportOptionsEEENS9_INS3_8functionIFvRKNS_3esn5ErrorEEEEEERKNS_3kit2fs11IFilesystemEENK3$_0clEvEUlRKNSD_6ErrorCINSK_3viz11IOErrorCodeEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFF52FC()
{
  return &unk_24C3FEE08;
}

_QWORD *sub_20AFF5308(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD **v8;
  _QWORD *v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21[8];
  _QWORD **v22;
  uint64_t *v23;

  v4 = *a1;
  if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
    v5 = *(_QWORD ***)(a2 + 8);
    if (*(_BYTE *)(v4 + 24))
      goto LABEL_3;
LABEL_7:
    sub_20AEC01D0(*v5, (uint64_t)"nullopt", 7);
    v7 = a1[1];
    if (!*(_BYTE *)a2)
      goto LABEL_17;
    goto LABEL_8;
  }
  sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v5 = *(_QWORD ***)(a2 + 8);
  if (!*(_BYTE *)(v4 + 24))
    goto LABEL_7;
LABEL_3:
  v6 = *v5;
  if ((uint64_t)(*(_QWORD *)(v4 + 8) - *(_QWORD *)v4) <= 815)
  {
    sub_20AEC01D0(v6, (uint64_t)"{}", 2);
    v7 = a1[1];
    if (!*(_BYTE *)a2)
      goto LABEL_17;
LABEL_8:
    *(_BYTE *)a2 = 0;
    v8 = *(_QWORD ***)(a2 + 8);
    if (!*(_BYTE *)(v7 + 16))
      goto LABEL_18;
LABEL_9:
    sub_20AEC01D0(*v8, (uint64_t)"{", 1);
    v21[0] = 1;
    v22 = v8;
    v23 = &v18;
    sub_20AFF578C((uint64_t)v21, v7);
    sub_20AEC01D0(*v8, (uint64_t)"}", 1);
    v9 = (_QWORD *)a1[2];
    if (*(_BYTE *)a2)
      goto LABEL_11;
    goto LABEL_10;
  }
  sub_20AEC01D0(v6, (uint64_t)"{", 1);
  v13 = *(_QWORD *)v4 + 768;
  v18 = *(_QWORD *)v4;
  v12 = v18;
  v19 = v13;
  sub_20AEC01D0(*v5, (uint64_t)"{", 1);
  v21[0] = 1;
  v22 = v5;
  v23 = (uint64_t *)&v20;
  sub_20AFF563C(&v18, (uint64_t)v21);
  sub_20AEC01D0(*v5, (uint64_t)"}", 1);
  v14 = *(_QWORD *)(v4 + 8);
  v15 = v12 + 816;
  if (v12 + 816 != v14)
  {
    v16 = v12 + 1584;
    do
    {
      sub_20AEC01D0(*v5, (uint64_t)",", 1);
      v18 = v16 - 768;
      v19 = v16;
      sub_20AEC01D0(*v5, (uint64_t)"{", 1);
      v21[0] = 1;
      v22 = v5;
      v23 = (uint64_t *)&v20;
      sub_20AFF563C(&v18, (uint64_t)v21);
      sub_20AEC01D0(*v5, (uint64_t)"}", 1);
      v15 += 816;
      v16 += 816;
    }
    while (v15 != v14);
  }
  sub_20AEC01D0(*v5, (uint64_t)"}", 1);
  v7 = a1[1];
  if (*(_BYTE *)a2)
    goto LABEL_8;
LABEL_17:
  sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v8 = *(_QWORD ***)(a2 + 8);
  if (*(_BYTE *)(v7 + 16))
    goto LABEL_9;
LABEL_18:
  sub_20AEC01D0(*v8, (uint64_t)"nullopt", 7);
  v9 = (_QWORD *)a1[2];
  if (!*(_BYTE *)a2)
LABEL_10:
    sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
LABEL_11:
  *(_BYTE *)a2 = 0;
  switch(*v9)
  {
    case 0:
      v10 = "Default";
      v11 = 7;
      break;
    case 1:
      v10 = "FlushSequenceAndDataFilesLazily";
      v11 = 31;
      break;
    case 2:
      v10 = "Flush";
      v11 = 5;
      break;
    case 3:
      v10 = "FlushSequenceAndDataFilesImmediately";
      v11 = 36;
      break;
    default:
      v10 = "invalid FileBehavior value";
      v11 = 26;
      break;
  }
  return sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)v10, v11);
}

_QWORD *sub_20AFF563C(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  char v9;
  _QWORD v10[2];
  _QWORD *v11;

  v4 = *a1;
  if (!*(_BYTE *)a2)
    sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  sub_20B2100E8(**(_QWORD ***)(a2 + 8), v4);
  v5 = a1[1];
  if (!*(_BYTE *)a2)
  {
    sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
    *(_BYTE *)a2 = 0;
    v6 = *(_QWORD ***)(a2 + 8);
    if (*(_BYTE *)(v5 + 40))
      goto LABEL_5;
    return sub_20AEC01D0(*v6, (uint64_t)"nullopt", 7);
  }
  *(_BYTE *)a2 = 0;
  v6 = *(_QWORD ***)(a2 + 8);
  if (!*(_BYTE *)(v5 + 40))
    return sub_20AEC01D0(*v6, (uint64_t)"nullopt", 7);
LABEL_5:
  v10[0] = &v9;
  v10[1] = v6;
  v7 = *(unsigned int *)(v5 + 32);
  if ((_DWORD)v7 == -1)
    sub_20AECFAB8();
  v11 = v10;
  return (_QWORD *)((uint64_t (*)(_QWORD **, uint64_t))off_24C3FEE18[v7])(&v11, v5);
}

_QWORD *sub_20AFF5744(uint64_t a1, uint64_t a2)
{
  return sub_20B1E6520(**(_QWORD ***)(*(_QWORD *)a1 + 8), a2);
}

_QWORD *sub_20AFF5754(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  const char *v3;
  _QWORD *v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a2 + 24);
  if (v2)
    v3 = "f(){*}";
  else
    v3 = "f(){nullptr}";
  v4 = **(_QWORD ***)(*(_QWORD *)a1 + 8);
  if (v2)
    v5 = 6;
  else
    v5 = 12;
  return sub_20AEC01D0(v4, (uint64_t)v3, v5);
}

void sub_20AFF578C(uint64_t a1, uint64_t a2)
{
  _QWORD **v4;
  std::string *v5;
  std::string::size_type size;
  std::string v7;

  if (!*(_BYTE *)a1)
  {
    sub_20AEC01D0(**(_QWORD ***)(a1 + 8), (uint64_t)",", 1);
    *(_BYTE *)a1 = 0;
    v4 = *(_QWORD ***)(a1 + 8);
    if (*(_BYTE *)(a2 + 8))
      goto LABEL_3;
LABEL_12:
    sub_20AEC01D0(*v4, (uint64_t)"nullopt", 7);
    return;
  }
  *(_BYTE *)a1 = 0;
  v4 = *(_QWORD ***)(a1 + 8);
  if (!*(_BYTE *)(a2 + 8))
    goto LABEL_12;
LABEL_3:
  std::to_string(&v7, *(_QWORD *)a2);
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v5 = &v7;
  else
    v5 = (std::string *)v7.__r_.__value_.__r.__words[0];
  if ((v7.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v7.__r_.__value_.__r.__words[2]);
  else
    size = v7.__r_.__value_.__l.__size_;
  sub_20AEC01D0(*v4, (uint64_t)v5, size);
  if (SHIBYTE(v7.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v7.__r_.__value_.__l.__data_);
}

void sub_20AFF5864(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20AFF5880(uint64_t a1, _QWORD **a2, uint64_t *a3)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t i;

  if (!*((_BYTE *)a3 + 24))
    return sub_20AEC01D0(*a2, (uint64_t)"nullopt", 7);
  v5 = *a2;
  if (a3[1] - *a3 <= 767)
    return sub_20AEC01D0(v5, (uint64_t)"{}", 2);
  sub_20AEC01D0(v5, (uint64_t)"{", 1);
  v7 = *a3;
  sub_20B2100E8(*a2, *a3);
  v8 = a3[1];
  for (i = v7 + 768; i != v8; i += 768)
  {
    sub_20AEC01D0(*a2, (uint64_t)",", 1);
    sub_20B2100E8(*a2, i);
  }
  return sub_20AEC01D0(*a2, (uint64_t)"}", 1);
}

_QWORD *sub_20AFF5970(uint64_t a1, _QWORD **a2, uint64_t *a3)
{
  _QWORD *v3;
  const char *v4;
  uint64_t v5;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  const char *v15;
  uint64_t v16;

  v3 = *a2;
  if (a3[1] - *a3 > 799)
  {
    sub_20AEC01D0(v3, (uint64_t)"{", 1);
    v8 = *a3;
    sub_20AEC01D0(*a2, (uint64_t)"{", 1);
    sub_20B2100E8(*a2, v8);
    sub_20AEC01D0(*a2, (uint64_t)",", 1);
    v9 = *(_QWORD *)(v8 + 792);
    if (v9)
      v10 = "f(){*}";
    else
      v10 = "f(){nullptr}";
    if (v9)
      v11 = 6;
    else
      v11 = 12;
    sub_20AEC01D0(*a2, (uint64_t)v10, v11);
    sub_20AEC01D0(*a2, (uint64_t)"}", 1);
    v12 = a3[1];
    for (i = v8 + 800; i != v12; i += 800)
    {
      sub_20AEC01D0(*a2, (uint64_t)",", 1);
      sub_20AEC01D0(*a2, (uint64_t)"{", 1);
      sub_20B2100E8(*a2, i);
      sub_20AEC01D0(*a2, (uint64_t)",", 1);
      v14 = *(_QWORD *)(i + 792);
      if (v14)
        v15 = "f(){*}";
      else
        v15 = "f(){nullptr}";
      if (v14)
        v16 = 6;
      else
        v16 = 12;
      sub_20AEC01D0(*a2, (uint64_t)v15, v16);
      sub_20AEC01D0(*a2, (uint64_t)"}", 1);
    }
    v3 = *a2;
    v4 = "}";
    v5 = 1;
  }
  else
  {
    v4 = "{}";
    v5 = 2;
  }
  return sub_20AEC01D0(v3, (uint64_t)v4, v5);
}

void sub_20AFF5B10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FEE38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20AFF5B20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3FEE38;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20AFF5B50(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  v2 = *(_QWORD *)(a1 + 32);
  if (v2)
  {
    if (*(_BYTE *)(v2 + 112))
      (*(void (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(v2 + 288) + 8) + 24))(*(_QWORD *)(*(_QWORD *)(v2 + 288) + 8));
    if (*(_BYTE *)(v2 + 456))
      sub_20B1F7338(v2 + 416, 0, 0);
  }
  v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20AFF5BF0(uint64_t a1, uint64_t a2)
{
  unsigned __int8 v3;
  unsigned __int8 v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  const std::error_category *v16;
  uint64_t v17;
  int v18;
  _UNKNOWN **v19;
  void *v20[2];
  char v21;
  char v22;
  void *v23;
  char v24;
  void *v25;
  char v26;
  char v27;
  char v28;
  void *__dst[2];
  char v30;
  char v31;
  void *v32;
  char v33;
  void *__p;
  char v35;
  char v36;
  char v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  unsigned __int8 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  char v47;
  char v48;

  if (*(_BYTE *)(a2 + 120))
  {
    *(_BYTE *)(a1 + 120) = 1;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
  }
  else
  {
    v3 = atomic_load((unsigned __int8 *)&qword_25463AE10);
    if ((v3 & 1) == 0)
    {
      v14 = a2;
      v15 = __cxa_guard_acquire(&qword_25463AE10);
      a2 = v14;
      if (v15)
      {
        v16 = std::generic_category();
        qword_25463AE30 = 22;
        qword_25463AE38 = (uint64_t)v16;
        __cxa_guard_release(&qword_25463AE10);
        a2 = v14;
      }
    }
    if (*(_QWORD *)(a2 + 8) == qword_25463AE38 && *(_DWORD *)a2 == (_DWORD)qword_25463AE30)
    {
      sub_20AECEBD0(__dst, (__int128 *)(a2 + 16));
      sub_20AECCC3C(0xAu, (__int128 *)__dst, (uint64_t)&v38);
      *(_OWORD *)a1 = v38;
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v48)
      {
        *(_BYTE *)(a1 + 40) = 0;
        v8 = v41;
        if (v41)
        {
          *(_OWORD *)(a1 + 16) = v39;
          *(_QWORD *)(a1 + 32) = v40;
          v40 = 0;
          v39 = 0uLL;
          *(_BYTE *)(a1 + 40) = 1;
        }
        *(_BYTE *)(a1 + 48) = 0;
        *(_BYTE *)(a1 + 104) = 0;
        if (v47)
        {
          v9 = v44;
          *(_QWORD *)(a1 + 64) = v43;
          *(_OWORD *)(a1 + 48) = v42;
          v42 = 0uLL;
          *(_QWORD *)(a1 + 72) = v9;
          *(_OWORD *)(a1 + 80) = v45;
          *(_QWORD *)(a1 + 96) = v46;
          v43 = 0;
          v45 = 0uLL;
          v46 = 0;
          *(_BYTE *)(a1 + 104) = 1;
        }
        *(_BYTE *)(a1 + 112) = 1;
        *(_BYTE *)(a1 + 120) = 0;
        if (v8 && SHIBYTE(v40) < 0)
          operator delete((void *)v39);
      }
      else
      {
        *(_BYTE *)(a1 + 120) = 0;
      }
      if (v37)
      {
        if (v36)
        {
          if (v35 < 0)
            operator delete(__p);
          if (v33 < 0)
            operator delete(v32);
        }
        if (v31 && v30 < 0)
          operator delete(__dst[0]);
      }
    }
    else
    {
      v5 = atomic_load((unsigned __int8 *)&qword_25463AE18);
      if ((v5 & 1) == 0)
      {
        v17 = a2;
        v18 = __cxa_guard_acquire(&qword_25463AE18);
        a2 = v17;
        if (v18)
        {
          v19 = sub_20B1E193C();
          qword_25463AE40 = 1;
          qword_25463AE48 = (uint64_t)v19;
          __cxa_guard_release(&qword_25463AE18);
          a2 = v17;
        }
      }
      v6 = *(_QWORD *)(a2 + 8);
      if (qword_25463AE48 == v6)
      {
        if (*(_DWORD *)a2 <= 0xDu)
        {
          if ((*(_DWORD *)a2 - 1) > 0xCu)
            v10 = 0;
          else
            v10 = dword_20B5C3BF8[(char)(*(_DWORD *)a2 - 1)];
        }
        else
        {
          v10 = 1;
        }
        sub_20AECEBD0(v20, (__int128 *)(a2 + 16));
        sub_20AECCC3C(v10, (__int128 *)v20, (uint64_t)&v38);
        *(_OWORD *)a1 = v38;
        *(_BYTE *)(a1 + 16) = 0;
        *(_BYTE *)(a1 + 112) = 0;
        if (v48)
        {
          *(_BYTE *)(a1 + 40) = 0;
          v12 = v41;
          if (v41)
          {
            *(_OWORD *)(a1 + 16) = v39;
            *(_QWORD *)(a1 + 32) = v40;
            v40 = 0;
            v39 = 0uLL;
            *(_BYTE *)(a1 + 40) = 1;
          }
          *(_BYTE *)(a1 + 48) = 0;
          *(_BYTE *)(a1 + 104) = 0;
          if (v47)
          {
            v13 = v44;
            *(_QWORD *)(a1 + 64) = v43;
            *(_OWORD *)(a1 + 48) = v42;
            v42 = 0uLL;
            *(_QWORD *)(a1 + 72) = v13;
            *(_OWORD *)(a1 + 80) = v45;
            *(_QWORD *)(a1 + 96) = v46;
            v43 = 0;
            v45 = 0uLL;
            v46 = 0;
            *(_BYTE *)(a1 + 104) = 1;
          }
          *(_BYTE *)(a1 + 112) = 1;
          *(_BYTE *)(a1 + 120) = 0;
          if (v12 && SHIBYTE(v40) < 0)
            operator delete((void *)v39);
        }
        else
        {
          *(_BYTE *)(a1 + 120) = 0;
        }
        if (v28)
        {
          if (v27)
          {
            if (v26 < 0)
              operator delete(v25);
            if (v24 < 0)
              operator delete(v23);
          }
          if (v22 && v21 < 0)
            operator delete(v20[0]);
        }
      }
      else
      {
        *(_BYTE *)a1 = 0;
        v7 = *(unsigned __int8 *)(a2 + 120);
        *(_BYTE *)(a1 + 120) = v7;
        if (v7)
        {
          *(_QWORD *)a1 = *(_QWORD *)a2;
          *(_QWORD *)(a1 + 8) = v6;
          *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
          *(_QWORD *)(a2 + 8) = 0;
          *(_QWORD *)(a2 + 16) = 0;
          *(_QWORD *)a2 = 0;
        }
        else
        {
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_BYTE *)(a1 + 16) = 0;
          *(_BYTE *)(a1 + 112) = 0;
          if (*(_BYTE *)(a2 + 112))
          {
            *(_BYTE *)(a1 + 40) = 0;
            if (*(_BYTE *)(a2 + 40))
            {
              *(_OWORD *)(a1 + 16) = *(_OWORD *)(a2 + 16);
              *(_QWORD *)(a1 + 32) = *(_QWORD *)(a2 + 32);
              *(_QWORD *)(a2 + 24) = 0;
              *(_QWORD *)(a2 + 32) = 0;
              *(_QWORD *)(a2 + 16) = 0;
              *(_BYTE *)(a1 + 40) = 1;
            }
            *(_BYTE *)(a1 + 48) = 0;
            *(_BYTE *)(a1 + 104) = 0;
            if (*(_BYTE *)(a2 + 104))
            {
              v11 = *(_QWORD *)(a2 + 72);
              *(_QWORD *)(a1 + 64) = *(_QWORD *)(a2 + 64);
              *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
              *(_QWORD *)(a2 + 56) = 0;
              *(_QWORD *)(a2 + 64) = 0;
              *(_QWORD *)(a2 + 48) = 0;
              *(_QWORD *)(a1 + 72) = v11;
              *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
              *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
              *(_QWORD *)(a2 + 80) = 0;
              *(_QWORD *)(a2 + 88) = 0;
              *(_QWORD *)(a2 + 96) = 0;
              *(_BYTE *)(a1 + 104) = 1;
            }
            *(_BYTE *)(a1 + 112) = 1;
          }
        }
      }
    }
  }
}

void sub_20AFF60C0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECCDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFF60D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20AECCDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20AFF60E8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C3FEE88;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20AFF6144(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C3FEE88;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20AFF61B0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C3FEE88;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_20AFF6230(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFF6244(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24C3FEE88;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t sub_20AFF62C0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_20AFF62FC(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_20AFF634C(uint64_t a1, char *a2)
{
  uint64_t v3;
  void *v4[4];
  unsigned __int8 v5[16];
  void *__p;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  _BYTE v15[16];
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  char v23;
  char v24;

  HIBYTE(v4[2]) = 20;
  strcpy((char *)v4, "while importing data");
  sub_20AFF4064(a2, v4, (uint64_t)v5);
  sub_20AFB1FC8(v5, (uint64_t)v15);
  v3 = *(_QWORD *)(a1 + 32);
  if (!v3)
    sub_20AECABA4();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v3 + 48))(v3, v15);
  if (v24)
  {
    if (!v23)
      goto LABEL_6;
    if (v22 < 0)
    {
      operator delete(v21);
      if ((v20 & 0x80000000) == 0)
      {
LABEL_6:
        if (!v18)
          goto LABEL_9;
LABEL_7:
        if (v17 < 0)
          operator delete(v16);
        goto LABEL_9;
      }
    }
    else if ((v20 & 0x80000000) == 0)
    {
      goto LABEL_6;
    }
    operator delete(v19);
    if (!v18)
      goto LABEL_9;
    goto LABEL_7;
  }
LABEL_9:
  if (!v14)
    goto LABEL_16;
  if (v13)
  {
    if ((v12 & 0x80000000) == 0)
    {
      if ((v10 & 0x80000000) == 0)
        goto LABEL_13;
LABEL_22:
      operator delete(v9);
      if (!v8)
        goto LABEL_16;
      goto LABEL_14;
    }
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_22;
  }
LABEL_13:
  if (!v8)
    goto LABEL_16;
LABEL_14:
  if (v7 < 0)
    operator delete(__p);
LABEL_16:
  if (SHIBYTE(v4[2]) < 0)
    operator delete(v4[0]);
}

void sub_20AFF64B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38,int a39,__int16 a40,char a41,char a42)
{
  if ((_BYTE)a40)
  {
    if (a38)
    {
      if (a37 < 0)
        operator delete(__p);
      if (a30 < 0)
        operator delete(a25);
    }
    if (a24 && a23 < 0)
      operator delete(a18);
  }
  if (a14 < 0)
    operator delete(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AFF656C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d2vl13visual_logger6ImportERKNSt3__14__fs10filesystem4pathENS2_8optionalINS1_17FileImportOpt"
                     "ionsEEENS8_INS2_8functionIFvRKNS_3esn5ErrorEEEEEERNS_3kit2fs11IFilesystemEENK3$_0clEvEUlRKNSC_6Erro"
                     "rCINSJ_3viz11IOErrorCodeEEEE_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d2vl13visual_logger6ImportERKNSt3__14__fs10filesystem4pathENS2_8optionalINS1_17Fi"
                                "leImportOptionsEEENS8_INS2_8functionIFvRKNS_3esn5ErrorEEEEEERNS_3kit2fs11IFilesystemEENK"
                                "3$_0clEvEUlRKNSC_6ErrorCINSJ_3viz11IOErrorCodeEEEE_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d2vl13visual_logger6ImportERKNSt3__14__fs10filesystem4pathENS2_8optionalINS1_17FileImportOptionsEEENS8_INS2_8functionIFvRKNS_3esn5ErrorEEEEEERNS_3kit2fs11IFilesystemEENK3$_0clEvEUlRKNSC_6ErrorCINSJ_3viz11IOErrorCodeEEEE_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d2vl13visual_logger6ImportERKNSt3__14__fs10filesystem4pathENS2_8optionalINS1_17FileImportOptionsEEENS8_INS2_8functionIFvRKNS_3esn5ErrorEEEEEERNS_3kit2fs11IFilesystemEENK3$_0clEvEUlRKNSC_6ErrorCINSJ_3viz11IOErrorCodeEEEE_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20AFF65D8()
{
  return &unk_24C3FEEE8;
}

void sub_20AFF65E4(char **a1, unint64_t a2)
{
  char *v2;
  char *v4;
  uint64_t v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 *v15;
  int v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  unsigned int v22;
  char *v23;
  unsigned int *v24;
  unsigned int *v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int *v28;
  unsigned int v29;
  unsigned int v30;
  std::__shared_weak_count *v31;
  unint64_t *p_shared_owners;
  unint64_t v33;
  char *v34;
  timespec __rqtp;

  v2 = *a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - *a1) >> 3) < a2)
  {
    if (a2 >= 0x666666666666667)
      sub_20AEC60B8();
    v4 = a1[1];
    v5 = 40 * a2;
    v6 = (char *)operator new(40 * a2);
    v7 = &v6[v4 - v2];
    if (v4 == v2)
    {
      *a1 = v7;
      a1[1] = v7;
      a1[2] = &v6[v5];
      if (v2)
LABEL_40:
        operator delete(v2);
    }
    else
    {
      v34 = &v6[v5];
      v8 = &v6[v4 - v2];
      v9 = v4;
      v10 = v8;
      do
      {
        v11 = *((_QWORD *)v9 - 5);
        v9 -= 40;
        *((_QWORD *)v10 - 5) = v11;
        v10 -= 40;
        v12 = *((_QWORD *)v9 + 1);
        *((_QWORD *)v10 + 1) = v12;
        if (v12)
        {
          v13 = (unint64_t *)(v12 + 8);
          do
            v14 = __ldxr(v13);
          while (__stxr(v14 + 1, v13));
        }
        v15 = (unsigned __int8 *)(v4 - 8);
        do
          v16 = __ldaxr(v15);
        while (__stxr(1u, v15));
        if (v16)
        {
          v17 = 0;
          do
          {
            if (v17)
            {
              __rqtp = (timespec)xmmword_20B5B0ED0;
              nanosleep(&__rqtp, 0);
            }
            ++v17;
            do
              v18 = __ldaxr(v15);
            while (__stxr(1u, v15));
          }
          while (v18);
        }
        v19 = *((_QWORD *)v4 - 3);
        v20 = *((_QWORD *)v4 - 2);
        if (v20)
        {
          v21 = (unsigned int *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        atomic_store(0, v15);
        *((_QWORD *)v8 - 3) = v19;
        *((_QWORD *)v8 - 2) = v20;
        *(v8 - 8) = 0;
        v8 = v10;
        v4 = v9;
      }
      while (v9 != v2);
      v23 = *a1;
      v2 = a1[1];
      *a1 = v10;
      a1[1] = v7;
      a1[2] = v34;
      if (v2 != v23)
      {
        do
        {
          v24 = (unsigned int *)*((_QWORD *)v2 - 2);
          if (v24)
          {
            v25 = v24 + 2;
            do
            {
              v26 = __ldaxr(v25);
              v27 = v26 - 1;
            }
            while (__stlxr(v27, v25));
            if (!v27)
            {
              (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 16))(v24);
              v28 = v24 + 3;
              do
              {
                v29 = __ldaxr(v28);
                v30 = v29 - 1;
              }
              while (__stlxr(v30, v28));
              if (!v30)
                (*(void (**)(unsigned int *))(*(_QWORD *)v24 + 24))(v24);
            }
          }
          v31 = (std::__shared_weak_count *)*((_QWORD *)v2 - 4);
          if (v31)
          {
            p_shared_owners = (unint64_t *)&v31->__shared_owners_;
            do
              v33 = __ldaxr(p_shared_owners);
            while (__stlxr(v33 - 1, p_shared_owners));
            if (!v33)
            {
              ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
              std::__shared_weak_count::__release_weak(v31);
            }
          }
          v2 -= 40;
        }
        while (v2 != v23);
        v2 = v23;
      }
      if (v2)
        goto LABEL_40;
    }
  }
}

char **sub_20AFF683C(_QWORD *a1, _QWORD *a2, char **a3)
{
  char **v3;
  _QWORD *v4;
  _QWORD *i;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  int v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  int v27;
  int v28;
  int v29;
  char *v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  unsigned int v47;
  char *v48;
  unsigned int *v49;
  unsigned int *v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int *v53;
  unsigned int v54;
  unsigned int v55;
  std::__shared_weak_count *v56;
  unint64_t *p_shared_owners;
  unint64_t v58;
  char *v61;
  char *v62;
  unsigned __int8 v64[8];
  timespec __rqtp;

  v3 = a3;
  if (a1 != a2)
  {
    v4 = a2;
    for (i = a1; i != v4; i += 5)
    {
      v6 = operator new(0x40uLL);
      v7 = v6;
      v6[1] = 0;
      v6[2] = 0;
      *v6 = &off_24C3F3C38;
      v6[3] = *i;
      v8 = v6 + 3;
      v9 = i[1];
      v6[4] = v9;
      if (v9)
      {
        v10 = (unint64_t *)(v9 + 8);
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      v6[5] = &off_24C411E78;
      v6[6] = i[3];
      v12 = i[4];
      v6[7] = v12;
      if (v12)
      {
        v13 = (unint64_t *)(v12 + 8);
        do
          v14 = __ldxr(v13);
        while (__stxr(v14 + 1, v13));
      }
      v64[0] = 0;
      v16 = (unint64_t)v3[1];
      v15 = (unint64_t)v3[2];
      if (v16 < v15)
      {
        *(_QWORD *)v16 = v8;
        *(_QWORD *)(v16 + 8) = v6;
        do
          v17 = __ldaxr(v64);
        while (__stxr(1u, v64));
        if (v17)
        {
          v18 = 0;
          do
          {
            if (v18)
            {
              __rqtp = (timespec)xmmword_20B5B0ED0;
              nanosleep(&__rqtp, 0);
            }
            ++v18;
            do
              v19 = __ldaxr(v64);
            while (__stxr(1u, v64));
          }
          while (v19);
        }
        atomic_store(0, v64);
        *(_QWORD *)(v16 + 16) = 0;
        *(_QWORD *)(v16 + 24) = 0;
        *(_BYTE *)(v16 + 32) = 0;
        v3[1] = (char *)(v16 + 40);
        v3[1] = (char *)(v16 + 40);
        continue;
      }
      v20 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v16 - (_QWORD)*v3) >> 3);
      v21 = v20 + 1;
      if (v20 + 1 > 0x666666666666666)
        sub_20AEC60B8();
      v22 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v15 - (_QWORD)*v3) >> 3);
      if (2 * v22 > v21)
        v21 = 2 * v22;
      if (v22 >= 0x333333333333333)
        v23 = 0x666666666666666;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 > 0x666666666666666)
          sub_20AEC60CC();
        v24 = (char *)operator new(40 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = &v24[40 * v20];
      *(_QWORD *)v25 = v8;
      *((_QWORD *)v25 + 1) = v7;
      v26 = &v24[40 * v23];
      do
        v27 = __ldaxr(v64);
      while (__stxr(1u, v64));
      if (v27)
      {
        v28 = 0;
        do
        {
          if (v28)
          {
            __rqtp = (timespec)xmmword_20B5B0ED0;
            nanosleep(&__rqtp, 0);
          }
          ++v28;
          do
            v29 = __ldaxr(v64);
          while (__stxr(1u, v64));
        }
        while (v29);
      }
      v62 = v26;
      v30 = &v24[40 * v20];
      atomic_store(0, v64);
      *((_QWORD *)v30 + 2) = 0;
      *((_QWORD *)v30 + 3) = 0;
      v30[32] = 0;
      v31 = v25 + 40;
      v3 = a3;
      v32 = *a3;
      v33 = a3[1];
      if (v33 == *a3)
      {
        *a3 = v25;
        a3[1] = v31;
        a3[2] = v62;
        if (!v33)
          goto LABEL_78;
      }
      else
      {
        v61 = v25 + 40;
        v34 = a3[1];
        v35 = v25;
        do
        {
          v36 = *((_QWORD *)v34 - 5);
          v34 -= 40;
          *((_QWORD *)v35 - 5) = v36;
          v35 -= 40;
          v37 = *((_QWORD *)v34 + 1);
          *((_QWORD *)v35 + 1) = v37;
          if (v37)
          {
            v38 = (unint64_t *)(v37 + 8);
            do
              v39 = __ldxr(v38);
            while (__stxr(v39 + 1, v38));
          }
          v40 = (unsigned __int8 *)(v33 - 8);
          do
            v41 = __ldaxr(v40);
          while (__stxr(1u, v40));
          if (v41)
          {
            v42 = 0;
            do
            {
              if (v42)
              {
                __rqtp = (timespec)xmmword_20B5B0ED0;
                nanosleep(&__rqtp, 0);
              }
              ++v42;
              do
                v43 = __ldaxr(v40);
              while (__stxr(1u, v40));
            }
            while (v43);
          }
          v44 = *((_QWORD *)v33 - 3);
          v45 = *((_QWORD *)v33 - 2);
          if (v45)
          {
            v46 = (unsigned int *)(v45 + 8);
            do
              v47 = __ldxr(v46);
            while (__stxr(v47 + 1, v46));
          }
          atomic_store(0, v40);
          *((_QWORD *)v25 - 3) = v44;
          *((_QWORD *)v25 - 2) = v45;
          *(v25 - 8) = 0;
          v25 = v35;
          v33 = v34;
        }
        while (v34 != v32);
        v33 = *a3;
        v48 = a3[1];
        *a3 = v35;
        v3 = a3;
        v31 = v61;
        a3[1] = v61;
        a3[2] = v62;
        if (v48 != v33)
        {
          do
          {
            v49 = (unsigned int *)*((_QWORD *)v48 - 2);
            if (v49)
            {
              v50 = v49 + 2;
              do
              {
                v51 = __ldaxr(v50);
                v52 = v51 - 1;
              }
              while (__stlxr(v52, v50));
              if (!v52)
              {
                (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 16))(v49);
                v53 = v49 + 3;
                do
                {
                  v54 = __ldaxr(v53);
                  v55 = v54 - 1;
                }
                while (__stlxr(v55, v53));
                if (!v55)
                  (*(void (**)(unsigned int *))(*(_QWORD *)v49 + 24))(v49);
              }
            }
            v56 = (std::__shared_weak_count *)*((_QWORD *)v48 - 4);
            if (v56)
            {
              p_shared_owners = (unint64_t *)&v56->__shared_owners_;
              do
                v58 = __ldaxr(p_shared_owners);
              while (__stlxr(v58 - 1, p_shared_owners));
              if (!v58)
              {
                ((void (*)(std::__shared_weak_count *))v56->__on_zero_shared)(v56);
                std::__shared_weak_count::__release_weak(v56);
              }
            }
            v48 -= 40;
          }
          while (v48 != v33);
          v3 = a3;
        }
        if (!v33)
          goto LABEL_78;
      }
      operator delete(v33);
LABEL_78:
      v4 = a2;
      v3[1] = v31;
    }
  }
  return v3;
}

void sub_20AFF6D88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20AFF4BD8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20AFF6DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_list va;

  va_start(va, a10);
  sub_20AFF4BD8((uint64_t)va);
  _Unwind_Resume(a1);
}

char **sub_20AFF6DC4(char **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  if (*((_BYTE *)a1 + 144) || !*((_BYTE *)a1 + 136))
    goto LABEL_2;
  if (!*((_BYTE *)a1 + 128))
    goto LABEL_24;
  if ((*((char *)a1 + 127) & 0x80000000) == 0)
  {
    if ((*((char *)a1 + 95) & 0x80000000) == 0)
      goto LABEL_24;
LABEL_28:
    operator delete(a1[9]);
    if (!*((_BYTE *)a1 + 64))
      goto LABEL_2;
    goto LABEL_25;
  }
  operator delete(a1[13]);
  if (*((char *)a1 + 95) < 0)
    goto LABEL_28;
LABEL_24:
  if (!*((_BYTE *)a1 + 64))
    goto LABEL_2;
LABEL_25:
  if (*((char *)a1 + 63) < 0)
    operator delete(a1[5]);
LABEL_2:
  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_18:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
      if (!v5)
        goto LABEL_10;
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(p_shared_owners);
      while (__stlxr(v7 - 1, p_shared_owners));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 4);
        if (v8)
        {
LABEL_11:
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
      }
      else
      {
LABEL_10:
        v8 = (std::__shared_weak_count *)*((_QWORD *)v3 - 4);
        if (v8)
          goto LABEL_11;
      }
      v3 -= 40;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_18;
      }
    }
  }
  return a1;
}

uint64_t sub_20AFF6F08(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (!*(_BYTE *)(a1 + 120))
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_16;
    if (*(char *)(a1 + 103) < 0)
    {
      operator delete(*(void **)(a1 + 80));
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      {
LABEL_16:
        if (!*(_BYTE *)(a1 + 40))
          return a1;
        goto LABEL_17;
      }
    }
    else if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
      goto LABEL_16;
    }
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      return a1;
LABEL_17:
    if (*(char *)(a1 + 39) < 0)
    {
      operator delete(*(void **)(a1 + 16));
      return a1;
    }
    return a1;
  }
  v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20AFF701C(uint64_t *a1, int **a2)
{
  uint64_t v4;
  int *v5;
  int v6;
  int *v7;
  int *v8;
  uint64_t v9;
  _BYTE *v10;
  uint64_t v11;
  int *v12;
  int v13;
  int *v14;
  int *v15;

  v4 = *a1;
  v5 = *a2;
  v6 = **a2;
  if (v6)
  {
    sub_20AEC01D0(a2[1], (uint64_t)", ", 2);
    v5 = *a2;
    v6 = **a2;
  }
  v8 = a2[1];
  v7 = a2[2];
  *v5 = v6 + 1;
  sub_20AEC01D0(v8, *(_QWORD *)&v7[4 * v6], *(_QWORD *)&v7[4 * v6 + 2]);
  sub_20AEC01D0(v8, (uint64_t)" = ", 3);
  v9 = *(unsigned __int8 *)(v4 + 23);
  if ((v9 & 0x80u) == 0)
    v10 = (_BYTE *)v4;
  else
    v10 = *(_BYTE **)v4;
  if ((v9 & 0x80u) != 0)
    v9 = *(_QWORD *)(v4 + 8);
  sub_20AFF4A04(a2[1], v10, &v10[v9], 0x22u, 0x5Cu);
  v11 = a1[1];
  v12 = *a2;
  v13 = **a2;
  if (v13)
  {
    sub_20AEC01D0(a2[1], (uint64_t)", ", 2);
    v12 = *a2;
    v13 = **a2;
  }
  v15 = a2[1];
  v14 = a2[2];
  *v12 = v13 + 1;
  sub_20AEC01D0(v15, *(_QWORD *)&v14[4 * v13], *(_QWORD *)&v14[4 * v13 + 2]);
  sub_20AEC01D0(v15, (uint64_t)" = ", 3);
  sub_20AFEE4E4(a2[1], v11);
}

void sub_20AFF7130()
{
  uint64_t v0;
  int *v1;
  int *v2;
  int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  char *v12;
  uint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  int *v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  __int128 *v28;
  uint64_t v29;
  __int128 v30;
  int v31;
  _DWORD v32[17];
  uint64_t v33;

  qword_25463CCF0 = 0;
  qword_25463CCF8 = 0;
  qword_25463CD00 = 0;
  v0 = sub_20B5251D0();
  if (v0)
  {
    v2 = v1;
    v3 = &v1[v0];
    do
    {
      v5 = *v2;
      v6 = sub_20AF809EC(*v2);
      if ((v6 & 0xFF00000000) != 0)
      {
        v7 = 1647392256;
        v8 = 103;
        switch((int)v6)
        {
          case 1:
            if (v5 == 1278226488)
            {
              v9 = 0;
              goto LABEL_40;
            }
            break;
          case 2:
            goto LABEL_36;
          case 3:
            if (v5 == 1278226536)
              goto LABEL_37;
            break;
          case 4:
            if (v5 == 1278226534)
              goto LABEL_37;
            break;
          case 5:
            v10 = 56;
            goto LABEL_25;
          case 7:
            v10 = 104;
            goto LABEL_25;
          case 8:
            v10 = 102;
LABEL_25:
            if (v5 == (v10 | 0x32433000))
              goto LABEL_37;
            break;
          case 17:
            if (v5 == 842285639)
              goto LABEL_37;
            break;
          case 21:
            v7 = 0;
            v8 = 24;
LABEL_36:
            if (v5 == (v7 | v8))
              goto LABEL_37;
            break;
          case 22:
            if (v5 == 1647589490)
              goto LABEL_37;
            break;
          case 25:
            if (v5 == 1111970369)
              goto LABEL_37;
            break;
          case 29:
            if (v5 == 1380401729)
              goto LABEL_37;
            break;
          case 31:
            if (v5 == 1380411457)
              goto LABEL_37;
            break;
          case 32:
            if (v5 == 1380410945)
              goto LABEL_37;
            break;
          case 33:
            if (v5 == 1094862674)
              goto LABEL_37;
            break;
          case 37:
            if (v5 == 32)
              goto LABEL_37;
            break;
          case 38:
            if (v5 != 1647719521)
              break;
LABEL_37:
            v11 = v6 - 2;
            v12 = (char *)&v33;
            if ((v6 - 2) <= 0x24)
            {
              v12 = (char *)&v33;
              if (((0x18E898806FuLL >> v11) & 1) != 0)
              {
                v9 = qword_20B5C7A28[v11];
LABEL_40:
                v12 = (char *)&v32[v9];
              }
            }
            if (v12 - (char *)v32 == 68)
              break;
            v13 = qword_25463CCF8;
            if (qword_25463CCF8 < (unint64_t)qword_25463CD00)
            {
              *(_DWORD *)qword_25463CCF8 = v5;
              v4 = v13 + 4;
              goto LABEL_4;
            }
            v14 = (void *)qword_25463CCF0;
            v15 = qword_25463CCF8 - qword_25463CCF0;
            v16 = (qword_25463CCF8 - qword_25463CCF0) >> 2;
            v17 = v16 + 1;
            if ((unint64_t)(v16 + 1) >> 62)
              sub_20AEC60B8();
            v18 = qword_25463CD00 - qword_25463CCF0;
            if ((qword_25463CD00 - qword_25463CCF0) >> 1 > v17)
              v17 = v18 >> 1;
            if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFFCLL)
              v19 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v19 = v17;
            if (!v19)
            {
              v20 = 0;
              v21 = (int *)(4 * v16);
              *(_DWORD *)(4 * v16) = v5;
              v4 = 4 * v16 + 4;
              v22 = v13 - (_QWORD)v14;
              if ((void *)v13 == v14)
                goto LABEL_62;
LABEL_56:
              v23 = v22 - 4;
              if (v23 < 0x2C)
                goto LABEL_69;
              if ((unint64_t)(v13 - (_QWORD)&v20[v15]) < 0x20)
                goto LABEL_69;
              v24 = (v23 >> 2) + 1;
              v25 = 4 * (v24 & 0x7FFFFFFFFFFFFFF8);
              v26 = v13 - v25;
              v21 = (int *)((char *)v21 - v25);
              v27 = &v20[4 * v16 - 16];
              v28 = (__int128 *)(v13 - 16);
              v29 = v24 & 0x7FFFFFFFFFFFFFF8;
              do
              {
                v30 = *v28;
                *((_OWORD *)v27 - 1) = *(v28 - 1);
                *(_OWORD *)v27 = v30;
                v27 -= 32;
                v28 -= 2;
                v29 -= 8;
              }
              while (v29);
              v13 = v26;
              if (v24 != (v24 & 0x7FFFFFFFFFFFFFF8))
              {
LABEL_69:
                do
                {
                  v31 = *(_DWORD *)(v13 - 4);
                  v13 -= 4;
                  *--v21 = v31;
                }
                while ((void *)v13 != v14);
              }
              goto LABEL_62;
            }
            if (v19 >> 62)
              sub_20AEC60CC();
            v20 = (char *)operator new(4 * v19);
            v21 = (int *)&v20[4 * v16];
            *v21 = v5;
            v4 = (uint64_t)(v21 + 1);
            v22 = v13 - (_QWORD)v14;
            if ((void *)v13 != v14)
              goto LABEL_56;
LABEL_62:
            qword_25463CCF0 = (uint64_t)v21;
            qword_25463CCF8 = v4;
            qword_25463CD00 = (uint64_t)&v20[4 * v19];
            if (v14)
              operator delete(v14);
LABEL_4:
            qword_25463CCF8 = v4;
            break;
          default:
            break;
        }
      }
      ++v2;
    }
    while (v2 != v3);
  }
}

void sub_20AFF7524(_Unwind_Exception *exception_object)
{
  if (qword_25463CCF0)
  {
    qword_25463CCF8 = qword_25463CCF0;
    operator delete((void *)qword_25463CCF0);
  }
  _Unwind_Resume(exception_object);
}

void sub_20AFF7550()
{
  uint64_t v0;
  int *v1;
  int *v2;
  int *v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  char *v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  int *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  char *v23;
  __int128 *v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  _DWORD v28[17];
  uint64_t v29;

  qword_25463CD10 = 0;
  qword_25463CD18 = 0;
  qword_25463CD20 = 0;
  v0 = sub_20B5251D0();
  if (v0)
  {
    v2 = v1;
    v3 = &v1[v0];
    while (1)
    {
      v5 = *v2;
      v6 = sub_20AF809EC(*v2);
      if ((v6 & 0xFF00000000) == 0)
        goto LABEL_5;
      v7 = v6 - 1;
      v8 = (char *)&v29;
      if ((v6 - 1) <= 0x25)
      {
        v8 = (char *)&v29;
        if (((0x31D13100DFuLL >> v7) & 1) != 0)
          v8 = (char *)&v28[qword_20B5C7B50[v7]];
      }
      if (v8 - (char *)v28 == 68)
        goto LABEL_5;
      v9 = qword_25463CD18;
      if (qword_25463CD18 >= (unint64_t)qword_25463CD20)
        break;
      *(_DWORD *)qword_25463CD18 = v5;
      v4 = v9 + 4;
LABEL_4:
      qword_25463CD18 = v4;
LABEL_5:
      if (++v2 == v3)
        return;
    }
    v10 = (void *)qword_25463CD10;
    v11 = qword_25463CD18 - qword_25463CD10;
    v12 = (qword_25463CD18 - qword_25463CD10) >> 2;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 62)
      sub_20AEC60B8();
    v14 = qword_25463CD20 - qword_25463CD10;
    if ((qword_25463CD20 - qword_25463CD10) >> 1 > v13)
      v13 = v14 >> 1;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFFCLL)
      v15 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 62)
        sub_20AEC60CC();
      v16 = (char *)operator new(4 * v15);
      v17 = (int *)&v16[4 * v12];
      *v17 = v5;
      v4 = (uint64_t)(v17 + 1);
      v18 = v9 - (_QWORD)v10;
      if ((void *)v9 == v10)
        goto LABEL_29;
    }
    else
    {
      v16 = 0;
      v17 = (int *)(4 * v12);
      *(_DWORD *)(4 * v12) = v5;
      v4 = 4 * v12 + 4;
      v18 = v9 - (_QWORD)v10;
      if ((void *)v9 == v10)
      {
LABEL_29:
        qword_25463CD10 = (uint64_t)v17;
        qword_25463CD18 = v4;
        qword_25463CD20 = (uint64_t)&v16[4 * v15];
        if (v10)
          operator delete(v10);
        goto LABEL_4;
      }
    }
    v19 = v18 - 4;
    if (v19 < 0x2C)
      goto LABEL_36;
    if ((unint64_t)(v9 - (_QWORD)v16 - v11) < 0x20)
      goto LABEL_36;
    v20 = (v19 >> 2) + 1;
    v21 = 4 * (v20 & 0x7FFFFFFFFFFFFFF8);
    v22 = v9 - v21;
    v17 = (int *)((char *)v17 - v21);
    v23 = &v16[4 * v12 - 16];
    v24 = (__int128 *)(v9 - 16);
    v25 = v20 & 0x7FFFFFFFFFFFFFF8;
    do
    {
      v26 = *v24;
      *((_OWORD *)v23 - 1) = *(v24 - 1);
      *(_OWORD *)v23 = v26;
      v23 -= 32;
      v24 -= 2;
      v25 -= 8;
    }
    while (v25);
    v9 = v22;
    if (v20 != (v20 & 0x7FFFFFFFFFFFFFF8))
    {
LABEL_36:
      do
      {
        v27 = *(_DWORD *)(v9 - 4);
        v9 -= 4;
        *--v17 = v27;
      }
      while ((void *)v9 != v10);
    }
    goto LABEL_29;
  }
}

void sub_20AFF777C(_Unwind_Exception *exception_object)
{
  if (qword_25463CD10)
  {
    qword_25463CD18 = qword_25463CD10;
    operator delete((void *)qword_25463CD10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20AFF77A8(int a1)
{
  uint64_t result;
  unsigned __int16 v3;
  int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;

  result = 1;
  if (a1 <= 1278226487)
  {
    if (a1 > 875704421)
    {
      if (a1 > 875836533)
      {
        if (a1 == 875836534)
          return result;
        if (a1 != 1094862674)
        {
          v7 = 1111970369;
          goto LABEL_37;
        }
        return 4;
      }
      if (a1 == 875704422 || a1 == 875704438)
        return result;
      v4 = 875836518;
LABEL_41:
      if (a1 != v4)
        goto LABEL_43;
      return result;
    }
    if (a1 > 843264055)
    {
      v6 = a1 - 843264056;
      if (v6 <= 0x30 && ((1 << v6) & 0x1400000000001) != 0)
        return 2;
      goto LABEL_43;
    }
    if (a1 != 24)
    {
      if (a1 == 32)
        return 4;
      if (a1 != 842285639)
        goto LABEL_43;
    }
    return 3;
  }
  if (a1 > 1647392358)
  {
    if (a1 > 1717855599)
    {
      if (a1 > 1751410031)
      {
        if (a1 == 1751410032)
          return result;
        v4 = 1751411059;
      }
      else
      {
        if (a1 == 1717855600)
          return result;
        v4 = 1717856627;
      }
      goto LABEL_41;
    }
    if (a1 == 1647392359)
      return result;
    if (a1 != 1647589490)
    {
      v7 = 1647719521;
      goto LABEL_37;
    }
    return 3;
  }
  if (a1 <= 1278226741)
  {
    v5 = a1 - 1278226488;
    if (v5 > 0x30 || ((1 << v5) & 0x1400000000001) == 0)
      goto LABEL_43;
    return result;
  }
  if (a1 > 1380410944)
  {
    if (a1 != 1380410945)
    {
      v3 = 26689;
      goto LABEL_36;
    }
    return 4;
  }
  if (a1 != 1278226742)
  {
    v3 = 16961;
LABEL_36:
    v7 = v3 | 0x52470000;
LABEL_37:
    if (a1 == v7)
      return 4;
LABEL_43:
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 420, (uint64_t)"", 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_20B532360);
    abort();
  }
  return result;
}

void sub_20AFF7A18(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t *v3;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  void *v22;
  std::__shared_weak_count *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  int v27;
  int v28;
  unsigned int v29;
  int v30;
  size_t v31;
  uint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  int v36;
  char *v37;
  _BYTE *v38;
  int v39;
  uint64_t v40;
  void *v41[2];
  mach_timebase_info *v42;
  std::string *v43;
  std::string *v44;
  _QWORD v45[2];
  std::__shared_weak_count *v46;
  void *v47[2];
  uint64_t v48;
  char v49;
  __int128 v50;
  char v51;
  char v52;
  void *v53[2];
  mach_timebase_info *v54;
  unsigned int v55;
  char v56;
  mach_timebase_info info[2];
  uint64_t v58;
  int v59;
  std::string v60;
  void **v61;
  __int128 v62;
  __int128 __p;
  const char *v64;
  unsigned __int8 v65;
  void *v66[2];
  uint64_t v67;
  uint64_t v68;
  void *v69[2];
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  mach_timebase_info v74[2];
  __int128 v75;
  const char *v76;
  unsigned __int8 v77;
  __int128 v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  uint64_t v82;
  char v83;
  char v84;
  uint64_t v85;

  v85 = *MEMORY[0x24BDAC8D0];
  v3 = *(uint64_t **)(a1 + 8);
  if (v3)
  {
    v6 = *v3;
    v5 = (std::__shared_weak_count *)v3[1];
    if (!v5)
      goto LABEL_7;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v8 = __ldxr(p_shared_owners);
    while (__stxr(v8 + 1, p_shared_owners));
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
      if (v6)
        goto LABEL_8;
    }
    else
    {
LABEL_7:
      if (v6)
      {
LABEL_8:
        v10 = atomic_load((unsigned __int8 *)&qword_25463CD28);
        if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25463CD28))
        {
          sub_20AFF7550();
          __cxa_atexit((void (*)(void *))sub_20AF7993C, &qword_25463CD10, &dword_20AEBB000);
          __cxa_guard_release(&qword_25463CD28);
        }
        v11 = qword_25463CD10;
        v12 = qword_25463CD18;
        v13 = sub_20B4E94AC(a1);
        v14 = (v12 - v11) >> 2;
        if (v12 == v11)
        {
          if (!v14)
            goto LABEL_15;
        }
        else
        {
          v15 = 4 * v14;
          v16 = (_DWORD *)v11;
          while (*v16 != v13)
          {
            ++v16;
            v15 -= 4;
            if (!v15)
            {
              v16 = (_DWORD *)(v11 + ((v12 - v11) & 0xFFFFFFFFFFFFFFFCLL));
              break;
            }
          }
          if (v14 == ((uint64_t)v16 - v11) >> 2)
          {
LABEL_15:
            LODWORD(v61) = sub_20B4E94AC(a1);
            v17 = atomic_load((unsigned __int8 *)&qword_25463CD28);
            if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_25463CD28))
            {
              sub_20AFF7550();
              __cxa_atexit((void (*)(void *))sub_20AF7993C, &qword_25463CD10, &dword_20AEBB000);
              __cxa_guard_release(&qword_25463CD28);
            }
            v60.__r_.__value_.__r.__words[0] = (qword_25463CD18 - qword_25463CD10) >> 2;
            v60.__r_.__value_.__l.__size_ = qword_25463CD10;
            LODWORD(v43) = 0;
            sub_20AF6A9E4(v41, "Invalid IOSurface format '");
            sub_20AF80CB8((uint64_t)&v55, (uint64_t)v41, (unsigned int *)&v61);
            v74[0] = (mach_timebase_info)v41;
            *(_QWORD *)&v75 = v41;
            if ((_DWORD)v43 == -1)
              sub_20AECFAB8();
            v53[0] = v74;
            ((void (*)(void **, void **))off_24C4000A8[v43])(v53, v41);
            sub_20AF80F5C((uint64_t)v74, (uint64_t)v41, (uint64_t *)&v60);
            if ((_DWORD)v43 == -1)
              sub_20AECFAB8();
            v74[0] = (mach_timebase_info)v53;
            ((void (*)(mach_timebase_info *__return_ptr, mach_timebase_info *, void **))off_24C400060[v43])(info, v74, v41);
            if ((_DWORD)v43 != -1)
              ((void (*)(mach_timebase_info *, void **))off_24C400000[v43])(v74, v41);
            *(_OWORD *)v47 = *(_OWORD *)&info[0].numer;
            v48 = v58;
            info[0] = 0;
            info[1] = 0;
            v58 = 0;
            v49 = 1;
            sub_20B099E24((__int128 *)v47, (uint64_t)&v62);
            *(_OWORD *)a2 = v62;
            *(_BYTE *)(a2 + 16) = 0;
            *(_BYTE *)(a2 + 112) = 0;
            if (v72)
            {
              *(_BYTE *)(a2 + 40) = 0;
              v18 = v65;
              if (v65)
              {
                *(_OWORD *)(a2 + 16) = __p;
                *(_QWORD *)(a2 + 32) = v64;
                v64 = 0;
                __p = 0uLL;
                *(_BYTE *)(a2 + 40) = 1;
              }
              *(_BYTE *)(a2 + 48) = 0;
              *(_BYTE *)(a2 + 104) = 0;
              if (v71)
              {
                v19 = v68;
                *(_QWORD *)(a2 + 64) = v67;
                *(_OWORD *)(a2 + 48) = *(_OWORD *)v66;
                v66[0] = 0;
                v66[1] = 0;
                *(_QWORD *)(a2 + 72) = v19;
                *(_OWORD *)(a2 + 80) = *(_OWORD *)v69;
                *(_QWORD *)(a2 + 96) = v70;
                v67 = 0;
                v69[0] = 0;
                v69[1] = 0;
                v70 = 0;
                *(_BYTE *)(a2 + 104) = 1;
              }
              *(_BYTE *)(a2 + 112) = 1;
              *(_BYTE *)(a2 + 528) = 0;
              if (v18 && SHIBYTE(v64) < 0)
                operator delete((void *)__p);
            }
            else
            {
              *(_BYTE *)(a2 + 528) = 0;
            }
            if (v49)
            {
              if (SHIBYTE(v48) < 0)
                operator delete(v47[0]);
            }
            if (SHIBYTE(v58) < 0)
            {
              v22 = (void *)info[0];
              goto LABEL_41;
            }
            return;
          }
        }
        v24 = *(_QWORD *)(a1 + 8);
        v23 = *(std::__shared_weak_count **)(a1 + 16);
        v45[0] = &off_24C41E150;
        v45[1] = v24;
        v46 = v23;
        if (v23)
        {
          v25 = (unint64_t *)&v23->__shared_owners_;
          do
            v26 = __ldxr(v25);
          while (__stxr(v26 + 1, v25));
        }
        v27 = sub_20B4E94AC((uint64_t)v45);
        v55 = v27;
        v28 = sub_20AFF77A8(v27);
        v29 = sub_20AFFC020(v27);
        if (v29 >= 4)
        {
          sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 322, (uint64_t)"", 0, (uint64_t)"not implemented", 15, (void (*)(void **))sub_20B532360);
          abort();
        }
        v30 = dword_20B5C7C90[(char)v29];
        v31 = sub_20B4E8FAC((uint64_t)v45);
        v32 = (v30 * v28);
        if (v31 == v32)
        {
          if (!(sub_20B4E922C((uint64_t)v45) % v31))
          {
            v73 = 1;
            v45[0] = &off_24C41E150;
            v33 = v46;
            if (!v46)
              goto LABEL_95;
            goto LABEL_84;
          }
          v59 = 0;
          sub_20B001C20(info, "Invalid IOSurface: ");
          sub_20B001960((uint64_t)info, (uint64_t)v45);
          v41[0] = info;
          v41[1] = ". IOSurface of format ";
          v42 = info;
          v43 = (std::string *)". IOSurface of format ";
          v44 = (std::string *)". IOSurface of format ";
          if (v59 == -1)
            sub_20AECFAB8();
          v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
          ((void (*)(std::string *, mach_timebase_info *))off_24C400030[v59])(&v60, info);
          sub_20AF80CB8((uint64_t)&v56, (uint64_t)info, &v55);
          v41[0] = info;
          v41[1] = " requires bytes per row to be a multiple of ";
          v42 = info;
          v43 = (std::string *)" requires bytes per row to be a multiple of ";
          v44 = (std::string *)" requires bytes per row to be a multiple of ";
          if (v59 == -1)
            sub_20AECFAB8();
          v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
          ((void (*)(std::string *, mach_timebase_info *))off_24C400078[v59])(&v60, info);
          std::to_string(&v60, v32);
          v41[0] = info;
          v41[1] = &v60;
          v42 = info;
          v43 = &v60;
          v44 = &v60;
          if (v59 == -1)
            sub_20AECFAB8();
          v61 = v41;
          ((void (*)(void ***, mach_timebase_info *))off_24C400018[v59])(&v61, info);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
          v41[0] = info;
          v41[1] = ".";
          v42 = info;
          v43 = (std::string *)".";
          v44 = (std::string *)".";
          if (v59 == -1)
            sub_20AECFAB8();
          v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
          ((void (*)(std::string *, mach_timebase_info *))off_24C400090[v59])(&v60, info);
          if (v59 == -1)
            sub_20AECFAB8();
          v41[0] = &v60;
          ((void (*)(void **__return_ptr, void **, mach_timebase_info *))off_24C400060[v59])(v53, v41, info);
          if (v59 != -1)
            ((void (*)(void **, mach_timebase_info *))off_24C400000[v59])(v41, info);
          *(_OWORD *)v41 = *(_OWORD *)v53;
          v42 = v54;
          v53[0] = 0;
          v53[1] = 0;
          v54 = 0;
          LOBYTE(v43) = 1;
          sub_20B099E24((__int128 *)v41, (uint64_t)v74);
          v62 = *(_OWORD *)&v74[0].numer;
          LOBYTE(__p) = 0;
          v72 = 0;
          if (!v84)
          {
LABEL_59:
            v73 = 0;
            if (!(_BYTE)v43)
              goto LABEL_81;
            goto LABEL_79;
          }
        }
        else
        {
          v59 = 0;
          sub_20B001C20(info, "Invalid IOSurface: ");
          sub_20B001960((uint64_t)info, (uint64_t)v45);
          v41[0] = info;
          v41[1] = ". IOSurface of format ";
          v42 = info;
          v43 = (std::string *)". IOSurface of format ";
          v44 = (std::string *)". IOSurface of format ";
          if (v59 == -1)
            sub_20AECFAB8();
          v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
          ((void (*)(std::string *, mach_timebase_info *))off_24C400030[v59])(&v60, info);
          sub_20AF80CB8((uint64_t)&v56, (uint64_t)info, &v55);
          v41[0] = info;
          v41[1] = " requires ";
          v42 = info;
          v43 = (std::string *)" requires ";
          v44 = (std::string *)" requires ";
          if (v59 == -1)
            sub_20AECFAB8();
          v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
          ((void (*)(std::string *, mach_timebase_info *))off_24C400048[v59])(&v60, info);
          std::to_string(&v60, v32);
          v41[0] = info;
          v41[1] = &v60;
          v42 = info;
          v43 = &v60;
          v44 = &v60;
          if (v59 == -1)
            sub_20AECFAB8();
          v61 = v41;
          ((void (*)(void ***, mach_timebase_info *))off_24C400018[v59])(&v61, info);
          if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v60.__r_.__value_.__l.__data_);
          v41[0] = info;
          v41[1] = " bytes per element.";
          v42 = info;
          v43 = (std::string *)" bytes per element.";
          v44 = (std::string *)" bytes per element.";
          if (v59 == -1)
            sub_20AECFAB8();
          v60.__r_.__value_.__r.__words[0] = (std::string::size_type)v41;
          ((void (*)(std::string *, mach_timebase_info *))off_24C3FFFE8[v59])(&v60, info);
          if (v59 == -1)
            sub_20AECFAB8();
          v41[0] = &v60;
          ((void (*)(void **__return_ptr, void **, mach_timebase_info *))off_24C400060[v59])(v53, v41, info);
          if (v59 != -1)
            ((void (*)(void **, mach_timebase_info *))off_24C400000[v59])(v41, info);
          *(_OWORD *)v41 = *(_OWORD *)v53;
          v42 = v54;
          v53[0] = 0;
          v53[1] = 0;
          v54 = 0;
          LOBYTE(v43) = 1;
          sub_20B099E24((__int128 *)v41, (uint64_t)v74);
          v62 = *(_OWORD *)&v74[0].numer;
          LOBYTE(__p) = 0;
          v72 = 0;
          if (!v84)
            goto LABEL_59;
        }
        v65 = 0;
        if (v77)
        {
          __p = v75;
          v64 = v76;
          v76 = 0;
          v75 = 0uLL;
          v65 = 1;
        }
        LOBYTE(v66[0]) = 0;
        v71 = 0;
        if (v83)
        {
          v67 = v79;
          *(_OWORD *)v66 = v78;
          v78 = 0uLL;
          v68 = v80;
          *(_OWORD *)v69 = v81;
          v70 = v82;
          v79 = 0;
          v81 = 0uLL;
          v82 = 0;
          v71 = 1;
        }
        v72 = 1;
        v73 = 0;
        if (v77 && SHIBYTE(v76) < 0)
          operator delete((void *)v75);
        if (!(_BYTE)v43)
        {
LABEL_81:
          if (SHIBYTE(v54) < 0)
            operator delete(v53[0]);
          v45[0] = &off_24C41E150;
          v33 = v46;
          if (!v46)
          {
LABEL_95:
            if (v73)
            {
              v36 = sub_20B4E94AC(a1);
              v37 = (char *)&loc_20AFF8418 + 4 * word_20B5C3C56[sub_20AF809EC(v36)];
              __asm { BR              X10 }
            }
            *(_OWORD *)&v74[0].numer = v62;
            v38 = sub_20AECEBD0(&v75, &__p);
            *(_OWORD *)a2 = *(_OWORD *)&v74[0].numer;
            *(_BYTE *)(a2 + 16) = 0;
            *(_BYTE *)(a2 + 112) = 0;
            if (v84)
            {
              *(_BYTE *)(a2 + 40) = 0;
              v39 = v77;
              if (v77)
              {
                *(_OWORD *)(a2 + 16) = *(_OWORD *)v38;
                *(_QWORD *)(a2 + 32) = *((_QWORD *)v38 + 2);
                *((_QWORD *)v38 + 1) = 0;
                *((_QWORD *)v38 + 2) = 0;
                *(_QWORD *)v38 = 0;
                *(_BYTE *)(a2 + 40) = 1;
              }
              *(_BYTE *)(a2 + 48) = 0;
              *(_BYTE *)(a2 + 104) = 0;
              if (v83)
              {
                v40 = v80;
                *(_QWORD *)(a2 + 64) = v79;
                *(_OWORD *)(a2 + 48) = v78;
                v78 = 0uLL;
                *(_QWORD *)(a2 + 72) = v40;
                *(_OWORD *)(a2 + 80) = v81;
                *(_QWORD *)(a2 + 96) = v82;
                v79 = 0;
                v81 = 0uLL;
                v82 = 0;
                *(_BYTE *)(a2 + 104) = 1;
              }
              *(_BYTE *)(a2 + 112) = 1;
              *(_BYTE *)(a2 + 528) = 0;
              if (v39 && SHIBYTE(v76) < 0)
                operator delete((void *)v75);
            }
            else
            {
              *(_BYTE *)(a2 + 528) = 0;
            }
            if (!v73 && v72)
            {
              if (v71)
              {
                if (SHIBYTE(v70) < 0)
                  operator delete(v69[0]);
                if (SHIBYTE(v67) < 0)
                  operator delete(v66[0]);
              }
              if (v65 && SHIBYTE(v64) < 0)
              {
                v22 = (void *)__p;
                goto LABEL_41;
              }
            }
            return;
          }
LABEL_84:
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
          goto LABEL_95;
        }
LABEL_79:
        if (SHIBYTE(v42) < 0)
          operator delete(v41[0]);
        goto LABEL_81;
      }
    }
  }
  LOBYTE(v50) = 0;
  v52 = 0;
  sub_20B099CC4(&v50, (uint64_t)&v62);
  *(_OWORD *)a2 = v62;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v72)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v20 = v65;
    if (v65)
    {
      *(_OWORD *)(a2 + 16) = __p;
      *(_QWORD *)(a2 + 32) = v64;
      v64 = 0;
      __p = 0uLL;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v71)
    {
      v21 = v68;
      *(_QWORD *)(a2 + 64) = v67;
      *(_OWORD *)(a2 + 48) = *(_OWORD *)v66;
      v66[0] = 0;
      v66[1] = 0;
      *(_QWORD *)(a2 + 72) = v21;
      *(_OWORD *)(a2 + 80) = *(_OWORD *)v69;
      *(_QWORD *)(a2 + 96) = v70;
      v67 = 0;
      v69[0] = 0;
      v69[1] = 0;
      v70 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 528) = 0;
    if (v20 && SHIBYTE(v64) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a2 + 528) = 0;
  }
  if (v52 && v51 < 0)
  {
    v22 = (void *)v50;
LABEL_41:
    operator delete(v22);
  }
}

void sub_20AFF9BEC()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9C24()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9C5C()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9C94()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9CCC()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9D04()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9D3C()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9D74()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9DAC()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9DE4()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9E1C()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9E54()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9E8C()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9EC4()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9EFC()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9F34()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9F6C()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9FA4()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFF9FDC()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFFA014()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFFA04C()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFFA084()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFFA0BC()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFFA0F4()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20AFFA12C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  __cxa_guard_abort(&qword_25463D170);
  sub_20AFFA660((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AFFA150(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CD28);
  _Unwind_Resume(a1);
}

void sub_20AFFA168(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CD28);
  _Unwind_Resume(a1);
}

void sub_20AFFA180(_Unwind_Exception *a1)
{
  uint64_t v2;

  if (STACK[0x310])
  {
    v2 = sub_20B295B58(STACK[0x310]);
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20AFFA660(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

BOOL VZImageIsIOSurfacePixelFormatSupported_0(int a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25463CD08);
  if ((v2 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25463CD08))
    {
      sub_20AFF7130();
      __cxa_atexit((void (*)(void *))sub_20AF7993C, &qword_25463CCF0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CD08);
    }
  }
  v3 = (qword_25463CCF8 - qword_25463CCF0) >> 2;
  if (qword_25463CCF8 == qword_25463CCF0)
    return v3 != 0;
  v4 = 4 * v3;
  v5 = (_DWORD *)qword_25463CCF0;
  while (*v5 != a1)
  {
    ++v5;
    v4 -= 4;
    if (!v4)
    {
      v5 = (_DWORD *)(qword_25463CCF0 + ((qword_25463CCF8 - qword_25463CCF0) & 0xFFFFFFFFFFFFFFFCLL));
      return v3 != ((uint64_t)v5 - qword_25463CCF0) >> 2;
    }
  }
  return v3 != ((uint64_t)v5 - qword_25463CCF0) >> 2;
}

void sub_20AFFA79C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CD08);
  _Unwind_Resume(a1);
}

BOOL VZImageIsIOSurfacePixelFormatPartiallySupported_0(int a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25463CD28);
  if ((v2 & 1) == 0)
  {
    if (__cxa_guard_acquire(&qword_25463CD28))
    {
      sub_20AFF7550();
      __cxa_atexit((void (*)(void *))sub_20AF7993C, &qword_25463CD10, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CD28);
    }
  }
  v3 = (qword_25463CD18 - qword_25463CD10) >> 2;
  if (qword_25463CD18 == qword_25463CD10)
    return v3 != 0;
  v4 = 4 * v3;
  v5 = (_DWORD *)qword_25463CD10;
  while (*v5 != a1)
  {
    ++v5;
    v4 -= 4;
    if (!v4)
    {
      v5 = (_DWORD *)(qword_25463CD10 + ((qword_25463CD18 - qword_25463CD10) & 0xFFFFFFFFFFFFFFFCLL));
      return v3 != ((uint64_t)v5 - qword_25463CD10) >> 2;
    }
  }
  return v3 != ((uint64_t)v5 - qword_25463CD10) >> 2;
}

void sub_20AFFA888(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CD28);
  _Unwind_Resume(a1);
}

void sub_20AFFA8A0(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  _QWORD v8[4];
  char v9;
  char v10;
  void *v11;
  char v12;
  void *__p;
  char v14;
  char v15;
  char v16;
  char v17;

  sub_20AFFA9A4(a1, (uint64_t)v8);
  if (v17)
  {
    v3 = sub_20AEF3220((uint64_t)v8);
    v5 = *(_QWORD *)(v3 + 8);
    v4 = *(_QWORD *)(v3 + 16);
    *a2 = &off_24C41E150;
    a2[1] = v5;
    a2[2] = v4;
    if (v4)
    {
      v6 = (unint64_t *)(v4 + 8);
      do
        v7 = __ldxr(v6);
      while (__stxr(v7 + 1, v6));
    }
    if (v17)
      goto LABEL_6;
  }
  else
  {
    a2[1] = 0;
    a2[2] = 0;
    *a2 = &off_24C41E150;
    if (v17)
    {
LABEL_6:
      (*(void (**)(_QWORD *))v8[0])(v8);
      return;
    }
  }
  if (v16)
  {
    if (v15)
    {
      if (v14 < 0)
        operator delete(__p);
      if (v12 < 0)
        operator delete(v11);
    }
    if (v10)
    {
      if (v9 < 0)
        operator delete((void *)v8[2]);
    }
  }
}

void sub_20AFFA990(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEEF4E0((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20AFFA9A4(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  void **v22;
  void **v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  std::__shared_weak_count *v38;
  unint64_t *v39;
  unint64_t v40;
  int v41;
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  unint64_t *v45;
  unint64_t v46;
  std::__shared_weak_count *v47;
  uint64_t v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  void *v54[2];
  uint64_t v55;
  void *v56[2];
  uint64_t v57;
  char v58;
  void *v59;
  char v60;
  void *v61;
  char v62;
  char v63;
  char v64;
  void *v65;
  __int128 v66;
  char v67;
  __int128 v68;
  std::__shared_weak_count *v69;
  int v70;
  void *v71;
  void **v72;
  __int128 v73;
  __int128 __p;
  uint64_t v75;
  unsigned __int8 v76;
  __int128 v77;
  uint64_t v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  char v82;
  char v83;
  uint64_t v84;
  std::__shared_weak_count *v85;
  char v86;
  char *v87;
  __int128 __dst;
  uint64_t v89;
  int v90;
  uint64_t v91;

  v91 = *MEMORY[0x24BDAC8D0];
  v4 = (uint64_t (***)())*((_QWORD *)a1 + 53);
  v5 = (std::__shared_weak_count *)*((_QWORD *)a1 + 54);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4 && *v4 == &off_24C411FE8)
  {
    v8 = 1;
    if (!v5)
      goto LABEL_12;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_12;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_12:
    if ((v8 & 1) != 0)
      goto LABEL_13;
LABEL_24:
    v12 = 0;
    v84 = 0;
    v85 = 0;
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if ((v8 & 1) == 0)
    goto LABEL_24;
LABEL_13:
  v11 = *((_QWORD *)a1 + 53);
  v12 = (std::__shared_weak_count *)*((_QWORD *)a1 + 54);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v84 = v11;
  v85 = v12;
  if (!v11)
  {
LABEL_25:
    v19 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
    {
      v68 = xmmword_20B5B0AE0;
      sub_20B1DFBA8((uint64_t *)&v68);
      __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF48);
    }
    if (byte_25463CDBF < 0)
    {
      sub_20AEC60F4(&__dst, (void *)xmmword_25463CDA8, *((unint64_t *)&xmmword_25463CDA8 + 1));
    }
    else
    {
      __dst = xmmword_25463CDA8;
      v89 = unk_25463CDB8;
    }
    v90 = dword_25463CDC0;
    sub_20AF4BC0C(&v71, (uint64_t)&__dst, 1uLL);
    if (*((char *)a1 + 23) < 0)
    {
      sub_20AEC60F4(&v68, *(void **)a1, *((_QWORD *)a1 + 1));
    }
    else
    {
      v68 = *a1;
      v69 = (std::__shared_weak_count *)*((_QWORD *)a1 + 2);
    }
    v70 = *((_DWORD *)a1 + 6);
    v65 = operator new(0x20uLL);
    v66 = xmmword_20B5C7C80;
    strcpy((char *)v65, "cannot return data as IOSurface");
    v67 = 1;
    sub_20B099ED4((uint64_t *)&v71, (uint64_t)&v68, (uint64_t)&v65, (uint64_t)&v73);
    *(_OWORD *)a2 = v73;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v83)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v20 = v76;
      if (v76)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v75;
        v75 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v82)
      {
        v21 = v79;
        *(_QWORD *)(a2 + 64) = v78;
        *(_OWORD *)(a2 + 48) = v77;
        v77 = 0uLL;
        *(_QWORD *)(a2 + 72) = v21;
        *(_OWORD *)(a2 + 80) = v80;
        *(_QWORD *)(a2 + 96) = v81;
        v78 = 0;
        v80 = 0uLL;
        v81 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v20 && SHIBYTE(v75) < 0)
        operator delete((void *)__p);
      if (!v67)
      {
LABEL_45:
        if (SHIBYTE(v69) < 0)
          operator delete((void *)v68);
        v22 = (void **)v71;
        if (v71)
        {
          v23 = v72;
          v24 = v71;
          if (v72 != v71)
          {
            do
            {
              if (*((char *)v23 - 9) < 0)
                operator delete(*(v23 - 4));
              v23 -= 4;
            }
            while (v23 != v22);
            v24 = v71;
          }
          v72 = v22;
          operator delete(v24);
        }
        if (SHIBYTE(v89) < 0)
          operator delete((void *)__dst);
        if (v12)
          goto LABEL_58;
        return;
      }
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
      if (!v67)
        goto LABEL_45;
    }
    if (SHIBYTE(v66) < 0)
      operator delete(v65);
    goto LABEL_45;
  }
  if (*((_BYTE *)a1 + 512))
  {
    v16 = *((_QWORD *)a1 + 62);
    v15 = *((_QWORD *)a1 + 63);
    *(_QWORD *)a2 = &off_24C41E150;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *(_BYTE *)(a2 + 120) = 1;
    if (!v12)
      return;
LABEL_58:
    v25 = (unint64_t *)&v12->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
    return;
  }
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v11 + 8) + 40))(v11 + 8);
  if (v28)
  {
    *((_QWORD *)&v68 + 1) = 0;
    v69 = 0;
    *(_QWORD *)&v68 = &off_24C41E150;
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v27 + 56))(v27, &v68);
    if (*((_QWORD *)&v68 + 1))
    {
      v30 = **((_QWORD **)&v68 + 1);
      v29 = *(std::__shared_weak_count **)(*((_QWORD *)&v68 + 1) + 8);
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v30)
      {
        if (*((_BYTE *)a1 + 512))
        {
          v35 = *((_QWORD *)&v68 + 1);
          v34 = v69;
          if (v69)
          {
            v36 = (unint64_t *)&v69->__shared_owners_;
            do
              v37 = __ldxr(v36);
            while (__stxr(v37 + 1, v36));
          }
          v38 = (std::__shared_weak_count *)*((_QWORD *)a1 + 63);
          *((_QWORD *)a1 + 62) = v35;
          *((_QWORD *)a1 + 63) = v34;
          if (v38)
          {
            v39 = (unint64_t *)&v38->__shared_owners_;
            do
              v40 = __ldaxr(v39);
            while (__stlxr(v40 - 1, v39));
            if (!v40)
            {
              ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
              std::__shared_weak_count::__release_weak(v38);
            }
          }
        }
        else
        {
          v44 = *((_QWORD *)&v68 + 1);
          v43 = v69;
          *((_QWORD *)a1 + 61) = &off_24C41E150;
          *((_QWORD *)a1 + 62) = v44;
          *((_QWORD *)a1 + 63) = v43;
          if (v43)
          {
            v45 = (unint64_t *)&v43->__shared_owners_;
            do
              v46 = __ldxr(v45);
            while (__stxr(v46 + 1, v45));
          }
          *((_BYTE *)a1 + 512) = 1;
        }
        v48 = *((_QWORD *)&v68 + 1);
        v47 = v69;
        *(_QWORD *)a2 = &off_24C41E150;
        *(_QWORD *)(a2 + 8) = v48;
        *(_QWORD *)(a2 + 16) = v47;
        if (v47)
        {
          v49 = (unint64_t *)&v47->__shared_owners_;
          do
            v50 = __ldxr(v49);
          while (__stxr(v50 + 1, v49));
        }
        *(_BYTE *)(a2 + 120) = 1;
        goto LABEL_116;
      }
    }
  }
  else
  {
    *((_QWORD *)&v68 + 1) = 0;
    v69 = 0;
    *(_QWORD *)&v68 = &off_24C41E150;
  }
  v90 = 0;
  sub_20B003710(&__dst, "contained image data does not contain an IOSurface");
  if (v90 == -1)
    sub_20AECFAB8();
  v87 = &v86;
  ((void (*)(void **__return_ptr, char **, __int128 *))off_24C400060[v90])(v54, &v87, &__dst);
  if (v90 != -1)
    ((void (*)(char **, __int128 *))off_24C400000[v90])(&v87, &__dst);
  if (SHIBYTE(v55) < 0)
  {
    sub_20AEC60F4(v56, v54[0], (unint64_t)v54[1]);
  }
  else
  {
    *(_OWORD *)v56 = *(_OWORD *)v54;
    v57 = v55;
  }
  v58 = 1;
  LOBYTE(v59) = 0;
  v63 = 0;
  v64 = 1;
  sub_20AECCC3C(0xCu, (__int128 *)v56, (uint64_t)&v73);
  *(_OWORD *)a2 = v73;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v83)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v41 = v76;
    if (v76)
    {
      *(_OWORD *)(a2 + 16) = __p;
      *(_QWORD *)(a2 + 32) = v75;
      v75 = 0;
      __p = 0uLL;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v82)
    {
      v42 = v79;
      *(_QWORD *)(a2 + 64) = v78;
      *(_OWORD *)(a2 + 48) = v77;
      v77 = 0uLL;
      *(_QWORD *)(a2 + 72) = v42;
      *(_OWORD *)(a2 + 80) = v80;
      *(_QWORD *)(a2 + 96) = v81;
      v78 = 0;
      v80 = 0uLL;
      v81 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v41 && SHIBYTE(v75) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a2 + 120) = 0;
  }
  if (v64)
  {
    if (v63)
    {
      if (v62 < 0)
        operator delete(v61);
      if (v60 < 0)
        operator delete(v59);
    }
    if (v58 && SHIBYTE(v57) < 0)
      operator delete(v56[0]);
  }
  if (SHIBYTE(v55) < 0)
    operator delete(v54[0]);
LABEL_116:
  *(_QWORD *)&v68 = &off_24C41E150;
  v51 = v69;
  if (v69)
  {
    v52 = (unint64_t *)&v69->__shared_owners_;
    do
      v53 = __ldaxr(v52);
    while (__stlxr(v53 - 1, v52));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
      std::__shared_weak_count::__release_weak(v51);
    }
  }
  v12 = v85;
  if (v85)
    goto LABEL_58;
}

void sub_20AFFB14C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44)
{
  uint64_t v44;

  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C(v44 - 128);
  _Unwind_Resume(a1);
}

void sub_20AFFB234(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unsigned __int8 v19;
  int v20;
  uint64_t v21;
  void **v22;
  void **v23;
  void *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  char v28;
  std::__shared_weak_count *v29;
  uint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  _QWORD *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  int v39;
  uint64_t v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  unint64_t v44;
  std::__shared_weak_count *v45;
  unint64_t *v46;
  unint64_t v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  uint64_t v50;
  unint64_t *v51;
  unint64_t v52;
  unint64_t v53;
  uint64_t v54;
  std::__shared_weak_count *v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unsigned int v59;
  __int16 v60;
  unint64_t v61;
  const char *v62;
  unint64_t *v63;
  unint64_t v64;
  uint64_t v65;
  std::__shared_weak_count *v66;
  unint64_t *v67;
  unint64_t v68;
  std::__shared_weak_count *v69;
  unint64_t *v70;
  unint64_t v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  uint64_t v77;
  unint64_t *v78;
  unint64_t v79;
  std::__shared_weak_count *v80;
  unint64_t *v81;
  unint64_t v82;
  int v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t *v87;
  unint64_t v88;
  std::__shared_weak_count *v89;
  unint64_t *v90;
  unint64_t v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  void *v95[2];
  uint64_t v96;
  void *v97[2];
  uint64_t v98;
  char v99;
  void *v100;
  char v101;
  void *v102;
  char v103;
  char v104;
  char v105;
  uint64_t (**v106)();
  _QWORD *v107;
  std::__shared_weak_count *v108;
  int v109;
  void *v110;
  __int128 v111;
  char v112;
  void *v113;
  void **v114;
  __int128 v115;
  __int128 __p;
  uint64_t v117;
  unsigned __int8 v118;
  __int128 v119;
  uint64_t v120;
  uint64_t v121;
  __int128 v122;
  uint64_t v123;
  char v124;
  char v125;
  uint64_t v126;
  std::__shared_weak_count *v127;
  uint64_t v128;
  __int128 v129;
  std::__shared_weak_count *v130;
  const char *v131;
  int v132;
  _BYTE *v133;
  _BYTE __dst[24];
  const char *v135;
  const char *v136;
  uint64_t v137;
  unsigned int v138;
  __int16 v139;
  uint64_t v140;

  v140 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t (****)())(a1 + 424);
  v5 = *(std::__shared_weak_count **)(a1 + 432);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4 && *v4 == &off_24C411FE8)
  {
    v8 = 1;
    if (!v5)
      goto LABEL_12;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_12;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_12:
    if ((v8 & 1) != 0)
      goto LABEL_13;
LABEL_24:
    v11 = 0;
    v126 = 0;
    v127 = 0;
    goto LABEL_25;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if ((v8 & 1) == 0)
    goto LABEL_24;
LABEL_13:
  v12 = *(_QWORD *)(a1 + 424);
  v11 = *(std::__shared_weak_count **)(a1 + 432);
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v126 = v12;
  v127 = v11;
  if (!v12)
  {
LABEL_25:
    v19 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v19 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
    {
      v129 = xmmword_20B5B0AE0;
      sub_20B1DFBA8((uint64_t *)&v129);
      __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF48);
    }
    if (byte_25463CDBF < 0)
    {
      sub_20AEC60F4(__dst, (void *)xmmword_25463CDA8, *((unint64_t *)&xmmword_25463CDA8 + 1));
    }
    else
    {
      *(_OWORD *)__dst = xmmword_25463CDA8;
      *(_QWORD *)&__dst[16] = unk_25463CDB8;
    }
    LODWORD(v135) = dword_25463CDC0;
    sub_20AF4BC0C(&v113, (uint64_t)__dst, 1uLL);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC60F4(&v129, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      v129 = *(_OWORD *)a1;
      v130 = *(std::__shared_weak_count **)(a1 + 16);
    }
    LODWORD(v131) = *(_DWORD *)(a1 + 24);
    v110 = operator new(0x20uLL);
    v111 = xmmword_20B5C7C80;
    strcpy((char *)v110, "cannot return data as IOSurface");
    v112 = 1;
    sub_20B099ED4((uint64_t *)&v113, (uint64_t)&v129, (uint64_t)&v110, (uint64_t)&v115);
    *(_OWORD *)a2 = v115;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v125)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v20 = v118;
      if (v118)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v117;
        v117 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v124)
      {
        v21 = v121;
        *(_QWORD *)(a2 + 64) = v120;
        *(_OWORD *)(a2 + 48) = v119;
        v119 = 0uLL;
        *(_QWORD *)(a2 + 72) = v21;
        *(_OWORD *)(a2 + 80) = v122;
        *(_QWORD *)(a2 + 96) = v123;
        v120 = 0;
        v122 = 0uLL;
        v123 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v20 && SHIBYTE(v117) < 0)
        operator delete((void *)__p);
      if (!v112)
      {
LABEL_45:
        if (SHIBYTE(v130) < 0)
          operator delete((void *)v129);
        v22 = (void **)v113;
        if (v113)
        {
          v23 = v114;
          v24 = v113;
          if (v114 != v113)
          {
            do
            {
              if (*((char *)v23 - 9) < 0)
                operator delete(*(v23 - 4));
              v23 -= 4;
            }
            while (v23 != v22);
            v24 = v113;
          }
          v114 = v22;
          operator delete(v24);
        }
        if ((__dst[23] & 0x80000000) != 0)
          operator delete(*(void **)__dst);
        if (v11)
          goto LABEL_58;
        return;
      }
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
      if (!v112)
        goto LABEL_45;
    }
    if (SHIBYTE(v111) < 0)
      operator delete(v110);
    goto LABEL_45;
  }
  if (*(_BYTE *)(a1 + 512))
  {
    v16 = *(_QWORD *)(a1 + 496);
    v15 = *(_QWORD *)(a1 + 504);
    *(_QWORD *)a2 = &off_24C41E150;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = v15;
    if (v15)
    {
      v17 = (unint64_t *)(v15 + 8);
      do
        v18 = __ldxr(v17);
      while (__stxr(v18 + 1, v17));
    }
    *(_BYTE *)(a2 + 120) = 1;
    if (!v11)
      return;
LABEL_58:
    v25 = (unint64_t *)&v11->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
    return;
  }
  v109 = *(_DWORD *)(v12 + 56);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v12 + 8) + 40))(v12 + 8);
  if (v28)
  {
    v107 = 0;
    v108 = 0;
    v106 = &off_24C41E150;
    (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v27 + 56))(v27, &v106);
    if (v107)
    {
      v30 = *v107;
      v29 = (std::__shared_weak_count *)v107[1];
      if (v29)
      {
        v31 = (unint64_t *)&v29->__shared_owners_;
        do
          v32 = __ldxr(v31);
        while (__stxr(v32 + 1, v31));
        do
          v33 = __ldaxr(v31);
        while (__stlxr(v33 - 1, v31));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
          std::__shared_weak_count::__release_weak(v29);
        }
      }
      if (v30)
      {
        v35 = v107;
        v34 = v108;
        *(_QWORD *)a2 = &off_24C41E150;
        *(_QWORD *)(a2 + 8) = v35;
        *(_QWORD *)(a2 + 16) = v34;
        if (v34)
        {
          v36 = (unint64_t *)&v34->__shared_owners_;
          do
            v37 = __ldxr(v36);
          while (__stxr(v37 + 1, v36));
        }
        *(_BYTE *)(a2 + 120) = 1;
        goto LABEL_186;
      }
    }
  }
  else
  {
    v107 = 0;
    v108 = 0;
    v106 = &off_24C41E150;
  }
  v38 = (char *)&v120 + 4;
  v39 = v109 - 1;
  if ((v109 - 1) <= 0x25 && ((0x31D13100DFuLL >> v39) & 1) != 0)
    v38 = (char *)&v115 + 4 * qword_20B5C7B50[v39];
  if (v38 - (char *)&v115 == 68)
  {
    LODWORD(v131) = 0;
    sub_20AFB1674(&v129, "contained image data of format '");
    sub_20AF86710((uint64_t)&v128, (uint64_t)&v129, (unsigned int *)&v109);
    *(_QWORD *)__dst = &v129;
    *(_QWORD *)&__dst[8] = "' cannot be represented as IOSurface";
    *(_QWORD *)&__dst[16] = &v129;
    v135 = "' cannot be represented as IOSurface";
    v136 = "' cannot be represented as IOSurface";
    if ((_DWORD)v131 == -1)
      sub_20AECFAB8();
    v133 = __dst;
    ((void (*)(_BYTE **, __int128 *))off_24C4003B0[v131])(&v133, &v129);
    if ((_DWORD)v131 == -1)
      sub_20AECFAB8();
    *(_QWORD *)__dst = &v133;
    ((void (*)(void **__return_ptr, _BYTE *, __int128 *))off_24C400060[v131])(v95, __dst, &v129);
    if ((_DWORD)v131 != -1)
      ((void (*)(_BYTE *, __int128 *))off_24C400000[v131])(__dst, &v129);
    if (SHIBYTE(v96) < 0)
    {
      sub_20AEC60F4(v97, v95[0], (unint64_t)v95[1]);
    }
    else
    {
      *(_OWORD *)v97 = *(_OWORD *)v95;
      v98 = v96;
    }
    v99 = 1;
    LOBYTE(v100) = 0;
    v104 = 0;
    v105 = 1;
    sub_20AECCC3C(0xCu, (__int128 *)v97, (uint64_t)&v115);
    *(_OWORD *)a2 = v115;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v125)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v83 = v118;
      if (v118)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v117;
        v117 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v124)
      {
        v84 = v121;
        *(_QWORD *)(a2 + 64) = v120;
        *(_OWORD *)(a2 + 48) = v119;
        v119 = 0uLL;
        *(_QWORD *)(a2 + 72) = v84;
        *(_OWORD *)(a2 + 80) = v122;
        *(_QWORD *)(a2 + 96) = v123;
        v120 = 0;
        v122 = 0uLL;
        v123 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v83 && SHIBYTE(v117) < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
    }
    if (v105)
    {
      if (v104)
      {
        if (v103 < 0)
          operator delete(v102);
        if (v101 < 0)
          operator delete(v100);
      }
      if (v99 && SHIBYTE(v98) < 0)
        operator delete(v97[0]);
    }
    if (SHIBYTE(v96) < 0)
      operator delete(v95[0]);
    goto LABEL_186;
  }
  sub_20B003800((uint64_t)&v115, v109);
  v40 = *(_QWORD *)(v12 + 16);
  v41 = *(std::__shared_weak_count **)(v12 + 24);
  if (v41)
  {
    v42 = (unint64_t *)&v41->__shared_owners_;
    do
      v43 = __ldxr(v42);
    while (__stxr(v43 + 1, v42));
    do
      v44 = __ldaxr(v42);
    while (__stlxr(v44 - 1, v42));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
      std::__shared_weak_count::__release_weak(v41);
    }
    if (!v40)
      goto LABEL_103;
    v40 = *(_QWORD *)(v12 + 16);
    v45 = *(std::__shared_weak_count **)(v12 + 24);
    if (v45)
    {
      v46 = (unint64_t *)&v45->__shared_owners_;
      do
        v47 = __ldxr(v46);
      while (__stxr(v47 + 1, v46));
      do
        v48 = __ldaxr(v46);
      while (__stlxr(v48 - 1, v46));
      if (!v48)
      {
        ((void (*)(std::__shared_weak_count *))v45->__on_zero_shared)(v45);
        std::__shared_weak_count::__release_weak(v45);
      }
    }
  }
  else if (!v40)
  {
LABEL_103:
    v133 = 0;
    goto LABEL_104;
  }
  if (!*(_BYTE *)(v12 + 61))
    goto LABEL_103;
  (*(void (**)(_BYTE **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v40 + 96))(&v133, v40, 0);
LABEL_104:
  v50 = *((_QWORD *)&v115 + 1);
  v49 = (std::__shared_weak_count *)__p;
  if ((_QWORD)__p)
  {
    v51 = (unint64_t *)(__p + 8);
    do
      v52 = __ldxr(v51);
    while (__stxr(v52 + 1, v51));
    do
      v53 = __ldaxr(v51);
    while (__stlxr(v53 - 1, v51));
    if (!v53)
    {
      ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
      std::__shared_weak_count::__release_weak(v49);
    }
  }
  if (v50 && BYTE13(v119))
    (*(void (**)(uint64_t *__return_ptr, _QWORD, uint64_t))(**((_QWORD **)&v115 + 1) + 96))(&v128, *((_QWORD *)&v115 + 1), 1);
  else
    v128 = 0;
  *(_QWORD *)__dst = &off_24C3FA3D0;
  v54 = *(_QWORD *)(v12 + 16);
  v55 = *(std::__shared_weak_count **)(v12 + 24);
  if (v55)
  {
    v56 = (unint64_t *)&v55->__shared_owners_;
    do
      v57 = __ldxr(v56);
    while (__stxr(v57 + 1, v56));
    v58 = *(_QWORD *)(v12 + 48);
    v59 = *(_DWORD *)(v12 + 56);
    v60 = *(_WORD *)(v12 + 60);
    do
      v61 = __ldxr(v56);
    while (__stxr(v61 + 1, v56));
  }
  else
  {
    v58 = *(_QWORD *)(v12 + 48);
    v59 = *(_DWORD *)(v12 + 56);
    v60 = *(_WORD *)(v12 + 60);
  }
  *(_QWORD *)&__dst[8] = v54;
  *(_QWORD *)&__dst[16] = v55;
  v62 = *(const char **)(v12 + 32);
  LODWORD(v136) = *(_DWORD *)(v12 + 40);
  v135 = v62;
  v137 = v58;
  v138 = v59;
  v139 = v60;
  if (v55)
  {
    v63 = (unint64_t *)&v55->__shared_owners_;
    do
      v64 = __ldaxr(v63);
    while (__stlxr(v64 - 1, v63));
    if (!v64)
    {
      ((void (*)(std::__shared_weak_count *))v55->__on_zero_shared)(v55);
      std::__shared_weak_count::__release_weak(v55);
    }
  }
  *(_QWORD *)&v129 = &off_24C400938;
  sub_20B007640((uint64_t)&v115, (uint64_t)&v129 + 8);
  if (v135 != v131
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/Algorithm.cpp", 80, (uint64_t)"from.Size() == to.Size()", 24, (uint64_t)&unk_20B5AE8D7, 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_195;
  }
  v65 = v138;
  if (v138 != v132)
  {
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/src/Algorithm.cpp", 81, (uint64_t)"from.RuntimeFormat() == to.RuntimeFormat()", 42, (uint64_t)&unk_20B5AE8D7, 0, (void (*)(void **))sub_20B532360))
    {
      v65 = v138;
      goto LABEL_131;
    }
LABEL_195:
    abort();
  }
LABEL_131:
  v95[0] = &v129;
  sub_20B4752E8(v65, v95, __dst);
  v66 = v130;
  if (v130)
  {
    v67 = (unint64_t *)&v130->__shared_owners_;
    do
      v68 = __ldaxr(v67);
    while (__stlxr(v68 - 1, v67));
    if (!v68)
    {
      ((void (*)(std::__shared_weak_count *))v66->__on_zero_shared)(v66);
      std::__shared_weak_count::__release_weak(v66);
    }
  }
  v69 = *(std::__shared_weak_count **)&__dst[16];
  if (*(_QWORD *)&__dst[16])
  {
    v70 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
    do
      v71 = __ldaxr(v70);
    while (__stlxr(v71 - 1, v70));
    if (!v71)
    {
      ((void (*)(std::__shared_weak_count *))v69->__on_zero_shared)(v69);
      std::__shared_weak_count::__release_weak(v69);
    }
  }
  v72 = v128;
  v128 = 0;
  if (v72)
    (*(void (**)(uint64_t))(*(_QWORD *)v72 + 8))(v72);
  v73 = v133;
  v133 = 0;
  if (v73)
    (*(void (**)(_BYTE *))(*(_QWORD *)v73 + 8))(v73);
  v74 = (*(uint64_t (**)(__int128 *))(v115 + 40))(&v115);
  if (!v75)
  {
    *(_QWORD *)&__dst[8] = 0;
    *(_QWORD *)&__dst[16] = 0;
    *(_QWORD *)__dst = &off_24C41E150;
    if (*(_BYTE *)(a1 + 512))
      goto LABEL_147;
LABEL_165:
    v86 = *(_QWORD *)&__dst[8];
    v85 = *(_QWORD *)&__dst[16];
    *(_QWORD *)(a1 + 488) = &off_24C41E150;
    *(_QWORD *)(a1 + 496) = v86;
    *(_QWORD *)(a1 + 504) = v85;
    if (v85)
    {
      v87 = (unint64_t *)(v85 + 8);
      do
        v88 = __ldxr(v87);
      while (__stxr(v88 + 1, v87));
    }
    *(_BYTE *)(a1 + 512) = 1;
    goto LABEL_169;
  }
  *(_QWORD *)&__dst[8] = 0;
  *(_QWORD *)&__dst[16] = 0;
  *(_QWORD *)__dst = &off_24C41E150;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v74 + 56))(v74, __dst);
  if (!*(_BYTE *)(a1 + 512))
    goto LABEL_165;
LABEL_147:
  v77 = *(_QWORD *)&__dst[8];
  v76 = *(_QWORD *)&__dst[16];
  if (*(_QWORD *)&__dst[16])
  {
    v78 = (unint64_t *)(*(_QWORD *)&__dst[16] + 8);
    do
      v79 = __ldxr(v78);
    while (__stxr(v79 + 1, v78));
  }
  v80 = *(std::__shared_weak_count **)(a1 + 504);
  *(_QWORD *)(a1 + 496) = v77;
  *(_QWORD *)(a1 + 504) = v76;
  if (v80)
  {
    v81 = (unint64_t *)&v80->__shared_owners_;
    do
      v82 = __ldaxr(v81);
    while (__stlxr(v82 - 1, v81));
    if (!v82)
    {
      ((void (*)(std::__shared_weak_count *))v80->__on_zero_shared)(v80);
      std::__shared_weak_count::__release_weak(v80);
    }
  }
LABEL_169:
  *(_QWORD *)a2 = &off_24C41E150;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)&__dst[8];
  *(_BYTE *)(a2 + 120) = 1;
  v89 = (std::__shared_weak_count *)__p;
  if ((_QWORD)__p)
  {
    v90 = (unint64_t *)(__p + 8);
    do
      v91 = __ldaxr(v90);
    while (__stlxr(v91 - 1, v90));
    if (!v91)
    {
      ((void (*)(std::__shared_weak_count *))v89->__on_zero_shared)(v89);
      std::__shared_weak_count::__release_weak(v89);
    }
  }
LABEL_186:
  v106 = &off_24C41E150;
  v92 = v108;
  if (v108)
  {
    v93 = (unint64_t *)&v108->__shared_owners_;
    do
      v94 = __ldaxr(v93);
    while (__stlxr(v94 - 1, v93));
    if (!v94)
    {
      ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
      std::__shared_weak_count::__release_weak(v92);
    }
  }
  v11 = v127;
  if (v127)
    goto LABEL_58;
}

void sub_20AFFBEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,uint64_t a45,char a46)
{
  uint64_t v46;

  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C(v46 - 232);
  _Unwind_Resume(a1);
}

uint64_t sub_20AFFC020(int a1)
{
  int v1;
  int v2;
  int v4;

  if (a1 <= 1278226533)
  {
    if (a1 > 875704421)
    {
      if (a1 <= 875836533)
      {
        if (a1 == 875704422 || a1 == 875704438)
          return 0;
        v1 = 875836518;
      }
      else
      {
        if (a1 <= 1111970368)
        {
          if (a1 != 875836534)
          {
            v1 = 1094862674;
            goto LABEL_38;
          }
          return 0;
        }
        if (a1 == 1111970369)
          return 0;
        v1 = 1278226488;
      }
LABEL_38:
      if (a1 == v1)
        return 0;
LABEL_44:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/PixelFormat/include/Kit/PixelFormat/Properties.h", 303, (uint64_t)"", 0, (uint64_t)"not yet implemented", 19, (void (*)(void **))sub_20B532360);
      abort();
    }
    if (a1 <= 843264055)
    {
      if (a1 == 24 || a1 == 32)
        return 0;
      v1 = 842285639;
      goto LABEL_38;
    }
    if (a1 == 843264056)
      return 0;
    if (a1 != 843264102)
    {
      v4 = 843264104;
      goto LABEL_42;
    }
    return 3;
  }
  if (a1 > 1647392358)
  {
    if (a1 > 1717855599)
    {
      if (a1 > 1751410031)
      {
        if (a1 == 1751410032)
          return 2;
        v4 = 1751411059;
        goto LABEL_42;
      }
      if (a1 != 1717855600 && a1 != 1717856627)
        goto LABEL_44;
      return 3;
    }
    if (a1 == 1647392359 || a1 == 1647589490)
      return 1;
    v2 = 1647719521;
LABEL_27:
    if (a1 != v2)
      goto LABEL_44;
    return 1;
  }
  if (a1 <= 1380401728)
  {
    if (a1 == 1278226534)
      return 3;
    if (a1 == 1278226536)
      return 2;
    v2 = 1278226742;
    goto LABEL_27;
  }
  if (a1 == 1380401729)
    return 0;
  if (a1 == 1380410945)
    return 3;
  v4 = 1380411457;
LABEL_42:
  if (a1 != v4)
    goto LABEL_44;
  return 2;
}

uint64_t sub_20AFFC290(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFC2F8(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;

  *(_QWORD *)a1 = &off_24C3FEF28;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4003E8;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v11, v3, 1);
  v7 = *(_QWORD *)(v11 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v11;
  *(_QWORD *)(a1 + 48) = v7;
  v11 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 40);
  v8 = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFC470(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B28A564(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C40EE3858B8);
  _Unwind_Resume(a1);
}

void sub_20AFFC498(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFC4E4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416BF8;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40EE3858B8);
  }
  return a1;
}

void sub_20AFFC56C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFC5D4()
{
  return 1;
}

uint64_t sub_20AFFC5DC(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20AFFC5E4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20AFFC5F8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFC678(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFC69C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416BF8;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFC724(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20AFFC794(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFC7FC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_20AFFC804(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20AFFC80C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 40);
  return result;
}

uint64_t sub_20AFFC820(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

uint64_t sub_20AFFC82C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFC894(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;

  *(_QWORD *)a1 = &off_24C3FF078;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400438;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v11, v3, 2);
  v7 = *(_QWORD *)(v11 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v11;
  *(_QWORD *)(a1 + 48) = v7;
  v11 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 40);
  v8 = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFCA0C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B28FBD4(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C40EE3858B8);
  _Unwind_Resume(a1);
}

void sub_20AFFCA34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFCA80(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416E38;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40EE3858B8);
  }
  return a1;
}

void sub_20AFFCB08(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFCB70()
{
  return 2;
}

uint64_t sub_20AFFCB78(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20AFFCB80@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20AFFCB98(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFCC18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFCC3C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416E38;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFCCC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20AFFCD34(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFCD9C(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;

  *(_QWORD *)a1 = &off_24C3FF170;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400488;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v11, v3, 3);
  v7 = *(_QWORD *)(v11 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v11;
  *(_QWORD *)(a1 + 48) = v7;
  v11 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 40);
  v8 = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFCF14(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B29349C(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C40EE3858B8);
  _Unwind_Resume(a1);
}

void sub_20AFFCF3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFCF88(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416FE8;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40EE3858B8);
  }
  return a1;
}

void sub_20AFFD010(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFD078()
{
  return 3;
}

uint64_t sub_20AFFD080(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20AFFD088@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20AFFD0A0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFD120(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFD144(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416FE8;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFD1CC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE3EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20AFFD23C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFD2A4(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v11;

  *(_QWORD *)a1 = &off_24C3FF268;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4004D8;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v11, v3, 4);
  v7 = *(_QWORD *)(v11 + 16);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)v11;
  *(_QWORD *)(a1 + 48) = v7;
  v11 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a1 + 40);
  v8 = (unint64_t *)&v4->__shared_owners_;
  do
    v9 = __ldaxr(v8);
  while (__stlxr(v9 - 1, v8));
  if (!v9)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFD41C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B296E58(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C40EE3858B8);
  _Unwind_Resume(a1);
}

void sub_20AFFD444(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFD490(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C417198;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C40EE3858B8);
  }
  return a1;
}

void sub_20AFFD518(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFD580()
{
  return 4;
}

uint64_t sub_20AFFD588(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20AFFD590@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 64);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 76);
  return result;
}

uint64_t sub_20AFFD5A8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFD628(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFD64C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C417198;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFD6D4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20AFFD744(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFD7AC(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FF360;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400528;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 5);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFD934(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B28B8F4(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20AFFD95C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFD9A8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416C88;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20AFFDA30(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFDA98()
{
  return 5;
}

uint64_t sub_20AFFDAA0(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20AFFDAA8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20AFFDABC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFDB3C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFDB60(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416C88;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFDBE8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE5EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20AFFDC58(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFDCC0(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FF458;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400578;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 7);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFDE48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B2949A8(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20AFFDE70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFDEBC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C417078;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20AFFDF44(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFDFAC()
{
  return 7;
}

uint64_t sub_20AFFDFB4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20AFFDFBC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20AFFDFD4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFE054(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFE078(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C417078;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFE100(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE7EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20AFFE170(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFE1D8(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FF550;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4005C8;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 8);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFE360(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B298360(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20AFFE388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFE3D4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C417228;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20AFFE45C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFE4C4()
{
  return 8;
}

uint64_t sub_20AFFE4CC(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20AFFE4D4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20AFFE4EC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFE56C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFE590(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C417228;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFE618(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE8EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20AFFE688(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFE6F0(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FF648;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400618;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 17);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFE878(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B28CDBC(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20AFFE8A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFE8EC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416D18;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20AFFE974(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFE9DC()
{
  return 17;
}

uint64_t sub_20AFFE9E4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20AFFE9EC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20AFFEA00(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFEA80(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFEAA4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416D18;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFEB2C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE17EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20AFFEB9C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFEC04(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FF740;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400668;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 21);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFED8C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B28CDBC(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20AFFEDB4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFEE00(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416D18;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20AFFEE88(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFEEF0()
{
  return 21;
}

uint64_t sub_20AFFEEF8(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20AFFEF00@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20AFFEF14(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFEF94(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFEFB8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416D18;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFF040(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE21EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20AFFF0B0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFF118(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FF838;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4006B8;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 22);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFF2A0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B2910AC(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20AFFF2C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFF314(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416EC8;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20AFFF39C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFF404()
{
  return 22;
}

uint64_t sub_20AFFF40C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20AFFF414@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20AFFF42C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFF4AC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFF4D0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416EC8;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFF558(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE22EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20AFFF5C8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFF630(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FF930;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400708;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 25);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFF7B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B28E5A0(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20AFFF7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFF82C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416DA8;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20AFFF8B4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFF91C()
{
  return 25;
}

uint64_t sub_20AFFF924(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20AFFF92C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20AFFF940(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFF9C0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFF9E4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416DA8;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFFA6C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE25EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20AFFFADC(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20AFFFB44(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FFA28;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400758;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 29);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20AFFFCCC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B28E5A0(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20AFFFCF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20AFFFD40(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416DA8;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20AFFFDC8(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFFE30()
{
  return 29;
}

uint64_t sub_20AFFFE38(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20AFFFE40@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20AFFFE54(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20AFFFED4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20AFFFEF8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416DA8;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20AFFFF80(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE29EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20AFFFFF0(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B000058(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FFB20;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4007A8;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 31);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20B0001E0(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B295B58(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20B000208(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B000254(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C417108;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20B0002DC(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B000344()
{
  return 31;
}

uint64_t sub_20B00034C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B000354@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B00036C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0003EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B000410(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C417108;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B000498(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE31EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20B000508(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B000570(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FFC18;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4007F8;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 32);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20B0006F8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B299510(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20B000720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B00076C(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C4172B8;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20B0007F4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B00085C()
{
  return 32;
}

uint64_t sub_20B000864(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B00086C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B000884(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B000904(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B000928(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C4172B8;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B0009B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE32EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20B000A20(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B000A88(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FFD10;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400848;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 33);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20B000C10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B28E5A0(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20B000C38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B000C84(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416DA8;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20B000D0C(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B000D74()
{
  return 33;
}

uint64_t sub_20B000D7C(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B000D84@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B000D98(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B000E18(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B000E3C(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416DA8;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B000EC4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE33EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20B000F34(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B000F9C(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FFE08;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400898;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 37);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20B001124(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B28E5A0(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20B00114C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B001198(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416DA8;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20B001220(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B001288()
{
  return 37;
}

uint64_t sub_20B001290(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B001298@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B0012AC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B00132C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B001350(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416DA8;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B0013D8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE37EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

uint64_t sub_20B001448(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0014B0(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  __int128 v7;
  __int128 v8;
  unint64_t *v9;
  unint64_t v10;
  _OWORD *v12;

  *(_QWORD *)a1 = &off_24C3FFF00;
  v3 = *a2;
  *a2 = 0;
  if (v3)
  {
    v4 = (std::__shared_weak_count *)operator new();
    v4->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    v4->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4008E8;
    v4->__shared_weak_owners_ = 0;
    v4[1].__vftable = v3;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  else
  {
    v4 = 0;
  }
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v4;
  *(_QWORD *)(a1 + 24) = 0;
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v3->~__shared_weak_count + 8))(&v12, v3, 38);
  v8 = v12[1];
  v7 = v12[2];
  *(_OWORD *)(a1 + 32) = *v12;
  *(_OWORD *)(a1 + 48) = v8;
  *(_OWORD *)(a1 + 64) = v7;
  v12 = 0;
  MEMORY[0x20BD3583C]();
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a1 + 32);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a1 + 104) = *(_OWORD *)(a1 + 56);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a1 + 72);
  v9 = (unint64_t *)&v4->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (!v10)
  {
    ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_20B001638(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v3;

  v3 = sub_20B2921B4(v1);
  MEMORY[0x20BD3583C](v3, 0x10A3C4049419736);
  _Unwind_Resume(a1);
}

void sub_20B001660(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  unint64_t *p_shared_owners;
  unint64_t v6;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v3);
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v6 = __ldaxr(p_shared_owners);
  while (__stlxr(v6 - 1, p_shared_owners));
  if (!v6)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0016AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    *(_QWORD *)v2 = off_24C416F58;
    v3 = *(unsigned int *)(v2 + 40);
    if ((_DWORD)v3 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v3])(&v5, v2 + 16);
    *(_DWORD *)(v2 + 40) = -1;
    MEMORY[0x20BD3583C](v2, 0x10A3C4049419736);
  }
  return a1;
}

void sub_20B001734(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B00179C()
{
  return 38;
}

uint64_t sub_20B0017A4(uint64_t a1)
{
  return a1 + 112;
}

uint64_t sub_20B0017AC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 92);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 108);
  return result;
}

uint64_t sub_20B0017C4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B001844(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B001868(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    *(_QWORD *)v1 = off_24C416F58;
    v2 = *(unsigned int *)(v1 + 40);
    if ((_DWORD)v2 != -1)
      ((void (*)(char *, uint64_t))off_24C418120[v2])(&v3, v1 + 16);
    *(_DWORD *)(v1 + 40) = -1;
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B0018F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIN4cv3d3kit6iosimg20IOSurfaceImageBufferILNS2_3img6FormatE38EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B001960(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  size_t v6;
  void **v7;
  unint64_t v8;
  unint64_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__dst[2];
  unint64_t v19;
  _QWORD v20[5];
  _QWORD *v21;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v20[0] = v4;
  sub_20B4E96E8((_QWORD *)(v4 + 16), a2);
  v5 = *(_DWORD *)(v4 + 120);
  if ((v5 & 0x10) != 0)
  {
    v8 = *(_QWORD *)(v4 + 112);
    v9 = *(_QWORD *)(v4 + 72);
    if (v8 < v9)
    {
      *(_QWORD *)(v4 + 112) = v9;
      v8 = v9;
    }
    v10 = *(const void **)(v4 + 64);
    v6 = v8 - (_QWORD)v10;
    if (v8 - (unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v5 & 8) == 0)
    {
      v6 = 0;
      HIBYTE(v19) = 0;
      v7 = __dst;
      goto LABEL_14;
    }
    v10 = *(const void **)(v4 + 40);
    v6 = *(_QWORD *)(v4 + 56) - (_QWORD)v10;
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v6 >= 0x17)
  {
    v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v11 = v6 | 7;
    v12 = v11 + 1;
    v7 = (void **)operator new(v11 + 1);
    __dst[1] = (void *)v6;
    v19 = v12 | 0x8000000000000000;
    __dst[0] = v7;
    goto LABEL_13;
  }
  HIBYTE(v19) = v6;
  v7 = __dst;
  if (v6)
LABEL_13:
    memmove(v7, v10, v6);
LABEL_14:
  *((_BYTE *)v7 + v6) = 0;
  v13 = v20[0];
  if (v20[0])
  {
    v14 = MEMORY[0x24BEDB7F0];
    v15 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v20[0] = *MEMORY[0x24BEDB7F0];
    v16 = *(_QWORD *)(v14 + 72);
    *(_QWORD *)(v13 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
    *(_QWORD *)(v13 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v13 + 16) = v16;
    if (*(char *)(v13 + 111) < 0)
      operator delete(*(void **)(v13 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v13 + 128);
    MEMORY[0x20BD3583C](v13, 0x10B2C40EED050F3);
  }
  v20[0] = a1;
  v20[1] = __dst;
  v20[2] = a1;
  v20[3] = __dst;
  v20[4] = __dst;
  v17 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v17 == -1)
    sub_20AECFAB8();
  v21 = v20;
  ((void (*)(_QWORD **, uint64_t))off_24C400018[v17])(&v21, a1);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst[0]);
}

void sub_20B001BB0(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B001BD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B001BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B001C04(_DWORD ***a1)
{
  return sub_20B001C20(**a1, (char *)(*a1)[1]);
}

void sub_20B001C10(uint64_t a1, uint64_t a2)
{
  sub_20B001D10((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20B001C20(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C400000[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20B001D10(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C400000[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B001EC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B001F08(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B002000((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B001FF8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B002000(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B0021FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B002210(_DWORD ***a1)
{
  return sub_20B00222C(**a1, (char *)(*a1)[1]);
}

void sub_20B00221C(uint64_t a1, uint64_t a2)
{
  sub_20B00231C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20B00222C(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C400000[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20B00231C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C400000[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B0024D0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B002514(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B00260C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B002604(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B00260C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B002808(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B00281C(_DWORD ***a1)
{
  return sub_20B002838(**a1, (char *)(*a1)[1]);
}

void sub_20B002828(uint64_t a1, uint64_t a2)
{
  sub_20B002928((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20B002838(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C400000[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20B002928(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C400000[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B002ADC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B002B20(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B002C18((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B002C10(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B002C18(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B002E14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

size_t sub_20B002E28(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C400000[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20B002F14(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C400000[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B0030CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B003110(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B0033A0(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B0033B8(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_20B0033C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v11;
  _OWORD v12[2];

  sub_20B0034E0(a2, (uint64_t)&v11);
  *(_QWORD *)a1 = &off_24C3FA4C0;
  *(_QWORD *)(a1 + 8) = &off_24C3F2CB0;
  v5 = v11;
  v6 = v12[0];
  v11 = 0uLL;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_OWORD *)(a1 + 46) = *(_OWORD *)((char *)v12 + 14);
  sub_20AF4CAF4(a1 + 64, a3);
  *(_QWORD *)a1 = &off_24C3FA440;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v11 + 1);
  if (*((_QWORD *)&v11 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v11 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  *(_QWORD *)a1 = &off_24C411FE8;
  return a1;
}

void sub_20B003490(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  va_list va;

  va_start(va, a2);
  *(_QWORD *)(v2 + 8) = v3;
  v5 = *(std::__shared_weak_count **)(v2 + 24);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20AEF0C34((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0034E0(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v24 = 0;
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v22;
  *(_DWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = v9;
  if (v4)
  {
    if (v3)
    {
      v11 = (unint64_t *)&v3->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v14 & 0xFFFFFFu) <= 0x10000)
      v15 = 0;
    else
      v15 = v14;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    v3 = v24;
    *(_WORD *)(a2 + 44) = v16 & 0xFF00 | v15;
    if (!v24)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a2 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v17 = (unint64_t *)&v3->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v19 = v25;
    if (!v25)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v19 = v25;
  if (!v25)
    return;
LABEL_29:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_20B0036BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C((uint64_t)va1);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B003710(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C400000[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20B003800(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

void sub_20B00383C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  void (**v24)();
  std::__shared_weak_count *v25;
  _BYTE v26[24];
  unsigned int v27;
  __int128 v28;

  *(_QWORD *)(v4 - 72) = &off_24C4009A8;
  sub_20B2BF784(a3, (uint64_t)&v24);
  v5 = operator new();
  v6 = v5;
  *(_QWORD *)v5 = off_24C416BF8;
  v7 = v27;
  *(_DWORD *)(v5 + 8) = (_DWORD)v25;
  *(_BYTE *)(v5 + 16) = 0;
  *(_DWORD *)(v5 + 40) = -1;
  if ((_DWORD)v7 == -1)
  {
    *(_OWORD *)(v5 + 48) = v28;
    *(_QWORD *)v5 = off_24C417348;
  }
  else
  {
    ((void (*)(uint64_t, uint64_t, _BYTE *))off_24C4000C0[v7])(v4 - 72, v5 + 16, v26);
    *(_DWORD *)(v6 + 40) = v7;
    v8 = v27;
    *(_OWORD *)(v6 + 48) = v28;
    *(_QWORD *)v6 = off_24C417348;
    v24 = off_24C416BF8;
    if ((_DWORD)v8 != -1)
      ((void (*)(uint64_t, _BYTE *))off_24C418120[v8])(v4 - 72, v26);
  }
  v24 = (void (**)())v6;
  v9 = (std::__shared_weak_count *)operator new();
  v9->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v9->__shared_owners_;
  v9->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4003E8;
  v9->__shared_weak_owners_ = 0;
  v9[1].__vftable = (std::__shared_weak_count_vtbl *)v6;
  v24 = 0;
  v25 = 0;
  v21 = v6;
  do
    v11 = __ldxr(p_shared_owners);
  while (__stxr(v11 + 1, p_shared_owners));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 64))(v6, 1);
  v12 = *(__int128 **)(v4 - 72);
  v22 = *v12;
  v23 = *((_QWORD *)v12 + 2);
  *(_QWORD *)(v4 - 72) = 0;
  MEMORY[0x20BD3583C](v12);
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  v14 = v25;
  if (v25)
  {
    v15 = (unint64_t *)&v25->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  *(_QWORD *)v3 = &off_24C3FF020;
  if (v9)
  {
    v17 = (unint64_t *)&v9->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  *(_QWORD *)(v3 + 8) = v21;
  *(_QWORD *)(v3 + 16) = v9;
  *(_QWORD *)(v3 + 24) = 0;
  *(_QWORD *)(v3 + 32) = *((_QWORD *)&v22 + 1);
  *(_DWORD *)(v3 + 40) = HIDWORD(v23);
  *(_QWORD *)(v3 + 48) = v22;
  *(_DWORD *)(v3 + 56) = 1;
  *(_WORD *)(v3 + 60) = 256;
  if (v9)
  {
    v19 = (unint64_t *)&v9->__shared_owners_;
    do
      v20 = __ldaxr(v19);
    while (__stlxr(v20 - 1, v19));
    if (!v20)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B006AF4()
{
  sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/FormatAlgorithm.h", 523, (uint64_t)"", 0, (uint64_t)"Runtime format not in given Formats list", 40, (void (*)(void **))sub_20B532360);
  abort();
}

void sub_20B006BF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20B0016AC(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006C44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20B0016AC(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006C58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20B001198(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20B001198(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006CBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20B000C84(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006D0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20B000C84(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20B00076C(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006D70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20B00076C(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006D84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20B000254(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20B000254(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006DE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFFD40(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006E38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFFD40(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006E4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFF82C(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006E9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFF82C(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006EB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFF314(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006F00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFF314(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006F14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFEE00(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006F64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFEE00(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006F78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFE8EC(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006FC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFE8EC(&a26);
  _Unwind_Resume(a1);
}

void sub_20B006FDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFE3D4(&a26);
  _Unwind_Resume(a1);
}

void sub_20B00702C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFE3D4(&a26);
  _Unwind_Resume(a1);
}

void sub_20B007040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFDEBC(&a26);
  _Unwind_Resume(a1);
}

void sub_20B007090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFDEBC(&a26);
  _Unwind_Resume(a1);
}

void sub_20B0070A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFD9A8(&a26);
  _Unwind_Resume(a1);
}

void sub_20B0070F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFD9A8(&a26);
  _Unwind_Resume(a1);
}

void sub_20B007108(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFD490(&a26);
  _Unwind_Resume(a1);
}

void sub_20B007158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFD490(&a26);
  _Unwind_Resume(a1);
}

void sub_20B00716C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFCF88(&a26);
  _Unwind_Resume(a1);
}

void sub_20B0071BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFCF88(&a26);
  _Unwind_Resume(a1);
}

void sub_20B0071D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFCA80(&a26);
  _Unwind_Resume(a1);
}

void sub_20B007220(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFCA80(&a26);
  _Unwind_Resume(a1);
}

void sub_20B007234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  std::__shared_weak_count *v27;
  uint64_t v28;
  unint64_t *v29;
  unint64_t v31;

  sub_20AEC147C(v28);
  do
    v31 = __ldaxr(v29);
  while (__stlxr(v31 - 1, v29));
  if (!v31)
  {
    ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
    std::__shared_weak_count::__release_weak(v27);
  }
  sub_20AEC147C((uint64_t)&a27);
  sub_20AFFC4E4(&a26);
  _Unwind_Resume(a1);
}

void sub_20B007284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_20AFFC4E4(&a26);
  _Unwind_Resume(a1);
}

void sub_20B007298(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B2921B4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B0072AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B28E5A0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B0072C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B28E5A0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B0072D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B299510((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B0072E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B295B58((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B0072FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B28E5A0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B007310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B28E5A0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B007324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B2910AC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B007338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B28CDBC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B00734C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B28CDBC((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B007360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B298360((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B007374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B2949A8((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B007388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B28B8F4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B00739C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B296E58((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B0073B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B29349C((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B0073C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B28FBD4((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B0073D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20B28A564((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B0073F0()
{
  JUMPOUT(0x20BD3583CLL);
}

__n128 sub_20B007404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C41E150;
  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  return result;
}

__n128 sub_20B007420(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_24C41DFE8;
  return result;
}

__n128 sub_20B00743C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  result = *(__n128 *)(a3 + 8);
  *(__n128 *)(a2 + 8) = result;
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  *(_QWORD *)a2 = &off_24C41E008;
  return result;
}

void sub_20B00745C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B007474()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B00748C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0074A4()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0074BC()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0074D4()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0074EC()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B007504()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B00751C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B007534()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B00754C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B007564()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B00757C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B007594()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0075AC()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0075C4()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0075D8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B007640(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unsigned __int8 v15;
  __int16 v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;

  v4 = *(_QWORD *)(a1 + 8);
  v3 = *(std::__shared_weak_count **)(a1 + 16);
  v25 = v3;
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v24 = v3;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v24 = 0;
    v8 = *(_QWORD *)(a1 + 48);
    v22 = *(_QWORD *)(a1 + 32);
    v23 = *(_DWORD *)(a1 + 40);
    v9 = *(_DWORD *)(a1 + 56);
  }
  *(_QWORD *)a2 = v4;
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v22;
  *(_DWORD *)(a2 + 24) = v23;
  *(_QWORD *)(a2 + 32) = v8;
  *(_DWORD *)(a2 + 40) = v9;
  if (v4)
  {
    if (v3)
    {
      v11 = (unint64_t *)&v3->__shared_owners_;
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      do
        v13 = __ldaxr(v11);
      while (__stlxr(v13 - 1, v11));
      if (!v13)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 104))(v4);
    if ((v14 & 0xFFFFFFu) <= 0x10000)
      v15 = 0;
    else
      v15 = v14;
    v16 = v14 & 0xFF00;
    if ((v14 & 0xFF0000) == 0)
      v16 = 0;
    v3 = v24;
    *(_WORD *)(a2 + 44) = v16 & 0xFF00 | v15;
    if (!v24)
      goto LABEL_28;
  }
  else
  {
    *(_WORD *)(a2 + 44) = 0;
    if (!v3)
      goto LABEL_28;
  }
  v17 = (unint64_t *)&v3->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (!v18)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v19 = v25;
    if (!v25)
      return;
    goto LABEL_29;
  }
LABEL_28:
  v19 = v25;
  if (!v25)
    return;
LABEL_29:
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (!v21)
  {
    ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
    std::__shared_weak_count::__release_weak(v19);
  }
}

void sub_20B00781C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  va_list va;
  uint64_t v10;
  va_list va1;

  va_start(va1, a3);
  va_start(va, a3);
  v8 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v5 = *(std::__shared_weak_count **)(v3 + 8);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  sub_20AEC147C((uint64_t)va);
  sub_20AEC147C((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B007870(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0078D8(uint64_t a1)
{
  return *(unsigned int *)(a1 + 48);
}

uint64_t sub_20B0078E0(uint64_t a1)
{
  return a1 + 24;
}

uint64_t sub_20B0078E8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 24);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 32);
  return result;
}

uint64_t sub_20B0078FC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldxr(p_shared_owners);
    while (__stxr(v4 + 1, p_shared_owners));
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  return v1;
}

_DWORD *sub_20B007980(_DWORD ***a1)
{
  return sub_20B007E38(**a1, (char *)(*a1)[1]);
}

void sub_20B00798C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C400000[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B007B44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B007B88(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B007E18(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B007E30(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_20B007E38(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C400000[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20B007F28(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  int v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 __p;
  uint64_t v8;
  unsigned __int8 v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  char v15;
  char v16;

  if (a1 - 1 > 0x27)
  {
    sub_20B030AC8(a1, (uint64_t)&v6);
    *(_OWORD *)a2 = v6;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v16)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v4 = v9;
      if (v9)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v8;
        v8 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v15)
      {
        v5 = v12;
        *(_QWORD *)(a2 + 64) = v11;
        *(_OWORD *)(a2 + 48) = v10;
        v10 = 0uLL;
        *(_QWORD *)(a2 + 72) = v5;
        *(_OWORD *)(a2 + 80) = v13;
        *(_QWORD *)(a2 + 96) = v14;
        v11 = 0;
        v13 = 0uLL;
        v14 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v4 && SHIBYTE(v8) < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
    }
  }
  else
  {
    v3 = 1;
    if (a1 - 1 < 4)
    {
LABEL_19:
      *(_DWORD *)a2 = v3;
      *(_BYTE *)(a2 + 120) = 1;
      return;
    }
    if (a1 - 5 < 4)
    {
      *(_DWORD *)a2 = 2;
      *(_BYTE *)(a2 + 120) = 1;
      return;
    }
    if (a1 - 9 >= 0x10 || ((0xFF0Fu >> (a1 - 9)) & 1) == 0)
    {
      v3 = 4;
      if (a1 - 13 >= 4 && a1 - 25 >= 0x10)
      {
        sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/Format.h", 493, (uint64_t)&unk_20B5A460D, 0, (uint64_t)"unsupported format", 18, (void (*)(void **))sub_20B532360);
        abort();
      }
      goto LABEL_19;
    }
    *(_DWORD *)a2 = 3;
    *(_BYTE *)(a2 + 120) = 1;
  }
}

void sub_20B008108(unsigned int a1@<W0>, uint64_t a2@<X8>)
{
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  __int128 v8;
  __int128 __p;
  uint64_t v10;
  unsigned __int8 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  char v17;
  char v18;

  if (a1 - 1 <= 0x27)
  {
    if (a1 - 1 >= 4)
    {
      if (a1 - 5 >= 4)
      {
        if (a1 - 9 < 0x10 && ((0xFF0Fu >> (a1 - 9)) & 1) != 0)
        {
          v3 = 3;
          v4 = (a1 & 3) - 1;
          if (v4 > 2)
          {
LABEL_25:
            v7 = 4;
            goto LABEL_26;
          }
        }
        else
        {
          v3 = 4;
          if (a1 - 13 >= 4 && a1 - 25 >= 0x10)
          {
            sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/Format.h", 493, (uint64_t)&unk_20B5A460D, 0, (uint64_t)"unsupported format", 18, (void (*)(void **))sub_20B532360);
            abort();
          }
          v4 = (a1 & 3) - 1;
          if (v4 > 2)
            goto LABEL_25;
        }
      }
      else
      {
        v3 = 2;
        v4 = (a1 & 3) - 1;
        if (v4 > 2)
          goto LABEL_25;
      }
    }
    else
    {
      v3 = 1;
      v4 = (a1 & 3) - 1;
      if (v4 > 2)
        goto LABEL_25;
    }
    v7 = dword_20B5D1C48[v4];
LABEL_26:
    *(_DWORD *)a2 = v7 * v3;
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  sub_20B030AC8(a1, (uint64_t)&v8);
  *(_OWORD *)a2 = v8;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v18)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v5 = v11;
    if (v11)
    {
      *(_OWORD *)(a2 + 16) = __p;
      *(_QWORD *)(a2 + 32) = v10;
      v10 = 0;
      __p = 0uLL;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v17)
    {
      v6 = v14;
      *(_QWORD *)(a2 + 64) = v13;
      *(_OWORD *)(a2 + 48) = v12;
      v12 = 0uLL;
      *(_QWORD *)(a2 + 72) = v6;
      *(_OWORD *)(a2 + 80) = v15;
      *(_QWORD *)(a2 + 96) = v16;
      v13 = 0;
      v15 = 0uLL;
      v16 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v5 && SHIBYTE(v10) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a2 + 120) = 0;
  }
}

uint64_t sub_20B008318(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  __int16 v10;
  unint64_t v11;
  uint64_t v12;
  __int128 *v13;
  unint64_t *v14;
  unint64_t v15;
  __int128 v16;

  *(_QWORD *)a1 = &off_24C403F68;
  *(_QWORD *)(a1 + 8) = &off_24C3F2CB0;
  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(std::__shared_weak_count **)(a2 + 16);
  v5 = a2 + 8;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_DWORD *)(a2 + 48);
    v10 = *(_WORD *)(a2 + 52);
    do
      v11 = __ldxr(p_shared_owners);
    while (__stxr(v11 + 1, p_shared_owners));
  }
  else
  {
    v8 = *(_QWORD *)(a2 + 40);
    v9 = *(_DWORD *)(a2 + 48);
    v10 = *(_WORD *)(a2 + 52);
  }
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  v13 = (__int128 *)(a2 + 24);
  v12 = *(_QWORD *)(a2 + 24);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 32);
  *(_QWORD *)(a1 + 32) = v12;
  *(_QWORD *)(a1 + 48) = v8;
  *(_DWORD *)(a1 + 56) = v9;
  *(_WORD *)(a1 + 60) = v10;
  if (v4)
  {
    v14 = (unint64_t *)&v4->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  *(_QWORD *)(a1 + 64) = &off_24C3F2D20;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)v5;
  *(_QWORD *)v5 = 0;
  *(_QWORD *)(v5 + 8) = 0;
  v16 = *v13;
  *(_OWORD *)(a1 + 102) = *(__int128 *)((char *)v13 + 14);
  *(_OWORD *)(a1 + 88) = v16;
  *(_BYTE *)(a1 + 120) = 1;
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  return a1;
}

uint64_t sub_20B008430(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;

  *(_QWORD *)a1 = &off_24C403F68;
  if (*(_BYTE *)(a1 + 152))
  {
    *(_QWORD *)(a1 + 128) = &off_24C4169B8;
    v2 = *(std::__shared_weak_count **)(a1 + 144);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  if (*(_BYTE *)(a1 + 120))
  {
    *(_QWORD *)(a1 + 64) = &off_24C3F2D20;
    v5 = *(std::__shared_weak_count **)(a1 + 80);
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  *(_QWORD *)(a1 + 8) = &off_24C3F2CB0;
  v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v8)
    return a1;
  v9 = (unint64_t *)&v8->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
    return a1;
  ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
  std::__shared_weak_count::__release_weak(v8);
  return a1;
}

void sub_20B00854C(uint64_t a1)
{
  sub_20B008430(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B008570(_DWORD *a1)
{
  int v1;
  int v2;
  int v3;
  int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v1 = a1[8];
  if (!v1)
    return 0;
  v2 = a1[9];
  if (!v2)
    return 0;
  v3 = a1[14];
  if ((v3 - 1) >= 4)
  {
    if ((v3 - 5) >= 4)
    {
      if ((v3 - 9) < 0x10 && ((0xFF0Fu >> (v3 - 9)) & 1) != 0)
      {
        v4 = 3;
      }
      else
      {
        v4 = 4;
        if ((v3 - 13) >= 4 && (v3 - 25) >= 0x10)
        {
          if (!v3)
          {
            sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/Format.h", 491, (uint64_t)&unk_20B5A460D, 0, (uint64_t)"dynamic format properties only known at runtime", 47, (void (*)(void **))sub_20B532360);
            abort();
          }
          sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/Format.h", 493, (uint64_t)&unk_20B5A460D, 0, (uint64_t)"unsupported format", 18, (void (*)(void **))sub_20B532360);
          abort();
        }
      }
    }
    else
    {
      v4 = 2;
    }
  }
  else
  {
    v4 = 1;
  }
  v6 = (a1[10] * (v2 - 1));
  v7 = (v4 * v1);
  v8 = (a1[14] & 3) - 1;
  if (v8 > 2)
    return v6 + 4 * v7;
  else
    return v6 + qword_20B5D1C58[v8] * v7;
}

BOOL sub_20B00869C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  _BOOL8 result;

  if (*(_BYTE *)(a1 + 60) && *(_QWORD *)(a1 + 48))
  {
    v4 = *(_QWORD *)(a1 + 16);
    v5 = *(std::__shared_weak_count **)(a1 + 24);
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldxr(p_shared_owners);
      while (__stxr(v7 + 1, p_shared_owners));
      do
        v8 = __ldaxr(p_shared_owners);
      while (__stlxr(v8 - 1, p_shared_owners));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v4 + 88))(v4, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
  }
  v9 = *(_QWORD *)(a1 + 48);
  v10 = *(_QWORD *)(a2 + 48);
  if (*(_BYTE *)(a2 + 60))
    v11 = v10 == 0;
  else
    v11 = 1;
  if (!v11)
  {
    v12 = *(_QWORD *)(a2 + 16);
    v13 = *(std::__shared_weak_count **)(a2 + 24);
    if (v13)
    {
      v14 = (unint64_t *)&v13->__shared_owners_;
      do
        v15 = __ldxr(v14);
      while (__stxr(v15 + 1, v14));
      do
        v16 = __ldaxr(v14);
      while (__stlxr(v16 - 1, v14));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
    (*(void (**)(uint64_t, _QWORD, const char *))(*(_QWORD *)v12 + 88))(v12, 0, "/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Image/include/Kit/Image/SharedImage.h:1234");
    v10 = *(_QWORD *)(a2 + 48);
  }
  if (v9 != v10)
    return sub_20B008864(a1 + 8, a2 + 8);
  if (*(_QWORD *)(a1 + 48) != v9)
    return 0;
  if (*(_DWORD *)(a1 + 56) != *(_DWORD *)(a2 + 56))
    return 0;
  result = 0;
  if (*(_DWORD *)(a1 + 32) == *(_DWORD *)(a2 + 32) && *(_DWORD *)(a1 + 36) == *(_DWORD *)(a2 + 36))
    return *(_DWORD *)(a1 + 40) == *(_DWORD *)(a2 + 40);
  return result;
}

BOOL sub_20B008864(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  _BOOL8 v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v5)
  {
    if (!v4)
    {
LABEL_21:
      v27 = 0;
      v13 = *(_QWORD *)(a2 + 8);
      v14 = *(std::__shared_weak_count **)(a2 + 16);
      if (v14)
        goto LABEL_22;
LABEL_18:
      if (!v13)
        goto LABEL_37;
      goto LABEL_34;
    }
    goto LABEL_16;
  }
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  do
    v8 = __ldaxr(p_shared_owners);
  while (__stlxr(v8 - 1, p_shared_owners));
  if (v8)
  {
    if (!v4)
      goto LABEL_21;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
    if (!v4)
      goto LABEL_21;
  }
  v4 = *(_QWORD *)(a1 + 8);
  v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v9)
    goto LABEL_16;
  v10 = (unint64_t *)&v9->__shared_owners_;
  do
    v11 = __ldxr(v10);
  while (__stxr(v11 + 1, v10));
  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (v12)
  {
LABEL_16:
    if (!*(_BYTE *)(a1 + 53))
      goto LABEL_21;
    goto LABEL_17;
  }
  ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
  std::__shared_weak_count::__release_weak(v9);
  if (!*(_BYTE *)(a1 + 53))
    goto LABEL_21;
LABEL_17:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v4 + 96))(&v27, v4, 0);
  v13 = *(_QWORD *)(a2 + 8);
  v14 = *(std::__shared_weak_count **)(a2 + 16);
  if (!v14)
    goto LABEL_18;
LABEL_22:
  v15 = (unint64_t *)&v14->__shared_owners_;
  do
    v16 = __ldxr(v15);
  while (__stxr(v16 + 1, v15));
  do
    v17 = __ldaxr(v15);
  while (__stlxr(v17 - 1, v15));
  if (v17)
  {
    if (!v13)
      goto LABEL_37;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
    std::__shared_weak_count::__release_weak(v14);
    if (!v13)
      goto LABEL_37;
  }
  v13 = *(_QWORD *)(a2 + 8);
  v18 = *(std::__shared_weak_count **)(a2 + 16);
  if (v18)
  {
    v19 = (unint64_t *)&v18->__shared_owners_;
    do
      v20 = __ldxr(v19);
    while (__stxr(v20 + 1, v19));
    do
      v21 = __ldaxr(v19);
    while (__stlxr(v21 - 1, v19));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
      std::__shared_weak_count::__release_weak(v18);
      if (*(_BYTE *)(a2 + 53))
        goto LABEL_35;
      goto LABEL_37;
    }
  }
LABEL_34:
  if (*(_BYTE *)(a2 + 53))
  {
LABEL_35:
    (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v13 + 96))(&v26, v13, 0);
    goto LABEL_38;
  }
LABEL_37:
  v26 = 0;
LABEL_38:
  v22 = sub_20B02E7F4(a1, a2);
  v23 = v26;
  v26 = 0;
  if (v23)
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  v24 = v27;
  v27 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return v22;
}

void sub_20B008A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a10)
    _Unwind_Resume(exception_object);
  (*(void (**)(uint64_t))(*(_QWORD *)a10 + 8))(a10);
  _Unwind_Resume(exception_object);
}

void sub_20B008AE8(int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  sub_20B02F008(a1, a2, a3, 0, 0, 0, a4);
}

void sub_20B008AF8(int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  sub_20B02F008(a1, a2, a3, 1u, 0, 0, a4);
}

void sub_20B008B08(int a1@<W0>, uint64_t a2@<X1>, unsigned int a3@<W2>, std::string::size_type a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  sub_20B02F008(a1, a2, a3, 2u, a4, a5, a6);
}

void sub_20B008B18(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X2>, int a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X8>)
{
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  int v21;
  __int128 v22;
  __int128 v23;
  _BYTE *v24;
  _BYTE *v25;
  int v26;
  uint64_t v27;
  __int128 v28;
  void *__p;
  char v30;
  unsigned __int8 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  char v38;
  _QWORD v39[3];
  _BYTE v40[24];
  _BYTE v41[32];
  char v42;
  void *v43;
  char v44;
  char v45;
  char v46;
  char v47;
  _QWORD v48[6];
  __int128 v49;
  __int128 v50;
  _BYTE v51[32];
  uint64_t (**v52)();
  _BYTE v53[46];
  char v54;
  char v55;
  __int128 v56;
  char v57;
  unsigned __int8 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  int v63;

  v62 = a2;
  v63 = a4;
  v60 = a5;
  v61 = a3;
  v59 = a6;
  if (a2 - 1 < 0x28)
  {
    *(_QWORD *)v40 = &off_24C3F2D20;
    sub_20B02EAA8((uint64_t)&v40[8]);
    *(_QWORD *)&v49 = &off_24C403F68;
    *((_QWORD *)&v49 + 1) = &off_24C3F2CB0;
    v9 = *(_QWORD *)&v40[8];
    v10 = *(std::__shared_weak_count **)&v40[16];
    if (*(_QWORD *)&v40[16])
    {
      v11 = (unint64_t *)(*(_QWORD *)&v40[16] + 8);
      do
        v12 = __ldxr(v11);
      while (__stxr(v12 + 1, v11));
      v13 = *(_QWORD *)&v41[16];
      v14 = *(_DWORD *)&v41[24];
      v15 = *(_WORD *)&v41[28];
      do
        v16 = __ldxr(v11);
      while (__stxr(v16 + 1, v11));
    }
    else
    {
      v13 = *(_QWORD *)&v41[16];
      v14 = *(_DWORD *)&v41[24];
      v15 = *(_WORD *)&v41[28];
    }
    *(_QWORD *)&v50 = v9;
    *((_QWORD *)&v50 + 1) = v10;
    *(_QWORD *)v51 = *(_QWORD *)v41;
    *(_DWORD *)&v51[8] = *(_DWORD *)&v41[8];
    *(_QWORD *)&v51[16] = v13;
    *(_DWORD *)&v51[24] = v14;
    *(_WORD *)&v51[28] = v15;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
    v52 = &off_24C3F2D20;
    *(_OWORD *)v53 = *(_OWORD *)&v40[8];
    *(_OWORD *)&v53[16] = *(_OWORD *)v41;
    *(_OWORD *)&v53[30] = *(_OWORD *)&v41[14];
    v54 = 1;
    v55 = 0;
    v57 = 0;
    v58 = 1;
    v48[0] = &v61;
    v48[1] = a1;
    v48[2] = &v63;
    v48[3] = &v49;
    v48[4] = &v59;
    v48[5] = &v60;
    v39[0] = &v62;
    v39[1] = v48;
    v39[2] = &v49;
    *(_QWORD *)&v28 = &off_24C400A98;
    *((_QWORD *)&v28 + 1) = v39;
    sub_20B52A3E8((uint64_t)&v28, (uint64_t)v40);
    if (v47)
    {
      *(_BYTE *)a7 = 0;
      v21 = v58;
      *(_BYTE *)(a7 + 160) = v58;
      if (!v21)
      {
        *(_OWORD *)a7 = v49;
        *(_BYTE *)(a7 + 16) = 0;
        *(_BYTE *)(a7 + 112) = 0;
        v24 = (_BYTE *)(a7 + 112);
        if (!v53[40])
          goto LABEL_42;
        *(_BYTE *)(a7 + 40) = 0;
        if (v51[8])
        {
          *(_OWORD *)(a7 + 16) = v50;
          *(_QWORD *)(a7 + 32) = *(_QWORD *)v51;
          *(_QWORD *)v51 = 0;
          v50 = 0uLL;
          *(_BYTE *)(a7 + 40) = 1;
        }
        *(_BYTE *)(a7 + 48) = 0;
        *(_BYTE *)(a7 + 104) = 0;
        if (v53[32])
        {
          *(_OWORD *)(a7 + 48) = *(_OWORD *)&v51[16];
          *(_QWORD *)(a7 + 64) = v52;
          *(_QWORD *)&v51[24] = 0;
          v52 = 0;
          *(_QWORD *)&v51[16] = 0;
          *(_QWORD *)(a7 + 72) = *(_QWORD *)v53;
          *(_OWORD *)(a7 + 80) = *(_OWORD *)&v53[8];
          *(_QWORD *)(a7 + 96) = *(_QWORD *)&v53[24];
          memset(&v53[8], 0, 24);
          *(_BYTE *)(a7 + 104) = 1;
        }
        goto LABEL_41;
      }
      *(_QWORD *)a7 = &off_24C403F68;
      *(_QWORD *)(a7 + 8) = &off_24C3F2CB0;
      v22 = v50;
      v50 = 0uLL;
      v23 = *(_OWORD *)v51;
      *(_OWORD *)(a7 + 16) = v22;
      *(_OWORD *)(a7 + 32) = v23;
      *(_OWORD *)(a7 + 46) = *(_OWORD *)&v51[14];
      *(_BYTE *)(a7 + 64) = 0;
      *(_BYTE *)(a7 + 120) = 0;
      if (v54)
      {
        *(_QWORD *)(a7 + 64) = &off_24C3F2D20;
        *(_OWORD *)(a7 + 72) = *(_OWORD *)v53;
        *(_QWORD *)v53 = 0;
        *(_QWORD *)&v53[8] = 0;
        *(_OWORD *)(a7 + 88) = *(_OWORD *)&v53[16];
        *(_OWORD *)(a7 + 102) = *(_OWORD *)&v53[30];
        *(_BYTE *)(a7 + 120) = 1;
      }
      *(_BYTE *)(a7 + 152) = 0;
      v24 = (_BYTE *)(a7 + 152);
      *(_BYTE *)(a7 + 128) = 0;
      if (v57)
      {
        *(_QWORD *)(a7 + 128) = &off_24C4169B8;
        *(_OWORD *)(a7 + 136) = v56;
        v56 = 0uLL;
LABEL_41:
        *v24 = 1;
      }
    }
    else
    {
      v28 = *(_OWORD *)v40;
      v25 = sub_20AECEBD0(&__p, (__int128 *)&v40[16]);
      *(_OWORD *)a7 = v28;
      *(_BYTE *)(a7 + 16) = 0;
      *(_BYTE *)(a7 + 112) = 0;
      if (v38)
      {
        *(_BYTE *)(a7 + 40) = 0;
        v26 = v31;
        if (v31)
        {
          *(_OWORD *)(a7 + 16) = *(_OWORD *)v25;
          *(_QWORD *)(a7 + 32) = *((_QWORD *)v25 + 2);
          *((_QWORD *)v25 + 1) = 0;
          *((_QWORD *)v25 + 2) = 0;
          *(_QWORD *)v25 = 0;
          *(_BYTE *)(a7 + 40) = 1;
        }
        *(_BYTE *)(a7 + 48) = 0;
        *(_BYTE *)(a7 + 104) = 0;
        if (v37)
        {
          v27 = v34;
          *(_QWORD *)(a7 + 64) = v33;
          *(_OWORD *)(a7 + 48) = v32;
          v32 = 0uLL;
          *(_QWORD *)(a7 + 72) = v27;
          *(_OWORD *)(a7 + 80) = v35;
          *(_QWORD *)(a7 + 96) = v36;
          v33 = 0;
          v35 = 0uLL;
          v36 = 0;
          *(_BYTE *)(a7 + 104) = 1;
        }
        *(_BYTE *)(a7 + 112) = 1;
        *(_BYTE *)(a7 + 160) = 0;
        if (v26 && v30 < 0)
          operator delete(__p);
      }
      else
      {
        *(_BYTE *)(a7 + 160) = 0;
      }
      if (!v47 && v46)
      {
        if (v45)
        {
          if (v44 < 0)
            operator delete(v43);
          if (v42 < 0)
            operator delete(*(void **)&v41[24]);
        }
        if (v41[16] && (v41[15] & 0x80000000) != 0)
          operator delete(*(void **)&v40[16]);
      }
    }
LABEL_42:
    if (v58)
    {
      (*(void (**)(__int128 *))v49)(&v49);
      return;
    }
    if (v53[40])
    {
      if (v53[32])
      {
        if ((v53[31] & 0x80000000) != 0)
          operator delete(*(void **)&v53[8]);
        if (SHIBYTE(v52) < 0)
          operator delete(*(void **)&v51[16]);
      }
      if (v51[8])
        goto LABEL_51;
    }
    return;
  }
  sub_20B030AC8(a2, (uint64_t)&v49);
  *(_OWORD *)a7 = v49;
  *(_BYTE *)(a7 + 16) = 0;
  *(_BYTE *)(a7 + 112) = 0;
  if (!v53[40])
  {
    *(_BYTE *)(a7 + 160) = 0;
    return;
  }
  *(_BYTE *)(a7 + 40) = 0;
  v17 = v51[8];
  if (v51[8])
  {
    *(_OWORD *)(a7 + 16) = v50;
    *(_QWORD *)(a7 + 32) = *(_QWORD *)v51;
    *(_QWORD *)v51 = 0;
    v50 = 0uLL;
    *(_BYTE *)(a7 + 40) = 1;
  }
  *(_BYTE *)(a7 + 48) = 0;
  *(_BYTE *)(a7 + 104) = 0;
  if (v53[32])
  {
    v18 = *(_QWORD *)v53;
    *(_QWORD *)(a7 + 64) = v52;
    *(_OWORD *)(a7 + 48) = *(_OWORD *)&v51[16];
    *(_QWORD *)&v51[16] = 0;
    *(_QWORD *)&v51[24] = 0;
    *(_QWORD *)(a7 + 72) = v18;
    *(_OWORD *)(a7 + 80) = *(_OWORD *)&v53[8];
    *(_QWORD *)(a7 + 96) = *(_QWORD *)&v53[24];
    v52 = 0;
    memset(&v53[8], 0, 24);
    *(_BYTE *)(a7 + 104) = 1;
  }
  *(_BYTE *)(a7 + 112) = 1;
  *(_BYTE *)(a7 + 160) = 0;
  if (v17)
  {
LABEL_51:
    if ((v51[7] & 0x80000000) != 0)
      operator delete((void *)v50);
  }
}

void sub_20B00907C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  sub_20AECD704((uint64_t)&a28);
  sub_20AEF07DC((uint64_t)&a50);
  _Unwind_Resume(a1);
}

void sub_20B009098(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,char a50)
{
  sub_20AEF07DC((uint64_t)&a50);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0090AC@<X0>(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v6;
  mach_timebase_info v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  unsigned __int8 v14;
  unsigned __int128 *v15;
  unsigned __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  mach_timebase_info info;
  std::__shared_weak_count *v26;
  __int128 v27[33];
  mach_timebase_info v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  __int128 v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  unsigned __int128 v40;
  char v41;
  _BYTE v42[40];
  uint64_t v43;

  v43 = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 8;
  if (*((_BYTE *)a2 + 384))
  {
    if (*((_BYTE *)a2 + 168))
    {
      v7 = (mach_timebase_info)*((_QWORD *)a2 + 19);
      v6 = *((_QWORD *)a2 + 20);
      if (*((_BYTE *)a2 + 24))
        goto LABEL_4;
    }
    else
    {
      v6 = mach_continuous_time();
      v14 = atomic_load((unsigned __int8 *)&qword_25463D170);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
      {
        mach_timebase_info(&v28);
        LODWORD(v23) = v28.numer;
        LODWORD(v24) = v28.denom;
        *(double *)&qword_25463D168 = (double)v23 / (double)v24;
        __cxa_guard_release(&qword_25463D170);
      }
      v7 = (mach_timebase_info)llround(*(double *)&qword_25463D168 * (double)v6);
      LOBYTE(v6) = 2;
      if (*((_BYTE *)a2 + 24))
      {
LABEL_4:
        sub_20AFA84B0((uint64_t *)a2, 1000000000);
        v8 = *((unsigned __int8 *)a2 + 24);
        v28 = v7;
        LOBYTE(v29) = v6;
        LOBYTE(v30) = 0;
        v32 = 0;
        if (v8)
        {
          if (*((char *)a2 + 23) < 0)
          {
            sub_20AEC60F4(&v30, *(void **)a2, *((_QWORD *)a2 + 1));
          }
          else
          {
            v30 = *a2;
            v31 = *((_QWORD *)a2 + 2);
          }
          v32 = 1;
          LOBYTE(v33) = 0;
          v35 = 0;
          if (!*((_BYTE *)a2 + 120))
          {
LABEL_24:
            LOBYTE(v36) = 0;
            v37 = 0;
            if (!*((_BYTE *)a2 + 144))
            {
LABEL_26:
              LOBYTE(v38) = 0;
              v41 = 0;
              if (*((_BYTE *)a2 + 80))
              {
                if (*((char *)a2 + 55) < 0)
                {
                  sub_20AEC60F4(&v38, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
                }
                else
                {
                  v38 = a2[2];
                  v39 = *((_QWORD *)a2 + 6);
                }
                v15 = (unsigned __int128 *)(a2 + 4);
                do
                  v16 = __ldaxp(v15);
                while (__stlxp(v16, v15));
                v40 = v16;
                v41 = 1;
              }
              sub_20AED3838((uint64_t)v42, (uint64_t)(a2 + 11));
              sub_20B02EDEC(&info, v4, (uint64_t)&v28);
              sub_20AFA7F18((uint64_t)v27, (uint64_t)&info);
              v17 = v26;
              if (v26)
              {
                p_shared_owners = (unint64_t *)&v26->__shared_owners_;
                do
                  v19 = __ldaxr(p_shared_owners);
                while (__stlxr(v19 - 1, p_shared_owners));
                if (!v19)
                {
                  ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
                  std::__shared_weak_count::__release_weak(v17);
                }
              }
              sub_20AF4EA3C((uint64_t)&v28);
              goto LABEL_39;
            }
LABEL_25:
            v36 = a2[8];
            v37 = 1;
            goto LABEL_26;
          }
LABEL_17:
          if (*((char *)a2 + 119) < 0)
          {
            sub_20AEC60F4(&v33, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
          }
          else
          {
            v33 = a2[6];
            v34 = *((_QWORD *)a2 + 14);
          }
          v35 = 1;
          LOBYTE(v36) = 0;
          v37 = 0;
          if (!*((_BYTE *)a2 + 144))
            goto LABEL_26;
          goto LABEL_25;
        }
LABEL_16:
        LOBYTE(v33) = 0;
        v35 = 0;
        if (!*((_BYTE *)a2 + 120))
          goto LABEL_24;
        goto LABEL_17;
      }
    }
    v28 = v7;
    LOBYTE(v29) = v6;
    LOBYTE(v30) = 0;
    v32 = 0;
    goto LABEL_16;
  }
  v9 = mach_continuous_time();
  v10 = atomic_load((unsigned __int8 *)&qword_25463D170);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
  {
    mach_timebase_info(&info);
    LODWORD(v21) = info.numer;
    LODWORD(v22) = info.denom;
    *(double *)&qword_25463D168 = (double)v21 / (double)v22;
    __cxa_guard_release(&qword_25463D170);
  }
  v28 = (mach_timebase_info)llround(*(double *)&qword_25463D168 * (double)v9);
  v29 = 2;
  LOBYTE(v30) = 0;
  v32 = 0;
  LOBYTE(v33) = 0;
  v35 = 0;
  LOBYTE(v36) = 0;
  v37 = 0;
  LOBYTE(v38) = 0;
  v41 = 0;
  v42[0] = 0;
  v42[24] = 0;
  sub_20B02EDEC(&info, v4, (uint64_t)&v28);
  sub_20AF4EA3C((uint64_t)&v28);
  sub_20AFA7F18((uint64_t)v27, (uint64_t)&info);
  v11 = v26;
  if (v26)
  {
    v12 = (unint64_t *)&v26->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
LABEL_39:
  sub_20AF4BAD4(a3, 0, v27);
  *(_BYTE *)(a3 + 528) = 1;
  return sub_20AED5474((uint64_t)v27);
}

void sub_20B009490(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B0094A8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B0094C0(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x258]))
  {
    if (SLOBYTE(STACK[0x257]) < 0)
      operator delete((void *)STACK[0x240]);
  }
  _Unwind_Resume(a1);
}

void sub_20B009584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AED5474((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B009598(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t (***v4)();
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  char v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  uint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  unint64_t v23;
  unsigned __int8 v24;
  int v25;
  uint64_t v26;
  void **v27;
  void **v28;
  void *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  void *v33;
  __int128 v34;
  char v35;
  void *v36[2];
  uint64_t v37;
  int v38;
  void *v39;
  void **v40;
  __int128 v41;
  __int128 __p;
  uint64_t v43;
  unsigned __int8 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __int128 __dst;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = *(uint64_t (****)())(a1 + 424);
  v5 = *(std::__shared_weak_count **)(a1 + 432);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4 && *v4 == &off_24C411FE8)
  {
    v8 = 1;
    if (!v5)
      goto LABEL_12;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_12;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_12:
    if ((v8 & 1) != 0)
      goto LABEL_13;
LABEL_27:
    v12 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_28;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if ((v8 & 1) == 0)
    goto LABEL_27;
LABEL_13:
  v11 = *(_QWORD *)(a1 + 424);
  v12 = *(std::__shared_weak_count **)(a1 + 432);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v52 = v11;
  v53 = v12;
  if (!v11)
  {
LABEL_28:
    v24 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v24 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
    {
      *(_OWORD *)v36 = xmmword_20B5B0AE0;
      sub_20B1DFBA8((uint64_t *)v36);
      __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF48);
    }
    if (byte_25463CDBF < 0)
    {
      sub_20AEC60F4(&__dst, (void *)xmmword_25463CDA8, *((unint64_t *)&xmmword_25463CDA8 + 1));
    }
    else
    {
      __dst = xmmword_25463CDA8;
      v55 = unk_25463CDB8;
    }
    v56 = dword_25463CDC0;
    sub_20AF4BC0C(&v39, (uint64_t)&__dst, 1uLL);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC60F4(v36, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)v36 = *(_OWORD *)a1;
      v37 = *(_QWORD *)(a1 + 16);
    }
    v38 = *(_DWORD *)(a1 + 24);
    v33 = operator new(0x20uLL);
    v34 = xmmword_20B5C7CA0;
    strcpy((char *)v33, "cannot return data as VZImage");
    v35 = 1;
    sub_20B099ED4((uint64_t *)&v39, (uint64_t)v36, (uint64_t)&v33, (uint64_t)&v41);
    *(_OWORD *)a2 = v41;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v51)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v25 = v44;
      if (v44)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v43;
        v43 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v50)
      {
        v26 = v47;
        *(_QWORD *)(a2 + 64) = v46;
        *(_OWORD *)(a2 + 48) = v45;
        v45 = 0uLL;
        *(_QWORD *)(a2 + 72) = v26;
        *(_OWORD *)(a2 + 80) = v48;
        *(_QWORD *)(a2 + 96) = v49;
        v46 = 0;
        v48 = 0uLL;
        v49 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 160) = 0;
      if (v25 && SHIBYTE(v43) < 0)
        operator delete((void *)__p);
      if (!v35)
      {
LABEL_48:
        if (SHIBYTE(v37) < 0)
          operator delete(v36[0]);
        v27 = (void **)v39;
        if (v39)
        {
          v28 = v40;
          v29 = v39;
          if (v40 != v39)
          {
            do
            {
              if (*((char *)v28 - 9) < 0)
                operator delete(*(v28 - 4));
              v28 -= 4;
            }
            while (v28 != v27);
            v29 = v39;
          }
          v40 = v27;
          operator delete(v29);
        }
        if (SHIBYTE(v55) < 0)
          operator delete((void *)__dst);
        if (v12)
          goto LABEL_64;
        return;
      }
    }
    else
    {
      *(_BYTE *)(a2 + 160) = 0;
      if (!v35)
        goto LABEL_48;
    }
    if (SHIBYTE(v34) < 0)
      operator delete(v33);
    goto LABEL_48;
  }
  v16 = *(_QWORD *)(v11 + 16);
  v15 = *(std::__shared_weak_count **)(v11 + 24);
  if (v15)
  {
    v17 = (unint64_t *)&v15->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
    v19 = *(_QWORD *)(v11 + 48);
    v20 = *(_DWORD *)(v11 + 56);
    v21 = *(_WORD *)(v11 + 60);
    do
      v22 = __ldxr(v17);
    while (__stxr(v22 + 1, v17));
    *(_QWORD *)&v32 = *(_QWORD *)(v11 + 32);
    DWORD2(v32) = *(_DWORD *)(v11 + 40);
    do
      v23 = __ldaxr(v17);
    while (__stlxr(v23 - 1, v17));
    if (!v23)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  else
  {
    v19 = *(_QWORD *)(v11 + 48);
    v20 = *(_DWORD *)(v11 + 56);
    v21 = *(_WORD *)(v11 + 60);
    *(_QWORD *)&v32 = *(_QWORD *)(v11 + 32);
    DWORD2(v32) = *(_DWORD *)(v11 + 40);
  }
  *(_QWORD *)a2 = &off_24C403F68;
  *(_QWORD *)(a2 + 8) = &off_24C3F2CB0;
  *(_QWORD *)(a2 + 16) = v16;
  *(_QWORD *)(a2 + 24) = v15;
  *(_OWORD *)(a2 + 32) = v32;
  *(_QWORD *)(a2 + 48) = v19;
  *(_DWORD *)(a2 + 56) = v20;
  *(_WORD *)(a2 + 60) = v21;
  *(_BYTE *)(a2 + 64) = 0;
  *(_BYTE *)(a2 + 120) = 0;
  *(_BYTE *)(a2 + 128) = 0;
  *(_BYTE *)(a2 + 152) = 0;
  *(_BYTE *)(a2 + 160) = 1;
  v12 = v53;
  if (v53)
  {
LABEL_64:
    v30 = (unint64_t *)&v12->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B009A4C(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_20B009A6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AF4BA50(&a25);
  if (*(char *)(v25 - 89) < 0)
    operator delete(*(void **)(v25 - 112));
  sub_20AEC147C(v25 - 128);
  _Unwind_Resume(a1);
}

void sub_20B009AF0()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B009B04(uint64_t a1)
{
  uint64_t v1;
  int v2;
  void *v3[2];
  uint64_t v4;
  char v5;
  __int128 v6;
  void *v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *__p;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;

  v1 = *(_QWORD *)(a1 + 8);
  sub_20B009E08((uint64_t)&v16, **(_DWORD **)v1);
  if (!v18)
  {
    v2 = SHIBYTE(v17);
    if (SHIBYTE(v17) < 0)
    {
      sub_20AEC60F4(v3, (void *)v16, *((unint64_t *)&v16 + 1));
    }
    else
    {
      *(_OWORD *)v3 = v16;
      v4 = v17;
    }
    v5 = 1;
    sub_20B099E24((__int128 *)v3, (uint64_t)&v6);
    sub_20B009CA0(*(_QWORD *)(v1 + 16), &v6);
    if (v15)
    {
      if (v14)
      {
        if (v13 < 0)
          operator delete(__p);
        if (v11 < 0)
          operator delete(v10);
      }
      if (v9 && v8 < 0)
        operator delete(v7);
    }
    if (v5 && SHIBYTE(v4) < 0)
      operator delete(v3[0]);
    if (v2 < 0)
      operator delete((void *)v16);
  }
}

void sub_20B009C14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,int a40,__int16 a41,char a42,char a43)
{
  void *v43;

  operator delete(v43);
  _Unwind_Resume(a1);
}

uint64_t sub_20B009CA0(uint64_t a1, __int128 *a2)
{
  uint64_t v3;
  __int128 v5;
  void *v6[2];
  uint64_t v7;
  char v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  char v15;
  char v16;

  v5 = *a2;
  LOBYTE(v6[0]) = 0;
  v15 = 0;
  if (*((_BYTE *)a2 + 112))
  {
    v8 = 0;
    if (*((_BYTE *)a2 + 40))
    {
      *(_OWORD *)v6 = a2[1];
      v7 = *((_QWORD *)a2 + 4);
      *((_QWORD *)a2 + 3) = 0;
      *((_QWORD *)a2 + 4) = 0;
      *((_QWORD *)a2 + 2) = 0;
      v8 = 1;
    }
    LOBYTE(v9) = 0;
    v14 = 0;
    if (*((_BYTE *)a2 + 104))
    {
      v3 = *((_QWORD *)a2 + 9);
      v10 = *((_QWORD *)a2 + 8);
      v9 = a2[3];
      *((_QWORD *)a2 + 7) = 0;
      *((_QWORD *)a2 + 8) = 0;
      *((_QWORD *)a2 + 6) = 0;
      v11 = v3;
      *(_OWORD *)__p = a2[5];
      v13 = *((_QWORD *)a2 + 12);
      *((_QWORD *)a2 + 10) = 0;
      *((_QWORD *)a2 + 11) = 0;
      *((_QWORD *)a2 + 12) = 0;
      v14 = 1;
    }
    v15 = 1;
  }
  v16 = 0;
  sub_20B0143E8((uint64_t)&v5, a1);
  if (v16)
  {
    (*(void (**)(__int128 *))v5)(&v5);
    return a1;
  }
  if (!v15)
    return a1;
  if (v14)
  {
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v10) < 0)
      operator delete((void *)v9);
  }
  if (!v8 || (SHIBYTE(v7) & 0x80000000) == 0)
    return a1;
  operator delete(v6[0]);
  return a1;
}

void sub_20B009DF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEF07DC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B009E08(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

_QWORD *sub_20B009E60()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t i;
  _QWORD *result;
  unsigned __int8 v4;
  uint64_t v5;
  unsigned int v6;
  _QWORD v7[7];
  _QWORD *v8;
  __int128 v9;
  const char *v10;
  const char *v11;
  char v12;
  _QWORD v13[3];
  int v14;
  unsigned int v15[72];

  v6 = 0;
  *(_OWORD *)(v0 + 176) = xmmword_20B5D1B0C;
  *(_OWORD *)(v0 + 192) = unk_20B5D1B1C;
  *(_OWORD *)(v0 + 208) = xmmword_20B5D1B2C;
  *(_OWORD *)(v0 + 224) = unk_20B5D1B3C;
  *(_OWORD *)(v0 + 112) = xmmword_20B5D1ACC;
  *(_OWORD *)(v0 + 128) = unk_20B5D1ADC;
  *(_OWORD *)(v0 + 144) = xmmword_20B5D1AEC;
  *(_OWORD *)(v0 + 160) = unk_20B5D1AFC;
  *(_OWORD *)(v0 + 80) = xmmword_20B5D1AAC;
  *(_OWORD *)(v0 + 96) = unk_20B5D1ABC;
  v14 = 0;
  sub_20AF5AD34(v13, "Invalid runtime format ");
  sub_20AF86710((uint64_t)&v12, (uint64_t)v13, &v6);
  v8 = v13;
  *(_QWORD *)&v9 = " for format list ";
  *((_QWORD *)&v9 + 1) = v13;
  v10 = " for format list ";
  v11 = " for format list ";
  if (v14 == -1)
    sub_20AECFAB8();
  v7[0] = &v8;
  ((void (*)(_QWORD *, _QWORD *))off_24C403F40[v14])(v7, v13);
  v8 = v13;
  *(_QWORD *)&v9 = "{";
  *((_QWORD *)&v9 + 1) = v13;
  v10 = "{";
  v11 = "{";
  if (v14 == -1)
    goto LABEL_11;
  v7[0] = &v8;
  ((void (*)(_QWORD *, _QWORD *))off_24C400B28[v14])(v7, v13);
  sub_20AF86710((uint64_t)&v8, (uint64_t)v13, v15);
  for (i = 1; i != 40; ++i)
  {
    v8 = v13;
    *(_QWORD *)&v9 = ",";
    *((_QWORD *)&v9 + 1) = v13;
    v10 = ",";
    v11 = ",";
    if (v14 == -1)
      goto LABEL_11;
    v7[0] = &v8;
    ((void (*)(_QWORD *, _QWORD *))off_24C400B28[v14])(v7, v13);
    sub_20AF86710((uint64_t)&v8, (uint64_t)v13, &v15[i]);
  }
  v8 = v13;
  *(_QWORD *)&v9 = "}";
  *((_QWORD *)&v9 + 1) = v13;
  v10 = "}";
  v11 = "}";
  if (v14 == -1)
LABEL_11:
    sub_20AECFAB8();
  v7[0] = &v8;
  ((void (*)(_QWORD *, _QWORD *))off_24C400B28[v14])(v7, v13);
  if (v14 == -1)
    sub_20AECFAB8();
  v7[0] = &v12;
  result = ((_QWORD *(*)(_QWORD **__return_ptr, _QWORD *, _QWORD *))off_24C400BA0[v14])(&v8, v7, v13);
  if (v14 != -1)
    result = (_QWORD *)((uint64_t (*)(_QWORD *, _QWORD *))off_24C400AC8[v14])(v7, v13);
  *(_QWORD *)(v0 + 7) = *(_QWORD *)((char *)&v9 + 7);
  v13[0] = v9;
  v4 = HIBYTE(v9);
  v5 = v9;
  *(_QWORD *)v1 = v8;
  *(_QWORD *)(v1 + 8) = v5;
  *(_QWORD *)(v1 + 15) = *(_QWORD *)(v0 + 7);
  *(_WORD *)(v1 + 23) = v4;
  return result;
}

void sub_20B00F268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,int a43,char a44,int a45,char a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  char a65;
  char a66;
  void *a67;
  char a72;
  void *__p;
  char a74;
  char a75;
  char a76;

  if (a76)
  {
    if (a75)
    {
      if (a74 < 0)
        operator delete(__p);
      if (a72 < 0)
        operator delete(a67);
    }
    if (a66 && a65 < 0)
      operator delete(a60);
  }
  if (!a46 && a44)
  {
    if (a42)
    {
      if (a41 < 0)
        operator delete(a36);
      if (a34 < 0)
        operator delete(a29);
    }
    if (a28)
    {
      if (a27 < 0)
      {
        operator delete(a22);
        _Unwind_Resume(a1);
      }
    }
  }
  _Unwind_Resume(a1);
}

void sub_20B011034(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  sub_20AECFA60((uint64_t)&a37);
  _Unwind_Resume(a1);
}

void sub_20B011048(unsigned int *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  int v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  void *v10[2];
  uint64_t v11;
  void *v12[2];
  uint64_t v13;
  char v14;
  __int128 v15;
  __int128 __p;
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;
  unsigned int v26;
  unsigned int v27;

  v26 = 1;
  v27 = a2;
  if (*a1 <= a2 || *a1 == 0 || a1[1] == 0)
  {
    *(_BYTE *)(a3 + 120) = 1;
  }
  else
  {
    v8 = *a1;
    v9 = 1;
    sub_20B011428("Image row byte stride ", &v27, (std::string *)" is invalid for the given size ", a1, (std::string *)" and pixel format ", &v9, (std::string *)". It must be at least: pixel byte size (", &v26, (std::string *)") x width (", a1, (std::string *)") = ", &v8, (std::string *)".");
    *(_OWORD *)v12 = *(_OWORD *)v10;
    v13 = v11;
    v10[1] = 0;
    v11 = 0;
    v10[0] = 0;
    v14 = 1;
    sub_20B099E24((__int128 *)v12, (uint64_t)&v15);
    *(_OWORD *)a3 = v15;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v25)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v6 = v18;
      if (v18)
      {
        *(_OWORD *)(a3 + 16) = __p;
        *(_QWORD *)(a3 + 32) = v17;
        v17 = 0;
        __p = 0uLL;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v24)
      {
        v7 = v21;
        *(_QWORD *)(a3 + 64) = v20;
        *(_OWORD *)(a3 + 48) = v19;
        v19 = 0uLL;
        *(_QWORD *)(a3 + 72) = v7;
        *(_OWORD *)(a3 + 80) = v22;
        *(_QWORD *)(a3 + 96) = v23;
        v20 = 0;
        v22 = 0uLL;
        v23 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v6 && SHIBYTE(v17) < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
    }
    if (v14 && SHIBYTE(v13) < 0)
      operator delete(v12[0]);
    if (SHIBYTE(v11) < 0)
      operator delete(v10[0]);
  }
}

void sub_20B011224(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28)
{
  if (a28 && a27 < 0)
    operator delete(__p);
  if (a21 < 0)
    operator delete(a16);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B011258(uint64_t a1, uint64_t a2)
{
  __int128 v3;
  __int128 v4;
  __int128 v5;
  __int128 v6;
  _QWORD v8[2];
  void *v9[2];
  _BYTE v10[30];
  uint64_t (**v11)();
  void *__p[2];
  _BYTE v13[30];
  char v14;
  uint64_t (**v15)();
  __int128 v16;
  char v17;
  char v18;

  v8[0] = &off_24C403F68;
  v8[1] = &off_24C3F2CB0;
  v3 = *(_OWORD *)(a2 + 16);
  v4 = *(_OWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_OWORD *)v9 = v3;
  *(_OWORD *)v10 = v4;
  *(_OWORD *)&v10[14] = *(_OWORD *)(a2 + 46);
  LOBYTE(v11) = 0;
  v14 = 0;
  if (*(_BYTE *)(a2 + 120))
  {
    v11 = &off_24C3F2D20;
    v5 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    v6 = *(_OWORD *)(a2 + 88);
    *(_OWORD *)__p = v5;
    *(_OWORD *)v13 = v6;
    *(_OWORD *)&v13[14] = *(_OWORD *)(a2 + 102);
    v14 = 1;
  }
  LOBYTE(v15) = 0;
  v17 = 0;
  if (*(_BYTE *)(a2 + 152))
  {
    v15 = &off_24C4169B8;
    v16 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
    v17 = 1;
  }
  v18 = 1;
  sub_20B0143E8((uint64_t)v8, a1);
  if (v18)
  {
    (*(void (**)(_QWORD *))v8[0])(v8);
    return a1;
  }
  if (!v13[24])
    return a1;
  if (v13[16])
  {
    if ((v13[15] & 0x80000000) != 0)
      operator delete(__p[1]);
    if (SHIBYTE(v11) < 0)
      operator delete(*(void **)&v10[16]);
  }
  if (!v10[8] || (v10[7] & 0x80000000) == 0)
    return a1;
  operator delete(v9[0]);
  return a1;
}

void sub_20B0113A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEF07DC((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0113B4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C400C10;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B011428(char *__s, unsigned int *a2, std::string *a3, unsigned int *a4, std::string *a5, unsigned int *a6, std::string *a7, unsigned int *a8, std::string *a9, unsigned int *a10, std::string *a11, unsigned int *a12, std::string *a13)
{
  uint64_t result;
  char v21;
  char v22;
  _DWORD v23[6];
  int v24;
  std::string v25;
  std::string **v26;
  std::string *v27;
  std::string *v28;
  _DWORD *v29;
  std::string *v30;
  std::string *v31;

  v24 = 0;
  sub_20B00222C(v23, __s);
  std::to_string(&v25, *a2);
  v27 = (std::string *)v23;
  v28 = &v25;
  v29 = v23;
  v30 = &v25;
  v31 = &v25;
  if (v24 == -1)
    sub_20AECFAB8();
  v26 = &v27;
  ((void (*)(std::string ***, _DWORD *))off_24C400AE0[v24])(&v26, v23);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v27 = (std::string *)v23;
  v28 = a3;
  v29 = v23;
  v30 = a3;
  v31 = a3;
  if (v24 == -1)
    sub_20AECFAB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  ((void (*)(std::string *, _DWORD *))off_24C400AF8[v24])(&v25, v23);
  sub_20B011DCC((uint64_t)&v22, (uint64_t)v23, a4);
  v27 = (std::string *)v23;
  v28 = a5;
  v29 = v23;
  v30 = a5;
  v31 = a5;
  if (v24 == -1)
    sub_20AECFAB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  ((void (*)(std::string *, _DWORD *))off_24C400B40[v24])(&v25, v23);
  sub_20AF86710((uint64_t)&v21, (uint64_t)v23, a6);
  v27 = (std::string *)v23;
  v28 = a7;
  v29 = v23;
  v30 = a7;
  v31 = a7;
  if (v24 == -1)
    sub_20AECFAB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  ((void (*)(std::string *, _DWORD *))off_24C400B58[v24])(&v25, v23);
  std::to_string(&v25, *a8);
  v27 = (std::string *)v23;
  v28 = &v25;
  v29 = v23;
  v30 = &v25;
  v31 = &v25;
  if (v24 == -1)
    sub_20AECFAB8();
  v26 = &v27;
  ((void (*)(std::string ***, _DWORD *))off_24C400AE0[v24])(&v26, v23);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v27 = (std::string *)v23;
  v28 = a9;
  v29 = v23;
  v30 = a9;
  v31 = a9;
  if (v24 == -1)
    sub_20AECFAB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  ((void (*)(std::string *, _DWORD *))off_24C400B70[v24])(&v25, v23);
  std::to_string(&v25, *a10);
  v27 = (std::string *)v23;
  v28 = &v25;
  v29 = v23;
  v30 = &v25;
  v31 = &v25;
  if (v24 == -1)
    sub_20AECFAB8();
  v26 = &v27;
  ((void (*)(std::string ***, _DWORD *))off_24C400AE0[v24])(&v26, v23);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v27 = (std::string *)v23;
  v28 = a11;
  v29 = v23;
  v30 = a11;
  v31 = a11;
  if (v24 == -1)
    sub_20AECFAB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  ((void (*)(std::string *, _DWORD *))off_24C400B88[v24])(&v25, v23);
  std::to_string(&v25, *a12);
  v27 = (std::string *)v23;
  v28 = &v25;
  v29 = v23;
  v30 = &v25;
  v31 = &v25;
  if (v24 == -1)
    sub_20AECFAB8();
  v26 = &v27;
  ((void (*)(std::string ***, _DWORD *))off_24C400AE0[v24])(&v26, v23);
  if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v25.__r_.__value_.__l.__data_);
  v27 = (std::string *)v23;
  v28 = a13;
  v29 = v23;
  v30 = a13;
  v31 = a13;
  if (v24 == -1)
    sub_20AECFAB8();
  v25.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
  ((void (*)(std::string *, _DWORD *))off_24C400B28[v24])(&v25, v23);
  if (v24 == -1)
    sub_20AECFAB8();
  v27 = &v25;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C400BA0[v24])(&v27, v23);
  if (v24 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C400AC8[v24])(&v27, v23);
  return result;
}

void sub_20B011834(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0118AC(char *__s, unsigned int *a2, std::string *a3, unsigned int *a4, std::string *a5, unsigned int *a6, std::string *a7)
{
  uint64_t result;
  char v14;
  _DWORD v15[6];
  int v16;
  std::string v17;
  std::string **v18;
  std::string *v19;
  std::string *v20;
  _DWORD *v21;
  std::string *v22;
  std::string *v23;

  v16 = 0;
  sub_20B00222C(v15, __s);
  std::to_string(&v17, *a2);
  v19 = (std::string *)v15;
  v20 = &v17;
  v21 = v15;
  v22 = &v17;
  v23 = &v17;
  if (v16 == -1)
    sub_20AECFAB8();
  v18 = &v19;
  ((void (*)(std::string ***, _DWORD *))off_24C400AE0[v16])(&v18, v15);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v19 = (std::string *)v15;
  v20 = a3;
  v21 = v15;
  v22 = a3;
  v23 = a3;
  if (v16 == -1)
    sub_20AECFAB8();
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24C400BB8[v16])(&v17, v15);
  sub_20AF86710((uint64_t)&v14, (uint64_t)v15, a4);
  v19 = (std::string *)v15;
  v20 = a5;
  v21 = v15;
  v22 = a5;
  v23 = a5;
  if (v16 == -1)
    sub_20AECFAB8();
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24C400BD0[v16])(&v17, v15);
  std::to_string(&v17, *a6);
  v19 = (std::string *)v15;
  v20 = &v17;
  v21 = v15;
  v22 = &v17;
  v23 = &v17;
  if (v16 == -1)
    sub_20AECFAB8();
  v18 = &v19;
  ((void (*)(std::string ***, _DWORD *))off_24C400AE0[v16])(&v18, v15);
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v17.__r_.__value_.__l.__data_);
  v19 = (std::string *)v15;
  v20 = a7;
  v21 = v15;
  v22 = a7;
  v23 = a7;
  if (v16 == -1)
    sub_20AECFAB8();
  v17.__r_.__value_.__r.__words[0] = (std::string::size_type)&v19;
  ((void (*)(std::string *, _DWORD *))off_24C400B10[v16])(&v17, v15);
  if (v16 == -1)
    sub_20AECFAB8();
  v19 = &v17;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C400BA0[v16])(&v19, v15);
  if (v16 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C400AC8[v16])(&v19, v15);
  return result;
}

void sub_20B011B0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B011B64(char *__s, _QWORD *a2, std::string *a3, unsigned int *a4, std::string *a5, unsigned int *a6, std::string *a7)
{
  uint64_t result;
  char v14;
  char v15;
  _DWORD v16[6];
  int v17;
  std::string v18;
  std::string **v19;
  std::string *v20;
  std::string *v21;
  _DWORD *v22;
  std::string *v23;
  std::string *v24;

  v17 = 0;
  sub_20B001C20(v16, __s);
  sub_20AED5838((uint64_t)&v15, (uint64_t)v16, a2);
  v20 = (std::string *)v16;
  v21 = a3;
  v22 = v16;
  v23 = a3;
  v24 = a3;
  if (v17 == -1)
    sub_20AECFAB8();
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  ((void (*)(std::string *, _DWORD *))off_24C400BB8[v17])(&v18, v16);
  sub_20AF86710((uint64_t)&v14, (uint64_t)v16, a4);
  v20 = (std::string *)v16;
  v21 = a5;
  v22 = v16;
  v23 = a5;
  v24 = a5;
  if (v17 == -1)
    sub_20AECFAB8();
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  ((void (*)(std::string *, _DWORD *))off_24C400BE8[v17])(&v18, v16);
  std::to_string(&v18, *a6);
  v20 = (std::string *)v16;
  v21 = &v18;
  v22 = v16;
  v23 = &v18;
  v24 = &v18;
  if (v17 == -1)
    sub_20AECFAB8();
  v19 = &v20;
  ((void (*)(std::string ***, _DWORD *))off_24C400AE0[v17])(&v19, v16);
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v18.__r_.__value_.__l.__data_);
  v20 = (std::string *)v16;
  v21 = a7;
  v22 = v16;
  v23 = a7;
  v24 = a7;
  if (v17 == -1)
    sub_20AECFAB8();
  v18.__r_.__value_.__r.__words[0] = (std::string::size_type)&v20;
  ((void (*)(std::string *, _DWORD *))off_24C400B10[v17])(&v18, v16);
  if (v17 == -1)
    sub_20AECFAB8();
  v20 = &v18;
  result = ((uint64_t (*)(std::string **, _DWORD *))off_24C400BA0[v17])(&v20, v16);
  if (v17 != -1)
    return ((uint64_t (*)(std::string **, _DWORD *))off_24C400AC8[v17])(&v20, v16);
  return result;
}

void sub_20B011D78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_20AECFA60((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20B011DCC(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20B012070((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C400AE0[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B01201C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B012040(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B01205C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B012070(_QWORD *a1, unsigned int *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20B01219C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_20AECFAB8();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C400BA0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C400AC8[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_20AEC01D0(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20B012158(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B012174(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B012188(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B01219C(uint64_t a1, uint64_t a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string v11;
  uint64_t v12;
  std::string *v13;
  uint64_t v14;
  std::string *v15;
  std::string *v16;
  uint64_t *v17;

  v12 = a2;
  v13 = (std::string *)"{";
  v14 = a2;
  v15 = (std::string *)"{";
  v16 = (std::string *)"{";
  v3 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v3 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *))off_24C400B28[v3])(&v11);
  std::to_string(&v11, *a3);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v6 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v6 == -1)
    sub_20AECFAB8();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C400AE0[v6])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)",";
  v14 = a2;
  v15 = (std::string *)",";
  v16 = (std::string *)",";
  v7 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v7 == -1)
    goto LABEL_11;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  ((void (*)(std::string *, uint64_t))off_24C400B28[v7])(&v11, a2);
  std::to_string(&v11, a3[1]);
  v12 = a2;
  v13 = &v11;
  v14 = a2;
  v15 = &v11;
  v16 = &v11;
  v8 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v8 == -1)
    sub_20AECFAB8();
  v17 = &v12;
  ((void (*)(uint64_t **, uint64_t))off_24C400AE0[v8])(&v17, a2);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  v12 = a2;
  v13 = (std::string *)"}";
  v14 = a2;
  v15 = (std::string *)"}";
  v16 = (std::string *)"}";
  v9 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v9 == -1)
LABEL_11:
    sub_20AECFAB8();
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)&v12;
  return ((uint64_t (*)(std::string *, uint64_t))off_24C400B28[v9])(&v11, a2);
}

void sub_20B012334(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_DWORD *sub_20B012358(_DWORD ***a1)
{
  return sub_20B012374(**a1, (char *)(*a1)[1]);
}

void sub_20B012364(uint64_t a1, uint64_t a2)
{
  sub_20B012464((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20B012374(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C400AC8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20B012464(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C400AC8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B012618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B01265C(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B012754((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B01274C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B012754(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B012950(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B012964(_DWORD ***a1)
{
  return sub_20AF5A61C(**a1, (char *)(*a1)[1]);
}

void sub_20B012970(uint64_t a1, uint64_t a2)
{
  sub_20B012980((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20B012980(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C400AC8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B012B34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B012B78(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B012C70((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B012C68(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B012C70(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B012E6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B012E80(_DWORD ***a1)
{
  return sub_20AFAE5CC(**a1, (char *)(*a1)[1]);
}

void sub_20B012E8C(uint64_t a1, uint64_t a2)
{
  sub_20B012E9C((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20B012E9C(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C400AC8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B013050(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B013094(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B01318C((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B013184(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B01318C(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B013388(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B01339C(_DWORD ***a1)
{
  return sub_20B0133B8(**a1, (char *)(*a1)[1]);
}

void sub_20B0133A8(uint64_t a1, uint64_t a2)
{
  sub_20B0134A8((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

_DWORD *sub_20B0133B8(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C400AC8[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

void sub_20B0134A8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C400AC8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B01365C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B0136A0(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B013798((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B013790(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B013798(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B013994(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B0139A8(_DWORD ***a1)
{
  return sub_20AF5C358(**a1, (char *)(*a1)[1]);
}

void sub_20B0139B4(uint64_t a1, uint64_t a2)
{
  sub_20B0139C4((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20B0139C4(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C400AC8[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B013B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B013BBC(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B013CB4((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B013CAC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B013CB4(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B013EB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B013EC4(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  uint64_t v21;

  *(_QWORD *)a1 = &off_24C400C10;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400D08;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v20 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v20 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v21, v4, 1);
  v12 = *(_QWORD *)(v21 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v21;
  *(_QWORD *)(a1 + 40) = v12;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  v13 = *(std::__shared_weak_count **)(a1 + 16);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v20)
    return a1;
  v17 = (unint64_t *)&v20->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return a1;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_20B014090(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0140AC(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C400C10;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B014120()
{
  return 1;
}

uint64_t sub_20B014128(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B014130@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B014144(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0141C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0141E8(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 104);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 40);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 24));
        LODWORD(v2) = *(_DWORD *)(v1 + 104);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 104) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC1F8[v2])(&v3, v1 + 24);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B01428C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE1EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE1EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE1EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE1EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0142FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_DWORD *)(a2 + 44);
    v8 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_DWORD *)(a2 + 44);
    v8 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = v6;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 1;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B0143E8(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  char v3;
  uint64_t v4;
  char v5;
  BOOL v8;
  int v9;
  void **v10;
  int v11;
  void *v12;
  int v13;
  int v14;
  __int128 v15;
  __int128 v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  __int128 v27;
  int v28;
  int v29;
  void **v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  char v35;
  unint64_t *p_shared_owners;
  unint64_t v37;
  __int128 v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  uint64_t v43;
  char v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  _BYTE v48[32];
  _OWORD v49[2];
  uint64_t (**v50)();
  __int128 v51;
  _OWORD v52[2];
  char v53;
  uint64_t (**v54)();
  __int128 v55;
  char v56;
  _OWORD v57[2];
  _QWORD v58[2];
  _QWORD v59[5];

  v59[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 160))
    v8 = *(_BYTE *)(a2 + 160) == 0;
  else
    v8 = 1;
  if (!v8)
  {
    *(_QWORD *)v48 = &off_24C403F68;
    *(_QWORD *)&v48[8] = &off_24C3F2CB0;
    v15 = *(_OWORD *)(a1 + 16);
    v16 = *(_OWORD *)(a1 + 32);
    *(_QWORD *)(a1 + 16) = 0;
    *(_QWORD *)(a1 + 24) = 0;
    *(_OWORD *)&v48[16] = v15;
    v49[0] = v16;
    *(_OWORD *)((char *)v49 + 14) = *(_OWORD *)(a1 + 46);
    LOBYTE(v50) = 0;
    v53 = 0;
    if (*(_BYTE *)(a1 + 120))
    {
      v50 = &off_24C3F2D20;
      v51 = *(_OWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 72) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      v52[0] = *(_OWORD *)(a1 + 88);
      *(_OWORD *)((char *)v52 + 14) = *(_OWORD *)(a1 + 102);
      v53 = 1;
    }
    LOBYTE(v54) = 0;
    v56 = 0;
    if (*(_BYTE *)(a1 + 152))
    {
      v54 = &off_24C4169B8;
      v55 = *(_OWORD *)(a1 + 136);
      *(_QWORD *)(a1 + 136) = 0;
      *(_QWORD *)(a1 + 144) = 0;
      v56 = 1;
    }
    sub_20B014AC8(a1, a2);
    sub_20B014AC8(a2, (uint64_t)v48);
    *(_QWORD *)v48 = &off_24C403F68;
    if (v56)
    {
      v54 = &off_24C4169B8;
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v55 + 1);
      if (*((_QWORD *)&v55 + 1))
      {
        v18 = (unint64_t *)(*((_QWORD *)&v55 + 1) + 8);
        do
          v19 = __ldaxr(v18);
        while (__stlxr(v19 - 1, v18));
        if (!v19)
        {
          ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
          std::__shared_weak_count::__release_weak(v17);
        }
      }
    }
    if (v53)
    {
      v50 = &off_24C3F2D20;
      v20 = (std::__shared_weak_count *)*((_QWORD *)&v51 + 1);
      if (*((_QWORD *)&v51 + 1))
      {
        v21 = (unint64_t *)(*((_QWORD *)&v51 + 1) + 8);
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
    }
    *(_QWORD *)&v48[8] = &off_24C3F2CB0;
    v23 = *(std::__shared_weak_count **)&v48[24];
    if (*(_QWORD *)&v48[24])
    {
      v24 = (unint64_t *)(*(_QWORD *)&v48[24] + 8);
      do
        v25 = __ldaxr(v24);
      while (__stlxr(v25 - 1, v24));
      if (!v25)
      {
        ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
        v26 = v23;
LABEL_34:
        std::__shared_weak_count::__release_weak(v26);
        return;
      }
    }
    return;
  }
  if (*(_BYTE *)(a1 + 160))
  {
    if (!*(_BYTE *)(a2 + 160))
    {
      *(_OWORD *)v48 = *(_OWORD *)a2;
      v9 = *(unsigned __int8 *)(a2 + 112);
      if (*(_BYTE *)(a2 + 112))
      {
        v10 = (void **)(a2 + 16);
        v11 = *(unsigned __int8 *)(a2 + 40);
        if (*(_BYTE *)(a2 + 40))
        {
          v12 = *(void **)(a2 + 16);
          *(_QWORD *)&v57[0] = *(_QWORD *)(a2 + 24);
          *(_QWORD *)((char *)v57 + 7) = *(_QWORD *)(a2 + 31);
          v3 = *(_BYTE *)(a2 + 39);
          *(_QWORD *)(a2 + 24) = 0;
          *(_QWORD *)(a2 + 32) = 0;
          *v10 = 0;
          v13 = 1;
          if (*(_BYTE *)(a2 + 104))
            goto LABEL_11;
        }
        else
        {
          v12 = 0;
          v13 = 0;
          if (*(_BYTE *)(a2 + 104))
          {
LABEL_11:
            v46 = *(_QWORD *)(a2 + 48);
            v59[0] = *(_QWORD *)(a2 + 56);
            *(_QWORD *)((char *)v59 + 7) = *(_QWORD *)(a2 + 63);
            v5 = *(_BYTE *)(a2 + 71);
            *(_QWORD *)(a2 + 56) = 0;
            *(_QWORD *)(a2 + 64) = 0;
            *(_QWORD *)(a2 + 48) = 0;
            *(_QWORD *)&v45 = *(_QWORD *)(a2 + 72);
            v43 = *(_QWORD *)(a2 + 80);
            v58[0] = *(_QWORD *)(a2 + 88);
            *(_QWORD *)((char *)v58 + 7) = *(_QWORD *)(a2 + 95);
            v44 = *(_BYTE *)(a2 + 103);
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            v14 = 1;
            *(_QWORD *)(a2 + 80) = 0;
            if (!v11)
              goto LABEL_70;
LABEL_68:
            if (*(char *)(a2 + 39) < 0)
              operator delete(*v10);
            goto LABEL_70;
          }
        }
        v14 = 0;
        v46 = 0;
        if (v11)
          goto LABEL_68;
      }
      else
      {
        v13 = 0;
        v12 = 0;
        v14 = 0;
      }
LABEL_70:
      *(_QWORD *)a2 = &off_24C403F68;
      *(_QWORD *)(a2 + 8) = &off_24C3F2CB0;
      *(_OWORD *)(a2 + 16) = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 16) = 0;
      v38 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a2 + 46) = *(_OWORD *)(a1 + 46);
      *(_OWORD *)(a2 + 32) = v38;
      *(_BYTE *)(a2 + 64) = 0;
      *(_BYTE *)(a2 + 120) = 0;
      if (*(_BYTE *)(a1 + 120))
      {
        *(_QWORD *)(a2 + 64) = &off_24C3F2D20;
        *(_OWORD *)(a2 + 72) = *(_OWORD *)(a1 + 72);
        *(_QWORD *)(a1 + 72) = 0;
        *(_QWORD *)(a1 + 80) = 0;
        v39 = *(_OWORD *)(a1 + 88);
        *(_OWORD *)(a2 + 102) = *(_OWORD *)(a1 + 102);
        *(_OWORD *)(a2 + 88) = v39;
        *(_BYTE *)(a2 + 120) = 1;
      }
      *(_BYTE *)(a2 + 128) = 0;
      *(_BYTE *)(a2 + 152) = 0;
      if (*(_BYTE *)(a1 + 152))
      {
        *(_QWORD *)(a2 + 128) = &off_24C4169B8;
        *(_OWORD *)(a2 + 136) = *(_OWORD *)(a1 + 136);
        *(_QWORD *)(a1 + 136) = 0;
        *(_QWORD *)(a1 + 144) = 0;
        *(_BYTE *)(a2 + 152) = 1;
      }
      (**(void (***)(uint64_t))a1)(a1);
      *(_OWORD *)a1 = *(_OWORD *)v48;
      *(_BYTE *)(a1 + 16) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v9)
      {
        *(_BYTE *)(a1 + 40) = 0;
        if (v13)
        {
          *(_QWORD *)(a1 + 16) = v12;
          *(_QWORD *)(a1 + 24) = *(_QWORD *)&v57[0];
          *(_QWORD *)(a1 + 31) = *(_QWORD *)((char *)v57 + 7);
          *(_BYTE *)(a1 + 39) = v3;
          *(_BYTE *)(a1 + 40) = 1;
          v12 = 0;
          v3 = 0;
        }
        *(_BYTE *)(a1 + 48) = 0;
        *(_BYTE *)(a1 + 104) = 0;
        if (v14)
        {
          v40 = v59[0];
          *(_QWORD *)(a1 + 48) = v46;
          *(_QWORD *)(a1 + 56) = v40;
          *(_QWORD *)(a1 + 63) = *(_QWORD *)((char *)v59 + 7);
          *(_BYTE *)(a1 + 71) = v5;
          *(_QWORD *)(a1 + 72) = v45;
          *(_QWORD *)(a1 + 80) = v43;
          *(_QWORD *)(a1 + 88) = v58[0];
          *(_QWORD *)(a1 + 95) = *(_QWORD *)((char *)v58 + 7);
          *(_BYTE *)(a1 + 103) = v44;
          *(_BYTE *)(a1 + 104) = 1;
        }
        *(_BYTE *)(a1 + 112) = 1;
        v41 = *(_BYTE *)(a1 + 160);
        *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
        *(_BYTE *)(a2 + 160) = v41;
        if (v13 && v3 < 0)
          operator delete(v12);
      }
      else
      {
        v42 = *(_BYTE *)(a1 + 160);
        *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
        *(_BYTE *)(a2 + 160) = v42;
      }
      return;
    }
LABEL_39:
    sub_20AECE70C((__int128 *)a1, (__int128 *)a2);
    return;
  }
  if (!*(_BYTE *)(a2 + 160))
    goto LABEL_39;
  v27 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v47 = v27;
  *(_OWORD *)v48 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)&v48[14] = *(_OWORD *)(a2 + 46);
  v28 = *(unsigned __int8 *)(a2 + 120);
  if (*(_BYTE *)(a2 + 120))
  {
    v4 = *(_QWORD *)(a2 + 72);
    v2 = *(std::__shared_weak_count **)(a2 + 80);
    *(_QWORD *)(a2 + 72) = 0;
    *(_QWORD *)(a2 + 80) = 0;
    v57[0] = *(_OWORD *)(a2 + 88);
    *(_OWORD *)((char *)v57 + 14) = *(_OWORD *)(a2 + 102);
    v29 = *(unsigned __int8 *)(a2 + 152);
    if (!*(_BYTE *)(a2 + 152))
      goto LABEL_42;
    goto LABEL_38;
  }
  v29 = *(unsigned __int8 *)(a2 + 152);
  if (*(_BYTE *)(a2 + 152))
  {
LABEL_38:
    v45 = *(_OWORD *)(a2 + 136);
    *(_QWORD *)(a2 + 136) = 0;
    *(_QWORD *)(a2 + 144) = 0;
  }
LABEL_42:
  (**(void (***)(uint64_t))a2)(a2);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (*(_BYTE *)(a1 + 112))
  {
    v30 = (void **)(a1 + 16);
    *(_BYTE *)(a2 + 40) = 0;
    if (*(_BYTE *)(a1 + 40))
    {
      v31 = *(_OWORD *)v30;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 32);
      *(_OWORD *)(a2 + 16) = v31;
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      *v30 = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (*(_BYTE *)(a1 + 104))
    {
      v32 = *(_OWORD *)(a1 + 48);
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 64);
      *(_OWORD *)(a2 + 48) = v32;
      *(_QWORD *)(a1 + 56) = 0;
      *(_QWORD *)(a1 + 64) = 0;
      *(_QWORD *)(a1 + 48) = 0;
      *(_QWORD *)(a2 + 72) = *(_QWORD *)(a1 + 72);
      v33 = *(_OWORD *)(a1 + 80);
      *(_QWORD *)(a2 + 96) = *(_QWORD *)(a1 + 96);
      *(_OWORD *)(a2 + 80) = v33;
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 96) = 0;
      *(_QWORD *)(a1 + 80) = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    if (*(_BYTE *)(a1 + 112))
    {
      if (*(_BYTE *)(a1 + 104))
      {
        if (*(char *)(a1 + 103) < 0)
          operator delete(*(void **)(a1 + 80));
        if (*(char *)(a1 + 71) < 0)
          operator delete(*(void **)(a1 + 48));
      }
      if (*(_BYTE *)(a1 + 40) && *(char *)(a1 + 39) < 0)
        operator delete(*v30);
    }
  }
  *(_QWORD *)a1 = &off_24C403F68;
  *(_QWORD *)(a1 + 8) = &off_24C3F2CB0;
  v34 = *(_OWORD *)v48;
  *(_OWORD *)(a1 + 16) = v47;
  *(_OWORD *)(a1 + 32) = v34;
  *(_OWORD *)(a1 + 46) = *(_OWORD *)&v48[14];
  *(_BYTE *)(a1 + 64) = 0;
  *(_BYTE *)(a1 + 120) = 0;
  if (v28)
  {
    *(_QWORD *)(a1 + 64) = &off_24C3F2D20;
    *(_QWORD *)(a1 + 72) = v4;
    *(_QWORD *)(a1 + 80) = v2;
    *(_OWORD *)(a1 + 88) = v57[0];
    *(_OWORD *)(a1 + 102) = *(_OWORD *)((char *)v57 + 14);
    *(_BYTE *)(a1 + 120) = 1;
    v2 = 0;
  }
  *(_BYTE *)(a1 + 128) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (v29)
  {
    *(_QWORD *)(a1 + 128) = &off_24C4169B8;
    *(_OWORD *)(a1 + 136) = v45;
    *(_BYTE *)(a1 + 152) = 1;
  }
  v35 = *(_BYTE *)(a1 + 160);
  *(_BYTE *)(a1 + 160) = *(_BYTE *)(a2 + 160);
  *(_BYTE *)(a2 + 160) = v35;
  if (v28)
  {
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v37 = __ldaxr(p_shared_owners);
      while (__stlxr(v37 - 1, p_shared_owners));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        v26 = v2;
        goto LABEL_34;
      }
    }
  }
}

uint64_t sub_20B014AC8(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  __int128 v8;
  int v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  int v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  __int128 v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v24;
  std::__shared_weak_count *v25;
  unint64_t *v26;
  unint64_t v27;

  v4 = *(_OWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  v5 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v4;
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v5);
    }
  }
  v8 = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 46) = *(_OWORD *)(a2 + 46);
  *(_OWORD *)(a1 + 32) = v8;
  v9 = *(unsigned __int8 *)(a1 + 120);
  if (v9 != *(unsigned __int8 *)(a2 + 120))
  {
    *(_QWORD *)(a1 + 64) = &off_24C3F2D20;
    if (!v9)
    {
      *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
      *(_QWORD *)(a2 + 72) = 0;
      *(_QWORD *)(a2 + 80) = 0;
      v24 = *(_OWORD *)(a2 + 88);
      *(_OWORD *)(a1 + 102) = *(_OWORD *)(a2 + 102);
      *(_OWORD *)(a1 + 88) = v24;
      *(_BYTE *)(a1 + 120) = 1;
      v15 = *(unsigned __int8 *)(a1 + 152);
      if (v15 == *(unsigned __int8 *)(a2 + 152))
        goto LABEL_23;
      goto LABEL_30;
    }
    v16 = *(std::__shared_weak_count **)(a1 + 80);
    if (v16)
    {
      v17 = (unint64_t *)&v16->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
        std::__shared_weak_count::__release_weak(v16);
      }
    }
    *(_BYTE *)(a1 + 120) = 0;
LABEL_22:
    v15 = *(unsigned __int8 *)(a1 + 152);
    if (v15 == *(unsigned __int8 *)(a2 + 152))
      goto LABEL_23;
LABEL_30:
    *(_QWORD *)(a1 + 128) = &off_24C4169B8;
    if (v15)
    {
      v25 = *(std::__shared_weak_count **)(a1 + 144);
      if (!v25)
        goto LABEL_35;
      v26 = (unint64_t *)&v25->__shared_owners_;
      do
        v27 = __ldaxr(v26);
      while (__stlxr(v27 - 1, v26));
      if (!v27)
      {
        ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
        std::__shared_weak_count::__release_weak(v25);
        *(_BYTE *)(a1 + 152) = 0;
        return a1;
      }
      else
      {
LABEL_35:
        *(_BYTE *)(a1 + 152) = 0;
        return a1;
      }
    }
    else
    {
      *(_OWORD *)(a1 + 136) = *(_OWORD *)(a2 + 136);
      *(_QWORD *)(a2 + 136) = 0;
      *(_QWORD *)(a2 + 144) = 0;
      *(_BYTE *)(a1 + 152) = 1;
      return a1;
    }
  }
  if (!*(_BYTE *)(a1 + 120))
    goto LABEL_22;
  v10 = *(_OWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  v11 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v10;
  if (v11)
  {
    v12 = (unint64_t *)&v11->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v14 = *(_OWORD *)(a2 + 88);
  *(_OWORD *)(a1 + 102) = *(_OWORD *)(a2 + 102);
  *(_OWORD *)(a1 + 88) = v14;
  v15 = *(unsigned __int8 *)(a1 + 152);
  if (v15 != *(unsigned __int8 *)(a2 + 152))
    goto LABEL_30;
  if (!v15)
    return a1;
  v19 = *(_OWORD *)(a2 + 136);
  *(_QWORD *)(a2 + 136) = 0;
  *(_QWORD *)(a2 + 144) = 0;
  v20 = *(std::__shared_weak_count **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = v19;
  if (!v20)
    return a1;
LABEL_23:
  v21 = (unint64_t *)&v20->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (v22)
    return a1;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_20B014D50(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 2;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (2 * *a2 <= a3)
  {
    if ((a3 & 1) != 0)
    {
      v20 = 2;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 2;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 2 * *a2;
  v20 = 2;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B0151E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B01524C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C400D58;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0152C0(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  uint64_t v21;

  *(_QWORD *)a1 = &off_24C400D58;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400E50;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v20 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v20 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v21, v4, 2);
  v12 = *(_QWORD *)(v21 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v21;
  *(_QWORD *)(a1 + 40) = v12;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  v13 = *(std::__shared_weak_count **)(a1 + 16);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v20)
    return a1;
  v17 = (unint64_t *)&v20->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return a1;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_20B01548C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0154A8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C400D58;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01551C()
{
  return 2;
}

uint64_t sub_20B015524(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B01552C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B015544(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B0155C4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0155E8(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 104);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 40);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 24));
        LODWORD(v2) = *(_DWORD *)(v1 + 104);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 104) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC218[v2])(&v3, v1 + 24);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B01568C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE2EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE2EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0156FC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_DWORD *)(a2 + 44);
    v8 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_DWORD *)(a2 + 44);
    v8 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = 2 * v6;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 2;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B0157EC(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 2;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (2 * *a2 <= a3)
  {
    if ((a3 & 1) != 0)
    {
      v20 = 3;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 3;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 2 * *a2;
  v20 = 3;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B015C7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B015CE8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C400EA0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B015D5C(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  uint64_t v21;

  *(_QWORD *)a1 = &off_24C400EA0;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C400F98;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v20 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v20 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v21, v4, 3);
  v12 = *(_QWORD *)(v21 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v21;
  *(_QWORD *)(a1 + 40) = v12;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  v13 = *(std::__shared_weak_count **)(a1 + 16);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v20)
    return a1;
  v17 = (unint64_t *)&v20->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return a1;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_20B015F28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B015F44(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C400EA0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B015FB8()
{
  return 3;
}

uint64_t sub_20B015FC0(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B015FC8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B015FE0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B016060(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B016084(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 104);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 40);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 24));
        LODWORD(v2) = *(_DWORD *)(v1 + 104);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 104) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC238[v2])(&v3, v1 + 24);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B016128(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE3EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE3EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE3EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE3EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B016198(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_DWORD *)(a2 + 44);
    v8 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_DWORD *)(a2 + 44);
    v8 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = 2 * v6;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 3;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B016288(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 4;
  v39 = a3;
  v37 = 4;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (4 * *a2 <= a3)
  {
    if ((a3 & 3) != 0)
    {
      v20 = 4;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 3) != 0)
    {
      v20 = 4;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 4 * *a2;
  v20 = 4;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B016720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B01678C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C400FE8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B016800(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v20;
  uint64_t v21;

  *(_QWORD *)a1 = &off_24C400FE8;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4010E0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v20 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v20 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(uint64_t *__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v21, v4, 4);
  v12 = *(_QWORD *)(v21 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)v21;
  *(_QWORD *)(a1 + 40) = v12;
  v21 = 0;
  MEMORY[0x20BD3583C]();
  v13 = *(std::__shared_weak_count **)(a1 + 16);
  if (v13)
  {
    v14 = (unint64_t *)&v13->__shared_owners_;
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
    do
      v16 = __ldaxr(v14);
    while (__stlxr(v16 - 1, v14));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  if (!v20)
    return a1;
  v17 = (unint64_t *)&v20->__shared_owners_;
  do
    v18 = __ldaxr(v17);
  while (__stlxr(v18 - 1, v17));
  if (v18)
    return a1;
  ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
  std::__shared_weak_count::__release_weak(v20);
  return a1;
}

void sub_20B0169CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0169E8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C400FE8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B016A5C()
{
  return 4;
}

uint64_t sub_20B016A64(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B016A6C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 32);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 44);
  return result;
}

uint64_t sub_20B016A84(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B016B04(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B016B28(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 104);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 40);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 32), *(_QWORD *)(v1 + 24));
        LODWORD(v2) = *(_DWORD *)(v1 + 104);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 104) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC258[v2])(&v3, v1 + 24);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B016BCC(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE4EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE4EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE4EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE4EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B016C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_DWORD *)(a2 + 44);
    v8 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_DWORD *)(a2 + 44);
    v8 = *(_QWORD *)(a2 + 24);
    v7 = *(_QWORD *)(a2 + 32);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v7;
  *(_DWORD *)(a1 + 24) = 4 * v6;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 4;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B016D2C(unsigned int *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned int v32;

  v31 = 2;
  v32 = a2;
  if (*a1)
    v4 = a1[1] == 0;
  else
    v4 = 1;
  if (v4)
    goto LABEL_15;
  if (2 * *a1 <= a2)
  {
    if ((a2 & 1) != 0)
    {
      v14 = 5;
      sub_20B0118AC("Image row byte stride ", &v32, (std::string *)" is invalid for pixel format ", &v14, (std::string *)". It must be a multiple of the pixel byte size (", &v31, (std::string *)").");
      *(_OWORD *)v10 = *(_OWORD *)v15;
      v11 = v16;
      v15[1] = 0;
      v16 = 0;
      v15[0] = 0;
      v12 = 1;
      sub_20B099E24((__int128 *)v10, (uint64_t)&v20);
      *(_OWORD *)a3 = v20;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v30)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v7 = v23;
        if (v23)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v22;
          v22 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v29)
        {
          v8 = v26;
          *(_QWORD *)(a3 + 64) = v25;
          *(_OWORD *)(a3 + 48) = v24;
          v24 = 0uLL;
          *(_QWORD *)(a3 + 72) = v8;
          *(_OWORD *)(a3 + 80) = v27;
          *(_QWORD *)(a3 + 96) = v28;
          v25 = 0;
          v27 = 0uLL;
          v28 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v7 && SHIBYTE(v22) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (!v12 || (SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_34;
      v9 = v10[0];
      goto LABEL_33;
    }
LABEL_15:
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v13 = 2 * *a1;
  v14 = 5;
  sub_20B011428("Image row byte stride ", &v32, (std::string *)" is invalid for the given size ", a1, (std::string *)" and pixel format ", &v14, (std::string *)". It must be at least: pixel byte size (", &v31, (std::string *)") x width (", a1, (std::string *)") = ", (unsigned int *)&v13, (std::string *)".");
  v17 = *(_OWORD *)v15;
  v18 = v16;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  v19 = 1;
  sub_20B099E24(&v17, (uint64_t)&v20);
  *(_OWORD *)a3 = v20;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v23;
    if (v23)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v29)
    {
      v6 = v26;
      *(_QWORD *)(a3 + 64) = v25;
      *(_OWORD *)(a3 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v27;
      *(_QWORD *)(a3 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v5 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
    goto LABEL_34;
  v9 = (void *)v17;
LABEL_33:
  operator delete(v9);
LABEL_34:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B017068(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0170B8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C401130;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B01712C(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C401130;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C401228;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 5);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B0172FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B017318(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C401130;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01738C()
{
  return 5;
}

uint64_t sub_20B017394(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B01739C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0173B0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B017430(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B017454(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC278[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B0174F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE5EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE5EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE5EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE5EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B017568(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 5;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B01765C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 4;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (4 * *a2 <= a3)
  {
    if ((a3 & 3) != 0)
    {
      v20 = 6;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 6;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 4 * *a2;
  v20 = 6;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B017AF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B017B60(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C401278;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B017BD4(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C401278;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C401370;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 6);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B017DA4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B017DC0(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C401278;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B017E34()
{
  return 6;
}

uint64_t sub_20B017E3C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B017E44@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B017E5C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B017EDC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B017F00(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC298[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B017FA4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE6EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE6EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE6EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE6EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B018014(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 6;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B01810C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 4;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (4 * *a2 <= a3)
  {
    if ((a3 & 3) != 0)
    {
      v20 = 7;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 7;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 4 * *a2;
  v20 = 7;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B0185A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B018610(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C4013C0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B018684(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C4013C0;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4014B8;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 7);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B018854(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B018870(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C4013C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0188E4()
{
  return 7;
}

uint64_t sub_20B0188EC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0188F4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B01890C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B01898C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0189B0(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC2B8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B018A54(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE7EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE7EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE7EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE7EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B018AC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 7;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B018BBC(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 4;
  v39 = a3;
  v37 = 8;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (8 * *a2 <= a3)
  {
    if ((a3 & 7) != 0)
    {
      v20 = 8;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 3) != 0)
    {
      v20 = 8;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 8 * *a2;
  v20 = 8;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B019058(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0190C4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C401508;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B019138(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C401508;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C401600;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 8);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B019308(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B019324(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C401508;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B019398()
{
  return 8;
}

uint64_t sub_20B0193A0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B0193A8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B0193C0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B019440(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B019464(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC2D8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B019508(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE8EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE8EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE8EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE8EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B019578(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 4 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 8;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B019670(unsigned int *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned int v32;

  v31 = 3;
  v32 = a2;
  if (*a1)
    v4 = a1[1] == 0;
  else
    v4 = 1;
  if (v4)
    goto LABEL_6;
  if (3 * *a1 <= a2)
  {
    if (-1431655765 * a2 >= 0x55555556)
    {
      v14 = 9;
      sub_20B0118AC("Image row byte stride ", &v32, (std::string *)" is invalid for pixel format ", &v14, (std::string *)". It must be a multiple of the pixel byte size (", &v31, (std::string *)").");
      *(_OWORD *)v10 = *(_OWORD *)v15;
      v11 = v16;
      v15[1] = 0;
      v16 = 0;
      v15[0] = 0;
      v12 = 1;
      sub_20B099E24((__int128 *)v10, (uint64_t)&v20);
      *(_OWORD *)a3 = v20;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v30)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v7 = v23;
        if (v23)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v22;
          v22 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v29)
        {
          v8 = v26;
          *(_QWORD *)(a3 + 64) = v25;
          *(_OWORD *)(a3 + 48) = v24;
          v24 = 0uLL;
          *(_QWORD *)(a3 + 72) = v8;
          *(_OWORD *)(a3 + 80) = v27;
          *(_QWORD *)(a3 + 96) = v28;
          v25 = 0;
          v27 = 0uLL;
          v28 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v7 && SHIBYTE(v22) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (!v12 || (SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_35;
      v9 = v10[0];
      goto LABEL_34;
    }
LABEL_6:
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v13 = 3 * *a1;
  v14 = 9;
  sub_20B011428("Image row byte stride ", &v32, (std::string *)" is invalid for the given size ", a1, (std::string *)" and pixel format ", &v14, (std::string *)". It must be at least: pixel byte size (", &v31, (std::string *)") x width (", a1, (std::string *)") = ", (unsigned int *)&v13, (std::string *)".");
  v17 = *(_OWORD *)v15;
  v18 = v16;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  v19 = 1;
  sub_20B099E24(&v17, (uint64_t)&v20);
  *(_OWORD *)a3 = v20;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v23;
    if (v23)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v29)
    {
      v6 = v26;
      *(_QWORD *)(a3 + 64) = v25;
      *(_OWORD *)(a3 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v27;
      *(_QWORD *)(a3 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v5 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
    goto LABEL_35;
  v9 = (void *)v17;
LABEL_34:
  operator delete(v9);
LABEL_35:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B0199C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B019A14(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C401650;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B019A88(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C401650;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C401748;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 9);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B019C58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B019C74(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C401650;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B019CE8()
{
  return 9;
}

uint64_t sub_20B019CF0(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B019CF8@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B019D0C(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B019D8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B019DB0(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC2F8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B019E54(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE9EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE9EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE9EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE9EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B019EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 9;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B019FB8(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 __p;
  uint64_t v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v41 = a1;
  v39 = 2;
  v40 = a3;
  v38 = 6;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (6 * *a2 <= a3)
  {
    HIDWORD(v8) = -1431655765 * a3;
    LODWORD(v8) = -1431655765 * a3;
    if ((v8 >> 1) >= 0x2AAAAAAB)
    {
      v21 = 10;
      sub_20B0118AC("Image row byte stride ", &v40, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be a multiple of the pixel byte size (", &v38, (std::string *)").");
      v17 = *(_OWORD *)v22;
      v18 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v19 = 1;
      sub_20B099E24(&v17, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v9 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v10 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v10;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v9 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = (void *)v17;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v21 = 10;
      sub_20B011B64("Image base address ", &v41, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be aligned with the value type size (", &v39, (std::string *)").");
      *(_OWORD *)v14 = *(_OWORD *)v22;
      v15 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v16 = 1;
      sub_20B099E24((__int128 *)v14, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v11 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v12 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v12;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v11 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v16 || (SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = v14[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v20 = 6 * *a2;
  v21 = 10;
  sub_20B011428("Image row byte stride ", &v40, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v21, (std::string *)". It must be at least: pixel byte size (", &v38, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v20, (std::string *)".");
  v24 = *(_OWORD *)v22;
  v25 = v23;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v26 = 1;
  sub_20B099E24(&v24, (uint64_t)&v27);
  *(_OWORD *)a4 = v27;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v30;
    if (v30)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v29;
      v29 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v36)
    {
      v7 = v33;
      *(_QWORD *)(a4 + 64) = v32;
      *(_OWORD *)(a4 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v34;
      *(_QWORD *)(a4 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v29) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v26 || (SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_48;
  v13 = (void *)v24;
LABEL_47:
  operator delete(v13);
LABEL_48:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

void sub_20B01A46C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B01A4D8(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C401798;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B01A54C(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C401798;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C401890;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 10);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B01A71C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B01A738(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C401798;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01A7AC()
{
  return 10;
}

uint64_t sub_20B01A7B4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B01A7BC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B01A7D4(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B01A854(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01A878(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC318[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B01A91C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE10EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE10EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE10EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE10EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B01A98C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 10;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B01AA84(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 __p;
  uint64_t v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v41 = a1;
  v39 = 2;
  v40 = a3;
  v38 = 6;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (6 * *a2 <= a3)
  {
    HIDWORD(v8) = -1431655765 * a3;
    LODWORD(v8) = -1431655765 * a3;
    if ((v8 >> 1) >= 0x2AAAAAAB)
    {
      v21 = 11;
      sub_20B0118AC("Image row byte stride ", &v40, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be a multiple of the pixel byte size (", &v38, (std::string *)").");
      v17 = *(_OWORD *)v22;
      v18 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v19 = 1;
      sub_20B099E24(&v17, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v9 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v10 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v10;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v9 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = (void *)v17;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v21 = 11;
      sub_20B011B64("Image base address ", &v41, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be aligned with the value type size (", &v39, (std::string *)").");
      *(_OWORD *)v14 = *(_OWORD *)v22;
      v15 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v16 = 1;
      sub_20B099E24((__int128 *)v14, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v11 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v12 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v12;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v11 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v16 || (SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = v14[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v20 = 6 * *a2;
  v21 = 11;
  sub_20B011428("Image row byte stride ", &v40, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v21, (std::string *)". It must be at least: pixel byte size (", &v38, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v20, (std::string *)".");
  v24 = *(_OWORD *)v22;
  v25 = v23;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v26 = 1;
  sub_20B099E24(&v24, (uint64_t)&v27);
  *(_OWORD *)a4 = v27;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v30;
    if (v30)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v29;
      v29 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v36)
    {
      v7 = v33;
      *(_QWORD *)(a4 + 64) = v32;
      *(_OWORD *)(a4 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v34;
      *(_QWORD *)(a4 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v29) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v26 || (SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_48;
  v13 = (void *)v24;
LABEL_47:
  operator delete(v13);
LABEL_48:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

void sub_20B01AF38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B01AFA4(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C4018E0;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B01B018(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C4018E0;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4019D8;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 11);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B01B1E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B01B204(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C4018E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01B278()
{
  return 11;
}

uint64_t sub_20B01B280(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B01B288@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B01B2A0(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B01B320(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01B344(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC338[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B01B3E8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE11EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE11EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE11EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE11EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B01B458(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 11;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B01B550(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 __p;
  uint64_t v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v41 = a1;
  v39 = 4;
  v40 = a3;
  v38 = 12;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (12 * *a2 <= a3)
  {
    HIDWORD(v8) = -1431655765 * a3;
    LODWORD(v8) = -1431655765 * a3;
    if ((v8 >> 2) >= 0x15555556)
    {
      v21 = 12;
      sub_20B0118AC("Image row byte stride ", &v40, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be a multiple of the pixel byte size (", &v38, (std::string *)").");
      v17 = *(_OWORD *)v22;
      v18 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v19 = 1;
      sub_20B099E24(&v17, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v9 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v10 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v10;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v9 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = (void *)v17;
      goto LABEL_47;
    }
    if ((a1 & 3) != 0)
    {
      v21 = 12;
      sub_20B011B64("Image base address ", &v41, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be aligned with the value type size (", &v39, (std::string *)").");
      *(_OWORD *)v14 = *(_OWORD *)v22;
      v15 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v16 = 1;
      sub_20B099E24((__int128 *)v14, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v11 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v12 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v12;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v11 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v16 || (SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = v14[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v20 = 12 * *a2;
  v21 = 12;
  sub_20B011428("Image row byte stride ", &v40, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v21, (std::string *)". It must be at least: pixel byte size (", &v38, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v20, (std::string *)".");
  v24 = *(_OWORD *)v22;
  v25 = v23;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v26 = 1;
  sub_20B099E24(&v24, (uint64_t)&v27);
  *(_OWORD *)a4 = v27;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v30;
    if (v30)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v29;
      v29 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v36)
    {
      v7 = v33;
      *(_QWORD *)(a4 + 64) = v32;
      *(_OWORD *)(a4 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v34;
      *(_QWORD *)(a4 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v29) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v26 || (SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_48;
  v13 = (void *)v24;
LABEL_47:
  operator delete(v13);
LABEL_48:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

void sub_20B01BA08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B01BA74(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C401A28;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B01BAE8(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C401A28;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C401B20;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 12);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B01BCB8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B01BCD4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C401A28;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01BD48()
{
  return 12;
}

uint64_t sub_20B01BD50(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B01BD58@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B01BD70(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B01BDF0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01BE14(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC358[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B01BEB8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE12EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE12EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE12EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE12EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B01BF28(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 4 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 12;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B01C020(unsigned int *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned int v32;

  v31 = 4;
  v32 = a2;
  if (*a1)
    v4 = a1[1] == 0;
  else
    v4 = 1;
  if (v4)
    goto LABEL_6;
  if (4 * *a1 <= a2)
  {
    if ((a2 & 3) != 0)
    {
      v14 = 13;
      sub_20B0118AC("Image row byte stride ", &v32, (std::string *)" is invalid for pixel format ", &v14, (std::string *)". It must be a multiple of the pixel byte size (", &v31, (std::string *)").");
      *(_OWORD *)v10 = *(_OWORD *)v15;
      v11 = v16;
      v15[1] = 0;
      v16 = 0;
      v15[0] = 0;
      v12 = 1;
      sub_20B099E24((__int128 *)v10, (uint64_t)&v20);
      *(_OWORD *)a3 = v20;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v30)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v7 = v23;
        if (v23)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v22;
          v22 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v29)
        {
          v8 = v26;
          *(_QWORD *)(a3 + 64) = v25;
          *(_OWORD *)(a3 + 48) = v24;
          v24 = 0uLL;
          *(_QWORD *)(a3 + 72) = v8;
          *(_OWORD *)(a3 + 80) = v27;
          *(_QWORD *)(a3 + 96) = v28;
          v25 = 0;
          v27 = 0uLL;
          v28 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v7 && SHIBYTE(v22) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (!v12 || (SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_35;
      v9 = v10[0];
      goto LABEL_34;
    }
LABEL_6:
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v13 = 4 * *a1;
  v14 = 13;
  sub_20B011428("Image row byte stride ", &v32, (std::string *)" is invalid for the given size ", a1, (std::string *)" and pixel format ", &v14, (std::string *)". It must be at least: pixel byte size (", &v31, (std::string *)") x width (", a1, (std::string *)") = ", (unsigned int *)&v13, (std::string *)".");
  v17 = *(_OWORD *)v15;
  v18 = v16;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  v19 = 1;
  sub_20B099E24(&v17, (uint64_t)&v20);
  *(_OWORD *)a3 = v20;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v23;
    if (v23)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v29)
    {
      v6 = v26;
      *(_QWORD *)(a3 + 64) = v25;
      *(_OWORD *)(a3 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v27;
      *(_QWORD *)(a3 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v5 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
    goto LABEL_35;
  v9 = (void *)v17;
LABEL_34:
  operator delete(v9);
LABEL_35:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B01C360(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B01C3B0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C401B70;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B01C424(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C401B70;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C401C68;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 13);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B01C5F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B01C610(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C401B70;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01C684()
{
  return 13;
}

uint64_t sub_20B01C68C(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B01C694@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B01C6A8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B01C728(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01C74C(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC378[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B01C7F0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE13EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE13EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE13EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE13EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B01C860(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 13;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B01C954(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 8;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (8 * *a2 <= a3)
  {
    if ((a3 & 7) != 0)
    {
      v20 = 14;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 14;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 8 * *a2;
  v20 = 14;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B01CDEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B01CE58(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C401CB8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B01CECC(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C401CB8;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C401DB0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 14);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B01D09C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B01D0B8(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C401CB8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01D12C()
{
  return 14;
}

uint64_t sub_20B01D134(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B01D13C@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B01D154(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B01D1D4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01D1F8(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC398[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B01D29C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE14EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE14EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE14EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE14EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B01D30C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 14;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B01D404(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 2;
  v39 = a3;
  v37 = 8;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (8 * *a2 <= a3)
  {
    if ((a3 & 7) != 0)
    {
      v20 = 15;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v20 = 15;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 8 * *a2;
  v20 = 15;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B01D89C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B01D908(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C401E00;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B01D97C(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C401E00;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C401EF8;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 15);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B01DB4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B01DB68(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C401E00;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01DBDC()
{
  return 15;
}

uint64_t sub_20B01DBE4(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B01DBEC@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B01DC04(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B01DC84(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01DCA8(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC3B8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B01DD4C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE15EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE15EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE15EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE15EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B01DDBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 15;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B01DEB4(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  void *v12;
  void *v13[2];
  uint64_t v14;
  char v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  int v19;
  unsigned int v20;
  void *v21[2];
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  __int128 __p;
  uint64_t v28;
  unsigned __int8 v29;
  __int128 v30;
  uint64_t v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  char v35;
  char v36;
  unsigned int v37;
  unsigned int v38;
  unsigned int v39;
  uint64_t v40;

  v40 = a1;
  v38 = 4;
  v39 = a3;
  v37 = 16;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (16 * *a2 <= a3)
  {
    if ((a3 & 0xF) != 0)
    {
      v20 = 16;
      sub_20B0118AC("Image row byte stride ", &v39, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be a multiple of the pixel byte size (", &v37, (std::string *)").");
      v16 = *(_OWORD *)v21;
      v17 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v18 = 1;
      sub_20B099E24(&v16, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v8 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v9 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v9;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v8 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v18 || (SHIBYTE(v17) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = (void *)v16;
      goto LABEL_47;
    }
    if ((a1 & 3) != 0)
    {
      v20 = 16;
      sub_20B011B64("Image base address ", &v40, (std::string *)" is invalid for pixel format ", &v20, (std::string *)". It must be aligned with the value type size (", &v38, (std::string *)").");
      *(_OWORD *)v13 = *(_OWORD *)v21;
      v14 = v22;
      v21[1] = 0;
      v22 = 0;
      v21[0] = 0;
      v15 = 1;
      sub_20B099E24((__int128 *)v13, (uint64_t)&v26);
      *(_OWORD *)a4 = v26;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v36)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v10 = v29;
        if (v29)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v28;
          v28 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v35)
        {
          v11 = v32;
          *(_QWORD *)(a4 + 64) = v31;
          *(_OWORD *)(a4 + 48) = v30;
          v30 = 0uLL;
          *(_QWORD *)(a4 + 72) = v11;
          *(_OWORD *)(a4 + 80) = v33;
          *(_QWORD *)(a4 + 96) = v34;
          v31 = 0;
          v33 = 0uLL;
          v34 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v10 && SHIBYTE(v28) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v15 || (SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_48;
      v12 = v13[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v19 = 16 * *a2;
  v20 = 16;
  sub_20B011428("Image row byte stride ", &v39, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v20, (std::string *)". It must be at least: pixel byte size (", &v37, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v19, (std::string *)".");
  v23 = *(_OWORD *)v21;
  v24 = v22;
  v21[1] = 0;
  v22 = 0;
  v21[0] = 0;
  v25 = 1;
  sub_20B099E24(&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v36)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v29;
    if (v29)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v35)
    {
      v7 = v32;
      *(_QWORD *)(a4 + 64) = v31;
      *(_OWORD *)(a4 + 48) = v30;
      v30 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v33;
      *(_QWORD *)(a4 + 96) = v34;
      v31 = 0;
      v33 = 0uLL;
      v34 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v25 || (SHIBYTE(v24) & 0x80000000) == 0)
    goto LABEL_48;
  v12 = (void *)v23;
LABEL_47:
  operator delete(v12);
LABEL_48:
  if (SHIBYTE(v22) < 0)
    operator delete(v21[0]);
}

void sub_20B01E350(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B01E3BC(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C401F48;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B01E430(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C401F48;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C402040;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 16);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B01E600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B01E61C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C401F48;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01E690()
{
  return 16;
}

uint64_t sub_20B01E698(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B01E6A0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 4 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B01E6B8(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B01E738(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01E75C(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC3D8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B01E800(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE16EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE16EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE16EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE16EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B01E870(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 4 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 16;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B01E968(unsigned int *a1@<X1>, unsigned int a2@<W2>, uint64_t a3@<X8>)
{
  BOOL v4;
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  void *v9;
  void *v10[2];
  uint64_t v11;
  char v12;
  int v13;
  unsigned int v14;
  void *v15[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  unsigned int v31;
  unsigned int v32;

  v31 = 3;
  v32 = a2;
  if (*a1)
    v4 = a1[1] == 0;
  else
    v4 = 1;
  if (v4)
    goto LABEL_6;
  if (3 * *a1 <= a2)
  {
    if (-1431655765 * a2 >= 0x55555556)
    {
      v14 = 17;
      sub_20B0118AC("Image row byte stride ", &v32, (std::string *)" is invalid for pixel format ", &v14, (std::string *)". It must be a multiple of the pixel byte size (", &v31, (std::string *)").");
      *(_OWORD *)v10 = *(_OWORD *)v15;
      v11 = v16;
      v15[1] = 0;
      v16 = 0;
      v15[0] = 0;
      v12 = 1;
      sub_20B099E24((__int128 *)v10, (uint64_t)&v20);
      *(_OWORD *)a3 = v20;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v30)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v7 = v23;
        if (v23)
        {
          *(_OWORD *)(a3 + 16) = __p;
          *(_QWORD *)(a3 + 32) = v22;
          v22 = 0;
          __p = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v29)
        {
          v8 = v26;
          *(_QWORD *)(a3 + 64) = v25;
          *(_OWORD *)(a3 + 48) = v24;
          v24 = 0uLL;
          *(_QWORD *)(a3 + 72) = v8;
          *(_OWORD *)(a3 + 80) = v27;
          *(_QWORD *)(a3 + 96) = v28;
          v25 = 0;
          v27 = 0uLL;
          v28 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v7 && SHIBYTE(v22) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (!v12 || (SHIBYTE(v11) & 0x80000000) == 0)
        goto LABEL_35;
      v9 = v10[0];
      goto LABEL_34;
    }
LABEL_6:
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v13 = 3 * *a1;
  v14 = 17;
  sub_20B011428("Image row byte stride ", &v32, (std::string *)" is invalid for the given size ", a1, (std::string *)" and pixel format ", &v14, (std::string *)". It must be at least: pixel byte size (", &v31, (std::string *)") x width (", a1, (std::string *)") = ", (unsigned int *)&v13, (std::string *)".");
  v17 = *(_OWORD *)v15;
  v18 = v16;
  v15[1] = 0;
  v16 = 0;
  v15[0] = 0;
  v19 = 1;
  sub_20B099E24(&v17, (uint64_t)&v20);
  *(_OWORD *)a3 = v20;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v23;
    if (v23)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v22;
      v22 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v29)
    {
      v6 = v26;
      *(_QWORD *)(a3 + 64) = v25;
      *(_OWORD *)(a3 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v27;
      *(_QWORD *)(a3 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v5 && SHIBYTE(v22) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
    goto LABEL_35;
  v9 = (void *)v17;
LABEL_34:
  operator delete(v9);
LABEL_35:
  if (SHIBYTE(v16) < 0)
    operator delete(v15[0]);
}

void sub_20B01ECBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,char a35)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a28 < 0)
    operator delete(a23);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B01ED0C(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C402090;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B01ED80(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C402090;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C402188;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 17);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B01EF50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B01EF6C(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C402090;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01EFE0()
{
  return 17;
}

uint64_t sub_20B01EFE8(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B01EFF0@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B01F004(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B01F084(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01F0A8(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC3F8[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B01F14C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE17EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE17EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE17EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE17EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B01F1BC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 17;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B01F2B0(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 __p;
  uint64_t v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v41 = a1;
  v39 = 2;
  v40 = a3;
  v38 = 6;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (6 * *a2 <= a3)
  {
    HIDWORD(v8) = -1431655765 * a3;
    LODWORD(v8) = -1431655765 * a3;
    if ((v8 >> 1) >= 0x2AAAAAAB)
    {
      v21 = 18;
      sub_20B0118AC("Image row byte stride ", &v40, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be a multiple of the pixel byte size (", &v38, (std::string *)").");
      v17 = *(_OWORD *)v22;
      v18 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v19 = 1;
      sub_20B099E24(&v17, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v9 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v10 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v10;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v9 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = (void *)v17;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v21 = 18;
      sub_20B011B64("Image base address ", &v41, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be aligned with the value type size (", &v39, (std::string *)").");
      *(_OWORD *)v14 = *(_OWORD *)v22;
      v15 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v16 = 1;
      sub_20B099E24((__int128 *)v14, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v11 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v12 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v12;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v11 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v16 || (SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = v14[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v20 = 6 * *a2;
  v21 = 18;
  sub_20B011428("Image row byte stride ", &v40, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v21, (std::string *)". It must be at least: pixel byte size (", &v38, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v20, (std::string *)".");
  v24 = *(_OWORD *)v22;
  v25 = v23;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v26 = 1;
  sub_20B099E24(&v24, (uint64_t)&v27);
  *(_OWORD *)a4 = v27;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v30;
    if (v30)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v29;
      v29 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v36)
    {
      v7 = v33;
      *(_QWORD *)(a4 + 64) = v32;
      *(_OWORD *)(a4 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v34;
      *(_QWORD *)(a4 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v29) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v26 || (SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_48;
  v13 = (void *)v24;
LABEL_47:
  operator delete(v13);
LABEL_48:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

void sub_20B01F764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42)
{
  if (a21 && a20 < 0)
    operator delete(__p);
  if (a35 < 0)
    operator delete(a30);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B01F7D0(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C4021D8;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B01F844(uint64_t a1, std::__shared_weak_count_vtbl **a2)
{
  std::__shared_weak_count_vtbl *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  __int128 v12;
  __int128 v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v21;
  _OWORD *v22;

  *(_QWORD *)a1 = &off_24C4021D8;
  v4 = *a2;
  if (*a2)
  {
    v5 = (std::__shared_weak_count *)operator new();
    v6 = v5;
    v7 = *a2;
    v5->__shared_owners_ = 0;
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C4022D0;
    v5->__shared_weak_owners_ = 0;
    v5[1].__vftable = v7;
    v21 = v5;
    *a2 = 0;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    *(_QWORD *)(a1 + 8) = v4;
    *(_QWORD *)(a1 + 16) = v5;
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  else
  {
    v21 = 0;
    *a2 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
  }
  (*((void (**)(_OWORD **__return_ptr, std::__shared_weak_count_vtbl *, uint64_t))v4->~__shared_weak_count + 9))(&v22, v4, 18);
  v13 = v22[1];
  v12 = v22[2];
  *(_OWORD *)(a1 + 24) = *v22;
  *(_OWORD *)(a1 + 40) = v13;
  *(_OWORD *)(a1 + 56) = v12;
  v22 = 0;
  MEMORY[0x20BD3583C]();
  v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    v15 = (unint64_t *)&v14->__shared_owners_;
    do
      v16 = __ldxr(v15);
    while (__stxr(v16 + 1, v15));
    do
      v17 = __ldaxr(v15);
    while (__stlxr(v17 - 1, v15));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  if (!v21)
    return a1;
  v18 = (unint64_t *)&v21->__shared_owners_;
  do
    v19 = __ldaxr(v18);
  while (__stlxr(v19 - 1, v18));
  if (v19)
    return a1;
  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
  std::__shared_weak_count::__release_weak(v21);
  return a1;
}

void sub_20B01FA14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC147C(v2);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B01FA30(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C4021D8;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01FAA4()
{
  return 18;
}

uint64_t sub_20B01FAAC(uint64_t a1)
{
  return a1 + 56;
}

uint64_t sub_20B01FAB4@<X0>(uint64_t result@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(result + 36);
  *(_DWORD *)(a2 + 8) = 2 * *(_DWORD *)(result + 52);
  return result;
}

uint64_t sub_20B01FACC(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  unint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2)
    return v1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldxr(p_shared_owners);
  while (__stxr(v4 + 1, p_shared_owners));
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (v5)
    return v1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return v1;
}

void sub_20B01FB4C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B01FB70(uint64_t result)
{
  uint64_t v1;
  void (*v2)(_QWORD, _QWORD);
  char v3;

  v1 = *(_QWORD *)(result + 24);
  if (v1)
  {
    LODWORD(v2) = *(_DWORD *)(v1 + 160);
    if ((_DWORD)v2)
    {
      if ((_DWORD)v2 == -1)
        goto LABEL_9;
    }
    else
    {
      v2 = *(void (**)(_QWORD, _QWORD))(v1 + 64);
      if (v2)
      {
        v2(*(_QWORD *)(v1 + 56), *(_QWORD *)(v1 + 48));
        LODWORD(v2) = *(_DWORD *)(v1 + 160);
        if ((_DWORD)v2 == -1)
        {
LABEL_9:
          *(_DWORD *)(v1 + 160) = -1;
          JUMPOUT(0x20BD3583CLL);
        }
      }
    }
    ((void (*)(char *, uint64_t))off_24C3FC418[v2])(&v3, v1 + 48);
    goto LABEL_9;
  }
  return result;
}

uint64_t sub_20B01FC14(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE18EEEEE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE18EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE18EEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__114default_deleteIKN4cv3d2vl13visual_logger14ExternalBufferILNS1_3kit3img6FormatE18EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B01FC84(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldxr(p_shared_owners);
    while (__stxr(v5 + 1, p_shared_owners));
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v6 = *(_QWORD *)(a2 + 36);
    v7 = *(_DWORD *)(a2 + 52);
    v8 = *(_QWORD *)(a2 + 24);
  }
  *(_QWORD *)a1 = v2;
  *(_QWORD *)(a1 + 8) = v3;
  *(_QWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 24) = 2 * v7;
  *(_QWORD *)(a1 + 32) = v8;
  *(_DWORD *)(a1 + 40) = 18;
  *(_WORD *)(a1 + 44) = 0;
  if (v3)
  {
    v11 = (unint64_t *)&v3->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
    do
      v13 = __ldaxr(v11);
    while (__stlxr(v13 - 1, v11));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
}

void sub_20B01FD7C(uint64_t a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  BOOL v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  void *v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;
  char v19;
  int v20;
  unsigned int v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  __int128 v27;
  __int128 __p;
  uint64_t v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  unsigned int v38;
  unsigned int v39;
  unsigned int v40;
  uint64_t v41;

  v41 = a1;
  v39 = 2;
  v40 = a3;
  v38 = 6;
  if (*a2)
    v5 = a2[1] == 0;
  else
    v5 = 1;
  if (v5)
    goto LABEL_6;
  if (6 * *a2 <= a3)
  {
    HIDWORD(v8) = -1431655765 * a3;
    LODWORD(v8) = -1431655765 * a3;
    if ((v8 >> 1) >= 0x2AAAAAAB)
    {
      v21 = 19;
      sub_20B0118AC("Image row byte stride ", &v40, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be a multiple of the pixel byte size (", &v38, (std::string *)").");
      v17 = *(_OWORD *)v22;
      v18 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v19 = 1;
      sub_20B099E24(&v17, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v9 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v10 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v10;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v9 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v19 || (SHIBYTE(v18) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = (void *)v17;
      goto LABEL_47;
    }
    if ((a1 & 1) != 0)
    {
      v21 = 19;
      sub_20B011B64("Image base address ", &v41, (std::string *)" is invalid for pixel format ", &v21, (std::string *)". It must be aligned with the value type size (", &v39, (std::string *)").");
      *(_OWORD *)v14 = *(_OWORD *)v22;
      v15 = v23;
      v22[1] = 0;
      v23 = 0;
      v22[0] = 0;
      v16 = 1;
      sub_20B099E24((__int128 *)v14, (uint64_t)&v27);
      *(_OWORD *)a4 = v27;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v37)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v11 = v30;
        if (v30)
        {
          *(_OWORD *)(a4 + 16) = __p;
          *(_QWORD *)(a4 + 32) = v29;
          v29 = 0;
          __p = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v36)
        {
          v12 = v33;
          *(_QWORD *)(a4 + 64) = v32;
          *(_OWORD *)(a4 + 48) = v31;
          v31 = 0uLL;
          *(_QWORD *)(a4 + 72) = v12;
          *(_OWORD *)(a4 + 80) = v34;
          *(_QWORD *)(a4 + 96) = v35;
          v32 = 0;
          v34 = 0uLL;
          v35 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v11 && SHIBYTE(v29) < 0)
          operator delete((void *)__p);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (!v16 || (SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_48;
      v13 = v14[0];
      goto LABEL_47;
    }
LABEL_6:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v20 = 6 * *a2;
  v21 = 19;
  sub_20B011428("Image row byte stride ", &v40, (std::string *)" is invalid for the given size ", a2, (std::string *)" and pixel format ", &v21, (std::string *)". It must be at least: pixel byte size (", &v38, (std::string *)") x width (", a2, (std::string *)") = ", (unsigned int *)&v20, (std::string *)".");
  v24 = *(_OWORD *)v22;
  v25 = v23;
  v22[1] = 0;
  v23 = 0;
  v22[0] = 0;
  v26 = 1;
  sub_20B099E24(&v24, (uint64_t)&v27);
  *(_OWORD *)a4 = v27;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v37)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v6 = v30;
    if (v30)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v29;
      v29 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v36)
    {
      v7 = v33;
      *(_QWORD *)(a4 + 64) = v32;
      *(_OWORD *)(a4 + 48) = v31;
      v31 = 0uLL;
      *(_QWORD *)(a4 + 72) = v7;
      *(_OWORD *)(a4 + 80) = v34;
      *(_QWORD *)(a4 + 96) = v35;
      v32 = 0;
      v34 = 0uLL;
      v35 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v6 && SHIBYTE(v29) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (!v26 || (SHIBYTE(v25) & 0x80000000) == 0)
    goto LABEL_48;
  v13 = (void *)v24;
LABEL_47:
  operator delete(v13);
LABEL_48:
  if (SHIBYTE(v23) < 0)
    operator delete(v22[0]);
}

