void sub_20B08480C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B08483C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_20AECFA60((uint64_t)&a26);
  _Unwind_Resume(a1);
}

void sub_20B08485C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  uint64_t v26;

  if (*(char *)(v26 - 81) < 0)
  {
    operator delete(*(void **)(v26 - 104));
    sub_20AECFA60((uint64_t)&a26);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B08484CLL);
}

void sub_20B084880(uint64_t a1, uint64_t a2, __int128 *a3)
{
  uint64_t v6;
  mach_timebase_info v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  mach_timebase_info v11;
  std::__shared_weak_count *v12;
  mach_timebase_info v13;
  unsigned __int8 v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  unsigned __int128 *v18;
  unsigned __int128 v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  _QWORD v30[2];
  std::__shared_weak_count *v31;
  mach_timebase_info info;
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  mach_timebase_info v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  __int128 v44;
  char v45;
  __int128 v46;
  uint64_t v47;
  unsigned __int128 v48;
  char v49;
  _BYTE v50[40];
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a3 + 384))
  {
    if (*((_BYTE *)a3 + 168))
    {
      v7 = (mach_timebase_info)*((_QWORD *)a3 + 19);
      v6 = *((_QWORD *)a3 + 20);
      if (*((_BYTE *)a3 + 24))
        goto LABEL_4;
    }
    else
    {
      v6 = mach_continuous_time();
      v14 = atomic_load((unsigned __int8 *)&qword_25463D170);
      if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
      {
        mach_timebase_info(&v36);
        LODWORD(v28) = v36.numer;
        LODWORD(v29) = v36.denom;
        *(double *)&qword_25463D168 = (double)v28 / (double)v29;
        __cxa_guard_release(&qword_25463D170);
      }
      v7 = (mach_timebase_info)llround(*(double *)&qword_25463D168 * (double)v6);
      LOBYTE(v6) = 2;
      if (*((_BYTE *)a3 + 24))
      {
LABEL_4:
        sub_20AFA84B0((uint64_t *)a3, 1000000000);
        v8 = *((unsigned __int8 *)a3 + 24);
        v36 = v7;
        LOBYTE(v37) = v6;
        LOBYTE(v38) = 0;
        v40 = 0;
        if (v8)
        {
          if (*((char *)a3 + 23) < 0)
          {
            sub_20AEC60F4(&v38, *(void **)a3, *((_QWORD *)a3 + 1));
          }
          else
          {
            v38 = *a3;
            v39 = *((_QWORD *)a3 + 2);
          }
          v40 = 1;
          LOBYTE(v41) = 0;
          v43 = 0;
          if (!*((_BYTE *)a3 + 120))
          {
LABEL_28:
            LOBYTE(v44) = 0;
            v45 = 0;
            if (!*((_BYTE *)a3 + 144))
            {
LABEL_30:
              LOBYTE(v46) = 0;
              v49 = 0;
              if (*((_BYTE *)a3 + 80))
              {
                if (*((char *)a3 + 55) < 0)
                {
                  sub_20AEC60F4(&v46, *((void **)a3 + 4), *((_QWORD *)a3 + 5));
                }
                else
                {
                  v46 = a3[2];
                  v47 = *((_QWORD *)a3 + 6);
                }
                v18 = (unsigned __int128 *)(a3 + 4);
                do
                  v19 = __ldaxp(v18);
                while (__stlxp(v19, v18));
                v48 = v19;
                v49 = 1;
              }
              sub_20AED3838((uint64_t)v50, (uint64_t)(a3 + 11));
              sub_20B08AC1C(a2, (uint64_t)&v36, &v35);
              v20 = v35;
              v35 = 0;
              info = (mach_timebase_info)&off_24C411E78;
              v33 = v20;
              if (v20)
              {
                v21 = (std::__shared_weak_count *)operator new();
                v21->__vftable = (std::__shared_weak_count_vtbl *)&off_24C411F70;
                v21->__shared_owners_ = 0;
                v21->__shared_weak_owners_ = 0;
                v21[1].__vftable = (std::__shared_weak_count_vtbl *)v20;
                v22 = v35;
                v34 = v21;
                v35 = 0;
                if (v22)
                  (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
              }
              else
              {
                v34 = 0;
              }
              sub_20AFA7F18(a1, (uint64_t)&info);
              v23 = v34;
              if (v34)
              {
                p_shared_owners = (unint64_t *)&v34->__shared_owners_;
                do
                  v25 = __ldaxr(p_shared_owners);
                while (__stlxr(v25 - 1, p_shared_owners));
                if (!v25)
                {
                  ((void (*)(std::__shared_weak_count *))v23->__on_zero_shared)(v23);
                  std::__shared_weak_count::__release_weak(v23);
                }
              }
              sub_20AF4EA3C((uint64_t)&v36);
              return;
            }
LABEL_29:
            v44 = a3[8];
            v45 = 1;
            goto LABEL_30;
          }
LABEL_15:
          if (*((char *)a3 + 119) < 0)
          {
            sub_20AEC60F4(&v41, *((void **)a3 + 12), *((_QWORD *)a3 + 13));
          }
          else
          {
            v41 = a3[6];
            v42 = *((_QWORD *)a3 + 14);
          }
          v43 = 1;
          LOBYTE(v44) = 0;
          v45 = 0;
          if (!*((_BYTE *)a3 + 144))
            goto LABEL_30;
          goto LABEL_29;
        }
LABEL_14:
        LOBYTE(v41) = 0;
        v43 = 0;
        if (!*((_BYTE *)a3 + 120))
          goto LABEL_28;
        goto LABEL_15;
      }
    }
    v36 = v7;
    LOBYTE(v37) = v6;
    LOBYTE(v38) = 0;
    v40 = 0;
    goto LABEL_14;
  }
  v9 = mach_continuous_time();
  v10 = atomic_load((unsigned __int8 *)&qword_25463D170);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
  {
    mach_timebase_info(&info);
    LODWORD(v26) = info.numer;
    LODWORD(v27) = info.denom;
    *(double *)&qword_25463D168 = (double)v26 / (double)v27;
    __cxa_guard_release(&qword_25463D170);
  }
  v36 = (mach_timebase_info)llround(*(double *)&qword_25463D168 * (double)v9);
  v37 = 2;
  LOBYTE(v38) = 0;
  v40 = 0;
  LOBYTE(v41) = 0;
  v43 = 0;
  LOBYTE(v44) = 0;
  v45 = 0;
  LOBYTE(v46) = 0;
  v49 = 0;
  v50[0] = 0;
  v50[24] = 0;
  sub_20B08AC1C(a2, (uint64_t)&v36, (uint64_t *)&info);
  v11 = info;
  info = 0;
  v30[0] = &off_24C411E78;
  v30[1] = v11;
  if (v11)
  {
    v12 = (std::__shared_weak_count *)operator new();
    v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24C411F70;
    v12->__shared_owners_ = 0;
    v12->__shared_weak_owners_ = 0;
    v12[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
    v13 = info;
    v31 = v12;
    info = 0;
    if (v13)
      (*(void (**)(mach_timebase_info))(**(_QWORD **)&v13 + 8))(v13);
  }
  else
  {
    v31 = 0;
  }
  sub_20AF4EA3C((uint64_t)&v36);
  sub_20AFA7F18(a1, (uint64_t)v30);
  v15 = v31;
  if (v31)
  {
    v16 = (unint64_t *)&v31->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
}

void sub_20B084D00(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B084D18(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B084D30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46)
{
  if (a25)
  {
    if (a24 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B084E54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  int v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t **v41;
  uint64_t **v42;
  unsigned int v43;
  _WORD *v44;
  uint64_t *v45;
  uint64_t *v46;
  unsigned __int8 v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  void *v52;
  uint64_t *v53;
  uint64_t **v54;
  unsigned int v55;
  uint64_t *v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  uint64_t *v63;
  uint64_t **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t **v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t *v71;
  unint64_t v72;
  std::logic_error *exception;
  _BYTE v74[32];
  _BYTE v75[32];
  _BYTE v76[32];
  _BYTE v77[32];
  _BYTE v78[32];
  _BYTE v79[32];
  uint64_t **v80;
  uint64_t *v81;
  uint64_t v82;
  uint64_t **v83;
  uint64_t *v84;
  uint64_t v85;
  void *v86;
  __int128 v87;
  char v88;
  __int128 v89;
  uint64_t v90;
  int v91;
  void *v92;
  uint64_t v93;
  uint64_t v94;
  std::__shared_weak_count *v95;
  unsigned __int16 v96;
  std::string __dst;
  int v98;
  uint64_t v99;

  v99 = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a1 + 424);
  v5 = *(std::__shared_weak_count **)(a1 + 432);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
  {
    v8 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40B990, 0) != 0;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_11;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_11:
    if (v8)
      goto LABEL_12;
LABEL_61:
    v12 = 0;
    v94 = 0;
    v95 = 0;
    goto LABEL_62;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v8)
    goto LABEL_61;
LABEL_12:
  v11 = *(_QWORD *)(a1 + 424);
  v12 = *(std::__shared_weak_count **)(a1 + 432);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v94 = v11;
  v95 = v12;
  if (!v11)
  {
LABEL_62:
    v47 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v47 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
    {
      v89 = xmmword_20B5B0AE0;
      sub_20B1DFBA8((uint64_t *)&v89);
      __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF48);
    }
    if (byte_25463CE68[23] < 0)
      sub_20AEC60F4(&__dst, *(void **)byte_25463CE68, *(unint64_t *)&byte_25463CE68[8]);
    else
      __dst = *(std::string *)byte_25463CE68;
    v98 = dword_25463CE80;
    sub_20AF4BC0C(&v92, (uint64_t)&__dst, 1uLL);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC60F4(&v89, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      v89 = *(_OWORD *)a1;
      v90 = *(_QWORD *)(a1 + 16);
    }
    v91 = *(_DWORD *)(a1 + 24);
    v86 = operator new(0x20uLL);
    v87 = xmmword_20B5B35F0;
    strcpy((char *)v86, "cannot return data as VZMesh");
    v88 = 1;
    sub_20B099ED4((uint64_t *)&v92, (uint64_t)&v89, (uint64_t)&v86, (uint64_t)v74);
    *(_OWORD *)a2 = *(_OWORD *)v74;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v77[16])
    {
      *(_BYTE *)(a2 + 40) = 0;
      v48 = v75[8];
      if (v75[8])
      {
        *(_OWORD *)(a2 + 16) = *(_OWORD *)&v74[16];
        *(_QWORD *)(a2 + 32) = *(_QWORD *)v75;
        *(_QWORD *)&v74[24] = 0;
        *(_QWORD *)v75 = 0;
        *(_QWORD *)&v74[16] = 0;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v77[8])
      {
        v49 = *(_QWORD *)&v76[8];
        *(_QWORD *)(a2 + 64) = *(_QWORD *)v76;
        *(_OWORD *)(a2 + 48) = *(_OWORD *)&v75[16];
        *(_QWORD *)&v75[16] = 0;
        *(_QWORD *)&v75[24] = 0;
        *(_QWORD *)(a2 + 72) = v49;
        *(_OWORD *)(a2 + 80) = *(_OWORD *)&v76[16];
        *(_QWORD *)(a2 + 96) = *(_QWORD *)v77;
        *(_QWORD *)v76 = 0;
        *(_QWORD *)&v76[16] = 0;
        *(_QWORD *)&v76[24] = 0;
        *(_QWORD *)v77 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 240) = 0;
      if (v48 && (v75[7] & 0x80000000) != 0)
        operator delete(*(void **)&v74[16]);
      if (!v88)
      {
LABEL_82:
        if (SHIBYTE(v90) < 0)
          operator delete((void *)v89);
        v50 = (uint64_t)v92;
        if (v92)
        {
          v51 = v93;
          v52 = v92;
          if ((void *)v93 != v92)
          {
            do
            {
              if (*(char *)(v51 - 9) < 0)
                operator delete(*(void **)(v51 - 32));
              v51 -= 32;
            }
            while (v51 != v50);
            v52 = v92;
          }
          v93 = v50;
          operator delete(v52);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
        if (v12)
          goto LABEL_118;
        return;
      }
    }
    else
    {
      *(_BYTE *)(a2 + 240) = 0;
      if (!v88)
        goto LABEL_82;
    }
    if (SHIBYTE(v87) < 0)
      operator delete(v86);
    goto LABEL_82;
  }
  v15 = *(uint64_t **)(v11 + 8);
  *(_QWORD *)v74 = 0;
  *(_OWORD *)&v74[8] = xmmword_20B5B20E0;
  *(_QWORD *)&v74[24] = 0;
  *(_QWORD *)v75 = 0;
  *(_OWORD *)&v75[8] = xmmword_20B5B20E0;
  *(_QWORD *)&v75[24] = 0;
  *(_QWORD *)v76 = 0;
  *(_OWORD *)&v76[8] = xmmword_20B5B20E0;
  *(_QWORD *)&v76[24] = 0;
  *(_QWORD *)v77 = 0;
  *(_OWORD *)&v77[8] = xmmword_20B5B20E0;
  *(_QWORD *)&v77[24] = 0;
  *(_QWORD *)v78 = 0;
  *(_OWORD *)&v78[8] = xmmword_20B5B20E0;
  *(_QWORD *)&v78[24] = 0;
  *(_QWORD *)v79 = 0;
  *(_OWORD *)&v79[8] = xmmword_20B5B20E0;
  v81 = 0;
  v82 = 0;
  *(_QWORD *)&v79[24] = 0;
  v80 = &v81;
  v84 = 0;
  v85 = 0;
  v83 = &v84;
  v17 = *v15;
  v16 = v15[1];
  if (*v15 != v16)
  {
    v18 = (v16 - v17) >> 2;
    v19 = 0xAAAAAAAAAAAAAAABLL * v18;
    if (-1431655765 * (_DWORD)v18)
      v20 = 3;
    else
      v20 = 0;
    if (-1431655765 * (_DWORD)v18)
      v21 = 3;
    else
      v21 = 0;
    if (v20 * (_DWORD)v19 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)v74 = v17;
    *(_QWORD *)&v74[8] = (v19 << 32) | 3;
    *(_QWORD *)&v74[16] = (v21 << 32) | 1;
    *(_DWORD *)&v74[24] = v19;
    *(_DWORD *)&v74[28] = v20;
  }
  v23 = v15[14];
  v22 = v15[15];
  if (v23 != v22)
  {
    v24 = (v22 - v23) >> 2;
    v25 = 0xAAAAAAAAAAAAAAABLL * v24;
    if (-1431655765 * (_DWORD)v24)
      v26 = 3;
    else
      v26 = 0;
    if (-1431655765 * (_DWORD)v24)
      v27 = 3;
    else
      v27 = 0;
    if (v26 * (_DWORD)v25 == -1
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    *(_QWORD *)v75 = v23;
    *(_QWORD *)&v75[8] = (v25 << 32) | 3;
    *(_QWORD *)&v75[16] = (v27 << 32) | 1;
    *(_DWORD *)&v75[24] = v25;
    *(_DWORD *)&v75[28] = v26;
  }
  v28 = v15[9];
  v29 = v15[10];
  if (v28 != v29)
    sub_20B080AC0(v28, v29, *((_DWORD *)v15 + 26), (uint64_t)v78, (uint64_t)v79, (uint64_t)"normals");
  v30 = v15[4];
  v31 = v15[5];
  if (v30 != v31)
    sub_20B080AC0(v30, v31, *((_DWORD *)v15 + 16), (uint64_t)v76, (uint64_t)v77, (uint64_t)"colors");
  v32 = (uint64_t *)v15[30];
  v33 = v15[31];
  if (v32 != (uint64_t *)v33)
    sub_20B080C90((uint64_t *)v74, v32, v33, *((_DWORD *)v15 + 68), 0x64u);
  v34 = (uint64_t *)v15[35];
  v35 = v15[36];
  if (v34 != (uint64_t *)v35)
    sub_20B080C90((uint64_t *)v74, v34, v35, *((_DWORD *)v15 + 78), 0x65u);
  v36 = (uint64_t *)v15[40];
  v37 = (uint64_t *)v15[41];
  if (v36 != v37)
  {
    v38 = *((_DWORD *)v15 + 88);
    v96 = 102;
    if (v38 == 2)
    {
      if (v36
        || !v37
        || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        v39 = (uint64_t *)((char *)v37 - (char *)v36);
        v53 = v84;
        v54 = &v84;
        v42 = &v84;
        if (v84)
        {
          while (1)
          {
            while (1)
            {
              v42 = (uint64_t **)v53;
              v55 = *((unsigned __int16 *)v53 + 16);
              if (v55 < 0x67)
                break;
              v53 = *v42;
              v54 = v42;
              if (!*v42)
                goto LABEL_106;
            }
            if (v55 == 102)
              goto LABEL_110;
            v53 = v42[1];
            if (!v53)
            {
              v54 = v42 + 1;
              break;
            }
          }
        }
LABEL_106:
        v44 = operator new(0x40uLL);
        v44[16] = 102;
        *((_QWORD *)v44 + 6) = 0;
        *((_QWORD *)v44 + 7) = 0;
        *((_QWORD *)v44 + 5) = 0;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
        *((_QWORD *)v44 + 2) = v42;
        *v54 = (uint64_t *)v44;
        v56 = (uint64_t *)v44;
        if (*v83)
        {
          v83 = (uint64_t **)*v83;
          v56 = *v54;
        }
        sub_20AEC84C8(v84, v56);
        v46 = &v85;
        goto LABEL_109;
      }
    }
    else
    {
      if (v38 != 1)
      {
        exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
        sub_20B086000((uint64_t)&v89, &v96);
        sub_20B085F60(&__dst, (uint64_t *)&v89);
        std::logic_error::logic_error(exception, &__dst);
        exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
        __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
      }
      if (v36
        || !v37
        || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        v39 = (uint64_t *)((char *)v37 - (char *)v36);
        v40 = v81;
        v41 = &v81;
        v42 = &v81;
        if (v81)
        {
          while (1)
          {
            while (1)
            {
              v42 = (uint64_t **)v40;
              v43 = *((unsigned __int16 *)v40 + 16);
              if (v43 < 0x67)
                break;
              v40 = *v42;
              v41 = v42;
              if (!*v42)
                goto LABEL_57;
            }
            if (v43 == 102)
              goto LABEL_110;
            v40 = v42[1];
            if (!v40)
            {
              v41 = v42 + 1;
              break;
            }
          }
        }
LABEL_57:
        v44 = operator new(0x40uLL);
        v44[16] = 102;
        *((_QWORD *)v44 + 6) = 0;
        *((_QWORD *)v44 + 7) = 0;
        *((_QWORD *)v44 + 5) = 0;
        *(_QWORD *)v44 = 0;
        *((_QWORD *)v44 + 1) = 0;
        *((_QWORD *)v44 + 2) = v42;
        *v41 = (uint64_t *)v44;
        v45 = (uint64_t *)v44;
        if (*v80)
        {
          v80 = (uint64_t **)*v80;
          v45 = *v41;
        }
        sub_20AEC84C8(v81, v45);
        v46 = &v82;
LABEL_109:
        ++*v46;
        v42 = (uint64_t **)v44;
LABEL_110:
        *((_BYTE *)v42 + 40) = 11;
        v42[6] = v39;
        v42[7] = v36;
        goto LABEL_111;
      }
    }
    abort();
  }
LABEL_111:
  v57 = *(_OWORD *)&v78[16];
  *(_OWORD *)(a2 + 128) = *(_OWORD *)v78;
  *(_OWORD *)(a2 + 144) = v57;
  v58 = *(_OWORD *)&v79[16];
  *(_OWORD *)(a2 + 160) = *(_OWORD *)v79;
  *(_OWORD *)(a2 + 176) = v58;
  v59 = *(_OWORD *)&v76[16];
  *(_OWORD *)(a2 + 64) = *(_OWORD *)v76;
  *(_OWORD *)(a2 + 80) = v59;
  v60 = *(_OWORD *)&v77[16];
  *(_OWORD *)(a2 + 96) = *(_OWORD *)v77;
  *(_OWORD *)(a2 + 112) = v60;
  v61 = *(_OWORD *)&v74[16];
  *(_OWORD *)a2 = *(_OWORD *)v74;
  *(_OWORD *)(a2 + 16) = v61;
  v62 = *(_OWORD *)&v75[16];
  *(_OWORD *)(a2 + 32) = *(_OWORD *)v75;
  *(_OWORD *)(a2 + 48) = v62;
  v64 = v80;
  v63 = v81;
  *(_QWORD *)(a2 + 200) = v81;
  v65 = a2 + 200;
  *(_QWORD *)(a2 + 192) = v64;
  v66 = v82;
  *(_QWORD *)(a2 + 208) = v82;
  if (v66)
  {
    v63[2] = v65;
    v80 = &v81;
    v81 = 0;
    v82 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 192) = v65;
  }
  v68 = v83;
  v67 = v84;
  *(_QWORD *)(a2 + 224) = v84;
  v69 = a2 + 224;
  *(_QWORD *)(a2 + 216) = v68;
  v70 = v85;
  *(_QWORD *)(a2 + 232) = v85;
  if (v70)
  {
    v67[2] = v69;
    v67 = 0;
    v83 = &v84;
    v84 = 0;
    v85 = 0;
  }
  else
  {
    *(_QWORD *)(a2 + 216) = v69;
  }
  *(_BYTE *)(a2 + 240) = 1;
  sub_20AF22AAC((uint64_t)&v83, v67);
  sub_20AF22AAC((uint64_t)&v80, v81);
  v12 = v95;
  if (v95)
  {
LABEL_118:
    v71 = (unint64_t *)&v12->__shared_owners_;
    do
      v72 = __ldaxr(v71);
    while (__stlxr(v72 - 1, v71));
    if (!v72)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B085758(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C(v1 - 168);
  _Unwind_Resume(a1);
}

void sub_20B085778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,char a45)
{
  void *v45;
  int v46;
  uint64_t v47;

  if (*(char *)(v47 - 121) < 0)
    operator delete(*(void **)(v47 - 144));
  if (*(char *)(v47 - 201) < 0)
  {
    operator delete(*(void **)(v47 - 224));
    if ((v46 & 1) == 0)
    {
LABEL_8:
      sub_20B080F60((uint64_t)&a9);
      sub_20AEC147C(v47 - 168);
      _Unwind_Resume(a1);
    }
  }
  else if (!v46)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v45);
  goto LABEL_8;
}

uint64_t sub_20B085878(uint64_t a1, const char *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD **v6;
  const char *v7;
  _DWORD *v8;
  const char *v9;
  const char *v10;
  _QWORD *v11;

  v5 = 0;
  sub_20AEDBB6C(v4, "TriMeshData ");
  if (*(_QWORD *)a2)
  {
    v6 = (_QWORD **)v4;
    v7 = a2;
    v8 = v4;
    v9 = a2;
    v10 = a2;
    if (v5 != -1)
    {
      v11 = &v6;
      ((void (*)(_QWORD **, _DWORD *))off_24C40B718[v5])(&v11, v4);
      goto LABEL_6;
    }
LABEL_11:
    sub_20AECFAB8();
  }
  v6 = (_QWORD **)v4;
  v7 = "nullptr";
  v8 = v4;
  v9 = "nullptr";
  v10 = "nullptr";
  if (v5 == -1)
    goto LABEL_11;
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C40B700[v5])(&v11, v4);
LABEL_6:
  v6 = (_QWORD **)v4;
  v7 = " must specify PerVertex or PerFace";
  v8 = v4;
  v9 = " must specify PerVertex or PerFace";
  v10 = " must specify PerVertex or PerFace";
  if (v5 == -1)
    sub_20AECFAB8();
  v11 = &v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C40B730[v5])(&v11, v4);
  if (v5 == -1)
    sub_20AECFAB8();
  v6 = &v11;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C40B6D0[v5])(&v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C40B688[v5])(&v6, v4);
  return result;
}

void sub_20B0859F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B085A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B085A1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B085A30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B085A44(_DWORD ***a1)
{
  return sub_20AF55FA0(**a1, (char *)(*a1)[1]);
}

void sub_20B085A50(uint64_t a1, uint64_t a2)
{
  sub_20B085A60((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20B085A60(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C40B688[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B085C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B085C58(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B085D50((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B085D48(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B085D50(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B085F4C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B085F60(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[6];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "TriMeshData label field ";
  v4[1] = 24;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  v4[4] = " must specify PerVertex or PerFace";
  v4[5] = 34;
  sub_20AECFDF8((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

uint64_t sub_20B086000(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result;
  _BYTE v3[24];
  int v4;
  char v5;
  char *v6;

  v4 = 0;
  sub_20B0860B8((uint64_t)v3, a2);
  if (v4 == -1)
    sub_20AECFAB8();
  v6 = &v5;
  result = ((uint64_t (*)(char **, _BYTE *))off_24C40B6D0[v4])(&v6, v3);
  if (v4 != -1)
    return ((uint64_t (*)(char **, _BYTE *))off_24C40B688[v4])(&v6, v3);
  return result;
}

void sub_20B086090(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0860A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0860B8(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  int v9;
  size_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *__dst[2];
  unint64_t v23;
  _QWORD v24[5];
  _QWORD *v25;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v24[0] = v4;
  v5 = *a2 - 100;
  if (v5 > 2)
  {
    v7 = "unknown label";
    v8 = 13;
  }
  else
  {
    v6 = (__int16)v5;
    v7 = off_24C40B9A8[v6];
    v8 = *(_QWORD *)((char *)&unk_20B5E3150 + v6 * 8);
  }
  sub_20AEC01D0((_QWORD *)(v4 + 16), (uint64_t)v7, v8);
  v9 = *(_DWORD *)(v4 + 120);
  if ((v9 & 0x10) != 0)
  {
    v12 = *(_QWORD *)(v4 + 112);
    v13 = *(_QWORD *)(v4 + 72);
    if (v12 < v13)
    {
      *(_QWORD *)(v4 + 112) = v13;
      v12 = v13;
    }
    v14 = *(const void **)(v4 + 64);
    v10 = v12 - (_QWORD)v14;
    if (v12 - (unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_25;
  }
  else
  {
    if ((v9 & 8) == 0)
    {
      v10 = 0;
      HIBYTE(v23) = 0;
      v11 = __dst;
      goto LABEL_17;
    }
    v14 = *(const void **)(v4 + 40);
    v10 = *(_QWORD *)(v4 + 56) - (_QWORD)v14;
    if (v10 >= 0x7FFFFFFFFFFFFFF8)
LABEL_25:
      sub_20AEC0138();
  }
  if (v10 >= 0x17)
  {
    v15 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v15 = v10 | 7;
    v16 = v15 + 1;
    v11 = (void **)operator new(v15 + 1);
    __dst[1] = (void *)v10;
    v23 = v16 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_16;
  }
  HIBYTE(v23) = v10;
  v11 = __dst;
  if (v10)
LABEL_16:
    memmove(v11, v14, v10);
LABEL_17:
  *((_BYTE *)v11 + v10) = 0;
  v17 = v24[0];
  if (v24[0])
  {
    v18 = MEMORY[0x24BEDB7F0];
    v19 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v24[0] = *MEMORY[0x24BEDB7F0];
    v20 = *(_QWORD *)(v18 + 72);
    *(_QWORD *)(v17 + *(_QWORD *)(v19 - 24)) = *(_QWORD *)(v18 + 64);
    *(_QWORD *)(v17 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v17 + 16) = v20;
    if (*(char *)(v17 + 111) < 0)
      operator delete(*(void **)(v17 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v17 + 128);
    MEMORY[0x20BD3583C](v17, 0x10B2C40EED050F3);
  }
  v24[0] = a1;
  v24[1] = __dst;
  v24[2] = a1;
  v24[3] = __dst;
  v24[4] = __dst;
  v21 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v21 == -1)
    sub_20AECFAB8();
  v25 = v24;
  ((void (*)(_QWORD **, uint64_t))off_24C40B6B8[v21])(&v25, a1);
  if (SHIBYTE(v23) < 0)
    operator delete(__dst[0]);
}

void sub_20B086340(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B086364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B086380(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B086394(int **a1, uint64_t a2)
{
  int *v4;
  int v5;
  int *v6;
  int *v7;
  int *v8;
  _QWORD *v9;
  void **v10;
  int v11;
  BOOL v12;
  char v13;
  int v14;
  uint64_t v15;
  int v16;
  int v17;
  float *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  void **v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  char *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  void **v32;
  void **v33;
  void *v34;
  char v36;
  _QWORD v37[2];
  unint64_t v38;
  _QWORD v39[2];
  _QWORD v40[2];
  void *__p;
  void **v42;
  _QWORD v43[5];
  uint64_t v44;
  uint64_t v45;
  void *v46;
  void *v47;
  _QWORD *v48;
  uint64_t v49;
  void ***v50;
  _QWORD *v51;
  int *v52;
  void ****v53;
  void **v54[3];

  v4 = *a1;
  v5 = **a1;
  if (v5)
  {
    sub_20AEC01D0(a1[1], (uint64_t)", ", 2);
    v4 = *a1;
    v5 = **a1;
  }
  v7 = a1[1];
  v6 = a1[2];
  *v4 = v5 + 1;
  sub_20AEC01D0(v7, *(_QWORD *)&v6[4 * v5], *(_QWORD *)&v6[4 * v5 + 2]);
  sub_20AEC01D0(v7, (uint64_t)" = ", 3);
  v37[0] = 3;
  v37[1] = 0x1000000008;
  v38 = 1;
  sub_20AEC01D0(a1[1], (uint64_t)"{", 1);
  v8 = a1[1];
  v9 = operator new(0x10uLL);
  *v9 = ",";
  v9[1] = ";";
  if (!*(_DWORD *)(a2 + 24))
    goto LABEL_59;
  v49 = *(_QWORD *)(a2 + 8);
  v46 = v9;
  v47 = v9 + 2;
  v48 = v9 + 2;
  v44 = 0;
  v45 = 1;
  v43[0] = &v44;
  v43[1] = &v49;
  v43[2] = &v46;
  v43[3] = &v45;
  v43[4] = v37;
  sub_20B0867A8(&__p, (HIDWORD(v49) * v49));
  v10 = (void **)__p;
  v11 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8))
    v12 = v11 == 0;
  else
    v12 = 1;
  v13 = v12;
  v36 = v13;
  if (v12)
    v14 = 0;
  else
    v14 = *(_DWORD *)(a2 + 12);
  if (v12)
    v15 = 0;
  else
    v15 = 3;
  v16 = v14 * v15;
  v17 = *(_DWORD *)(a2 + 12);
  if (v16 != -1)
  {
    if (!*(_DWORD *)(a2 + 8))
      goto LABEL_28;
    goto LABEL_21;
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Array/include/Essentials/Array/ArrayView.h", 983, (uint64_t)"total_size < std::numeric_limits<uint32_t>::max()", 49, (uint64_t)"Given data block is too big to be represented by uint32_t indexed ArrayView", 75, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v17 = *(_DWORD *)(a2 + 12);
  if (*(_DWORD *)(a2 + 8))
  {
LABEL_21:
    if (v17)
    {
      v18 = *(float **)a2;
      v19 = v17 - 1;
      if (v17 == 1)
      {
        v21 = (uint64_t)v10;
      }
      else
      {
        v20 = 4 * *(unsigned int *)(a2 + 20);
        v21 = (uint64_t)v10;
        do
        {
          sub_20B0868A4(v18, v21);
          sub_20B0868A4(v18 + 1, v21 + 24);
          sub_20B0868A4(v18 + 2, v21 + 48);
          v18 = (float *)((char *)v18 + v20);
          v21 += 24 * v15;
          --v19;
        }
        while (v19);
      }
      sub_20B0868A4(v18, v21);
      sub_20B0868A4(v18 + 1, v21 + 24);
      sub_20B0868A4(v18 + 2, v21 + 48);
    }
  }
LABEL_28:
  v54[0] = 0;
  v39[0] = 0;
  v50 = v54;
  v51 = v39;
  if ((v36 & 1) != 0)
  {
    v22 = 0;
    v23 = 1;
  }
  else
  {
    v24 = (uint64_t)v10;
    v25 = v11 - 1;
    if (v11 != 1)
    {
      v24 = (uint64_t)v10;
      do
      {
        sub_20B086994(&v50, v24);
        v24 += 24 * v15;
        --v25;
      }
      while (v25);
    }
    sub_20B086994(&v50, v24);
    v22 = v54[0];
    v23 = v39[0] + 1;
  }
  v26 = (char *)v22 + v23;
  v27 = v37[0];
  if (v37[0] >= (unint64_t)v26)
    v27 = (uint64_t)v26;
  if (v26)
    v28 = v27;
  else
    v28 = 1;
  if (v38 >= (unint64_t)v22)
    v29 = (uint64_t)v22;
  else
    v29 = v38;
  if (v22)
    v30 = v29;
  else
    v30 = 1;
  v40[0] = v28;
  v40[1] = v30;
  v39[0] = v8;
  v39[1] = v40;
  v50 = 0;
  sub_20B086C04((uint64_t)v37, v8, (unsigned int *)&v50, 1u, v45);
  v50 = (void ***)v39;
  v51 = v43;
  v52 = v8;
  if ((v36 & 1) == 0)
  {
    v53 = &v50;
    v54[0] = 0;
    v54[1] = 0;
    v31 = v11 - 1;
    if (v11 != 1)
    {
      do
      {
        v54[0] = v10;
        sub_20B086EE0((uint64_t ****)&v53, v54);
        v10 += 3 * v15;
        --v31;
      }
      while (v31);
    }
    v54[0] = v10;
    sub_20B086EE0((uint64_t ****)&v53, v54);
  }
  v32 = (void **)__p;
  if (__p)
  {
    v33 = v42;
    v34 = __p;
    if (v42 != __p)
    {
      do
      {
        if (*((char *)v33 - 1) < 0)
          operator delete(*(v33 - 3));
        v33 -= 3;
      }
      while (v33 != v32);
      v34 = __p;
    }
    v42 = v32;
    operator delete(v34);
  }
  v9 = v46;
  if (v46)
  {
    v47 = v46;
LABEL_59:
    operator delete(v9);
  }
  return sub_20AEC01D0(a1[1], (uint64_t)"}", 1);
}

void sub_20B086770(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0867A8(_QWORD *a1, unint64_t a2)
{
  char *v4;
  size_t v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      sub_20AEC60B8();
    v4 = (char *)operator new(24 * a2);
    *a1 = v4;
    a1[2] = &v4[24 * a2];
    v5 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v4, v5);
    a1[1] = &v4[v5];
  }
  return a1;
}

void sub_20B086850(_Unwind_Exception *exception_object)
{
  void **v1;
  void **v3;
  void **v4;
  void *v5;

  v3 = (void **)*v1;
  if (*v1)
  {
    v4 = (void **)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        if (*((char *)v4 - 1) < 0)
          operator delete(*(v4 - 3));
        v4 -= 3;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B0868A4(float *a1, uint64_t a2)
{
  double result;
  __int128 v4;
  uint64_t v5;
  _BYTE v6[24];
  int v7;
  char v8;
  _QWORD v9[2];

  v7 = 0;
  sub_20AF57AB0((uint64_t)&v4, (uint64_t)v6, a1);
  if (v7 == -1)
    sub_20AECFAB8();
  v9[0] = &v8;
  ((void (*)(__int128 *__return_ptr, _QWORD *, _BYTE *))off_24C40B6D0[v7])(&v4, v9, v6);
  if (v7 != -1)
    ((void (*)(_QWORD *, _BYTE *))off_24C40B688[v7])(v9, v6);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = *(double *)&v4;
  *(_OWORD *)a2 = v4;
  *(_QWORD *)(a2 + 16) = v5;
  return result;
}

void sub_20B08695C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, int a15)
{
  uint64_t v15;

  if (a15 != -1)
    ((void (*)(uint64_t, char *))off_24C40B688[a15])(v15 - 17, &a12);
  _Unwind_Resume(exception_object);
}

_BYTE *sub_20B086994(_BYTE *result, uint64_t a2)
{
  uint64_t **v3;
  unint64_t **v4;
  char v5;
  uint64_t v6;
  _BYTE *v7;
  _BYTE *v8;
  size_t v9;
  uint64_t **v10;
  uint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  _BYTE *v15;
  _BYTE *v16;
  size_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  uint64_t v29;
  unint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  _BYTE *v34;
  uint64_t v35;

  v3 = (uint64_t **)result;
  v4 = (unint64_t **)(result + 8);
  v5 = *(_BYTE *)(a2 + 23);
  if (v5 >= 0)
    v6 = *(unsigned __int8 *)(a2 + 23);
  else
    v6 = *(_QWORD *)(a2 + 8);
  if (v5 >= 0)
    v7 = (_BYTE *)a2;
  else
    v7 = *(_BYTE **)a2;
  if (v6 >= 1)
  {
    v8 = &v7[v6];
    v9 = v6;
    result = v7;
    do
    {
      result = memchr(result, 46, v9);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v8)
          break;
        v27 = result - v7;
        v10 = v3;
        if (result - v7 != -1)
        {
          v28 = (_BYTE *)**v3;
          if ((unint64_t)v28 <= v27)
            v28 = (_BYTE *)(result - v7);
          **v3 = (uint64_t)v28;
          v29 = *(unsigned __int8 *)(a2 + 23);
          if ((v29 & 0x80u) != 0)
            v29 = *(_QWORD *)(a2 + 8);
          v6 = v29 + ~v27;
          v10 = (uint64_t **)v4;
        }
        goto LABEL_13;
      }
      ++result;
      v9 = v8 - result;
    }
    while (v8 - result >= 1);
  }
  v10 = v3;
LABEL_13:
  v11 = *v10;
  v12 = *v11;
  if (*v11 <= (unint64_t)v6)
    v12 = v6;
  *v11 = v12;
  v13 = *(char *)(a2 + 47);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 47);
  else
    v14 = *(_QWORD *)(a2 + 32);
  if (v13 >= 0)
    v15 = (_BYTE *)(a2 + 24);
  else
    v15 = *(_BYTE **)(a2 + 24);
  if (v14 >= 1)
  {
    v16 = &v15[v14];
    v17 = v14;
    result = v15;
    do
    {
      result = memchr(result, 46, v17);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v16)
          break;
        v30 = result - v15;
        v18 = v3;
        if (result - v15 != -1)
        {
          v31 = (_BYTE *)**v3;
          if ((unint64_t)v31 <= v30)
            v31 = (_BYTE *)(result - v15);
          **v3 = (uint64_t)v31;
          v32 = *(unsigned __int8 *)(a2 + 47);
          if ((v32 & 0x80u) != 0)
            v32 = *(_QWORD *)(a2 + 32);
          v14 = v32 + ~v30;
          v18 = (uint64_t **)v4;
        }
        goto LABEL_27;
      }
      ++result;
      v17 = v16 - result;
    }
    while (v16 - result >= 1);
  }
  v18 = v3;
LABEL_27:
  v19 = *v18;
  v20 = *v19;
  if (*v19 <= (unint64_t)v14)
    v20 = v14;
  *v19 = v20;
  v21 = *(char *)(a2 + 71);
  if (v21 >= 0)
    v22 = *(unsigned __int8 *)(a2 + 71);
  else
    v22 = *(_QWORD *)(a2 + 56);
  if (v21 >= 0)
    v23 = (_BYTE *)(a2 + 48);
  else
    v23 = *(_BYTE **)(a2 + 48);
  if (v22 >= 1)
  {
    v24 = &v23[v22];
    v25 = v22;
    result = v23;
    do
    {
      result = memchr(result, 46, v25);
      if (!result)
        break;
      if (*result == 46)
      {
        if (result == v24)
          break;
        v33 = result - v23;
        if (result - v23 == -1)
          break;
        v34 = (_BYTE *)**v3;
        if ((unint64_t)v34 <= v33)
          v34 = (_BYTE *)(result - v23);
        **v3 = (uint64_t)v34;
        v35 = *(unsigned __int8 *)(a2 + 71);
        if ((v35 & 0x80u) != 0)
          v35 = *(_QWORD *)(a2 + 56);
        v22 = v35 + ~v33;
        goto LABEL_41;
      }
      ++result;
      v25 = v24 - result;
    }
    while (v24 - result >= 1);
  }
  v4 = (unint64_t **)v3;
LABEL_41:
  v26 = **v4;
  if (v26 <= v22)
    v26 = v22;
  **v4 = v26;
  return result;
}

_QWORD *sub_20B086C04(uint64_t a1, _QWORD *a2, unsigned int *a3, unsigned int a4, unsigned int a5)
{
  unsigned int v6;
  uint64_t v9;
  _QWORD *result;
  std::string *v11;
  std::string::size_type size;
  std::string *v13;
  std::string::size_type v14;
  uint64_t v15;
  std::string v16;

  if (a4 > a5)
  {
    v6 = a4;
    v9 = a4;
    do
    {
      v15 = *(_QWORD *)a3;
      ++*(_DWORD *)((char *)&v15 + v9 * 4);
      sub_20AEC01D0(a2, (uint64_t)"[", 1);
      std::to_string(&v16, v6);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v11 = &v16;
      else
        v11 = (std::string *)v16.__r_.__value_.__r.__words[0];
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      else
        size = v16.__r_.__value_.__l.__size_;
      sub_20AEC01D0(a2, (uint64_t)v11, size);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      sub_20AEC01D0(a2, (uint64_t)"d-slice #", 9);
      std::to_string(&v16, a3[v9]);
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v13 = &v16;
      else
        v13 = (std::string *)v16.__r_.__value_.__r.__words[0];
      if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = HIBYTE(v16.__r_.__value_.__r.__words[2]);
      else
        v14 = v16.__r_.__value_.__l.__size_;
      sub_20AEC01D0(a2, (uint64_t)v13, v14);
      if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v16.__r_.__value_.__l.__data_);
      sub_20AEC01D0(a2, (uint64_t)": ", 2);
      sub_20B086DB4(a2, a3);
      sub_20AEC01D0(a2, (uint64_t)" to ", 4);
      sub_20B086DB4(a2, (unsigned int *)&v15);
      result = sub_20AEC01D0(a2, (uint64_t)"]\n", 2);
      --v6;
      --v9;
    }
    while (v6 > a5);
  }
  return result;
}

void sub_20B086D94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B086DB4(_QWORD *a1, unsigned int *a2)
{
  void **v3;
  uint64_t v4;
  _QWORD *result;
  _QWORD *v6;
  void *__p[2];
  unsigned __int8 v8;
  _BYTE v9[24];
  int v10;
  char v11;
  char *v12;

  v10 = 0;
  sub_20B01219C((uint64_t)&v12, (uint64_t)v9, a2);
  if (v10 == -1)
    sub_20AECFAB8();
  v12 = &v11;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40B6D0[v10])(__p, &v12, v9);
  if (v10 != -1)
    ((void (*)(char **, _BYTE *))off_24C40B688[v10])(&v12, v9);
  if ((v8 & 0x80u) == 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if ((v8 & 0x80u) == 0)
    v4 = v8;
  else
    v4 = (uint64_t)__p[1];
  result = sub_20AEC01D0(a1, (uint64_t)v3, v4);
  v6 = result;
  if ((char)v8 < 0)
  {
    operator delete(__p[0]);
    return v6;
  }
  return result;
}

void sub_20B086E9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B086EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B086ECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B086EE0(uint64_t ****a1, void ***a2)
{
  uint64_t ***v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t *v9;
  int v10;
  int v11;
  uint64_t v12;
  size_t v13;
  uint64_t ***v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t v17;
  unsigned int *v18;
  uint64_t *v19;
  int v20;
  int v21;
  uint64_t v22;
  size_t v23;
  uint64_t ***v24;
  _QWORD *result;
  uint64_t **v26;
  uint64_t **v27;
  uint64_t v28;
  unsigned int *v29;
  uint64_t *v30;
  int v31;
  int v32;
  uint64_t v33;
  size_t v34;

  v4 = *a1;
  sub_20B525848(***a1, *a2, *(unsigned __int8 *)(**a1)[1], *((unsigned __int8 *)(**a1)[1] + 8));
  v6 = v4[1];
  v5 = v4[2];
  v7 = (uint64_t)v6[4];
  v8 = (unsigned int *)*v6;
  v9 = v6[1];
  v10 = *(_DWORD *)*v6 + 1;
  *(_DWORD *)*v6 = v10;
  if (v10 == *(_DWORD *)v9)
  {
    v11 = v8[1] + 1;
    *v8 = 0;
    v8[1] = v11;
    if (v11 == *((_DWORD *)v9 + 1))
      goto LABEL_6;
    v12 = 1;
  }
  else
  {
    v12 = 0;
  }
  v13 = strlen(*(const char **)(*v6[2] + 8 * v12));
  sub_20AEC01D0(v5, *(_QWORD *)(*v6[2] + 8 * v12), v13);
  sub_20B086C04(v7, v5, (unsigned int *)*v6, v12, *(_DWORD *)v6[3]);
LABEL_6:
  v14 = *a1;
  sub_20B525848(***a1, *a2 + 3, *(unsigned __int8 *)(**a1)[1], *((unsigned __int8 *)(**a1)[1] + 8));
  v16 = v14[1];
  v15 = v14[2];
  v17 = (uint64_t)v16[4];
  v18 = (unsigned int *)*v16;
  v19 = v16[1];
  v20 = *(_DWORD *)*v16 + 1;
  *(_DWORD *)*v16 = v20;
  if (v20 == *(_DWORD *)v19)
  {
    v21 = v18[1] + 1;
    *v18 = 0;
    v18[1] = v21;
    if (v21 == *((_DWORD *)v19 + 1))
      goto LABEL_11;
    v22 = 1;
  }
  else
  {
    v22 = 0;
  }
  v23 = strlen(*(const char **)(*v16[2] + 8 * v22));
  sub_20AEC01D0(v15, *(_QWORD *)(*v16[2] + 8 * v22), v23);
  sub_20B086C04(v17, v15, (unsigned int *)*v16, v22, *(_DWORD *)v16[3]);
LABEL_11:
  v24 = *a1;
  result = sub_20B525848(**v24, *a2 + 6, *(unsigned __int8 *)(*v24)[1], *((unsigned __int8 *)(*v24)[1] + 8));
  v27 = v24[1];
  v26 = v24[2];
  v28 = (uint64_t)v27[4];
  v29 = (unsigned int *)*v27;
  v30 = v27[1];
  v31 = *(_DWORD *)*v27 + 1;
  *(_DWORD *)*v27 = v31;
  if (v31 != *(_DWORD *)v30)
  {
    v33 = 0;
LABEL_16:
    v34 = strlen(*(const char **)(*v27[2] + 8 * v33));
    sub_20AEC01D0(v26, *(_QWORD *)(*v27[2] + 8 * v33), v34);
    return sub_20B086C04(v28, v26, (unsigned int *)*v27, v33, *(_DWORD *)v27[3]);
  }
  v32 = v29[1] + 1;
  *v29 = 0;
  v29[1] = v32;
  if (v32 != *((_DWORD *)v30 + 1))
  {
    v33 = 1;
    goto LABEL_16;
  }
  return result;
}

void sub_20B087120(uint64_t a1, unsigned int *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  void **v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  _DWORD *v12;
  int v13;
  int v14;
  uint64_t v15;
  size_t v16;
  void *__p[2];
  unsigned __int8 v18;

  v3 = **(uint64_t ***)a1;
  v4 = **(unsigned __int8 **)(*(_QWORD *)a1 + 8);
  sub_20AF9E310(a2);
  v5 = *v3;
  *(uint64_t *)((char *)v3 + *(_QWORD *)(*v3 - 24) + 24) = v4;
  *(_DWORD *)((char *)v3 + *(_QWORD *)(v5 - 24) + 8) = *(_DWORD *)((_BYTE *)v3 + *(_QWORD *)(v5 - 24) + 8) & 0xFFFFFF4F | 0x80;
  if ((v18 & 0x80u) == 0)
    v6 = __p;
  else
    v6 = (void **)__p[0];
  if ((v18 & 0x80u) == 0)
    v7 = v18;
  else
    v7 = (uint64_t)__p[1];
  sub_20AEC01D0(v3, (uint64_t)v6, v7);
  if ((char)v18 < 0)
    operator delete(__p[0]);
  v9 = *(_QWORD *)(a1 + 8);
  v8 = *(_QWORD **)(a1 + 16);
  v10 = *(_QWORD *)(v9 + 32);
  v11 = *(unsigned int **)v9;
  v12 = *(_DWORD **)(v9 + 8);
  v13 = **(_DWORD **)v9 + 1;
  **(_DWORD **)v9 = v13;
  if (v13 == *v12)
  {
    v14 = v11[1] + 1;
    *v11 = 0;
    v11[1] = v14;
    if (v14 == v12[1])
      return;
    v15 = 1;
  }
  else
  {
    v15 = 0;
  }
  v16 = strlen(*(const char **)(**(_QWORD **)(v9 + 16) + 8 * v15));
  sub_20AEC01D0(v8, *(_QWORD *)(**(_QWORD **)(v9 + 16) + 8 * v15), v16);
  sub_20B086C04(v10, v8, *(unsigned int **)v9, v15, **(_DWORD **)(v9 + 24));
}

void sub_20B087250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B08726C(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  int v20;
  _QWORD *v21;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2) >= a2)
  {
    *(_QWORD *)(result + 8) = v4 + 12 * (12 * a2 / 0xC);
  }
  else
  {
    v6 = *(_QWORD ***)result;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_20AEC60B8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      LODWORD(v21) = v10;
      v11 = *(unsigned int *)(result + 28);
      if ((_DWORD)v11 == -1)
        sub_20AECFAB8();
      v19 = &v21;
      result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C40B748[v11])(&v19, result + 24);
      v6 = *(_QWORD ***)v3;
      v4 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      result = 0;
      v12 = 0;
    }
    v13 = result + 12 * v7;
    v14 = v13 + 12 * (12 * a2 / 0xC);
    if ((_QWORD **)v4 != v6)
    {
      do
      {
        v15 = *(_QWORD *)(v4 - 12);
        v4 -= 12;
        v16 = *(_DWORD *)(v4 + 8);
        *(_QWORD *)(v13 - 12) = v15;
        v13 -= 12;
        *(_DWORD *)(v13 + 8) = v16;
      }
      while ((_QWORD **)v4 != v6);
      v6 = *(_QWORD ***)v3;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v14;
    v17 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v12;
    if (v6)
    {
      v19 = v6;
      v20 = -1431655765 * ((unint64_t)(v17 - (_QWORD)v6) >> 2);
      v18 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v18 == -1)
        sub_20AECFAB8();
      v21 = &v19;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24C40B758[v18])(&v21, v3 + 24);
    }
  }
  return result;
}

void *sub_20B087448(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_20B087478(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

void sub_20B087510(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20B08751C(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD35D70](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_20B532360);
    abort();
  }
  return result;
}

_DWORD *sub_20B087590(_DWORD *result, void **a2)
{
  int v4;
  BOOL v5;
  _DWORD *v6;
  _DWORD *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v15;
  BOOL v16;
  char *v17;
  char *v18;
  size_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  const void *v24;
  BOOL v25;

  if (result[4] == 1 && *((_DWORD *)a2 + 4) == 1)
  {
    v11 = result[5];
    v12 = *((unsigned int *)a2 + 5);
    v13 = result[2];
    if ((_DWORD)v11 != (_DWORD)v12 || (_DWORD)v11 != (_DWORD)v13)
    {
      v15 = result[3];
      if ((_DWORD)v13)
        v16 = v15 == 0;
      else
        v16 = 1;
      if (v16)
        return result;
      v17 = (char *)*a2;
      v18 = *(char **)result;
      v19 = 4 * v13;
      v20 = v15 - 1;
      if (v15 == 1)
      {
LABEL_35:
        if (v18
          || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          return memmove(v17, v18, v19);
        }
      }
      else
      {
        v21 = 4 * v11;
        v22 = 4 * v12;
        while (v18
             || !sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          memmove(v17, v18, v19);
          v18 += v21;
          v17 += v22;
          if (!--v20)
            goto LABEL_35;
        }
      }
LABEL_26:
      abort();
    }
    v23 = (result[3] * v11);
    v24 = *(const void **)result;
    if ((_DWORD)v23)
      v25 = v24 == 0;
    else
      v25 = 0;
    if (v25)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_26;
      }
    }
    else if (!(_DWORD)v23)
    {
      return result;
    }
    return memmove(*a2, v24, 4 * v23);
  }
  v4 = result[3];
  if (result[2])
    v5 = v4 == 0;
  else
    v5 = 1;
  if (!v5)
  {
    v6 = *(_DWORD **)result;
    v7 = *a2;
    v8 = v4 - 1;
    if (v8)
    {
      v9 = 4 * result[5];
      v10 = 4 * *((unsigned int *)a2 + 5);
      do
      {
        *v7 = *v6;
        v7[1] = v6[1];
        v7[2] = v6[2];
        v6 = (_DWORD *)((char *)v6 + v9);
        v7 = (_DWORD *)((char *)v7 + v10);
        --v8;
      }
      while (v8);
    }
    *v7 = *v6;
    v7[1] = v6[1];
    v7[2] = v6[2];
  }
  return result;
}

uint64_t sub_20B0877C8(uint64_t result, unint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD **v19;
  int v20;
  _QWORD *v21;

  v3 = result;
  v4 = *(_QWORD *)(result + 8);
  v5 = *(_QWORD *)(result + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 2) >= a2)
  {
    *(_QWORD *)(result + 8) = v4 + 12 * (12 * a2 / 0xC);
  }
  else
  {
    v6 = *(_QWORD ***)result;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *(_QWORD *)result) >> 2);
    v8 = v7 + a2;
    if (v7 + a2 > 0x1555555555555555)
      sub_20AEC60B8();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v5 - (uint64_t)v6) >> 2);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0xAAAAAAAAAAAAAAALL)
      v10 = 0x1555555555555555;
    else
      v10 = v8;
    if (v10)
    {
      LODWORD(v21) = v10;
      v11 = *(unsigned int *)(result + 28);
      if ((_DWORD)v11 == -1)
        sub_20AECFAB8();
      v19 = &v21;
      result = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C40B768[v11])(&v19, result + 24);
      v6 = *(_QWORD ***)v3;
      v4 = *(_QWORD *)(v3 + 8);
    }
    else
    {
      result = 0;
      v12 = 0;
    }
    v13 = result + 12 * v7;
    v14 = v13 + 12 * (12 * a2 / 0xC);
    if ((_QWORD **)v4 != v6)
    {
      do
      {
        v15 = *(_QWORD *)(v4 - 12);
        v4 -= 12;
        v16 = *(_DWORD *)(v4 + 8);
        *(_QWORD *)(v13 - 12) = v15;
        v13 -= 12;
        *(_DWORD *)(v13 + 8) = v16;
      }
      while ((_QWORD **)v4 != v6);
      v6 = *(_QWORD ***)v3;
    }
    *(_QWORD *)v3 = v13;
    *(_QWORD *)(v3 + 8) = v14;
    v17 = *(_QWORD *)(v3 + 16);
    *(_QWORD *)(v3 + 16) = result + 12 * v12;
    if (v6)
    {
      v19 = v6;
      v20 = -1431655765 * ((unint64_t)(v17 - (_QWORD)v6) >> 2);
      v18 = *(unsigned int *)(v3 + 28);
      if ((_DWORD)v18 == -1)
        sub_20AECFAB8();
      v21 = &v19;
      return ((uint64_t (*)(_QWORD **, uint64_t))off_24C40B778[v18])(&v21, v3 + 24);
    }
  }
  return result;
}

void *sub_20B0879A4(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_20B0879D4(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

void sub_20B087A6C(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20B087A78(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD35D70](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_20B532360);
    abort();
  }
  return result;
}

size_t sub_20B087AEC(_QWORD **a1)
{
  _DWORD *v1;
  const char *v2;
  uint64_t v3;
  size_t result;
  size_t v5;
  void *v6;
  uint64_t v7;
  uint64_t v8;
  char v9;

  v1 = (_DWORD *)**a1;
  v2 = (const char *)(*a1)[1];
  v3 = v1[6];
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, _DWORD *))off_24C40B688[v3])(&v9, v1);
  v1[6] = -1;
  result = strlen(v2);
  if (result >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v5 = result;
  if (result >= 0x17)
  {
    v7 = (result & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((result | 7) != 0x17)
      v7 = result | 7;
    v8 = v7 + 1;
    v6 = operator new(v7 + 1);
    *((_QWORD *)v1 + 1) = v5;
    *((_QWORD *)v1 + 2) = v8 | 0x8000000000000000;
    *(_QWORD *)v1 = v6;
  }
  else
  {
    *((_BYTE *)v1 + 23) = result;
    v6 = v1;
    if (!result)
      goto LABEL_11;
  }
  result = (size_t)memmove(v6, v2, v5);
LABEL_11:
  *((_BYTE *)v6 + v5) = 0;
  v1[6] = 1;
  return result;
}

void sub_20B087BD8(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C40B688[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B087D90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B087DD4(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B088064(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B08807C(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_20B088084(_DWORD ***a1)
{
  return sub_20AF810D0(**a1, (char *)(*a1)[1]);
}

void sub_20B088090(uint64_t a1, uint64_t a2)
{
  sub_20B0880A0((uint64_t *)(*(_QWORD *)a1 + 16), a2);
}

void sub_20B0880A0(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  void *v5;
  const char *v6;
  size_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  void *v13;
  _BYTE v14[15];
  char v15;
  void *__p[2];
  unint64_t v17;
  _QWORD v18[3];

  v18[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  *(_QWORD *)((char *)v18 + 7) = *(_QWORD *)(a2 + 15);
  v3 = *(void **)a2;
  v18[0] = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v13 = v3;
  *(_QWORD *)v14 = v18[0];
  *(_QWORD *)&v14[7] = *(_QWORD *)((char *)v18 + 7);
  v15 = v4;
  memset(v18, 0, 15);
  v5 = __p;
  v6 = (const char *)a1[1];
  v7 = strlen(v6);
  if (v7 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v8 = (void *)v7;
  if (v7 >= 0x17)
  {
    v10 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v10 = v7 | 7;
    v11 = v10 + 1;
    v5 = operator new(v10 + 1);
    __p[1] = v8;
    v17 = v11 | 0x8000000000000000;
    __p[0] = v5;
LABEL_9:
    memmove(v5, v6, (size_t)v8);
    *((_BYTE *)v8 + (_QWORD)v5) = 0;
    v9 = *(unsigned int *)(v2 + 24);
    if ((_DWORD)v9 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v17) = v7;
  if (v7)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v9 = *(unsigned int *)(v2 + 24);
  if ((_DWORD)v9 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C40B688[v9])(&v12, v2);
LABEL_11:
  *(_DWORD *)(v2 + 24) = -1;
  sub_20AEC7620((_QWORD *)v2, (uint64_t)&v13, 2uLL);
  *(_DWORD *)(v2 + 24) = 2;
  if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    if ((v15 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v13);
    return;
  }
  operator delete(__p[0]);
  if (v15 < 0)
    goto LABEL_15;
}

void sub_20B088254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

char *sub_20B088298(uint64_t a1, uint64_t a2)
{
  const char *v3;
  char *v4;
  size_t v5;
  size_t v6;
  void *v7;
  char *result;
  uint64_t v9;
  uint64_t v10;

  v3 = *(const char **)(*(_QWORD *)a1 + 32);
  v4 = *(char **)(a2 + 8);
  if ((unint64_t)v4 >= *(_QWORD *)(a2 + 16))
  {
    result = sub_20B088390((void **)a2, v3);
    *(_QWORD *)(a2 + 8) = result;
    return result;
  }
  v5 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v9 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v9 = v5 | 7;
    v10 = v9 + 1;
    v7 = operator new(v9 + 1);
    *((_QWORD *)v4 + 1) = v6;
    *((_QWORD *)v4 + 2) = v10 | 0x8000000000000000;
    *(_QWORD *)v4 = v7;
  }
  else
  {
    v4[23] = v5;
    v7 = v4;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, v3, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  result = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  *(_QWORD *)(a2 + 8) = v4 + 24;
  return result;
}

void sub_20B088388(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *sub_20B088390(void **a1, const char *a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  size_t v9;
  size_t v10;
  char *v11;
  char *v12;
  void **v13;
  void **v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  void **v19;
  char *v21;
  char *v22;
  char *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) >= 0x555555555555555)
    v6 = 0xAAAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(24 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[24 * v3];
  v21 = v8;
  v22 = v8;
  v23 = &v7[24 * v6];
  v9 = strlen(a2);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v15 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v15 = v9 | 7;
    v16 = v15 + 1;
    v17 = (char *)operator new(v15 + 1);
    *((_QWORD *)v8 + 1) = v10;
    *((_QWORD *)v8 + 2) = v16 | 0x8000000000000000;
    *(_QWORD *)v8 = v17;
    v8 = v17;
  }
  else
  {
    v8[23] = v9;
    if (!v9)
    {
      *v8 = 0;
      v11 = v8;
      v12 = v8 + 24;
      v13 = (void **)*a1;
      v14 = (void **)a1[1];
      if (v14 == *a1)
        goto LABEL_26;
      goto LABEL_20;
    }
  }
  memmove(v8, a2, v10);
  v8[v10] = 0;
  v11 = v21;
  v12 = v22 + 24;
  v13 = (void **)*a1;
  v14 = (void **)a1[1];
  if (v14 == *a1)
  {
LABEL_26:
    *a1 = v11;
    a1[1] = v12;
    a1[2] = v23;
    goto LABEL_27;
  }
  do
  {
LABEL_20:
    v18 = *(_OWORD *)(v14 - 3);
    *((_QWORD *)v11 - 1) = *(v14 - 1);
    *(_OWORD *)(v11 - 24) = v18;
    v11 -= 24;
    *(v14 - 2) = 0;
    *(v14 - 1) = 0;
    *(v14 - 3) = 0;
    v14 -= 3;
  }
  while (v14 != v13);
  v14 = (void **)*a1;
  v19 = (void **)a1[1];
  *a1 = v11;
  a1[1] = v12;
  a1[2] = v23;
  while (v19 != v14)
  {
    if (*((char *)v19 - 1) < 0)
      operator delete(*(v19 - 3));
    v19 -= 3;
  }
LABEL_27:
  if (v14)
    operator delete(v14);
  return v12;
}

void sub_20B08858C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AEC65A4((uint64_t)va);
  _Unwind_Resume(a1);
}

_DWORD *sub_20B0885A0(_DWORD ***a1)
{
  return sub_20B088A58(**a1, (char *)(*a1)[1]);
}

void sub_20B0885AC(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  char v5;
  void *v6;
  const char *v7;
  size_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  void *v14;
  _BYTE v15[15];
  char v16;
  void *__p[2];
  unint64_t v18;
  _QWORD v19[3];

  v19[2] = *MEMORY[0x24BDAC8D0];
  v2 = *a1;
  v3 = *(_QWORD *)(*a1 + 16);
  *(_QWORD *)((char *)v19 + 7) = *(_QWORD *)(a2 + 15);
  v4 = *(void **)a2;
  v19[0] = *(_QWORD *)(a2 + 8);
  v5 = *(_BYTE *)(a2 + 23);
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)a2 = 0;
  v14 = v4;
  *(_QWORD *)v15 = v19[0];
  *(_QWORD *)&v15[7] = *(_QWORD *)((char *)v19 + 7);
  v16 = v5;
  memset(v19, 0, 15);
  v6 = __p;
  v7 = *(const char **)(v2 + 24);
  v8 = strlen(v7);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = (void *)v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    v6 = operator new(v11 + 1);
    __p[1] = v9;
    v18 = v12 | 0x8000000000000000;
    __p[0] = v6;
LABEL_9:
    memmove(v6, v7, (size_t)v9);
    *((_BYTE *)v9 + (_QWORD)v6) = 0;
    v10 = *(unsigned int *)(v3 + 24);
    if ((_DWORD)v10 == -1)
      goto LABEL_11;
    goto LABEL_10;
  }
  HIBYTE(v18) = v8;
  if (v8)
    goto LABEL_9;
  LOBYTE(__p[0]) = 0;
  v10 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v10 != -1)
LABEL_10:
    ((void (*)(char *, uint64_t))off_24C40B688[v10])(&v13, v3);
LABEL_11:
  *(_DWORD *)(v3 + 24) = -1;
  sub_20AEC7620((_QWORD *)v3, (uint64_t)&v14, 2uLL);
  *(_DWORD *)(v3 + 24) = 2;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((v16 & 0x80000000) == 0)
      return;
LABEL_15:
    operator delete(v14);
    return;
  }
  operator delete(__p[0]);
  if (v16 < 0)
    goto LABEL_15;
}

void sub_20B088764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B0887A8(uint64_t a1, void **a2)
{
  const void *v3;
  _BYTE *v4;
  _QWORD *v5;
  size_t v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  size_t v18;
  size_t v19;
  void *v20;
  char *v21;
  void **v22;
  void **v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  void **v27;

  v3 = *(const void **)(*(_QWORD *)a1 + 32);
  v5 = a2[1];
  v4 = a2[2];
  if (v5 < (_QWORD *)v4)
  {
    v6 = strlen(*(const char **)(*(_QWORD *)a1 + 32));
    if (v6 > 0x7FFFFFFFFFFFFFF7)
      sub_20AEC0138();
    v7 = v6;
    if (v6 >= 0x17)
    {
      v14 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v14 = v6 | 7;
      v15 = v14 + 1;
      v8 = operator new(v14 + 1);
      v5[1] = v7;
      v5[2] = v15 | 0x8000000000000000;
      *v5 = v8;
    }
    else
    {
      *((_BYTE *)v5 + 23) = v6;
      v8 = v5;
      if (!v6)
        goto LABEL_19;
    }
    memmove(v8, v3, v7);
LABEL_19:
    *((_BYTE *)v8 + v7) = 0;
    v16 = (char *)(v5 + 3);
    a2[1] = v5 + 3;
    goto LABEL_39;
  }
  v9 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - (_BYTE *)*a2) >> 3);
  if (v9 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (_BYTE *)*a2) >> 3);
  v11 = 2 * v10;
  if (2 * v10 <= v9 + 1)
    v11 = v9 + 1;
  if (v10 >= 0x555555555555555)
    v12 = 0xAAAAAAAAAAAAAAALL;
  else
    v12 = v11;
  if (v12)
  {
    if (v12 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v13 = (char *)operator new(24 * v12);
  }
  else
  {
    v13 = 0;
  }
  v17 = &v13[24 * v9];
  v18 = strlen((const char *)v3);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v19 = v18;
  if (v18 >= 0x17)
  {
    v24 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v24 = v18 | 7;
    v25 = v24 + 1;
    v20 = operator new(v24 + 1);
    *((_QWORD *)v17 + 1) = v19;
    *((_QWORD *)v17 + 2) = v25 | 0x8000000000000000;
    *(_QWORD *)v17 = v20;
  }
  else
  {
    v17[23] = v18;
    v20 = v17;
    if (!v18)
    {
      v21 = &v13[24 * v12];
      *v17 = 0;
      v16 = v17 + 24;
      v22 = (void **)*a2;
      v23 = (void **)a2[1];
      if (v23 == *a2)
        goto LABEL_36;
      do
      {
LABEL_30:
        v26 = *(_OWORD *)(v23 - 3);
        *((_QWORD *)v17 - 1) = *(v23 - 1);
        *(_OWORD *)(v17 - 24) = v26;
        v17 -= 24;
        *(v23 - 2) = 0;
        *(v23 - 1) = 0;
        *(v23 - 3) = 0;
        v23 -= 3;
      }
      while (v23 != v22);
      v23 = (void **)*a2;
      v27 = (void **)a2[1];
      *a2 = v17;
      a2[1] = v16;
      a2[2] = v21;
      while (v27 != v23)
      {
        if (*((char *)v27 - 1) < 0)
          operator delete(*(v27 - 3));
        v27 -= 3;
      }
      goto LABEL_37;
    }
  }
  memmove(v20, v3, v19);
  v21 = &v13[24 * v12];
  *((_BYTE *)v20 + v19) = 0;
  v16 = v17 + 24;
  v22 = (void **)*a2;
  v23 = (void **)a2[1];
  if (v23 != *a2)
    goto LABEL_30;
LABEL_36:
  *a2 = v17;
  a2[1] = v16;
  a2[2] = v21;
LABEL_37:
  if (v23)
    operator delete(v23);
LABEL_39:
  a2[1] = v16;
}

void sub_20B088A38(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    operator delete(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B088A50(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;

  *(_QWORD *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

_DWORD *sub_20B088A58(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C40B688[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

_DWORD *sub_20B088B48(_DWORD *a1, char *__s)
{
  uint64_t v4;
  size_t v5;
  size_t v6;
  void *v7;
  uint64_t v8;
  uint64_t v9;
  char v11;

  v4 = a1[6];
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, _DWORD *))off_24C40B688[v4])(&v11, a1);
  a1[6] = -1;
  v5 = strlen(__s);
  if (v5 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v6 = v5;
  if (v5 >= 0x17)
  {
    v8 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v8 = v5 | 7;
    v9 = v8 + 1;
    v7 = operator new(v8 + 1);
    *((_QWORD *)a1 + 1) = v6;
    *((_QWORD *)a1 + 2) = v9 | 0x8000000000000000;
    *(_QWORD *)a1 = v7;
  }
  else
  {
    *((_BYTE *)a1 + 23) = v5;
    v7 = a1;
    if (!v5)
      goto LABEL_11;
  }
  memmove(v7, __s, v6);
LABEL_11:
  *((_BYTE *)v7 + v6) = 0;
  a1[6] = 1;
  return a1;
}

uint64_t *sub_20B088C38(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t *v35;

  v2 = a1[40];
  if (v2)
  {
    a1[41] = v2;
    v3 = (unint64_t)(a1[42] - v2) >> 2;
    v33 = v2;
    v34 = v3;
    v4 = *((unsigned int *)a1 + 87);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40B7E8[v4])(&v35, a1 + 43);
  }
  v5 = a1[35];
  if (v5)
  {
    a1[36] = v5;
    v6 = *((_DWORD *)a1 + 74) - v5;
    v33 = v5;
    v34 = v6;
    v7 = *((unsigned int *)a1 + 77);
    if ((_DWORD)v7 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40B7F8[v7])(&v35, a1 + 38);
  }
  v8 = a1[30];
  if (v8)
  {
    a1[31] = v8;
    v9 = *((_DWORD *)a1 + 64) - v8;
    v33 = v8;
    v34 = v9;
    v10 = *((unsigned int *)a1 + 67);
    if ((_DWORD)v10 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40B7F8[v10])(&v35, a1 + 33);
  }
  v11 = a1[26];
  if (v11)
  {
    a1[27] = v11;
    v12 = -1431655765 * ((unint64_t)(a1[28] - v11) >> 2);
    v33 = v11;
    v34 = v12;
    v13 = *((unsigned int *)a1 + 59);
    if ((_DWORD)v13 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40B778[v13])(&v35, a1 + 29);
  }
  v14 = a1[22];
  if (v14)
  {
    a1[23] = v14;
    v15 = (unint64_t)(a1[24] - v14) >> 3;
    v33 = v14;
    v34 = v15;
    v16 = *((unsigned int *)a1 + 51);
    if ((_DWORD)v16 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40B808[v16])(&v35, a1 + 25);
  }
  v17 = a1[18];
  if (v17)
  {
    a1[19] = v17;
    v18 = (unint64_t)(a1[20] - v17) >> 3;
    v33 = v17;
    v34 = v18;
    v19 = *((unsigned int *)a1 + 43);
    if ((_DWORD)v19 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40B818[v19])(&v35, a1 + 21);
  }
  v20 = a1[14];
  if (v20)
  {
    a1[15] = v20;
    v21 = -1431655765 * ((unint64_t)(a1[16] - v20) >> 2);
    v33 = v20;
    v34 = v21;
    v22 = *((unsigned int *)a1 + 35);
    if ((_DWORD)v22 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40B778[v22])(&v35, a1 + 17);
  }
  v23 = a1[9];
  if (v23)
  {
    a1[10] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[11] - v23) >> 2);
    v33 = v23;
    v34 = v24;
    v25 = *((unsigned int *)a1 + 25);
    if ((_DWORD)v25 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40B758[v25])(&v35, a1 + 12);
  }
  v26 = a1[4];
  if (v26)
  {
    a1[5] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[6] - v26) >> 2);
    v33 = v26;
    v34 = v27;
    v28 = *((unsigned int *)a1 + 15);
    if ((_DWORD)v28 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40B758[v28])(&v35, a1 + 7);
  }
  v29 = *a1;
  if (*a1)
  {
    a1[1] = v29;
    v30 = -1431655765 * ((unint64_t)(a1[2] - v29) >> 2);
    v33 = v29;
    v34 = v30;
    v31 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v31 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40B758[v31])(&v35, a1 + 3);
  }
  return a1;
}

void sub_20B088FE4(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20B088FF0(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD35D70](*MEMORY[0x24BDAEC58], **a1, 4 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_20B532360);
    abort();
  }
  return result;
}

void sub_20B089060(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20B08906C(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD35D70](*MEMORY[0x24BDAEC58], **a1, *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_20B532360);
    abort();
  }
  return result;
}

void sub_20B0890D8(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20B0890E4(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD35D70](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_20B532360);
    abort();
  }
  return result;
}

void sub_20B089154(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20B089160(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD35D70](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_20B532360);
    abort();
  }
  return result;
}

void sub_20B0891D0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, unint64_t a5)
{
  void *v8[2];
  uint64_t v9;
  void *__p[2];
  uint64_t v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  char v18;
  uint64_t v19;
  uint64_t v20;
  _DWORD v21[6];
  int v22;
  std::string v23;
  std::string **v24;
  std::string *v25;
  std::string *v26;
  _DWORD *v27;
  std::string *v28;
  std::string *v29;

  v19 = a3;
  v20 = a2;
  v22 = 0;
  sub_20AF6BC08(v21, "Mesh has ");
  std::to_string(&v23, a4);
  v25 = (std::string *)v21;
  v26 = &v23;
  v27 = v21;
  v28 = &v23;
  v29 = &v23;
  if (v22 == -1)
    sub_20AECFAB8();
  v24 = &v25;
  ((void (*)(std::string ***, _DWORD *))off_24C40B6B8[v22])(&v24, v21);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v25 = (std::string *)v21;
  v26 = (std::string *)" ";
  v27 = v21;
  v28 = (std::string *)" ";
  v29 = (std::string *)" ";
  if (v22 == -1)
    sub_20AECFAB8();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B6A0[v22])(&v23, v21);
  if (v19)
  {
    v25 = (std::string *)v21;
    v26 = (std::string *)&v19;
    v27 = v21;
    v28 = (std::string *)&v19;
    v29 = (std::string *)&v19;
    if (v22 != -1)
    {
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
      ((void (*)(std::string *, _DWORD *))off_24C40B718[v22])(&v23, v21);
      goto LABEL_10;
    }
LABEL_42:
    sub_20AECFAB8();
  }
  v25 = (std::string *)v21;
  v26 = (std::string *)"nullptr";
  v27 = v21;
  v28 = (std::string *)"nullptr";
  v29 = (std::string *)"nullptr";
  if (v22 == -1)
    goto LABEL_42;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B700[v22])(&v23, v21);
LABEL_10:
  v25 = (std::string *)v21;
  v26 = (std::string *)" which does not match the ";
  v27 = v21;
  v28 = (std::string *)" which does not match the ";
  v29 = (std::string *)" which does not match the ";
  if (v22 == -1)
    sub_20AECFAB8();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B870[v22])(&v23, v21);
  std::to_string(&v23, a5);
  v25 = (std::string *)v21;
  v26 = &v23;
  v27 = v21;
  v28 = &v23;
  v29 = &v23;
  if (v22 == -1)
    sub_20AECFAB8();
  v24 = &v25;
  ((void (*)(std::string ***, _DWORD *))off_24C40B6B8[v22])(&v24, v21);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v25 = (std::string *)v21;
  v26 = (std::string *)" ";
  v27 = v21;
  v28 = (std::string *)" ";
  v29 = (std::string *)" ";
  if (v22 == -1)
    sub_20AECFAB8();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B6A0[v22])(&v23, v21);
  if (v20)
  {
    v25 = (std::string *)v21;
    v26 = (std::string *)&v20;
    v27 = v21;
    v28 = (std::string *)&v20;
    v29 = (std::string *)&v20;
    if (v22 != -1)
    {
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
      ((void (*)(std::string *, _DWORD *))off_24C40B718[v22])(&v23, v21);
      goto LABEL_20;
    }
LABEL_46:
    sub_20AECFAB8();
  }
  v25 = (std::string *)v21;
  v26 = (std::string *)"nullptr";
  v27 = v21;
  v28 = (std::string *)"nullptr";
  v29 = (std::string *)"nullptr";
  if (v22 == -1)
    goto LABEL_46;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B700[v22])(&v23, v21);
LABEL_20:
  v25 = (std::string *)v21;
  v26 = (std::string *)" they correspond to";
  v27 = v21;
  v28 = (std::string *)" they correspond to";
  v29 = (std::string *)" they correspond to";
  if (v22 == -1)
    sub_20AECFAB8();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B840[v22])(&v23, v21);
  if (v22 == -1)
    sub_20AECFAB8();
  v25 = &v23;
  ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24C40B6D0[v22])(v8, &v25, v21);
  if (v22 != -1)
    ((void (*)(std::string **, _DWORD *))off_24C40B688[v22])(&v25, v21);
  if (SHIBYTE(v9) < 0)
  {
    sub_20AEC60F4(__p, v8[0], (unint64_t)v8[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v8;
    v11 = v9;
  }
  v12 = 1;
  LOBYTE(v13) = 0;
  v17 = 0;
  v18 = 1;
  sub_20AECCC3C(0x20u, (__int128 *)__p, a1);
  if (v18)
  {
    if (!v17)
      goto LABEL_31;
    if (v16 < 0)
    {
      operator delete(v15);
      if ((v14 & 0x80000000) == 0)
      {
LABEL_31:
        if (!v12)
          goto LABEL_34;
LABEL_32:
        if (SHIBYTE(v11) < 0)
          operator delete(__p[0]);
        goto LABEL_34;
      }
    }
    else if ((v14 & 0x80000000) == 0)
    {
      goto LABEL_31;
    }
    operator delete(v13);
    if (!v12)
      goto LABEL_34;
    goto LABEL_32;
  }
LABEL_34:
  if (SHIBYTE(v9) < 0)
    operator delete(v8[0]);
}

void sub_20B089648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B089678(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20AECFA60((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20B0896D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t *v4;
  std::string v5;
  std::string __p;
  char v7;
  void *v8;
  char v9;
  void *v10;
  char v11;
  char v12;
  char v13;
  _QWORD v14[6];
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v14[0] = "Mesh has both vertex and face ";
  v14[1] = 30;
  v3 = *((unsigned __int8 *)a2 + 23);
  if ((v3 & 0x80u) == 0)
    v4 = a2;
  else
    v4 = (uint64_t *)*a2;
  if ((v3 & 0x80u) != 0)
    v3 = a2[1];
  v14[2] = v4;
  v14[3] = v3;
  v14[4] = " but may only have one of the two";
  v14[5] = 33;
  sub_20AECFDF8((uint64_t)v14, (uint64_t)&v15, 0, 0, &v5);
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__p, v5.__r_.__value_.__l.__data_, v5.__r_.__value_.__l.__size_);
  else
    __p = v5;
  v7 = 1;
  LOBYTE(v8) = 0;
  v12 = 0;
  v13 = 1;
  sub_20AECCC3C(0x21u, (__int128 *)&__p, a1);
  if (v13)
  {
    if (!v12)
      goto LABEL_13;
    if (v11 < 0)
    {
      operator delete(v10);
      if ((v9 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v7)
          goto LABEL_16;
LABEL_14:
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        goto LABEL_16;
      }
    }
    else if ((v9 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v8);
    if (!v7)
      goto LABEL_16;
    goto LABEL_14;
  }
LABEL_16:
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v5.__r_.__value_.__l.__data_);
}

void sub_20B089838(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B089870(uint64_t a1, uint64_t a2, std::string *a3, unint64_t a4, unint64_t a5)
{
  void *v9[2];
  uint64_t v10;
  void *__p[2];
  uint64_t v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  uint64_t v20;
  _DWORD v21[6];
  int v22;
  std::string v23;
  std::string **v24;
  std::string *v25;
  std::string *v26;
  _DWORD *v27;
  std::string *v28;
  std::string *v29;

  v20 = a2;
  v22 = 0;
  sub_20AF6BC08(v21, "Mesh has ");
  std::to_string(&v23, a4);
  v25 = (std::string *)v21;
  v26 = &v23;
  v27 = v21;
  v28 = &v23;
  v29 = &v23;
  if (v22 == -1)
    sub_20AECFAB8();
  v24 = &v25;
  ((void (*)(std::string ***, _DWORD *))off_24C40B6B8[v22])(&v24, v21);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v25 = (std::string *)v21;
  v26 = (std::string *)" ";
  v27 = v21;
  v28 = (std::string *)" ";
  v29 = (std::string *)" ";
  if (v22 == -1)
    sub_20AECFAB8();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B6A0[v22])(&v23, v21);
  v25 = (std::string *)v21;
  v26 = a3;
  v27 = v21;
  v28 = a3;
  v29 = a3;
  if (v22 == -1)
    sub_20AECFAB8();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B8A0[v22])(&v23, v21);
  v25 = (std::string *)v21;
  v26 = (std::string *)" which does not match the ";
  v27 = v21;
  v28 = (std::string *)" which does not match the ";
  v29 = (std::string *)" which does not match the ";
  if (v22 == -1)
    sub_20AECFAB8();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B870[v22])(&v23, v21);
  std::to_string(&v23, a5);
  v25 = (std::string *)v21;
  v26 = &v23;
  v27 = v21;
  v28 = &v23;
  v29 = &v23;
  if (v22 == -1)
    sub_20AECFAB8();
  v24 = &v25;
  ((void (*)(std::string ***, _DWORD *))off_24C40B6B8[v22])(&v24, v21);
  if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v23.__r_.__value_.__l.__data_);
  v25 = (std::string *)v21;
  v26 = (std::string *)" ";
  v27 = v21;
  v28 = (std::string *)" ";
  v29 = (std::string *)" ";
  if (v22 == -1)
    sub_20AECFAB8();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B6A0[v22])(&v23, v21);
  if (v20)
  {
    v25 = (std::string *)v21;
    v26 = (std::string *)&v20;
    v27 = v21;
    v28 = (std::string *)&v20;
    v29 = (std::string *)&v20;
    if (v22 != -1)
    {
      v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
      ((void (*)(std::string *, _DWORD *))off_24C40B718[v22])(&v23, v21);
      goto LABEL_16;
    }
LABEL_42:
    sub_20AECFAB8();
  }
  v25 = (std::string *)v21;
  v26 = (std::string *)"nullptr";
  v27 = v21;
  v28 = (std::string *)"nullptr";
  v29 = (std::string *)"nullptr";
  if (v22 == -1)
    goto LABEL_42;
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B700[v22])(&v23, v21);
LABEL_16:
  v25 = (std::string *)v21;
  v26 = (std::string *)" they correspond to";
  v27 = v21;
  v28 = (std::string *)" they correspond to";
  v29 = (std::string *)" they correspond to";
  if (v22 == -1)
    sub_20AECFAB8();
  v23.__r_.__value_.__r.__words[0] = (std::string::size_type)&v25;
  ((void (*)(std::string *, _DWORD *))off_24C40B840[v22])(&v23, v21);
  if (v22 == -1)
    sub_20AECFAB8();
  v25 = &v23;
  ((void (*)(void **__return_ptr, std::string **, _DWORD *))off_24C40B6D0[v22])(v9, &v25, v21);
  if (v22 != -1)
    ((void (*)(std::string **, _DWORD *))off_24C40B688[v22])(&v25, v21);
  if (SHIBYTE(v10) < 0)
  {
    sub_20AEC60F4(__p, v9[0], (unint64_t)v9[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v9;
    v12 = v10;
  }
  v13 = 1;
  LOBYTE(v14) = 0;
  v18 = 0;
  v19 = 1;
  sub_20AECCC3C(0x20u, (__int128 *)__p, a1);
  if (v19)
  {
    if (!v18)
      goto LABEL_27;
    if (v17 < 0)
    {
      operator delete(v16);
      if ((v15 & 0x80000000) == 0)
      {
LABEL_27:
        if (!v13)
          goto LABEL_30;
LABEL_28:
        if (SHIBYTE(v12) < 0)
          operator delete(__p[0]);
        goto LABEL_30;
      }
    }
    else if ((v15 & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v14);
    if (!v13)
      goto LABEL_30;
    goto LABEL_28;
  }
LABEL_30:
  if (SHIBYTE(v10) < 0)
    operator delete(v9[0]);
}

void sub_20B089CA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B089CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28)
{
  sub_20AECFA60((uint64_t)&a28);
  _Unwind_Resume(a1);
}

void sub_20B089D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int16 *v5;
  const void *v6;
  uint64_t v7;
  size_t v8;
  BOOL v9;
  char **v10;
  char *v11;
  size_t v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 __p;
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  uint64_t v29;
  __int128 __dst;
  uint64_t v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  char v37;
  char v38;
  unsigned __int8 v39;

  if (!*(_BYTE *)a3)
  {
    v6 = *(const void **)(a3 + 16);
    v7 = sub_20B07E8F0((unsigned __int8 *)a3);
    v8 = v7;
    if (v6)
      v9 = 1;
    else
      v9 = v7 == 0;
    if (!v9
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v10 = *(char ***)(a2 + 8);
    v11 = *v10;
    v12 = v10[1] - *v10;
    if (v8 <= v12)
    {
      if (v8 < v12)
        v10[1] = &v11[v8];
      if (!v8)
        goto LABEL_37;
    }
    else
    {
      sub_20B08A3B0(*(_QWORD *)(a2 + 8), v8 - v12);
      v11 = **(char ***)(a2 + 8);
    }
    memmove(v11, v6, v8);
LABEL_37:
    *(_BYTE *)(a1 + 120) = 1;
    return;
  }
  v5 = ***(unsigned __int16 ****)a2;
  v39 = *(_BYTE *)a3;
  sub_20B08A058((uint64_t)v26, v5);
  sub_20B08A1A4((uint64_t)v28, (const char *)v26, &v39);
  if (SHIBYTE(v29) < 0)
  {
    sub_20AEC60F4(&__dst, v28[0], (unint64_t)v28[1]);
  }
  else
  {
    __dst = *(_OWORD *)v28;
    v31 = v29;
  }
  v32 = 1;
  LOBYTE(v33) = 0;
  v37 = 0;
  v38 = 1;
  sub_20AECCC3C(0x21u, &__dst, (uint64_t)&v15);
  if (!v38)
    goto LABEL_19;
  if (!v37)
    goto LABEL_16;
  if ((v36 & 0x80000000) == 0)
  {
    if ((v34 & 0x80000000) == 0)
      goto LABEL_16;
LABEL_39:
    operator delete(v33);
    if (!v32)
      goto LABEL_19;
    goto LABEL_17;
  }
  operator delete(v35);
  if (v34 < 0)
    goto LABEL_39;
LABEL_16:
  if (!v32)
    goto LABEL_19;
LABEL_17:
  if (SHIBYTE(v31) < 0)
    operator delete((void *)__dst);
LABEL_19:
  if (SHIBYTE(v29) < 0)
  {
    operator delete(v28[0]);
    if ((v27 & 0x80000000) == 0)
      goto LABEL_21;
  }
  else if ((v27 & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v26[0]);
LABEL_21:
  *(_OWORD *)a1 = v15;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v25)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v13 = v18;
    if (v18)
    {
      *(_OWORD *)(a1 + 16) = __p;
      *(_QWORD *)(a1 + 32) = v17;
      v17 = 0;
      __p = 0uLL;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v24)
    {
      v14 = v21;
      *(_QWORD *)(a1 + 64) = v20;
      *(_OWORD *)(a1 + 48) = v19;
      v19 = 0uLL;
      *(_QWORD *)(a1 + 72) = v14;
      *(_OWORD *)(a1 + 80) = v22;
      *(_QWORD *)(a1 + 96) = v23;
      v20 = 0;
      v22 = 0uLL;
      v23 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v13)
    {
      if (SHIBYTE(v17) < 0)
        operator delete((void *)__p);
    }
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
}

void sub_20B089FFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B08A058(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD v6[5];
  _QWORD *v7;

  v5 = 0;
  sub_20AED5B5C(v4, "'");
  sub_20B0860B8((uint64_t)v4, a2);
  v6[0] = v4;
  v6[1] = "' labels";
  v6[2] = v4;
  v6[3] = "' labels";
  v6[4] = "' labels";
  if (v5 == -1)
    sub_20AECFAB8();
  v7 = v6;
  ((void (*)(_QWORD **, _DWORD *))off_24C40B888[v5])(&v7, v4);
  if (v5 == -1)
    sub_20AECFAB8();
  v6[0] = &v7;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C40B6D0[v5])(v6, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C40B688[v5])(v6, v4);
  return result;
}

void sub_20B08A154(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B08A168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B08A17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B08A190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECFA60((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B08A1A4(uint64_t a1, const char *a2, _BYTE *a3)
{
  uint64_t result;
  char v6;
  _DWORD v7[6];
  int v8;
  _QWORD **v9;
  const char *v10;
  _DWORD *v11;
  const char *v12;
  const char *v13;
  _QWORD *v14;

  v8 = 0;
  sub_20AF6AFF0(v7, "Mesh ");
  v9 = (_QWORD **)v7;
  v10 = a2;
  v11 = v7;
  v12 = a2;
  v13 = a2;
  if (v8 == -1)
    sub_20AECFAB8();
  v14 = &v9;
  ((void (*)(_QWORD **, _DWORD *))off_24C40B8A0[v8])(&v14, v7);
  v9 = (_QWORD **)v7;
  v10 = " have unsupported value type '";
  v11 = v7;
  v12 = " have unsupported value type '";
  v13 = " have unsupported value type '";
  if (v8 == -1)
    sub_20AECFAB8();
  v14 = &v9;
  ((void (*)(_QWORD **, _DWORD *))off_24C40B7B8[v8])(&v14, v7);
  sub_20AF6A118((uint64_t)&v6, (uint64_t)v7, a3);
  v9 = (_QWORD **)v7;
  v10 = "'";
  v11 = v7;
  v12 = "'";
  v13 = "'";
  if (v8 == -1)
    sub_20AECFAB8();
  v14 = &v9;
  ((void (*)(_QWORD **, _DWORD *))off_24C40B6A0[v8])(&v14, v7);
  if (v8 == -1)
    sub_20AECFAB8();
  v9 = &v14;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C40B6D0[v8])(&v9, v7);
  if (v8 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C40B688[v8])(&v9, v7);
  return result;
}

void sub_20B08A338(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08A34C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08A360(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08A374(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08A388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08A39C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08A3B0(uint64_t a1, size_t a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD **v17;
  _QWORD **v18;
  unint64_t v19;
  _QWORD **v20;
  _OWORD *v21;
  __int128 *v22;
  unint64_t v23;
  __int128 v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD **v28;
  int v29;
  _QWORD *v30;

  v5 = *(_QWORD *)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero(*(void **)(a1 + 8), a2);
      v5 += a2;
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(_QWORD ***)a1;
    v7 = v5 - *(_QWORD *)a1;
    v8 = v7 + a2;
    if ((uint64_t)(v7 + a2) < 0)
      sub_20AEC60B8();
    v9 = v4 - (_QWORD)v6;
    if (2 * v9 > v8)
      v8 = 2 * v9;
    v10 = v9 >= 0x3FFFFFFFFFFFFFFFLL;
    v11 = 0x7FFFFFFFFFFFFFFFLL;
    if (!v10)
      v11 = v8;
    if (v11)
    {
      LODWORD(v30) = v11;
      v12 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v12 == -1)
        sub_20AECFAB8();
      v28 = &v30;
      v14 = ((uint64_t (*)(_QWORD ***, uint64_t))off_24C40B8B8[v12])(&v28, a1 + 24);
    }
    else
    {
      v14 = 0;
      v13 = 0;
    }
    v15 = v14 + v7;
    v16 = v14 + v13;
    bzero((void *)(v14 + v7), a2);
    v17 = *(_QWORD ***)a1;
    v18 = *(_QWORD ***)(a1 + 8);
    v19 = (unint64_t)v18 - *(_QWORD *)a1;
    if (v18 != *(_QWORD ***)a1)
    {
      if (v19 < 0x20)
        goto LABEL_31;
      if ((_QWORD **)((char *)v18 + (_QWORD)((char *)v6 - v14 - v5)) < (_QWORD **)0x20)
        goto LABEL_31;
      v20 = (_QWORD **)((char *)v18 - (v19 & 0xFFFFFFFFFFFFFFE0));
      v15 -= v19 & 0xFFFFFFFFFFFFFFE0;
      v21 = (_OWORD *)(v7 + v14 - 16);
      v22 = (__int128 *)(v18 - 2);
      v23 = v19 & 0xFFFFFFFFFFFFFFE0;
      do
      {
        v24 = *v22;
        *(v21 - 1) = *(v22 - 1);
        *v21 = v24;
        v21 -= 2;
        v22 -= 2;
        v23 -= 32;
      }
      while (v23);
      v18 = v20;
      if (v19 != (v19 & 0xFFFFFFFFFFFFFFE0))
      {
LABEL_31:
        do
        {
          v25 = *((_BYTE *)v18 - 1);
          v18 = (_QWORD **)((char *)v18 - 1);
          *(_BYTE *)--v15 = v25;
        }
        while (v18 != v17);
      }
      v18 = *(_QWORD ***)a1;
    }
    *(_QWORD *)a1 = v15;
    *(_QWORD *)(a1 + 8) = v14 + v7 + a2;
    v26 = *(_QWORD *)(a1 + 16);
    *(_QWORD *)(a1 + 16) = v16;
    if (v18)
    {
      v28 = v18;
      v29 = v26 - (_DWORD)v18;
      v27 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v27 == -1)
        sub_20AECFAB8();
      v30 = &v28;
      ((void (*)(_QWORD **, uint64_t))off_24C40B7F8[v27])(&v30, a1 + 24);
    }
  }
}

void *sub_20B08A594(unsigned int **a1)
{
  return operator new(**a1);
}

vm_address_t sub_20B08A5C0(unsigned int **a1)
{
  vm_size_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 4095) & 0x1FFFFF000;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

void sub_20B08A63C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  const void *v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  char **v9;
  char *v10;
  unint64_t v11;
  unsigned __int16 *v12;
  int v13;
  uint64_t v14;
  __int128 v15;
  __int128 __p;
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;
  void *v26[2];
  char v27;
  void *v28[2];
  uint64_t v29;
  __int128 __dst;
  uint64_t v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  char v37;
  char v38;
  unsigned __int8 v39;

  if (*(_BYTE *)a3 == 11)
  {
    v5 = *(const void **)(a3 + 16);
    v6 = sub_20B07E8F0((unsigned __int8 *)a3);
    v7 = v6;
    if (v5)
      v8 = 1;
    else
      v8 = v6 == 0;
    if (!v8
      && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v9 = *(char ***)(a2 + 8);
    v10 = *v9;
    v11 = (v9[1] - *v9) >> 2;
    if (v7 <= v11)
    {
      if (v7 < v11)
        v9[1] = &v10[4 * v7];
      if (!v7)
        goto LABEL_15;
    }
    else
    {
      sub_20B08A96C(*(_QWORD *)(a2 + 8), v7 - v11);
      v10 = **(char ***)(a2 + 8);
    }
    memmove(v10, v5, 4 * v7);
LABEL_15:
    *(_BYTE *)(a1 + 120) = 1;
    return;
  }
  v12 = ***(unsigned __int16 ****)a2;
  v39 = *(_BYTE *)a3;
  sub_20B08A058((uint64_t)v26, v12);
  sub_20B08A1A4((uint64_t)v28, (const char *)v26, &v39);
  if (SHIBYTE(v29) < 0)
  {
    sub_20AEC60F4(&__dst, v28[0], (unint64_t)v28[1]);
  }
  else
  {
    __dst = *(_OWORD *)v28;
    v31 = v29;
  }
  v32 = 1;
  LOBYTE(v33) = 0;
  v37 = 0;
  v38 = 1;
  sub_20AECCC3C(0x21u, &__dst, (uint64_t)&v15);
  if (v38)
  {
    if (!v37)
      goto LABEL_22;
    if (v36 < 0)
    {
      operator delete(v35);
      if ((v34 & 0x80000000) == 0)
      {
LABEL_22:
        if (!v32)
          goto LABEL_25;
LABEL_23:
        if (SHIBYTE(v31) < 0)
          operator delete((void *)__dst);
        goto LABEL_25;
      }
    }
    else if ((v34 & 0x80000000) == 0)
    {
      goto LABEL_22;
    }
    operator delete(v33);
    if (!v32)
      goto LABEL_25;
    goto LABEL_23;
  }
LABEL_25:
  if (SHIBYTE(v29) < 0)
  {
    operator delete(v28[0]);
    if ((v27 & 0x80000000) == 0)
      goto LABEL_27;
  }
  else if ((v27 & 0x80000000) == 0)
  {
    goto LABEL_27;
  }
  operator delete(v26[0]);
LABEL_27:
  *(_OWORD *)a1 = v15;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v25)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v13 = v18;
    if (v18)
    {
      *(_OWORD *)(a1 + 16) = __p;
      *(_QWORD *)(a1 + 32) = v17;
      v17 = 0;
      __p = 0uLL;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v24)
    {
      v14 = v21;
      *(_QWORD *)(a1 + 64) = v20;
      *(_OWORD *)(a1 + 48) = v19;
      v19 = 0uLL;
      *(_QWORD *)(a1 + 72) = v14;
      *(_OWORD *)(a1 + 80) = v22;
      *(_QWORD *)(a1 + 96) = v23;
      v20 = 0;
      v22 = 0uLL;
      v23 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v13 && SHIBYTE(v17) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
}

void sub_20B08A910(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0)
  {
    operator delete(__p);
    if ((a30 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a30 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a25);
  _Unwind_Resume(exception_object);
}

void sub_20B08A96C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  uint64_t v18;
  char *v19;
  unint64_t v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _OWORD *v24;
  __int128 *v25;
  uint64_t v26;
  __int128 v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  int v32;
  char **v33;

  v5 = *(char **)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (a2 > (v4 - (uint64_t)v5) >> 2)
  {
    v6 = *(char **)a1;
    v7 = (uint64_t)&v5[-*(_QWORD *)a1];
    v8 = v7 >> 2;
    v9 = (v7 >> 2) + a2;
    if (v9 >> 62)
      sub_20AEC60B8();
    v10 = v4 - (_QWORD)v6;
    if (v10 >> 1 > v9)
      v9 = v10 >> 1;
    v11 = (unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL;
    v12 = 0x3FFFFFFFFFFFFFFFLL;
    if (!v11)
      v12 = v9;
    if (v12)
    {
      LODWORD(v33) = v12;
      v13 = *(unsigned int *)(a1 + 28);
      if ((_DWORD)v13 == -1)
        sub_20AECFAB8();
      v31 = (char *)&v33;
      v15 = ((uint64_t (*)(char **, uint64_t))off_24C40B8C8[v13])(&v31, a1 + 24);
      v6 = *(char **)a1;
      v5 = *(char **)(a1 + 8);
    }
    else
    {
      v15 = 0;
      v14 = 0;
    }
    v16 = (char *)(v15 + 4 * v8);
    v17 = 4 * a2;
    v18 = v15 + 4 * v14;
    bzero(v16, v17);
    v19 = &v16[v17];
    if (v5 == v6)
      goto LABEL_23;
    v20 = v5 - v6 - 4;
    if (v20 >= 0x2C)
    {
      if ((unint64_t)&v5[-v15 - v7] >= 0x20)
      {
        v22 = (v20 >> 2) + 1;
        v23 = 4 * (v22 & 0x7FFFFFFFFFFFFFF8);
        v21 = &v5[-v23];
        v16 -= v23;
        v24 = (_OWORD *)(v15 + 4 * v8 - 16);
        v25 = (__int128 *)(v5 - 16);
        v26 = v22 & 0x7FFFFFFFFFFFFFF8;
        do
        {
          v27 = *v25;
          *(v24 - 1) = *(v25 - 1);
          *v24 = v27;
          v24 -= 2;
          v25 -= 2;
          v26 -= 8;
        }
        while (v26);
        if (v22 == (v22 & 0x7FFFFFFFFFFFFFF8))
        {
LABEL_23:
          *(_QWORD *)a1 = v16;
          *(_QWORD *)(a1 + 8) = v19;
          v29 = *(_QWORD *)(a1 + 16);
          *(_QWORD *)(a1 + 16) = v18;
          if (v6)
          {
            v31 = v6;
            v32 = (unint64_t)(v29 - (_QWORD)v6) >> 2;
            v30 = *(unsigned int *)(a1 + 28);
            if ((_DWORD)v30 == -1)
              sub_20AECFAB8();
            v33 = &v31;
            ((void (*)(char ***, uint64_t))off_24C40B7E8[v30])(&v33, a1 + 24);
          }
          return;
        }
      }
      else
      {
        v21 = v5;
      }
    }
    else
    {
      v21 = v5;
    }
    do
    {
      v28 = *((_DWORD *)v21 - 1);
      v21 -= 4;
      *((_DWORD *)v16 - 1) = v28;
      v16 -= 4;
    }
    while (v21 != v6);
    goto LABEL_23;
  }
  if (a2)
  {
    bzero(*(void **)(a1 + 8), 4 * a2);
    v5 += 4 * a2;
  }
  *(_QWORD *)(a1 + 8) = v5;
}

void *sub_20B08AB74(unsigned int **a1)
{
  return operator new(4 * **a1);
}

vm_address_t sub_20B08ABA0(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 1023) & 0x1FFFFFC00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 4 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

void sub_20B08AC1C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 __p;
  char v11;
  char v12;
  __int128 v13;

  v6 = operator new();
  LOBYTE(__p) = 0;
  v12 = 0;
  sub_20B24AB84(&v13, a1, &__p);
  *(_QWORD *)v6 = &off_24C40B938;
  *(_OWORD *)(v6 + 8) = v13;
  v13 = 0uLL;
  sub_20AF4CAF4(v6 + 32, a2);
  *(_QWORD *)v6 = &off_24C40B8E8;
  *a3 = v6;
  v7 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v8 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  if (v12)
  {
    if (v11 < 0)
      operator delete((void *)__p);
  }
}

void sub_20B08AD0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;
  uint64_t v20;

  sub_20AEC147C(v20);
  sub_20AEC147C((uint64_t)&a17);
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  MEMORY[0x20BD3583C](v19, 0x10B3C40E92279A6);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B08AD60(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C40B938;
  sub_20AF4EA3C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B08ADD8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C40B938;
  sub_20AF4EA3C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B08AE50(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B08AE58(float ***a1, float ***lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40B978, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_20B24AD6C(a1 + 1, (float ***)(result + 8));
  }
  return result;
}

void sub_20B08AEBC(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20B08BF90();
  sub_20B08AF70(a1);
  sub_20AF4DD70(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20B08AF54(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B08AF70(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254634B18);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634B18))
  {
    v4 = sub_20B08BD94();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20AF4E53C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20AEC60F4(&xmmword_254634B00, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254634B10 = *(_QWORD *)(v9 - 8);
      xmmword_254634B00 = v7;
    }
    sub_20AEC2E90(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634B00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634B18);
  }
  return sub_20B08C350(&xmmword_254634B00, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)"}");
}

void sub_20B08B080(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC2E90(&a9);
  __cxa_guard_abort(&qword_254634B18);
  _Unwind_Resume(a1);
}

void sub_20B08B0A0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634B18);
  _Unwind_Resume(a1);
}

void sub_20B08B0B8(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 7;
}

void sub_20B08B0E4(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20B2346E4(lpsrc, 7, a2);
}

_QWORD *sub_20B08B11C(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C40B938;
  sub_20AF4EA3C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B08B194(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C40B938;
  sub_20AF4EA3C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B08B20C(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20B08B830();
  return sub_20B08B360(v2, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20B08B264(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20B08B58C((uint64_t)v5, (uint64_t)v2, (uint64_t *)(a1 + 8));
  if (v3 == -1)
    sub_20AECFAB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40B6D0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40B688[v3])(v5, v2);
  return result;
}

void sub_20B08B2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C40B688[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20B08B334(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20B08B360(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20AED5C4C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20B08B58C((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40B6A0[v16])(&p_p_dst, &__dst);
  sub_20AF4D170((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40B6A0[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40B6D0[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40B688[v16])(&p_dst, &__dst);
  return result;
}

void sub_20B08B4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08B514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08B528(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08B53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08B550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08B564(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08B578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08B58C(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20B24B2AC((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40B6B8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B08B7DC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B08B800(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B08B81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20B08B830()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546349D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546349D8))
    return &xmmword_2546349C0;
  v2 = sub_20B08B90C();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546349C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546349D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546349C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546349C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546349D8);
  return &xmmword_2546349C0;
}

void sub_20B08B8F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546349D8);
  _Unwind_Resume(a1);
}

std::string *sub_20B08B90C()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546349F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546349F8))
    return &stru_2546349E0;
  sub_20B08BBB0((uint64_t)__p);
  sub_20B08B9FC((char *)__p, &stru_2546349E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546349E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546349F8);
  return &stru_2546349E0;
}

void sub_20B08B9BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546349F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546349F8);
  _Unwind_Resume(a1);
}

void sub_20B08B9FC(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B08BD94();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20AF4DB74();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 2uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20B08BB60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20AEC2E90((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B08BBB0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634A78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634A78))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::TriMesh>]", qword_254634A60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634A60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634A78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634A98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634A98))
  {
    v5 = sub_20AED4780(qword_254634A60, "<", 0);
    sub_20AED467C(qword_254634A60, 0, v5, qword_254634A80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634A80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634A98);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254634AB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254634AB8))
  {
    sub_20B531658((uint64_t)qword_254634A80, (uint64_t)&xmmword_254634AA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634AA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634AB8);
  }
  if (byte_254634AB7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254634AA0, *((unint64_t *)&xmmword_254634AA0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254634AA0;
    *(_QWORD *)(a1 + 16) = unk_254634AB0;
  }
}

void sub_20B08BD4C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634AB8);
  _Unwind_Resume(a1);
}

void sub_20B08BD64(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634A98);
  _Unwind_Resume(a1);
}

void sub_20B08BD7C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634A78);
  _Unwind_Resume(a1);
}

__int128 *sub_20B08BD94()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634A18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634A18))
    return &xmmword_254634A00;
  v2 = (char *)sub_20B08BE70();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254634A00, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254634A10 = *((_QWORD *)v2 + 2);
    xmmword_254634A00 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634A00, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634A18);
  return &xmmword_254634A00;
}

void sub_20B08BE58(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634A18);
  _Unwind_Resume(a1);
}

void *sub_20B08BE70()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254634A38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634A38))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::TriMesh]", qword_254634A20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634A20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634A38);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254634A58);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254634A58))
    return &unk_254634A40;
  sub_20B531658((uint64_t)qword_254634A20, (uint64_t)&unk_254634A40);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254634A40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634A58);
  return &unk_254634A40;
}

void sub_20B08BF60(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634A58);
  _Unwind_Resume(a1);
}

void sub_20B08BF78(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634A38);
  _Unwind_Resume(a1);
}

std::string *sub_20B08BF90()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254634AD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634AD8))
  {
    sub_20AEC0D64(v9, "viz::PackageData");
    v2 = sub_20B08BD94();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20B08C258();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AEC60F4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20AEC7620(v8, (uint64_t)__dst, 4uLL);
    sub_20B53170C((char *)v9, (uint64_t *)v8, &stru_254634AC0, v6, v7);
    sub_20AEC2E90(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634AC0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254634AD8);
        return &stru_254634AC0;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254634AC0;
}

void sub_20B08C174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20AEC2E90(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254634AD8);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254634AD8);
  _Unwind_Resume(a1);
}

std::string *sub_20B08C258()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634AF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634AF8))
    return &stru_254634AE0;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 7U]", __p);
  sub_20B531884((uint64_t)__p, &stru_254634AE0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634AE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634AF8);
  return &stru_254634AE0;
}

void sub_20B08C310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634AF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634AF8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B08C350(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20AED5C4C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20B08B58C((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40B6A0[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40B6D0[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40B688[v11])(&p_dst, &__dst);
  return result;
}

void sub_20B08C490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08C4A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08C4BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08C4D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08C4E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08C4F8(char *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v4;
  _BYTE *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count_vtbl *v7;
  std::__shared_weak_count *v8;
  int v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  char v13;
  int v14;
  char v15;
  __int16 v16;
  __int16 v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unint64_t *p_shared_owners;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t *v28;
  unint64_t v29;
  void *v30[2];
  uint64_t v31;
  char v32;
  void *v33;
  char v34;
  void *v35;
  char v36;
  char v37;
  char v38;
  std::__shared_weak_count *v39;
  std::__shared_weak_count *v40;
  void *v41[2];
  uint64_t v42;
  __int128 __dst;
  uint64_t v44;
  char v45;
  void *v46;
  char v47;
  void *__p;
  char v49;
  char v50;
  char v51;
  __int128 v52;
  __int128 v53;
  uint64_t v54;
  unsigned __int8 v55;
  __int128 v56;
  uint64_t v57;
  uint64_t v58;
  __int128 v59;
  uint64_t v60;
  char v61;
  char v62;
  char v63;
  _DWORD v64[6];
  int v65;
  char v66;
  char *v67;

  v63 = a2;
  if (a1)
  {
    v39 = 0;
    v40 = 0;
    switch(a2)
    {
      case 0:
        v4 = *a1;
        v5 = operator new(1uLL);
        *v5 = v4;
        v6 = (std::__shared_weak_count *)operator new(0x38uLL);
        v7 = (std::__shared_weak_count_vtbl *)(v5 + 1);
        v6->__shared_owners_ = 0;
        v6->__shared_weak_owners_ = 0;
        v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
        LOBYTE(v6[1].__vftable) = 0;
        v8 = v6 + 1;
        goto LABEL_76;
      case 1:
        if ((a1 & 1) != 0)
          goto LABEL_45;
        v16 = *(_WORD *)a1;
        v5 = operator new(2uLL);
        *(_WORD *)v5 = v16;
        v6 = (std::__shared_weak_count *)operator new(0x38uLL);
        v7 = (std::__shared_weak_count_vtbl *)(v5 + 2);
        v6->__shared_owners_ = 0;
        v6->__shared_weak_owners_ = 0;
        v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
        v13 = 1;
        goto LABEL_75;
      case 2:
        if ((a1 & 3) != 0)
          goto LABEL_45;
        v18 = *(_DWORD *)a1;
        v5 = operator new(4uLL);
        *(_DWORD *)v5 = v18;
        v6 = (std::__shared_weak_count *)operator new(0x38uLL);
        v7 = (std::__shared_weak_count_vtbl *)(v5 + 4);
        v6->__shared_owners_ = 0;
        v6->__shared_weak_owners_ = 0;
        v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
        v13 = 2;
        goto LABEL_75;
      case 3:
        if ((a1 & 7) != 0)
          goto LABEL_45;
        v20 = *(_QWORD *)a1;
        v5 = operator new(8uLL);
        *(_QWORD *)v5 = v20;
        v6 = (std::__shared_weak_count *)operator new(0x38uLL);
        v7 = (std::__shared_weak_count_vtbl *)(v5 + 8);
        v6->__shared_owners_ = 0;
        v6->__shared_weak_owners_ = 0;
        v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
        v13 = 3;
        goto LABEL_75;
      case 5:
        v15 = *a1;
        v5 = operator new(1uLL);
        *v5 = v15;
        v6 = (std::__shared_weak_count *)operator new(0x38uLL);
        v7 = (std::__shared_weak_count_vtbl *)(v5 + 1);
        v6->__shared_owners_ = 0;
        v6->__shared_weak_owners_ = 0;
        v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
        v13 = 5;
        goto LABEL_75;
      case 6:
        if ((a1 & 1) != 0)
          goto LABEL_45;
        v17 = *(_WORD *)a1;
        v5 = operator new(2uLL);
        *(_WORD *)v5 = v17;
        v6 = (std::__shared_weak_count *)operator new(0x38uLL);
        v7 = (std::__shared_weak_count_vtbl *)(v5 + 2);
        v6->__shared_owners_ = 0;
        v6->__shared_weak_owners_ = 0;
        v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
        v13 = 6;
        goto LABEL_75;
      case 7:
        if ((a1 & 3) != 0)
          goto LABEL_45;
        v23 = *(_DWORD *)a1;
        v5 = operator new(4uLL);
        *(_DWORD *)v5 = v23;
        v6 = (std::__shared_weak_count *)operator new(0x38uLL);
        v7 = (std::__shared_weak_count_vtbl *)(v5 + 4);
        v6->__shared_owners_ = 0;
        v6->__shared_weak_owners_ = 0;
        v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
        v13 = 7;
        goto LABEL_75;
      case 8:
        if ((a1 & 7) != 0)
          goto LABEL_45;
        v19 = *(_QWORD *)a1;
        v5 = operator new(8uLL);
        *(_QWORD *)v5 = v19;
        v6 = (std::__shared_weak_count *)operator new(0x38uLL);
        v7 = (std::__shared_weak_count_vtbl *)(v5 + 8);
        v6->__shared_owners_ = 0;
        v6->__shared_weak_owners_ = 0;
        v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
        v13 = 8;
        goto LABEL_75;
      case 11:
        if ((a1 & 3) != 0)
          goto LABEL_45;
        v14 = *(_DWORD *)a1;
        v5 = operator new(4uLL);
        *(_DWORD *)v5 = v14;
        v6 = (std::__shared_weak_count *)operator new(0x38uLL);
        v7 = (std::__shared_weak_count_vtbl *)(v5 + 4);
        v6->__shared_owners_ = 0;
        v6->__shared_weak_owners_ = 0;
        v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
        v13 = 11;
        goto LABEL_75;
      case 12:
        if ((a1 & 7) == 0)
        {
          v12 = *(_QWORD *)a1;
          v5 = operator new(8uLL);
          *(_QWORD *)v5 = v12;
          v6 = (std::__shared_weak_count *)operator new(0x38uLL);
          v7 = (std::__shared_weak_count_vtbl *)(v5 + 8);
          v6->__shared_owners_ = 0;
          v6->__shared_weak_owners_ = 0;
          v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
          v13 = 12;
LABEL_75:
          LOBYTE(v6[1].__vftable) = v13;
          v8 = v6 + 1;
LABEL_76:
          v6[1].__shared_owners_ = (uint64_t)v5;
          v6[1].__shared_weak_owners_ = (uint64_t)v7;
          v6[2].__vftable = v7;
          v39 = v8;
          v40 = v6;
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v25 = __ldxr(p_shared_owners);
          while (__stxr(v25 + 1, p_shared_owners));
          do
            v26 = __ldxr(p_shared_owners);
          while (__stxr(v26 + 1, p_shared_owners));
          *(_QWORD *)a3 = v8;
          *(_QWORD *)(a3 + 8) = v6;
          *(_BYTE *)(a3 + 120) = 1;
          do
            v27 = __ldaxr(p_shared_owners);
          while (__stlxr(v27 - 1, p_shared_owners));
          if (!v27)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
          if (v40)
          {
            v28 = &v40->__shared_owners_;
            do
              v29 = __ldaxr((unint64_t *)v28);
            while (__stlxr(v29 - 1, (unint64_t *)v28));
            if (!v29)
            {
              ((void (*)(std::__shared_weak_count *))v40->__on_zero_shared)(v40);
              std::__shared_weak_count::__release_weak(v40);
            }
          }
          return;
        }
LABEL_45:
        v65 = 0;
        sub_20B003710(v64, "data pointer is not aligned with given value type ");
        sub_20AF6A118((uint64_t)&v67, (uint64_t)v64, &v63);
        if (v65 == -1)
          sub_20AECFAB8();
        v67 = &v66;
        ((void (*)(void **__return_ptr, char **, _DWORD *))off_24C40BA28[v65])(v41, &v67, v64);
        if (v65 != -1)
          ((void (*)(char **, _DWORD *))off_24C40BA10[v65])(&v67, v64);
        if (SHIBYTE(v42) < 0)
        {
          sub_20AEC60F4(v30, v41[0], (unint64_t)v41[1]);
        }
        else
        {
          *(_OWORD *)v30 = *(_OWORD *)v41;
          v31 = v42;
        }
        v32 = 1;
        LOBYTE(v33) = 0;
        v37 = 0;
        v38 = 1;
        sub_20AECCC3C(0xAu, (__int128 *)v30, (uint64_t)&v52);
        *(_OWORD *)a3 = v52;
        *(_BYTE *)(a3 + 16) = 0;
        *(_BYTE *)(a3 + 112) = 0;
        if (v62)
        {
          *(_BYTE *)(a3 + 40) = 0;
          v21 = v55;
          if (v55)
          {
            *(_OWORD *)(a3 + 16) = v53;
            *(_QWORD *)(a3 + 32) = v54;
            v54 = 0;
            v53 = 0uLL;
            *(_BYTE *)(a3 + 40) = 1;
          }
          *(_BYTE *)(a3 + 48) = 0;
          *(_BYTE *)(a3 + 104) = 0;
          if (v61)
          {
            v22 = v58;
            *(_QWORD *)(a3 + 64) = v57;
            *(_OWORD *)(a3 + 48) = v56;
            v56 = 0uLL;
            *(_QWORD *)(a3 + 72) = v22;
            *(_OWORD *)(a3 + 80) = v59;
            *(_QWORD *)(a3 + 96) = v60;
            v57 = 0;
            v59 = 0uLL;
            v60 = 0;
            *(_BYTE *)(a3 + 104) = 1;
          }
          *(_BYTE *)(a3 + 112) = 1;
          *(_BYTE *)(a3 + 120) = 0;
          if (v21 && SHIBYTE(v54) < 0)
            operator delete((void *)v53);
          if (!v38)
            goto LABEL_71;
        }
        else
        {
          *(_BYTE *)(a3 + 120) = 0;
          if (!v38)
            goto LABEL_71;
        }
        if (v37)
        {
          if (v36 < 0)
            operator delete(v35);
          if (v34 < 0)
            operator delete(v33);
        }
        if (v32 && SHIBYTE(v31) < 0)
        {
          v11 = v30[0];
          goto LABEL_70;
        }
        break;
      default:
        sub_20B521E58(a2);
    }
    goto LABEL_71;
  }
  v65 = 0;
  sub_20AF6A3D8(v64, "data pointer is null");
  if (v65 == -1)
    sub_20AECFAB8();
  v39 = (std::__shared_weak_count *)&v67;
  ((void (*)(void **__return_ptr, std::__shared_weak_count **, _DWORD *))off_24C40BA28[v65])(v41, &v39, v64);
  if (v65 != -1)
    ((void (*)(std::__shared_weak_count **, _DWORD *))off_24C40BA10[v65])(&v39, v64);
  if (SHIBYTE(v42) < 0)
  {
    sub_20AEC60F4(&__dst, v41[0], (unint64_t)v41[1]);
  }
  else
  {
    __dst = *(_OWORD *)v41;
    v44 = v42;
  }
  v45 = 1;
  LOBYTE(v46) = 0;
  v50 = 0;
  v51 = 1;
  sub_20AECCC3C(0xAu, &__dst, (uint64_t)&v52);
  *(_OWORD *)a3 = v52;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v62)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v51)
      goto LABEL_71;
    goto LABEL_21;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v9 = v55;
  if (v55)
  {
    *(_OWORD *)(a3 + 16) = v53;
    *(_QWORD *)(a3 + 32) = v54;
    v54 = 0;
    v53 = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v61)
  {
    v10 = v58;
    *(_QWORD *)(a3 + 64) = v57;
    *(_OWORD *)(a3 + 48) = v56;
    v56 = 0uLL;
    *(_QWORD *)(a3 + 72) = v10;
    *(_OWORD *)(a3 + 80) = v59;
    *(_QWORD *)(a3 + 96) = v60;
    v57 = 0;
    v59 = 0uLL;
    v60 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v9 && SHIBYTE(v54) < 0)
    operator delete((void *)v53);
  if (v51)
  {
LABEL_21:
    if (v50)
    {
      if (v49 < 0)
        operator delete(__p);
      if (v47 < 0)
        operator delete(v46);
    }
    if (v45 && SHIBYTE(v44) < 0)
    {
      v11 = (void *)__dst;
LABEL_70:
      operator delete(v11);
    }
  }
LABEL_71:
  if (SHIBYTE(v42) < 0)
    operator delete(v41[0]);
}

void sub_20B08CC98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  void *v30;

  operator delete(v30);
  sub_20AEC147C((uint64_t)&a22);
  _Unwind_Resume(a1);
}

void sub_20B08CD68(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECFA60(v1 - 96);
  _Unwind_Resume(a1);
}

uint64_t sub_20B08CD7C@<X0>(char **a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v6;
  mach_timebase_info v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  char v12;
  _BYTE *v13;
  _BYTE *v14;
  size_t v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  unsigned __int8 v22;
  unsigned __int128 *v23;
  unsigned __int128 v24;
  uint64_t v25;
  char v26;
  _BYTE *v27;
  _BYTE *v28;
  size_t v29;
  char *v30;
  char *v31;
  std::__shared_weak_count *v32;
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v35;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  mach_timebase_info info;
  uint64_t v42;
  std::__shared_weak_count *v43;
  __int128 v44[33];
  mach_timebase_info v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  __int128 v53;
  char v54;
  __int128 v55;
  uint64_t v56;
  unsigned __int128 v57;
  char v58;
  _BYTE v59[40];
  uint64_t v60;

  v60 = *MEMORY[0x24BDAC8D0];
  v4 = *a1;
  if (*((_BYTE *)a2 + 384))
  {
    if (*((_BYTE *)a2 + 168))
    {
      v7 = (mach_timebase_info)*((_QWORD *)a2 + 19);
      v6 = *((_QWORD *)a2 + 20);
      if (*((_BYTE *)a2 + 24))
        goto LABEL_4;
    }
    else
    {
      v6 = mach_continuous_time();
      v22 = atomic_load((unsigned __int8 *)&qword_25463D170);
      if ((v22 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
      {
        mach_timebase_info(&v45);
        LODWORD(v39) = v45.numer;
        LODWORD(v40) = v45.denom;
        *(double *)&qword_25463D168 = (double)v39 / (double)v40;
        __cxa_guard_release(&qword_25463D170);
      }
      v7 = (mach_timebase_info)llround(*(double *)&qword_25463D168 * (double)v6);
      LOBYTE(v6) = 2;
      if (*((_BYTE *)a2 + 24))
      {
LABEL_4:
        sub_20AFA84B0((uint64_t *)a2, 1000000000);
        v8 = *((unsigned __int8 *)a2 + 24);
        v45 = v7;
        LOBYTE(v46) = v6;
        LOBYTE(v47) = 0;
        v49 = 0;
        if (v8)
        {
          if (*((char *)a2 + 23) < 0)
          {
            sub_20AEC60F4(&v47, *(void **)a2, *((_QWORD *)a2 + 1));
          }
          else
          {
            v47 = *a2;
            v48 = *((_QWORD *)a2 + 2);
          }
          v49 = 1;
          LOBYTE(v50) = 0;
          v52 = 0;
          if (!*((_BYTE *)a2 + 120))
          {
LABEL_27:
            LOBYTE(v53) = 0;
            v54 = 0;
            if (!*((_BYTE *)a2 + 144))
            {
LABEL_29:
              LOBYTE(v55) = 0;
              v58 = 0;
              if (*((_BYTE *)a2 + 80))
              {
                if (*((char *)a2 + 55) < 0)
                {
                  sub_20AEC60F4(&v55, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
                }
                else
                {
                  v55 = a2[2];
                  v56 = *((_QWORD *)a2 + 6);
                }
                v23 = (unsigned __int128 *)(a2 + 4);
                do
                  v24 = __ldaxp(v23);
                while (__stlxp(v24, v23));
                v57 = v24;
                v58 = 1;
              }
              sub_20AED3838((uint64_t)v59, (uint64_t)(a2 + 11));
              v25 = operator new();
              *(_QWORD *)v25 = &off_24C3F6340;
              v26 = *v4;
              *(_QWORD *)(v25 + 16) = 0;
              *(_BYTE *)(v25 + 8) = v26;
              *(_QWORD *)(v25 + 24) = 0;
              *(_QWORD *)(v25 + 32) = 0;
              v28 = (_BYTE *)*((_QWORD *)v4 + 1);
              v27 = (_BYTE *)*((_QWORD *)v4 + 2);
              v29 = v27 - v28;
              if (v27 != v28)
              {
                if ((v29 & 0x8000000000000000) != 0)
                  sub_20AEC60B8();
                v30 = (char *)operator new(v27 - v28);
                *(_QWORD *)(v25 + 16) = v30;
                v31 = &v30[v29];
                *(_QWORD *)(v25 + 32) = &v30[v29];
                memcpy(v30, v28, v29);
                *(_QWORD *)(v25 + 24) = v31;
              }
              sub_20AF4CAF4(v25 + 48, (uint64_t)&v45);
              *(_QWORD *)v25 = &off_24C3F62C0;
              info = (mach_timebase_info)&off_24C411E78;
              v42 = v25;
              v32 = (std::__shared_weak_count *)operator new();
              v32->__vftable = (std::__shared_weak_count_vtbl *)&off_24C411F70;
              v32->__shared_owners_ = 0;
              v32->__shared_weak_owners_ = 0;
              v32[1].__vftable = (std::__shared_weak_count_vtbl *)v25;
              v43 = v32;
              sub_20AFA7F18((uint64_t)v44, (uint64_t)&info);
              v33 = v43;
              if (v43)
              {
                p_shared_owners = (unint64_t *)&v43->__shared_owners_;
                do
                  v35 = __ldaxr(p_shared_owners);
                while (__stlxr(v35 - 1, p_shared_owners));
                if (!v35)
                {
                  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                  std::__shared_weak_count::__release_weak(v33);
                }
              }
              sub_20AF4EA3C((uint64_t)&v45);
              goto LABEL_45;
            }
LABEL_28:
            v53 = a2[8];
            v54 = 1;
            goto LABEL_29;
          }
LABEL_20:
          if (*((char *)a2 + 119) < 0)
          {
            sub_20AEC60F4(&v50, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
          }
          else
          {
            v50 = a2[6];
            v51 = *((_QWORD *)a2 + 14);
          }
          v52 = 1;
          LOBYTE(v53) = 0;
          v54 = 0;
          if (!*((_BYTE *)a2 + 144))
            goto LABEL_29;
          goto LABEL_28;
        }
LABEL_19:
        LOBYTE(v50) = 0;
        v52 = 0;
        if (!*((_BYTE *)a2 + 120))
          goto LABEL_27;
        goto LABEL_20;
      }
    }
    v45 = v7;
    LOBYTE(v46) = v6;
    LOBYTE(v47) = 0;
    v49 = 0;
    goto LABEL_19;
  }
  v9 = mach_continuous_time();
  v10 = atomic_load((unsigned __int8 *)&qword_25463D170);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
  {
    mach_timebase_info(&info);
    LODWORD(v37) = info.numer;
    LODWORD(v38) = info.denom;
    *(double *)&qword_25463D168 = (double)v37 / (double)v38;
    __cxa_guard_release(&qword_25463D170);
  }
  v45 = (mach_timebase_info)llround(*(double *)&qword_25463D168 * (double)v9);
  v46 = 2;
  LOBYTE(v47) = 0;
  v49 = 0;
  LOBYTE(v50) = 0;
  v52 = 0;
  LOBYTE(v53) = 0;
  v54 = 0;
  LOBYTE(v55) = 0;
  v58 = 0;
  v59[0] = 0;
  v59[24] = 0;
  v11 = operator new();
  *(_QWORD *)v11 = &off_24C3F6340;
  v12 = *v4;
  *(_QWORD *)(v11 + 16) = 0;
  *(_BYTE *)(v11 + 8) = v12;
  *(_QWORD *)(v11 + 24) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  v14 = (_BYTE *)*((_QWORD *)v4 + 1);
  v13 = (_BYTE *)*((_QWORD *)v4 + 2);
  v15 = v13 - v14;
  if (v13 != v14)
  {
    if ((v15 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v16 = (char *)operator new(v13 - v14);
    *(_QWORD *)(v11 + 16) = v16;
    v17 = &v16[v15];
    *(_QWORD *)(v11 + 32) = &v16[v15];
    memcpy(v16, v14, v15);
    *(_QWORD *)(v11 + 24) = v17;
  }
  sub_20AF4CAF4(v11 + 48, (uint64_t)&v45);
  *(_QWORD *)v11 = &off_24C3F62C0;
  info = (mach_timebase_info)&off_24C411E78;
  v42 = v11;
  v18 = (std::__shared_weak_count *)operator new();
  v18->__vftable = (std::__shared_weak_count_vtbl *)&off_24C411F70;
  v18->__shared_owners_ = 0;
  v18->__shared_weak_owners_ = 0;
  v18[1].__vftable = (std::__shared_weak_count_vtbl *)v11;
  v43 = v18;
  sub_20AF4EA3C((uint64_t)&v45);
  sub_20AFA7F18((uint64_t)v44, (uint64_t)&info);
  v19 = v43;
  if (v43)
  {
    v20 = (unint64_t *)&v43->__shared_owners_;
    do
      v21 = __ldaxr(v20);
    while (__stlxr(v21 - 1, v20));
    if (!v21)
    {
      ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
      std::__shared_weak_count::__release_weak(v19);
    }
  }
LABEL_45:
  sub_20AF4BAD4(a3, 0, v44);
  *(_BYTE *)(a3 + 528) = 1;
  return sub_20AED5474((uint64_t)v44);
}

void sub_20B08D2E0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B08D2F8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B08D310(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x258]))
  {
    if (SLOBYTE(STACK[0x257]) < 0)
      operator delete((void *)STACK[0x240]);
  }
  _Unwind_Resume(a1);
}

void sub_20B08D444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AED5474((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B08D458(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  uint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 v16;
  int v17;
  uint64_t v18;
  void **v19;
  void **v20;
  void *v21;
  _QWORD *v22;
  _BYTE *v23;
  _BYTE *v24;
  size_t v25;
  char *v26;
  char *v27;
  unint64_t *v28;
  unint64_t v29;
  unint64_t *v30;
  unint64_t v31;
  unsigned __int8 v32;
  void *v33;
  __int128 v34;
  char v35;
  void *v36[2];
  uint64_t v37;
  int v38;
  void *v39;
  void **v40;
  __int128 v41;
  __int128 __p;
  uint64_t v43;
  unsigned __int8 v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  uint64_t v49;
  char v50;
  char v51;
  uint64_t v52;
  std::__shared_weak_count *v53;
  __int128 __dst;
  uint64_t v55;
  int v56;
  uint64_t v57;

  v57 = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a1 + 424);
  v5 = *(std::__shared_weak_count **)(a1 + 432);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
  {
    v8 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F6318, 0) != 0;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_11;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_11:
    if (v8)
      goto LABEL_12;
LABEL_19:
    v11 = 0;
    v52 = 0;
    v53 = 0;
    goto LABEL_20;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v8)
    goto LABEL_19;
LABEL_12:
  v12 = *(_QWORD *)(a1 + 424);
  v11 = *(std::__shared_weak_count **)(a1 + 432);
  if (!v11)
  {
    v52 = *(_QWORD *)(a1 + 424);
    v53 = 0;
    if (v12)
      goto LABEL_55;
    v11 = 0;
    v32 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v32 & 1) != 0)
    {
LABEL_21:
      if (byte_25463CE9F < 0)
      {
        sub_20AEC60F4(&__dst, (void *)xmmword_25463CE88, *((unint64_t *)&xmmword_25463CE88 + 1));
      }
      else
      {
        __dst = xmmword_25463CE88;
        v55 = unk_25463CE98;
      }
      v56 = dword_25463CEA0;
      sub_20AF4BC0C(&v39, (uint64_t)&__dst, 1uLL);
      if (*(char *)(a1 + 23) < 0)
      {
        sub_20AEC60F4(v36, *(void **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)v36 = *(_OWORD *)a1;
        v37 = *(_QWORD *)(a1 + 16);
      }
      v38 = *(_DWORD *)(a1 + 24);
      v33 = operator new(0x20uLL);
      v34 = xmmword_20B5B37C0;
      strcpy((char *)v33, "cannot return data as VZNumber");
      v35 = 1;
      sub_20B099ED4((uint64_t *)&v39, (uint64_t)v36, (uint64_t)&v33, (uint64_t)&v41);
      *(_OWORD *)a2 = v41;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 112) = 0;
      if (v51)
      {
        *(_BYTE *)(a2 + 40) = 0;
        v17 = v44;
        if (v44)
        {
          *(_OWORD *)(a2 + 16) = __p;
          *(_QWORD *)(a2 + 32) = v43;
          v43 = 0;
          __p = 0uLL;
          *(_BYTE *)(a2 + 40) = 1;
        }
        *(_BYTE *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 104) = 0;
        if (v50)
        {
          v18 = v47;
          *(_QWORD *)(a2 + 64) = v46;
          *(_OWORD *)(a2 + 48) = v45;
          v45 = 0uLL;
          *(_QWORD *)(a2 + 72) = v18;
          *(_OWORD *)(a2 + 80) = v48;
          *(_QWORD *)(a2 + 96) = v49;
          v46 = 0;
          v48 = 0uLL;
          v49 = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        *(_BYTE *)(a2 + 112) = 1;
        *(_BYTE *)(a2 + 120) = 0;
        if (v17 && SHIBYTE(v43) < 0)
          operator delete((void *)__p);
        if (!v35)
        {
LABEL_40:
          if (SHIBYTE(v37) < 0)
            operator delete(v36[0]);
          v19 = (void **)v39;
          if (v39)
          {
            v20 = v40;
            v21 = v39;
            if (v40 != v39)
            {
              do
              {
                if (*((char *)v20 - 9) < 0)
                  operator delete(*(v20 - 4));
                v20 -= 4;
              }
              while (v20 != v19);
              v21 = v39;
            }
            v40 = v19;
            operator delete(v21);
          }
          if (SHIBYTE(v55) < 0)
            operator delete((void *)__dst);
          if (v11)
            goto LABEL_64;
          return;
        }
      }
      else
      {
        *(_BYTE *)(a2 + 120) = 0;
        if (!v35)
          goto LABEL_40;
      }
      if (SHIBYTE(v34) < 0)
        operator delete(v33);
      goto LABEL_40;
    }
LABEL_70:
    if (__cxa_guard_acquire(&qword_25463CF48))
    {
      *(_OWORD *)v36 = xmmword_20B5B0AE0;
      sub_20B1DFBA8((uint64_t *)v36);
      __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF48);
    }
    goto LABEL_21;
  }
  v13 = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v52 = v12;
  v53 = v11;
  if (!v12)
  {
LABEL_20:
    v16 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v16 & 1) != 0)
      goto LABEL_21;
    goto LABEL_70;
  }
  do
    v15 = __ldxr(v13);
  while (__stxr(v15 + 1, v13));
LABEL_55:
  v22 = operator new(0x38uLL);
  v22[1] = 0;
  v22[2] = 0;
  *v22 = &off_24C40B9D0;
  *((_BYTE *)v22 + 24) = *(_BYTE *)(v12 + 8);
  v22[4] = 0;
  v22[5] = 0;
  v22[6] = 0;
  v24 = *(_BYTE **)(v12 + 16);
  v23 = *(_BYTE **)(v12 + 24);
  v25 = v23 - v24;
  if (v23 != v24)
  {
    if ((v25 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v26 = (char *)operator new(v23 - v24);
    v22[4] = v26;
    v27 = &v26[v25];
    v22[6] = &v26[v25];
    memcpy(v26, v24, v25);
    v22[5] = v27;
  }
  *(_QWORD *)a2 = v22 + 3;
  *(_QWORD *)(a2 + 8) = v22;
  *(_BYTE *)(a2 + 120) = 1;
  if (v11)
  {
    v28 = (unint64_t *)&v11->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v11 = v53;
  if (v53)
  {
LABEL_64:
    v30 = (unint64_t *)&v11->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20B08D92C(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_20B08D94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25)
{
  uint64_t v25;

  sub_20AF4BA50(&a25);
  if (*(char *)(v25 - 89) < 0)
    operator delete(*(void **)(v25 - 112));
  sub_20AEC147C(v25 - 128);
  _Unwind_Resume(a1);
}

void sub_20B08DA0C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B08DA1C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40B9D0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B08DA4C(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(_QWORD *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void sub_20B08DA68(uint64_t a1@<X0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  std::__shared_weak_count_vtbl *v5;
  void *v6;
  std::__shared_weak_count *v7;
  char *v8;
  int v9;
  uint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19[2];
  uint64_t v20;
  void *__dst[2];
  uint64_t v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  void *__p[2];
  __int128 v31;
  uint64_t v32;
  unsigned __int8 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;

  v41 = a2;
  if (a1)
  {
    switch(a3)
    {
      case 0:
        v42 = a2;
        v43 = a1;
        sub_20AF6C1F8((size_t *)&v42, __p);
        v5 = (std::__shared_weak_count_vtbl *)__p[0];
        v6 = __p[1];
        v19[0] = __p[0];
        v19[1] = __p[1];
        v7 = (std::__shared_weak_count *)operator new(0x28uLL);
        break;
      case 1:
        v42 = a2;
        v43 = a1;
        sub_20AF6E11C(&v42, __p);
        v5 = (std::__shared_weak_count_vtbl *)__p[0];
        v6 = __p[1];
        v19[0] = __p[0];
        v19[1] = __p[1];
        v7 = (std::__shared_weak_count *)operator new(0x28uLL);
        break;
      case 2:
        v42 = a2;
        v43 = a1;
        sub_20AF6E1E4(&v42, __p);
        v5 = (std::__shared_weak_count_vtbl *)__p[0];
        v6 = __p[1];
        v19[0] = __p[0];
        v19[1] = __p[1];
        v7 = (std::__shared_weak_count *)operator new(0x28uLL);
        break;
      case 3:
        v42 = a2;
        v43 = a1;
        sub_20AF6E298(&v42, __p);
        v5 = (std::__shared_weak_count_vtbl *)__p[0];
        v6 = __p[1];
        v19[0] = __p[0];
        v19[1] = __p[1];
        v7 = (std::__shared_weak_count *)operator new(0x28uLL);
        break;
      case 5:
        v42 = a2;
        v43 = a1;
        sub_20AF6E34C((size_t *)&v42, __p);
        v5 = (std::__shared_weak_count_vtbl *)__p[0];
        v6 = __p[1];
        v19[0] = __p[0];
        v19[1] = __p[1];
        v7 = (std::__shared_weak_count *)operator new(0x28uLL);
        break;
      case 6:
        v42 = a2;
        v43 = a1;
        sub_20AF6E3FC(&v42, __p);
        v5 = (std::__shared_weak_count_vtbl *)__p[0];
        v6 = __p[1];
        v19[0] = __p[0];
        v19[1] = __p[1];
        v7 = (std::__shared_weak_count *)operator new(0x28uLL);
        break;
      case 7:
        v42 = a2;
        v43 = a1;
        sub_20AF6E4B0(&v42, __p);
        v5 = (std::__shared_weak_count_vtbl *)__p[0];
        v6 = __p[1];
        v19[0] = __p[0];
        v19[1] = __p[1];
        v7 = (std::__shared_weak_count *)operator new(0x28uLL);
        break;
      case 8:
        v42 = a2;
        v43 = a1;
        sub_20AF6E564(&v42, __p);
        v5 = (std::__shared_weak_count_vtbl *)__p[0];
        v6 = __p[1];
        v19[0] = __p[0];
        v19[1] = __p[1];
        v7 = (std::__shared_weak_count *)operator new(0x28uLL);
        break;
      case 11:
        v42 = a2;
        v43 = a1;
        sub_20AF6E618(&v42, __p);
        v5 = (std::__shared_weak_count_vtbl *)__p[0];
        v6 = __p[1];
        v19[0] = __p[0];
        v19[1] = __p[1];
        v7 = (std::__shared_weak_count *)operator new(0x28uLL);
        break;
      case 12:
        v42 = a2;
        v43 = a1;
        sub_20AF6E6CC(&v42, __p);
        v5 = (std::__shared_weak_count_vtbl *)__p[0];
        v6 = __p[1];
        v19[0] = __p[0];
        v19[1] = __p[1];
        v7 = (std::__shared_weak_count *)operator new(0x28uLL);
        break;
      default:
        sub_20B521E58(a3);
    }
    v11 = v7;
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BA50;
    v7[1].__vftable = v5;
    v7[1].__shared_owners_ = (uint64_t)v6;
    v18 = v7;
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_QWORD *)a4 = v7 + 1;
    *(_QWORD *)(a4 + 8) = v7;
    *(_BYTE *)(a4 + 120) = 1;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v18)
    {
      v16 = (unint64_t *)&v18->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else if (a2)
  {
    sub_20AF4AD58("data pointer is null but num_values is ", (unint64_t *)&v41);
    if (SHIBYTE(v20) < 0)
    {
      sub_20AEC60F4(__dst, v19[0], (unint64_t)v19[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      v22 = v20;
    }
    v23 = 1;
    LOBYTE(v24) = 0;
    v28 = 0;
    v29 = 1;
    sub_20AECCC3C(0xAu, (__int128 *)__dst, (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v40)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v9 = v33;
      if (v33)
      {
        *(_OWORD *)(a4 + 16) = v31;
        *(_QWORD *)(a4 + 32) = v32;
        v32 = 0;
        v31 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v39)
      {
        v10 = v36;
        *(_QWORD *)(a4 + 64) = v35;
        *(_OWORD *)(a4 + 48) = v34;
        v34 = 0uLL;
        *(_QWORD *)(a4 + 72) = v10;
        *(_OWORD *)(a4 + 80) = v37;
        *(_QWORD *)(a4 + 96) = v38;
        v35 = 0;
        v37 = 0uLL;
        v38 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v9 && SHIBYTE(v32) < 0)
        operator delete((void *)v31);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    if (v29)
    {
      if (v28)
      {
        if (v27 < 0)
          operator delete(v26);
        if (v25 < 0)
          operator delete(v24);
      }
      if (v23 && SHIBYTE(v22) < 0)
        operator delete(__dst[0]);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
  }
  else
  {
    v8 = (char *)operator new(0x28uLL);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = &off_24C40BA50;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v31 = 0;
    sub_20B43C0EC(v19, 7, (uint64_t)__p);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)v19;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_QWORD *)a4 = v8 + 24;
    *(_QWORD *)(a4 + 8) = v8;
    *(_BYTE *)(a4 + 120) = 1;
  }
}

void sub_20B08DF04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20AEC147C((uint64_t)&a11);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B08DF44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B08DF90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B08DFA4(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unsigned __int8 **v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  __int128 v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t *v24;
  unint64_t v25;
  __int128 v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  uint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  BOOL v42;
  uint64_t v43;
  unint64_t *v44;
  unint64_t v45;
  __int128 v46;
  unint64_t *v47;
  unint64_t v48;
  unint64_t *v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  uint64_t v53;
  unint64_t *v54;
  unint64_t v55;
  __int128 v56;
  unint64_t *v57;
  unint64_t v58;
  unint64_t *v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v62;
  uint64_t v63;
  unint64_t *v64;
  unint64_t v65;
  __int128 v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t *v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  uint64_t v73;
  unint64_t *v74;
  unint64_t v75;
  __int128 v76;
  unint64_t *v77;
  unint64_t v78;
  unint64_t *v79;
  uint64_t v80;
  unint64_t v81;
  BOOL v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  unint64_t *v87;
  unint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  unint64_t v91;
  BOOL v92;
  uint64_t v93;
  unint64_t *v94;
  unint64_t v95;
  __int128 v96;
  unint64_t *v97;
  unint64_t v98;
  unint64_t *v99;
  uint64_t v100;
  unint64_t v101;
  BOOL v102;
  uint64_t v103;
  unint64_t *v104;
  unint64_t v105;
  __int128 v106;
  unint64_t *v107;
  unint64_t v108;
  unint64_t *v109;
  std::__shared_weak_count *v110;
  unint64_t *v111;
  unint64_t v112;
  __int128 v113;
  __int128 v114;
  __int128 v115[33];
  void (*v116)(int);
  unsigned __int8 **v117;
  uint64_t v118;
  uint64_t v119;

  v119 = *MEMORY[0x24BDAC8D0];
  v116 = 0;
  v117 = 0;
  v118 = 0;
  sub_20B43C0EC(&v114, 7, (uint64_t)&v116);
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
  v113 = v114;
  if (v116)
  {
    v117 = (unsigned __int8 **)v116;
    operator delete(v116);
  }
  v7 = *(unsigned __int8 ***)a1;
  switch(***(_BYTE ***)a1)
  {
    case 0:
      sub_20B43D624(*(unsigned __int8 ***)a1, 0);
      v9 = *((_QWORD *)*v7 + 5);
      v8 = *((_QWORD *)*v7 + 6);
      if (v8)
        v10 = 1;
      else
        v10 = v9 == 0;
      if (!v10
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_209;
      }
      v11 = *(_QWORD *)(a1 + 8);
      v117 = *(unsigned __int8 ***)a1;
      v118 = v11;
      if (v11)
      {
        v12 = (unint64_t *)(v11 + 8);
        do
          v13 = __ldxr(v12);
        while (__stxr(v13 + 1, v12));
      }
      v116 = sub_20B090584;
      sub_20B43CBE4(&v114, 0, (void (**)(uint64_t))&v116, v9, v8);
      if (v116)
        v116(0);
      v14 = v114;
      v114 = 0uLL;
      v113 = v14;
      if (v6)
      {
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v16 = __ldaxr(p_shared_owners);
        while (__stlxr(v16 - 1, p_shared_owners));
        if (!v16)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_203;
      v18 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      break;
    case 1:
      sub_20B43D624(*(unsigned __int8 ***)a1, 1);
      v51 = *((_QWORD *)*v7 + 5);
      v50 = *((_QWORD *)*v7 + 6);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 2;
      if (v52
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_209;
      }
      v53 = *(_QWORD *)(a1 + 8);
      v117 = *(unsigned __int8 ***)a1;
      v118 = v53;
      if (v53)
      {
        v54 = (unint64_t *)(v53 + 8);
        do
          v55 = __ldxr(v54);
        while (__stxr(v55 + 1, v54));
      }
      v116 = sub_20B090584;
      sub_20B43CE28(&v114, 1, (void (**)(uint64_t))&v116, v51 >> 1, v50);
      if (v116)
        v116(0);
      v56 = v114;
      v114 = 0uLL;
      v113 = v56;
      if (v6)
      {
        v57 = (unint64_t *)&v6->__shared_owners_;
        do
          v58 = __ldaxr(v57);
        while (__stlxr(v58 - 1, v57));
        if (!v58)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_203;
      v59 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v19 = __ldaxr(v59);
      while (__stlxr(v19 - 1, v59));
      break;
    case 2:
      sub_20B43D624(*(unsigned __int8 ***)a1, 2);
      v71 = *((_QWORD *)*v7 + 5);
      v70 = *((_QWORD *)*v7 + 6);
      if (v70)
        v72 = 0;
      else
        v72 = v71 >= 4;
      if (v72
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_209;
      }
      v73 = *(_QWORD *)(a1 + 8);
      v117 = *(unsigned __int8 ***)a1;
      v118 = v73;
      if (v73)
      {
        v74 = (unint64_t *)(v73 + 8);
        do
          v75 = __ldxr(v74);
        while (__stxr(v75 + 1, v74));
      }
      v116 = sub_20B090584;
      sub_20B43D070(&v114, 2, (void (**)(uint64_t))&v116, v71 >> 2, v70);
      if (v116)
        v116(0);
      v76 = v114;
      v114 = 0uLL;
      v113 = v76;
      if (v6)
      {
        v77 = (unint64_t *)&v6->__shared_owners_;
        do
          v78 = __ldaxr(v77);
        while (__stlxr(v78 - 1, v77));
        if (!v78)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_203;
      v79 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v19 = __ldaxr(v79);
      while (__stlxr(v19 - 1, v79));
      break;
    case 3:
      sub_20B43D624(*(unsigned __int8 ***)a1, 3);
      v91 = *((_QWORD *)*v7 + 5);
      v90 = *((_QWORD *)*v7 + 6);
      if (v90)
        v92 = 0;
      else
        v92 = v91 >= 8;
      if (v92
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_209;
      }
      v93 = *(_QWORD *)(a1 + 8);
      v117 = *(unsigned __int8 ***)a1;
      v118 = v93;
      if (v93)
      {
        v94 = (unint64_t *)(v93 + 8);
        do
          v95 = __ldxr(v94);
        while (__stxr(v95 + 1, v94));
      }
      v116 = sub_20B090584;
      sub_20B43D2B8(&v114, 3, (void (**)(uint64_t))&v116, v91 >> 3, v90);
      if (v116)
        v116(0);
      v96 = v114;
      v114 = 0uLL;
      v113 = v96;
      if (v6)
      {
        v97 = (unint64_t *)&v6->__shared_owners_;
        do
          v98 = __ldaxr(v97);
        while (__stlxr(v98 - 1, v97));
        if (!v98)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_203;
      v99 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v19 = __ldaxr(v99);
      while (__stlxr(v19 - 1, v99));
      break;
    case 5:
      sub_20B43D624(*(unsigned __int8 ***)a1, 5);
      v41 = *((_QWORD *)*v7 + 5);
      v40 = *((_QWORD *)*v7 + 6);
      if (v40)
        v42 = 1;
      else
        v42 = v41 == 0;
      if (!v42
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_209;
      }
      v43 = *(_QWORD *)(a1 + 8);
      v117 = *(unsigned __int8 ***)a1;
      v118 = v43;
      if (v43)
      {
        v44 = (unint64_t *)(v43 + 8);
        do
          v45 = __ldxr(v44);
        while (__stxr(v45 + 1, v44));
      }
      v116 = sub_20B090584;
      sub_20B43CAC4(&v114, 5, (void (**)(uint64_t))&v116, v41, v40);
      if (v116)
        v116(0);
      v46 = v114;
      v114 = 0uLL;
      v113 = v46;
      if (v6)
      {
        v47 = (unint64_t *)&v6->__shared_owners_;
        do
          v48 = __ldaxr(v47);
        while (__stlxr(v48 - 1, v47));
        if (!v48)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_203;
      v49 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v19 = __ldaxr(v49);
      while (__stlxr(v19 - 1, v49));
      break;
    case 6:
      sub_20B43D624(*(unsigned __int8 ***)a1, 6);
      v61 = *((_QWORD *)*v7 + 5);
      v60 = *((_QWORD *)*v7 + 6);
      if (v60)
        v62 = 0;
      else
        v62 = v61 >= 2;
      if (v62
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_209;
      }
      v63 = *(_QWORD *)(a1 + 8);
      v117 = *(unsigned __int8 ***)a1;
      v118 = v63;
      if (v63)
      {
        v64 = (unint64_t *)(v63 + 8);
        do
          v65 = __ldxr(v64);
        while (__stxr(v65 + 1, v64));
      }
      v116 = sub_20B090584;
      sub_20B43CD04(&v114, 6, (void (**)(uint64_t))&v116, v61 >> 1, v60);
      if (v116)
        v116(0);
      v66 = v114;
      v114 = 0uLL;
      v113 = v66;
      if (v6)
      {
        v67 = (unint64_t *)&v6->__shared_owners_;
        do
          v68 = __ldaxr(v67);
        while (__stlxr(v68 - 1, v67));
        if (!v68)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_203;
      v69 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v19 = __ldaxr(v69);
      while (__stlxr(v19 - 1, v69));
      break;
    case 7:
      sub_20B43D624(*(unsigned __int8 ***)a1, 7);
      v101 = *((_QWORD *)*v7 + 5);
      v100 = *((_QWORD *)*v7 + 6);
      if (v100)
        v102 = 0;
      else
        v102 = v101 >= 4;
      if (v102
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_209;
      }
      v103 = *(_QWORD *)(a1 + 8);
      v117 = *(unsigned __int8 ***)a1;
      v118 = v103;
      if (v103)
      {
        v104 = (unint64_t *)(v103 + 8);
        do
          v105 = __ldxr(v104);
        while (__stxr(v105 + 1, v104));
      }
      v116 = sub_20B090584;
      sub_20B43CF4C(&v114, 7, (void (**)(uint64_t))&v116, v101 >> 2, v100);
      if (v116)
        v116(0);
      v106 = v114;
      v114 = 0uLL;
      v113 = v106;
      if (v6)
      {
        v107 = (unint64_t *)&v6->__shared_owners_;
        do
          v108 = __ldaxr(v107);
        while (__stlxr(v108 - 1, v107));
        if (!v108)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_203;
      v109 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v19 = __ldaxr(v109);
      while (__stlxr(v19 - 1, v109));
      break;
    case 8:
      sub_20B43D624(*(unsigned __int8 ***)a1, 8);
      v81 = *((_QWORD *)*v7 + 5);
      v80 = *((_QWORD *)*v7 + 6);
      if (v80)
        v82 = 0;
      else
        v82 = v81 >= 8;
      if (v82
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_209;
      }
      v83 = *(_QWORD *)(a1 + 8);
      v117 = *(unsigned __int8 ***)a1;
      v118 = v83;
      if (v83)
      {
        v84 = (unint64_t *)(v83 + 8);
        do
          v85 = __ldxr(v84);
        while (__stxr(v85 + 1, v84));
      }
      v116 = sub_20B090584;
      sub_20B43D194(&v114, 8, (void (**)(uint64_t))&v116, v81 >> 3, v80);
      if (v116)
        v116(0);
      v86 = v114;
      v114 = 0uLL;
      v113 = v86;
      if (v6)
      {
        v87 = (unint64_t *)&v6->__shared_owners_;
        do
          v88 = __ldaxr(v87);
        while (__stlxr(v88 - 1, v87));
        if (!v88)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_203;
      v89 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v19 = __ldaxr(v89);
      while (__stlxr(v19 - 1, v89));
      break;
    case 0xB:
      sub_20B43D624(*(unsigned __int8 ***)a1, 11);
      v31 = *((_QWORD *)*v7 + 5);
      v30 = *((_QWORD *)*v7 + 6);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 4;
      if (v32
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_209;
      }
      v33 = *(_QWORD *)(a1 + 8);
      v117 = *(unsigned __int8 ***)a1;
      v118 = v33;
      if (v33)
      {
        v34 = (unint64_t *)(v33 + 8);
        do
          v35 = __ldxr(v34);
        while (__stxr(v35 + 1, v34));
      }
      v116 = sub_20B090584;
      sub_20B43D3DC(&v114, 11, (void (**)(uint64_t))&v116, v31 >> 2, v30);
      if (v116)
        v116(0);
      v36 = v114;
      v114 = 0uLL;
      v113 = v36;
      if (v6)
      {
        v37 = (unint64_t *)&v6->__shared_owners_;
        do
          v38 = __ldaxr(v37);
        while (__stlxr(v38 - 1, v37));
        if (!v38)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_203;
      v39 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v19 = __ldaxr(v39);
      while (__stlxr(v19 - 1, v39));
      break;
    case 0xC:
      sub_20B43D624(*(unsigned __int8 ***)a1, 12);
      v21 = *((_QWORD *)*v7 + 5);
      v20 = *((_QWORD *)*v7 + 6);
      if (v20)
        v22 = 0;
      else
        v22 = v21 >= 8;
      if (v22
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_209:
        abort();
      }
      v23 = *(_QWORD *)(a1 + 8);
      v117 = *(unsigned __int8 ***)a1;
      v118 = v23;
      if (v23)
      {
        v24 = (unint64_t *)(v23 + 8);
        do
          v25 = __ldxr(v24);
        while (__stxr(v25 + 1, v24));
      }
      v116 = sub_20B090584;
      sub_20B43D500(&v114, 12, (void (**)(uint64_t))&v116, v21 >> 3, v20);
      if (v116)
        v116(0);
      v26 = v114;
      v114 = 0uLL;
      v113 = v26;
      if (v6)
      {
        v27 = (unint64_t *)&v6->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      v17 = (std::__shared_weak_count *)*((_QWORD *)&v114 + 1);
      if (!*((_QWORD *)&v114 + 1))
        goto LABEL_203;
      v29 = (unint64_t *)(*((_QWORD *)&v114 + 1) + 8);
      do
        v19 = __ldaxr(v29);
      while (__stlxr(v19 - 1, v29));
      break;
    default:
      sub_20B521E58(***(_BYTE ***)a1);
  }
  if (!v19)
  {
    ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
    std::__shared_weak_count::__release_weak(v17);
  }
LABEL_203:
  sub_20AF75748((uint64_t)&v113, a2, (uint64_t)v115);
  sub_20AF4BAD4(a3, 0, v115);
  *(_BYTE *)(a3 + 528) = 1;
  sub_20AED5474((uint64_t)v115);
  v110 = (std::__shared_weak_count *)*((_QWORD *)&v113 + 1);
  if (*((_QWORD *)&v113 + 1))
  {
    v111 = (unint64_t *)(*((_QWORD *)&v113 + 1) + 8);
    do
      v112 = __ldaxr(v111);
    while (__stlxr(v112 - 1, v111));
    if (!v112)
    {
      ((void (*)(std::__shared_weak_count *))v110->__on_zero_shared)(v110);
      std::__shared_weak_count::__release_weak(v110);
    }
  }
}

void sub_20B08EBF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B08EE20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unsigned __int8 **v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  void **v20;
  void **v21;
  void *v22;
  unsigned __int8 *v23;
  unsigned __int8 **v24;
  uint64_t v25;
  uint64_t v26;
  BOOL v27;
  unint64_t *v28;
  unint64_t v29;
  char *v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  unsigned __int8 v37;
  uint64_t v38;
  unint64_t v39;
  BOOL v40;
  unint64_t *v41;
  unint64_t v42;
  char *v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  unint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  BOOL v50;
  unint64_t *v51;
  unint64_t v52;
  char *v53;
  std::__shared_weak_count *v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  BOOL v60;
  unint64_t *v61;
  unint64_t v62;
  char *v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  BOOL v70;
  unint64_t *v71;
  unint64_t v72;
  char *v73;
  std::__shared_weak_count *v74;
  unint64_t *v75;
  unint64_t v76;
  unint64_t *v77;
  uint64_t v78;
  unint64_t v79;
  BOOL v80;
  unint64_t *v81;
  unint64_t v82;
  char *v83;
  std::__shared_weak_count *v84;
  unint64_t *v85;
  unint64_t v86;
  unint64_t *v87;
  uint64_t v88;
  unint64_t v89;
  BOOL v90;
  unint64_t *v91;
  unint64_t v92;
  char *v93;
  std::__shared_weak_count *v94;
  unint64_t *v95;
  unint64_t v96;
  unint64_t *v97;
  uint64_t v98;
  unint64_t v99;
  BOOL v100;
  unint64_t *v101;
  unint64_t v102;
  char *v103;
  std::__shared_weak_count *v104;
  unint64_t *v105;
  unint64_t v106;
  unint64_t *v107;
  uint64_t v108;
  unint64_t v109;
  BOOL v110;
  unint64_t *v111;
  unint64_t v112;
  char *v113;
  std::__shared_weak_count *v114;
  unint64_t *v115;
  unint64_t v116;
  unint64_t *v117;
  uint64_t v118;
  unint64_t v119;
  BOOL v120;
  unint64_t *v121;
  unint64_t v122;
  char *v123;
  std::__shared_weak_count *v124;
  unint64_t *v125;
  unint64_t v126;
  unint64_t *v127;
  std::__shared_weak_count *v128;
  unint64_t *v129;
  unint64_t v130;
  unint64_t *v131;
  unint64_t v132;
  unint64_t *v133;
  unint64_t v134;
  __int128 v135;
  void *v136;
  __int128 v137;
  char v138;
  void *v139[2];
  uint64_t v140;
  int v141;
  void *v142;
  void **v143;
  unsigned __int8 **v144;
  std::__shared_weak_count *v145;
  void *__dst[2];
  __int128 *v147;
  int v148;
  __int128 v149;
  __int128 __p;
  uint64_t v151;
  unsigned __int8 v152;
  __int128 v153;
  uint64_t v154;
  uint64_t v155;
  __int128 v156;
  uint64_t v157;
  char v158;
  char v159;
  uint64_t v160;

  v160 = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a1 + 424);
  v5 = *(std::__shared_weak_count **)(a1 + 432);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
  {
    v8 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F63E8, 0) != 0;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_11;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_11:
    if (v8)
      goto LABEL_12;
LABEL_21:
    v11 = 0;
    v144 = 0;
    v145 = 0;
    goto LABEL_22;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v8)
    goto LABEL_21;
LABEL_12:
  v12 = *(unsigned __int8 ***)(a1 + 424);
  v11 = *(std::__shared_weak_count **)(a1 + 432);
  if (!v11)
  {
    v144 = *(unsigned __int8 ***)(a1 + 424);
    v145 = 0;
    if (v12)
    {
      v135 = 0uLL;
      __dst[0] = v12;
      __dst[1] = 0;
      goto LABEL_58;
    }
    v11 = 0;
    v37 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v37 & 1) != 0)
    {
LABEL_23:
      if (byte_25463CDDF < 0)
      {
        sub_20AEC60F4(__dst, (void *)xmmword_25463CDC8, *((unint64_t *)&xmmword_25463CDC8 + 1));
      }
      else
      {
        *(_OWORD *)__dst = xmmword_25463CDC8;
        v147 = (__int128 *)unk_25463CDD8;
      }
      v148 = dword_25463CDE0;
      sub_20AF4BC0C(&v142, (uint64_t)__dst, 1uLL);
      if (*(char *)(a1 + 23) < 0)
      {
        sub_20AEC60F4(v139, *(void **)a1, *(_QWORD *)(a1 + 8));
      }
      else
      {
        *(_OWORD *)v139 = *(_OWORD *)a1;
        v140 = *(_QWORD *)(a1 + 16);
      }
      v141 = *(_DWORD *)(a1 + 24);
      v136 = operator new(0x20uLL);
      v137 = xmmword_20B5C7C80;
      strcpy((char *)v136, "cannot return data as VZNumbers");
      v138 = 1;
      sub_20B099ED4((uint64_t *)&v142, (uint64_t)v139, (uint64_t)&v136, (uint64_t)&v149);
      *(_OWORD *)a2 = v149;
      *(_BYTE *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 112) = 0;
      if (v159)
      {
        *(_BYTE *)(a2 + 40) = 0;
        v18 = v152;
        if (v152)
        {
          *(_OWORD *)(a2 + 16) = __p;
          *(_QWORD *)(a2 + 32) = v151;
          v151 = 0;
          __p = 0uLL;
          *(_BYTE *)(a2 + 40) = 1;
        }
        *(_BYTE *)(a2 + 48) = 0;
        *(_BYTE *)(a2 + 104) = 0;
        if (v158)
        {
          v19 = v155;
          *(_QWORD *)(a2 + 64) = v154;
          *(_OWORD *)(a2 + 48) = v153;
          v153 = 0uLL;
          *(_QWORD *)(a2 + 72) = v19;
          *(_OWORD *)(a2 + 80) = v156;
          *(_QWORD *)(a2 + 96) = v157;
          v154 = 0;
          v156 = 0uLL;
          v157 = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        *(_BYTE *)(a2 + 112) = 1;
        *(_BYTE *)(a2 + 120) = 0;
        if (v18 && SHIBYTE(v151) < 0)
          operator delete((void *)__p);
        if (!v138)
        {
LABEL_42:
          if (SHIBYTE(v140) < 0)
            operator delete(v139[0]);
          v20 = (void **)v142;
          if (v142)
          {
            v21 = v143;
            v22 = v142;
            if (v143 != v142)
            {
              do
              {
                if (*((char *)v21 - 9) < 0)
                  operator delete(*(v21 - 4));
                v21 -= 4;
              }
              while (v21 != v20);
              v22 = v142;
            }
            v143 = v20;
            operator delete(v22);
          }
          if (SHIBYTE(v147) < 0)
            operator delete(__dst[0]);
          if (v11)
            goto LABEL_272;
          return;
        }
      }
      else
      {
        *(_BYTE *)(a2 + 120) = 0;
        if (!v138)
          goto LABEL_42;
      }
      if (SHIBYTE(v137) < 0)
        operator delete(v136);
      goto LABEL_42;
    }
LABEL_79:
    if (__cxa_guard_acquire(&qword_25463CF48))
    {
      *(_OWORD *)v139 = xmmword_20B5B0AE0;
      sub_20B1DFBA8((uint64_t *)v139);
      __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF48);
    }
    goto LABEL_23;
  }
  v13 = (unint64_t *)&v11->__shared_owners_;
  do
    v14 = __ldxr(v13);
  while (__stxr(v14 + 1, v13));
  v144 = v12;
  v145 = v11;
  if (!v12)
  {
LABEL_22:
    v17 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v17 & 1) != 0)
      goto LABEL_23;
    goto LABEL_79;
  }
  do
    v15 = __ldxr(v13);
  while (__stxr(v15 + 1, v13));
  v135 = 0uLL;
  __dst[0] = v12;
  __dst[1] = v11;
  do
    v16 = __ldxr(v13);
  while (__stxr(v16 + 1, v13));
LABEL_58:
  v24 = v12 + 1;
  v23 = v12[1];
  v147 = &v135;
  switch(*v23)
  {
    case 0u:
      sub_20B43D624(v12 + 1, 0);
      v26 = *((_QWORD *)*v24 + 5);
      v25 = *((_QWORD *)*v24 + 6);
      if (v25)
        v27 = 1;
      else
        v27 = v26 == 0;
      if (!v27
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_277;
      }
      *((_QWORD *)&v149 + 1) = v12;
      *(_QWORD *)&__p = v11;
      if (v11)
      {
        v28 = (unint64_t *)&v11->__shared_owners_;
        do
          v29 = __ldxr(v28);
        while (__stxr(v29 + 1, v28));
      }
      *(_QWORD *)&v149 = sub_20B09041C;
      sub_20B43CBE4(v139, 0, (void (**)(uint64_t))&v149, v26, v25);
      if ((_QWORD)v149)
        ((void (*)(int))v149)(0);
      v30 = (char *)operator new(0x28uLL);
      *((_QWORD *)v30 + 1) = 0;
      *((_QWORD *)v30 + 2) = 0;
      *(_OWORD *)(v30 + 24) = *(_OWORD *)v139;
      *(_QWORD *)v30 = &off_24C40BA50;
      v139[0] = 0;
      v139[1] = 0;
      v31 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      *(_QWORD *)&v135 = v30 + 24;
      *((_QWORD *)&v135 + 1) = v30;
      if (v31)
      {
        v32 = (unint64_t *)&v31->__shared_owners_;
        do
          v33 = __ldaxr(v32);
        while (__stlxr(v33 - 1, v32));
        if (!v33)
        {
          ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
          std::__shared_weak_count::__release_weak(v31);
        }
      }
      v34 = (std::__shared_weak_count *)v139[1];
      if (!v139[1])
        goto LABEL_261;
      v35 = (unint64_t *)((char *)v139[1] + 8);
      do
        v36 = __ldaxr(v35);
      while (__stlxr(v36 - 1, v35));
      break;
    case 1u:
      sub_20B43D624(v12 + 1, 1);
      v69 = *((_QWORD *)*v24 + 5);
      v68 = *((_QWORD *)*v24 + 6);
      if (v68)
        v70 = 0;
      else
        v70 = v69 >= 2;
      if (v70
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_277;
      }
      *((_QWORD *)&v149 + 1) = v12;
      *(_QWORD *)&__p = v11;
      if (v11)
      {
        v71 = (unint64_t *)&v11->__shared_owners_;
        do
          v72 = __ldxr(v71);
        while (__stxr(v72 + 1, v71));
      }
      *(_QWORD *)&v149 = sub_20B09041C;
      sub_20B43CE28(v139, 1, (void (**)(uint64_t))&v149, v69 >> 1, v68);
      if ((_QWORD)v149)
        ((void (*)(int))v149)(0);
      v73 = (char *)operator new(0x28uLL);
      *((_QWORD *)v73 + 1) = 0;
      *((_QWORD *)v73 + 2) = 0;
      *(_OWORD *)(v73 + 24) = *(_OWORD *)v139;
      *(_QWORD *)v73 = &off_24C40BA50;
      v139[0] = 0;
      v139[1] = 0;
      v74 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      *(_QWORD *)&v135 = v73 + 24;
      *((_QWORD *)&v135 + 1) = v73;
      if (v74)
      {
        v75 = (unint64_t *)&v74->__shared_owners_;
        do
          v76 = __ldaxr(v75);
        while (__stlxr(v76 - 1, v75));
        if (!v76)
        {
          ((void (*)(std::__shared_weak_count *))v74->__on_zero_shared)(v74);
          std::__shared_weak_count::__release_weak(v74);
        }
      }
      v34 = (std::__shared_weak_count *)v139[1];
      if (!v139[1])
        goto LABEL_261;
      v77 = (unint64_t *)((char *)v139[1] + 8);
      do
        v36 = __ldaxr(v77);
      while (__stlxr(v36 - 1, v77));
      break;
    case 2u:
      sub_20B43D624(v12 + 1, 2);
      v89 = *((_QWORD *)*v24 + 5);
      v88 = *((_QWORD *)*v24 + 6);
      if (v88)
        v90 = 0;
      else
        v90 = v89 >= 4;
      if (v90
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_277;
      }
      *((_QWORD *)&v149 + 1) = v12;
      *(_QWORD *)&__p = v11;
      if (v11)
      {
        v91 = (unint64_t *)&v11->__shared_owners_;
        do
          v92 = __ldxr(v91);
        while (__stxr(v92 + 1, v91));
      }
      *(_QWORD *)&v149 = sub_20B09041C;
      sub_20B43D070(v139, 2, (void (**)(uint64_t))&v149, v89 >> 2, v88);
      if ((_QWORD)v149)
        ((void (*)(int))v149)(0);
      v93 = (char *)operator new(0x28uLL);
      *((_QWORD *)v93 + 1) = 0;
      *((_QWORD *)v93 + 2) = 0;
      *(_OWORD *)(v93 + 24) = *(_OWORD *)v139;
      *(_QWORD *)v93 = &off_24C40BA50;
      v139[0] = 0;
      v139[1] = 0;
      v94 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      *(_QWORD *)&v135 = v93 + 24;
      *((_QWORD *)&v135 + 1) = v93;
      if (v94)
      {
        v95 = (unint64_t *)&v94->__shared_owners_;
        do
          v96 = __ldaxr(v95);
        while (__stlxr(v96 - 1, v95));
        if (!v96)
        {
          ((void (*)(std::__shared_weak_count *))v94->__on_zero_shared)(v94);
          std::__shared_weak_count::__release_weak(v94);
        }
      }
      v34 = (std::__shared_weak_count *)v139[1];
      if (!v139[1])
        goto LABEL_261;
      v97 = (unint64_t *)((char *)v139[1] + 8);
      do
        v36 = __ldaxr(v97);
      while (__stlxr(v36 - 1, v97));
      break;
    case 3u:
      sub_20B43D624(v12 + 1, 3);
      v109 = *((_QWORD *)*v24 + 5);
      v108 = *((_QWORD *)*v24 + 6);
      if (v108)
        v110 = 0;
      else
        v110 = v109 >= 8;
      if (v110
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_277;
      }
      *((_QWORD *)&v149 + 1) = v12;
      *(_QWORD *)&__p = v11;
      if (v11)
      {
        v111 = (unint64_t *)&v11->__shared_owners_;
        do
          v112 = __ldxr(v111);
        while (__stxr(v112 + 1, v111));
      }
      *(_QWORD *)&v149 = sub_20B09041C;
      sub_20B43D2B8(v139, 3, (void (**)(uint64_t))&v149, v109 >> 3, v108);
      if ((_QWORD)v149)
        ((void (*)(int))v149)(0);
      v113 = (char *)operator new(0x28uLL);
      *((_QWORD *)v113 + 1) = 0;
      *((_QWORD *)v113 + 2) = 0;
      *(_OWORD *)(v113 + 24) = *(_OWORD *)v139;
      *(_QWORD *)v113 = &off_24C40BA50;
      v139[0] = 0;
      v139[1] = 0;
      v114 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      *(_QWORD *)&v135 = v113 + 24;
      *((_QWORD *)&v135 + 1) = v113;
      if (v114)
      {
        v115 = (unint64_t *)&v114->__shared_owners_;
        do
          v116 = __ldaxr(v115);
        while (__stlxr(v116 - 1, v115));
        if (!v116)
        {
          ((void (*)(std::__shared_weak_count *))v114->__on_zero_shared)(v114);
          std::__shared_weak_count::__release_weak(v114);
        }
      }
      v34 = (std::__shared_weak_count *)v139[1];
      if (!v139[1])
        goto LABEL_261;
      v117 = (unint64_t *)((char *)v139[1] + 8);
      do
        v36 = __ldaxr(v117);
      while (__stlxr(v36 - 1, v117));
      break;
    case 5u:
      sub_20B43D624(v12 + 1, 5);
      v59 = *((_QWORD *)*v24 + 5);
      v58 = *((_QWORD *)*v24 + 6);
      if (v58)
        v60 = 1;
      else
        v60 = v59 == 0;
      if (!v60
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_277;
      }
      *((_QWORD *)&v149 + 1) = v12;
      *(_QWORD *)&__p = v11;
      if (v11)
      {
        v61 = (unint64_t *)&v11->__shared_owners_;
        do
          v62 = __ldxr(v61);
        while (__stxr(v62 + 1, v61));
      }
      *(_QWORD *)&v149 = sub_20B09041C;
      sub_20B43CAC4(v139, 5, (void (**)(uint64_t))&v149, v59, v58);
      if ((_QWORD)v149)
        ((void (*)(int))v149)(0);
      v63 = (char *)operator new(0x28uLL);
      *((_QWORD *)v63 + 1) = 0;
      *((_QWORD *)v63 + 2) = 0;
      *(_OWORD *)(v63 + 24) = *(_OWORD *)v139;
      *(_QWORD *)v63 = &off_24C40BA50;
      v139[0] = 0;
      v139[1] = 0;
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      *(_QWORD *)&v135 = v63 + 24;
      *((_QWORD *)&v135 + 1) = v63;
      if (v64)
      {
        v65 = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(v65);
        while (__stlxr(v66 - 1, v65));
        if (!v66)
        {
          ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
          std::__shared_weak_count::__release_weak(v64);
        }
      }
      v34 = (std::__shared_weak_count *)v139[1];
      if (!v139[1])
        goto LABEL_261;
      v67 = (unint64_t *)((char *)v139[1] + 8);
      do
        v36 = __ldaxr(v67);
      while (__stlxr(v36 - 1, v67));
      break;
    case 6u:
      sub_20B43D624(v12 + 1, 6);
      v79 = *((_QWORD *)*v24 + 5);
      v78 = *((_QWORD *)*v24 + 6);
      if (v78)
        v80 = 0;
      else
        v80 = v79 >= 2;
      if (v80
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_277;
      }
      *((_QWORD *)&v149 + 1) = v12;
      *(_QWORD *)&__p = v11;
      if (v11)
      {
        v81 = (unint64_t *)&v11->__shared_owners_;
        do
          v82 = __ldxr(v81);
        while (__stxr(v82 + 1, v81));
      }
      *(_QWORD *)&v149 = sub_20B09041C;
      sub_20B43CD04(v139, 6, (void (**)(uint64_t))&v149, v79 >> 1, v78);
      if ((_QWORD)v149)
        ((void (*)(int))v149)(0);
      v83 = (char *)operator new(0x28uLL);
      *((_QWORD *)v83 + 1) = 0;
      *((_QWORD *)v83 + 2) = 0;
      *(_OWORD *)(v83 + 24) = *(_OWORD *)v139;
      *(_QWORD *)v83 = &off_24C40BA50;
      v139[0] = 0;
      v139[1] = 0;
      v84 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      *(_QWORD *)&v135 = v83 + 24;
      *((_QWORD *)&v135 + 1) = v83;
      if (v84)
      {
        v85 = (unint64_t *)&v84->__shared_owners_;
        do
          v86 = __ldaxr(v85);
        while (__stlxr(v86 - 1, v85));
        if (!v86)
        {
          ((void (*)(std::__shared_weak_count *))v84->__on_zero_shared)(v84);
          std::__shared_weak_count::__release_weak(v84);
        }
      }
      v34 = (std::__shared_weak_count *)v139[1];
      if (!v139[1])
        goto LABEL_261;
      v87 = (unint64_t *)((char *)v139[1] + 8);
      do
        v36 = __ldaxr(v87);
      while (__stlxr(v36 - 1, v87));
      break;
    case 7u:
      sub_20B43D624(v12 + 1, 7);
      v119 = *((_QWORD *)*v24 + 5);
      v118 = *((_QWORD *)*v24 + 6);
      if (v118)
        v120 = 0;
      else
        v120 = v119 >= 4;
      if (v120
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_277;
      }
      *((_QWORD *)&v149 + 1) = v12;
      *(_QWORD *)&__p = v11;
      if (v11)
      {
        v121 = (unint64_t *)&v11->__shared_owners_;
        do
          v122 = __ldxr(v121);
        while (__stxr(v122 + 1, v121));
      }
      *(_QWORD *)&v149 = sub_20B09041C;
      sub_20B43CF4C(v139, 7, (void (**)(uint64_t))&v149, v119 >> 2, v118);
      if ((_QWORD)v149)
        ((void (*)(int))v149)(0);
      v123 = (char *)operator new(0x28uLL);
      *((_QWORD *)v123 + 1) = 0;
      *((_QWORD *)v123 + 2) = 0;
      *(_OWORD *)(v123 + 24) = *(_OWORD *)v139;
      *(_QWORD *)v123 = &off_24C40BA50;
      v139[0] = 0;
      v139[1] = 0;
      v124 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      *(_QWORD *)&v135 = v123 + 24;
      *((_QWORD *)&v135 + 1) = v123;
      if (v124)
      {
        v125 = (unint64_t *)&v124->__shared_owners_;
        do
          v126 = __ldaxr(v125);
        while (__stlxr(v126 - 1, v125));
        if (!v126)
        {
          ((void (*)(std::__shared_weak_count *))v124->__on_zero_shared)(v124);
          std::__shared_weak_count::__release_weak(v124);
        }
      }
      v34 = (std::__shared_weak_count *)v139[1];
      if (!v139[1])
        goto LABEL_261;
      v127 = (unint64_t *)((char *)v139[1] + 8);
      do
        v36 = __ldaxr(v127);
      while (__stlxr(v36 - 1, v127));
      break;
    case 8u:
      sub_20B43D624(v12 + 1, 8);
      v99 = *((_QWORD *)*v24 + 5);
      v98 = *((_QWORD *)*v24 + 6);
      if (v98)
        v100 = 0;
      else
        v100 = v99 >= 8;
      if (v100
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_277;
      }
      *((_QWORD *)&v149 + 1) = v12;
      *(_QWORD *)&__p = v11;
      if (v11)
      {
        v101 = (unint64_t *)&v11->__shared_owners_;
        do
          v102 = __ldxr(v101);
        while (__stxr(v102 + 1, v101));
      }
      *(_QWORD *)&v149 = sub_20B09041C;
      sub_20B43D194(v139, 8, (void (**)(uint64_t))&v149, v99 >> 3, v98);
      if ((_QWORD)v149)
        ((void (*)(int))v149)(0);
      v103 = (char *)operator new(0x28uLL);
      *((_QWORD *)v103 + 1) = 0;
      *((_QWORD *)v103 + 2) = 0;
      *(_OWORD *)(v103 + 24) = *(_OWORD *)v139;
      *(_QWORD *)v103 = &off_24C40BA50;
      v139[0] = 0;
      v139[1] = 0;
      v104 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      *(_QWORD *)&v135 = v103 + 24;
      *((_QWORD *)&v135 + 1) = v103;
      if (v104)
      {
        v105 = (unint64_t *)&v104->__shared_owners_;
        do
          v106 = __ldaxr(v105);
        while (__stlxr(v106 - 1, v105));
        if (!v106)
        {
          ((void (*)(std::__shared_weak_count *))v104->__on_zero_shared)(v104);
          std::__shared_weak_count::__release_weak(v104);
        }
      }
      v34 = (std::__shared_weak_count *)v139[1];
      if (!v139[1])
        goto LABEL_261;
      v107 = (unint64_t *)((char *)v139[1] + 8);
      do
        v36 = __ldaxr(v107);
      while (__stlxr(v36 - 1, v107));
      break;
    case 0xBu:
      sub_20B43D624(v12 + 1, 11);
      v49 = *((_QWORD *)*v24 + 5);
      v48 = *((_QWORD *)*v24 + 6);
      if (v48)
        v50 = 0;
      else
        v50 = v49 >= 4;
      if (v50
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_277;
      }
      *((_QWORD *)&v149 + 1) = v12;
      *(_QWORD *)&__p = v11;
      if (v11)
      {
        v51 = (unint64_t *)&v11->__shared_owners_;
        do
          v52 = __ldxr(v51);
        while (__stxr(v52 + 1, v51));
      }
      *(_QWORD *)&v149 = sub_20B09041C;
      sub_20B43D3DC(v139, 11, (void (**)(uint64_t))&v149, v49 >> 2, v48);
      if ((_QWORD)v149)
        ((void (*)(int))v149)(0);
      v53 = (char *)operator new(0x28uLL);
      *((_QWORD *)v53 + 1) = 0;
      *((_QWORD *)v53 + 2) = 0;
      *(_OWORD *)(v53 + 24) = *(_OWORD *)v139;
      *(_QWORD *)v53 = &off_24C40BA50;
      v139[0] = 0;
      v139[1] = 0;
      v54 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      *(_QWORD *)&v135 = v53 + 24;
      *((_QWORD *)&v135 + 1) = v53;
      if (v54)
      {
        v55 = (unint64_t *)&v54->__shared_owners_;
        do
          v56 = __ldaxr(v55);
        while (__stlxr(v56 - 1, v55));
        if (!v56)
        {
          ((void (*)(std::__shared_weak_count *))v54->__on_zero_shared)(v54);
          std::__shared_weak_count::__release_weak(v54);
        }
      }
      v34 = (std::__shared_weak_count *)v139[1];
      if (!v139[1])
        goto LABEL_261;
      v57 = (unint64_t *)((char *)v139[1] + 8);
      do
        v36 = __ldaxr(v57);
      while (__stlxr(v36 - 1, v57));
      break;
    case 0xCu:
      sub_20B43D624(v12 + 1, 12);
      v39 = *((_QWORD *)*v24 + 5);
      v38 = *((_QWORD *)*v24 + 6);
      if (v38)
        v40 = 0;
      else
        v40 = v39 >= 8;
      if (v40
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
LABEL_277:
        abort();
      }
      *((_QWORD *)&v149 + 1) = v12;
      *(_QWORD *)&__p = v11;
      if (v11)
      {
        v41 = (unint64_t *)&v11->__shared_owners_;
        do
          v42 = __ldxr(v41);
        while (__stxr(v42 + 1, v41));
      }
      *(_QWORD *)&v149 = sub_20B09041C;
      sub_20B43D500(v139, 12, (void (**)(uint64_t))&v149, v39 >> 3, v38);
      if ((_QWORD)v149)
        ((void (*)(int))v149)(0);
      v43 = (char *)operator new(0x28uLL);
      *((_QWORD *)v43 + 1) = 0;
      *((_QWORD *)v43 + 2) = 0;
      *(_OWORD *)(v43 + 24) = *(_OWORD *)v139;
      *(_QWORD *)v43 = &off_24C40BA50;
      v139[0] = 0;
      v139[1] = 0;
      v44 = (std::__shared_weak_count *)*((_QWORD *)&v135 + 1);
      *(_QWORD *)&v135 = v43 + 24;
      *((_QWORD *)&v135 + 1) = v43;
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
      v34 = (std::__shared_weak_count *)v139[1];
      if (!v139[1])
        goto LABEL_261;
      v47 = (unint64_t *)((char *)v139[1] + 8);
      do
        v36 = __ldaxr(v47);
      while (__stlxr(v36 - 1, v47));
      break;
    default:
      sub_20B521E58(*v23);
  }
  if (!v36)
  {
    ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
    std::__shared_weak_count::__release_weak(v34);
  }
LABEL_261:
  v128 = (std::__shared_weak_count *)__dst[1];
  if (__dst[1])
  {
    v129 = (unint64_t *)((char *)__dst[1] + 8);
    do
      v130 = __ldaxr(v129);
    while (__stlxr(v130 - 1, v129));
    if (!v130)
    {
      ((void (*)(std::__shared_weak_count *))v128->__on_zero_shared)(v128);
      std::__shared_weak_count::__release_weak(v128);
    }
  }
  *(_OWORD *)a2 = v135;
  v135 = 0uLL;
  *(_BYTE *)(a2 + 120) = 1;
  if (v11)
  {
    v131 = (unint64_t *)&v11->__shared_owners_;
    do
      v132 = __ldaxr(v131);
    while (__stlxr(v132 - 1, v131));
    if (!v132)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
  v11 = v145;
  if (v145)
  {
LABEL_272:
    v133 = (unint64_t *)&v11->__shared_owners_;
    do
      v134 = __ldaxr(v133);
    while (__stlxr(v134 - 1, v133));
    if (!v134)
    {
      ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
      std::__shared_weak_count::__release_weak(v11);
    }
  }
}

void sub_20B08FF68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40)
{
  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20B090380(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BA50;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B090390(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BA50;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0903C0(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20B09041C(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B090450()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B09049C(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20B09041C;
  return result;
}

__n128 sub_20B0904D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20B09041C;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20B090504(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con7NumbersENS3_7PackageELj2EvEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con7NumbersENS3_7PackageELj2EvEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con7NumbersENS3_7PackageELj2EvEEEE"))return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con7NumbersENS3_7PackageELj2EvEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5E32CC)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_20B090584(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B0905B8()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B090604(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20B090584;
  return result;
}

__n128 sub_20B090640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20B090584;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20B09066C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrIKN4cv3d3kit3con7NumbersEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3con7NumbersEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrIKN4cv3d3kit3con7NumbersEEE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3con7NumbersEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5E3300)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_20B0906EC(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *v5;
  std::__shared_weak_count_vtbl *v6;
  char *v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19[2];
  uint64_t v20;
  void *__dst[2];
  uint64_t v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  void *__p[2];
  __int128 v31;
  uint64_t v32;
  unsigned __int8 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v41 = a2;
  if (a1)
  {
    switch(a3)
    {
      case 0:
        v42 = 2 * a2;
        v43 = a1;
        sub_20AF6C1F8(&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 1) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 1:
        v42 = 2 * a2;
        v43 = a1;
        sub_20AF6E11C((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 1) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 2:
        v42 = 2 * a2;
        v43 = a1;
        sub_20AF6E1E4((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 1) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 3:
        v42 = 2 * a2;
        v43 = a1;
        sub_20AF6E298((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 1) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 5:
        v42 = 2 * a2;
        v43 = a1;
        sub_20AF6E34C(&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 1) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 6:
        v42 = 2 * a2;
        v43 = a1;
        sub_20AF6E3FC((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 1) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 7:
        v42 = 2 * a2;
        v43 = a1;
        sub_20AF6E4B0((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 1) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 8:
        v42 = 2 * a2;
        v43 = a1;
        sub_20AF6E564((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 1) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 11:
        v42 = 2 * a2;
        v43 = a1;
        sub_20AF6E618((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 1) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 12:
        v42 = 2 * a2;
        v43 = a1;
        sub_20AF6E6CC((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if ((*((_BYTE *)__p[0] + 56) & 1) != 0
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      default:
        sub_20B521E58(a3);
    }
    v19[0] = v6;
    v19[1] = v5;
    v10 = (std::__shared_weak_count *)operator new(0x28uLL);
    v11 = v10;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BAC0;
    v10[1].__vftable = v6;
    v10[1].__shared_owners_ = (uint64_t)v5;
    v18 = v10;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_QWORD *)a4 = v10 + 1;
    *(_QWORD *)(a4 + 8) = v10;
    *(_BYTE *)(a4 + 120) = 1;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v18)
    {
      v16 = (unint64_t *)&v18->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else if (a2)
  {
    sub_20AF4AD58("data pointer is null but num_points is ", &v41);
    if (SHIBYTE(v20) < 0)
    {
      sub_20AEC60F4(__dst, v19[0], (unint64_t)v19[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      v22 = v20;
    }
    v23 = 1;
    LOBYTE(v24) = 0;
    v28 = 0;
    v29 = 1;
    sub_20AECCC3C(0xAu, (__int128 *)__dst, (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v40)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v8 = v33;
      if (v33)
      {
        *(_OWORD *)(a4 + 16) = v31;
        *(_QWORD *)(a4 + 32) = v32;
        v32 = 0;
        v31 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v39)
      {
        v9 = v36;
        *(_QWORD *)(a4 + 64) = v35;
        *(_OWORD *)(a4 + 48) = v34;
        v34 = 0uLL;
        *(_QWORD *)(a4 + 72) = v9;
        *(_OWORD *)(a4 + 80) = v37;
        *(_QWORD *)(a4 + 96) = v38;
        v35 = 0;
        v37 = 0uLL;
        v38 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v8 && SHIBYTE(v32) < 0)
        operator delete((void *)v31);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    if (v29)
    {
      if (v28)
      {
        if (v27 < 0)
          operator delete(v26);
        if (v25 < 0)
          operator delete(v24);
      }
      if (v23 && SHIBYTE(v22) < 0)
        operator delete(__dst[0]);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
  }
  else
  {
    v7 = (char *)operator new(0x28uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_24C40BAC0;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v31 = 0;
    sub_20B43EC5C((uint64_t)__p, v19);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)v19;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_QWORD *)a4 = v7 + 24;
    *(_QWORD *)(a4 + 8) = v7;
    *(_BYTE *)(a4 + 120) = 1;
  }
}

void sub_20B090E6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20AEC147C((uint64_t)&a11);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B090EAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      sub_20AEC147C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B091074(uint64_t a1@<X0>, unint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  void *v5;
  std::__shared_weak_count_vtbl *v6;
  char *v7;
  int v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  void *v19[2];
  uint64_t v20;
  void *__dst[2];
  uint64_t v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  void *__p[2];
  __int128 v31;
  uint64_t v32;
  unsigned __int8 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  char v39;
  char v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;

  v41 = a2;
  if (a1)
  {
    switch(a3)
    {
      case 0:
        v42 = 3 * a2;
        v43 = a1;
        sub_20AF6C1F8(&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7) >= 0x5555555555555556
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 1:
        v42 = 3 * a2;
        v43 = a1;
        sub_20AF6E11C((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7) >= 0x5555555555555556
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 2:
        v42 = 3 * a2;
        v43 = a1;
        sub_20AF6E1E4((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7) >= 0x5555555555555556
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 3:
        v42 = 3 * a2;
        v43 = a1;
        sub_20AF6E298((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7) >= 0x5555555555555556
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 5:
        v42 = 3 * a2;
        v43 = a1;
        sub_20AF6E34C(&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7) >= 0x5555555555555556
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 6:
        v42 = 3 * a2;
        v43 = a1;
        sub_20AF6E3FC((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7) >= 0x5555555555555556
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 7:
        v42 = 3 * a2;
        v43 = a1;
        sub_20AF6E4B0((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7) >= 0x5555555555555556
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 8:
        v42 = 3 * a2;
        v43 = a1;
        sub_20AF6E564((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7) >= 0x5555555555555556
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 11:
        v42 = 3 * a2;
        v43 = a1;
        sub_20AF6E618((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7) >= 0x5555555555555556
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      case 12:
        v42 = 3 * a2;
        v43 = a1;
        sub_20AF6E6CC((uint64_t *)&v42, __p);
        v6 = (std::__shared_weak_count_vtbl *)__p[0];
        v5 = __p[1];
        if (0xAAAAAAAAAAAAAAABLL * *((_QWORD *)__p[0] + 7) >= 0x5555555555555556
          && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        return;
      default:
        sub_20B521E58(a3);
    }
    v19[0] = v6;
    v19[1] = v5;
    v10 = (std::__shared_weak_count *)operator new(0x28uLL);
    v11 = v10;
    v10->__shared_owners_ = 0;
    v10->__shared_weak_owners_ = 0;
    v10->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BB10;
    v10[1].__vftable = v6;
    v10[1].__shared_owners_ = (uint64_t)v5;
    v18 = v10;
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(p_shared_owners);
    while (__stxr(v13 + 1, p_shared_owners));
    do
      v14 = __ldxr(p_shared_owners);
    while (__stxr(v14 + 1, p_shared_owners));
    *(_QWORD *)a4 = v10 + 1;
    *(_QWORD *)(a4 + 8) = v10;
    *(_BYTE *)(a4 + 120) = 1;
    do
      v15 = __ldaxr(p_shared_owners);
    while (__stlxr(v15 - 1, p_shared_owners));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v11);
    }
    if (v18)
    {
      v16 = (unint64_t *)&v18->__shared_owners_;
      do
        v17 = __ldaxr(v16);
      while (__stlxr(v17 - 1, v16));
      if (!v17)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
  }
  else if (a2)
  {
    sub_20AF4AD58("data pointer is null but num_points is ", &v41);
    if (SHIBYTE(v20) < 0)
    {
      sub_20AEC60F4(__dst, v19[0], (unint64_t)v19[1]);
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)v19;
      v22 = v20;
    }
    v23 = 1;
    LOBYTE(v24) = 0;
    v28 = 0;
    v29 = 1;
    sub_20AECCC3C(0xAu, (__int128 *)__dst, (uint64_t)__p);
    *(_OWORD *)a4 = *(_OWORD *)__p;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v40)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v8 = v33;
      if (v33)
      {
        *(_OWORD *)(a4 + 16) = v31;
        *(_QWORD *)(a4 + 32) = v32;
        v32 = 0;
        v31 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v39)
      {
        v9 = v36;
        *(_QWORD *)(a4 + 64) = v35;
        *(_OWORD *)(a4 + 48) = v34;
        v34 = 0uLL;
        *(_QWORD *)(a4 + 72) = v9;
        *(_OWORD *)(a4 + 80) = v37;
        *(_QWORD *)(a4 + 96) = v38;
        v35 = 0;
        v37 = 0uLL;
        v38 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v8 && SHIBYTE(v32) < 0)
        operator delete((void *)v31);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    if (v29)
    {
      if (v28)
      {
        if (v27 < 0)
          operator delete(v26);
        if (v25 < 0)
          operator delete(v24);
      }
      if (v23 && SHIBYTE(v22) < 0)
        operator delete(__dst[0]);
    }
    if (SHIBYTE(v20) < 0)
      operator delete(v19[0]);
  }
  else
  {
    v7 = (char *)operator new(0x28uLL);
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = 0;
    *(_QWORD *)v7 = &off_24C40BB10;
    __p[0] = 0;
    __p[1] = 0;
    *(_QWORD *)&v31 = 0;
    sub_20B43F144((uint64_t)__p, v19);
    *(_OWORD *)(v7 + 24) = *(_OWORD *)v19;
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    *(_QWORD *)a4 = v7 + 24;
    *(_QWORD *)(a4 + 8) = v7;
    *(_BYTE *)(a4 + 120) = 1;
  }
}

void sub_20B0918E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
  sub_20AEC147C((uint64_t)&a11);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B091924(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *a32,uint64_t a33)
{
  std::__shared_weak_count *v33;
  unint64_t *p_shared_owners;
  unint64_t v36;

  if (v33)
  {
    p_shared_owners = (unint64_t *)&v33->__shared_owners_;
    do
      v36 = __ldaxr(p_shared_owners);
    while (__stlxr(v36 - 1, p_shared_owners));
    if (!v36)
    {
      ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
      std::__shared_weak_count::__release_weak(v33);
      sub_20AEC147C((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B091AEC(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 **v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *p_shared_owners;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  __int128 v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  __int128 v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144[33];
  void (*v145)(int);
  unsigned __int8 **v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  v145 = 0;
  v146 = 0;
  v147 = 0;
  sub_20B43EC5C((uint64_t)&v145, &v143);
  v142 = v143;
  if (v145)
  {
    v146 = (unsigned __int8 **)v145;
    operator delete(v145);
  }
  v6 = *(unsigned __int8 ***)a1;
  switch(***(_BYTE ***)a1)
  {
    case 0:
      sub_20B43D624(*(unsigned __int8 ***)a1, 0);
      v8 = *((_QWORD *)*v6 + 5);
      v7 = *((_QWORD *)*v6 + 6);
      if (v7)
        v9 = 1;
      else
        v9 = v8 == 0;
      if (!v9
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v7)
        v10 = 0;
      else
        v10 = v8 >= 2;
      if (v10)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v11 = v8 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_204;
      }
      if (v8 < 2)
      {
        v11 = 0;
LABEL_205:
        v7 = 0;
        goto LABEL_206;
      }
      v11 = v8 & 0xFFFFFFFFFFFFFFFELL;
      if (!v7)
      {
LABEL_204:
        if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))goto LABEL_205;
LABEL_349:
        abort();
      }
LABEL_206:
      v91 = *(_QWORD *)(a1 + 8);
      v146 = *(unsigned __int8 ***)a1;
      v147 = v91;
      if (v91)
      {
        v92 = (unint64_t *)(v91 + 8);
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      v145 = sub_20B098E14;
      sub_20B43CBE4(&v143, 0, (void (**)(uint64_t))&v145, v11, v7);
      if (v145)
        v145(0);
      v94 = v143;
      v143 = 0uLL;
      if ((*(_BYTE *)(v94 + 56) & 1) != 0)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v95 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
        if (*((_QWORD *)&v143 + 1))
        {
          v96 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
      }
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
      v142 = v94;
      if (v64)
      {
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(p_shared_owners);
        while (__stlxr(v66 - 1, p_shared_owners));
        goto LABEL_321;
      }
LABEL_323:
      sub_20AF69D38((uint64_t)&v142, a2, (uint64_t)v144);
      sub_20AF4BAD4(a3, 0, v144);
      *(_BYTE *)(a3 + 528) = 1;
      sub_20AED5474((uint64_t)v144);
      v139 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
      if (*((_QWORD *)&v142 + 1))
      {
        v140 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      return;
    case 1:
      sub_20B43D624(*(unsigned __int8 ***)a1, 1);
      v28 = *((_QWORD *)*v6 + 5);
      v27 = *((_QWORD *)*v6 + 6);
      if (v27)
        v29 = 0;
      else
        v29 = v28 >= 2;
      if (v29
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v27)
        v30 = 0;
      else
        v30 = v28 >= 4;
      if (v30)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v31 = (v28 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v28 < 4)
        {
          v31 = 0;
LABEL_185:
          v27 = 0;
LABEL_186:
          v83 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v83;
          if (v83)
          {
            v84 = (unint64_t *)(v83 + 8);
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          v145 = sub_20B098E14;
          sub_20B43CE28(&v143, 1, (void (**)(uint64_t))&v145, v31, v27);
          if (v145)
            v145(0);
          v86 = v143;
          v143 = 0uLL;
          if ((*(_BYTE *)(v86 + 56) & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v87 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v88 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v86;
          if (!v64)
            goto LABEL_323;
          v90 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v90);
          while (__stlxr(v66 - 1, v90));
          goto LABEL_321;
        }
        v31 = (v28 >> 1) & 0x7FFFFFFFFFFFFFFELL;
        if (v27)
          goto LABEL_186;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_185;
    case 2:
      sub_20B43D624(*(unsigned __int8 ***)a1, 2);
      v38 = *((_QWORD *)*v6 + 5);
      v37 = *((_QWORD *)*v6 + 6);
      if (v37)
        v39 = 0;
      else
        v39 = v38 >= 4;
      if (v39
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v37)
        v40 = 0;
      else
        v40 = v38 >= 8;
      if (v40)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v41 = (v38 >> 2) & 0x3FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v38 < 8)
        {
          v41 = 0;
LABEL_245:
          v37 = 0;
LABEL_246:
          v107 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v107;
          if (v107)
          {
            v108 = (unint64_t *)(v107 + 8);
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
          }
          v145 = sub_20B098E14;
          sub_20B43D070(&v143, 2, (void (**)(uint64_t))&v145, v41, v37);
          if (v145)
            v145(0);
          v110 = v143;
          v143 = 0uLL;
          if ((*(_BYTE *)(v110 + 56) & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v111 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v112 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v110;
          if (!v64)
            goto LABEL_323;
          v114 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v114);
          while (__stlxr(v66 - 1, v114));
          goto LABEL_321;
        }
        v41 = (v38 >> 2) & 0x3FFFFFFFFFFFFFFELL;
        if (v37)
          goto LABEL_246;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_245;
    case 3:
      sub_20B43D624(*(unsigned __int8 ***)a1, 3);
      v48 = *((_QWORD *)*v6 + 5);
      v47 = *((_QWORD *)*v6 + 6);
      if (v47)
        v49 = 0;
      else
        v49 = v48 >= 8;
      if (v49
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v47)
        v50 = 0;
      else
        v50 = v48 >= 0x10;
      if (v50)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v51 = (v48 >> 3) & 0x1FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v48 < 0x10)
        {
          v51 = 0;
LABEL_285:
          v47 = 0;
LABEL_286:
          v123 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v123;
          if (v123)
          {
            v124 = (unint64_t *)(v123 + 8);
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
          }
          v145 = sub_20B098E14;
          sub_20B43D2B8(&v143, 3, (void (**)(uint64_t))&v145, v51, v47);
          if (v145)
            v145(0);
          v126 = v143;
          v143 = 0uLL;
          if ((*(_BYTE *)(v126 + 56) & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v127 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v128 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v126;
          if (!v64)
            goto LABEL_323;
          v130 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v130);
          while (__stlxr(v66 - 1, v130));
          goto LABEL_321;
        }
        v51 = (v48 >> 3) & 0x1FFFFFFFFFFFFFFELL;
        if (v47)
          goto LABEL_286;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_285;
    case 5:
      sub_20B43D624(*(unsigned __int8 ***)a1, 5);
      v23 = *((_QWORD *)*v6 + 5);
      v22 = *((_QWORD *)*v6 + 6);
      if (v22)
        v24 = 1;
      else
        v24 = v23 == 0;
      if (!v24
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v22)
        v25 = 0;
      else
        v25 = v23 >= 2;
      if (v25)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v26 = v23 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v23 < 2)
        {
          v26 = 0;
LABEL_165:
          v22 = 0;
LABEL_166:
          v75 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v75;
          if (v75)
          {
            v76 = (unint64_t *)(v75 + 8);
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
          }
          v145 = sub_20B098E14;
          sub_20B43CAC4(&v143, 5, (void (**)(uint64_t))&v145, v26, v22);
          if (v145)
            v145(0);
          v78 = v143;
          v143 = 0uLL;
          if ((*(_BYTE *)(v78 + 56) & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v79 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v80 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v78;
          if (!v64)
            goto LABEL_323;
          v82 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v82);
          while (__stlxr(v66 - 1, v82));
          goto LABEL_321;
        }
        v26 = v23 & 0xFFFFFFFFFFFFFFFELL;
        if (v22)
          goto LABEL_166;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_165;
    case 6:
      sub_20B43D624(*(unsigned __int8 ***)a1, 6);
      v33 = *((_QWORD *)*v6 + 5);
      v32 = *((_QWORD *)*v6 + 6);
      if (v32)
        v34 = 0;
      else
        v34 = v33 >= 2;
      if (v34
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v32)
        v35 = 0;
      else
        v35 = v33 >= 4;
      if (v35)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v36 = (v33 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v33 < 4)
        {
          v36 = 0;
LABEL_225:
          v32 = 0;
LABEL_226:
          v99 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v99;
          if (v99)
          {
            v100 = (unint64_t *)(v99 + 8);
            do
              v101 = __ldxr(v100);
            while (__stxr(v101 + 1, v100));
          }
          v145 = sub_20B098E14;
          sub_20B43CD04(&v143, 6, (void (**)(uint64_t))&v145, v36, v32);
          if (v145)
            v145(0);
          v102 = v143;
          v143 = 0uLL;
          if ((*(_BYTE *)(v102 + 56) & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v103 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v104 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v102;
          if (!v64)
            goto LABEL_323;
          v106 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v106);
          while (__stlxr(v66 - 1, v106));
          goto LABEL_321;
        }
        v36 = (v33 >> 1) & 0x7FFFFFFFFFFFFFFELL;
        if (v32)
          goto LABEL_226;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_225;
    case 7:
      sub_20B43D624(*(unsigned __int8 ***)a1, 7);
      v53 = *((_QWORD *)*v6 + 5);
      v52 = *((_QWORD *)*v6 + 6);
      if (v52)
        v54 = 0;
      else
        v54 = v53 >= 4;
      if (v54
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v52)
        v55 = 0;
      else
        v55 = v53 >= 8;
      if (v55)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v56 = (v53 >> 2) & 0x3FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v53 < 8)
        {
          v56 = 0;
LABEL_305:
          v52 = 0;
LABEL_306:
          v131 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v131;
          if (v131)
          {
            v132 = (unint64_t *)(v131 + 8);
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
          }
          v145 = sub_20B098E14;
          sub_20B43CF4C(&v143, 7, (void (**)(uint64_t))&v145, v56, v52);
          if (v145)
            v145(0);
          v134 = v143;
          v143 = 0uLL;
          if ((*(_BYTE *)(v134 + 56) & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v135 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v136 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v134;
          if (!v64)
            goto LABEL_323;
          v138 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v138);
          while (__stlxr(v66 - 1, v138));
          goto LABEL_321;
        }
        v56 = (v53 >> 2) & 0x3FFFFFFFFFFFFFFELL;
        if (v52)
          goto LABEL_306;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_305;
    case 8:
      sub_20B43D624(*(unsigned __int8 ***)a1, 8);
      v43 = *((_QWORD *)*v6 + 5);
      v42 = *((_QWORD *)*v6 + 6);
      if (v42)
        v44 = 0;
      else
        v44 = v43 >= 8;
      if (v44
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v42)
        v45 = 0;
      else
        v45 = v43 >= 0x10;
      if (v45)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v46 = (v43 >> 3) & 0x1FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v43 < 0x10)
        {
          v46 = 0;
LABEL_265:
          v42 = 0;
LABEL_266:
          v115 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v115;
          if (v115)
          {
            v116 = (unint64_t *)(v115 + 8);
            do
              v117 = __ldxr(v116);
            while (__stxr(v117 + 1, v116));
          }
          v145 = sub_20B098E14;
          sub_20B43D194(&v143, 8, (void (**)(uint64_t))&v145, v46, v42);
          if (v145)
            v145(0);
          v118 = v143;
          v143 = 0uLL;
          if ((*(_BYTE *)(v118 + 56) & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v119 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v120 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v118;
          if (!v64)
            goto LABEL_323;
          v122 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v122);
          while (__stlxr(v66 - 1, v122));
          goto LABEL_321;
        }
        v46 = (v43 >> 3) & 0x1FFFFFFFFFFFFFFELL;
        if (v42)
          goto LABEL_266;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_265;
    case 0xB:
      sub_20B43D624(*(unsigned __int8 ***)a1, 11);
      v18 = *((_QWORD *)*v6 + 5);
      v17 = *((_QWORD *)*v6 + 6);
      if (v17)
        v19 = 0;
      else
        v19 = v18 >= 4;
      if (v19
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v17)
        v20 = 0;
      else
        v20 = v18 >= 8;
      if (v20)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v21 = (v18 >> 2) & 0x3FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v18 < 8)
        {
          v21 = 0;
LABEL_145:
          v17 = 0;
LABEL_146:
          v67 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v67;
          if (v67)
          {
            v68 = (unint64_t *)(v67 + 8);
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }
          v145 = sub_20B098E14;
          sub_20B43D3DC(&v143, 11, (void (**)(uint64_t))&v145, v21, v17);
          if (v145)
            v145(0);
          v70 = v143;
          v143 = 0uLL;
          if ((*(_BYTE *)(v70 + 56) & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v71 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v72 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v70;
          if (!v64)
            goto LABEL_323;
          v74 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v74);
          while (__stlxr(v66 - 1, v74));
          goto LABEL_321;
        }
        v21 = (v18 >> 2) & 0x3FFFFFFFFFFFFFFELL;
        if (v17)
          goto LABEL_146;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_145;
    case 0xC:
      sub_20B43D624(*(unsigned __int8 ***)a1, 12);
      v13 = *((_QWORD *)*v6 + 5);
      v12 = *((_QWORD *)*v6 + 6);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 8;
      if (v14
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v12)
        v15 = 0;
      else
        v15 = v13 >= 0x10;
      if (v15)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v16 = (v13 >> 3) & 0x1FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v13 < 0x10)
        {
          v16 = 0;
LABEL_125:
          v12 = 0;
LABEL_126:
          v57 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v57;
          if (v57)
          {
            v58 = (unint64_t *)(v57 + 8);
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          v145 = sub_20B098E14;
          sub_20B43D500(&v143, 12, (void (**)(uint64_t))&v145, v16, v12);
          if (v145)
            v145(0);
          v60 = v143;
          v143 = 0uLL;
          if ((*(_BYTE *)(v60 + 56) & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v61 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v62 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v60;
          if (!v64)
            goto LABEL_323;
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
LABEL_321:
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          goto LABEL_323;
        }
        v16 = (v13 >> 3) & 0x1FFFFFFFFFFFFFFELL;
        if (v12)
          goto LABEL_126;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_125;
    default:
      sub_20B521E58(***(_BYTE ***)a1);
  }
}

void sub_20B09302C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B09323C(uint64_t a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int8 **v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  BOOL v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  BOOL v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  BOOL v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  BOOL v29;
  BOOL v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  BOOL v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  BOOL v39;
  BOOL v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  BOOL v44;
  BOOL v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  BOOL v49;
  BOOL v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  BOOL v54;
  BOOL v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t *v58;
  unint64_t v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  unint64_t *v62;
  unint64_t v63;
  std::__shared_weak_count *v64;
  unint64_t *v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t *v68;
  unint64_t v69;
  __int128 v70;
  std::__shared_weak_count *v71;
  unint64_t *v72;
  unint64_t v73;
  unint64_t *v74;
  uint64_t v75;
  unint64_t *v76;
  unint64_t v77;
  __int128 v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  unint64_t *v82;
  uint64_t v83;
  unint64_t *v84;
  unint64_t v85;
  __int128 v86;
  std::__shared_weak_count *v87;
  unint64_t *v88;
  unint64_t v89;
  unint64_t *v90;
  uint64_t v91;
  unint64_t *v92;
  unint64_t v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t *p_shared_owners;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  __int128 v102;
  std::__shared_weak_count *v103;
  unint64_t *v104;
  unint64_t v105;
  unint64_t *v106;
  uint64_t v107;
  unint64_t *v108;
  unint64_t v109;
  __int128 v110;
  std::__shared_weak_count *v111;
  unint64_t *v112;
  unint64_t v113;
  unint64_t *v114;
  uint64_t v115;
  unint64_t *v116;
  unint64_t v117;
  __int128 v118;
  std::__shared_weak_count *v119;
  unint64_t *v120;
  unint64_t v121;
  unint64_t *v122;
  uint64_t v123;
  unint64_t *v124;
  unint64_t v125;
  __int128 v126;
  std::__shared_weak_count *v127;
  unint64_t *v128;
  unint64_t v129;
  unint64_t *v130;
  uint64_t v131;
  unint64_t *v132;
  unint64_t v133;
  __int128 v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  unint64_t *v138;
  std::__shared_weak_count *v139;
  unint64_t *v140;
  unint64_t v141;
  __int128 v142;
  __int128 v143;
  __int128 v144[33];
  void (*v145)(int);
  unsigned __int8 **v146;
  uint64_t v147;
  uint64_t v148;

  v148 = *MEMORY[0x24BDAC8D0];
  v145 = 0;
  v146 = 0;
  v147 = 0;
  sub_20B43F144((uint64_t)&v145, &v143);
  v142 = v143;
  if (v145)
  {
    v146 = (unsigned __int8 **)v145;
    operator delete(v145);
  }
  v6 = *(unsigned __int8 ***)a1;
  switch(***(_BYTE ***)a1)
  {
    case 0:
      sub_20B43D624(*(unsigned __int8 ***)a1, 0);
      v8 = *((_QWORD *)*v6 + 5);
      v7 = *((_QWORD *)*v6 + 6);
      if (v7)
        v9 = 1;
      else
        v9 = v8 == 0;
      if (!v9
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v7)
        v10 = 0;
      else
        v10 = v8 >= 3;
      if (v10)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v11 = 3 * (v8 / 3);
        goto LABEL_204;
      }
      if (v8 < 3)
      {
        v11 = 0;
LABEL_205:
        v7 = 0;
        goto LABEL_206;
      }
      v11 = 3 * (v8 / 3);
      if (!v7)
      {
LABEL_204:
        if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))goto LABEL_205;
LABEL_349:
        abort();
      }
LABEL_206:
      v91 = *(_QWORD *)(a1 + 8);
      v146 = *(unsigned __int8 ***)a1;
      v147 = v91;
      if (v91)
      {
        v92 = (unint64_t *)(v91 + 8);
        do
          v93 = __ldxr(v92);
        while (__stxr(v93 + 1, v92));
      }
      v145 = sub_20B0990E4;
      sub_20B43CBE4(&v143, 0, (void (**)(uint64_t))&v145, v11, v7);
      if (v145)
        v145(0);
      v94 = v143;
      v143 = 0uLL;
      if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v94 + 56) >= 0x5555555555555556)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v95 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
        if (*((_QWORD *)&v143 + 1))
        {
          v96 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
          do
            v97 = __ldaxr(v96);
          while (__stlxr(v97 - 1, v96));
          if (!v97)
          {
            ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
            std::__shared_weak_count::__release_weak(v95);
          }
        }
      }
      v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
      v142 = v94;
      if (v64)
      {
        p_shared_owners = (unint64_t *)&v64->__shared_owners_;
        do
          v66 = __ldaxr(p_shared_owners);
        while (__stlxr(v66 - 1, p_shared_owners));
        goto LABEL_321;
      }
LABEL_323:
      sub_20AF6E780((uint64_t)&v142, a2, (uint64_t)v144);
      sub_20AF4BAD4(a3, 0, v144);
      *(_BYTE *)(a3 + 528) = 1;
      sub_20AED5474((uint64_t)v144);
      v139 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
      if (*((_QWORD *)&v142 + 1))
      {
        v140 = (unint64_t *)(*((_QWORD *)&v142 + 1) + 8);
        do
          v141 = __ldaxr(v140);
        while (__stlxr(v141 - 1, v140));
        if (!v141)
        {
          ((void (*)(std::__shared_weak_count *))v139->__on_zero_shared)(v139);
          std::__shared_weak_count::__release_weak(v139);
        }
      }
      return;
    case 1:
      sub_20B43D624(*(unsigned __int8 ***)a1, 1);
      v28 = *((_QWORD *)*v6 + 5);
      v27 = *((_QWORD *)*v6 + 6);
      if (v27)
        v29 = 0;
      else
        v29 = v28 >= 2;
      if (v29
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v27)
        v30 = 0;
      else
        v30 = v28 >= 6;
      if (v30)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v31 = 3 * (v28 / 6);
      }
      else
      {
        if (v28 < 6)
        {
          v31 = 0;
LABEL_185:
          v27 = 0;
LABEL_186:
          v83 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v83;
          if (v83)
          {
            v84 = (unint64_t *)(v83 + 8);
            do
              v85 = __ldxr(v84);
            while (__stxr(v85 + 1, v84));
          }
          v145 = sub_20B0990E4;
          sub_20B43CE28(&v143, 1, (void (**)(uint64_t))&v145, v31, v27);
          if (v145)
            v145(0);
          v86 = v143;
          v143 = 0uLL;
          if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v86 + 56) >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v87 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v88 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v89 = __ldaxr(v88);
              while (__stlxr(v89 - 1, v88));
              if (!v89)
              {
                ((void (*)(std::__shared_weak_count *))v87->__on_zero_shared)(v87);
                std::__shared_weak_count::__release_weak(v87);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v86;
          if (!v64)
            goto LABEL_323;
          v90 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v90);
          while (__stlxr(v66 - 1, v90));
          goto LABEL_321;
        }
        v31 = 3 * (v28 / 6);
        if (v27)
          goto LABEL_186;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_185;
    case 2:
      sub_20B43D624(*(unsigned __int8 ***)a1, 2);
      v38 = *((_QWORD *)*v6 + 5);
      v37 = *((_QWORD *)*v6 + 6);
      if (v37)
        v39 = 0;
      else
        v39 = v38 >= 4;
      if (v39
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v37)
        v40 = 0;
      else
        v40 = v38 >= 0xC;
      if (v40)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v41 = 3 * (v38 / 0xC);
      }
      else
      {
        if (v38 < 0xC)
        {
          v41 = 0;
LABEL_245:
          v37 = 0;
LABEL_246:
          v107 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v107;
          if (v107)
          {
            v108 = (unint64_t *)(v107 + 8);
            do
              v109 = __ldxr(v108);
            while (__stxr(v109 + 1, v108));
          }
          v145 = sub_20B0990E4;
          sub_20B43D070(&v143, 2, (void (**)(uint64_t))&v145, v41, v37);
          if (v145)
            v145(0);
          v110 = v143;
          v143 = 0uLL;
          if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v110 + 56) >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v111 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v112 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v113 = __ldaxr(v112);
              while (__stlxr(v113 - 1, v112));
              if (!v113)
              {
                ((void (*)(std::__shared_weak_count *))v111->__on_zero_shared)(v111);
                std::__shared_weak_count::__release_weak(v111);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v110;
          if (!v64)
            goto LABEL_323;
          v114 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v114);
          while (__stlxr(v66 - 1, v114));
          goto LABEL_321;
        }
        v41 = 3 * (v38 / 0xC);
        if (v37)
          goto LABEL_246;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_245;
    case 3:
      sub_20B43D624(*(unsigned __int8 ***)a1, 3);
      v48 = *((_QWORD *)*v6 + 5);
      v47 = *((_QWORD *)*v6 + 6);
      if (v47)
        v49 = 0;
      else
        v49 = v48 >= 8;
      if (v49
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v47)
        v50 = 0;
      else
        v50 = v48 >= 0x18;
      if (v50)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v51 = 3 * (v48 / 0x18);
      }
      else
      {
        if (v48 < 0x18)
        {
          v51 = 0;
LABEL_285:
          v47 = 0;
LABEL_286:
          v123 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v123;
          if (v123)
          {
            v124 = (unint64_t *)(v123 + 8);
            do
              v125 = __ldxr(v124);
            while (__stxr(v125 + 1, v124));
          }
          v145 = sub_20B0990E4;
          sub_20B43D2B8(&v143, 3, (void (**)(uint64_t))&v145, v51, v47);
          if (v145)
            v145(0);
          v126 = v143;
          v143 = 0uLL;
          if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v126 + 56) >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v127 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v128 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v129 = __ldaxr(v128);
              while (__stlxr(v129 - 1, v128));
              if (!v129)
              {
                ((void (*)(std::__shared_weak_count *))v127->__on_zero_shared)(v127);
                std::__shared_weak_count::__release_weak(v127);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v126;
          if (!v64)
            goto LABEL_323;
          v130 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v130);
          while (__stlxr(v66 - 1, v130));
          goto LABEL_321;
        }
        v51 = 3 * (v48 / 0x18);
        if (v47)
          goto LABEL_286;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_285;
    case 5:
      sub_20B43D624(*(unsigned __int8 ***)a1, 5);
      v23 = *((_QWORD *)*v6 + 5);
      v22 = *((_QWORD *)*v6 + 6);
      if (v22)
        v24 = 1;
      else
        v24 = v23 == 0;
      if (!v24
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v22)
        v25 = 0;
      else
        v25 = v23 >= 3;
      if (v25)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v26 = 3 * (v23 / 3);
      }
      else
      {
        if (v23 < 3)
        {
          v26 = 0;
LABEL_165:
          v22 = 0;
LABEL_166:
          v75 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v75;
          if (v75)
          {
            v76 = (unint64_t *)(v75 + 8);
            do
              v77 = __ldxr(v76);
            while (__stxr(v77 + 1, v76));
          }
          v145 = sub_20B0990E4;
          sub_20B43CAC4(&v143, 5, (void (**)(uint64_t))&v145, v26, v22);
          if (v145)
            v145(0);
          v78 = v143;
          v143 = 0uLL;
          if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v78 + 56) >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v79 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v80 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v78;
          if (!v64)
            goto LABEL_323;
          v82 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v82);
          while (__stlxr(v66 - 1, v82));
          goto LABEL_321;
        }
        v26 = 3 * (v23 / 3);
        if (v22)
          goto LABEL_166;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_165;
    case 6:
      sub_20B43D624(*(unsigned __int8 ***)a1, 6);
      v33 = *((_QWORD *)*v6 + 5);
      v32 = *((_QWORD *)*v6 + 6);
      if (v32)
        v34 = 0;
      else
        v34 = v33 >= 2;
      if (v34
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v32)
        v35 = 0;
      else
        v35 = v33 >= 6;
      if (v35)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v36 = 3 * (v33 / 6);
      }
      else
      {
        if (v33 < 6)
        {
          v36 = 0;
LABEL_225:
          v32 = 0;
LABEL_226:
          v99 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v99;
          if (v99)
          {
            v100 = (unint64_t *)(v99 + 8);
            do
              v101 = __ldxr(v100);
            while (__stxr(v101 + 1, v100));
          }
          v145 = sub_20B0990E4;
          sub_20B43CD04(&v143, 6, (void (**)(uint64_t))&v145, v36, v32);
          if (v145)
            v145(0);
          v102 = v143;
          v143 = 0uLL;
          if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v102 + 56) >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v103 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v104 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v105 = __ldaxr(v104);
              while (__stlxr(v105 - 1, v104));
              if (!v105)
              {
                ((void (*)(std::__shared_weak_count *))v103->__on_zero_shared)(v103);
                std::__shared_weak_count::__release_weak(v103);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v102;
          if (!v64)
            goto LABEL_323;
          v106 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v106);
          while (__stlxr(v66 - 1, v106));
          goto LABEL_321;
        }
        v36 = 3 * (v33 / 6);
        if (v32)
          goto LABEL_226;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_225;
    case 7:
      sub_20B43D624(*(unsigned __int8 ***)a1, 7);
      v53 = *((_QWORD *)*v6 + 5);
      v52 = *((_QWORD *)*v6 + 6);
      if (v52)
        v54 = 0;
      else
        v54 = v53 >= 4;
      if (v54
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v52)
        v55 = 0;
      else
        v55 = v53 >= 0xC;
      if (v55)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v56 = 3 * (v53 / 0xC);
      }
      else
      {
        if (v53 < 0xC)
        {
          v56 = 0;
LABEL_305:
          v52 = 0;
LABEL_306:
          v131 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v131;
          if (v131)
          {
            v132 = (unint64_t *)(v131 + 8);
            do
              v133 = __ldxr(v132);
            while (__stxr(v133 + 1, v132));
          }
          v145 = sub_20B0990E4;
          sub_20B43CF4C(&v143, 7, (void (**)(uint64_t))&v145, v56, v52);
          if (v145)
            v145(0);
          v134 = v143;
          v143 = 0uLL;
          if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v134 + 56) >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v135 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v136 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v134;
          if (!v64)
            goto LABEL_323;
          v138 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v138);
          while (__stlxr(v66 - 1, v138));
          goto LABEL_321;
        }
        v56 = 3 * (v53 / 0xC);
        if (v52)
          goto LABEL_306;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_305;
    case 8:
      sub_20B43D624(*(unsigned __int8 ***)a1, 8);
      v43 = *((_QWORD *)*v6 + 5);
      v42 = *((_QWORD *)*v6 + 6);
      if (v42)
        v44 = 0;
      else
        v44 = v43 >= 8;
      if (v44
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v42)
        v45 = 0;
      else
        v45 = v43 >= 0x18;
      if (v45)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v46 = 3 * (v43 / 0x18);
      }
      else
      {
        if (v43 < 0x18)
        {
          v46 = 0;
LABEL_265:
          v42 = 0;
LABEL_266:
          v115 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v115;
          if (v115)
          {
            v116 = (unint64_t *)(v115 + 8);
            do
              v117 = __ldxr(v116);
            while (__stxr(v117 + 1, v116));
          }
          v145 = sub_20B0990E4;
          sub_20B43D194(&v143, 8, (void (**)(uint64_t))&v145, v46, v42);
          if (v145)
            v145(0);
          v118 = v143;
          v143 = 0uLL;
          if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v118 + 56) >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v119 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v120 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v121 = __ldaxr(v120);
              while (__stlxr(v121 - 1, v120));
              if (!v121)
              {
                ((void (*)(std::__shared_weak_count *))v119->__on_zero_shared)(v119);
                std::__shared_weak_count::__release_weak(v119);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v118;
          if (!v64)
            goto LABEL_323;
          v122 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v122);
          while (__stlxr(v66 - 1, v122));
          goto LABEL_321;
        }
        v46 = 3 * (v43 / 0x18);
        if (v42)
          goto LABEL_266;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_265;
    case 0xB:
      sub_20B43D624(*(unsigned __int8 ***)a1, 11);
      v18 = *((_QWORD *)*v6 + 5);
      v17 = *((_QWORD *)*v6 + 6);
      if (v17)
        v19 = 0;
      else
        v19 = v18 >= 4;
      if (v19
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v17)
        v20 = 0;
      else
        v20 = v18 >= 0xC;
      if (v20)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v21 = 3 * (v18 / 0xC);
      }
      else
      {
        if (v18 < 0xC)
        {
          v21 = 0;
LABEL_145:
          v17 = 0;
LABEL_146:
          v67 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v67;
          if (v67)
          {
            v68 = (unint64_t *)(v67 + 8);
            do
              v69 = __ldxr(v68);
            while (__stxr(v69 + 1, v68));
          }
          v145 = sub_20B0990E4;
          sub_20B43D3DC(&v143, 11, (void (**)(uint64_t))&v145, v21, v17);
          if (v145)
            v145(0);
          v70 = v143;
          v143 = 0uLL;
          if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v70 + 56) >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v71 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v72 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v73 = __ldaxr(v72);
              while (__stlxr(v73 - 1, v72));
              if (!v73)
              {
                ((void (*)(std::__shared_weak_count *))v71->__on_zero_shared)(v71);
                std::__shared_weak_count::__release_weak(v71);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v70;
          if (!v64)
            goto LABEL_323;
          v74 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v74);
          while (__stlxr(v66 - 1, v74));
          goto LABEL_321;
        }
        v21 = 3 * (v18 / 0xC);
        if (v17)
          goto LABEL_146;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_145;
    case 0xC:
      sub_20B43D624(*(unsigned __int8 ***)a1, 12);
      v13 = *((_QWORD *)*v6 + 5);
      v12 = *((_QWORD *)*v6 + 6);
      if (v12)
        v14 = 0;
      else
        v14 = v13 >= 8;
      if (v14
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      if (v12)
        v15 = 0;
      else
        v15 = v13 >= 0x18;
      if (v15)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_349;
        }
        v16 = 3 * (v13 / 0x18);
      }
      else
      {
        if (v13 < 0x18)
        {
          v16 = 0;
LABEL_125:
          v12 = 0;
LABEL_126:
          v57 = *(_QWORD *)(a1 + 8);
          v146 = *(unsigned __int8 ***)a1;
          v147 = v57;
          if (v57)
          {
            v58 = (unint64_t *)(v57 + 8);
            do
              v59 = __ldxr(v58);
            while (__stxr(v59 + 1, v58));
          }
          v145 = sub_20B0990E4;
          sub_20B43D500(&v143, 12, (void (**)(uint64_t))&v145, v16, v12);
          if (v145)
            v145(0);
          v60 = v143;
          v143 = 0uLL;
          if (0xAAAAAAAAAAAAAAABLL * *(_QWORD *)(v60 + 56) >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v61 = (std::__shared_weak_count *)*((_QWORD *)&v143 + 1);
            if (*((_QWORD *)&v143 + 1))
            {
              v62 = (unint64_t *)(*((_QWORD *)&v143 + 1) + 8);
              do
                v63 = __ldaxr(v62);
              while (__stlxr(v63 - 1, v62));
              if (!v63)
              {
                ((void (*)(std::__shared_weak_count *))v61->__on_zero_shared)(v61);
                std::__shared_weak_count::__release_weak(v61);
              }
            }
          }
          v64 = (std::__shared_weak_count *)*((_QWORD *)&v142 + 1);
          v142 = v60;
          if (!v64)
            goto LABEL_323;
          v65 = (unint64_t *)&v64->__shared_owners_;
          do
            v66 = __ldaxr(v65);
          while (__stlxr(v66 - 1, v65));
LABEL_321:
          if (!v66)
          {
            ((void (*)(std::__shared_weak_count *))v64->__on_zero_shared)(v64);
            std::__shared_weak_count::__release_weak(v64);
          }
          goto LABEL_323;
        }
        v16 = 3 * (v13 / 0x18);
        if (v12)
          goto LABEL_126;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_349;
      }
      goto LABEL_125;
    default:
      sub_20B521E58(***(_BYTE ***)a1);
  }
}

void sub_20B09496C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, char a13)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B094B7C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unsigned __int8 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  unint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  BOOL v43;
  unint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  BOOL v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  BOOL v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  BOOL v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  _BYTE *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  _BYTE *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  _BYTE *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  unint64_t *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  _BYTE *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  _BYTE *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  _BYTE *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  unint64_t *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  _BYTE *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  _BYTE *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  unint64_t *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  _BYTE *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  _QWORD *v156;
  unint64_t *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  _BYTE *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  _QWORD *v165;
  unint64_t *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unsigned int v175;
  void *v176[2];
  uint64_t v177;
  void *__p[2];
  uint64_t v179;
  char v180;
  void *v181[2];
  uint64_t v182;
  int v183;
  void *v184;
  void **v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  __int128 __dst;
  void **v189;
  int v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  unsigned __int8 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  char v200;
  char v201;
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a1 + 424);
  v5 = *(std::__shared_weak_count **)(a1 + 432);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
  {
    v8 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F64B8, 0) != 0;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_11;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_11:
    if (v8)
      goto LABEL_12;
LABEL_22:
    v11 = 0;
    v186 = 0;
    v187 = 0;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v8)
    goto LABEL_22;
LABEL_12:
  v12 = *(_QWORD *)(a1 + 424);
  v11 = *(std::__shared_weak_count **)(a1 + 432);
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v186 = v12;
    v187 = v11;
    if (v12)
    {
      v174 = v11;
      do
        v15 = __ldxr(v13);
      while (__stxr(v15 + 1, v13));
      v176[0] = 0;
      v176[1] = 0;
      *(_QWORD *)&__dst = v12;
      *((_QWORD *)&__dst + 1) = v11;
      do
        v16 = __ldxr(v13);
      while (__stxr(v16 + 1, v13));
      goto LABEL_61;
    }
LABEL_23:
    v17 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v17 & 1) != 0)
      goto LABEL_24;
LABEL_74:
    if (__cxa_guard_acquire(&qword_25463CF48))
    {
      *(_OWORD *)v181 = xmmword_20B5B0AE0;
      sub_20B1DFBA8((uint64_t *)v181);
      __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF48);
    }
LABEL_24:
    if (byte_25463CDFF < 0)
    {
      sub_20AEC60F4(&__dst, (void *)xmmword_25463CDE8, *((unint64_t *)&xmmword_25463CDE8 + 1));
    }
    else
    {
      __dst = xmmword_25463CDE8;
      v189 = (void **)unk_25463CDF8;
    }
    v190 = dword_25463CE00;
    sub_20AF4BC0C(&v184, (uint64_t)&__dst, 1uLL);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC60F4(v181, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)v181 = *(_OWORD *)a1;
      v182 = *(_QWORD *)(a1 + 16);
    }
    v183 = *(_DWORD *)(a1 + 24);
    v175 = 2;
    sub_20B0969E0((uint64_t)v176, &v175);
    *(_OWORD *)__p = *(_OWORD *)v176;
    v179 = v177;
    v176[1] = 0;
    v177 = 0;
    v176[0] = 0;
    v180 = 1;
    sub_20B099ED4((uint64_t *)&v184, (uint64_t)v181, (uint64_t)__p, (uint64_t)&v191);
    *(_OWORD *)a2 = v191;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v201)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v18 = v194;
      if (v194)
      {
        *(_OWORD *)(a2 + 16) = v192;
        *(_QWORD *)(a2 + 32) = v193;
        v193 = 0;
        v192 = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v200)
      {
        v19 = v197;
        *(_QWORD *)(a2 + 64) = v196;
        *(_OWORD *)(a2 + 48) = v195;
        v195 = 0uLL;
        *(_QWORD *)(a2 + 72) = v19;
        *(_OWORD *)(a2 + 80) = v198;
        *(_QWORD *)(a2 + 96) = v199;
        v196 = 0;
        v198 = 0uLL;
        v199 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v18 && SHIBYTE(v193) < 0)
        operator delete((void *)v192);
      if (!v180)
      {
LABEL_43:
        if (SHIBYTE(v177) < 0)
        {
          operator delete(v176[0]);
          if ((SHIBYTE(v182) & 0x80000000) == 0)
          {
LABEL_45:
            v20 = (void **)v184;
            if (v184)
              goto LABEL_46;
            goto LABEL_56;
          }
        }
        else if ((SHIBYTE(v182) & 0x80000000) == 0)
        {
          goto LABEL_45;
        }
        operator delete(v181[0]);
        v20 = (void **)v184;
        if (v184)
        {
LABEL_46:
          v21 = v185;
          if (v185 == v20)
          {
            v185 = v20;
            operator delete(v20);
            if ((SHIBYTE(v189) & 0x80000000) == 0)
              goto LABEL_57;
            goto LABEL_48;
          }
          do
          {
            if (*((char *)v21 - 9) < 0)
              operator delete(*(v21 - 4));
            v21 -= 4;
          }
          while (v21 != v20);
          v185 = v20;
          operator delete(v184);
          if (SHIBYTE(v189) < 0)
LABEL_48:
            operator delete((void *)__dst);
LABEL_57:
          if (!v11)
            return;
          goto LABEL_395;
        }
LABEL_56:
        if (SHIBYTE(v189) < 0)
          goto LABEL_48;
        goto LABEL_57;
      }
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
      if (!v180)
        goto LABEL_43;
    }
    if (SHIBYTE(v179) < 0)
      operator delete(__p[0]);
    goto LABEL_43;
  }
  v186 = *(_QWORD *)(a1 + 424);
  v187 = 0;
  if (!v12)
  {
    v11 = 0;
    v29 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v29 & 1) != 0)
      goto LABEL_24;
    goto LABEL_74;
  }
  v174 = 0;
  v176[0] = 0;
  v176[1] = 0;
  __dst = v12;
LABEL_61:
  v23 = v12 + 8;
  v22 = *(unsigned __int8 **)(v12 + 8);
  v189 = v176;
  switch(*v22)
  {
    case 0u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 0);
      v25 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v24 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v24)
        v26 = 1;
      else
        v26 = v25 == 0;
      if (!v26
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v24)
        v27 = 0;
      else
        v27 = v25 >= 2;
      if (v27)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v28 = v25 & 0xFFFFFFFFFFFFFFFELL;
        goto LABEL_265;
      }
      if (v25 < 2)
      {
        v28 = 0;
LABEL_266:
        v24 = 0;
        goto LABEL_267;
      }
      v28 = v25 & 0xFFFFFFFFFFFFFFFELL;
      if (!v24)
      {
LABEL_265:
        if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))goto LABEL_266;
LABEL_420:
        abort();
      }
LABEL_267:
      *((_QWORD *)&v191 + 1) = v12;
      *(_QWORD *)&v192 = v11;
      if (v11)
      {
        v113 = (unint64_t *)&v11->__shared_owners_;
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      *(_QWORD *)&v191 = sub_20B098CAC;
      sub_20B43CBE4(v181, 0, (void (**)(uint64_t))&v191, v28, v24);
      if ((_QWORD)v191)
        ((void (*)(int))v191)(0);
      v116 = v181[0];
      v115 = v181[1];
      v181[0] = 0;
      v181[1] = 0;
      if ((v116[56] & 1) != 0)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v117 = (std::__shared_weak_count *)v181[1];
        if (v181[1])
        {
          v118 = (unint64_t *)((char *)v181[1] + 8);
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
      }
      v120 = operator new(0x28uLL);
      v120[1] = 0;
      v120[2] = 0;
      *v120 = &off_24C40BAC0;
      v120[3] = v116;
      v120[4] = v115;
      v83 = (std::__shared_weak_count *)v176[1];
      v176[0] = v120 + 3;
      v176[1] = v120;
      if (v83)
      {
        v121 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldaxr(v121);
        while (__stlxr(v85 - 1, v121));
        goto LABEL_382;
      }
LABEL_384:
      v167 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1))
      {
        v168 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      *(_OWORD *)a2 = *(_OWORD *)v176;
      v176[0] = 0;
      v176[1] = 0;
      *(_BYTE *)(a2 + 120) = 1;
      if (v174)
      {
        v170 = (unint64_t *)&v174->__shared_owners_;
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v11 = v187;
      if (v187)
      {
LABEL_395:
        v172 = (unint64_t *)&v11->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      return;
    case 1u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 1);
      v46 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v45 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 2;
      if (v47
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v45)
        v48 = 0;
      else
        v48 = v46 >= 4;
      if (v48)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v49 = (v46 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v46 < 4)
        {
          v49 = 0;
LABEL_246:
          v45 = 0;
LABEL_247:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v104 = (unint64_t *)&v11->__shared_owners_;
            do
              v105 = __ldxr(v104);
            while (__stxr(v105 + 1, v104));
          }
          *(_QWORD *)&v191 = sub_20B098CAC;
          sub_20B43CE28(v181, 1, (void (**)(uint64_t))&v191, v49, v45);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v107 = v181[0];
          v106 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if ((v107[56] & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v108 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v109 = (unint64_t *)((char *)v181[1] + 8);
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
          }
          v111 = operator new(0x28uLL);
          v111[1] = 0;
          v111[2] = 0;
          *v111 = &off_24C40BAC0;
          v111[3] = v107;
          v111[4] = v106;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v111 + 3;
          v176[1] = v111;
          if (!v83)
            goto LABEL_384;
          v112 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v112);
          while (__stlxr(v85 - 1, v112));
          goto LABEL_382;
        }
        v49 = (v46 >> 1) & 0x7FFFFFFFFFFFFFFELL;
        if (v45)
          goto LABEL_247;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_246;
    case 2u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 2);
      v56 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v55 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v55)
        v57 = 0;
      else
        v57 = v56 >= 4;
      if (v57
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v55)
        v58 = 0;
      else
        v58 = v56 >= 8;
      if (v58)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v59 = (v56 >> 2) & 0x3FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v56 < 8)
        {
          v59 = 0;
LABEL_306:
          v55 = 0;
LABEL_307:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v131 = (unint64_t *)&v11->__shared_owners_;
            do
              v132 = __ldxr(v131);
            while (__stxr(v132 + 1, v131));
          }
          *(_QWORD *)&v191 = sub_20B098CAC;
          sub_20B43D070(v181, 2, (void (**)(uint64_t))&v191, v59, v55);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v134 = v181[0];
          v133 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if ((v134[56] & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v135 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v136 = (unint64_t *)((char *)v181[1] + 8);
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
          }
          v138 = operator new(0x28uLL);
          v138[1] = 0;
          v138[2] = 0;
          *v138 = &off_24C40BAC0;
          v138[3] = v134;
          v138[4] = v133;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v138 + 3;
          v176[1] = v138;
          if (!v83)
            goto LABEL_384;
          v139 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v139);
          while (__stlxr(v85 - 1, v139));
          goto LABEL_382;
        }
        v59 = (v56 >> 2) & 0x3FFFFFFFFFFFFFFELL;
        if (v55)
          goto LABEL_307;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_306;
    case 3u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 3);
      v66 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v65 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v65)
        v67 = 0;
      else
        v67 = v66 >= 8;
      if (v67
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v65)
        v68 = 0;
      else
        v68 = v66 >= 0x10;
      if (v68)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v69 = (v66 >> 3) & 0x1FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v66 < 0x10)
        {
          v69 = 0;
LABEL_346:
          v65 = 0;
LABEL_347:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v149 = (unint64_t *)&v11->__shared_owners_;
            do
              v150 = __ldxr(v149);
            while (__stxr(v150 + 1, v149));
          }
          *(_QWORD *)&v191 = sub_20B098CAC;
          sub_20B43D2B8(v181, 3, (void (**)(uint64_t))&v191, v69, v65);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v152 = v181[0];
          v151 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if ((v152[56] & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v153 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v154 = (unint64_t *)((char *)v181[1] + 8);
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
          }
          v156 = operator new(0x28uLL);
          v156[1] = 0;
          v156[2] = 0;
          *v156 = &off_24C40BAC0;
          v156[3] = v152;
          v156[4] = v151;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v156 + 3;
          v176[1] = v156;
          if (!v83)
            goto LABEL_384;
          v157 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v157);
          while (__stlxr(v85 - 1, v157));
          goto LABEL_382;
        }
        v69 = (v66 >> 3) & 0x1FFFFFFFFFFFFFFELL;
        if (v65)
          goto LABEL_347;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_346;
    case 5u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 5);
      v41 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v40 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v40)
        v42 = 1;
      else
        v42 = v41 == 0;
      if (!v42
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v40)
        v43 = 0;
      else
        v43 = v41 >= 2;
      if (v43)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v44 = v41 & 0xFFFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v41 < 2)
        {
          v44 = 0;
LABEL_226:
          v40 = 0;
LABEL_227:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v95 = (unint64_t *)&v11->__shared_owners_;
            do
              v96 = __ldxr(v95);
            while (__stxr(v96 + 1, v95));
          }
          *(_QWORD *)&v191 = sub_20B098CAC;
          sub_20B43CAC4(v181, 5, (void (**)(uint64_t))&v191, v44, v40);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v98 = v181[0];
          v97 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if ((v98[56] & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v99 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v100 = (unint64_t *)((char *)v181[1] + 8);
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 - 1, v100));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
          }
          v102 = operator new(0x28uLL);
          v102[1] = 0;
          v102[2] = 0;
          *v102 = &off_24C40BAC0;
          v102[3] = v98;
          v102[4] = v97;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v102 + 3;
          v176[1] = v102;
          if (!v83)
            goto LABEL_384;
          v103 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v103);
          while (__stlxr(v85 - 1, v103));
          goto LABEL_382;
        }
        v44 = v41 & 0xFFFFFFFFFFFFFFFELL;
        if (v40)
          goto LABEL_227;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_226;
    case 6u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 6);
      v51 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v50 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 2;
      if (v52
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v50)
        v53 = 0;
      else
        v53 = v51 >= 4;
      if (v53)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v54 = (v51 >> 1) & 0x7FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v51 < 4)
        {
          v54 = 0;
LABEL_286:
          v50 = 0;
LABEL_287:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v122 = (unint64_t *)&v11->__shared_owners_;
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
          }
          *(_QWORD *)&v191 = sub_20B098CAC;
          sub_20B43CD04(v181, 6, (void (**)(uint64_t))&v191, v54, v50);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v125 = v181[0];
          v124 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if ((v125[56] & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v126 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v127 = (unint64_t *)((char *)v181[1] + 8);
              do
                v128 = __ldaxr(v127);
              while (__stlxr(v128 - 1, v127));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
            }
          }
          v129 = operator new(0x28uLL);
          v129[1] = 0;
          v129[2] = 0;
          *v129 = &off_24C40BAC0;
          v129[3] = v125;
          v129[4] = v124;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v129 + 3;
          v176[1] = v129;
          if (!v83)
            goto LABEL_384;
          v130 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v130);
          while (__stlxr(v85 - 1, v130));
          goto LABEL_382;
        }
        v54 = (v51 >> 1) & 0x7FFFFFFFFFFFFFFELL;
        if (v50)
          goto LABEL_287;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_286;
    case 7u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 7);
      v71 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v70 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v70)
        v72 = 0;
      else
        v72 = v71 >= 4;
      if (v72
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v70)
        v73 = 0;
      else
        v73 = v71 >= 8;
      if (v73)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v74 = (v71 >> 2) & 0x3FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v71 < 8)
        {
          v74 = 0;
LABEL_366:
          v70 = 0;
LABEL_367:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v158 = (unint64_t *)&v11->__shared_owners_;
            do
              v159 = __ldxr(v158);
            while (__stxr(v159 + 1, v158));
          }
          *(_QWORD *)&v191 = sub_20B098CAC;
          sub_20B43CF4C(v181, 7, (void (**)(uint64_t))&v191, v74, v70);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v161 = v181[0];
          v160 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if ((v161[56] & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v162 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v163 = (unint64_t *)((char *)v181[1] + 8);
              do
                v164 = __ldaxr(v163);
              while (__stlxr(v164 - 1, v163));
              if (!v164)
              {
                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                std::__shared_weak_count::__release_weak(v162);
              }
            }
          }
          v165 = operator new(0x28uLL);
          v165[1] = 0;
          v165[2] = 0;
          *v165 = &off_24C40BAC0;
          v165[3] = v161;
          v165[4] = v160;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v165 + 3;
          v176[1] = v165;
          if (!v83)
            goto LABEL_384;
          v166 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v166);
          while (__stlxr(v85 - 1, v166));
          goto LABEL_382;
        }
        v74 = (v71 >> 2) & 0x3FFFFFFFFFFFFFFELL;
        if (v70)
          goto LABEL_367;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_366;
    case 8u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 8);
      v61 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v60 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v60)
        v62 = 0;
      else
        v62 = v61 >= 8;
      if (v62
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v60)
        v63 = 0;
      else
        v63 = v61 >= 0x10;
      if (v63)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v64 = (v61 >> 3) & 0x1FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v61 < 0x10)
        {
          v64 = 0;
LABEL_326:
          v60 = 0;
LABEL_327:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v140 = (unint64_t *)&v11->__shared_owners_;
            do
              v141 = __ldxr(v140);
            while (__stxr(v141 + 1, v140));
          }
          *(_QWORD *)&v191 = sub_20B098CAC;
          sub_20B43D194(v181, 8, (void (**)(uint64_t))&v191, v64, v60);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v143 = v181[0];
          v142 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if ((v143[56] & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v144 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v145 = (unint64_t *)((char *)v181[1] + 8);
              do
                v146 = __ldaxr(v145);
              while (__stlxr(v146 - 1, v145));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
          }
          v147 = operator new(0x28uLL);
          v147[1] = 0;
          v147[2] = 0;
          *v147 = &off_24C40BAC0;
          v147[3] = v143;
          v147[4] = v142;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v147 + 3;
          v176[1] = v147;
          if (!v83)
            goto LABEL_384;
          v148 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v148);
          while (__stlxr(v85 - 1, v148));
          goto LABEL_382;
        }
        v64 = (v61 >> 3) & 0x1FFFFFFFFFFFFFFELL;
        if (v60)
          goto LABEL_327;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_326;
    case 0xBu:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 11);
      v36 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v35 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (v37
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v35)
        v38 = 0;
      else
        v38 = v36 >= 8;
      if (v38)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v39 = (v36 >> 2) & 0x3FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v36 < 8)
        {
          v39 = 0;
LABEL_206:
          v35 = 0;
LABEL_207:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v86 = (unint64_t *)&v11->__shared_owners_;
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          *(_QWORD *)&v191 = sub_20B098CAC;
          sub_20B43D3DC(v181, 11, (void (**)(uint64_t))&v191, v39, v35);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v89 = v181[0];
          v88 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if ((v89[56] & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v90 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v91 = (unint64_t *)((char *)v181[1] + 8);
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
          }
          v93 = operator new(0x28uLL);
          v93[1] = 0;
          v93[2] = 0;
          *v93 = &off_24C40BAC0;
          v93[3] = v89;
          v93[4] = v88;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v93 + 3;
          v176[1] = v93;
          if (!v83)
            goto LABEL_384;
          v94 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v94);
          while (__stlxr(v85 - 1, v94));
          goto LABEL_382;
        }
        v39 = (v36 >> 2) & 0x3FFFFFFFFFFFFFFELL;
        if (v35)
          goto LABEL_207;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_206;
    case 0xCu:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 12);
      v31 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v30 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 8;
      if (v32
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v30)
        v33 = 0;
      else
        v33 = v31 >= 0x10;
      if (v33)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v34 = (v31 >> 3) & 0x1FFFFFFFFFFFFFFELL;
      }
      else
      {
        if (v31 < 0x10)
        {
          v34 = 0;
LABEL_186:
          v30 = 0;
LABEL_187:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v75 = (unint64_t *)&v11->__shared_owners_;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          *(_QWORD *)&v191 = sub_20B098CAC;
          sub_20B43D500(v181, 12, (void (**)(uint64_t))&v191, v34, v30);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v78 = v181[0];
          v77 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if ((v78[56] & 1) != 0)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v79 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v80 = (unint64_t *)((char *)v181[1] + 8);
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
          }
          v82 = operator new(0x28uLL);
          v82[1] = 0;
          v82[2] = 0;
          *v82 = &off_24C40BAC0;
          v82[3] = v78;
          v82[4] = v77;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v82 + 3;
          v176[1] = v82;
          if (!v83)
            goto LABEL_384;
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
LABEL_382:
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
          goto LABEL_384;
        }
        v34 = (v31 >> 3) & 0x1FFFFFFFFFFFFFFELL;
        if (v30)
          goto LABEL_187;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_186;
    default:
      sub_20B521E58(*v22);
  }
}

void sub_20B096600(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C((uint64_t)&a38);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0969E0(uint64_t a1, unsigned int *a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  std::string v6;
  _QWORD v7[5];
  _QWORD *v8;

  v5 = 0;
  sub_20AF810D0(v4, "cannot return data as VZPoints");
  std::to_string(&v6, *a2);
  v7[0] = v4;
  v7[1] = &v6;
  v7[2] = v4;
  v7[3] = &v6;
  v7[4] = &v6;
  if (v5 == -1)
    sub_20AECFAB8();
  v8 = v7;
  ((void (*)(_QWORD **, _DWORD *))off_24C40BBA8[v5])(&v8, v4);
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
  if (v5 == -1)
    sub_20AECFAB8();
  v7[0] = &v6;
  result = ((uint64_t (*)(_QWORD *, _DWORD *))off_24C40BBC0[v5])(v7, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD *, _DWORD *))off_24C40BB90[v5])(v7, v4);
  return result;
}

void sub_20B096AE0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B096AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0)
  {
    operator delete(__p);
    sub_20AECFA60((uint64_t)&a10);
    _Unwind_Resume(a1);
  }
  JUMPOUT(0x20B096AECLL);
}

void sub_20B096B20(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  std::__shared_weak_count *v11;
  unint64_t v12;
  unint64_t *v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unsigned __int8 v17;
  int v18;
  uint64_t v19;
  void **v20;
  void **v21;
  unsigned __int8 *v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  BOOL v26;
  BOOL v27;
  uint64_t v28;
  unsigned __int8 v29;
  uint64_t v30;
  unint64_t v31;
  BOOL v32;
  BOOL v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  BOOL v37;
  BOOL v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  BOOL v42;
  BOOL v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  BOOL v47;
  BOOL v48;
  uint64_t v49;
  uint64_t v50;
  unint64_t v51;
  BOOL v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  BOOL v57;
  BOOL v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  BOOL v62;
  BOOL v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  BOOL v67;
  BOOL v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  BOOL v72;
  BOOL v73;
  uint64_t v74;
  unint64_t *v75;
  unint64_t v76;
  void *v77;
  _QWORD *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  _QWORD *v82;
  std::__shared_weak_count *v83;
  unint64_t *v84;
  unint64_t v85;
  unint64_t *v86;
  unint64_t v87;
  void *v88;
  _QWORD *v89;
  std::__shared_weak_count *v90;
  unint64_t *v91;
  unint64_t v92;
  _QWORD *v93;
  unint64_t *v94;
  unint64_t *v95;
  unint64_t v96;
  void *v97;
  _QWORD *v98;
  std::__shared_weak_count *v99;
  unint64_t *v100;
  unint64_t v101;
  _QWORD *v102;
  unint64_t *v103;
  unint64_t *v104;
  unint64_t v105;
  void *v106;
  _QWORD *v107;
  std::__shared_weak_count *v108;
  unint64_t *v109;
  unint64_t v110;
  _QWORD *v111;
  unint64_t *v112;
  unint64_t *v113;
  unint64_t v114;
  void *v115;
  _QWORD *v116;
  std::__shared_weak_count *v117;
  unint64_t *v118;
  unint64_t v119;
  _QWORD *v120;
  unint64_t *v121;
  unint64_t *v122;
  unint64_t v123;
  void *v124;
  _QWORD *v125;
  std::__shared_weak_count *v126;
  unint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  unint64_t *v130;
  unint64_t *v131;
  unint64_t v132;
  void *v133;
  _QWORD *v134;
  std::__shared_weak_count *v135;
  unint64_t *v136;
  unint64_t v137;
  _QWORD *v138;
  unint64_t *v139;
  unint64_t *v140;
  unint64_t v141;
  void *v142;
  _QWORD *v143;
  std::__shared_weak_count *v144;
  unint64_t *v145;
  unint64_t v146;
  _QWORD *v147;
  unint64_t *v148;
  unint64_t *v149;
  unint64_t v150;
  void *v151;
  _QWORD *v152;
  std::__shared_weak_count *v153;
  unint64_t *v154;
  unint64_t v155;
  _QWORD *v156;
  unint64_t *v157;
  unint64_t *v158;
  unint64_t v159;
  void *v160;
  _QWORD *v161;
  std::__shared_weak_count *v162;
  unint64_t *v163;
  unint64_t v164;
  _QWORD *v165;
  unint64_t *v166;
  std::__shared_weak_count *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  unint64_t *v172;
  unint64_t v173;
  std::__shared_weak_count *v174;
  unsigned int v175;
  void *v176[2];
  uint64_t v177;
  void *__p[2];
  uint64_t v179;
  char v180;
  void *v181[2];
  uint64_t v182;
  int v183;
  void *v184;
  void **v185;
  unint64_t v186;
  std::__shared_weak_count *v187;
  __int128 __dst;
  void **v189;
  int v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  unsigned __int8 v194;
  __int128 v195;
  uint64_t v196;
  uint64_t v197;
  __int128 v198;
  uint64_t v199;
  char v200;
  char v201;
  uint64_t v202;

  v202 = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a1 + 424);
  v5 = *(std::__shared_weak_count **)(a1 + 432);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
  {
    v8 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C3F6588, 0) != 0;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_11;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_11:
    if (v8)
      goto LABEL_12;
LABEL_22:
    v11 = 0;
    v186 = 0;
    v187 = 0;
    goto LABEL_23;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v8)
    goto LABEL_22;
LABEL_12:
  v12 = *(_QWORD *)(a1 + 424);
  v11 = *(std::__shared_weak_count **)(a1 + 432);
  if (v11)
  {
    v13 = (unint64_t *)&v11->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v186 = v12;
    v187 = v11;
    if (v12)
    {
      v174 = v11;
      do
        v15 = __ldxr(v13);
      while (__stxr(v15 + 1, v13));
      v176[0] = 0;
      v176[1] = 0;
      *(_QWORD *)&__dst = v12;
      *((_QWORD *)&__dst + 1) = v11;
      do
        v16 = __ldxr(v13);
      while (__stxr(v16 + 1, v13));
      goto LABEL_61;
    }
LABEL_23:
    v17 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v17 & 1) != 0)
      goto LABEL_24;
LABEL_74:
    if (__cxa_guard_acquire(&qword_25463CF48))
    {
      *(_OWORD *)v181 = xmmword_20B5B0AE0;
      sub_20B1DFBA8((uint64_t *)v181);
      __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF48);
    }
LABEL_24:
    if (byte_25463CE1F < 0)
    {
      sub_20AEC60F4(&__dst, (void *)xmmword_25463CE08, *((unint64_t *)&xmmword_25463CE08 + 1));
    }
    else
    {
      __dst = xmmword_25463CE08;
      v189 = (void **)unk_25463CE18;
    }
    v190 = dword_25463CE20;
    sub_20AF4BC0C(&v184, (uint64_t)&__dst, 1uLL);
    if (*(char *)(a1 + 23) < 0)
    {
      sub_20AEC60F4(v181, *(void **)a1, *(_QWORD *)(a1 + 8));
    }
    else
    {
      *(_OWORD *)v181 = *(_OWORD *)a1;
      v182 = *(_QWORD *)(a1 + 16);
    }
    v183 = *(_DWORD *)(a1 + 24);
    v175 = 3;
    sub_20B0969E0((uint64_t)v176, &v175);
    *(_OWORD *)__p = *(_OWORD *)v176;
    v179 = v177;
    v176[1] = 0;
    v177 = 0;
    v176[0] = 0;
    v180 = 1;
    sub_20B099ED4((uint64_t *)&v184, (uint64_t)v181, (uint64_t)__p, (uint64_t)&v191);
    *(_OWORD *)a2 = v191;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v201)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v18 = v194;
      if (v194)
      {
        *(_OWORD *)(a2 + 16) = v192;
        *(_QWORD *)(a2 + 32) = v193;
        v193 = 0;
        v192 = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v200)
      {
        v19 = v197;
        *(_QWORD *)(a2 + 64) = v196;
        *(_OWORD *)(a2 + 48) = v195;
        v195 = 0uLL;
        *(_QWORD *)(a2 + 72) = v19;
        *(_OWORD *)(a2 + 80) = v198;
        *(_QWORD *)(a2 + 96) = v199;
        v196 = 0;
        v198 = 0uLL;
        v199 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v18 && SHIBYTE(v193) < 0)
        operator delete((void *)v192);
      if (!v180)
      {
LABEL_43:
        if (SHIBYTE(v177) < 0)
        {
          operator delete(v176[0]);
          if ((SHIBYTE(v182) & 0x80000000) == 0)
          {
LABEL_45:
            v20 = (void **)v184;
            if (v184)
              goto LABEL_46;
            goto LABEL_56;
          }
        }
        else if ((SHIBYTE(v182) & 0x80000000) == 0)
        {
          goto LABEL_45;
        }
        operator delete(v181[0]);
        v20 = (void **)v184;
        if (v184)
        {
LABEL_46:
          v21 = v185;
          if (v185 == v20)
          {
            v185 = v20;
            operator delete(v20);
            if ((SHIBYTE(v189) & 0x80000000) == 0)
              goto LABEL_57;
            goto LABEL_48;
          }
          do
          {
            if (*((char *)v21 - 9) < 0)
              operator delete(*(v21 - 4));
            v21 -= 4;
          }
          while (v21 != v20);
          v185 = v20;
          operator delete(v184);
          if (SHIBYTE(v189) < 0)
LABEL_48:
            operator delete((void *)__dst);
LABEL_57:
          if (!v11)
            return;
          goto LABEL_395;
        }
LABEL_56:
        if (SHIBYTE(v189) < 0)
          goto LABEL_48;
        goto LABEL_57;
      }
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
      if (!v180)
        goto LABEL_43;
    }
    if (SHIBYTE(v179) < 0)
      operator delete(__p[0]);
    goto LABEL_43;
  }
  v186 = *(_QWORD *)(a1 + 424);
  v187 = 0;
  if (!v12)
  {
    v11 = 0;
    v29 = atomic_load((unsigned __int8 *)&qword_25463CF48);
    if ((v29 & 1) != 0)
      goto LABEL_24;
    goto LABEL_74;
  }
  v174 = 0;
  v176[0] = 0;
  v176[1] = 0;
  __dst = v12;
LABEL_61:
  v23 = v12 + 8;
  v22 = *(unsigned __int8 **)(v12 + 8);
  v189 = v176;
  switch(*v22)
  {
    case 0u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 0);
      v25 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v24 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v24)
        v26 = 1;
      else
        v26 = v25 == 0;
      if (!v26
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v24)
        v27 = 0;
      else
        v27 = v25 >= 3;
      if (v27)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v28 = 3 * (v25 / 3);
        goto LABEL_265;
      }
      if (v25 < 3)
      {
        v28 = 0;
LABEL_266:
        v24 = 0;
        goto LABEL_267;
      }
      v28 = 3 * (v25 / 3);
      if (!v24)
      {
LABEL_265:
        if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))goto LABEL_266;
LABEL_420:
        abort();
      }
LABEL_267:
      *((_QWORD *)&v191 + 1) = v12;
      *(_QWORD *)&v192 = v11;
      if (v11)
      {
        v113 = (unint64_t *)&v11->__shared_owners_;
        do
          v114 = __ldxr(v113);
        while (__stxr(v114 + 1, v113));
      }
      *(_QWORD *)&v191 = sub_20B098F7C;
      sub_20B43CBE4(v181, 0, (void (**)(uint64_t))&v191, v28, v24);
      if ((_QWORD)v191)
        ((void (*)(int))v191)(0);
      v116 = v181[0];
      v115 = v181[1];
      v181[0] = 0;
      v181[1] = 0;
      if (0xAAAAAAAAAAAAAAABLL * v116[7] >= 0x5555555555555556)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v117 = (std::__shared_weak_count *)v181[1];
        if (v181[1])
        {
          v118 = (unint64_t *)((char *)v181[1] + 8);
          do
            v119 = __ldaxr(v118);
          while (__stlxr(v119 - 1, v118));
          if (!v119)
          {
            ((void (*)(std::__shared_weak_count *))v117->__on_zero_shared)(v117);
            std::__shared_weak_count::__release_weak(v117);
          }
        }
      }
      v120 = operator new(0x28uLL);
      v120[1] = 0;
      v120[2] = 0;
      *v120 = &off_24C40BB10;
      v120[3] = v116;
      v120[4] = v115;
      v83 = (std::__shared_weak_count *)v176[1];
      v176[0] = v120 + 3;
      v176[1] = v120;
      if (v83)
      {
        v121 = (unint64_t *)&v83->__shared_owners_;
        do
          v85 = __ldaxr(v121);
        while (__stlxr(v85 - 1, v121));
        goto LABEL_382;
      }
LABEL_384:
      v167 = (std::__shared_weak_count *)*((_QWORD *)&__dst + 1);
      if (*((_QWORD *)&__dst + 1))
      {
        v168 = (unint64_t *)(*((_QWORD *)&__dst + 1) + 8);
        do
          v169 = __ldaxr(v168);
        while (__stlxr(v169 - 1, v168));
        if (!v169)
        {
          ((void (*)(std::__shared_weak_count *))v167->__on_zero_shared)(v167);
          std::__shared_weak_count::__release_weak(v167);
        }
      }
      *(_OWORD *)a2 = *(_OWORD *)v176;
      v176[0] = 0;
      v176[1] = 0;
      *(_BYTE *)(a2 + 120) = 1;
      if (v174)
      {
        v170 = (unint64_t *)&v174->__shared_owners_;
        do
          v171 = __ldaxr(v170);
        while (__stlxr(v171 - 1, v170));
        if (!v171)
        {
          ((void (*)(std::__shared_weak_count *))v174->__on_zero_shared)(v174);
          std::__shared_weak_count::__release_weak(v174);
        }
      }
      v11 = v187;
      if (v187)
      {
LABEL_395:
        v172 = (unint64_t *)&v11->__shared_owners_;
        do
          v173 = __ldaxr(v172);
        while (__stlxr(v173 - 1, v172));
        if (!v173)
        {
          ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
          std::__shared_weak_count::__release_weak(v11);
        }
      }
      return;
    case 1u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 1);
      v46 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v45 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v45)
        v47 = 0;
      else
        v47 = v46 >= 2;
      if (v47
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v45)
        v48 = 0;
      else
        v48 = v46 >= 6;
      if (v48)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v49 = 3 * (v46 / 6);
      }
      else
      {
        if (v46 < 6)
        {
          v49 = 0;
LABEL_246:
          v45 = 0;
LABEL_247:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v104 = (unint64_t *)&v11->__shared_owners_;
            do
              v105 = __ldxr(v104);
            while (__stxr(v105 + 1, v104));
          }
          *(_QWORD *)&v191 = sub_20B098F7C;
          sub_20B43CE28(v181, 1, (void (**)(uint64_t))&v191, v49, v45);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v107 = v181[0];
          v106 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if (0xAAAAAAAAAAAAAAABLL * v107[7] >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v108 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v109 = (unint64_t *)((char *)v181[1] + 8);
              do
                v110 = __ldaxr(v109);
              while (__stlxr(v110 - 1, v109));
              if (!v110)
              {
                ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
                std::__shared_weak_count::__release_weak(v108);
              }
            }
          }
          v111 = operator new(0x28uLL);
          v111[1] = 0;
          v111[2] = 0;
          *v111 = &off_24C40BB10;
          v111[3] = v107;
          v111[4] = v106;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v111 + 3;
          v176[1] = v111;
          if (!v83)
            goto LABEL_384;
          v112 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v112);
          while (__stlxr(v85 - 1, v112));
          goto LABEL_382;
        }
        v49 = 3 * (v46 / 6);
        if (v45)
          goto LABEL_247;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_246;
    case 2u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 2);
      v56 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v55 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v55)
        v57 = 0;
      else
        v57 = v56 >= 4;
      if (v57
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v55)
        v58 = 0;
      else
        v58 = v56 >= 0xC;
      if (v58)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v59 = 3 * (v56 / 0xC);
      }
      else
      {
        if (v56 < 0xC)
        {
          v59 = 0;
LABEL_306:
          v55 = 0;
LABEL_307:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v131 = (unint64_t *)&v11->__shared_owners_;
            do
              v132 = __ldxr(v131);
            while (__stxr(v132 + 1, v131));
          }
          *(_QWORD *)&v191 = sub_20B098F7C;
          sub_20B43D070(v181, 2, (void (**)(uint64_t))&v191, v59, v55);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v134 = v181[0];
          v133 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if (0xAAAAAAAAAAAAAAABLL * v134[7] >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v135 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v136 = (unint64_t *)((char *)v181[1] + 8);
              do
                v137 = __ldaxr(v136);
              while (__stlxr(v137 - 1, v136));
              if (!v137)
              {
                ((void (*)(std::__shared_weak_count *))v135->__on_zero_shared)(v135);
                std::__shared_weak_count::__release_weak(v135);
              }
            }
          }
          v138 = operator new(0x28uLL);
          v138[1] = 0;
          v138[2] = 0;
          *v138 = &off_24C40BB10;
          v138[3] = v134;
          v138[4] = v133;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v138 + 3;
          v176[1] = v138;
          if (!v83)
            goto LABEL_384;
          v139 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v139);
          while (__stlxr(v85 - 1, v139));
          goto LABEL_382;
        }
        v59 = 3 * (v56 / 0xC);
        if (v55)
          goto LABEL_307;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_306;
    case 3u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 3);
      v66 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v65 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v65)
        v67 = 0;
      else
        v67 = v66 >= 8;
      if (v67
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v65)
        v68 = 0;
      else
        v68 = v66 >= 0x18;
      if (v68)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v69 = 3 * (v66 / 0x18);
      }
      else
      {
        if (v66 < 0x18)
        {
          v69 = 0;
LABEL_346:
          v65 = 0;
LABEL_347:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v149 = (unint64_t *)&v11->__shared_owners_;
            do
              v150 = __ldxr(v149);
            while (__stxr(v150 + 1, v149));
          }
          *(_QWORD *)&v191 = sub_20B098F7C;
          sub_20B43D2B8(v181, 3, (void (**)(uint64_t))&v191, v69, v65);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v152 = v181[0];
          v151 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if (0xAAAAAAAAAAAAAAABLL * v152[7] >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v153 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v154 = (unint64_t *)((char *)v181[1] + 8);
              do
                v155 = __ldaxr(v154);
              while (__stlxr(v155 - 1, v154));
              if (!v155)
              {
                ((void (*)(std::__shared_weak_count *))v153->__on_zero_shared)(v153);
                std::__shared_weak_count::__release_weak(v153);
              }
            }
          }
          v156 = operator new(0x28uLL);
          v156[1] = 0;
          v156[2] = 0;
          *v156 = &off_24C40BB10;
          v156[3] = v152;
          v156[4] = v151;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v156 + 3;
          v176[1] = v156;
          if (!v83)
            goto LABEL_384;
          v157 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v157);
          while (__stlxr(v85 - 1, v157));
          goto LABEL_382;
        }
        v69 = 3 * (v66 / 0x18);
        if (v65)
          goto LABEL_347;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_346;
    case 5u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 5);
      v41 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v40 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v40)
        v42 = 1;
      else
        v42 = v41 == 0;
      if (!v42
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v40)
        v43 = 0;
      else
        v43 = v41 >= 3;
      if (v43)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v44 = 3 * (v41 / 3);
      }
      else
      {
        if (v41 < 3)
        {
          v44 = 0;
LABEL_226:
          v40 = 0;
LABEL_227:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v95 = (unint64_t *)&v11->__shared_owners_;
            do
              v96 = __ldxr(v95);
            while (__stxr(v96 + 1, v95));
          }
          *(_QWORD *)&v191 = sub_20B098F7C;
          sub_20B43CAC4(v181, 5, (void (**)(uint64_t))&v191, v44, v40);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v98 = v181[0];
          v97 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if (0xAAAAAAAAAAAAAAABLL * v98[7] >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v99 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v100 = (unint64_t *)((char *)v181[1] + 8);
              do
                v101 = __ldaxr(v100);
              while (__stlxr(v101 - 1, v100));
              if (!v101)
              {
                ((void (*)(std::__shared_weak_count *))v99->__on_zero_shared)(v99);
                std::__shared_weak_count::__release_weak(v99);
              }
            }
          }
          v102 = operator new(0x28uLL);
          v102[1] = 0;
          v102[2] = 0;
          *v102 = &off_24C40BB10;
          v102[3] = v98;
          v102[4] = v97;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v102 + 3;
          v176[1] = v102;
          if (!v83)
            goto LABEL_384;
          v103 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v103);
          while (__stlxr(v85 - 1, v103));
          goto LABEL_382;
        }
        v44 = 3 * (v41 / 3);
        if (v40)
          goto LABEL_227;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_226;
    case 6u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 6);
      v51 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v50 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v50)
        v52 = 0;
      else
        v52 = v51 >= 2;
      if (v52
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v50)
        v53 = 0;
      else
        v53 = v51 >= 6;
      if (v53)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v54 = 3 * (v51 / 6);
      }
      else
      {
        if (v51 < 6)
        {
          v54 = 0;
LABEL_286:
          v50 = 0;
LABEL_287:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v122 = (unint64_t *)&v11->__shared_owners_;
            do
              v123 = __ldxr(v122);
            while (__stxr(v123 + 1, v122));
          }
          *(_QWORD *)&v191 = sub_20B098F7C;
          sub_20B43CD04(v181, 6, (void (**)(uint64_t))&v191, v54, v50);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v125 = v181[0];
          v124 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if (0xAAAAAAAAAAAAAAABLL * v125[7] >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v126 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v127 = (unint64_t *)((char *)v181[1] + 8);
              do
                v128 = __ldaxr(v127);
              while (__stlxr(v128 - 1, v127));
              if (!v128)
              {
                ((void (*)(std::__shared_weak_count *))v126->__on_zero_shared)(v126);
                std::__shared_weak_count::__release_weak(v126);
              }
            }
          }
          v129 = operator new(0x28uLL);
          v129[1] = 0;
          v129[2] = 0;
          *v129 = &off_24C40BB10;
          v129[3] = v125;
          v129[4] = v124;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v129 + 3;
          v176[1] = v129;
          if (!v83)
            goto LABEL_384;
          v130 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v130);
          while (__stlxr(v85 - 1, v130));
          goto LABEL_382;
        }
        v54 = 3 * (v51 / 6);
        if (v50)
          goto LABEL_287;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_286;
    case 7u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 7);
      v71 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v70 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v70)
        v72 = 0;
      else
        v72 = v71 >= 4;
      if (v72
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v70)
        v73 = 0;
      else
        v73 = v71 >= 0xC;
      if (v73)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v74 = 3 * (v71 / 0xC);
      }
      else
      {
        if (v71 < 0xC)
        {
          v74 = 0;
LABEL_366:
          v70 = 0;
LABEL_367:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v158 = (unint64_t *)&v11->__shared_owners_;
            do
              v159 = __ldxr(v158);
            while (__stxr(v159 + 1, v158));
          }
          *(_QWORD *)&v191 = sub_20B098F7C;
          sub_20B43CF4C(v181, 7, (void (**)(uint64_t))&v191, v74, v70);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v161 = v181[0];
          v160 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if (0xAAAAAAAAAAAAAAABLL * v161[7] >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v162 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v163 = (unint64_t *)((char *)v181[1] + 8);
              do
                v164 = __ldaxr(v163);
              while (__stlxr(v164 - 1, v163));
              if (!v164)
              {
                ((void (*)(std::__shared_weak_count *))v162->__on_zero_shared)(v162);
                std::__shared_weak_count::__release_weak(v162);
              }
            }
          }
          v165 = operator new(0x28uLL);
          v165[1] = 0;
          v165[2] = 0;
          *v165 = &off_24C40BB10;
          v165[3] = v161;
          v165[4] = v160;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v165 + 3;
          v176[1] = v165;
          if (!v83)
            goto LABEL_384;
          v166 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v166);
          while (__stlxr(v85 - 1, v166));
          goto LABEL_382;
        }
        v74 = 3 * (v71 / 0xC);
        if (v70)
          goto LABEL_367;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_366;
    case 8u:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 8);
      v61 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v60 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v60)
        v62 = 0;
      else
        v62 = v61 >= 8;
      if (v62
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v60)
        v63 = 0;
      else
        v63 = v61 >= 0x18;
      if (v63)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v64 = 3 * (v61 / 0x18);
      }
      else
      {
        if (v61 < 0x18)
        {
          v64 = 0;
LABEL_326:
          v60 = 0;
LABEL_327:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v140 = (unint64_t *)&v11->__shared_owners_;
            do
              v141 = __ldxr(v140);
            while (__stxr(v141 + 1, v140));
          }
          *(_QWORD *)&v191 = sub_20B098F7C;
          sub_20B43D194(v181, 8, (void (**)(uint64_t))&v191, v64, v60);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v143 = v181[0];
          v142 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if (0xAAAAAAAAAAAAAAABLL * v143[7] >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v144 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v145 = (unint64_t *)((char *)v181[1] + 8);
              do
                v146 = __ldaxr(v145);
              while (__stlxr(v146 - 1, v145));
              if (!v146)
              {
                ((void (*)(std::__shared_weak_count *))v144->__on_zero_shared)(v144);
                std::__shared_weak_count::__release_weak(v144);
              }
            }
          }
          v147 = operator new(0x28uLL);
          v147[1] = 0;
          v147[2] = 0;
          *v147 = &off_24C40BB10;
          v147[3] = v143;
          v147[4] = v142;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v147 + 3;
          v176[1] = v147;
          if (!v83)
            goto LABEL_384;
          v148 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v148);
          while (__stlxr(v85 - 1, v148));
          goto LABEL_382;
        }
        v64 = 3 * (v61 / 0x18);
        if (v60)
          goto LABEL_327;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_326;
    case 0xBu:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 11);
      v36 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v35 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v35)
        v37 = 0;
      else
        v37 = v36 >= 4;
      if (v37
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v35)
        v38 = 0;
      else
        v38 = v36 >= 0xC;
      if (v38)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v39 = 3 * (v36 / 0xC);
      }
      else
      {
        if (v36 < 0xC)
        {
          v39 = 0;
LABEL_206:
          v35 = 0;
LABEL_207:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v86 = (unint64_t *)&v11->__shared_owners_;
            do
              v87 = __ldxr(v86);
            while (__stxr(v87 + 1, v86));
          }
          *(_QWORD *)&v191 = sub_20B098F7C;
          sub_20B43D3DC(v181, 11, (void (**)(uint64_t))&v191, v39, v35);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v89 = v181[0];
          v88 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if (0xAAAAAAAAAAAAAAABLL * v89[7] >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v90 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v91 = (unint64_t *)((char *)v181[1] + 8);
              do
                v92 = __ldaxr(v91);
              while (__stlxr(v92 - 1, v91));
              if (!v92)
              {
                ((void (*)(std::__shared_weak_count *))v90->__on_zero_shared)(v90);
                std::__shared_weak_count::__release_weak(v90);
              }
            }
          }
          v93 = operator new(0x28uLL);
          v93[1] = 0;
          v93[2] = 0;
          *v93 = &off_24C40BB10;
          v93[3] = v89;
          v93[4] = v88;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v93 + 3;
          v176[1] = v93;
          if (!v83)
            goto LABEL_384;
          v94 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v94);
          while (__stlxr(v85 - 1, v94));
          goto LABEL_382;
        }
        v39 = 3 * (v36 / 0xC);
        if (v35)
          goto LABEL_207;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_206;
    case 0xCu:
      sub_20B43D624((unsigned __int8 **)(v12 + 8), 12);
      v31 = *(_QWORD *)(*(_QWORD *)v23 + 40);
      v30 = *(_QWORD *)(*(_QWORD *)v23 + 48);
      if (v30)
        v32 = 0;
      else
        v32 = v31 >= 8;
      if (v32
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5AD497, 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      if (v30)
        v33 = 0;
      else
        v33 = v31 >= 0x18;
      if (v33)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
        {
          goto LABEL_420;
        }
        v34 = 3 * (v31 / 0x18);
      }
      else
      {
        if (v31 < 0x18)
        {
          v34 = 0;
LABEL_186:
          v30 = 0;
LABEL_187:
          *((_QWORD *)&v191 + 1) = v12;
          *(_QWORD *)&v192 = v11;
          if (v11)
          {
            v75 = (unint64_t *)&v11->__shared_owners_;
            do
              v76 = __ldxr(v75);
            while (__stxr(v76 + 1, v75));
          }
          *(_QWORD *)&v191 = sub_20B098F7C;
          sub_20B43D500(v181, 12, (void (**)(uint64_t))&v191, v34, v30);
          if ((_QWORD)v191)
            ((void (*)(int))v191)(0);
          v78 = v181[0];
          v77 = v181[1];
          v181[0] = 0;
          v181[1] = 0;
          if (0xAAAAAAAAAAAAAAABLL * v78[7] >= 0x5555555555555556)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Container/src/Points.cpp", 43, (uint64_t)"this->numbers.Size() % N == 0", 29, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v79 = (std::__shared_weak_count *)v181[1];
            if (v181[1])
            {
              v80 = (unint64_t *)((char *)v181[1] + 8);
              do
                v81 = __ldaxr(v80);
              while (__stlxr(v81 - 1, v80));
              if (!v81)
              {
                ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                std::__shared_weak_count::__release_weak(v79);
              }
            }
          }
          v82 = operator new(0x28uLL);
          v82[1] = 0;
          v82[2] = 0;
          *v82 = &off_24C40BB10;
          v82[3] = v78;
          v82[4] = v77;
          v83 = (std::__shared_weak_count *)v176[1];
          v176[0] = v82 + 3;
          v176[1] = v82;
          if (!v83)
            goto LABEL_384;
          v84 = (unint64_t *)&v83->__shared_owners_;
          do
            v85 = __ldaxr(v84);
          while (__stlxr(v85 - 1, v84));
LABEL_382:
          if (!v85)
          {
            ((void (*)(std::__shared_weak_count *))v83->__on_zero_shared)(v83);
            std::__shared_weak_count::__release_weak(v83);
          }
          goto LABEL_384;
        }
        v34 = 3 * (v31 / 0x18);
        if (v30)
          goto LABEL_187;
      }
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_420;
      }
      goto LABEL_186;
    default:
      sub_20B521E58(*v22);
  }
}

void sub_20B098794(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,void *__p,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_20B098B74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BAC0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B098B84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BAC0;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B098BB4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20B098C10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BB10;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B098C20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BB10;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B098C50(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

void sub_20B098CAC(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B098CE0()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B098D2C(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20B098CAC;
  return result;
}

__n128 sub_20B098D68(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20B098CAC;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20B098D94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con6PointsILj2EEENS3_7PackageELj3EvEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con6PointsILj2EEENS3_7PackageELj3EvEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con6PointsILj2EEENS3_7PackageELj3EvEEEE"))return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con6PointsILj2EEENS3_7PackageELj3EvEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5E34B4)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_20B098E14(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B098E48()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B098E94(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20B098E14;
  return result;
}

__n128 sub_20B098ED0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20B098E14;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20B098EFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrIKN4cv3d3kit3con6PointsILj2EEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3con6PointsILj2EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrIKN4cv3d3kit3con6PointsILj2EEEEE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3con6PointsILj2EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5E34EC)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_20B098F7C(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B098FB0()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B098FFC(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20B098F7C;
  return result;
}

__n128 sub_20B099038(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20B098F7C;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20B099064(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con6PointsILj3EEENS3_7PackageELj4EvEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con6PointsILj3EEENS3_7PackageELj4EvEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con6PointsILj3EEENS3_7PackageELj4EvEEEE"))return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3viz11PackageDataINS2_3con6PointsILj3EEENS3_7PackageELj4EvEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5E3550)
  {
    return 0;
  }
  return v5 + 8;
}

void sub_20B0990E4(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B099118()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B099164(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20B0990E4;
  return result;
}

__n128 sub_20B0991A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20B0990E4;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20B0991CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  unint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if ((char *)v6 != "NSt3__110shared_ptrIKN4cv3d3kit3con6PointsILj3EEEEE")
    {
      if (((v6 & (unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3con6PointsILj3EEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v6, "NSt3__110shared_ptrIKN4cv3d3kit3con6PointsILj3EEEEE"))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIKN4cv3d3kit3con6PointsILj3EEEEE" & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5E3588)
  {
    return 0;
  }
  return v5 + 8;
}

void (***sub_20B09924C())(std::error_category *__hidden this)
{
  unsigned __int8 v0;

  v0 = atomic_load((unsigned __int8 *)&qword_25463CD30);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CD30))
    return &off_253EC3188;
  __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC3188, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463CD30);
  return &off_253EC3188;
}

const char *sub_20B0992C0()
{
  return "VisualLogger";
}

__n128 sub_20B0992CC@<Q0>(int a1@<W1>, uint64_t a2@<X8>, __n128 result@<Q0>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  __int128 v9;
  const char *v10;
  const char *v11;
  char *v12;
  __int128 v13;
  const char *v14;
  _WORD *v15;
  __int16 v16;
  const char *v17;
  char *v18;
  __int128 v19;
  const char *v20;
  char *v21;
  _QWORD *v22;
  __int128 v23;
  __n128 *v24;
  char *v25;
  char *v26;
  __int128 v27;
  const char *v28;
  __int128 v29;
  char *v30;

  switch(a1)
  {
    case 0:
      *(_BYTE *)(a2 + 23) = 8;
      strcpy((char *)a2, "no error");
      return result;
    case 1:
      *(_BYTE *)(a2 + 23) = 13;
      strcpy((char *)a2, "unknown error");
      return result;
    case 2:
      v4 = (char *)operator new(0x48uLL);
      *(_QWORD *)a2 = v4;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E3610;
      strcpy(v4, "failed to create VZ object, possibly due to an unexpected exception");
      result.n128_u64[0] = *(_QWORD *)"ibly due to an unexpected exception";
      return result;
    case 3:
      v5 = (char *)operator new(0x58uLL);
      *(_QWORD *)a2 = v5;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E3600;
      result.n128_u64[0] = *(_QWORD *)"failed to convert or assign to/from VZ object, possibly due to an unexpected exception";
      strcpy(v5, "failed to convert or assign to/from VZ object, possibly due to an unexpected exception");
      return result;
    case 4:
      v6 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v6;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E35F0;
      strcpy(v6, "unexpected runtime exception in VZ method");
      result.n128_u64[0] = *(_QWORD *)"ion in VZ method";
      return result;
    case 5:
      *(_BYTE *)(a2 + 23) = 9;
      strcpy((char *)a2, "I/O error");
      return result;
    case 10:
      *(_BYTE *)(a2 + 23) = 16;
      result.n128_u64[0] = *(_QWORD *)"invalid argument";
      strcpy((char *)a2, "invalid argument");
      return result;
    case 11:
      v7 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v7;
      *(_OWORD *)(a2 + 8) = xmmword_20B5C7CA0;
      strcpy(v7, "invalid null pointer argument");
      result.n128_u64[0] = *(_QWORD *)"pointer argument";
      return result;
    case 12:
      v8 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v8;
      v9 = xmmword_20B5B03D0;
      v10 = "operation not supported";
      goto LABEL_13;
    case 13:
      v8 = (char *)operator new(0x19uLL);
      *(_QWORD *)a2 = v8;
      v9 = xmmword_20B5B03D0;
      v10 = "operation has no effect";
LABEL_13:
      *(_OWORD *)(a2 + 8) = v9;
      result = *(__n128 *)v10;
      *(_OWORD *)v8 = *(_OWORD *)v10;
      *(_QWORD *)(v8 + 15) = *(_QWORD *)(v10 + 15);
      v8[23] = 0;
      return result;
    case 14:
      *(_BYTE *)(a2 + 23) = 16;
      result.n128_u64[0] = *(_QWORD *)"filesystem error";
      strcpy((char *)a2, "filesystem error");
      return result;
    case 15:
      *(_BYTE *)(a2 + 23) = 17;
      result.n128_u64[0] = *(_QWORD *)"invalid timestamp";
      strcpy((char *)a2, "invalid timestamp");
      return result;
    case 16:
      v11 = "inconsistent timestamp";
      goto LABEL_25;
    case 17:
      *(_BYTE *)(a2 + 23) = 18;
      result.n128_u64[0] = *(_QWORD *)"index out of range";
      strcpy((char *)a2, "index out of range");
      return result;
    case 18:
      v12 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v12;
      v13 = xmmword_20B5E35D0;
      v14 = "information not available";
      goto LABEL_34;
    case 19:
      v15 = operator new(0x28uLL);
      *(_QWORD *)a2 = v15;
      *(_OWORD *)(a2 + 8) = xmmword_20B5B4860;
      v16 = 29285;
      v17 = "data package unknown to serializer";
      goto LABEL_40;
    case 20:
      v18 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v18;
      v19 = xmmword_20B5B35F0;
      v20 = "data type unknown to package";
      goto LABEL_28;
    case 21:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"failed to load data";
      strcpy((char *)a2, "failed to load data");
      return result;
    case 22:
      *(_BYTE *)(a2 + 23) = 11;
      strcpy((char *)a2, "invalid key");
      return result;
    case 30:
      v21 = (char *)operator new(0x58uLL);
      *(_QWORD *)a2 = v21;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E35E0;
      result.n128_u64[0] = *(_QWORD *)"ot inherit its enable-state but must be either enabled or disabled";
      strcpy(v21, "root logger cannot inherit its enable-state but must be either enabled or disabled");
      return result;
    case 31:
      v11 = "data export queue full";
LABEL_25:
      result = *(__n128 *)v11;
      *(_OWORD *)a2 = *(_OWORD *)v11;
      *(_QWORD *)(a2 + 14) = *(_QWORD *)(v11 + 14);
      *(_WORD *)(a2 + 22) = 5632;
      return result;
    case 32:
      *(_BYTE *)(a2 + 23) = 17;
      result.n128_u64[0] = *(_QWORD *)"inconsistent mesh";
      strcpy((char *)a2, "inconsistent mesh");
      return result;
    case 33:
      v18 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v18;
      v19 = xmmword_20B5B35F0;
      v20 = "mesh structure not supported";
LABEL_28:
      *(_OWORD *)(a2 + 8) = v19;
      *(_OWORD *)v18 = *(_OWORD *)v20;
      result = *(__n128 *)(v20 + 12);
      *(__n128 *)(v18 + 12) = result;
      v18[28] = 0;
      return result;
    case 35:
      v22 = operator new(0x20uLL);
      *(_QWORD *)a2 = v22;
      v23 = xmmword_20B5E35C0;
      v24 = (__n128 *)"server receive exception";
      goto LABEL_36;
    case 36:
      v12 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v12;
      v13 = xmmword_20B5E35D0;
      v14 = "client can't reach server";
      goto LABEL_34;
    case 37:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"client send failure";
      strcpy((char *)a2, "client send failure");
      return result;
    case 38:
      *(_BYTE *)(a2 + 23) = 19;
      result.n128_u64[0] = *(_QWORD *)"server send failure";
      strcpy((char *)a2, "server send failure");
      return result;
    case 39:
      v12 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v12;
      v13 = xmmword_20B5E35D0;
      v14 = "server can't reach client";
LABEL_34:
      *(_OWORD *)(a2 + 8) = v13;
      *(_OWORD *)v12 = *(_OWORD *)v14;
      result = *(__n128 *)(v14 + 9);
      *(__n128 *)(v12 + 9) = result;
      v12[25] = 0;
      return result;
    case 40:
      v22 = operator new(0x20uLL);
      *(_QWORD *)a2 = v22;
      v23 = xmmword_20B5E35C0;
      v24 = (__n128 *)"client receive exception";
LABEL_36:
      *(_OWORD *)(a2 + 8) = v23;
      result = *v24;
      *(__n128 *)v22 = *v24;
      v22[2] = v24[1].n128_u64[0];
      *((_BYTE *)v22 + 24) = 0;
      return result;
    case 41:
      v25 = (char *)operator new(0x30uLL);
      *(_QWORD *)a2 = v25;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E35B0;
      strcpy(v25, "server cannot serialize data of unknown package");
      result.n128_u64[0] = *(_QWORD *)" unknown package";
      return result;
    case 42:
      v26 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v26;
      v27 = xmmword_20B5E3590;
      v28 = "server serialization failed";
      goto LABEL_44;
    case 43:
      v15 = operator new(0x28uLL);
      *(_QWORD *)a2 = v15;
      *(_OWORD *)(a2 + 8) = xmmword_20B5B4860;
      v16 = 25701;
      v17 = "client synchronization is disabled";
LABEL_40:
      v15[16] = v16;
      result = *(__n128 *)v17;
      v29 = *((_OWORD *)v17 + 1);
      *(_OWORD *)v15 = *(_OWORD *)v17;
      *((_OWORD *)v15 + 1) = v29;
      *((_BYTE *)v15 + 34) = 0;
      return result;
    case 44:
      v30 = (char *)operator new(0x28uLL);
      *(_QWORD *)a2 = v30;
      *(_OWORD *)(a2 + 8) = xmmword_20B5E35A0;
      result.n128_u64[0] = *(_QWORD *)"timeout waiting for peer response";
      strcpy(v30, "timeout waiting for peer response");
      return result;
    case 45:
      *(_BYTE *)(a2 + 23) = 15;
      strcpy((char *)a2, "invalid peer ID");
      return result;
    case 46:
      v26 = (char *)operator new(0x20uLL);
      *(_QWORD *)a2 = v26;
      v27 = xmmword_20B5E3590;
      v28 = "network configuration issue";
LABEL_44:
      *(_OWORD *)(a2 + 8) = v27;
      *(_OWORD *)v26 = *(_OWORD *)v28;
      result = *(__n128 *)(v28 + 11);
      *(__n128 *)(v26 + 11) = result;
      v26[27] = 0;
      break;
    default:
      *(_BYTE *)(a2 + 23) = 18;
      result.n128_u64[0] = *(_QWORD *)"unknown error code";
      strcpy((char *)a2, "unknown error code");
      break;
  }
  return result;
}

BOOL sub_20B099A18(uint64_t a1)
{
  unsigned __int8 v2;
  const char *v3;
  const char *v4;
  size_t v5;
  uint64_t *v6;
  char *v9;

  v2 = atomic_load((unsigned __int8 *)&qword_25463CD50);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463CD50))
  {
    sub_20B09924C();
    v9 = (char *)((const char *(__cdecl *)())off_253EC3188[2])();
    sub_20AEC0D64(&qword_25463CD38, v9);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_25463CD38, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CD50);
  }
  v3 = (const char *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
  v4 = v3;
  if (byte_25463CD4F >= 0)
    v5 = byte_25463CD4F;
  else
    v5 = qword_25463CD40;
  if (v5 != strlen(v3))
    return 0;
  v6 = byte_25463CD4F >= 0 ? &qword_25463CD38 : (uint64_t *)qword_25463CD38;
  if (memcmp(v6, v4, v5))
    return 0;
  return *(_DWORD *)a1 == 31 || *(_DWORD *)a1 == 41;
}

void sub_20B099B38(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CD50);
  _Unwind_Resume(a1);
}

void sub_20B099B50(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;

  sub_20B099C00(__p, a1);
  sub_20AECCC3C(1u, (__int128 *)__p, a2);
  if (v11)
  {
    if (!v10)
      goto LABEL_5;
    if (v9 < 0)
    {
      operator delete(v8);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_5:
        if (!v5)
          return;
        goto LABEL_6;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v6);
    if (!v5)
      return;
LABEL_6:
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_20B099BEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECCDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B099C00(_BYTE *__dst, __int128 *a2)
{
  __int128 v3;

  *__dst = 0;
  __dst[96] = 0;
  if (*((_BYTE *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)a2, *((_QWORD *)a2 + 1));
    }
    else
    {
      v3 = *a2;
      *((_QWORD *)__dst + 2) = *((_QWORD *)a2 + 2);
      *(_OWORD *)__dst = v3;
    }
    __dst[24] = 1;
    __dst[32] = 0;
    __dst[88] = 0;
    __dst[96] = 1;
  }
  return __dst;
}

void sub_20B099C70(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 + 96))
  {
    if (*(_BYTE *)(v1 + 88))
    {
      if (*(char *)(v1 + 87) < 0)
        operator delete(*(void **)(v1 + 64));
      if (*(char *)(v1 + 55) < 0)
        operator delete(*(void **)(v1 + 32));
    }
    if (*(_BYTE *)(v1 + 24))
    {
      if (*(char *)(v1 + 23) < 0)
        operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B099CC4(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;

  sub_20B099C00(__p, a1);
  sub_20AECCC3C(0xBu, (__int128 *)__p, a2);
  if (v11)
  {
    if (!v10)
      goto LABEL_5;
    if (v9 < 0)
    {
      operator delete(v8);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_5:
        if (!v5)
          return;
        goto LABEL_6;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v6);
    if (!v5)
      return;
LABEL_6:
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_20B099D60(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECCDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B099D74(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;

  sub_20B099C00(__p, a1);
  sub_20AECCC3C(4u, (__int128 *)__p, a2);
  if (v11)
  {
    if (!v10)
      goto LABEL_5;
    if (v9 < 0)
    {
      operator delete(v8);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_5:
        if (!v5)
          return;
        goto LABEL_6;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v6);
    if (!v5)
      return;
LABEL_6:
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_20B099E10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECCDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B099E24(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;

  sub_20B099C00(__p, a1);
  sub_20AECCC3C(0xAu, (__int128 *)__p, a2);
  if (v11)
  {
    if (!v10)
      goto LABEL_5;
    if (v9 < 0)
    {
      operator delete(v8);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_5:
        if (!v5)
          return;
        goto LABEL_6;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v6);
    if (!v5)
      return;
LABEL_6:
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_20B099EC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECCDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B099ED4@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  int v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  int v17;
  unint64_t v18;
  const void *v19;
  size_t v20;
  __int128 *p_dst;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  void *__p[2];
  unint64_t v27;
  char v28;
  void *v29;
  char v30;
  void *v31;
  char v32;
  char v33;
  char v34;
  _QWORD *v35;
  _QWORD v36[2];
  _QWORD v37[3];
  const void *v38;
  uint64_t v39;
  const void *v40;
  unint64_t v41;
  void *v42;
  char v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  __int128 __dst;
  unint64_t v48;
  int v49;

  sub_20AEC0BD8((uint64_t)v36);
  if (*(_BYTE *)(a3 + 24))
  {
    v8 = *(char *)(a3 + 23);
    if (v8 >= 0)
      v9 = a3;
    else
      v9 = *(_QWORD *)a3;
    if (v8 >= 0)
      v10 = *(unsigned __int8 *)(a3 + 23);
    else
      v10 = *(_QWORD *)(a3 + 8);
    v11 = sub_20AEC01D0(v37, v9, v10);
    sub_20AEC01D0(v11, (uint64_t)", ", 2);
  }
  v35 = v36;
  sub_20AEC01D0(v37, (uint64_t)"required data id = ", 19);
  if (a1[1] - *a1 == 32)
  {
    sub_20B09A35C(&v35, *a1);
    goto LABEL_27;
  }
  sub_20AEC01D0(v37, (uint64_t)"any of {", 8);
  v13 = *a1;
  v12 = a1[1];
  if (*a1 != v12)
  {
    if (*(char *)(v13 + 23) < 0)
    {
      sub_20AEC60F4(&__dst, *(void **)v13, *(_QWORD *)(v13 + 8));
    }
    else
    {
      v14 = *(_OWORD *)v13;
      v48 = *(_QWORD *)(v13 + 16);
      __dst = v14;
    }
    v49 = *(_DWORD *)(v13 + 24);
    sub_20B09A35C(&v35, (uint64_t)&__dst);
    if ((SHIBYTE(v48) & 0x80000000) == 0)
    {
      v15 = v13 + 32;
      if (v15 == v12)
        goto LABEL_26;
      do
      {
LABEL_21:
        if (*(char *)(v15 + 23) < 0)
        {
          sub_20AEC60F4(&__dst, *(void **)v15, *(_QWORD *)(v15 + 8));
        }
        else
        {
          v16 = *(_OWORD *)v15;
          v48 = *(_QWORD *)(v15 + 16);
          __dst = v16;
        }
        v49 = *(_DWORD *)(v15 + 24);
        sub_20AEC01D0(v37, (uint64_t)", ", 2);
        sub_20B09A35C(&v35, (uint64_t)&__dst);
        if (SHIBYTE(v48) < 0)
          operator delete((void *)__dst);
        v15 += 32;
      }
      while (v15 != v12);
      goto LABEL_26;
    }
    operator delete((void *)__dst);
    v15 = v13 + 32;
    if (v15 != v12)
      goto LABEL_21;
  }
LABEL_26:
  sub_20AEC01D0(v37, (uint64_t)"}", 1);
LABEL_27:
  sub_20AEC01D0(v37, (uint64_t)", actual data id = ", 19);
  sub_20B09A35C(&v35, a2);
  if ((v45 & 0x10) != 0)
  {
    v18 = v44;
    if (v44 < v41)
    {
      v44 = v41;
      v18 = v41;
    }
    v19 = v40;
    v20 = v18 - (_QWORD)v40;
    if (v18 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_55;
  }
  else
  {
    if ((v45 & 8) == 0)
    {
      HIBYTE(v48) = 0;
      LOBYTE(__dst) = 0;
      v17 = 0;
LABEL_36:
      *(_OWORD *)__p = __dst;
      v27 = v48;
      goto LABEL_42;
    }
    v19 = v38;
    v20 = v39 - (_QWORD)v38;
    if ((unint64_t)(v39 - (_QWORD)v38) >= 0x7FFFFFFFFFFFFFF8)
LABEL_55:
      sub_20AEC0138();
  }
  if (v20 >= 0x17)
  {
    v22 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v22 = v20 | 7;
    v23 = v22 + 1;
    p_dst = (__int128 *)operator new(v22 + 1);
    *((_QWORD *)&__dst + 1) = v20;
    v48 = v23 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
LABEL_40:
    memmove(p_dst, v19, v20);
    *((_BYTE *)p_dst + v20) = 0;
    v17 = SHIBYTE(v48);
    if ((SHIBYTE(v48) & 0x80000000) == 0)
      goto LABEL_36;
    goto LABEL_41;
  }
  HIBYTE(v48) = v20;
  p_dst = &__dst;
  if (v20)
    goto LABEL_40;
  LOBYTE(__dst) = 0;
  v17 = SHIBYTE(v48);
  if ((SHIBYTE(v48) & 0x80000000) == 0)
    goto LABEL_36;
LABEL_41:
  sub_20AEC60F4(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
LABEL_42:
  v28 = 1;
  LOBYTE(v29) = 0;
  v33 = 0;
  v34 = 1;
  sub_20AECCC3C(0xCu, (__int128 *)__p, a4);
  if (!v34)
    goto LABEL_49;
  if (v33)
  {
    if ((v32 & 0x80000000) == 0)
    {
      if ((v30 & 0x80000000) == 0)
        goto LABEL_46;
LABEL_57:
      operator delete(v29);
      if (!v28)
        goto LABEL_49;
      goto LABEL_47;
    }
    operator delete(v31);
    if (v30 < 0)
      goto LABEL_57;
  }
LABEL_46:
  if (!v28)
    goto LABEL_49;
LABEL_47:
  if (SHIBYTE(v27) < 0)
    operator delete(__p[0]);
LABEL_49:
  if (v17 < 0)
    operator delete((void *)__dst);
  v36[0] = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v37[0] = v24;
  v37[1] = MEMORY[0x24BEDB848] + 16;
  if (v43 < 0)
    operator delete(v42);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x20BD35758](&v46);
}

void sub_20B09A2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  uint64_t v16;
  va_list va;

  va_start(va, a16);
  if (*(char *)(v16 - 73) < 0)
    operator delete(*(void **)(v16 - 96));
  sub_20AEC2E08((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B09A35C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned int *v6;
  int v7;
  size_t v8;
  void *p_p;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 *p_dst;
  _BOOL4 v23;
  _QWORD *v24;
  uint64_t v25;
  void *__p;
  size_t v27;
  int64_t v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31[2];
  char v32;
  __int128 __dst;
  char *v34;

  v4 = *a1;
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v29 = (_QWORD *)v5;
  v30 = (_QWORD *)(v5 + 16);
  v6 = (unsigned int *)(a2 + 24);
  v31[0] = a2;
  v31[1] = a2 + 24;
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  LOBYTE(__dst) = 1;
  *((_QWORD *)&__dst + 1) = &v30;
  v34 = &v32;
  sub_20AFAA494(v31, (uint64_t)&__dst);
  sub_20AEC01D0(v30, (uint64_t)"}", 1);
  v7 = *(_DWORD *)(v5 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v5 + 112);
    v11 = *(_QWORD *)(v5 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v5 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v5 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_45;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v28) = 0;
      p_p = &__p;
      goto LABEL_14;
    }
    v12 = *(const void **)(v5 + 40);
    v8 = *(_QWORD *)(v5 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_45:
      sub_20AEC0138();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    p_p = operator new(v13 + 1);
    v27 = v8;
    v28 = v14 | 0x8000000000000000;
    __p = p_p;
    goto LABEL_13;
  }
  HIBYTE(v28) = v8;
  p_p = &__p;
  if (v8)
LABEL_13:
    memmove(p_p, v12, v8);
LABEL_14:
  *((_BYTE *)p_p + v8) = 0;
  v15 = v29;
  if (v29)
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *v29 = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)((char *)v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    v15[3] = MEMORY[0x24BEDB848] + 16;
    v15[2] = v18;
    if (*((char *)v15 + 111) < 0)
      operator delete((void *)v15[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v15 + 16);
    MEMORY[0x20BD3583C](v15, 0x10B2C40EED050F3);
  }
  if (v28 >= 0)
    v19 = &__p;
  else
    v19 = __p;
  if (v28 >= 0)
    v20 = HIBYTE(v28);
  else
    v20 = v27;
  sub_20AEC01D0((_QWORD *)(v4 + 16), (uint64_t)v19, v20);
  if (SHIBYTE(v28) < 0)
  {
    operator delete(__p);
    if ((*(char *)(a2 + 23) & 0x80000000) == 0)
      goto LABEL_26;
  }
  else if ((*(char *)(a2 + 23) & 0x80000000) == 0)
  {
LABEL_26:
    __dst = *(_OWORD *)a2;
    v34 = *(char **)(a2 + 16);
    goto LABEL_29;
  }
  sub_20AEC60F4(&__dst, *(void **)a2, *(_QWORD *)(a2 + 8));
LABEL_29:
  v21 = HIBYTE(v34);
  if (SHIBYTE(v34) < 0)
    v21 = *((_QWORD *)&__dst + 1);
  if (v21 == 8)
  {
    p_dst = &__dst;
    if (SHIBYTE(v34) < 0)
      p_dst = (__int128 *)__dst;
    v23 = *(_QWORD *)p_dst == *(_QWORD *)"cv3d.viz";
    if (SHIBYTE(v34) < 0)
    {
LABEL_39:
      operator delete((void *)__dst);
      if (!v23)
        return;
      goto LABEL_40;
    }
  }
  else
  {
    v23 = 0;
    if (SHIBYTE(v34) < 0)
      goto LABEL_39;
  }
  if (!v23)
    return;
LABEL_40:
  v24 = (_QWORD *)(*a1 + 16);
  sub_20AEC01D0(v24, (uint64_t)" (", 2);
  v25 = *v6;
  if (v25 >= 0xE
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/DataType.cpp", 43, (uint64_t)"idx < static_cast<uint32_t>(DataType::End)", 42, (uint64_t)&unk_20B5A796E, 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20AEC01D0(v24, (uint64_t)(&off_24C410620)[2 * v25], (uint64_t)(&off_24C410620)[2 * v25 + 1]);
  sub_20AEC01D0(v24, (uint64_t)")", 1);
}

void sub_20B09A6E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B09A724(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B09A738(__int128 *a1@<X0>, uint64_t a2@<X8>)
{
  void *__p[2];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;

  sub_20B099C00(__p, a1);
  sub_20AECCC3C(0xEu, (__int128 *)__p, a2);
  if (v11)
  {
    if (!v10)
      goto LABEL_5;
    if (v9 < 0)
    {
      operator delete(v8);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_5:
        if (!v5)
          return;
        goto LABEL_6;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_5;
    }
    operator delete(v6);
    if (!v5)
      return;
LABEL_6:
    if (v4 < 0)
      operator delete(__p[0]);
  }
}

void sub_20B09A7D4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECCDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B09A7E8(unsigned __int8 *a1@<X0>, const char *a2@<X1>, uint64_t a3@<X8>)
{
  void *v4[2];
  uint64_t v5;
  void *__p[2];
  uint64_t v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  const char *v15;

  v15 = a2;
  sub_20B09A924(&v15, (uint64_t)" peer with ID ", a1, (uint64_t)" not found");
  if (SHIBYTE(v5) < 0)
  {
    sub_20AEC60F4(__p, v4[0], (unint64_t)v4[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v4;
    v7 = v5;
  }
  v8 = 1;
  LOBYTE(v9) = 0;
  v13 = 0;
  v14 = 1;
  sub_20AECCC3C(0x2Du, (__int128 *)__p, a3);
  if (!v14)
    goto LABEL_11;
  if (v13)
  {
    if ((v12 & 0x80000000) == 0)
    {
      if ((v10 & 0x80000000) == 0)
        goto LABEL_8;
LABEL_14:
      operator delete(v9);
      if (!v8)
        goto LABEL_11;
      goto LABEL_9;
    }
    operator delete(v11);
    if (v10 < 0)
      goto LABEL_14;
  }
LABEL_8:
  if (!v8)
    goto LABEL_11;
LABEL_9:
  if (SHIBYTE(v7) < 0)
    operator delete(__p[0]);
LABEL_11:
  if (SHIBYTE(v5) < 0)
    operator delete(v4[0]);
}

void sub_20B09A8F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B09A924(const char **a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  _DWORD v9[6];
  int v10;
  _QWORD **v11;
  uint64_t v12;
  _DWORD *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;

  v10 = 0;
  if (*a1)
    sub_20AED077C(v9, a1);
  else
    sub_20AED0170(v9, "nullptr");
  v11 = (_QWORD **)v9;
  v12 = a2;
  v13 = v9;
  v14 = a2;
  v15 = a2;
  if (v10 == -1)
    sub_20AECFAB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C40BC50[v10])(&v16, v9);
  sub_20B09AB08((uint64_t)&v8, (uint64_t)v9, a3);
  v11 = (_QWORD **)v9;
  v12 = a4;
  v13 = v9;
  v14 = a4;
  v15 = a4;
  if (v10 == -1)
    sub_20AECFAB8();
  v16 = &v11;
  ((void (*)(_QWORD **, _DWORD *))off_24C40BC80[v10])(&v16, v9);
  if (v10 == -1)
    sub_20AECFAB8();
  v11 = &v16;
  result = ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C40BC98[v10])(&v11, v9);
  if (v10 != -1)
    return ((uint64_t (*)(_QWORD ***, _DWORD *))off_24C40BC38[v10])(&v11, v9);
  return result;
}

void sub_20B09AA80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B09AA94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B09AAA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B09AABC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B09AAD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B09AAE4(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B09AB08(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  unint64_t v20;
  _QWORD *v21;
  _QWORD v22[6];

  v22[5] = *MEMORY[0x24BDAC8D0];
  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21 = (_QWORD *)v5;
  sub_20B5211A0(a3, v22);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)v22, 36);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_23;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __p;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_23:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    __p[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __p[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __p;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21;
  if (v21)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *v21 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    v14[3] = MEMORY[0x24BEDB848] + 16;
    v14[2] = v17;
    if (*((char *)v14 + 111) < 0)
      operator delete((void *)v14[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 16);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v22[0] = a2;
  v22[1] = __p;
  v22[2] = a2;
  v22[3] = __p;
  v22[4] = __p;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v21 = v22;
  ((void (*)(_QWORD **, uint64_t))off_24C40BC68[v18])(&v21, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_20B09AD7C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B09ADA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B09ADBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_list va;

  va_start(va, a4);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

__n128 sub_20B09ADD0@<Q0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v5;
  __n128 result;
  __n128 v7;
  __n128 v8;

  a4.n128_u64[0] = *(_QWORD *)a1;
  a4.n128_u32[2] = *(_DWORD *)(a1 + 8);
  v8 = a4;
  a4.n128_u64[0] = *(_QWORD *)a2;
  a4.n128_u32[2] = *(_DWORD *)(a2 + 8);
  v7 = a4;
  v5 = operator new();
  *(_DWORD *)(v5 + 8) = v8.n128_u32[2];
  *(_QWORD *)v5 = v8.n128_u64[0];
  result = v7;
  *(_DWORD *)(v5 + 20) = v7.n128_u32[2];
  *(_QWORD *)(v5 + 12) = v7.n128_u64[0];
  *(_DWORD *)(v5 + 128) = 2;
  *(_BYTE *)(v5 + 136) = 1;
  *a3 = v5;
  return result;
}

__n128 sub_20B09AE64@<Q0>(int8x16_t *a1@<X0>, int8x16_t *a2@<X1>, uint64_t *a3@<X8>, __n128 a4@<Q0>)
{
  uint64_t v5;
  int8x16_t v6;
  int8x16_t v7;
  __n128 result;
  uint64_t v9;
  int8x16_t v10;
  __n128 v11;
  int8x16_t v12;

  v9 = a1[1].i64[0];
  a4.n128_u64[0] = a2[1].u64[0];
  v10 = *a1;
  v11 = a4;
  v12 = *a2;
  v5 = operator new();
  v6 = v10;
  v7 = v12;
  *(_QWORD *)(v5 + 16) = v9;
  v6.i64[1] = vextq_s8(v6, v6, 8uLL).u64[0];
  *(int8x16_t *)v5 = v6;
  result = v11;
  *(_QWORD *)(v5 + 40) = v11.n128_u64[0];
  v7.i64[1] = vextq_s8(v7, v7, 8uLL).u64[0];
  *(int8x16_t *)(v5 + 24) = v7;
  *(_DWORD *)(v5 + 128) = 3;
  *(_BYTE *)(v5 + 136) = 2;
  *a3 = v5;
  return result;
}

void sub_20B09AF00(int a1@<W0>, _DWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q1>, __int128 a6@<Q2>)
{
  __int128 v7;
  uint64_t v8;
  unsigned int v9;
  __n128 v10;
  __int128 v11;
  __int128 v12;
  int v18;
  uint64_t v19;
  __int128 *p_p;
  uint64_t v21;
  __n128 v22;
  __int128 v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  __int128 v29;
  char v30;
  void *__dst[2];
  uint64_t v32;
  char v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  unsigned __int8 v37;
  __int128 v38;
  uint64_t v39;
  uint64_t v40;
  __int128 v41;
  uint64_t v42;
  char v43;
  char v44;
  __int128 v45;
  __int128 __p;
  uint64_t v47;
  unsigned __int8 v48;
  void *v49[2];
  uint64_t v50;
  uint64_t v51;
  void *v52[2];
  uint64_t v53;
  char v54;
  char v55;
  char v56;
  char *v57;
  __int128 v58;
  char v59;
  __int128 v60;
  __n128 v61;
  __int128 v62;
  __int128 v63;

  if (!a1)
  {
    LODWORD(v12) = *a2;
    DWORD1(v12) = a2[4];
    *((_QWORD *)&v12 + 1) = a2[8];
    a5.n128_u32[0] = a2[1];
    a5.n128_u32[1] = a2[5];
    a5.n128_u32[2] = a2[9];
    LODWORD(a6) = a2[2];
    DWORD1(a6) = a2[6];
    DWORD2(a6) = a2[10];
    __asm { FMOV            V3.4S, #1.0 }
    LODWORD(_Q3) = a2[3];
    DWORD1(_Q3) = a2[7];
    DWORD2(_Q3) = a2[11];
    v60 = v12;
    v61 = a5;
    v62 = a6;
    v63 = _Q3;
    if (a3 > 1)
      goto LABEL_4;
LABEL_8:
    sub_20B242950((float32x2_t *)&v60, flt_20B5EE590, (uint64_t)&v45);
    if (v56)
    {
      sub_20B24440C((uint64_t *)&v34, (uint64_t)&v60, flt_20B5EE590);
      *(_QWORD *)a4 = v34;
      *(_BYTE *)(a4 + 120) = 1;
    }
    else
    {
      p_p = &__p;
      if (!v55)
        p_p = (__int128 *)&unk_20B610E70;
      LOBYTE(__dst[0]) = 0;
      v33 = 0;
      if (v55 && v48)
      {
        if (SHIBYTE(v47) < 0)
        {
          sub_20AEC60F4(__dst, *(void **)p_p, *((unint64_t *)&__p + 1));
        }
        else
        {
          *(_OWORD *)__dst = *p_p;
          v32 = *((_QWORD *)p_p + 2);
        }
        v33 = 1;
      }
      sub_20B099E24((__int128 *)__dst, (uint64_t)&v34);
      *(_OWORD *)a4 = v34;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v44)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v26 = v37;
        if (v37)
        {
          *(_OWORD *)(a4 + 16) = v35;
          *(_QWORD *)(a4 + 32) = v36;
          v36 = 0;
          v35 = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v43)
        {
          v27 = v40;
          *(_QWORD *)(a4 + 64) = v39;
          *(_OWORD *)(a4 + 48) = v38;
          v38 = 0uLL;
          *(_QWORD *)(a4 + 72) = v27;
          *(_OWORD *)(a4 + 80) = v41;
          *(_QWORD *)(a4 + 96) = v42;
          v39 = 0;
          v41 = 0uLL;
          v42 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v26 && SHIBYTE(v36) < 0)
          operator delete((void *)v35);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (v33 && SHIBYTE(v32) < 0)
        operator delete(__dst[0]);
    }
    if (!v56 && v55)
    {
      if (v54)
      {
        if (SHIBYTE(v53) < 0)
          operator delete(v52[0]);
        if (SHIBYTE(v50) < 0)
          operator delete(v49[0]);
      }
      if (v48 && SHIBYTE(v47) < 0)
        operator delete((void *)__p);
    }
    return;
  }
  if (a1 != 1)
  {
    v60 = xmmword_20B5E36A8;
    v61 = (__n128)unk_20B5E36B8;
    v62 = xmmword_20B5E36C8;
    v63 = unk_20B5E36D8;
    v57 = (char *)operator new(0x20uLL);
    v58 = xmmword_20B5B35F0;
    strcpy(v57, "invalid VZMatrixLayout value");
    v59 = 1;
    sub_20B099E24((__int128 *)&v57, (uint64_t)&v45);
    *(_OWORD *)a4 = v45;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v55)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v18 = v48;
      if (v48)
      {
        *(_OWORD *)(a4 + 16) = __p;
        *(_QWORD *)(a4 + 32) = v47;
        v47 = 0;
        __p = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v54)
      {
        v19 = v51;
        *(_QWORD *)(a4 + 64) = v50;
        *(_OWORD *)(a4 + 48) = *(_OWORD *)v49;
        v49[0] = 0;
        v49[1] = 0;
        *(_QWORD *)(a4 + 72) = v19;
        *(_OWORD *)(a4 + 80) = *(_OWORD *)v52;
        *(_QWORD *)(a4 + 96) = v53;
        v50 = 0;
        v52[0] = 0;
        v52[1] = 0;
        v53 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v18 && SHIBYTE(v47) < 0)
        operator delete((void *)__p);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    if (v59 && SHIBYTE(v58) < 0)
      operator delete(v57);
    return;
  }
  v7 = *(_OWORD *)a2;
  v8 = *(_QWORD *)(a2 + 9);
  v9 = a2[11];
  v10.n128_u32[3] = 0;
  v10.n128_u32[0] = HIDWORD(*(_OWORD *)a2);
  HIDWORD(v7) = 0;
  *(unint64_t *)((char *)v10.n128_u64 + 4) = *((_QWORD *)a2 + 2);
  *(_QWORD *)&v11 = *((_QWORD *)a2 + 3);
  *((_QWORD *)&v11 + 1) = a2[8];
  v61 = v10;
  v62 = v11;
  v60 = v7;
  *(_QWORD *)&v63 = v8;
  *((_QWORD *)&v63 + 1) = v9 | 0x3F80000000000000;
  if (a3 <= 1)
    goto LABEL_8;
LABEL_4:
  if (a3 == 2)
  {
    v21 = operator new();
    v22 = v61;
    *(_OWORD *)v21 = v60;
    *(__n128 *)(v21 + 16) = v22;
    v23 = v63;
    *(_OWORD *)(v21 + 32) = v62;
    *(_OWORD *)(v21 + 48) = v23;
    *(_DWORD *)(v21 + 128) = 0;
    *(_BYTE *)(v21 + 136) = 4;
    *(_QWORD *)a4 = v21;
    goto LABEL_29;
  }
  if (a3 == 3)
  {
    sub_20B24607C((uint64_t *)&v45, (float32x2_t *)&v60);
    *(_QWORD *)a4 = v45;
LABEL_29:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v28 = operator new(0x20uLL);
  v29 = xmmword_20B5B37B0;
  strcpy((char *)v28, "invalid VZArgOptions value");
  v30 = 1;
  sub_20B099E24((__int128 *)&v28, (uint64_t)&v45);
  *(_OWORD *)a4 = v45;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v55)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v24 = v48;
    if (v48)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v47;
      v47 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v54)
    {
      v25 = v51;
      *(_QWORD *)(a4 + 64) = v50;
      *(_OWORD *)(a4 + 48) = *(_OWORD *)v49;
      v49[0] = 0;
      v49[1] = 0;
      *(_QWORD *)(a4 + 72) = v25;
      *(_OWORD *)(a4 + 80) = *(_OWORD *)v52;
      *(_QWORD *)(a4 + 96) = v53;
      v50 = 0;
      v52[0] = 0;
      v52[1] = 0;
      v53 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v24 && SHIBYTE(v47) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (v30)
  {
    if (SHIBYTE(v29) < 0)
      operator delete(v28);
  }
}

void sub_20B09B4EC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
    {
      operator delete(__p);
      sub_20AEC01C0(a1);
    }
  }
  sub_20AEC01C0(a1);
}

void sub_20B09B51C(int a1@<W0>, int64x2_t *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>, __n128 a5@<Q4>, __n128 a6@<Q5>, __n128 a7@<Q6>)
{
  float64x2_t v8;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  int64x2_t v12;
  uint64_t v13;
  int64x2_t v14;
  float64x2_t v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  int v24;
  uint64_t v25;
  __int128 *p_p;
  uint64_t v27;
  __n128 v28;
  __int128 v29;
  __n128 v30;
  __n128 v31;
  int v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  void *v36;
  __int128 v37;
  char v38;
  void *__dst[2];
  uint64_t v40;
  char v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  unsigned __int8 v45;
  __int128 v46;
  uint64_t v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  char v51;
  char v52;
  __int128 v53;
  __int128 __p;
  uint64_t v55;
  unsigned __int8 v56;
  void *v57[2];
  uint64_t v58;
  uint64_t v59;
  void *v60[2];
  uint64_t v61;
  char v62;
  char v63;
  char v64;
  char *v65;
  __int128 v66;
  char v67;
  float64x2_t v68;
  __n128 v69;
  __int128 v70;
  __n128 v71;
  __int128 v72;
  __n128 v73;
  __int128 v74;
  __int128 v75;

  if (!a1)
  {
    *(_QWORD *)&v15.f64[0] = a2->i64[0];
    *(_QWORD *)&v16 = a2->i64[1];
    *(_QWORD *)&v17 = a2[1].i64[0];
    *(_QWORD *)&v18 = a2[1].i64[1];
    *(_QWORD *)&v15.f64[1] = a2[2].i64[0];
    *((_QWORD *)&v16 + 1) = a2[2].i64[1];
    a5.n128_u64[0] = a2[4].u64[0];
    a6.n128_u64[0] = a2[4].u64[1];
    *((_QWORD *)&v17 + 1) = a2[3].i64[0];
    *((_QWORD *)&v18 + 1) = a2[3].i64[1];
    a7.n128_u64[0] = a2[5].u64[0];
    __asm { FMOV            V7.2D, #1.0 }
    *(_QWORD *)&_Q7 = a2[5].i64[1];
    v68 = v15;
    v69 = a5;
    v70 = v16;
    v71 = a6;
    v72 = v17;
    v73 = a7;
    v74 = v18;
    v75 = _Q7;
    if (a3 > 1)
    {
LABEL_4:
      if (a3 == 2)
      {
        v27 = operator new();
        v28 = v73;
        *(_OWORD *)(v27 + 64) = v72;
        *(__n128 *)(v27 + 80) = v28;
        v29 = v75;
        *(_OWORD *)(v27 + 96) = v74;
        *(_OWORD *)(v27 + 112) = v29;
        v30 = v69;
        *(float64x2_t *)v27 = v68;
        *(__n128 *)(v27 + 16) = v30;
        v31 = v71;
        *(_OWORD *)(v27 + 32) = v70;
        *(__n128 *)(v27 + 48) = v31;
        *(_DWORD *)(v27 + 128) = 1;
        *(_BYTE *)(v27 + 136) = 5;
        *(_QWORD *)a4 = v27;
        *(_BYTE *)(a4 + 120) = 1;
      }
      else if (a3 == 3)
      {
        sub_20B246468((uint64_t *)&v53, &v68);
        *(_QWORD *)a4 = v53;
        *(_BYTE *)(a4 + 120) = 1;
      }
      else
      {
        v36 = operator new(0x20uLL);
        v37 = xmmword_20B5B37B0;
        strcpy((char *)v36, "invalid VZArgOptions value");
        v38 = 1;
        sub_20B099E24((__int128 *)&v36, (uint64_t)&v53);
        *(_OWORD *)a4 = v53;
        *(_BYTE *)(a4 + 16) = 0;
        *(_BYTE *)(a4 + 112) = 0;
        if (v63)
        {
          *(_BYTE *)(a4 + 40) = 0;
          v32 = v56;
          if (v56)
          {
            *(_OWORD *)(a4 + 16) = __p;
            *(_QWORD *)(a4 + 32) = v55;
            v55 = 0;
            __p = 0uLL;
            *(_BYTE *)(a4 + 40) = 1;
          }
          *(_BYTE *)(a4 + 48) = 0;
          *(_BYTE *)(a4 + 104) = 0;
          if (v62)
          {
            v33 = v59;
            *(_QWORD *)(a4 + 64) = v58;
            *(_OWORD *)(a4 + 48) = *(_OWORD *)v57;
            v57[0] = 0;
            v57[1] = 0;
            *(_QWORD *)(a4 + 72) = v33;
            *(_OWORD *)(a4 + 80) = *(_OWORD *)v60;
            *(_QWORD *)(a4 + 96) = v61;
            v58 = 0;
            v60[0] = 0;
            v60[1] = 0;
            v61 = 0;
            *(_BYTE *)(a4 + 104) = 1;
          }
          *(_BYTE *)(a4 + 112) = 1;
          *(_BYTE *)(a4 + 120) = 0;
          if (v32 && SHIBYTE(v55) < 0)
            operator delete((void *)__p);
        }
        else
        {
          *(_BYTE *)(a4 + 120) = 0;
        }
        if (v38)
        {
          if (SHIBYTE(v37) < 0)
            operator delete(v36);
        }
      }
      return;
    }
    goto LABEL_9;
  }
  if (a1 == 1)
  {
    v8 = *(float64x2_t *)a2;
    v9 = a2[5].i64[1];
    v10 = *(__int128 *)((char *)&a2[4] + 8);
    v11 = a2[1].i64[0];
    v12 = vdupq_laneq_s64(a2[1], 1);
    v13 = a2[2].i64[1];
    v14 = vzip1q_s64(v12, a2[2]);
    v12.i64[0] = a2[4].i64[0];
    v72 = (__int128)a2[3];
    v73 = (__n128)v12;
    v68 = v8;
    v69 = (__n128)(unint64_t)v11;
    v70 = (__int128)v14;
    v71 = (__n128)(unint64_t)v13;
    v74 = v10;
    *(_QWORD *)&v75 = v9;
    *((_QWORD *)&v75 + 1) = 0x3FF0000000000000;
    if (a3 > 1)
      goto LABEL_4;
LABEL_9:
    sub_20B24369C((uint64_t)&v68, (uint64_t)&unk_20B5EE5A0, (uint64_t)&v53);
    if (v64)
    {
      sub_20B2451C0((uint64_t *)&v42, &v68, (uint64_t)&unk_20B5EE5A0);
      *(_QWORD *)a4 = v42;
      *(_BYTE *)(a4 + 120) = 1;
    }
    else
    {
      p_p = &__p;
      if (!v63)
        p_p = (__int128 *)&unk_20B610E70;
      LOBYTE(__dst[0]) = 0;
      v41 = 0;
      if (v63 && v56)
      {
        if (SHIBYTE(v55) < 0)
        {
          sub_20AEC60F4(__dst, *(void **)p_p, *((unint64_t *)&__p + 1));
        }
        else
        {
          *(_OWORD *)__dst = *p_p;
          v40 = *((_QWORD *)p_p + 2);
        }
        v41 = 1;
      }
      sub_20B099E24((__int128 *)__dst, (uint64_t)&v42);
      *(_OWORD *)a4 = v42;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      if (v52)
      {
        *(_BYTE *)(a4 + 40) = 0;
        v34 = v45;
        if (v45)
        {
          *(_OWORD *)(a4 + 16) = v43;
          *(_QWORD *)(a4 + 32) = v44;
          v44 = 0;
          v43 = 0uLL;
          *(_BYTE *)(a4 + 40) = 1;
        }
        *(_BYTE *)(a4 + 48) = 0;
        *(_BYTE *)(a4 + 104) = 0;
        if (v51)
        {
          v35 = v48;
          *(_QWORD *)(a4 + 64) = v47;
          *(_OWORD *)(a4 + 48) = v46;
          v46 = 0uLL;
          *(_QWORD *)(a4 + 72) = v35;
          *(_OWORD *)(a4 + 80) = v49;
          *(_QWORD *)(a4 + 96) = v50;
          v47 = 0;
          v49 = 0uLL;
          v50 = 0;
          *(_BYTE *)(a4 + 104) = 1;
        }
        *(_BYTE *)(a4 + 112) = 1;
        *(_BYTE *)(a4 + 120) = 0;
        if (v34 && SHIBYTE(v44) < 0)
          operator delete((void *)v43);
      }
      else
      {
        *(_BYTE *)(a4 + 120) = 0;
      }
      if (v41 && SHIBYTE(v40) < 0)
        operator delete(__dst[0]);
    }
    if (!v64 && v63)
    {
      if (v62)
      {
        if (SHIBYTE(v61) < 0)
          operator delete(v60[0]);
        if (SHIBYTE(v58) < 0)
          operator delete(v57[0]);
      }
      if (v56 && SHIBYTE(v55) < 0)
        operator delete((void *)__p);
    }
    return;
  }
  v72 = xmmword_20B5E3728;
  v73 = (__n128)unk_20B5E3738;
  v74 = xmmword_20B5E3748;
  v75 = unk_20B5E3758;
  v68 = (float64x2_t)xmmword_20B5E36E8;
  v69 = (__n128)unk_20B5E36F8;
  v70 = xmmword_20B5E3708;
  v71 = (__n128)unk_20B5E3718;
  v65 = (char *)operator new(0x20uLL);
  v66 = xmmword_20B5B35F0;
  strcpy(v65, "invalid VZMatrixLayout value");
  v67 = 1;
  sub_20B099E24((__int128 *)&v65, (uint64_t)&v53);
  *(_OWORD *)a4 = v53;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v63)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v24 = v56;
    if (v56)
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v55;
      v55 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v62)
    {
      v25 = v59;
      *(_QWORD *)(a4 + 64) = v58;
      *(_OWORD *)(a4 + 48) = *(_OWORD *)v57;
      v57[0] = 0;
      v57[1] = 0;
      *(_QWORD *)(a4 + 72) = v25;
      *(_OWORD *)(a4 + 80) = *(_OWORD *)v60;
      *(_QWORD *)(a4 + 96) = v61;
      v58 = 0;
      v60[0] = 0;
      v60[1] = 0;
      v61 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v24 && SHIBYTE(v55) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (v67 && SHIBYTE(v66) < 0)
    operator delete(v65);
}

void sub_20B09BB20(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
    {
      operator delete(__p);
      sub_20AEC01C0(a1);
    }
  }
  sub_20AEC01C0(a1);
}

void sub_20B09BB50(uint64_t *a1@<X0>, int a2@<W1>, int32x4_t *a3@<X2>, uint64_t a4@<X8>, float64x2_t a5@<Q0>)
{
  uint64_t v7;
  int32x4_t v9;
  int32x4_t v10;
  int32x4_t v11;
  int32x4_t v12;
  int32x4_t v13;
  int32x4_t v14;
  int32x4_t v15;
  int v16;
  uint64_t v17;
  int32x4_t v18;
  int32x4_t v19;
  int32x4_t v20;
  void *v21;
  __int128 v22;
  char v23;
  int32x4_t v24;
  void *__p[2];
  int32x4_t v26;
  int32x4_t v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  char v32;
  char v33;

  if (!a2)
  {
    if (a3)
    {
      sub_20B246F3C(a1, (uint64_t)&v24, a5);
      v12.i64[0] = vzip1q_s32(v24, *(int32x4_t *)__p).u64[0];
      v12.i64[1] = __PAIR64__(v27.u32[0], v26.u32[0]);
      v13.i64[0] = vtrn2q_s32(v24, *(int32x4_t *)__p).u64[0];
      v13.i64[1] = __PAIR64__(v27.u32[1], v26.u32[1]);
      v14.i64[0] = vzip2q_s32(v24, *(int32x4_t *)__p).u64[0];
      v14.i64[1] = __PAIR64__(v27.u32[2], v26.u32[2]);
      v15.i64[0] = vuzp2q_s32(vuzp2q_s32(v24, *(int32x4_t *)__p), v24).u64[0];
      v15.i64[1] = __PAIR64__(v27.u32[3], v26.u32[3]);
      *a3 = v12;
      a3[1] = v13;
      a3[2] = v14;
      a3[3] = v15;
    }
    goto LABEL_11;
  }
  if (a2 == 1)
  {
    v7 = *a1;
    if ((*(_BYTE *)(*a1 + 136) & 0xFE) == 4 && *(_BYTE *)(*a1 + 136) != 5)
    {
      if (*(_DWORD *)(v7 + 128))
        sub_20AECFAB8();
      if (a3)
      {
        v19 = *(int32x4_t *)v7;
        v18 = *(int32x4_t *)(v7 + 16);
        v20 = *(int32x4_t *)(v7 + 48);
        a3[2] = *(int32x4_t *)(v7 + 32);
        a3[3] = v20;
        *a3 = v19;
        a3[1] = v18;
      }
      *(_QWORD *)a4 = v7;
      goto LABEL_24;
    }
    sub_20B246F3C(a1, (uint64_t)&v24, a5);
    v9 = v24;
    v10 = *(int32x4_t *)__p;
    v11 = v27;
    a3[2] = v26;
    a3[3] = v11;
    *a3 = v9;
    a3[1] = v10;
LABEL_11:
    *(_QWORD *)a4 = 0;
LABEL_24:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v21 = operator new(0x20uLL);
  v22 = xmmword_20B5B35F0;
  strcpy((char *)v21, "invalid VZMatrixLayout value");
  v23 = 1;
  sub_20B099E24((__int128 *)&v21, (uint64_t)&v24);
  *(int32x4_t *)a4 = v24;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v33)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v16 = v26.u8[8];
    if (v26.i8[8])
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)__p;
      *(_QWORD *)(a4 + 32) = v26.i64[0];
      __p[1] = 0;
      v26.i64[0] = 0;
      __p[0] = 0;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v32)
    {
      v17 = v29;
      *(_QWORD *)(a4 + 64) = v28;
      *(int32x4_t *)(a4 + 48) = v27;
      v27 = 0uLL;
      *(_QWORD *)(a4 + 72) = v17;
      *(_OWORD *)(a4 + 80) = v30;
      *(_QWORD *)(a4 + 96) = v31;
      v28 = 0;
      v30 = 0uLL;
      v31 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v16 && v26.i8[7] < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (v23 && SHIBYTE(v22) < 0)
    operator delete(v21);
}

void sub_20B09BD78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B09BD9C(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, int64x2_t *a4@<X8>, float64x2_t a5@<Q0>, float64x2_t a6@<Q2>)
{
  uint64_t v8;
  int v9;
  BOOL v10;
  int v11;
  int64x2_t v13;
  __int128 v14;
  int64x2_t v15;
  int64x2_t v16;
  int64x2_t v17;
  int64x2_t v18;
  int64x2_t v19;
  int64x2_t v20;
  __int128 v21;
  int64x2_t v22;
  int64x2_t v23;
  int64x2_t v24;
  int64x2_t v25;
  __int128 v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  void *v36;
  __int128 v37;
  char v38;
  int64x2_t v39;
  void *__p[2];
  int64x2_t v41;
  int64x2_t v42;
  int64x2_t v43;
  int64x2_t v44;
  int64x2_t v45;
  int64x2_t v46;

  if (!a2)
  {
    if (a3)
    {
      sub_20B247360(a1, (uint64_t)&v39, a5, a6);
      v20 = vzip1q_s64(v43, v45);
      *(_QWORD *)&v21 = vdupq_laneq_s64(v43, 1).u64[0];
      v22 = vzip2q_s64(v39, v41);
      *((_QWORD *)&v21 + 1) = v45.i64[1];
      v23 = vzip1q_s64(*(int64x2_t *)__p, v42);
      v24 = vzip1q_s64(v44, v46);
      v25 = vzip2q_s64(*(int64x2_t *)__p, v42);
      *(_QWORD *)&v26 = vdupq_laneq_s64(v44, 1).u64[0];
      *((_QWORD *)&v26 + 1) = v46.i64[1];
      *(int64x2_t *)a3 = vzip1q_s64(v39, v41);
      *(int64x2_t *)(a3 + 16) = v20;
      *(int64x2_t *)(a3 + 32) = v22;
      *(_OWORD *)(a3 + 48) = v21;
      *(int64x2_t *)(a3 + 64) = v23;
      *(int64x2_t *)(a3 + 80) = v24;
      *(int64x2_t *)(a3 + 96) = v25;
      *(_OWORD *)(a3 + 112) = v26;
    }
    goto LABEL_13;
  }
  if (a2 == 1)
  {
    v8 = *a1;
    v9 = *(unsigned __int8 *)(*a1 + 136);
    v10 = v9 == 2 || v9 == 5;
    v11 = v9 & 0xFE;
    if (v10 && v11 == 4)
    {
      if (*(_DWORD *)(v8 + 128) != 1)
        sub_20AECFAB8();
      if (a3)
      {
        v30 = *(_OWORD *)v8;
        v29 = *(_OWORD *)(v8 + 16);
        v32 = *(_OWORD *)(v8 + 32);
        v31 = *(_OWORD *)(v8 + 48);
        v34 = *(_OWORD *)(v8 + 64);
        v33 = *(_OWORD *)(v8 + 80);
        v35 = *(_OWORD *)(v8 + 112);
        *(_OWORD *)(a3 + 96) = *(_OWORD *)(v8 + 96);
        *(_OWORD *)(a3 + 112) = v35;
        *(_OWORD *)(a3 + 64) = v34;
        *(_OWORD *)(a3 + 80) = v33;
        *(_OWORD *)(a3 + 32) = v32;
        *(_OWORD *)(a3 + 48) = v31;
        *(_OWORD *)a3 = v30;
        *(_OWORD *)(a3 + 16) = v29;
      }
      a4->i64[0] = v8;
      goto LABEL_26;
    }
    sub_20B247360(a1, (uint64_t)&v39, a5, a6);
    v13 = v39;
    v14 = *(_OWORD *)__p;
    v15 = v41;
    v16 = v42;
    v17 = v43;
    v18 = v44;
    v19 = v46;
    *(int64x2_t *)(a3 + 96) = v45;
    *(int64x2_t *)(a3 + 112) = v19;
    *(int64x2_t *)(a3 + 64) = v17;
    *(int64x2_t *)(a3 + 80) = v18;
    *(int64x2_t *)(a3 + 32) = v15;
    *(int64x2_t *)(a3 + 48) = v16;
    *(int64x2_t *)a3 = v13;
    *(_OWORD *)(a3 + 16) = v14;
LABEL_13:
    a4->i64[0] = 0;
LABEL_26:
    a4[7].i8[8] = 1;
    return;
  }
  v36 = operator new(0x20uLL);
  v37 = xmmword_20B5B35F0;
  strcpy((char *)v36, "invalid VZMatrixLayout value");
  v38 = 1;
  sub_20B099E24((__int128 *)&v36, (uint64_t)&v39);
  *a4 = v39;
  a4[1].i8[0] = 0;
  a4[7].i8[0] = 0;
  if (v46.i8[0])
  {
    a4[2].i8[8] = 0;
    v27 = v41.u8[8];
    if (v41.i8[8])
    {
      a4[1] = *(int64x2_t *)__p;
      a4[2].i64[0] = v41.i64[0];
      __p[1] = 0;
      v41.i64[0] = 0;
      __p[0] = 0;
      a4[2].i8[8] = 1;
    }
    a4[3].i8[0] = 0;
    a4[6].i8[8] = 0;
    if (v45.i8[8])
    {
      v28 = v43.i64[1];
      a4[4].i64[0] = v43.i64[0];
      a4[3] = v42;
      v42 = 0uLL;
      a4[4].i64[1] = v28;
      a4[5] = v44;
      a4[6].i64[0] = v45.i64[0];
      v43.i64[0] = 0;
      v44 = 0uLL;
      v45.i64[0] = 0;
      a4[6].i8[8] = 1;
    }
    a4[7].i8[0] = 1;
    a4[7].i8[8] = 0;
    if (v27 && v41.i8[7] < 0)
      operator delete(__p[0]);
  }
  else
  {
    a4[7].i8[8] = 0;
  }
  if (v38 && SHIBYTE(v37) < 0)
    operator delete(v36);
}

void sub_20B09BFEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B09C010(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float64x2_t a5@<Q0>)
{
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  void *v16;
  __int128 v17;
  char v18;
  __int128 v19;
  void *__p[2];
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  char v28;

  if (!a2)
  {
    if (a3)
    {
      sub_20B246F3C(a1, (uint64_t)&v19, a5);
      *(_QWORD *)&v11 = __PAIR64__(__p[0], v19);
      LODWORD(v12) = vdupq_lane_s32(*(int32x2_t *)&v19, 1).u32[0];
      *((_QWORD *)&v11 + 1) = __PAIR64__(v22, v21);
      DWORD1(v12) = HIDWORD(__p[0]);
      *((_QWORD *)&v12 + 1) = __PAIR64__(DWORD1(v22), DWORD1(v21));
      *(_QWORD *)&v13 = __PAIR64__(__p[1], DWORD2(v19));
      *((_QWORD *)&v13 + 1) = __PAIR64__(DWORD2(v22), DWORD2(v21));
      *(_OWORD *)(a3 + 16) = v12;
      *(_OWORD *)(a3 + 32) = v13;
      *(_OWORD *)a3 = v11;
    }
    goto LABEL_7;
  }
  if (a2 == 1)
  {
    if (a3)
    {
      sub_20B246F3C(a1, (uint64_t)&v19, a5);
      v7 = v19;
      v8 = *(_OWORD *)__p;
      v9 = v21;
      v10 = v22;
      *(_DWORD *)(a3 + 8) = DWORD2(v19);
      *(_QWORD *)a3 = v7;
      *(_DWORD *)(a3 + 20) = DWORD2(v8);
      *(_DWORD *)(a3 + 32) = DWORD2(v9);
      *(_QWORD *)(a3 + 12) = v8;
      *(_QWORD *)(a3 + 24) = v9;
      *(_DWORD *)(a3 + 44) = DWORD2(v10);
      *(_QWORD *)(a3 + 36) = v10;
    }
LABEL_7:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v16 = operator new(0x20uLL);
  v17 = xmmword_20B5B35F0;
  strcpy((char *)v16, "invalid VZMatrixLayout value");
  v18 = 1;
  sub_20B099E24((__int128 *)&v16, (uint64_t)&v19);
  *(_OWORD *)a4 = v19;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v28)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v14 = BYTE8(v21);
    if (BYTE8(v21))
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)__p;
      *(_QWORD *)(a4 + 32) = v21;
      __p[1] = 0;
      *(_QWORD *)&v21 = 0;
      __p[0] = 0;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v27)
    {
      v15 = v24;
      *(_QWORD *)(a4 + 64) = v23;
      *(_OWORD *)(a4 + 48) = v22;
      v22 = 0uLL;
      *(_QWORD *)(a4 + 72) = v15;
      *(_OWORD *)(a4 + 80) = v25;
      *(_QWORD *)(a4 + 96) = v26;
      v23 = 0;
      v25 = 0uLL;
      v26 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v14 && SBYTE7(v21) < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (v18 && SHIBYTE(v17) < 0)
    operator delete(v16);
}

void sub_20B09C244(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B09C268(uint64_t *a1@<X0>, int a2@<W1>, uint64_t a3@<X2>, uint64_t a4@<X8>, float64x2_t a5@<Q0>, float64x2_t a6@<Q2>)
{
  __int128 v8;
  __int128 v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  char v25;
  __int128 v26;
  __int128 __p;
  __int128 v28;
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;

  if (!a2)
  {
    if (a3)
    {
      sub_20B247360(a1, (uint64_t)&v26, a5, a6);
      *(_QWORD *)&v16 = *((_QWORD *)&v26 + 1);
      *(_QWORD *)&v15 = v26;
      *((_QWORD *)&v15 + 1) = v28;
      *(_QWORD *)&v18 = *((_QWORD *)&v30 + 1);
      *(_QWORD *)&v17 = v30;
      *(_QWORD *)&v19 = __p;
      *((_QWORD *)&v17 + 1) = v32;
      *((_QWORD *)&v16 + 1) = *((_QWORD *)&v28 + 1);
      *(_QWORD *)&v20 = v31;
      *((_QWORD *)&v18 + 1) = *((_QWORD *)&v32 + 1);
      *((_QWORD *)&v19 + 1) = v29;
      *((_QWORD *)&v20 + 1) = v33;
      *(_OWORD *)(a3 + 64) = v19;
      *(_OWORD *)(a3 + 80) = v20;
      *(_OWORD *)(a3 + 32) = v16;
      *(_OWORD *)(a3 + 48) = v18;
      *(_OWORD *)a3 = v15;
      *(_OWORD *)(a3 + 16) = v17;
    }
    goto LABEL_7;
  }
  if (a2 == 1)
  {
    if (a3)
    {
      sub_20B247360(a1, (uint64_t)&v26, a5, a6);
      v8 = v26;
      v9 = v28;
      v10 = v29;
      v11 = v30;
      v12 = v31;
      v13 = v32;
      v14 = v33;
      *(_QWORD *)(a3 + 16) = __p;
      *(_OWORD *)a3 = v8;
      *(_QWORD *)(a3 + 40) = v10;
      *(_OWORD *)(a3 + 24) = v9;
      *(_QWORD *)(a3 + 64) = v12;
      *(_OWORD *)(a3 + 48) = v11;
      *(_QWORD *)(a3 + 88) = v14;
      *(_OWORD *)(a3 + 72) = v13;
    }
LABEL_7:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v23 = operator new(0x20uLL);
  v24 = xmmword_20B5B35F0;
  strcpy((char *)v23, "invalid VZMatrixLayout value");
  v25 = 1;
  sub_20B099E24((__int128 *)&v23, (uint64_t)&v26);
  *(_OWORD *)a4 = v26;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if ((_BYTE)v33)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v21 = BYTE8(v28);
    if (BYTE8(v28))
    {
      *(_OWORD *)(a4 + 16) = __p;
      *(_QWORD *)(a4 + 32) = v28;
      *(_QWORD *)&v28 = 0;
      __p = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (BYTE8(v32))
    {
      v22 = *((_QWORD *)&v30 + 1);
      *(_QWORD *)(a4 + 64) = v30;
      *(_OWORD *)(a4 + 48) = v29;
      v29 = 0uLL;
      *(_QWORD *)(a4 + 72) = v22;
      *(_OWORD *)(a4 + 80) = v31;
      *(_QWORD *)(a4 + 96) = v32;
      *(_QWORD *)&v30 = 0;
      v31 = 0uLL;
      *(_QWORD *)&v32 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v21 && SBYTE7(v28) < 0)
      operator delete((void *)__p);
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
  if (v25 && SHIBYTE(v24) < 0)
    operator delete(v23);
}

void sub_20B09C494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B09C4B8(uint64_t a1)
{
  unsigned __int8 v2;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t *v10;
  uint64_t v11;
  char v12;
  char v13;
  void *__p;
  char *v15;
  char v16;
  int v17;

  LOBYTE(v11) = 0;
  v12 = 0;
  v13 = 1;
  v2 = atomic_load((unsigned __int8 *)&qword_25463CD70);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463CD70))
  {
    v10 = sub_20B0C19F8(1);
    sub_20AF43774(qword_25463CD58, (uint64_t)v10);
    __cxa_atexit((void (*)(void *))sub_20AFAAEB8, qword_25463CD58, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CD70);
  }
  sub_20AF43774(&__p, (uint64_t)qword_25463CD58);
  v16 = 1;
  v17 = 0;
  sub_20B09C628(a1, &v11);
  if (v16)
  {
    v3 = (char *)__p;
    if (__p)
    {
      v4 = v15;
      v5 = __p;
      if (v15 != __p)
      {
        do
        {
          v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
          if (v6)
          {
            p_shared_owners = (unint64_t *)&v6->__shared_owners_;
            do
              v8 = __ldaxr(p_shared_owners);
            while (__stlxr(v8 - 1, p_shared_owners));
            if (!v8)
            {
              ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
              std::__shared_weak_count::__release_weak(v6);
            }
          }
          v4 -= 16;
        }
        while (v4 != v3);
        v5 = __p;
      }
      v15 = v3;
      operator delete(v5);
    }
  }
  return a1;
}

void sub_20B09C5FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CD70);
  _Unwind_Resume(a1);
}

void sub_20B09C614(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AF3FB48((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B09C628(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;

  v4 = *a2;
  *(_QWORD *)(a1 + 5) = *(uint64_t *)((char *)a2 + 5);
  *(_QWORD *)a1 = v4;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    sub_20AF43774((_QWORD *)(a1 + 16), (uint64_t)(a2 + 2));
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_DWORD *)(a1 + 48) = *((_DWORD *)a2 + 12);
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 88) = 0;
  *(_BYTE *)(a1 + 96) = 0;
  *(_BYTE *)(a1 + 128) = 0;
  return a1;
}

void sub_20B09C6AC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  char *v4;
  char *v5;
  void *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;

  if (*(_BYTE *)(v1 + 40))
  {
    v4 = (char *)*v2;
    if (*v2)
    {
      v5 = *(char **)(v1 + 24);
      v6 = *v2;
      if (v5 != v4)
      {
        do
        {
          v7 = (std::__shared_weak_count *)*((_QWORD *)v5 - 1);
          if (v7)
          {
            p_shared_owners = (unint64_t *)&v7->__shared_owners_;
            do
              v9 = __ldaxr(p_shared_owners);
            while (__stlxr(v9 - 1, p_shared_owners));
            if (!v9)
            {
              ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
              std::__shared_weak_count::__release_weak(v7);
            }
          }
          v5 -= 16;
        }
        while (v5 != v4);
        v6 = *v2;
      }
      *(_QWORD *)(v1 + 24) = v4;
      operator delete(v6);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B09C730(uint64_t a1@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  unsigned __int8 v6;
  void *v7[2];
  uint64_t v8;
  void *__p[2];
  uint64_t v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  char v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  unsigned __int8 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  char v28;

  *(_BYTE *)(a1 + 12) = a2;
  if (a2 < 3)
  {
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  v6 = a2;
  sub_20AF5E0C0("invalid VZServerSyncType ", &v6);
  if (SHIBYTE(v8) < 0)
  {
    sub_20AEC60F4(__p, v7[0], (unint64_t)v7[1]);
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)v7;
    v10 = v8;
  }
  v11 = 1;
  LOBYTE(v12) = 0;
  v16 = 0;
  v17 = 1;
  sub_20AECCC3C(0xAu, (__int128 *)__p, (uint64_t)&v18);
  *(_OWORD *)a3 = v18;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v28)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v4 = v21;
    if (v21)
    {
      *(_OWORD *)(a3 + 16) = v19;
      *(_QWORD *)(a3 + 32) = v20;
      v20 = 0;
      v19 = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v27)
    {
      v5 = v24;
      *(_QWORD *)(a3 + 64) = v23;
      *(_OWORD *)(a3 + 48) = v22;
      v23 = 0;
      v22 = 0uLL;
      *(_QWORD *)(a3 + 72) = v5;
      *(_OWORD *)(a3 + 80) = v25;
      *(_QWORD *)(a3 + 96) = v26;
      v25 = 0uLL;
      v26 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v4 && SHIBYTE(v20) < 0)
      operator delete((void *)v19);
    if (!v17)
      goto LABEL_24;
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v17)
      goto LABEL_24;
  }
  if (!v16)
    goto LABEL_21;
  if (v15 < 0)
  {
    operator delete(v14);
    if ((v13 & 0x80000000) == 0)
    {
LABEL_21:
      if (v11)
        goto LABEL_22;
      goto LABEL_24;
    }
  }
  else if ((v13 & 0x80000000) == 0)
  {
    goto LABEL_21;
  }
  operator delete(v12);
  if (v11)
  {
LABEL_22:
    if (SHIBYTE(v10) < 0)
      operator delete(__p[0]);
  }
LABEL_24:
  if (SHIBYTE(v8) < 0)
    operator delete(v7[0]);
}

void sub_20B09C928(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B09C954(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  const char *v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned __int16 *v9[3];
  _QWORD *v10;
  char v11;
  char v12[8];
  _QWORD **v13;
  char *v14;

  v10 = a1;
  sub_20AEC01D0(a1, (uint64_t)"{", 1);
  v9[0] = (unsigned __int16 *)a2;
  v9[1] = (unsigned __int16 *)(a2 + 56);
  v9[2] = (unsigned __int16 *)(a2 + 96);
  sub_20AEC01D0(a1, (uint64_t)"{", 1);
  v12[0] = 1;
  v13 = &v10;
  v14 = &v11;
  sub_20B0A17C0(v9, (uint64_t)v12);
  sub_20AEC01D0(v10, (uint64_t)"}", 1);
  sub_20AEC01D0(v10, (uint64_t)",", 1);
  if (*(_BYTE *)(a2 + 88))
  {
    v4 = *(_QWORD *)(a2 + 80);
    if (v4)
      v5 = "f(){*}";
    else
      v5 = "f(){nullptr}";
    v6 = v10;
    if (v4)
      v7 = 6;
    else
      v7 = 12;
  }
  else
  {
    v6 = v10;
    v5 = "nullopt";
    v7 = 7;
  }
  sub_20AEC01D0(v6, (uint64_t)v5, v7);
  sub_20AEC01D0(v10, (uint64_t)"}", 1);
  return v10;
}

void sub_20B09CA68(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  void *__p;
  char v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;
  _QWORD v27[4];
  char v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  char v34;
  char v35;
  char v36;

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 16) + 16))(v27);
  if (v36)
  {
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  sub_20AF5E330((int *)v27, (uint64_t)&v6);
  v16 = v6;
  v3 = sub_20AECEBD0(&__p, &v7);
  *(_OWORD *)a2 = v16;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v4 = v19;
    if (v19)
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)v3;
      *(_QWORD *)(a2 + 32) = *((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v25)
    {
      v5 = v22;
      *(_QWORD *)(a2 + 64) = v21;
      *(_OWORD *)(a2 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a2 + 72) = v5;
      *(_OWORD *)(a2 + 80) = v23;
      *(_QWORD *)(a2 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v4 && v18 < 0)
      operator delete(__p);
    if (!v15)
      goto LABEL_23;
    goto LABEL_15;
  }
  *(_BYTE *)(a2 + 120) = 0;
  if (v15)
  {
LABEL_15:
    if (v14)
    {
      if (v13 < 0)
        operator delete(v12);
      if (v11 < 0)
        operator delete(v10);
    }
    if (v9 && v8 < 0)
      operator delete((void *)v7);
  }
LABEL_23:
  if (!v36 && v35)
  {
    if (v34)
    {
      if (v33 < 0)
        operator delete(v32);
      if (v31 < 0)
        operator delete(v30);
    }
    if (v29)
    {
      if (v28 < 0)
        operator delete((void *)v27[2]);
    }
  }
}

void sub_20B09CC58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECCE40((uint64_t)va);
  sub_20AECD704(v2 - 160);
  _Unwind_Resume(a1);
}

void sub_20B09CC74(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECD704(v1 - 160);
  _Unwind_Resume(a1);
}

void sub_20B09CC88(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  _BYTE *v3;
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  void *__p;
  char v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;
  _QWORD v27[4];
  char v28;
  char v29;
  void *v30;
  char v31;
  void *v32;
  char v33;
  char v34;
  char v35;
  char v36;

  (*(void (**)(_QWORD *__return_ptr))(**(_QWORD **)(a1 + 16) + 24))(v27);
  if (v36)
  {
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  sub_20AF5E330((int *)v27, (uint64_t)&v6);
  v16 = v6;
  v3 = sub_20AECEBD0(&__p, &v7);
  *(_OWORD *)a2 = v16;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v4 = v19;
    if (v19)
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)v3;
      *(_QWORD *)(a2 + 32) = *((_QWORD *)v3 + 2);
      *((_QWORD *)v3 + 1) = 0;
      *((_QWORD *)v3 + 2) = 0;
      *(_QWORD *)v3 = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v25)
    {
      v5 = v22;
      *(_QWORD *)(a2 + 64) = v21;
      *(_OWORD *)(a2 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a2 + 72) = v5;
      *(_OWORD *)(a2 + 80) = v23;
      *(_QWORD *)(a2 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v4 && v18 < 0)
      operator delete(__p);
    if (!v15)
      goto LABEL_23;
    goto LABEL_15;
  }
  *(_BYTE *)(a2 + 120) = 0;
  if (v15)
  {
LABEL_15:
    if (v14)
    {
      if (v13 < 0)
        operator delete(v12);
      if (v11 < 0)
        operator delete(v10);
    }
    if (v9 && v8 < 0)
      operator delete((void *)v7);
  }
LABEL_23:
  if (!v36 && v35)
  {
    if (v34)
    {
      if (v33 < 0)
        operator delete(v32);
      if (v31 < 0)
        operator delete(v30);
    }
    if (v29)
    {
      if (v28 < 0)
        operator delete((void *)v27[2]);
    }
  }
}

void sub_20B09CE78(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECCE40((uint64_t)va);
  sub_20AECD704(v2 - 160);
  _Unwind_Resume(a1);
}

void sub_20B09CE94(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECD704(v1 - 160);
  _Unwind_Resume(a1);
}

_BYTE *sub_20B09CEA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _BYTE *result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t (**v15)();
  _BYTE *v16;
  _BYTE v17[24];
  _BYTE *v18;
  char v19;
  _BYTE v20[24];
  _BYTE *v21;
  char v22;
  uint64_t (**v23)();
  _QWORD v24[3];
  _QWORD *v25;
  char v26;
  _QWORD v27[3];
  _QWORD *v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  v3 = *(_QWORD *)(a1 + 16);
  v20[0] = 0;
  v22 = 0;
  v17[0] = 0;
  v19 = 0;
  v23 = &off_24C413BA8;
  LOBYTE(v24[0]) = 0;
  v26 = 0;
  LOBYTE(v27[0]) = 0;
  v29 = 0;
  v15 = &off_24C411C90;
  v4 = operator new();
  v5 = v4;
  v6 = v24;
  *(_QWORD *)v4 = &off_24C413BA8;
  *(_BYTE *)(v4 + 8) = 0;
  *(_BYTE *)(v4 + 40) = 0;
  if (v26)
  {
    if (v25)
    {
      if (v25 == v24)
      {
        *(_QWORD *)(v4 + 32) = v4 + 8;
        (*(void (**)(_QWORD *))(v24[0] + 24))(v24);
      }
      else
      {
        *(_QWORD *)(v4 + 32) = v25;
        v25 = 0;
      }
    }
    else
    {
      *(_QWORD *)(v4 + 32) = 0;
    }
    *(_BYTE *)(v5 + 40) = 1;
  }
  v7 = v27;
  *(_BYTE *)(v5 + 48) = 0;
  *(_BYTE *)(v5 + 80) = 0;
  if (v29)
  {
    if (v28)
    {
      if (v28 == v27)
      {
        *(_QWORD *)(v5 + 72) = v5 + 48;
        (*(void (**)(_QWORD *))(v27[0] + 24))(v27);
      }
      else
      {
        *(_QWORD *)(v5 + 72) = v28;
        v28 = 0;
      }
    }
    else
    {
      *(_QWORD *)(v5 + 72) = 0;
    }
    *(_BYTE *)(v5 + 80) = 1;
  }
  v16 = (_BYTE *)v5;
  (*(void (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v3 + 32))(v3, &v15);
  result = v16;
  v16 = 0;
  if (result)
    result = (_BYTE *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)result + 8))(result);
  if (v29)
  {
    if (v28 == v27)
    {
      v11 = 4;
    }
    else
    {
      if (!v28)
        goto LABEL_23;
      v11 = 5;
      v7 = v28;
    }
    result = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v7 + 8 * v11))(v7);
  }
LABEL_23:
  if (!v26)
    goto LABEL_29;
  if (v25 == v24)
  {
    v12 = 4;
  }
  else
  {
    if (!v25)
      goto LABEL_29;
    v12 = 5;
    v6 = v25;
  }
  result = (_BYTE *)(*(uint64_t (**)(_QWORD *))(*v6 + 8 * v12))(v6);
LABEL_29:
  if (!v19)
    goto LABEL_35;
  result = v18;
  if (v18 == v17)
  {
    v13 = 4;
    result = v17;
  }
  else
  {
    if (!v18)
      goto LABEL_35;
    v13 = 5;
  }
  result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v13))(result, v8, v9);
LABEL_35:
  if (v22)
  {
    result = v21;
    if (v21 == v20)
    {
      v14 = 4;
      result = v20;
      goto LABEL_40;
    }
    if (v21)
    {
      v14 = 5;
LABEL_40:
      result = (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(*(_QWORD *)result + 8 * v14))(result, v8, v9);
    }
  }
  *(_BYTE *)(a2 + 120) = 1;
  return result;
}

void sub_20B09D148(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,int a24,__int16 a25,char a26,char a27)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B09D200(_QWORD *a1, uint64_t *a2)
{
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *result;
  _QWORD *v8;
  uint64_t v9;
  void *__p[2];
  unsigned __int8 v11;
  _BYTE v12[24];
  int v13;
  char v14;
  char *v15;

  v3 = sub_20AEC01D0(a1, (uint64_t)"SyncControl{server: ", 20);
  v9 = *a2;
  v13 = 0;
  sub_20AED5838((uint64_t)&v15, (uint64_t)v12, &v9);
  if (v13 == -1)
    sub_20AECFAB8();
  v15 = &v14;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40BE70[v13])(__p, &v15, v12);
  if (v13 != -1)
    ((void (*)(char **, _BYTE *))off_24C40BE40[v13])(&v15, v12);
  if ((v11 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v11 & 0x80u) == 0)
    v5 = v11;
  else
    v5 = (uint64_t)__p[1];
  v6 = sub_20AEC01D0(v3, (uint64_t)v4, v5);
  result = sub_20AEC01D0(v6, (uint64_t)"}", 1);
  v8 = result;
  if ((char)v11 < 0)
  {
    operator delete(__p[0]);
    return v8;
  }
  return result;
}

void sub_20B09D314(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B09D328(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B09D344(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B09D358@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  char *v5;
  __int128 v6;
  _BYTE *v7;
  int v8;
  _BYTE *v9;
  __int128 v10;
  __int128 v11;
  unsigned __int8 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  const std::error_category *v17;
  _QWORD *exception;
  void *v19[2];
  char v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  char v27;
  _QWORD v28[3];
  __int128 v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  char v38;
  char v39;
  __int128 v40;
  void *__p;
  char v42;
  unsigned __int8 v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  char v49;
  char v50;
  __int128 v51;
  __int128 v52;
  char v53;
  char v54;
  void *v55;
  char v56;
  void *v57;
  char v58;
  char v59;
  char v60;
  char v61;
  _QWORD v62[3];
  __int128 v63;
  __int128 v64;
  __int128 v65;
  __int128 v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  char v71;
  char v72;
  char v73;
  char v74;

  v28[0] = a2;
  v28[1] = a1;
  v28[2] = a3;
  LOBYTE(v63) = 0;
  v74 = 0;
  v62[0] = &off_24C40BCC0;
  v62[1] = &v63;
  v62[2] = v28;
  sub_20B52A3E8((uint64_t)v62, (uint64_t)&v51);
  if (v61)
  {
    v39 = v73;
    if (v73)
    {
      v29 = v63;
      v63 = 0uLL;
      LOBYTE(v30) = 0;
      LOBYTE(v32) = 0;
      if (!(_BYTE)v66)
        goto LABEL_19;
      v5 = (char *)&v32;
      v6 = v64;
      v64 = 0uLL;
      v30 = v6;
      v31 = v65;
    }
    else
    {
      v29 = v63;
      LOBYTE(v30) = 0;
      v38 = 0;
      if (!v72)
        goto LABEL_19;
      v5 = &v38;
      BYTE8(v31) = 0;
      if (BYTE8(v65))
      {
        v30 = v64;
        *(_QWORD *)&v31 = v65;
        *(_QWORD *)&v65 = 0;
        v64 = 0uLL;
        BYTE8(v31) = 1;
      }
      LOBYTE(v32) = 0;
      v37 = 0;
      if (v71)
      {
        v33 = v67;
        v32 = v66;
        v66 = 0uLL;
        v34 = v68;
        v35 = v69;
        v36 = v70;
        v67 = 0;
        v69 = 0uLL;
        v70 = 0;
        v37 = 1;
      }
    }
    *v5 = 1;
  }
  else
  {
    v40 = v51;
    v7 = sub_20AECEBD0(&__p, &v52);
    v29 = v40;
    LOBYTE(v30) = 0;
    v38 = 0;
    if (v50)
    {
      BYTE8(v31) = 0;
      v8 = v43;
      if (v43)
      {
        v30 = *(_OWORD *)v7;
        *(_QWORD *)&v31 = *((_QWORD *)v7 + 2);
        *((_QWORD *)v7 + 1) = 0;
        *((_QWORD *)v7 + 2) = 0;
        *(_QWORD *)v7 = 0;
        BYTE8(v31) = 1;
      }
      LOBYTE(v32) = 0;
      v37 = 0;
      if (v49)
      {
        v33 = v45;
        v32 = v44;
        v44 = 0uLL;
        v34 = v46;
        v35 = v47;
        v36 = v48;
        v45 = 0;
        v47 = 0uLL;
        v48 = 0;
        v37 = 1;
      }
      v38 = 1;
      v39 = 0;
      if (v8 && v42 < 0)
        operator delete(__p);
    }
    else
    {
      v39 = 0;
    }
    if (!v61 && v60)
    {
      if (v59)
      {
        if (v58 < 0)
          operator delete(v57);
        if (v56 < 0)
          operator delete(v55);
      }
      if (v54 && v53 < 0)
        operator delete((void *)v52);
    }
  }
LABEL_19:
  if (v74)
    sub_20AF44318((uint64_t)&v63);
  if (v39)
  {
    *(_BYTE *)(a4 + 120) = 1;
    *(_OWORD *)a4 = v29;
    v29 = 0uLL;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 48) = 0;
    v9 = (_BYTE *)(a4 + 48);
    if ((_BYTE)v32)
    {
      v10 = v30;
      v11 = v31;
      v30 = 0uLL;
      *(_OWORD *)(a4 + 16) = v10;
      *(_OWORD *)(a4 + 32) = v11;
LABEL_24:
      *v9 = 1;
    }
  }
  else
  {
    v13 = atomic_load((unsigned __int8 *)&qword_25463AE88);
    if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_25463AE88))
    {
      v17 = std::generic_category();
      qword_25463AE90 = 22;
      qword_25463AE98 = (uint64_t)v17;
      __cxa_guard_release(&qword_25463AE88);
    }
    if (v39)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C3F6160;
      __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
    }
    if (*((_QWORD *)&v29 + 1) != qword_25463AE98 || (_DWORD)v29 != (_DWORD)qword_25463AE90)
    {
      *(_BYTE *)(a4 + 120) = 0;
      *(_OWORD *)a4 = v29;
      *(_BYTE *)(a4 + 16) = 0;
      *(_BYTE *)(a4 + 112) = 0;
      v9 = (_BYTE *)(a4 + 112);
      if (!v38)
        return sub_20AF44318((uint64_t)&v29);
      *(_BYTE *)(a4 + 40) = 0;
      if (BYTE8(v31))
      {
        *(_OWORD *)(a4 + 16) = v30;
        *(_QWORD *)(a4 + 32) = v31;
        *(_QWORD *)&v31 = 0;
        v30 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v37)
      {
        v16 = v34;
        *(_QWORD *)(a4 + 64) = v33;
        *(_OWORD *)(a4 + 48) = v32;
        v32 = 0uLL;
        *(_QWORD *)(a4 + 72) = v16;
        *(_OWORD *)(a4 + 80) = v35;
        *(_QWORD *)(a4 + 96) = v36;
        v33 = 0;
        v35 = 0uLL;
        v36 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      goto LABEL_24;
    }
    sub_20AECEBD0(v19, &v30);
    sub_20AECCC3C(0xAu, (__int128 *)v19, (uint64_t)&v63);
    *(_OWORD *)a4 = v63;
    *(_BYTE *)(a4 + 16) = 0;
    *(_BYTE *)(a4 + 112) = 0;
    if (v72)
    {
      *(_BYTE *)(a4 + 40) = 0;
      v14 = BYTE8(v65);
      if (BYTE8(v65))
      {
        *(_OWORD *)(a4 + 16) = v64;
        *(_QWORD *)(a4 + 32) = v65;
        *(_QWORD *)&v65 = 0;
        v64 = 0uLL;
        *(_BYTE *)(a4 + 40) = 1;
      }
      *(_BYTE *)(a4 + 48) = 0;
      *(_BYTE *)(a4 + 104) = 0;
      if (v71)
      {
        v15 = v68;
        *(_QWORD *)(a4 + 64) = v67;
        *(_OWORD *)(a4 + 48) = v66;
        v66 = 0uLL;
        *(_QWORD *)(a4 + 72) = v15;
        *(_OWORD *)(a4 + 80) = v69;
        *(_QWORD *)(a4 + 96) = v70;
        v67 = 0;
        v69 = 0uLL;
        v70 = 0;
        *(_BYTE *)(a4 + 104) = 1;
      }
      *(_BYTE *)(a4 + 112) = 1;
      *(_BYTE *)(a4 + 120) = 0;
      if (v14 && SBYTE7(v65) < 0)
        operator delete((void *)v64);
    }
    else
    {
      *(_BYTE *)(a4 + 120) = 0;
    }
    if (v27)
    {
      if (v26)
      {
        if (v25 < 0)
          operator delete(v24);
        if (v23 < 0)
          operator delete(v22);
      }
      if (v21 && v20 < 0)
        operator delete(v19[0]);
    }
  }
  return sub_20AF44318((uint64_t)&v29);
}

void sub_20B09D8B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  sub_20AECCDB4((uint64_t)&a9);
  sub_20AF44318((uint64_t)&a25);
  _Unwind_Resume(a1);
}

uint64_t sub_20B09D904(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  if (*(_BYTE *)(a1 + 48))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 24);
    if (v2)
    {
      p_shared_owners = (unint64_t *)&v2->__shared_owners_;
      do
        v4 = __ldaxr(p_shared_owners);
      while (__stlxr(v4 - 1, p_shared_owners));
      if (!v4)
      {
        ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
        std::__shared_weak_count::__release_weak(v2);
      }
    }
  }
  v5 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20B09D9AC(char *__s@<X2>, uint64_t *a2@<X0>, unsigned __int8 *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v6;
  size_t v8;
  size_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  int v15;
  uint64_t v16;
  __int128 __dst;
  __int128 v18;
  uint64_t v19;
  unsigned __int8 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;

  v6 = *a2;
  if (!__s)
  {
    BYTE7(v18) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_12;
  }
  v8 = strlen(__s);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    *(_QWORD *)&v18 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    BYTE7(v18) = v8;
    p_dst = &__dst;
    if (!v8)
      goto LABEL_11;
  }
  memcpy(p_dst, __s, v9);
LABEL_11:
  *((_BYTE *)p_dst + v9) = 0;
LABEL_12:
  v13 = sub_20B23BCBC(*(_QWORD *)(v6 + 8), a3, (uint64_t)&__dst);
  v14 = v13;
  if ((SBYTE7(v18) & 0x80000000) == 0)
  {
    if (v13 < 0x100u)
      goto LABEL_14;
LABEL_23:
    *(_BYTE *)a4 = v14;
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  operator delete((void *)__dst);
  if (v14 >= 0x100u)
    goto LABEL_23;
LABEL_14:
  sub_20B09A7E8(a3, "client", (uint64_t)&__dst);
  *(_OWORD *)a4 = __dst;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v27)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v15 = v20;
    if (v20)
    {
      *(_OWORD *)(a4 + 16) = v18;
      *(_QWORD *)(a4 + 32) = v19;
      v19 = 0;
      v18 = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v26)
    {
      v16 = v23;
      *(_QWORD *)(a4 + 64) = v22;
      *(_OWORD *)(a4 + 48) = v21;
      v21 = 0uLL;
      *(_QWORD *)(a4 + 72) = v16;
      *(_OWORD *)(a4 + 80) = v24;
      *(_QWORD *)(a4 + 96) = v25;
      v22 = 0;
      v24 = 0uLL;
      v25 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v15)
    {
      if (SHIBYTE(v19) < 0)
        operator delete((void *)v18);
    }
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
}

void sub_20B09DBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B09DBC4(char *__s@<X2>, uint64_t *a2@<X0>, unsigned __int8 *a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t v6;
  size_t v8;
  size_t v9;
  __int128 *p_dst;
  uint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  unsigned __int16 v14;
  int v15;
  uint64_t v16;
  __int128 __dst;
  __int128 v18;
  uint64_t v19;
  unsigned __int8 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  char v26;
  char v27;

  v6 = *a2;
  if (!__s)
  {
    BYTE7(v18) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_12;
  }
  v8 = strlen(__s);
  if (v8 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (__int128 *)operator new(v11 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    *(_QWORD *)&v18 = v12 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    BYTE7(v18) = v8;
    p_dst = &__dst;
    if (!v8)
      goto LABEL_11;
  }
  memcpy(p_dst, __s, v9);
LABEL_11:
  *((_BYTE *)p_dst + v9) = 0;
LABEL_12:
  v13 = sub_20B23BE10(*(_QWORD *)(v6 + 8), a3, (void **)&__dst);
  v14 = v13;
  if ((SBYTE7(v18) & 0x80000000) == 0)
  {
    if (v13 < 0x100u)
      goto LABEL_14;
LABEL_23:
    *(_BYTE *)a4 = v14;
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  operator delete((void *)__dst);
  if (v14 >= 0x100u)
    goto LABEL_23;
LABEL_14:
  sub_20B09A7E8(a3, "client", (uint64_t)&__dst);
  *(_OWORD *)a4 = __dst;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v27)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v15 = v20;
    if (v20)
    {
      *(_OWORD *)(a4 + 16) = v18;
      *(_QWORD *)(a4 + 32) = v19;
      v19 = 0;
      v18 = 0uLL;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v26)
    {
      v16 = v23;
      *(_QWORD *)(a4 + 64) = v22;
      *(_OWORD *)(a4 + 48) = v21;
      v21 = 0uLL;
      *(_QWORD *)(a4 + 72) = v16;
      *(_OWORD *)(a4 + 80) = v24;
      *(_QWORD *)(a4 + 96) = v25;
      v22 = 0;
      v24 = 0uLL;
      v25 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v15)
    {
      if (SHIBYTE(v19) < 0)
        operator delete((void *)v18);
    }
  }
  else
  {
    *(_BYTE *)(a4 + 120) = 0;
  }
}

void sub_20B09DDC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B09DDDC(uint64_t a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X8>)
{
  char *v5;
  char **v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 __p;
  uint64_t v15;
  unsigned __int8 v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  char v22;
  char v23;
  char **v24;
  char *v25;
  uint64_t v26;
  char **v27;
  char *v28;
  uint64_t v29;
  char v30;

  sub_20B23BF50(*(_QWORD *)(*(_QWORD *)a1 + 8), a2, (uint64_t)&v27);
  if (v30)
  {
    v6 = v27;
    v5 = v28;
    v24 = v27;
    v25 = v28;
    v26 = v29;
    if (v29)
    {
      *((_QWORD *)v28 + 2) = &v25;
      v27 = &v28;
      v28 = 0;
      v29 = 0;
      *(_QWORD *)&v13 = v6;
      *((_QWORD *)&v13 + 1) = v5;
      *(_QWORD *)&__p = v26;
      if (v26)
      {
        *((_QWORD *)v5 + 2) = (char *)&v13 + 8;
        v24 = &v25;
        v25 = 0;
        v26 = 0;
        *(_QWORD *)a3 = v6;
        *(_QWORD *)(a3 + 8) = v5;
        v7 = a3 + 8;
        v8 = __p;
        *(_QWORD *)(a3 + 16) = __p;
        if (!v8)
        {
LABEL_5:
          *(_QWORD *)a3 = v7;
          v9 = (char *)*((_QWORD *)&v13 + 1);
LABEL_18:
          *(_BYTE *)(a3 + 120) = 1;
          sub_20AEC833C((uint64_t)&v13, v9);
          sub_20AEC833C((uint64_t)&v24, v25);
          goto LABEL_19;
        }
LABEL_17:
        v9 = 0;
        *((_QWORD *)v5 + 2) = v7;
        *(_QWORD *)&v13 = (char *)&v13 + 8;
        *((_QWORD *)&v13 + 1) = 0;
        *(_QWORD *)&__p = 0;
        goto LABEL_18;
      }
    }
    else
    {
      v24 = &v25;
      *((_QWORD *)&v13 + 1) = v28;
      *(_QWORD *)&__p = 0;
    }
    *(_QWORD *)&v13 = (char *)&v13 + 8;
    *(_QWORD *)a3 = (char *)&v13 + 8;
    *(_QWORD *)(a3 + 8) = v5;
    v7 = a3 + 8;
    v12 = __p;
    *(_QWORD *)(a3 + 16) = __p;
    if (!v12)
      goto LABEL_5;
    goto LABEL_17;
  }
  sub_20B09A7E8(a2, "client", (uint64_t)&v13);
  *(_OWORD *)a3 = v13;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v23)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v10 = v16;
    if (v16)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v15;
      v15 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v22)
    {
      v11 = v19;
      *(_QWORD *)(a3 + 64) = v18;
      *(_OWORD *)(a3 + 48) = v17;
      v17 = 0uLL;
      *(_QWORD *)(a3 + 72) = v11;
      *(_OWORD *)(a3 + 80) = v20;
      *(_QWORD *)(a3 + 96) = v21;
      v18 = 0;
      v20 = 0uLL;
      v21 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (!v10 || (SHIBYTE(v15) & 0x80000000) == 0)
    {
LABEL_19:
      if (!v30)
        return;
      goto LABEL_20;
    }
    operator delete((void *)__p);
    if (!v30)
      return;
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v30)
      return;
  }
LABEL_20:
  sub_20AEC833C((uint64_t)&v27, v28);
}

void sub_20B09DFFC(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(_BYTE *)(v1 - 40))
    sub_20AEC833C(v1 - 64, *(char **)(v1 - 56));
  _Unwind_Resume(exception_object);
}

void sub_20B09E01C(char *__s@<X2>, uint64_t **a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  int v7;
  size_t v9;
  size_t v10;
  __int128 *p_dst;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  char v26;
  char v27;
  __int128 __dst;
  void *v29;
  char v30;
  unsigned __int8 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  char v38;
  int v39[4];
  void *v40;
  char v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v6 = *a2;
  v7 = *(unsigned __int8 *)(a3 + 16);
  if (!__s)
  {
    HIBYTE(v29) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_12;
  }
  v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&__dst + 1) = v10;
    v29 = (void *)(v13 | 0x8000000000000000);
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v29) = v9;
    p_dst = &__dst;
    if (!v9)
      goto LABEL_11;
  }
  memcpy(p_dst, __s, v10);
LABEL_11:
  *((_BYTE *)p_dst + v10) = 0;
LABEL_12:
  v14 = a3;
  if (!v7)
    v14 = 0;
  sub_20B23DF24(v6, v14 | a3 & 0xFFFFFFFFFFFFFF00, v7, (uint64_t)&__dst);
  if (SHIBYTE(v29) < 0)
  {
    operator delete((void *)__dst);
    if (v49)
      goto LABEL_16;
  }
  else if (v49)
  {
LABEL_16:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  sub_20AF5E330(v39, (uint64_t)&v18);
  __dst = v18;
  v15 = sub_20AECEBD0(&v29, &v19);
  *(_OWORD *)a4 = __dst;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v38)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v16 = v31;
    if (v31)
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v15;
      *(_QWORD *)(a4 + 32) = *((_QWORD *)v15 + 2);
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = 0;
      *(_QWORD *)v15 = 0;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v37)
    {
      v17 = v34;
      *(_QWORD *)(a4 + 64) = v33;
      *(_OWORD *)(a4 + 48) = v32;
      v32 = 0uLL;
      *(_QWORD *)(a4 + 72) = v17;
      *(_OWORD *)(a4 + 80) = v35;
      *(_QWORD *)(a4 + 96) = v36;
      v33 = 0;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v16 && v30 < 0)
      operator delete(v29);
    if (!v27)
      goto LABEL_37;
    goto LABEL_29;
  }
  *(_BYTE *)(a4 + 120) = 0;
  if (v27)
  {
LABEL_29:
    if (v26)
    {
      if (v25 < 0)
        operator delete(__p);
      if (v23 < 0)
        operator delete(v22);
    }
    if (v21 && v20 < 0)
      operator delete((void *)v19);
  }
LABEL_37:
  if (!v49 && v48)
  {
    if (v47)
    {
      if (v46 < 0)
        operator delete(v45);
      if (v44 < 0)
        operator delete(v43);
    }
    if (v42)
    {
      if (v41 < 0)
        operator delete(v40);
    }
  }
}

void sub_20B09E2E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECCE40((uint64_t)va);
  sub_20AECD704(v2 - 208);
  _Unwind_Resume(a1);
}

void sub_20B09E304(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B09E320(char *__s@<X2>, uint64_t **a2@<X0>, uint64_t a3@<X1>, uint64_t a4@<X8>)
{
  uint64_t *v6;
  int v7;
  size_t v9;
  size_t v10;
  __int128 *p_dst;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _BYTE *v15;
  int v16;
  uint64_t v17;
  __int128 v18;
  __int128 v19;
  char v20;
  char v21;
  void *v22;
  char v23;
  void *__p;
  char v25;
  char v26;
  char v27;
  __int128 __dst;
  void *v29;
  char v30;
  unsigned __int8 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  char v38;
  int v39[4];
  void *v40;
  char v41;
  char v42;
  void *v43;
  char v44;
  void *v45;
  char v46;
  char v47;
  char v48;
  char v49;

  v6 = *a2;
  v7 = *(unsigned __int8 *)(a3 + 16);
  if (!__s)
  {
    HIBYTE(v29) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_12;
  }
  v9 = strlen(__s);
  if (v9 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v10 = v9;
  if (v9 >= 0x17)
  {
    v12 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v12 = v9 | 7;
    v13 = v12 + 1;
    p_dst = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&__dst + 1) = v10;
    v29 = (void *)(v13 | 0x8000000000000000);
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v29) = v9;
    p_dst = &__dst;
    if (!v9)
      goto LABEL_11;
  }
  memcpy(p_dst, __s, v10);
LABEL_11:
  *((_BYTE *)p_dst + v10) = 0;
LABEL_12:
  v14 = a3;
  if (!v7)
    v14 = 0;
  sub_20B23E2A8(v6, v14 | a3 & 0xFFFFFFFFFFFFFF00, v7, (uint64_t)&__dst);
  if (SHIBYTE(v29) < 0)
  {
    operator delete((void *)__dst);
    if (v49)
      goto LABEL_16;
  }
  else if (v49)
  {
LABEL_16:
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  sub_20AF5E330(v39, (uint64_t)&v18);
  __dst = v18;
  v15 = sub_20AECEBD0(&v29, &v19);
  *(_OWORD *)a4 = __dst;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v38)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v16 = v31;
    if (v31)
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v15;
      *(_QWORD *)(a4 + 32) = *((_QWORD *)v15 + 2);
      *((_QWORD *)v15 + 1) = 0;
      *((_QWORD *)v15 + 2) = 0;
      *(_QWORD *)v15 = 0;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v37)
    {
      v17 = v34;
      *(_QWORD *)(a4 + 64) = v33;
      *(_OWORD *)(a4 + 48) = v32;
      v32 = 0uLL;
      *(_QWORD *)(a4 + 72) = v17;
      *(_OWORD *)(a4 + 80) = v35;
      *(_QWORD *)(a4 + 96) = v36;
      v33 = 0;
      v35 = 0uLL;
      v36 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v16 && v30 < 0)
      operator delete(v29);
    if (!v27)
      goto LABEL_37;
    goto LABEL_29;
  }
  *(_BYTE *)(a4 + 120) = 0;
  if (v27)
  {
LABEL_29:
    if (v26)
    {
      if (v25 < 0)
        operator delete(__p);
      if (v23 < 0)
        operator delete(v22);
    }
    if (v21 && v20 < 0)
      operator delete((void *)v19);
  }
LABEL_37:
  if (!v49 && v48)
  {
    if (v47)
    {
      if (v46 < 0)
        operator delete(v45);
      if (v44 < 0)
        operator delete(v43);
    }
    if (v42)
    {
      if (v41 < 0)
        operator delete(v40);
    }
  }
}

void sub_20B09E5E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECCE40((uint64_t)va);
  sub_20AECD704(v2 - 208);
  _Unwind_Resume(a1);
}

void sub_20B09E608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B09E624(char *__s@<X2>, uint64_t **a2@<X0>, uint64_t a3@<X1>, unsigned int a4@<W3>, uint64_t a5@<X8>)
{
  char v5;
  uint64_t *v9;
  int v10;
  size_t v11;
  size_t v12;
  __int128 *p_dst;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  int v20;
  uint64_t v21;
  __int128 v22;
  __int128 v23;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  char v30;
  char v31;
  __int128 __dst;
  void *v33;
  char v34;
  unsigned __int8 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  __int128 v39;
  uint64_t v40;
  char v41;
  char v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;
  unsigned __int8 v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  char v52;
  char v53;
  char v54;

  v5 = a4;
  if (a4 >= 3)
  {
    sub_20AFAF740(a4, (uint64_t)&v43);
    *(_OWORD *)a5 = v43;
    *(_BYTE *)(a5 + 16) = 0;
    *(_BYTE *)(a5 + 112) = 0;
    if (!v53)
    {
      *(_BYTE *)(a5 + 120) = 0;
      return;
    }
    *(_BYTE *)(a5 + 40) = 0;
    v14 = v46;
    if (v46)
    {
      *(_OWORD *)(a5 + 16) = v44;
      *(_QWORD *)(a5 + 32) = v45;
      v45 = 0;
      v44 = 0uLL;
      *(_BYTE *)(a5 + 40) = 1;
    }
    *(_BYTE *)(a5 + 48) = 0;
    *(_BYTE *)(a5 + 104) = 0;
    if (v52)
    {
      v15 = v49;
      *(_QWORD *)(a5 + 64) = v48;
      *(_OWORD *)(a5 + 48) = v47;
      v47 = 0uLL;
      *(_QWORD *)(a5 + 72) = v15;
      *(_OWORD *)(a5 + 80) = v50;
      *(_QWORD *)(a5 + 96) = v51;
      v48 = 0;
      v50 = 0uLL;
      v51 = 0;
      *(_BYTE *)(a5 + 104) = 1;
    }
    *(_BYTE *)(a5 + 112) = 1;
    *(_BYTE *)(a5 + 120) = 0;
    if (!v14)
      return;
LABEL_13:
    if (SHIBYTE(v45) < 0)
      operator delete((void *)v44);
    return;
  }
  v9 = *a2;
  v10 = *(unsigned __int8 *)(a3 + 16);
  if (!__s)
  {
    HIBYTE(v33) = 0;
    LOBYTE(__dst) = 0;
    goto LABEL_22;
  }
  v11 = strlen(__s);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  v12 = v11;
  if (v11 >= 0x17)
  {
    v16 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v16 = v11 | 7;
    v17 = v16 + 1;
    p_dst = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dst + 1) = v12;
    v33 = (void *)(v17 | 0x8000000000000000);
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v33) = v11;
    p_dst = &__dst;
    if (!v11)
      goto LABEL_21;
  }
  memcpy(p_dst, __s, v12);
LABEL_21:
  *((_BYTE *)p_dst + v12) = 0;
LABEL_22:
  v18 = a3;
  if (!v10)
    v18 = 0;
  sub_20B23E3C0(v9, v18 | a3 & 0xFFFFFFFFFFFFFF00, v10, (uint64_t)&__dst, v5);
  if (SHIBYTE(v33) < 0)
  {
    operator delete((void *)__dst);
    if (v54)
      goto LABEL_26;
  }
  else if (v54)
  {
LABEL_26:
    *(_BYTE *)(a5 + 120) = 1;
    return;
  }
  sub_20AF5E330((int *)&v43, (uint64_t)&v22);
  __dst = v22;
  v19 = sub_20AECEBD0(&v33, &v23);
  *(_OWORD *)a5 = __dst;
  *(_BYTE *)(a5 + 16) = 0;
  *(_BYTE *)(a5 + 112) = 0;
  if (v42)
  {
    *(_BYTE *)(a5 + 40) = 0;
    v20 = v35;
    if (v35)
    {
      *(_OWORD *)(a5 + 16) = *(_OWORD *)v19;
      *(_QWORD *)(a5 + 32) = *((_QWORD *)v19 + 2);
      *((_QWORD *)v19 + 1) = 0;
      *((_QWORD *)v19 + 2) = 0;
      *(_QWORD *)v19 = 0;
      *(_BYTE *)(a5 + 40) = 1;
    }
    *(_BYTE *)(a5 + 48) = 0;
    *(_BYTE *)(a5 + 104) = 0;
    if (v41)
    {
      v21 = v38;
      *(_QWORD *)(a5 + 64) = v37;
      *(_OWORD *)(a5 + 48) = v36;
      v36 = 0uLL;
      *(_QWORD *)(a5 + 72) = v21;
      *(_OWORD *)(a5 + 80) = v39;
      *(_QWORD *)(a5 + 96) = v40;
      v37 = 0;
      v39 = 0uLL;
      v40 = 0;
      *(_BYTE *)(a5 + 104) = 1;
    }
    *(_BYTE *)(a5 + 112) = 1;
    *(_BYTE *)(a5 + 120) = 0;
    if (v20 && v34 < 0)
      operator delete(v33);
  }
  else
  {
    *(_BYTE *)(a5 + 120) = 0;
  }
  if (v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(__p);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25 && v24 < 0)
      operator delete((void *)v23);
  }
  if (!v54 && v53)
  {
    if (v52)
    {
      if (SHIBYTE(v51) < 0)
        operator delete((void *)v50);
      if (SHIBYTE(v48) < 0)
        operator delete((void *)v47);
    }
    if (v46)
      goto LABEL_13;
  }
}

void sub_20B09E9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECCE40((uint64_t)va);
  sub_20AECD704(v2 - 224);
  _Unwind_Resume(a1);
}

void sub_20B09E9DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B09E9F8(uint64_t **a1@<X0>, uint64_t a2@<X1>, const void ***a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t *v5;
  uint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  char v19;
  __int128 v20;
  void *__p;
  char v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  int v31[4];
  void *v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  char v39;
  char v40;
  char v41;

  v5 = *a1;
  v6 = a2;
  if (!*(_BYTE *)(a2 + 16))
    v6 = 0;
  sub_20B23E03C(v5, v6 | a2 & 0xFFFFFFFFFFFFFF00, *(_BYTE *)(a2 + 16), a3);
  if (v41)
  {
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  sub_20AF5E330(v31, (uint64_t)&v10);
  v20 = v10;
  v7 = sub_20AECEBD0(&__p, &v11);
  *(_OWORD *)a4 = v20;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (v30)
  {
    *(_BYTE *)(a4 + 40) = 0;
    v8 = v23;
    if (v23)
    {
      *(_OWORD *)(a4 + 16) = *(_OWORD *)v7;
      *(_QWORD *)(a4 + 32) = *((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = 0;
      *(_BYTE *)(a4 + 40) = 1;
    }
    *(_BYTE *)(a4 + 48) = 0;
    *(_BYTE *)(a4 + 104) = 0;
    if (v29)
    {
      v9 = v26;
      *(_QWORD *)(a4 + 64) = v25;
      *(_OWORD *)(a4 + 48) = v24;
      v24 = 0uLL;
      *(_QWORD *)(a4 + 72) = v9;
      *(_OWORD *)(a4 + 80) = v27;
      *(_QWORD *)(a4 + 96) = v28;
      v25 = 0;
      v27 = 0uLL;
      v28 = 0;
      *(_BYTE *)(a4 + 104) = 1;
    }
    *(_BYTE *)(a4 + 112) = 1;
    *(_BYTE *)(a4 + 120) = 0;
    if (v8 && v22 < 0)
      operator delete(__p);
    if (!v19)
      goto LABEL_25;
    goto LABEL_17;
  }
  *(_BYTE *)(a4 + 120) = 0;
  if (v19)
  {
LABEL_17:
    if (v18)
    {
      if (v17 < 0)
        operator delete(v16);
      if (v15 < 0)
        operator delete(v14);
    }
    if (v13 && v12 < 0)
      operator delete((void *)v11);
  }
LABEL_25:
  if (!v41 && v40)
  {
    if (v39)
    {
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
    }
    if (v34)
    {
      if (v33 < 0)
        operator delete(v32);
    }
  }
}

void sub_20B09EBFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AECCE40((uint64_t)va);
  sub_20AECD704(v2 - 160);
  _Unwind_Resume(a1);
}

void sub_20B09EC18(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECD704(v1 - 160);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B09EC2C(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20B09EDC0(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

_QWORD *sub_20B09EDCC(_QWORD *result, _QWORD *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD v6[4];

  v6[3] = *MEMORY[0x24BDAC8D0];
  if (a2 != result)
  {
    v3 = result;
    v4 = (_QWORD *)result[3];
    v5 = (_QWORD *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, v6);
        (*(void (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(_QWORD *, _QWORD *))(v6[0] + 24))(v6, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(_QWORD *, _QWORD *))(*result + 24))(result, a2);
        result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, result);
      result = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_20B09EF60(_Unwind_Exception *a1, int a2)
{
  if (!a2)
    _Unwind_Resume(a1);
  sub_20AEC01C0(a1);
}

void sub_20B09EF70()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B09EF84(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t *v5;
  uint64_t *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD *v14;
  _BYTE *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  _QWORD *v23;
  _BYTE *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;
  uint64_t *v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  std::__shared_weak_count *v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  char *v69;
  char *v70;
  void *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  _QWORD *v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81;
  std::__shared_weak_count *v82;
  unint64_t *v83;
  unint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  void *v91;
  std::__shared_weak_count *v92;
  unint64_t *v93;
  unint64_t v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  uint64_t *v101;
  std::logic_error *exception;
  void *v103;
  char *v104;
  char v105;
  int v106;
  uint64_t (**v107)();
  __int128 v108;
  _QWORD v109[3];
  _QWORD *v110;
  char v111;
  _QWORD v112[3];
  uint64_t *v113;
  char v114;
  _QWORD v115[3];
  uint64_t *v116;
  char v117;
  _BYTE v118[24];
  _BYTE *v119;
  char v120;
  _QWORD v121[3];
  uint64_t *v122;
  char v123;
  _BYTE v124[24];
  _BYTE *v125;
  char v126;
  uint64_t v127;
  char v128;
  char v129;
  void *__p;
  uint64_t *v131;
  char v132;
  char v133;
  int v134;
  char *v135;
  char v136;
  _BYTE v137[24];
  _BYTE *v138;
  char v139;
  _BYTE v140[24];
  _BYTE *v141;
  char v142;
  __int128 v143;
  __int128 v144;
  uint64_t v145;
  char v146;
  int v147;
  _QWORD v148[3];
  _QWORD *v149;
  char v150;
  _QWORD v151[3];
  _QWORD *v152;
  char v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  int v157;
  _BYTE v158[24];
  _BYTE *v159;
  char v160;
  _BYTE v161[24];
  _BYTE *v162;
  char v163;
  _QWORD v164[3];
  _QWORD *v165;
  uint64_t v166;

  v166 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  v2 = *(_QWORD **)(a1 + 16);
  v3 = *v2;
  LOBYTE(v127) = 0;
  v128 = 0;
  v129 = 1;
  v4 = atomic_load((unsigned __int8 *)&qword_25463CD70);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_25463CD70))
  {
    v101 = sub_20B0C19F8(1);
    sub_20AF43774(qword_25463CD58, (uint64_t)v101);
    __cxa_atexit((void (*)(void *))sub_20AFAAEB8, qword_25463CD58, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CD70);
  }
  sub_20AF43774(&__p, (uint64_t)qword_25463CD58);
  v133 = 1;
  v134 = 0;
  sub_20B09C628((uint64_t)&v143, &v127);
  if (v133)
  {
    v5 = (uint64_t *)__p;
    if (__p)
    {
      v6 = v131;
      v7 = __p;
      if (v131 != __p)
      {
        do
        {
          v8 = (std::__shared_weak_count *)*(v6 - 1);
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          v6 -= 2;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v131 = v5;
      operator delete(v7);
    }
  }
  if (*(_BYTE *)(v3 + 136))
  {
    sub_20AF43528((uint64_t)&v154, (uint64_t *)v3);
  }
  else
  {
    *(_QWORD *)&v154 = v143;
    *(_QWORD *)((char *)&v154 + 5) = *(_QWORD *)((char *)&v143 + 5);
    LOBYTE(v155) = 0;
    BYTE8(v156) = 0;
    if (v146)
    {
      v155 = v144;
      *(_QWORD *)&v156 = v145;
      v145 = 0;
      v144 = 0uLL;
      BYTE8(v156) = 1;
    }
    v157 = v147;
    v158[0] = 0;
    v160 = 0;
    if (v150)
    {
      if (v149)
      {
        if (v149 == v148)
        {
          v159 = v158;
          (*(void (**)(void))(v148[0] + 24))();
        }
        else
        {
          v159 = v149;
          v149 = 0;
        }
      }
      else
      {
        v159 = 0;
      }
      v160 = 1;
    }
    v161[0] = 0;
    v163 = 0;
    if (v153)
    {
      if (v152)
      {
        if (v152 == v151)
        {
          v162 = v161;
          (*(void (**)(void))(v151[0] + 24))();
        }
        else
        {
          v162 = v152;
          v152 = 0;
        }
      }
      else
      {
        v162 = 0;
      }
      v163 = 1;
    }
  }
  LOBYTE(v103) = 0;
  v105 = 0;
  if (BYTE8(v156))
  {
    sub_20AF43774(&v103, (uint64_t)&v155);
    v105 = 1;
  }
  v106 = v157;
  v11 = v2[1];
  if (!*(_BYTE *)(v11 + 32))
  {
    v124[0] = 0;
    v126 = 0;
    goto LABEL_60;
  }
  v12 = *(_QWORD *)(v11 + 24);
  if (!v12)
  {
    v13 = 0;
    v131 = 0;
    goto LABEL_44;
  }
  if (v12 == v11)
  {
    v131 = &v127;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v11 + 24))(v11, &v127);
    v13 = v131;
    if (v131)
      goto LABEL_42;
LABEL_44:
    v122 = v13;
    goto LABEL_45;
  }
  v13 = (uint64_t *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v12 + 16))(*(_QWORD *)(v11 + 24));
  v131 = v13;
  if (!v13)
    goto LABEL_44;
LABEL_42:
  if (v13 != &v127)
  {
    v13 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v13 + 16))(v13);
    goto LABEL_44;
  }
  v122 = v121;
  (*(void (**)(uint64_t *, _QWORD *))(v127 + 24))(&v127, v121);
LABEL_45:
  v14 = operator new(0x28uLL);
  v15 = v14;
  *v14 = &off_24C40BD50;
  if (v122)
  {
    if (v122 == v121)
    {
      v14[4] = v14 + 1;
      (*(void (**)(_QWORD *))(v121[0] + 24))(v121);
    }
    else
    {
      v14[4] = v122;
      v122 = 0;
    }
  }
  else
  {
    v14[4] = 0;
  }
  v125 = v15;
  v126 = 1;
  v16 = v122;
  if (v122 == v121)
  {
    v17 = 4;
    v16 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_55;
    v17 = 5;
  }
  (*(void (**)(void))(*v16 + 8 * v17))();
LABEL_55:
  v18 = v131;
  if (v131 == &v127)
  {
    v19 = 4;
    v18 = &v127;
  }
  else
  {
    if (!v131)
      goto LABEL_60;
    v19 = 5;
  }
  (*(void (**)(void))(*v18 + 8 * v19))();
LABEL_60:
  LOBYTE(v121[0]) = 0;
  v123 = 0;
  v20 = *v2;
  if (!*(_BYTE *)(*v2 + 136))
  {
    v118[0] = 0;
    v120 = 0;
LABEL_95:
    LOBYTE(v115[0]) = 0;
    v117 = 0;
    goto LABEL_116;
  }
  if (!*(_BYTE *)(v20 + 88))
  {
    v118[0] = 0;
    v120 = 0;
    goto LABEL_90;
  }
  v21 = *(uint64_t **)(v20 + 80);
  if (!v21)
  {
    v131 = 0;
    goto LABEL_73;
  }
  v22 = (uint64_t *)(v20 + 56);
  if (v21 == v22)
  {
    v131 = &v127;
    (*(void (**)(uint64_t *, uint64_t *))(*v22 + 24))(v22, &v127);
    v21 = v131;
    if (v131)
      goto LABEL_71;
LABEL_73:
    v116 = v21;
    goto LABEL_74;
  }
  v21 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v21 + 16))(v21);
  v131 = v21;
  if (!v21)
    goto LABEL_73;
LABEL_71:
  if (v21 != &v127)
  {
    v21 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v21 + 16))(v21);
    goto LABEL_73;
  }
  v116 = v115;
  (*(void (**)(uint64_t *, _QWORD *))(v127 + 24))(&v127, v115);
LABEL_74:
  v23 = operator new(0x28uLL);
  v24 = v23;
  *v23 = &off_24C40BEA8;
  if (v116)
  {
    if (v116 == v115)
    {
      v23[4] = v23 + 1;
      (*(void (**)(_QWORD *))(v115[0] + 24))(v115);
    }
    else
    {
      v23[4] = v116;
      v116 = 0;
    }
  }
  else
  {
    v23[4] = 0;
  }
  v119 = v24;
  v120 = 1;
  v25 = v116;
  if (v116 == v115)
  {
    v26 = 4;
    v25 = v115;
  }
  else
  {
    if (!v116)
      goto LABEL_84;
    v26 = 5;
  }
  (*(void (**)(void))(*v25 + 8 * v26))();
LABEL_84:
  v27 = v131;
  if (v131 == &v127)
  {
    v28 = 4;
    v27 = &v127;
  }
  else
  {
    if (!v131)
      goto LABEL_89;
    v28 = 5;
  }
  (*(void (**)(void))(*v27 + 8 * v28))();
LABEL_89:
  v20 = *v2;
  if (!*(_BYTE *)(*v2 + 136))
    goto LABEL_95;
LABEL_90:
  if (!*(_BYTE *)(v20 + 128))
    goto LABEL_95;
  v29 = *(uint64_t **)(v20 + 120);
  if (!v29)
  {
    v131 = 0;
    goto LABEL_100;
  }
  v30 = (uint64_t *)(v20 + 96);
  if (v29 == v30)
  {
    v131 = &v127;
    (*(void (**)(uint64_t *, uint64_t *))(*v30 + 24))(v30, &v127);
    v29 = v131;
    if (v131)
      goto LABEL_98;
LABEL_100:
    v113 = v29;
    goto LABEL_101;
  }
  v29 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v29 + 16))(v29);
  v131 = v29;
  if (!v29)
    goto LABEL_100;
LABEL_98:
  if (v29 != &v127)
  {
    v29 = (uint64_t *)(*(uint64_t (**)(uint64_t *))(*v29 + 16))(v29);
    goto LABEL_100;
  }
  v113 = v112;
  (*(void (**)(uint64_t *, _QWORD *))(v127 + 24))(&v127, v112);
LABEL_101:
  v31 = (uint64_t *)operator new(0x28uLL);
  v32 = v31;
  *v31 = (uint64_t)&off_24C40BF28;
  if (v113)
  {
    if (v113 == v112)
    {
      v31[4] = (uint64_t)(v31 + 1);
      (*(void (**)(_QWORD *))(v112[0] + 24))(v112);
    }
    else
    {
      v31[4] = (uint64_t)v113;
      v113 = 0;
    }
  }
  else
  {
    v31[4] = 0;
  }
  v116 = v32;
  v117 = 1;
  v33 = v113;
  if (v113 == v112)
  {
    v34 = 4;
    v33 = v112;
  }
  else
  {
    if (!v113)
      goto LABEL_111;
    v34 = 5;
  }
  (*(void (**)(void))(*v33 + 8 * v34))();
LABEL_111:
  v35 = v131;
  if (v131 == &v127)
  {
    v36 = 4;
    v35 = &v127;
  }
  else
  {
    if (!v131)
      goto LABEL_116;
    v36 = 5;
  }
  (*(void (**)(void))(*v35 + 8 * v36))();
LABEL_116:
  sub_20B0A0E08((uint64_t)&v127, (uint64_t)v124, (uint64_t)v121, (uint64_t)v118, (uint64_t)v115);
  v37 = v2[2];
  if (!*(_BYTE *)(v37 + 32))
  {
    LOBYTE(v112[0]) = 0;
    v114 = 0;
    goto LABEL_143;
  }
  v38 = *(_QWORD *)(v37 + 24);
  if (v38)
  {
    if (v38 == v37)
    {
      v165 = v164;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v37 + 24))(v37, v164);
      v39 = v165;
      if (v165)
      {
LABEL_120:
        if (v39 == v164)
        {
          v110 = v109;
          (*(void (**)(_QWORD *, _QWORD *))(v164[0] + 24))(v164, v109);
        }
        else
        {
          v110 = v39;
          v165 = 0;
        }
        goto LABEL_128;
      }
    }
    else
    {
      v39 = (_QWORD *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v38 + 16))(*(_QWORD *)(v37 + 24));
      v165 = v39;
      if (v39)
        goto LABEL_120;
    }
  }
  else
  {
    v165 = 0;
  }
  v110 = 0;
LABEL_128:
  v113 = 0;
  v40 = (uint64_t *)operator new(0x28uLL);
  v41 = v40;
  *v40 = (uint64_t)&off_24C40BDD0;
  if (v110)
  {
    if (v110 == v109)
    {
      v40[4] = (uint64_t)(v40 + 1);
      (*(void (**)(_QWORD *))(v109[0] + 24))(v109);
    }
    else
    {
      v40[4] = (uint64_t)v110;
      v110 = 0;
    }
  }
  else
  {
    v40[4] = 0;
  }
  v113 = v41;
  v42 = v110;
  if (v110 == v109)
  {
    v43 = 4;
    v42 = v109;
  }
  else
  {
    if (!v110)
      goto LABEL_138;
    v43 = 5;
  }
  (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_138:
  v114 = 1;
  v44 = v165;
  if (v165 == v164)
  {
    v45 = 4;
    v44 = v164;
  }
  else
  {
    if (!v165)
      goto LABEL_143;
    v45 = 5;
  }
  (*(void (**)(void))(*v44 + 8 * v45))();
LABEL_143:
  LOBYTE(v109[0]) = 0;
  v111 = 0;
  sub_20B23C09C();
  v46 = (std::__shared_weak_count *)operator new(0x30uLL);
  v46->__shared_owners_ = 0;
  v47 = (unint64_t *)&v46->__shared_owners_;
  v46->__shared_weak_owners_ = 0;
  v46->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BD00;
  v46[1].__vftable = (std::__shared_weak_count_vtbl *)&off_24C413A58;
  v48 = v46 + 1;
  *(_OWORD *)&v46[1].__shared_owners_ = v108;
  v108 = 0uLL;
  v107 = &off_24C413A58;
  if (!v111)
    goto LABEL_149;
  v49 = v110;
  if (v110 == v109)
  {
    v50 = 4;
    v49 = v109;
  }
  else
  {
    if (!v110)
      goto LABEL_149;
    v50 = 5;
  }
  (*(void (**)(void))(*v49 + 8 * v50))();
LABEL_149:
  if (!v114)
    goto LABEL_155;
  v51 = v113;
  if (v113 == v112)
  {
    v52 = 4;
    v51 = v112;
  }
  else
  {
    if (!v113)
      goto LABEL_155;
    v52 = 5;
  }
  (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_155:
  if (!v142)
    goto LABEL_161;
  v53 = v141;
  if (v141 == v140)
  {
    v54 = 4;
    v53 = v140;
  }
  else
  {
    if (!v141)
      goto LABEL_161;
    v54 = 5;
  }
  (*(void (**)(void))(*v53 + 8 * v54))();
LABEL_161:
  if (!v139)
    goto LABEL_167;
  v55 = v138;
  if (v138 == v137)
  {
    v56 = 4;
    v55 = v137;
  }
  else
  {
    if (!v138)
      goto LABEL_167;
    v56 = 5;
  }
  (*(void (**)(void))(*v55 + 8 * v56))();
LABEL_167:
  if (!v136)
    goto LABEL_173;
  v57 = v135;
  if (v135 == &v133)
  {
    v58 = 4;
    v57 = &v133;
  }
  else
  {
    if (!v135)
      goto LABEL_173;
    v58 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v57 + 8 * v58))();
LABEL_173:
  if (!v132)
    goto LABEL_179;
  v59 = v131;
  if (v131 == &v127)
  {
    v60 = 4;
    v59 = &v127;
  }
  else
  {
    if (!v131)
      goto LABEL_179;
    v60 = 5;
  }
  (*(void (**)(void))(*v59 + 8 * v60))();
LABEL_179:
  if (!v117)
    goto LABEL_185;
  v61 = v116;
  if (v116 == v115)
  {
    v62 = 4;
    v61 = v115;
  }
  else
  {
    if (!v116)
      goto LABEL_185;
    v62 = 5;
  }
  (*(void (**)(void))(*v61 + 8 * v62))();
LABEL_185:
  if (!v120)
    goto LABEL_191;
  v63 = v119;
  if (v119 == v118)
  {
    v64 = 4;
    v63 = v118;
  }
  else
  {
    if (!v119)
      goto LABEL_191;
    v64 = 5;
  }
  (*(void (**)(void))(*v63 + 8 * v64))();
LABEL_191:
  if (!v123)
    goto LABEL_197;
  v65 = v122;
  if (v122 == v121)
  {
    v66 = 4;
    v65 = v121;
  }
  else
  {
    if (!v122)
      goto LABEL_197;
    v66 = 5;
  }
  (*(void (**)(void))(*v65 + 8 * v66))();
LABEL_197:
  if (v126)
  {
    v67 = v125;
    if (v125 == v124)
    {
      v68 = 4;
      v67 = v124;
      goto LABEL_202;
    }
    if (v125)
    {
      v68 = 5;
LABEL_202:
      (*(void (**)(void))(*v67 + 8 * v68))();
    }
  }
  if (v105)
  {
    v69 = (char *)v103;
    if (v103)
    {
      v70 = v104;
      v71 = v103;
      if (v104 != v103)
      {
        do
        {
          v72 = (std::__shared_weak_count *)*((_QWORD *)v70 - 1);
          if (v72)
          {
            v73 = (unint64_t *)&v72->__shared_owners_;
            do
              v74 = __ldaxr(v73);
            while (__stlxr(v74 - 1, v73));
            if (!v74)
            {
              ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
              std::__shared_weak_count::__release_weak(v72);
            }
          }
          v70 -= 16;
        }
        while (v70 != v69);
        v71 = v103;
      }
      v104 = v69;
      operator delete(v71);
    }
  }
  if (v163)
  {
    v75 = v162;
    if (v162 == v161)
    {
      v76 = 4;
      v75 = v161;
    }
    else
    {
      if (!v162)
        goto LABEL_221;
      v76 = 5;
    }
    (*(void (**)(void))(*v75 + 8 * v76))();
  }
LABEL_221:
  if (v160)
  {
    v77 = v159;
    if (v159 == v158)
    {
      v78 = 4;
      v77 = v158;
      goto LABEL_226;
    }
    if (v159)
    {
      v78 = 5;
LABEL_226:
      (*(void (**)(void))(*v77 + 8 * v78))();
    }
  }
  if (BYTE8(v156))
  {
    v79 = v155;
    if ((_QWORD)v155)
    {
      v80 = *((_QWORD *)&v155 + 1);
      v81 = (void *)v155;
      if (*((_QWORD *)&v155 + 1) != (_QWORD)v155)
      {
        do
        {
          v82 = *(std::__shared_weak_count **)(v80 - 8);
          if (v82)
          {
            v83 = (unint64_t *)&v82->__shared_owners_;
            do
              v84 = __ldaxr(v83);
            while (__stlxr(v84 - 1, v83));
            if (!v84)
            {
              ((void (*)(std::__shared_weak_count *))v82->__on_zero_shared)(v82);
              std::__shared_weak_count::__release_weak(v82);
            }
          }
          v80 -= 16;
        }
        while (v80 != v79);
        v81 = (void *)v155;
      }
      *((_QWORD *)&v155 + 1) = v79;
      operator delete(v81);
    }
  }
  if (v153)
  {
    v85 = v152;
    if (v152 == v151)
    {
      v86 = 4;
      v85 = v151;
    }
    else
    {
      if (!v152)
        goto LABEL_245;
      v86 = 5;
    }
    (*(void (**)(void))(*v85 + 8 * v86))();
  }
LABEL_245:
  if (v150)
  {
    v87 = v149;
    if (v149 == v148)
    {
      v88 = 4;
      v87 = v148;
      goto LABEL_250;
    }
    if (v149)
    {
      v88 = 5;
LABEL_250:
      (*(void (**)(void))(*v87 + 8 * v88))();
    }
  }
  if (v146)
  {
    v89 = v144;
    if ((_QWORD)v144)
    {
      v90 = *((_QWORD *)&v144 + 1);
      v91 = (void *)v144;
      if (*((_QWORD *)&v144 + 1) != (_QWORD)v144)
      {
        do
        {
          v92 = *(std::__shared_weak_count **)(v90 - 8);
          if (v92)
          {
            v93 = (unint64_t *)&v92->__shared_owners_;
            do
              v94 = __ldaxr(v93);
            while (__stlxr(v94 - 1, v93));
            if (!v94)
            {
              ((void (*)(std::__shared_weak_count *))v92->__on_zero_shared)(v92);
              std::__shared_weak_count::__release_weak(v92);
            }
          }
          v90 -= 16;
        }
        while (v90 != v89);
        v91 = (void *)v144;
      }
      *((_QWORD *)&v144 + 1) = v89;
      operator delete(v91);
    }
  }
  *(_QWORD *)&v154 = v46 + 1;
  *((_QWORD *)&v154 + 1) = v46;
  ((void (*)(std::__shared_weak_count *))v46[1].__vftable[1].~__shared_weak_count_0)(v48);
  if (v95)
  {
    v164[0] = v46 + 1;
    v164[1] = v46;
    do
      v96 = __ldxr(v47);
    while (__stxr(v96 + 1, v47));
    *((_QWORD *)&v143 + 1) = v46;
    do
      v97 = __ldxr(v47);
    while (__stxr(v97 + 1, v47));
    *(_QWORD *)&v143 = v46 + 1;
    *(_QWORD *)&v144 = ((uint64_t (*)(std::__shared_weak_count *))v48->__vftable[1].~__shared_weak_count_0)(v48);
    *((_QWORD *)&v144 + 1) = v98;
    ((void (*)(std::__shared_weak_count *))v48->__vftable[1].~__shared_weak_count_0)(v48);
    if (!v99)
    {
      exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
      std::logic_error::logic_error(exception, "SyncControl requires server with enabled syncing");
      exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
      __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
    }
    *(_QWORD *)&v155 = v46 + 1;
    *((_QWORD *)&v155 + 1) = *((_QWORD *)&v143 + 1);
    v143 = 0uLL;
    v156 = v144;
    LOBYTE(v157) = 1;
    do
      v100 = __ldaxr(v47);
    while (__stlxr(v100 - 1, v47));
    if (!v100)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
    }
  }
  else
  {
    LOBYTE(v155) = 0;
    LOBYTE(v157) = 0;
  }
  if (*(_BYTE *)(v1 + 128))
  {
    sub_20AF44318(v1);
    *(_BYTE *)(v1 + 128) = 0;
  }
  *(_OWORD *)v1 = v154;
  *(_BYTE *)(v1 + 16) = 0;
  *(_BYTE *)(v1 + 48) = 0;
  if ((_BYTE)v157)
  {
    *(_OWORD *)(v1 + 16) = v155;
    *(_OWORD *)(v1 + 32) = v156;
    *(_BYTE *)(v1 + 48) = 1;
  }
  *(_BYTE *)(v1 + 120) = 1;
  *(_BYTE *)(v1 + 128) = 1;
}

void sub_20B09FEF0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CD70);
  _Unwind_Resume(a1);
}

void sub_20B09FF08(_Unwind_Exception *a1, int a2)
{
  if (a2)
    sub_20AEC01C0(a1);
  _Unwind_Resume(a1);
}

void sub_20B0A063C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BD00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B0A064C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40BD00;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A067C(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

_QWORD *sub_20B0A068C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C40BD50;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20B0A06E8(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C40BD50;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B0A0754(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C40BD50;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_20B0A07D4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A07E8(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24C40BD50;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t sub_20B0A0864(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_20B0A08A0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_20B0A08F0(uint64_t a1, char *a2, std::__shared_weak_count_vtbl **a3)
{
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  uint64_t v10;
  std::__shared_weak_count_vtbl *v11;
  unint64_t *v12;
  unint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unsigned int v20;
  unsigned int v21;
  std::__shared_weak_count *v22;
  unint64_t *p_shared_owners;
  unint64_t v24;
  _QWORD *v25;
  std::__shared_weak_count *v26;
  uint64_t v27;
  unsigned int *v28;
  char v29;
  char v30[8];
  __int128 v31;
  int v32;
  __int128 __p;
  uint64_t v34;
  char v35;
  void *v36;
  char v37;
  void *v38;
  char v39;
  void *v40;
  char v41;
  void *v42;
  char v43;
  void *v44;
  char v45;
  void *v46;
  char v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;

  v51 = *MEMORY[0x24BDAC8D0];
  v30[0] = *a2;
  v31 = *(_OWORD *)(a2 + 8);
  v32 = *((_DWORD *)a2 + 6);
  LOBYTE(__p) = 0;
  v35 = 0;
  if (a2[56])
  {
    if (a2[55] < 0)
    {
      sub_20AEC60F4(&__p, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
    }
    else
    {
      __p = *((_OWORD *)a2 + 2);
      v34 = *((_QWORD *)a2 + 6);
    }
    v35 = 1;
  }
  LOBYTE(v36) = 0;
  v48 = 0;
  if (a2[208])
  {
    sub_20AF3FE60((char *)&v36, (__int128 *)a2 + 4);
    v48 = 1;
  }
  v49 = *(_OWORD *)(a2 + 216);
  v50 = *((_QWORD *)a2 + 29);
  v6 = (std::__shared_weak_count *)operator new(0x40uLL);
  v6->__shared_owners_ = 0;
  v6->__shared_weak_owners_ = 0;
  v6->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C38;
  v7 = (uint64_t)a3[1];
  v6[1].__vftable = *a3;
  v6[1].__shared_owners_ = v7;
  if (v7)
  {
    v8 = (unint64_t *)(v7 + 8);
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
  }
  v11 = a3[3];
  v10 = (uint64_t)a3[4];
  v6[1].__shared_weak_owners_ = (uint64_t)&off_24C411E78;
  v6[2].__vftable = v11;
  v6[2].__shared_owners_ = v10;
  if (v10)
  {
    v12 = (unint64_t *)(v10 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v25 = &v6[1].__vftable;
  v26 = v6;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  v14 = *(_QWORD *)(a1 + 32);
  if (!v14)
    sub_20AECABA4();
  (*(void (**)(uint64_t, char *, _QWORD **))(*(_QWORD *)v14 + 48))(v14, v30, &v25);
  v15 = v28;
  if (v28)
  {
    v16 = v28 + 2;
    do
    {
      v17 = __ldaxr(v16);
      v18 = v17 - 1;
    }
    while (__stlxr(v18, v16));
    if (!v18)
    {
      (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 16))(v15);
      v19 = v15 + 3;
      do
      {
        v20 = __ldaxr(v19);
        v21 = v20 - 1;
      }
      while (__stlxr(v21, v19));
      if (!v21)
        (*(void (**)(unsigned int *))(*(_QWORD *)v15 + 24))(v15);
    }
  }
  v22 = v26;
  if (v26)
  {
    p_shared_owners = (unint64_t *)&v26->__shared_owners_;
    do
      v24 = __ldaxr(p_shared_owners);
    while (__stlxr(v24 - 1, p_shared_owners));
    if (!v24)
    {
      ((void (*)(std::__shared_weak_count *))v22->__on_zero_shared)(v22);
      std::__shared_weak_count::__release_weak(v22);
    }
  }
  if (!v48)
    goto LABEL_35;
  if (v47 < 0)
  {
    operator delete(v46);
    if ((v45 & 0x80000000) == 0)
    {
LABEL_31:
      if ((v43 & 0x80000000) == 0)
        goto LABEL_32;
      goto LABEL_41;
    }
  }
  else if ((v45 & 0x80000000) == 0)
  {
    goto LABEL_31;
  }
  operator delete(v44);
  if ((v43 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v41 & 0x80000000) == 0)
      goto LABEL_33;
LABEL_42:
    operator delete(v40);
    if ((v39 & 0x80000000) == 0)
    {
LABEL_34:
      if ((v37 & 0x80000000) == 0)
        goto LABEL_35;
LABEL_44:
      operator delete(v36);
      if (!v35)
        return;
      goto LABEL_36;
    }
    goto LABEL_43;
  }
LABEL_41:
  operator delete(v42);
  if (v41 < 0)
    goto LABEL_42;
LABEL_33:
  if ((v39 & 0x80000000) == 0)
    goto LABEL_34;
LABEL_43:
  operator delete(v38);
  if (v37 < 0)
    goto LABEL_44;
LABEL_35:
  if (!v35)
    return;
LABEL_36:
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p);
}

void sub_20B0A0BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,char a61)
{
  if (a24)
  {
    if (a23 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0A0D40(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d2vl13visual_logger22ForwardReceivedMessageINSt3__18functionIFvRKNS_3kit3viz14ConnectionInfoE"
                     "RKNS1_10LogMessageEEEEEENS3_8optionalINS4_IFvS9_RKNS6_11ContextDataEEEEEERNSF_IT_EEEUlS9_SI_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d2vl13visual_logger22ForwardReceivedMessageINSt3__18functionIFvRKNS_3kit3viz14Conn"
                                "ectionInfoERKNS1_10LogMessageEEEEEENS3_8optionalINS4_IFvS9_RKNS6_11ContextDataEEEEEERNSF"
                                "_IT_EEEUlS9_SI_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d2vl13visual_logger22ForwardReceivedMessageINSt3__18functionIFvRKNS_3kit3viz14ConnectionInfoERKNS1_10LogMessageEEEEEENS3_8optionalINS4_IFvS9_RKNS6_11ContextDataEEEEEERNSF_IT_EEEUlS9_SI_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d2vl13visual_logger22ForwardReceivedMessageINSt3__18functionIFvRKNS_3kit3viz14ConnectionInfoERKNS1_10LogMessageEEEEEENS3_8optionalINS4_IFvS9_RKNS6_11ContextDataEEEEEERNSF_IT_EEEUlS9_SI_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B0A0DAC()
{
  return &unk_24C40BDB0;
}

uint64_t sub_20B0A0DB8(uint64_t a1)
{
  sub_20AF3F978(a1 + 64);
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

uint64_t sub_20B0A0E08(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;

  *(_BYTE *)a1 = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*(_BYTE *)(a2 + 32))
  {
    v9 = (_QWORD *)(a2 + 24);
    v10 = *(_QWORD *)(a2 + 24);
    if (v10)
    {
      if (v10 == a2)
      {
        *(_QWORD *)(a1 + 24) = a1;
        (*(void (**)(_QWORD, uint64_t))(*(_QWORD *)*v9 + 24))(*v9, a1);
        goto LABEL_8;
      }
      *(_QWORD *)(a1 + 24) = v10;
    }
    else
    {
      v9 = (_QWORD *)(a1 + 24);
    }
    *v9 = 0;
LABEL_8:
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 72) = 0;
  if (!*(_BYTE *)(a3 + 32))
    goto LABEL_17;
  v11 = (_QWORD *)(a3 + 24);
  v12 = *(_QWORD *)(a3 + 24);
  if (v12)
  {
    if (v12 == a3)
    {
      *(_QWORD *)(a1 + 64) = a1 + 40;
      (*(void (**)(_QWORD))(*(_QWORD *)*v11 + 24))(*v11);
      goto LABEL_16;
    }
    *(_QWORD *)(a1 + 64) = v12;
  }
  else
  {
    v11 = (_QWORD *)(a1 + 64);
  }
  *v11 = 0;
LABEL_16:
  *(_BYTE *)(a1 + 72) = 1;
LABEL_17:
  *(_BYTE *)(a1 + 80) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!*(_BYTE *)(a4 + 32))
    goto LABEL_25;
  v13 = (_QWORD *)(a4 + 24);
  v14 = *(_QWORD *)(a4 + 24);
  if (v14)
  {
    if (v14 == a4)
    {
      *(_QWORD *)(a1 + 104) = a1 + 80;
      (*(void (**)(_QWORD))(*(_QWORD *)*v13 + 24))(*v13);
      goto LABEL_24;
    }
    *(_QWORD *)(a1 + 104) = v14;
  }
  else
  {
    v13 = (_QWORD *)(a1 + 104);
  }
  *v13 = 0;
LABEL_24:
  *(_BYTE *)(a1 + 112) = 1;
LABEL_25:
  *(_BYTE *)(a1 + 120) = 0;
  *(_BYTE *)(a1 + 152) = 0;
  if (*(_BYTE *)(a5 + 32))
  {
    v15 = (_QWORD *)(a5 + 24);
    v16 = *(_QWORD *)(a5 + 24);
    if (v16)
    {
      if (v16 == a5)
      {
        *(_QWORD *)(a1 + 144) = a1 + 120;
        (*(void (**)(_QWORD))(*(_QWORD *)*v15 + 24))(*v15);
        goto LABEL_32;
      }
      *(_QWORD *)(a1 + 144) = v16;
    }
    else
    {
      v15 = (_QWORD *)(a1 + 144);
    }
    *v15 = 0;
LABEL_32:
    *(_BYTE *)(a1 + 152) = 1;
  }
  return a1;
}

_QWORD *sub_20B0A0FAC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C40BDD0;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20B0A1008(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C40BDD0;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B0A1074(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C40BDD0;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_20B0A10F4(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A1108(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24C40BDD0;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t sub_20B0A1184(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_20B0A11C0(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_20B0A1210(uint64_t a1, _BYTE *a2, int *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *__p[2];
  char v19;
  _BYTE v20[16];
  void *v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  char v30[16];
  void *v31;
  char v32;
  char v33;
  void *v34;
  char v35;
  void *v36;
  char v37;
  char v38;
  char v39;
  _DWORD v40[6];
  int v41;
  void *__dst[2];
  unint64_t v43;
  _QWORD v44[5];
  _QWORD *v45;

  sub_20AF5E330(a3, (uint64_t)v30);
  v41 = 0;
  sub_20AFF4744(v40, "in client connection ");
  v5 = operator new();
  *(_QWORD *)(v5 + 272) = 0;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)v5 = 0u;
  sub_20AEC0BD8(v5);
  sub_20B212D10((_QWORD *)(v5 + 16), a2);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_41;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v43) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_41:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v43 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v43) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = MEMORY[0x24BEDB7F0];
  v15 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v5 = *MEMORY[0x24BEDB7F0];
  v16 = *(_QWORD *)(v14 + 72);
  *(_QWORD *)(v5 + *(_QWORD *)(v15 - 24)) = *(_QWORD *)(v14 + 64);
  *(_QWORD *)(v5 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v5 + 16) = v16;
  if (*(char *)(v5 + 111) < 0)
    operator delete(*(void **)(v5 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v5 + 128);
  MEMORY[0x20BD3583C](v5, 0x10B2C40EED050F3);
  v44[0] = v40;
  v44[1] = __dst;
  v44[2] = v40;
  v44[3] = __dst;
  v44[4] = __dst;
  if (v41 == -1)
    sub_20AECFAB8();
  v45 = v44;
  ((void (*)(_QWORD **, _DWORD *))off_24C40BE58[v41])(&v45, v40);
  if (SHIBYTE(v43) < 0)
    operator delete(__dst[0]);
  if (v41 == -1)
    sub_20AECFAB8();
  v44[0] = __dst;
  ((void (*)(void **__return_ptr, _QWORD *, _DWORD *))off_24C40BE70[v41])(__p, v44, v40);
  if (v41 != -1)
    ((void (*)(_QWORD *, _DWORD *))off_24C40BE40[v41])(v44, v40);
  sub_20B529470(v30, __p, (uint64_t)v20);
  if (v19 < 0)
    operator delete(__p[0]);
  v17 = *(_QWORD *)(a1 + 32);
  if (!v17)
    sub_20AECABA4();
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v17 + 48))(v17, v20);
  if (v29)
  {
    if (!v28)
      goto LABEL_29;
    if (v27 < 0)
    {
      operator delete(v26);
      if ((v25 & 0x80000000) == 0)
      {
LABEL_29:
        if (!v23)
          goto LABEL_32;
LABEL_30:
        if (v22 < 0)
          operator delete(v21);
        goto LABEL_32;
      }
    }
    else if ((v25 & 0x80000000) == 0)
    {
      goto LABEL_29;
    }
    operator delete(v24);
    if (!v23)
      goto LABEL_32;
    goto LABEL_30;
  }
LABEL_32:
  if (!v39)
    return;
  if (v38)
  {
    if ((v37 & 0x80000000) == 0)
    {
      if ((v35 & 0x80000000) == 0)
        goto LABEL_36;
LABEL_46:
      operator delete(v34);
      if (!v33)
        return;
      goto LABEL_37;
    }
    operator delete(v36);
    if (v35 < 0)
      goto LABEL_46;
  }
LABEL_36:
  if (!v33)
    return;
LABEL_37:
  if (v32 < 0)
    operator delete(v31);
}

void sub_20B0A15C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,char a53,int a54,char a55)
{
  if (a15 < 0)
    operator delete(__p);
  if (a55)
  {
    if (a53)
    {
      if (a52 < 0)
        operator delete(a47);
      if (a45 < 0)
        operator delete(a40);
    }
    if (a39)
    {
      if (a38 < 0)
        operator delete(a33);
    }
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A1748(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d2vl13visual_logger18ForwardServerErrorINSt3__18functionIFvRKNS_3esn5ErrorEEEEEENS3_8optional"
                     "INS4_IFvRKNS_3kit3viz14ConnectionInfoES8_EEEEERNSB_IT_EEEUlSG_S8_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d2vl13visual_logger18ForwardServerErrorINSt3__18functionIFvRKNS_3esn5ErrorEEEEEENS"
                                "3_8optionalINS4_IFvRKNS_3kit3viz14ConnectionInfoES8_EEEEERNSB_IT_EEEUlSG_S8_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d2vl13visual_logger18ForwardServerErrorINSt3__18functionIFvRKNS_3esn5ErrorEEEEEENS3_8optionalINS4_IFvRKNS_3kit3viz14ConnectionInfoES8_EEEEERNSB_IT_EEEUlSG_S8_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d2vl13visual_logger18ForwardServerErrorINSt3__18functionIFvRKNS_3esn5ErrorEEEEEENS3_8optionalINS4_IFvRKNS_3kit3viz14ConnectionInfoES8_EEEEERNSB_IT_EEEUlSG_S8_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B0A17B4()
{
  return &unk_24C40BE88;
}

_QWORD *sub_20B0A17C0(unsigned __int16 **a1, uint64_t a2)
{
  unsigned __int16 *v4;
  _QWORD **v5;
  std::string *v6;
  std::string::size_type size;
  int v8;
  const char *v9;
  uint64_t v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  _QWORD *v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  const char *v23;
  uint64_t v24;
  unsigned __int16 *v25;
  _QWORD **v26;
  uint64_t v27;
  const char *v28;
  uint64_t v29;
  unsigned __int16 *v30;
  _QWORD **v31;
  uint64_t v32;
  const char *v33;
  _QWORD *v34;
  uint64_t v35;
  std::string v37;

  v4 = *a1;
  if (!*(_BYTE *)a2)
    sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v5 = *(_QWORD ***)(a2 + 8);
  sub_20AEC01D0(*v5, (uint64_t)"{", 1);
  if (*((_BYTE *)v4 + 8))
  {
    sub_20AEC01D0(*v5, (uint64_t)"{", 1);
    std::to_string(&v37, *v4);
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v6 = &v37;
    else
      v6 = (std::string *)v37.__r_.__value_.__r.__words[0];
    if ((v37.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = HIBYTE(v37.__r_.__value_.__r.__words[2]);
    else
      size = v37.__r_.__value_.__l.__size_;
    sub_20AEC01D0(*v5, (uint64_t)v6, size);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    sub_20AEC01D0(*v5, (uint64_t)",", 1);
    v8 = *((_DWORD *)v4 + 1);
    if (v8 == 1)
    {
      v9 = "Memory";
      v10 = 6;
    }
    else if (v8)
    {
      v9 = "invalid network type";
      v10 = 20;
    }
    else
    {
      v9 = "Socket";
      v10 = 6;
    }
    sub_20AEC01D0(*v5, (uint64_t)v9, v10);
    v11 = *v5;
    v12 = "}";
    v13 = 1;
  }
  else
  {
    v11 = *v5;
    v12 = "nullopt";
    v13 = 7;
  }
  sub_20AEC01D0(v11, (uint64_t)v12, v13);
  sub_20AEC01D0(*v5, (uint64_t)",", 1);
  sub_20AEC01D0(*v5, (uint64_t)"{", 1);
  v14 = *((unsigned __int8 *)v4 + 12);
  if (v14 == 2)
  {
    v15 = "WaitInitially";
    v16 = 13;
  }
  else if (v14 == 1)
  {
    v15 = "ProceedInitially";
    v16 = 16;
  }
  else if (*((_BYTE *)v4 + 12))
  {
    v15 = "invalid server sync type";
    v16 = 24;
  }
  else
  {
    v15 = "Disabled";
    v16 = 8;
  }
  sub_20AEC01D0(*v5, (uint64_t)v15, v16);
  sub_20AEC01D0(*v5, (uint64_t)"}", 1);
  sub_20AEC01D0(*v5, (uint64_t)",", 1);
  if (*((_BYTE *)v4 + 40))
  {
    v17 = *v5;
    if ((uint64_t)(*((_QWORD *)v4 + 3) - *((_QWORD *)v4 + 2)) > 15)
    {
      sub_20AEC01D0(v17, (uint64_t)"{", 1);
      v20 = *((_QWORD *)v4 + 2) + 16;
      std::ostream::operator<<();
      v21 = *((_QWORD *)v4 + 3);
      while (v20 != v21)
      {
        sub_20AEC01D0(*v5, (uint64_t)",", 1);
        v20 += 16;
        std::ostream::operator<<();
      }
      v17 = *v5;
      v18 = "}";
      v19 = 1;
    }
    else
    {
      v18 = "{}";
      v19 = 2;
    }
  }
  else
  {
    v17 = *v5;
    v18 = "nullopt";
    v19 = 7;
  }
  sub_20AEC01D0(v17, (uint64_t)v18, v19);
  sub_20AEC01D0(*v5, (uint64_t)",", 1);
  v22 = *((_DWORD *)v4 + 12);
  if (v22 == 1)
  {
    v23 = "IgnoreUnknownPackageData";
    v24 = 24;
  }
  else if (v22)
  {
    v23 = "invalid error reporting value";
    v24 = 29;
  }
  else
  {
    v23 = "Default";
    v24 = 7;
  }
  sub_20AEC01D0(*v5, (uint64_t)v23, v24);
  sub_20AEC01D0(*v5, (uint64_t)"}", 1);
  v25 = a1[1];
  if (!*(_BYTE *)a2)
    sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v26 = *(_QWORD ***)(a2 + 8);
  if (!*((_BYTE *)v25 + 32))
  {
    sub_20AEC01D0(*v26, (uint64_t)"nullopt", 7);
    v30 = a1[2];
    if (*(_BYTE *)a2)
      goto LABEL_48;
LABEL_56:
    sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
    *(_BYTE *)a2 = 0;
    v31 = *(_QWORD ***)(a2 + 8);
    if (*((_BYTE *)v30 + 32))
      goto LABEL_49;
LABEL_57:
    v34 = *v31;
    v33 = "nullopt";
    v35 = 7;
    return sub_20AEC01D0(v34, (uint64_t)v33, v35);
  }
  v27 = *((_QWORD *)v25 + 3);
  if (v27)
    v28 = "f(){*}";
  else
    v28 = "f(){nullptr}";
  if (v27)
    v29 = 6;
  else
    v29 = 12;
  sub_20AEC01D0(*v26, (uint64_t)v28, v29);
  v30 = a1[2];
  if (!*(_BYTE *)a2)
    goto LABEL_56;
LABEL_48:
  *(_BYTE *)a2 = 0;
  v31 = *(_QWORD ***)(a2 + 8);
  if (!*((_BYTE *)v30 + 32))
    goto LABEL_57;
LABEL_49:
  v32 = *((_QWORD *)v30 + 3);
  if (v32)
    v33 = "f(){*}";
  else
    v33 = "f(){nullptr}";
  v34 = *v31;
  if (v32)
    v35 = 6;
  else
    v35 = 12;
  return sub_20AEC01D0(v34, (uint64_t)v33, v35);
}

void sub_20B0A1BDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0A1BF8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C40BEA8;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20B0A1C54(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C40BEA8;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B0A1CC0(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C40BEA8;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_20B0A1D40(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A1D54(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24C40BEA8;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t sub_20B0A1DD0(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_20B0A1E0C(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_20B0A1E5C(uint64_t a1, uint64_t a2, char *a3)
{
  char v5;
  uint64_t v6;
  char v7;
  _BYTE v8[8];
  __int128 v9;
  int v10;
  __int128 __p;
  uint64_t v12;
  char v13;
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  void *v22;
  char v23;
  void *v24;
  char v25;
  char v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  v5 = *a3;
  v8[0] = *(_BYTE *)a2;
  v9 = *(_OWORD *)(a2 + 8);
  v10 = *(_DWORD *)(a2 + 24);
  LOBYTE(__p) = 0;
  v13 = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    if (*(char *)(a2 + 55) < 0)
    {
      sub_20AEC60F4(&__p, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      __p = *(_OWORD *)(a2 + 32);
      v12 = *(_QWORD *)(a2 + 48);
    }
    v13 = 1;
  }
  LOBYTE(v14) = 0;
  v26 = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    sub_20AF3FE60((char *)&v14, (__int128 *)(a2 + 64));
    v26 = 1;
  }
  v27 = *(_OWORD *)(a2 + 216);
  v28 = *(_QWORD *)(a2 + 232);
  v7 = v5;
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    sub_20AECABA4();
  (*(void (**)(uint64_t, _BYTE *, char *))(*(_QWORD *)v6 + 48))(v6, v8, &v7);
  if (!v26)
    goto LABEL_16;
  if (v25 < 0)
  {
    operator delete(v24);
    if ((v23 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v21 & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_22;
    }
  }
  else if ((v23 & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v22);
  if ((v21 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v19 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_23:
    operator delete(v18);
    if ((v17 & 0x80000000) == 0)
    {
LABEL_15:
      if ((v15 & 0x80000000) == 0)
        goto LABEL_16;
LABEL_25:
      operator delete(v14);
      if (!v13)
        return;
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  operator delete(v20);
  if (v19 < 0)
    goto LABEL_23;
LABEL_14:
  if ((v17 & 0x80000000) == 0)
    goto LABEL_15;
LABEL_24:
  operator delete(v16);
  if (v15 < 0)
    goto LABEL_25;
LABEL_16:
  if (!v13)
    return;
LABEL_17:
  if (SHIBYTE(v12) < 0)
    operator delete((void *)__p);
}

void sub_20B0A2034(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  if (a20)
  {
    if (a19 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0A20F8(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d2vl13visual_logger30ForwardConnectionStatusChangedINSt3__18functionIFvRKNS_3kit3viz14Connect"
                     "ionInfoENS6_16ConnectionStatusEEEEEENS3_8optionalISC_EERNSD_IT_EEEUlS9_SA_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d2vl13visual_logger30ForwardConnectionStatusChangedINSt3__18functionIFvRKNS_3kit3v"
                                "iz14ConnectionInfoENS6_16ConnectionStatusEEEEEENS3_8optionalISC_EERNSD_IT_EEEUlS9_SA_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d2vl13visual_logger30ForwardConnectionStatusChangedINSt3__18functionIFvRKNS_3kit3viz14ConnectionInfoENS6_16ConnectionStatusEEEEEENS3_8optionalISC_EERNSD_IT_EEEUlS9_SA_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d2vl13visual_logger30ForwardConnectionStatusChangedINSt3__18functionIFvRKNS_3kit3viz14ConnectionInfoENS6_16ConnectionStatusEEEEEENS3_8optionalISC_EERNSD_IT_EEEUlS9_SA_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B0A2164()
{
  return &unk_24C40BF08;
}

_QWORD *sub_20B0A2170(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &off_24C40BF28;
  v2 = a1 + 1;
  v3 = (_QWORD *)a1[4];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  return a1;
}

void sub_20B0A21CC(_QWORD *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  uint64_t v3;

  *a1 = &off_24C40BF28;
  v1 = a1 + 1;
  v2 = (_QWORD *)a1[4];
  if (v2 == v1)
  {
    v3 = 4;
    v2 = v1;
  }
  else
  {
    if (!v2)
      goto LABEL_6;
    v3 = 5;
  }
  (*(void (**)(void))(*v2 + 8 * v3))();
LABEL_6:
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B0A2238(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  v2 = operator new(0x28uLL);
  *v2 = &off_24C40BF28;
  v3 = v2 + 1;
  v4 = *(_QWORD *)(a1 + 32);
  if (!v4)
    goto LABEL_4;
  if (v4 != a1 + 8)
  {
    v4 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v4 + 16))(v4, v3);
LABEL_4:
    v2[4] = v4;
    return v2;
  }
  v2[4] = v3;
  (*(void (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
  return v2;
}

void sub_20B0A22B8(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A22CC(uint64_t result, _QWORD *a2)
{
  _QWORD *v3;
  uint64_t v4;

  *a2 = &off_24C40BF28;
  v3 = a2 + 1;
  v4 = *(_QWORD *)(result + 32);
  if (v4)
  {
    if (v4 == result + 8)
    {
      a2[4] = v3;
      return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 32) + 24))(*(_QWORD *)(result + 32));
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, _QWORD *))(*(_QWORD *)v4 + 16))(*(_QWORD *)(result + 32), v3);
      a2[4] = result;
    }
  }
  else
  {
    a2[4] = 0;
  }
  return result;
}

uint64_t sub_20B0A2348(uint64_t a1)
{
  uint64_t v1;
  uint64_t result;

  v1 = a1 + 8;
  result = *(_QWORD *)(a1 + 32);
  if (result == v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 32))(v1);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 40))(result);
  return result;
}

void sub_20B0A2384(char *__p)
{
  char *v2;
  char *v3;
  uint64_t v4;

  v2 = __p + 8;
  v3 = (char *)*((_QWORD *)__p + 4);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  operator delete(__p);
}

void sub_20B0A23D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  _BYTE v7[8];
  __int128 v8;
  int v9;
  __int128 __p;
  uint64_t v11;
  char v12;
  void *v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *v23;
  char v24;
  char v25;
  __int128 v26;
  uint64_t v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v7[0] = *(_BYTE *)a2;
  v8 = *(_OWORD *)(a2 + 8);
  v9 = *(_DWORD *)(a2 + 24);
  LOBYTE(__p) = 0;
  v12 = 0;
  if (*(_BYTE *)(a2 + 56))
  {
    if (*(char *)(a2 + 55) < 0)
    {
      sub_20AEC60F4(&__p, *(void **)(a2 + 32), *(_QWORD *)(a2 + 40));
    }
    else
    {
      __p = *(_OWORD *)(a2 + 32);
      v11 = *(_QWORD *)(a2 + 48);
    }
    v12 = 1;
  }
  LOBYTE(v13) = 0;
  v25 = 0;
  if (*(_BYTE *)(a2 + 208))
  {
    sub_20AF3FE60((char *)&v13, (__int128 *)(a2 + 64));
    v25 = 1;
  }
  v26 = *(_OWORD *)(a2 + 216);
  v27 = *(_QWORD *)(a2 + 232);
  v6 = *(_QWORD *)(a1 + 32);
  if (!v6)
    sub_20AECABA4();
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v6 + 48))(v6, v7, a3);
  if (!v25)
    goto LABEL_16;
  if (v24 < 0)
  {
    operator delete(v23);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_12:
      if ((v20 & 0x80000000) == 0)
        goto LABEL_13;
      goto LABEL_22;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_12;
  }
  operator delete(v21);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v18 & 0x80000000) == 0)
      goto LABEL_14;
LABEL_23:
    operator delete(v17);
    if ((v16 & 0x80000000) == 0)
    {
LABEL_15:
      if ((v14 & 0x80000000) == 0)
        goto LABEL_16;
LABEL_25:
      operator delete(v13);
      if (!v12)
        return;
      goto LABEL_17;
    }
    goto LABEL_24;
  }
LABEL_22:
  operator delete(v19);
  if (v18 < 0)
    goto LABEL_23;
LABEL_14:
  if ((v16 & 0x80000000) == 0)
    goto LABEL_15;
LABEL_24:
  operator delete(v15);
  if (v14 < 0)
    goto LABEL_25;
LABEL_16:
  if (!v12)
    return;
LABEL_17:
  if (SHIBYTE(v11) < 0)
    operator delete((void *)__p);
}

void sub_20B0A25A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,char a57)
{
  if (a20)
  {
    if (a19 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0A266C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZN4cv3d2vl13visual_logger27ForwardContextStatusChangedINSt3__18functionIFvRKNS_3kit3viz14Connection"
                     "InfoERKNS6_21UpdateEnabledContextsEEEEEENS3_8optionalISE_EERNSF_IT_EEEUlS9_SC_E_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZN4cv3d2vl13visual_logger27ForwardContextStatusChangedINSt3__18functionIFvRKNS_3kit3viz1"
                                "4ConnectionInfoERKNS6_21UpdateEnabledContextsEEEEEENS3_8optionalISE_EERNSF_IT_EEEUlS9_SC_E_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZN4cv3d2vl13visual_logger27ForwardContextStatusChangedINSt3__18functionIFvRKNS_3kit3viz14ConnectionInfoERKNS6_21UpdateEnabledContextsEEEEEENS3_8optionalISE_EERNSF_IT_EEEUlS9_SC_E_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZN4cv3d2vl13visual_logger27ForwardContextStatusChangedINSt3__18functionIFvRKNS_3kit3viz14ConnectionInfoERKNS6_21UpdateEnabledContextsEEEEEENS3_8optionalISE_EERNSF_IT_EEEUlS9_SC_E_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B0A26D8()
{
  return &unk_24C40BF88;
}

unint64_t sub_20B0A26EC()
{
  uint64_t v0;
  unsigned __int8 v1;
  unint64_t v3;
  unint64_t v4;
  mach_timebase_info info;

  v0 = mach_continuous_time();
  v1 = atomic_load((unsigned __int8 *)&qword_25463D170);
  if ((v1 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
  {
    mach_timebase_info(&info);
    LODWORD(v3) = info.numer;
    LODWORD(v4) = info.denom;
    *(double *)&qword_25463D168 = (double)v3 / (double)v4;
    __cxa_guard_release(&qword_25463D170);
  }
  return llround(*(double *)&qword_25463D168 * (double)v0);
}

void sub_20B0A2778(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

unint64_t sub_20B0A2790(unint64_t a1)
{
  unsigned __int8 v2;
  unint64_t v4;
  unint64_t v5;
  mach_timebase_info info;

  v2 = atomic_load((unsigned __int8 *)&qword_25463D170);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
  {
    mach_timebase_info(&info);
    LODWORD(v4) = info.numer;
    LODWORD(v5) = info.denom;
    *(double *)&qword_25463D168 = (double)v4 / (double)v5;
    __cxa_guard_release(&qword_25463D170);
  }
  return llround(*(double *)&qword_25463D168 * (double)a1);
}

void sub_20B0A2818(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A2830(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  char v10;

  v4 = *a2;
  v5 = operator new();
  *(_BYTE *)v5 = 0;
  *(_DWORD *)(v5 + 128) = -1;
  v6 = *(unsigned int *)(v4 + 128);
  if ((_DWORD)v6 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_24C414260[v6])(&v10, v5, v4);
    *(_DWORD *)(v5 + 128) = v6;
  }
  *(_BYTE *)(v5 + 136) = *(_BYTE *)(v4 + 136);
  *(_QWORD *)a1 = v5;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  if (*((_BYTE *)a2 + 32))
  {
    if (*((char *)a2 + 31) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 8), (void *)a2[1], a2[2]);
    }
    else
    {
      v7 = *(_OWORD *)(a2 + 1);
      *(_QWORD *)(a1 + 24) = a2[3];
      *(_OWORD *)(a1 + 8) = v7;
    }
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (*((_BYTE *)a2 + 64))
  {
    if (*((char *)a2 + 63) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 40), (void *)a2[5], a2[6]);
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 5);
      *(_QWORD *)(a1 + 56) = a2[7];
      *(_OWORD *)(a1 + 40) = v8;
    }
    *(_BYTE *)(a1 + 64) = 1;
  }
  return a1;
}

void sub_20B0A2960(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  void **v2;
  void **v3;
  uint64_t v5;

  if (*((_BYTE *)v1 + 64) && *((char *)v1 + 63) < 0)
    operator delete(*v3);
  if (*((_BYTE *)v1 + 32) && *((char *)v1 + 31) < 0)
    operator delete(*v2);
  v5 = *v1;
  *v1 = 0;
  if (v5)
    MEMORY[0x20BD3583C](v5, 0x1000C4072FAA15ELL);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0A29D0(uint64_t a1, uint64_t *a2, char *__s, char *a4)
{
  size_t v8;
  size_t v9;
  __int128 *p_dst;
  char v11;
  uint64_t v12;
  uint64_t v13;
  size_t v14;
  size_t v15;
  __int128 *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  __int128 v24;
  unint64_t v25;
  char v26;
  __int128 __dst;
  unint64_t v28;
  unsigned __int8 v29;
  char v30;

  if (!__s)
  {
    LOBYTE(__dst) = 0;
    v29 = 0;
    if (a4)
      goto LABEL_13;
LABEL_7:
    v11 = 0;
    LOBYTE(v24) = 0;
    goto LABEL_22;
  }
  v8 = strlen(__s);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v9 = v8;
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    p_dst = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&__dst + 1) = v9;
    v28 = v13 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_11;
  }
  HIBYTE(v28) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_11:
    memcpy(p_dst, __s, v9);
  *((_BYTE *)p_dst + v9) = 0;
  v29 = 1;
  if (!a4)
    goto LABEL_7;
LABEL_13:
  v14 = strlen(a4);
  if (v14 > 0x7FFFFFFFFFFFFFF7)
    sub_20AEC0138();
  v15 = v14;
  if (v14 >= 0x17)
  {
    v17 = (v14 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v14 | 7) != 0x17)
      v17 = v14 | 7;
    v18 = v17 + 1;
    v16 = (__int128 *)operator new(v17 + 1);
    *((_QWORD *)&v24 + 1) = v15;
    v25 = v18 | 0x8000000000000000;
    *(_QWORD *)&v24 = v16;
  }
  else
  {
    HIBYTE(v25) = v14;
    v16 = &v24;
    if (!v14)
      goto LABEL_21;
  }
  memcpy(v16, a4, v15);
LABEL_21:
  *((_BYTE *)v16 + v15) = 0;
  v11 = 1;
LABEL_22:
  v26 = v11;
  v19 = *a2;
  v20 = operator new();
  *(_BYTE *)v20 = 0;
  *(_DWORD *)(v20 + 128) = -1;
  v21 = *(unsigned int *)(v19 + 128);
  if ((_DWORD)v21 != -1)
  {
    ((void (*)(char *, uint64_t, uint64_t))off_24C414260[v21])(&v30, v20, v19);
    *(_DWORD *)(v20 + 128) = v21;
  }
  *(_BYTE *)(v20 + 136) = *(_BYTE *)(v19 + 136);
  *(_QWORD *)a1 = v20;
  *(_BYTE *)(a1 + 8) = 0;
  *(_BYTE *)(a1 + 32) = 0;
  v22 = v29;
  if (v29)
  {
    *(_OWORD *)(a1 + 8) = __dst;
    *(_QWORD *)(a1 + 24) = v28;
    v28 = 0;
    __dst = 0uLL;
    *(_BYTE *)(a1 + 32) = 1;
  }
  *(_BYTE *)(a1 + 40) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  if (a4)
  {
    *(_OWORD *)(a1 + 40) = v24;
    *(_QWORD *)(a1 + 56) = v25;
    *(_BYTE *)(a1 + 64) = 1;
  }
  if (v22 && SHIBYTE(v28) < 0)
    operator delete((void *)__dst);
  return a1;
}

void sub_20B0A2C20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  uint64_t v23;
  uint64_t v24;

  MEMORY[0x20BD3583C](v24, 0x1000C4072FAA15ELL);
  if (v23 && a15 < 0)
    operator delete(__p);
  if (a23)
  {
    if (a22 < 0)
      operator delete(a17);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A2C80@<X0>(uint64_t *a1@<X0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  mach_timebase_info v7;
  int v8;
  uint64_t v9;
  unsigned __int8 v10;
  std::__shared_weak_count_vtbl *v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  unsigned __int128 *v17;
  unsigned __int128 v18;
  std::__shared_weak_count_vtbl *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  mach_timebase_info info;
  std::__shared_weak_count_vtbl *v30;
  std::__shared_weak_count *v31;
  __int128 v32[33];
  mach_timebase_info v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  char v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  __int128 v41;
  char v42;
  __int128 v43;
  uint64_t v44;
  unsigned __int128 v45;
  char v46;
  _BYTE v47[40];
  uint64_t v48;

  v48 = *MEMORY[0x24BDAC8D0];
  if (*((_BYTE *)a2 + 384))
  {
    if (*((_BYTE *)a2 + 168))
    {
      v7 = (mach_timebase_info)*((_QWORD *)a2 + 19);
      v6 = *((_QWORD *)a2 + 20);
      if (*((_BYTE *)a2 + 24))
        goto LABEL_4;
    }
    else
    {
      v6 = mach_continuous_time();
      v16 = atomic_load((unsigned __int8 *)&qword_25463D170);
      if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
      {
        mach_timebase_info(&v33);
        LODWORD(v27) = v33.numer;
        LODWORD(v28) = v33.denom;
        *(double *)&qword_25463D168 = (double)v27 / (double)v28;
        __cxa_guard_release(&qword_25463D170);
      }
      v7 = (mach_timebase_info)llround(*(double *)&qword_25463D168 * (double)v6);
      LOBYTE(v6) = 2;
      if (*((_BYTE *)a2 + 24))
      {
LABEL_4:
        sub_20AFA84B0((uint64_t *)a2, 1000000000);
        v8 = *((unsigned __int8 *)a2 + 24);
        v33 = v7;
        LOBYTE(v34) = v6;
        LOBYTE(v35) = 0;
        v37 = 0;
        if (v8)
        {
          if (*((char *)a2 + 23) < 0)
          {
            sub_20AEC60F4(&v35, *(void **)a2, *((_QWORD *)a2 + 1));
          }
          else
          {
            v35 = *a2;
            v36 = *((_QWORD *)a2 + 2);
          }
          v37 = 1;
          LOBYTE(v38) = 0;
          v40 = 0;
          if (!*((_BYTE *)a2 + 120))
          {
LABEL_24:
            LOBYTE(v41) = 0;
            v42 = 0;
            if (!*((_BYTE *)a2 + 144))
            {
LABEL_26:
              LOBYTE(v43) = 0;
              v46 = 0;
              if (*((_BYTE *)a2 + 80))
              {
                if (*((char *)a2 + 55) < 0)
                {
                  sub_20AEC60F4(&v43, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
                }
                else
                {
                  v43 = a2[2];
                  v44 = *((_QWORD *)a2 + 6);
                }
                v17 = (unsigned __int128 *)(a2 + 4);
                do
                  v18 = __ldaxp(v17);
                while (__stlxp(v18, v17));
                v45 = v18;
                v46 = 1;
              }
              sub_20AED3838((uint64_t)v47, (uint64_t)(a2 + 11));
              v19 = (std::__shared_weak_count_vtbl *)operator new();
              sub_20B0A389C(v19, a1, (uint64_t)&v33);
              info = (mach_timebase_info)&off_24C411E78;
              v30 = v19;
              v20 = (std::__shared_weak_count *)operator new();
              v20->__vftable = (std::__shared_weak_count_vtbl *)&off_24C411F70;
              v20->__shared_owners_ = 0;
              v20->__shared_weak_owners_ = 0;
              v20[1].__vftable = v19;
              v31 = v20;
              sub_20AFA7F18((uint64_t)v32, (uint64_t)&info);
              v21 = v31;
              if (v31)
              {
                p_shared_owners = (unint64_t *)&v31->__shared_owners_;
                do
                  v23 = __ldaxr(p_shared_owners);
                while (__stlxr(v23 - 1, p_shared_owners));
                if (!v23)
                {
                  ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
                  std::__shared_weak_count::__release_weak(v21);
                }
              }
              sub_20AF4EA3C((uint64_t)&v33);
              goto LABEL_39;
            }
LABEL_25:
            v41 = a2[8];
            v42 = 1;
            goto LABEL_26;
          }
LABEL_17:
          if (*((char *)a2 + 119) < 0)
          {
            sub_20AEC60F4(&v38, *((void **)a2 + 12), *((_QWORD *)a2 + 13));
          }
          else
          {
            v38 = a2[6];
            v39 = *((_QWORD *)a2 + 14);
          }
          v40 = 1;
          LOBYTE(v41) = 0;
          v42 = 0;
          if (!*((_BYTE *)a2 + 144))
            goto LABEL_26;
          goto LABEL_25;
        }
LABEL_16:
        LOBYTE(v38) = 0;
        v40 = 0;
        if (!*((_BYTE *)a2 + 120))
          goto LABEL_24;
        goto LABEL_17;
      }
    }
    v33 = v7;
    LOBYTE(v34) = v6;
    LOBYTE(v35) = 0;
    v37 = 0;
    goto LABEL_16;
  }
  v9 = mach_continuous_time();
  v10 = atomic_load((unsigned __int8 *)&qword_25463D170);
  if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
  {
    mach_timebase_info(&info);
    LODWORD(v25) = info.numer;
    LODWORD(v26) = info.denom;
    *(double *)&qword_25463D168 = (double)v25 / (double)v26;
    __cxa_guard_release(&qword_25463D170);
  }
  v33 = (mach_timebase_info)llround(*(double *)&qword_25463D168 * (double)v9);
  v34 = 2;
  LOBYTE(v35) = 0;
  v37 = 0;
  LOBYTE(v38) = 0;
  v40 = 0;
  LOBYTE(v41) = 0;
  v42 = 0;
  LOBYTE(v43) = 0;
  v46 = 0;
  v47[0] = 0;
  v47[24] = 0;
  v11 = (std::__shared_weak_count_vtbl *)operator new();
  sub_20B0A389C(v11, a1, (uint64_t)&v33);
  info = (mach_timebase_info)&off_24C411E78;
  v30 = v11;
  v12 = (std::__shared_weak_count *)operator new();
  v12->__vftable = (std::__shared_weak_count_vtbl *)&off_24C411F70;
  v12->__shared_owners_ = 0;
  v12->__shared_weak_owners_ = 0;
  v12[1].__vftable = v11;
  v31 = v12;
  sub_20AF4EA3C((uint64_t)&v33);
  sub_20AFA7F18((uint64_t)v32, (uint64_t)&info);
  v13 = v31;
  if (v31)
  {
    v14 = (unint64_t *)&v31->__shared_owners_;
    do
      v15 = __ldaxr(v14);
    while (__stlxr(v15 - 1, v14));
    if (!v15)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
LABEL_39:
  sub_20AF4BAD4(a3, 0, v32);
  *(_BYTE *)(a3 + 528) = 1;
  return sub_20AED5474((uint64_t)v32);
}

void sub_20B0A3104(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B0A311C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B0A3134(_Unwind_Exception *a1)
{
  if (LOBYTE(STACK[0x258]))
  {
    if (SLOBYTE(STACK[0x257]) < 0)
      operator delete((void *)STACK[0x240]);
  }
  _Unwind_Resume(a1);
}

void sub_20B0A3250(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AED5474((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A3264(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  const void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  BOOL v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  unsigned __int8 v18;
  int v19;
  uint64_t v20;
  void **v21;
  void **v22;
  void *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  void *v27;
  __int128 v28;
  char v29;
  void *v30[2];
  uint64_t v31;
  int v32;
  void *v33;
  void **v34;
  _BYTE __p[32];
  uint64_t v36;
  _BYTE v37[24];
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  uint64_t v41;
  char v42;
  char v43;
  uint64_t v44;
  std::__shared_weak_count *v45;
  __int128 __dst;
  uint64_t v47;
  int v48;
  char v49;
  char v50;
  void *v51;
  char v52;
  char v53;
  uint64_t v54;

  v54 = *MEMORY[0x24BDAC8D0];
  v4 = *(const void **)(a1 + 424);
  v5 = *(std::__shared_weak_count **)(a1 + 432);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  if (v4)
  {
    v8 = __dynamic_cast(v4, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40C070, 0) != 0;
    if (!v5)
      goto LABEL_11;
  }
  else
  {
    v8 = 0;
    if (!v5)
      goto LABEL_11;
  }
  v9 = (unint64_t *)&v5->__shared_owners_;
  do
    v10 = __ldaxr(v9);
  while (__stlxr(v10 - 1, v9));
  if (v10)
  {
LABEL_11:
    if (v8)
      goto LABEL_12;
LABEL_25:
    v12 = 0;
    v44 = 0;
    v45 = 0;
    goto LABEL_26;
  }
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  if (!v8)
    goto LABEL_25;
LABEL_12:
  v11 = *(_QWORD *)(a1 + 424);
  v12 = *(std::__shared_weak_count **)(a1 + 432);
  if (v12)
  {
    v13 = (unint64_t *)&v12->__shared_owners_;
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
  }
  v44 = v11;
  v45 = v12;
  if (v11)
  {
    sub_20B0A2830((uint64_t)&__dst, (uint64_t *)(v11 + 8));
    sub_20B0A2830((uint64_t)__p, (uint64_t *)&__dst);
    v15 = *(_QWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)a2 = v15;
    *(_BYTE *)(a2 + 8) = 0;
    *(_BYTE *)(a2 + 32) = 0;
    v16 = v36;
    if ((_BYTE)v36)
    {
      *(_OWORD *)(a2 + 8) = *(_OWORD *)&__p[8];
      *(_QWORD *)(a2 + 24) = *(_QWORD *)&__p[24];
      memset(&__p[8], 0, 24);
      *(_BYTE *)(a2 + 32) = 1;
    }
    *(_BYTE *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 64) = 0;
    if ((_BYTE)v38)
    {
      *(_OWORD *)(a2 + 40) = *(_OWORD *)v37;
      *(_QWORD *)(a2 + 56) = *(_QWORD *)&v37[16];
      memset(v37, 0, sizeof(v37));
      *(_BYTE *)(a2 + 64) = 1;
    }
    *(_BYTE *)(a2 + 120) = 1;
    if (v16 && (__p[31] & 0x80000000) != 0)
    {
      operator delete(*(void **)&__p[8]);
      v17 = *(_QWORD *)__p;
      *(_QWORD *)__p = 0;
      if (v17)
        MEMORY[0x20BD3583C](v17, 0x1000C4072FAA15ELL);
    }
    else
    {
      *(_QWORD *)__p = 0;
    }
    if (v53 && v52 < 0)
      operator delete(v51);
    if (v50 && v49 < 0)
      operator delete(*((void **)&__dst + 1));
    v24 = __dst;
    *(_QWORD *)&__dst = 0;
    if (v24)
      MEMORY[0x20BD3583C](v24, 0x1000C4072FAA15ELL);
    goto LABEL_67;
  }
LABEL_26:
  v18 = atomic_load((unsigned __int8 *)&qword_25463CF48);
  if ((v18 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF48))
  {
    *(_OWORD *)v30 = xmmword_20B5B0AE0;
    sub_20B1DFBA8((uint64_t *)v30);
    __cxa_atexit((void (*)(void *))sub_20B1DFE54, &xmmword_25463CDA8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463CF48);
  }
  if (byte_25463CEFF < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_25463CEE8, *((unint64_t *)&xmmword_25463CEE8 + 1));
  }
  else
  {
    __dst = xmmword_25463CEE8;
    v47 = unk_25463CEF8;
  }
  v48 = dword_25463CF00;
  sub_20AF4BC0C(&v33, (uint64_t)&__dst, 1uLL);
  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AEC60F4(v30, *(void **)a1, *(_QWORD *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)v30 = *(_OWORD *)a1;
    v31 = *(_QWORD *)(a1 + 16);
  }
  v32 = *(_DWORD *)(a1 + 24);
  v27 = operator new(0x28uLL);
  v28 = xmmword_20B5B4860;
  strcpy((char *)v27, "cannot return data as VZTransform3");
  v29 = 1;
  sub_20B099ED4((uint64_t *)&v33, (uint64_t)v30, (uint64_t)&v27, (uint64_t)__p);
  *(_OWORD *)a2 = *(_OWORD *)__p;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v43)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v19 = v37[0];
    if (v37[0])
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)&__p[16];
      *(_QWORD *)(a2 + 32) = v36;
      *(_QWORD *)&__p[24] = 0;
      v36 = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v42)
    {
      v20 = v39;
      *(_QWORD *)(a2 + 64) = v38;
      *(_OWORD *)(a2 + 48) = *(_OWORD *)&v37[8];
      *(_QWORD *)&v37[8] = 0;
      *(_QWORD *)&v37[16] = 0;
      *(_QWORD *)(a2 + 72) = v20;
      *(_OWORD *)(a2 + 80) = v40;
      *(_QWORD *)(a2 + 96) = v41;
      v38 = 0;
      v40 = 0uLL;
      v41 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v19 && SHIBYTE(v36) < 0)
      operator delete(*(void **)&__p[16]);
    if (!v29)
      goto LABEL_46;
    goto LABEL_44;
  }
  *(_BYTE *)(a2 + 120) = 0;
  if (v29)
  {
LABEL_44:
    if (SHIBYTE(v28) < 0)
      operator delete(v27);
  }
LABEL_46:
  if (SHIBYTE(v31) < 0)
    operator delete(v30[0]);
  v21 = (void **)v33;
  if (v33)
  {
    v22 = v34;
    v23 = v33;
    if (v34 != v33)
    {
      do
      {
        if (*((char *)v22 - 9) < 0)
          operator delete(*(v22 - 4));
        v22 -= 4;
      }
      while (v22 != v21);
      v23 = v33;
    }
    v34 = v21;
    operator delete(v23);
  }
  if (SHIBYTE(v47) < 0)
    operator delete((void *)__dst);
LABEL_67:
  if (v12)
  {
    v25 = (unint64_t *)&v12->__shared_owners_;
    do
      v26 = __ldaxr(v25);
    while (__stlxr(v26 - 1, v25));
    if (!v26)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
}

void sub_20B0A3760(_Unwind_Exception *a1)
{
  uint64_t v1;

  __cxa_guard_abort(&qword_25463CF48);
  sub_20AEC147C(v1 - 144);
  _Unwind_Resume(a1);
}

void sub_20B0A3780(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23)
{
  uint64_t v23;

  sub_20AF4BA50(&a23);
  if (*(char *)(v23 - 105) < 0)
    operator delete(*(void **)(v23 - 128));
  sub_20AEC147C(v23 - 144);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0A3820(uint64_t *a1)
{
  uint64_t v2;

  if (*((_BYTE *)a1 + 64) && *((char *)a1 + 63) < 0)
  {
    operator delete((void *)a1[5]);
    if (!*((_BYTE *)a1 + 32))
      goto LABEL_7;
  }
  else if (!*((_BYTE *)a1 + 32))
  {
    goto LABEL_7;
  }
  if (*((char *)a1 + 31) < 0)
    operator delete((void *)a1[1]);
LABEL_7:
  v2 = *a1;
  *a1 = 0;
  if (v2)
    MEMORY[0x20BD3583C](v2, 0x1000C4072FAA15ELL);
  return a1;
}

_QWORD *sub_20B0A389C(_QWORD *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5;

  *a1 = off_24C40C098;
  v5 = (uint64_t)(a1 + 10);
  sub_20B0A2830((uint64_t)(a1 + 1), a2);
  sub_20AF4CAF4(v5, a3);
  *a1 = off_24C40C018;
  return a1;
}

void sub_20B0A38FC(_Unwind_Exception *exception_object)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v4;

  if (*(_BYTE *)(v2 + 72) && *(char *)(v2 + 71) < 0)
    operator delete(*(void **)(v2 + 48));
  if (*(_BYTE *)(v2 + 40) && *(char *)(v2 + 39) < 0)
    operator delete(*(void **)(v2 + 16));
  v4 = *v1;
  *v1 = 0;
  if (v4)
    MEMORY[0x20BD3583C](v4, 0x1000C4072FAA15ELL);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0A3958(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C40C098;
  sub_20AF4EA3C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x20BD3583C](v2, 0x1000C4072FAA15ELL);
  return a1;
}

void sub_20B0A39E4(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C40C098;
  sub_20AF4EA3C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x20BD3583C](v2, 0x1000C4072FAA15ELL);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A3A80(uint64_t a1)
{
  return a1 + 80;
}

uint64_t sub_20B0A3A88(void *a1, void *lpsrc)
{
  uint64_t result;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40C058, 0);
  if (result)
  {
    if (a1 == lpsrc)
      return 1;
    else
      return sub_20B2482F8((uint64_t)a1 + 8, result + 8);
  }
  return result;
}

void sub_20B0A3AEC(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20B0A4BF8();
  sub_20B0A3BA0(a1);
  sub_20AF4DD70(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 80, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20B0A3B84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0A3BA0(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254634C78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634C78))
  {
    v4 = sub_20B0A49FC();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20AF4E53C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20AEC60F4(&xmmword_254634C60, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254634C70 = *(_QWORD *)(v9 - 8);
      xmmword_254634C60 = v7;
    }
    sub_20AEC2E90(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634C60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634C78);
  }
  return sub_20B0A4FB8(&xmmword_254634C60, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)"}");
}

void sub_20B0A3CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC2E90(&a9);
  __cxa_guard_abort(&qword_254634C78);
  _Unwind_Resume(a1);
}

void sub_20B0A3CD0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634C78);
  _Unwind_Resume(a1);
}

void sub_20B0A3CE8(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 11;
}

void sub_20B0A3D14(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20B2346E4(lpsrc, 11, a2);
}

uint64_t sub_20B0A3D4C(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C40C098;
  sub_20AF4EA3C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x20BD3583C](v2, 0x1000C4072FAA15ELL);
  return a1;
}

void sub_20B0A3DD8(uint64_t a1)
{
  uint64_t v2;

  *(_QWORD *)a1 = off_24C40C098;
  sub_20AF4EA3C(a1 + 80);
  if (*(_BYTE *)(a1 + 72) && *(char *)(a1 + 71) < 0)
  {
    operator delete(*(void **)(a1 + 48));
    if (!*(_BYTE *)(a1 + 40))
      goto LABEL_7;
  }
  else if (!*(_BYTE *)(a1 + 40))
  {
    goto LABEL_7;
  }
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
LABEL_7:
  v2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v2)
    MEMORY[0x20BD3583C](v2, 0x1000C4072FAA15ELL);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A3E74(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20B0A4498();
  return sub_20B0A3FC8(v2, (uint64_t)"{", (uint64_t *)(a1 + 8), (uint64_t)",", a1 + 80, (uint64_t)"}");
}

uint64_t sub_20B0A3ECC(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20B0A41F4((uint64_t)v5, (uint64_t)v2, (uint64_t *)(a1 + 8));
  if (v3 == -1)
    sub_20AECFAB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40BFF0[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40BFA8[v3])(v5, v2);
  return result;
}

void sub_20B0A3F64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C40BFA8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20B0A3F9C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20B0A3FC8(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20AED5C4C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20B0A41F4((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40BFC0[v16])(&p_p_dst, &__dst);
  sub_20AF4D170((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40BFC0[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40BFF0[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40BFA8[v16])(&p_dst, &__dst);
  return result;
}

void sub_20B0A4164(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A417C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A4190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A41A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A41B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A41CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A41E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A41F4(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20B2484AC((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40BFD8[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B0A4444(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B0A4468(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0A4484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20B0A4498()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634B38);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634B38))
    return &xmmword_254634B20;
  v2 = sub_20B0A4574();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254634B20, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254634B30 = v2->__r_.__value_.__r.__words[2];
    xmmword_254634B20 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634B20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634B38);
  return &xmmword_254634B20;
}

void sub_20B0A455C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634B38);
  _Unwind_Resume(a1);
}

std::string *sub_20B0A4574()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634B58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634B58))
    return &stru_254634B40;
  sub_20B0A4818((uint64_t)__p);
  sub_20B0A4664((char *)__p, &stru_254634B40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634B40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634B58);
  return &stru_254634B40;
}

void sub_20B0A4624(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634B58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634B58);
  _Unwind_Resume(a1);
}

void sub_20B0A4664(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B0A49FC();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20AF4DB74();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 2uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20B0A47C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20AEC2E90((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B0A4818(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634BD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634BD8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::Transform3>]", qword_254634BC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634BC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634BD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634BF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634BF8))
  {
    v5 = sub_20AED4780(qword_254634BC0, "<", 0);
    sub_20AED467C(qword_254634BC0, 0, v5, qword_254634BE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634BE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634BF8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254634C18);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254634C18))
  {
    sub_20B531658((uint64_t)qword_254634BE0, (uint64_t)&xmmword_254634C00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634C00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634C18);
  }
  if (byte_254634C17 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254634C00, *((unint64_t *)&xmmword_254634C00 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254634C00;
    *(_QWORD *)(a1 + 16) = unk_254634C10;
  }
}

void sub_20B0A49B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634C18);
  _Unwind_Resume(a1);
}

void sub_20B0A49CC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634BF8);
  _Unwind_Resume(a1);
}

void sub_20B0A49E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634BD8);
  _Unwind_Resume(a1);
}

__int128 *sub_20B0A49FC()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634B78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634B78))
    return &xmmword_254634B60;
  v2 = (char *)sub_20B0A4AD8();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254634B60, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254634B70 = *((_QWORD *)v2 + 2);
    xmmword_254634B60 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634B60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634B78);
  return &xmmword_254634B60;
}

void sub_20B0A4AC0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634B78);
  _Unwind_Resume(a1);
}

void *sub_20B0A4AD8()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254634B98);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634B98))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::Transform3]", qword_254634B80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634B80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634B98);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254634BB8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254634BB8))
    return &unk_254634BA0;
  sub_20B531658((uint64_t)qword_254634B80, (uint64_t)&unk_254634BA0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254634BA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634BB8);
  return &unk_254634BA0;
}

void sub_20B0A4BC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634BB8);
  _Unwind_Resume(a1);
}

void sub_20B0A4BE0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634B98);
  _Unwind_Resume(a1);
}

std::string *sub_20B0A4BF8()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void *v8[3];
  void *v9[2];
  char v10;
  void *__dst[2];
  uint64_t v12;
  void *v13[2];
  uint64_t v14;
  __int128 v15;
  std::string::size_type v16;
  void *__p[2];
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254634C38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634C38))
  {
    sub_20AEC0D64(v9, "viz::PackageData");
    v2 = sub_20B0A49FC();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v12 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    *(_OWORD *)v13 = *(_OWORD *)"viz::Package";
    v14 = 0xC00000000000000;
    v4 = sub_20B0A4EC0();
    if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AEC60F4(&v15, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
    }
    else
    {
      v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
      v16 = v4->__r_.__value_.__r.__words[2];
      v15 = v5;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v18 = 0x400000000000000;
    sub_20AEC7620(v8, (uint64_t)__dst, 4uLL);
    sub_20B53170C((char *)v9, (uint64_t *)v8, &stru_254634C20, v6, v7);
    sub_20AEC2E90(v8);
    if (SHIBYTE(v18) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v16) & 0x80000000) == 0)
      {
LABEL_12:
        if ((SHIBYTE(v14) & 0x80000000) == 0)
          goto LABEL_13;
        goto LABEL_18;
      }
    }
    else if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
      goto LABEL_12;
    }
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_13:
      if ((SHIBYTE(v12) & 0x80000000) == 0)
        goto LABEL_14;
      goto LABEL_19;
    }
LABEL_18:
    operator delete(v13[0]);
    if ((SHIBYTE(v12) & 0x80000000) == 0)
    {
LABEL_14:
      if ((v10 & 0x80000000) == 0)
      {
LABEL_15:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634C20, &dword_20AEBB000);
        __cxa_guard_release(&qword_254634C38);
        return &stru_254634C20;
      }
LABEL_20:
      operator delete(v9[0]);
      goto LABEL_15;
    }
LABEL_19:
    operator delete(__dst[0]);
    if ((v10 & 0x80000000) == 0)
      goto LABEL_15;
    goto LABEL_20;
  }
  return &stru_254634C20;
}

void sub_20B0A4DDC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20AEC2E90(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_254634C38);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_254634C38);
  _Unwind_Resume(a1);
}

std::string *sub_20B0A4EC0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634C58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634C58))
    return &stru_254634C40;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 11U]", __p);
  sub_20B531884((uint64_t)__p, &stru_254634C40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634C40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634C58);
  return &stru_254634C40;
}

void sub_20B0A4F78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634C58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634C58);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A4FB8(__int128 *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20AED5C4C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20B0A41F4((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40BFC0[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40BFF0[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40BFA8[v11])(&p_dst, &__dst);
  return result;
}

void sub_20B0A50F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A5110(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A5124(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A5138(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A514C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A5160(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

uint64_t sub_20B0A518C()
{
  _QWORD *v0;
  uint64_t result;

  v0 = operator new(0x58uLL);
  v0[1] = 0;
  v0[2] = 0;
  *v0 = &off_24C40C0E8;
  result = MEMORY[0x20BD3535C](v0 + 3);
  qword_25463AEC0 = result;
  *(_QWORD *)algn_25463AEC8 = v0;
  return result;
}

void sub_20B0A51D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count *v1;
  void *v3;

  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A51E8(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0A5250(uint64_t a1)
{
  std::recursive_mutex *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (*(_QWORD *)a1)
  {
    v2 = ***(std::recursive_mutex ****)a1;
    std::recursive_mutex::lock(v2);
    v3 = *(std::__shared_weak_count **)(a1 + 8);
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v5 = __ldaxr(p_shared_owners);
      while (__stlxr(v5 - 1, p_shared_owners));
      if (!v5)
      {
        ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
        std::__shared_weak_count::__release_weak(v3);
      }
    }
    std::recursive_mutex::unlock(v2);
  }
  v6 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v6)
    return a1;
  v7 = (unint64_t *)&v6->__shared_owners_;
  do
    v8 = __ldaxr(v7);
  while (__stlxr(v8 - 1, v7));
  if (v8)
    return a1;
  ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
  std::__shared_weak_count::__release_weak(v6);
  return a1;
}

void sub_20B0A5324(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;

  sub_20B0A6AA8(*(_QWORD **)(*a1 + 88), (uint64_t **)(*a1 + 152));
  v2 = *(uint64_t **)(*a1 + 80);
  v7 = *(_QWORD *)(*a1 + 96);
  v8 = v2;
  sub_20B0A6940(&v8, &v7);
  v3 = *(uint64_t **)(*a1 + 80);
  v5 = *(_QWORD *)(*a1 + 104);
  v6 = v3;
  sub_20B0A69F4(&v6, &v5);
  sub_20B0A6AA8(*(_QWORD **)(*a1 + 88), (uint64_t **)(*a1 + 152));
  sub_20AEC3E28(*(_QWORD **)(*a1 + 88), *(_DWORD *)(*a1 + 136));
  sub_20AEC3E28(*(_QWORD **)(*a1 + 96), *(_DWORD *)(*a1 + 140));
  v4 = *a1;
  if (*(_BYTE *)(*a1 + 148))
    sub_20AEC3E28(*(_QWORD **)(v4 + 104), *(_DWORD *)(v4 + 144));
  else
    sub_20AEC4344(*(_QWORD **)(v4 + 104));
}

void sub_20B0A53E8(uint64_t *a1@<X8>)
{
  unsigned __int8 v2;
  std::__shared_weak_count *v3;
  std::recursive_mutex *v4;
  unint64_t *v5;
  unint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  unsigned __int8 v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unsigned __int8 v16;
  unsigned __int8 v17;
  uint64_t (***v18)();
  uint64_t v19;
  __int128 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void **v29;
  char *v30;
  char *v31;
  void *v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  const char *v45;
  const char *v46;
  const char *v47;
  int v48;
  size_t v49;
  const char *v50;
  unint64_t *v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  unint64_t v55;
  _BYTE *v56;
  char *v57;
  uint64_t v58;
  int64_t v59;
  unint64_t v60;
  char *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  uint64_t v70;
  uint64_t *v71;
  std::__shared_weak_count *v72;
  unint64_t *v73;
  unint64_t v74;
  unint64_t *v75;
  uint64_t v76;
  void **v77;
  char *v78;
  char *v79;
  void *v80;
  std::__shared_weak_count *v81;
  unint64_t *v82;
  unint64_t v83;
  std::__shared_weak_count *v84;
  std::__shared_weak_count *v85;
  unint64_t *v86;
  unint64_t v87;
  uint64_t (***v88)();
  uint64_t v89;
  uint64_t (***v90)();
  uint64_t v91;
  unsigned __int8 v92;
  unint64_t *p_shared_weak_owners;
  unint64_t v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t *v102;
  std::recursive_mutex *v103;
  uint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  std::__shared_weak_count *v108;
  void *__p;
  char v110;
  uint64_t *v111;
  uint64_t (**v112)();
  char v113;
  uint64_t (***v114)();
  uint64_t (**v115)();
  char v116;
  uint64_t (***v117)();
  uint64_t v118;
  std::__shared_weak_count *v119;
  uint64_t (***v120)();
  __int128 v121;
  uint64_t v122;
  __int128 *v123;
  char v124;
  uint64_t v125;
  void *v126[5];

  v126[3] = *(void **)MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25463AEA8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463AEA8))
  {
    sub_20B0A518C();
    __cxa_atexit((void (*)(void *))sub_20B0A51E8, &xmmword_25463AEC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463AEA8);
  }
  v3 = (std::__shared_weak_count *)*((_QWORD *)&xmmword_25463AEC0 + 1);
  v4 = (std::recursive_mutex *)xmmword_25463AEC0;
  v121 = xmmword_25463AEC0;
  if (*((_QWORD *)&xmmword_25463AEC0 + 1))
  {
    v5 = (unint64_t *)(*((_QWORD *)&xmmword_25463AEC0 + 1) + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  std::recursive_mutex::lock(v4);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  v9 = atomic_load((unsigned __int8 *)&qword_25463AEA0);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25463AEA0))
  {
    __cxa_atexit((void (*)(void *))sub_20B0A5160, &qword_25463AEB0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463AEA0);
  }
  v108 = 0;
  if (qword_25463AEB8)
  {
    v108 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_25463AEB8);
    if (v108)
    {
      v107 = qword_25463AEB0;
      if (qword_25463AEB0)
        goto LABEL_183;
    }
  }
  v102 = a1;
  v103 = v4;
  v10 = operator new();
  v116 = 0;
  v117 = &v115;
  v112 = &off_24C40C218;
  v113 = 0;
  v114 = &v112;
  v115 = &off_24C40C188;
  v104 = v10;
  v11 = operator new();
  if (v117)
  {
    if (v117 == &v115)
    {
      v123 = &v121;
      ((void (*)(uint64_t (***)(), __int128 *))v115[3])(&v115, &v121);
    }
    else
    {
      v123 = (__int128 *)v117;
      v117 = 0;
    }
  }
  else
  {
    v123 = 0;
  }
  if (v114)
  {
    if (v114 == &v112)
    {
      v120 = (uint64_t (***)())&v118;
      ((void (*)(uint64_t, uint64_t))v112[3])((uint64_t)&v112, (uint64_t)&v118);
    }
    else
    {
      v120 = v114;
      v114 = 0;
    }
  }
  else
  {
    v120 = 0;
  }
  v12 = atomic_load((unsigned __int8 *)&qword_25463AEA8);
  if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25463AEA8))
  {
    sub_20B0A518C();
    __cxa_atexit((void (*)(void *))sub_20B0A51E8, &xmmword_25463AEC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463AEA8);
  }
  v13 = *((_QWORD *)&xmmword_25463AEC0 + 1);
  *(_QWORD *)v11 = xmmword_25463AEC0;
  *(_QWORD *)(v11 + 8) = v13;
  if (v13)
  {
    v14 = (unint64_t *)(v13 + 8);
    do
      v15 = __ldxr(v14);
    while (__stxr(v15 + 1, v14));
  }
  if (v123)
  {
    if (v123 == &v121)
    {
      *(_QWORD *)(v11 + 40) = v11 + 16;
      (*(void (**)(__int128 *, uint64_t))(v121 + 24))(&v121, v11 + 16);
    }
    else
    {
      *(_QWORD *)(v11 + 40) = v123;
      v123 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v11 + 40) = 0;
  }
  if (v120)
  {
    if (v120 == (uint64_t (***)())&v118)
    {
      *(_QWORD *)(v11 + 72) = v11 + 48;
      (*(void (**)(uint64_t *, uint64_t))(v118 + 24))(&v118, v11 + 48);
    }
    else
    {
      *(_QWORD *)(v11 + 72) = v120;
      v120 = 0;
    }
  }
  else
  {
    *(_QWORD *)(v11 + 72) = 0;
  }
  v16 = atomic_load((unsigned __int8 *)&qword_25463CD80);
  if ((v16 & 1) == 0 && __cxa_guard_acquire(&qword_25463CD80))
  {
    sub_20AEBFFE4(&qword_25463CD78);
    __cxa_guard_release(&qword_25463CD80);
  }
  *(_QWORD *)(v11 + 80) = qword_25463CD78;
  v110 = 0;
  LOBYTE(__p) = 0;
  v17 = atomic_load((unsigned __int8 *)&qword_25463CD80);
  if ((v17 & 1) == 0 && __cxa_guard_acquire(&qword_25463CD80))
  {
    sub_20AEBFFE4(&qword_25463CD78);
    __cxa_guard_release(&qword_25463CD80);
  }
  v111 = (uint64_t *)qword_25463CD78;
  sub_20AEC4B5C(&v111, (uint64_t)&__p, (uint64_t *)(v11 + 88));
  if (v110 < 0)
    operator delete(__p);
  sub_20B0A7BD4((_QWORD *)(v11 + 96));
  sub_20B0A7AE0((_QWORD *)(v11 + 104));
  *(_BYTE *)(v11 + 120) = 0;
  *(_BYTE *)(v11 + 124) = 0;
  *(_BYTE *)(v11 + 128) = 0;
  *(_BYTE *)(v11 + 132) = 0;
  *(_BYTE *)(v11 + 144) = 0;
  *(_BYTE *)(v11 + 148) = 0;
  *(_OWORD *)(v11 + 152) = 0u;
  *(_OWORD *)(v11 + 168) = 0u;
  *(_OWORD *)(v11 + 184) = 0u;
  *(_OWORD *)(v11 + 200) = 0u;
  *(_QWORD *)(v11 + 216) = 850045863;
  *(_OWORD *)(v11 + 224) = 0u;
  *(_OWORD *)(v11 + 240) = 0u;
  *(_OWORD *)(v11 + 256) = 0u;
  *(_QWORD *)(v11 + 272) = 0;
  *(_QWORD *)v10 = v11;
  v18 = v120;
  if (v120 == (uint64_t (***)())&v118)
  {
    v19 = 4;
    v18 = (uint64_t (***)())&v118;
  }
  else
  {
    if (!v120)
      goto LABEL_47;
    v19 = 5;
  }
  (*v18)[v19]();
LABEL_47:
  v20 = v123;
  if (v123 == &v121)
  {
    v21 = 4;
    v20 = &v121;
    goto LABEL_51;
  }
  if (v123)
  {
    v21 = 5;
LABEL_51:
    (*(void (**)(void))(*(_QWORD *)v20 + 8 * v21))();
  }
  v22 = *(_QWORD *)(*(_QWORD *)v10 + 88);
  v23 = *(_QWORD *)(*(_QWORD *)v10 + 96);
  v24 = *(_QWORD *)(*(_QWORD *)v10 + 104);
  if ((!*(_QWORD *)(v22 + 48) || !*(_QWORD *)(v23 + 48))
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Log/src/APILogging.cpp", 324, (uint64_t)"root_logger.get().hasLogLevel() && api_logger.get().hasLogLevel()", 65, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_204;
  }
  if (*(_QWORD *)(v24 + 48)
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Log/src/APILogging.cpp", 325, (uint64_t)"!internal_logger.get().hasLogLevel()", 36, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_204;
  }
  v25 = **(_DWORD **)(v23 + 56);
  if (v25 != 1
    && v25 != 6
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Log/src/APILogging.cpp", 336, (uint64_t)"api_log_level == tlog::LEVEL_FATAL || api_log_level == tlog::LEVEL_TRACE", 72, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_204;
  }
  sub_20AEC4730(v23, (uint64_t)&v121);
  v26 = v125;
  sub_20B0A7194(v126);
  if (v124 < 0)
  {
    operator delete(v123);
    if ((SHIBYTE(v122) & 0x80000000) == 0)
    {
LABEL_62:
      if (!v26)
        goto LABEL_67;
      goto LABEL_66;
    }
  }
  else if ((SHIBYTE(v122) & 0x80000000) == 0)
  {
    goto LABEL_62;
  }
  operator delete((void *)v121);
  if (!v26)
    goto LABEL_67;
LABEL_66:
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Log/src/APILogging.cpp", 340, (uint64_t)"api_logger.get().getInfoTree().numAppenders == 0", 48, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_204;
  }
LABEL_67:
  sub_20AEC4730(v24, (uint64_t)&v121);
  v27 = v125;
  sub_20B0A7194(v126);
  if (v124 < 0)
  {
    operator delete(v123);
    if ((SHIBYTE(v122) & 0x80000000) == 0)
    {
LABEL_69:
      if (!v27)
        goto LABEL_74;
LABEL_73:
      if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Log/src/APILogging.cpp", 341, (uint64_t)"internal_logger.get().getInfoTree().numAppenders == 0", 53, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))goto LABEL_74;
LABEL_204:
      abort();
    }
  }
  else if ((SHIBYTE(v122) & 0x80000000) == 0)
  {
    goto LABEL_69;
  }
  operator delete((void *)v121);
  if (v27)
    goto LABEL_73;
LABEL_74:
  sub_20AEC3A20(v22, &v121);
  v105 = v22;
  v28 = *(_QWORD *)v10;
  v29 = (void **)(*(_QWORD *)v10 + 152);
  v30 = (char *)*v29;
  if (*v29)
  {
    v31 = *(char **)(v28 + 160);
    v32 = *(void **)(*(_QWORD *)v10 + 152);
    if (v31 != v30)
    {
      do
      {
        v33 = (std::__shared_weak_count *)*((_QWORD *)v31 - 1);
        if (v33)
        {
          v34 = (unint64_t *)&v33->__shared_owners_;
          do
            v35 = __ldaxr(v34);
          while (__stlxr(v35 - 1, v34));
          if (!v35)
          {
            ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
            std::__shared_weak_count::__release_weak(v33);
          }
        }
        v31 -= 16;
      }
      while (v31 != v30);
      v32 = *v29;
      v10 = v104;
    }
    *(_QWORD *)(v28 + 160) = v30;
    operator delete(v32);
    *v29 = 0;
    v29[1] = 0;
    v29[2] = 0;
  }
  *(_OWORD *)(v28 + 152) = v121;
  *(_QWORD *)(v28 + 168) = v122;
  v36 = *(_QWORD *)v10;
  *(_DWORD *)(v36 + 136) = **(_DWORD **)(v105 + 56);
  *(_DWORD *)(v36 + 140) = **(_DWORD **)(v23 + 56);
  if (*(_QWORD *)(v24 + 48))
  {
    *(_DWORD *)(v36 + 144) = **(_DWORD **)(v24 + 56);
    *(_BYTE *)(v36 + 148) = 1;
  }
  else if (*(_BYTE *)(v36 + 148))
  {
    *(_BYTE *)(v36 + 148) = 0;
  }
  sub_20AEC3E28((_QWORD *)v105, 6);
  sub_20AEC3E28((_QWORD *)v23, 6);
  sub_20AEC3E28((_QWORD *)v24, 6);
  *(_QWORD *)(*(_QWORD *)v10 + 112) = 0;
  sub_20AEC3A20(v105, &v121);
  v37 = (uint64_t *)*((_QWORD *)&v121 + 1);
  v38 = (uint64_t *)v121;
  if ((_QWORD)v121 == *((_QWORD *)&v121 + 1))
  {
    v39 = 0;
    v40 = 0;
    if ((_QWORD)v121)
      goto LABEL_143;
LABEL_140:
    v70 = v105;
    if (v39 != v40)
      goto LABEL_153;
    goto LABEL_155;
  }
  v39 = 0;
  v40 = 0;
  v106 = 0;
  do
  {
    v41 = *v38;
    v42 = (std::__shared_weak_count *)v38[1];
    v118 = *v38;
    v119 = v42;
    if (v42)
    {
      v43 = (unint64_t *)&v42->__shared_owners_;
      do
        v44 = __ldxr(v43);
      while (__stxr(v44 + 1, v43));
    }
    v45 = sub_20AEC5E28();
    v46 = (const char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v41 + 24))(v41);
    v47 = v46;
    v48 = v45[23];
    if (v48 >= 0)
      v49 = *((unsigned __int8 *)v45 + 23);
    else
      v49 = *((_QWORD *)v45 + 1);
    if (v49 != strlen(v46) || (v48 >= 0 ? (v50 = v45) : (v50 = *(const char **)v45), memcmp(v50, v47, v49)))
    {
      if (!v42)
        goto LABEL_91;
LABEL_104:
      v51 = (unint64_t *)&v42->__shared_owners_;
      do
        v52 = __ldaxr(v51);
      while (__stlxr(v52 - 1, v51));
      if (!v52)
      {
        ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
        std::__shared_weak_count::__release_weak(v42);
      }
      goto LABEL_91;
    }
    if (v40 < v106)
    {
      *(_QWORD *)v40 = v41;
      v40 += 8;
      v42 = v119;
      if (!v119)
        goto LABEL_91;
      goto LABEL_104;
    }
    v53 = (v40 - v39) >> 3;
    v54 = v53 + 1;
    if ((unint64_t)(v53 + 1) >> 61)
      sub_20AEC60B8();
    if ((v106 - v39) >> 2 > v54)
      v54 = (v106 - v39) >> 2;
    if ((unint64_t)(v106 - v39) >= 0x7FFFFFFFFFFFFFF8)
      v55 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v55 = v54;
    if (v55)
    {
      if (v55 >> 61)
        sub_20AEC60CC();
      v56 = operator new(8 * v55);
      v57 = &v56[8 * v53];
      *(_QWORD *)v57 = v41;
      v58 = (uint64_t)(v57 + 8);
      v59 = v40 - v39;
      if (v40 == v39)
        goto LABEL_125;
    }
    else
    {
      v56 = 0;
      v57 = (char *)(8 * v53);
      *(_QWORD *)(8 * v53) = v41;
      v58 = 8 * v53 + 8;
      v59 = v40 - v39;
      if (v40 == v39)
        goto LABEL_125;
    }
    v60 = v59 - 8;
    if (v60 < 0x168)
    {
      v61 = v40;
      goto LABEL_124;
    }
    v63 = (v40 - 8 - v39) & 0xFFFFFFFFFFFFFFF8;
    if (&v56[v40 - v39 - 8 - v63] > &v56[v40 - v39 - 8])
    {
      v61 = v40;
      do
      {
LABEL_124:
        v62 = *((_QWORD *)v61 - 1);
        v61 -= 8;
        *((_QWORD *)v57 - 1) = v62;
        v57 -= 8;
      }
      while (v61 != v39);
      goto LABEL_125;
    }
    if (&v40[-v63 - 8] > v40 - 8)
    {
      v61 = v40;
      goto LABEL_124;
    }
    if ((unint64_t)(v39 - v56) < 0x20)
    {
      v61 = v40;
      goto LABEL_124;
    }
    v64 = (v60 >> 3) + 1;
    v65 = 8 * (v64 & 0x3FFFFFFFFFFFFFFCLL);
    v61 = &v40[-v65];
    v57 -= v65;
    v66 = &v56[8 * v53 - 16];
    v67 = v40 - 16;
    v68 = v64 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v69 = *(_OWORD *)v67;
      *(v66 - 1) = *((_OWORD *)v67 - 1);
      *v66 = v69;
      v66 -= 2;
      v67 -= 32;
      v68 -= 4;
    }
    while (v68);
    if (v64 != (v64 & 0x3FFFFFFFFFFFFFFCLL))
      goto LABEL_124;
LABEL_125:
    v106 = &v56[8 * v55];
    if (v39)
      operator delete(v39);
    v39 = v57;
    v42 = v119;
    v40 = (char *)v58;
    if (v119)
      goto LABEL_104;
LABEL_91:
    v38 += 2;
  }
  while (v38 != v37);
  v38 = (uint64_t *)v121;
  v10 = v104;
  if (!(_QWORD)v121)
    goto LABEL_140;
LABEL_143:
  v71 = (uint64_t *)*((_QWORD *)&v121 + 1);
  if (*((uint64_t **)&v121 + 1) == v38)
  {
    *((_QWORD *)&v121 + 1) = v38;
    operator delete(v38);
    v70 = v105;
    if (v39 == v40)
      goto LABEL_155;
LABEL_153:
    v75 = (unint64_t *)v39;
    do
      sub_20AEC3670(v70, *v75++);
    while (v75 != (unint64_t *)v40);
  }
  else
  {
    do
    {
      v72 = (std::__shared_weak_count *)*(v71 - 1);
      if (v72)
      {
        v73 = (unint64_t *)&v72->__shared_owners_;
        do
          v74 = __ldaxr(v73);
        while (__stlxr(v74 - 1, v73));
        if (!v74)
        {
          ((void (*)(std::__shared_weak_count *))v72->__on_zero_shared)(v72);
          std::__shared_weak_count::__release_weak(v72);
        }
      }
      v71 -= 2;
    }
    while (v71 != v38);
    *((_QWORD *)&v121 + 1) = v38;
    operator delete((void *)v121);
    v70 = v105;
    if (v39 != v40)
      goto LABEL_153;
  }
LABEL_155:
  sub_20AEC3A20(v70, &v121);
  v76 = *(_QWORD *)v10;
  v77 = (void **)(*(_QWORD *)v10 + 176);
  v78 = (char *)*v77;
  if (*v77)
  {
    v79 = *(char **)(v76 + 184);
    v80 = *(void **)(*(_QWORD *)v10 + 176);
    if (v79 != v78)
    {
      do
      {
        v81 = (std::__shared_weak_count *)*((_QWORD *)v79 - 1);
        if (v81)
        {
          v82 = (unint64_t *)&v81->__shared_owners_;
          do
            v83 = __ldaxr(v82);
          while (__stlxr(v83 - 1, v82));
          if (!v83)
          {
            ((void (*)(std::__shared_weak_count *))v81->__on_zero_shared)(v81);
            std::__shared_weak_count::__release_weak(v81);
          }
        }
        v79 -= 16;
      }
      while (v79 != v78);
      v80 = *v77;
    }
    *(_QWORD *)(v76 + 184) = v78;
    operator delete(v80);
    *v77 = 0;
    v77[1] = 0;
    v77[2] = 0;
  }
  *(_OWORD *)(v76 + 176) = v121;
  *(_QWORD *)(v76 + 192) = v122;
  if (v39)
    operator delete(v39);
  v84 = (std::__shared_weak_count *)operator new();
  v84->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40C298;
  v84->__shared_owners_ = 0;
  v84->__shared_weak_owners_ = 0;
  v84[1].__vftable = (std::__shared_weak_count_vtbl *)v10;
  v85 = v108;
  v107 = v10;
  v108 = v84;
  a1 = v102;
  if (!v85)
    goto LABEL_172;
  v86 = (unint64_t *)&v85->__shared_owners_;
  do
    v87 = __ldaxr(v86);
  while (__stlxr(v87 - 1, v86));
  if (!v87)
  {
    ((void (*)(std::__shared_weak_count *))v85->__on_zero_shared)(v85);
    std::__shared_weak_count::__release_weak(v85);
    v88 = v114;
    if (v114 == &v112)
      goto LABEL_176;
LABEL_173:
    v4 = v103;
    if (v88)
    {
      v89 = 5;
      goto LABEL_177;
    }
  }
  else
  {
LABEL_172:
    v88 = v114;
    if (v114 != &v112)
      goto LABEL_173;
LABEL_176:
    v89 = 4;
    v88 = &v112;
    v4 = v103;
LABEL_177:
    (*v88)[v89]();
  }
  v90 = v117;
  if (v117 == &v115)
  {
    v91 = 4;
    v90 = &v115;
LABEL_182:
    (*v90)[v91]();
  }
  else if (v117)
  {
    v91 = 5;
    goto LABEL_182;
  }
LABEL_183:
  v92 = atomic_load((unsigned __int8 *)&qword_25463AEA0);
  if ((v92 & 1) == 0 && __cxa_guard_acquire(&qword_25463AEA0))
  {
    __cxa_atexit((void (*)(void *))sub_20B0A5160, &qword_25463AEB0, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463AEA0);
  }
  if (v108)
  {
    p_shared_weak_owners = (unint64_t *)&v108->__shared_weak_owners_;
    do
      v94 = __ldxr(p_shared_weak_owners);
    while (__stxr(v94 + 1, p_shared_weak_owners));
  }
  v95 = (std::__shared_weak_count *)qword_25463AEB8;
  qword_25463AEB0 = v107;
  qword_25463AEB8 = (uint64_t)v108;
  if (v95)
    std::__shared_weak_count::__release_weak(v95);
  if (v108)
  {
    v96 = (unint64_t *)&v108->__shared_owners_;
    do
      v97 = __ldxr(v96);
    while (__stxr(v97 + 1, v96));
    *a1 = v107;
    a1[1] = (uint64_t)v108;
    do
      v98 = __ldxr(v96);
    while (__stxr(v98 + 1, v96));
    do
      v99 = __ldaxr(v96);
    while (__stlxr(v99 - 1, v96));
    if (!v99)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  else
  {
    *a1 = v107;
    a1[1] = 0;
  }
  if (v108)
  {
    v100 = (unint64_t *)&v108->__shared_owners_;
    do
      v101 = __ldaxr(v100);
    while (__stlxr(v101 - 1, v100));
    if (!v101)
    {
      ((void (*)(std::__shared_weak_count *))v108->__on_zero_shared)(v108);
      std::__shared_weak_count::__release_weak(v108);
    }
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20B0A61D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::recursive_mutex *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,char *a27,char a28,uint64_t a29,uint64_t a30,char *a31,char a32,uint64_t a33,uint64_t a34,char *a35)
{
  uint64_t v35;
  _QWORD *v36;
  _QWORD *v37;
  uint64_t v38;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  char *v44;
  uint64_t v45;
  _QWORD *v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;

  __cxa_guard_abort(&qword_25463CD80);
  if (a22 < 0)
    operator delete(__p);
  v40 = *(_QWORD **)(v35 + 72);
  if (v40 == v37)
  {
    v41 = 4;
  }
  else
  {
    if (!v40)
      goto LABEL_8;
    v41 = 5;
    v37 = *(_QWORD **)(v35 + 72);
  }
  (*(void (**)(_QWORD *))(*v37 + 8 * v41))(v37);
LABEL_8:
  v42 = *(_QWORD **)(v35 + 40);
  if (v42 == v36)
  {
    v43 = 4;
  }
  else
  {
    if (!v42)
      goto LABEL_13;
    v43 = 5;
    v36 = *(_QWORD **)(v35 + 40);
  }
  (*(void (**)(_QWORD *))(*v36 + 8 * v43))(v36);
LABEL_13:
  sub_20B0A51E8(v35);
  v44 = a35;
  if (a35 == &a32)
  {
    v45 = 4;
    v44 = &a32;
  }
  else
  {
    if (!a35)
      goto LABEL_18;
    v45 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v44 + 8 * v45))();
LABEL_18:
  v46 = *(_QWORD **)(v38 - 152);
  if (v46 == (_QWORD *)(v38 - 176))
  {
    v47 = 4;
    v46 = (_QWORD *)(v38 - 176);
  }
  else
  {
    if (!v46)
      goto LABEL_23;
    v47 = 5;
  }
  (*(void (**)(void))(*v46 + 8 * v47))();
LABEL_23:
  MEMORY[0x20BD3583C](v35, 0x1060C406F83F42DLL);
  v48 = a27;
  if (a27 == &a24)
  {
    v49 = 4;
    v48 = &a24;
  }
  else
  {
    if (!a27)
      goto LABEL_28;
    v49 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v48 + 8 * v49))();
LABEL_28:
  v50 = a31;
  if (a31 == &a28)
  {
    v51 = 4;
    v50 = &a28;
  }
  else
  {
    if (!a31)
      goto LABEL_33;
    v51 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v50 + 8 * v51))();
LABEL_33:
  MEMORY[0x20BD3583C](a12, 0x20C4093837F09);
  sub_20AEC147C((uint64_t)&a15);
  std::recursive_mutex::unlock(a11);
  _Unwind_Resume(a1);
}

void sub_20B0A64B4(std::recursive_mutex ***a1, int a2)
{
  std::recursive_mutex *v4;
  std::recursive_mutex **v5;
  std::recursive_mutex *v6;
  std::recursive_mutex *v7;
  _QWORD *v8;
  std::recursive_mutex *v9;
  uint64_t *v10;
  std::recursive_mutex **v11;
  std::recursive_mutex *v12;
  std::recursive_mutex **v13;
  char *v14;
  char *v15;
  void *v16;
  std::__shared_weak_count *v17;
  unint64_t *p_shared_owners;
  unint64_t v19;
  std::recursive_mutex *v20;
  void *__p;
  char *v22;
  std::recursive_mutex *v23;
  uint64_t *v24;

  v4 = **a1;
  std::recursive_mutex::lock(v4);
  sub_20AEC3A20((uint64_t)(*a1)[11], &__p);
  v5 = *a1;
  v7 = (*a1)[22];
  v6 = (*a1)[23];
  v8 = __p;
  if ((char *)v6 - (char *)v7 == v22 - (_BYTE *)__p)
  {
    if (v7 == v6)
    {
LABEL_5:
      if (*((_DWORD *)v5 + 28) != 2)
        goto LABEL_12;
      goto LABEL_9;
    }
    while (v7->__m_.__sig == *v8)
    {
      v7 = (std::recursive_mutex *)((char *)v7 + 16);
      v8 += 2;
      if (v7 == v6)
        goto LABEL_5;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Log/src/APILogging.cpp", 426, (uint64_t)"priv().initialized_root_appenders_ == current_root_appenders", 60, (uint64_t)"root appenders have been illegally modified between Initialize() and Enable() of APILogging", 91, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v5 = *a1;
  if (*((_DWORD *)*a1 + 28) == 2)
  {
LABEL_9:
    v9 = *v5;
    std::recursive_mutex::lock(*v5);
    v10 = (uint64_t *)(*a1)[10];
    v23 = (*a1)[12];
    v24 = v10;
    sub_20B0A6940(&v24, (uint64_t *)&v23);
    v11 = *a1;
    if (*((_BYTE *)*a1 + 124))
      *((_BYTE *)v11 + 124) = 0;
    *((_DWORD *)v11 + 28) = 1;
    std::recursive_mutex::unlock(v9);
    v5 = *a1;
  }
LABEL_12:
  v20 = v5[12];
  v12 = v5[5];
  if (!v12)
    sub_20AECABA4();
  (*(void (**)(std::recursive_mutex *, std::recursive_mutex **))(v12->__m_.__sig + 48))(v12, &v20);
  sub_20AEC3E28((*a1)[12], a2);
  v13 = *a1;
  *((_DWORD *)v13 + 30) = a2;
  *((_BYTE *)v13 + 124) = 1;
  *((_DWORD *)*a1 + 28) = 2;
  v14 = (char *)__p;
  if (__p)
  {
    v15 = v22;
    v16 = __p;
    if (v22 != __p)
    {
      do
      {
        v17 = (std::__shared_weak_count *)*((_QWORD *)v15 - 1);
        if (v17)
        {
          p_shared_owners = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(p_shared_owners);
          while (__stlxr(v19 - 1, p_shared_owners));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
        v15 -= 16;
      }
      while (v15 != v14);
      v16 = __p;
    }
    v22 = v14;
    operator delete(v16);
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20B0A66BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::recursive_mutex *v10;
  std::recursive_mutex *v11;

  std::recursive_mutex::unlock(v11);
  sub_20AEC3C38(&a10);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20B0A66E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC3C38((void **)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20B0A6718(std::recursive_mutex ***a1)
{
  std::recursive_mutex *v2;
  std::recursive_mutex **v3;
  std::recursive_mutex *v4;
  std::recursive_mutex *v5;
  _QWORD *v6;
  std::recursive_mutex *v7;
  uint64_t *v8;
  std::recursive_mutex **v9;
  char *v10;
  char *v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  void *__p;
  char *v17;
  std::recursive_mutex *v18;
  uint64_t *v19;

  v2 = **a1;
  std::recursive_mutex::lock(v2);
  sub_20AEC3A20((uint64_t)(*a1)[11], &__p);
  v3 = *a1;
  v5 = (*a1)[22];
  v4 = (*a1)[23];
  v6 = __p;
  if ((char *)v4 - (char *)v5 == v17 - (_BYTE *)__p)
  {
    if (v5 == v4)
    {
LABEL_5:
      if (*((_DWORD *)v3 + 29) != 2)
        goto LABEL_12;
      goto LABEL_9;
    }
    while (v5->__m_.__sig == *v6)
    {
      v5 = (std::recursive_mutex *)((char *)v5 + 16);
      v6 += 2;
      if (v5 == v4)
        goto LABEL_5;
    }
  }
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Log/src/APILogging.cpp", 444, (uint64_t)"priv().initialized_root_appenders_ == current_root_appenders", 60, (uint64_t)"root appenders have been illegally modified between Initialize() and EnableInternal() of APILogging", 99, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v3 = *a1;
  if (*((_DWORD *)*a1 + 29) == 2)
  {
LABEL_9:
    v7 = *v3;
    std::recursive_mutex::lock(*v3);
    v8 = (uint64_t *)(*a1)[10];
    v18 = (*a1)[13];
    v19 = v8;
    sub_20B0A69F4(&v19, (uint64_t *)&v18);
    v9 = *a1;
    if (*((_BYTE *)*a1 + 132))
      *((_BYTE *)v9 + 132) = 0;
    *((_DWORD *)v9 + 29) = 1;
    std::recursive_mutex::unlock(v7);
    v3 = *a1;
  }
LABEL_12:
  *((_DWORD *)v3 + 32) = **(_DWORD **)&v3[13]->__m_.__opaque[48];
  *((_BYTE *)v3 + 132) = 1;
  *((_DWORD *)*a1 + 29) = 2;
  v10 = (char *)__p;
  if (__p)
  {
    v11 = v17;
    v12 = __p;
    if (v17 != __p)
    {
      do
      {
        v13 = (std::__shared_weak_count *)*((_QWORD *)v11 - 1);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v17 = v10;
    operator delete(v12);
  }
  std::recursive_mutex::unlock(v2);
}

void sub_20B0A68EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10)
{
  std::recursive_mutex *v10;
  std::recursive_mutex *v11;

  std::recursive_mutex::unlock(v11);
  sub_20AEC3C38(&a10);
  std::recursive_mutex::unlock(v10);
  _Unwind_Resume(a1);
}

void sub_20B0A6910(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B0A6924(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC3C38((void **)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20B0A6940(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;
  void *v9;

  sub_20AEC3978(*a2);
  sub_20AEC3E28((_QWORD *)*a2, 6);
  sub_20AEC4730(*a2, (uint64_t)v5);
  v4 = *a1;
  sub_20B0A7228(&v4, (uint64_t)v5);
  sub_20B0A7194(&v9);
  if ((v8 & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5[0]);
    return;
  }
  operator delete(__p);
  if (v6 < 0)
    goto LABEL_5;
}

void sub_20B0A69E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AEC0FC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A69F4(uint64_t **a1, uint64_t *a2)
{
  uint64_t *v4;
  void *v5[2];
  char v6;
  void *__p;
  char v8;
  void *v9;

  sub_20AEC3978(*a2);
  sub_20AEC3E28((_QWORD *)*a2, 6);
  sub_20AEC4730(*a2, (uint64_t)v5);
  v4 = *a1;
  sub_20B0A7228(&v4, (uint64_t)v5);
  sub_20B0A7194(&v9);
  if ((v8 & 0x80000000) == 0)
  {
    if ((v6 & 0x80000000) == 0)
      return;
LABEL_5:
    operator delete(v5[0]);
    return;
  }
  operator delete(__p);
  if (v6 < 0)
    goto LABEL_5;
}

void sub_20B0A6A94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AEC0FC8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0A6AA8(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v4;
  uint64_t *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  std::__shared_weak_count *v13;

  sub_20AEC3978((uint64_t)a1);
  v4 = *a2;
  v5 = a2[1];
  while (v4 != v5)
  {
    v6 = (std::__shared_weak_count *)v4[1];
    v12 = *v4;
    v13 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    sub_20AEC325C((uint64_t)a1, &v12);
    v9 = v13;
    if (v13)
    {
      v10 = (unint64_t *)&v13->__shared_owners_;
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
    v4 += 2;
  }
  sub_20AEC3E28(a1, 6);
}

void sub_20B0A6B64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A6B78(std::recursive_mutex ***a1, uint64_t a2, uint64_t a3)
{
  std::recursive_mutex *v6;
  std::recursive_mutex **v7;
  uint64_t *v8;
  std::recursive_mutex *v9;
  const void **v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  uint64_t *v22;
  int v23;
  uint64_t v24;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  unsigned __int8 *v31;
  uint64_t v32;
  uint64_t *v33;
  uint64_t *v34;
  _QWORD *v35;

  v6 = **a1;
  std::recursive_mutex::lock(v6);
  v7 = *a1;
  if (*((_DWORD *)*a1 + 28) != 2)
    goto LABEL_23;
  v8 = (uint64_t *)v7[10];
  v9 = v7[12];
  v10 = (const void **)&v9->__m_.__opaque[8];
  v11 = v9->__m_.__opaque[31];
  v12 = *(_QWORD *)&v9->__m_.__opaque[16];
  if ((v11 & 0x80u) == 0)
    v13 = v9->__m_.__opaque[31];
  else
    v13 = *(_QWORD *)&v9->__m_.__opaque[16];
  v14 = *(_BYTE *)(a2 + 23);
  if (v14 >= 0)
    v15 = *(unsigned __int8 *)(a2 + 23);
  else
    v15 = *(_QWORD *)(a2 + 8);
  if (v14 >= 0)
    v16 = (unsigned __int8 *)a2;
  else
    v16 = *(unsigned __int8 **)a2;
  if (v13 == v15)
  {
    if ((v11 & 0x80) != 0)
    {
      v20 = (char *)*v10;
      v32 = a3;
      v22 = v8;
      v23 = memcmp(*v10, v16, *(_QWORD *)&v9->__m_.__opaque[16]);
      v8 = v22;
      a3 = v32;
      v21 = v12;
      if (!v23)
        goto LABEL_30;
      goto LABEL_21;
    }
    if (!v9->__m_.__opaque[31])
      goto LABEL_30;
    v17 = v16;
    v18 = &v9->__m_.__opaque[8];
    v19 = v9->__m_.__opaque[31];
    while (*v18 == *v17)
    {
      ++v18;
      ++v17;
      if (!--v19)
        goto LABEL_30;
    }
  }
  v20 = &v9->__m_.__opaque[8];
  v21 = v9->__m_.__opaque[31];
  if ((v11 & 0x80) != 0)
  {
    v20 = (char *)*v10;
    v21 = *(_QWORD *)&v9->__m_.__opaque[16];
  }
LABEL_21:
  if (v21 > (uint64_t)v15)
    goto LABEL_23;
  v33 = v8;
  if (memcmp(v16, v20, v21))
    goto LABEL_23;
  if ((v11 & 0x80) != 0)
  {
    v8 = v33;
    if (v15 <= v12)
      goto LABEL_23;
  }
  else
  {
    v12 = v11;
    v8 = v33;
    if (v15 <= v11)
      goto LABEL_23;
  }
  if (v16[v12] != 46)
    goto LABEL_23;
LABEL_30:
  v34 = v8;
  sub_20AEC17E0(&v34, a2, (uint64_t *)&v35);
  v26 = v35;
  if ((a3 & 0xFF00000000) != 0)
  {
    sub_20AEC3E28(v35, a3);
LABEL_48:
    v24 = 1;
    goto LABEL_24;
  }
  v27 = v9->__m_.__opaque[31];
  if ((v27 & 0x80u) == 0)
    v28 = v9->__m_.__opaque[31];
  else
    v28 = *(_QWORD *)&v9->__m_.__opaque[16];
  v29 = *(unsigned __int8 *)(a2 + 23);
  v30 = (char)v29;
  if ((v29 & 0x80u) != 0)
    v29 = *(_QWORD *)(a2 + 8);
  if (v28 != v29)
    goto LABEL_47;
  if (v30 >= 0)
    v31 = (unsigned __int8 *)a2;
  else
    v31 = *(unsigned __int8 **)a2;
  if ((v27 & 0x80) != 0)
  {
    if (!memcmp(*v10, v31, *(_QWORD *)&v9->__m_.__opaque[16]))
      goto LABEL_23;
LABEL_47:
    sub_20AEC4344(v26);
    goto LABEL_48;
  }
  if (v9->__m_.__opaque[31])
  {
    while (*(unsigned __int8 *)v10 == *v31)
    {
      v24 = 0;
      v10 = (const void **)((char *)v10 + 1);
      ++v31;
      if (!--v27)
        goto LABEL_24;
    }
    goto LABEL_47;
  }
LABEL_23:
  v24 = 0;
LABEL_24:
  std::recursive_mutex::unlock(v6);
  return v24;
}

void sub_20B0A6DB4(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A6DC8(std::recursive_mutex ***a1, uint64_t *a2)
{
  std::recursive_mutex *v4;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  uint64_t v14;
  std::__shared_weak_count *v15;

  v4 = **a1;
  std::recursive_mutex::lock(v4);
  if (*((_DWORD *)*a1 + 28) == 2)
  {
    v5 = (uint64_t)(*a1)[12];
    v6 = (std::__shared_weak_count *)a2[1];
    v14 = *a2;
    v15 = v6;
    if (v6)
    {
      p_shared_owners = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = sub_20AEC325C(v5, &v14);
    v10 = v15;
    if (v15)
    {
      v11 = (unint64_t *)&v15->__shared_owners_;
      do
        v12 = __ldaxr(v11);
      while (__stlxr(v12 - 1, v11));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    v9 = 0;
  }
  std::recursive_mutex::unlock(v4);
  return v9;
}

void sub_20B0A6E94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::recursive_mutex *v9;

  sub_20AEC147C((uint64_t)&a9);
  std::recursive_mutex::unlock(v9);
  _Unwind_Resume(a1);
}

void sub_20B0A6EB0(std::recursive_mutex ***a1@<X0>, _QWORD *a2@<X8>)
{
  std::recursive_mutex *v4;
  char *v5;
  char *v6;
  void *v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  void *__p;
  char *v12;

  v4 = **a1;
  std::recursive_mutex::lock(v4);
  if (*((_DWORD *)*a1 + 28) == 2)
  {
    sub_20AEC3A20((uint64_t)(*a1)[12], &__p);
    sub_20B0A72AC(a2, (char *)__p, v12);
    v5 = (char *)__p;
    if (__p)
    {
      v6 = v12;
      v7 = __p;
      if (v12 != __p)
      {
        do
        {
          v8 = (std::__shared_weak_count *)*((_QWORD *)v6 - 1);
          if (v8)
          {
            p_shared_owners = (unint64_t *)&v8->__shared_owners_;
            do
              v10 = __ldaxr(p_shared_owners);
            while (__stlxr(v10 - 1, p_shared_owners));
            if (!v10)
            {
              ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
              std::__shared_weak_count::__release_weak(v8);
            }
          }
          v6 -= 16;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v12 = v5;
      operator delete(v7);
    }
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
  }
  std::recursive_mutex::unlock(v4);
}

void sub_20B0A6F9C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  std::recursive_mutex *v2;
  va_list va;

  va_start(va, a2);
  sub_20AEC3C38((void **)va);
  std::recursive_mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_20B0A6FB8(_Unwind_Exception *a1)
{
  std::recursive_mutex *v1;

  std::recursive_mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A6FCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  uint64_t v3;
  uint64_t v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;

  std::mutex::~mutex((std::mutex *)(a1 + 216));
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  v3 = *(_QWORD *)(a1 + 176);
  if (v3)
  {
    v4 = *(_QWORD *)(a1 + 184);
    v5 = *(void **)(a1 + 176);
    if (v4 != v3)
    {
      do
      {
        v6 = *(std::__shared_weak_count **)(v4 - 8);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *(void **)(a1 + 176);
    }
    *(_QWORD *)(a1 + 184) = v3;
    operator delete(v5);
  }
  v9 = *(_QWORD *)(a1 + 152);
  if (v9)
  {
    v10 = *(_QWORD *)(a1 + 160);
    v11 = *(void **)(a1 + 152);
    if (v10 != v9)
    {
      do
      {
        v12 = *(std::__shared_weak_count **)(v10 - 8);
        if (v12)
        {
          v13 = (unint64_t *)&v12->__shared_owners_;
          do
            v14 = __ldaxr(v13);
          while (__stlxr(v14 - 1, v13));
          if (!v14)
          {
            ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
            std::__shared_weak_count::__release_weak(v12);
          }
        }
        v10 -= 16;
      }
      while (v10 != v9);
      v11 = *(void **)(a1 + 152);
    }
    *(_QWORD *)(a1 + 160) = v9;
    operator delete(v11);
  }
  v15 = *(_QWORD **)(a1 + 72);
  if (v15 == (_QWORD *)(a1 + 48))
  {
    v16 = 4;
    v15 = (_QWORD *)(a1 + 48);
  }
  else
  {
    if (!v15)
      goto LABEL_30;
    v16 = 5;
  }
  (*(void (**)(void))(*v15 + 8 * v16))();
LABEL_30:
  v17 = *(_QWORD **)(a1 + 40);
  if (v17 == (_QWORD *)(a1 + 16))
  {
    v18 = 4;
    v17 = (_QWORD *)(a1 + 16);
    goto LABEL_34;
  }
  if (v17)
  {
    v18 = 5;
LABEL_34:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  v19 = *(std::__shared_weak_count **)(a1 + 8);
  if (!v19)
    return a1;
  v20 = (unint64_t *)&v19->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
    return a1;
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  return a1;
}

void **sub_20B0A7194(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      sub_20B0A7194(v3 - 3);
      if (*((char *)v3 - 33) < 0)
      {
        operator delete(*(v3 - 7));
        if (*((char *)v3 - 57) < 0)
LABEL_9:
          operator delete(*(v3 - 10));
      }
      else if (*((char *)v3 - 57) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 10;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_20B0A7228(uint64_t **a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t i;
  _QWORD *v5;
  uint64_t *v6;
  uint64_t *v7;
  _QWORD *v8;

  v2 = *(_QWORD *)(a2 + 56);
  for (i = *(_QWORD *)(a2 + 64); v2 != i; v2 += 80)
  {
    v6 = *a1;
    sub_20B0A7228(&v6, v2);
    v7 = *a1;
    sub_20AEC4B5C(&v7, v2, (uint64_t *)&v8);
    v5 = v8;
    sub_20AEC4344(v8);
    sub_20AEC3978((uint64_t)v5);
  }
}

_QWORD *sub_20B0A72AC(_QWORD *a1, char *a2, char *a3)
{
  uint64_t v4;
  char *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v4 = a3 - a2;
  if (a3 != a2)
  {
    if (v4 < 0)
      sub_20AEC60B8();
    v6 = a2;
    v7 = operator new(a3 - a2);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[2 * (v4 >> 4)];
    while (v6 != a3)
    {
      v8 = *((_QWORD *)v6 + 1);
      *v7 = *(_QWORD *)v6;
      v7[1] = v8;
      if (v8)
      {
        v9 = (unint64_t *)(v8 + 8);
        do
          v10 = __ldxr(v9);
        while (__stxr(v10 + 1, v9));
      }
      v6 += 16;
      v7 += 2;
    }
    a1[1] = v7;
  }
  return a1;
}

void sub_20B0A7358(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v3;
  char *v4;
  void *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;

  v3 = (char *)*v1;
  if (*v1)
  {
    v4 = (char *)v1[1];
    v5 = *v1;
    if (v4 != v3)
    {
      do
      {
        v6 = (std::__shared_weak_count *)*((_QWORD *)v4 - 1);
        if (v6)
        {
          p_shared_owners = (unint64_t *)&v6->__shared_owners_;
          do
            v8 = __ldaxr(p_shared_owners);
          while (__stlxr(v8 - 1, p_shared_owners));
          if (!v8)
          {
            ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
            std::__shared_weak_count::__release_weak(v6);
          }
        }
        v4 -= 16;
      }
      while (v4 != v3);
      v5 = *v1;
    }
    v1[1] = v3;
    operator delete(v5);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0A73D4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40C0E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B0A73E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40C0E8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0A7414(uint64_t a1)
{
  std::recursive_mutex::~recursive_mutex((std::recursive_mutex *)(a1 + 24));
}

void sub_20B0A7420(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40C138;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B0A7430(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40C138;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A7460(uint64_t a1)
{
  return sub_20B0B06BC((_QWORD *)(a1 + 24));
}

void sub_20B0A7470()
{
  JUMPOUT(0x20BD3583CLL);
}

_BYTE *sub_20B0A7484(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C40C188;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_20B0A74BC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C40C188;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

void sub_20B0A74DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  std::mutex *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  std::__shared_weak_count *v7;
  std::__shared_weak_count *v8;
  _QWORD *v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_weak_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22[2];
  _QWORD *v23;
  std::__shared_weak_count *v24;

  v2 = *a2;
  if (*(unsigned __int8 *)(a1 + 8) - 1 <= 1)
  {
    sub_20B0A53E8(v22);
    v3 = *(_QWORD *)v22[0];
    v4 = (std::mutex *)(*(_QWORD *)v22[0] + 216);
    std::mutex::lock(v4);
    v5 = *(std::__shared_weak_count **)(v3 + 208);
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      v7 = v6;
      if (v6 && *(_QWORD *)(v3 + 200))
      {
        v23 = *(_QWORD **)(v3 + 200);
        v24 = v6;
LABEL_21:
        std::mutex::unlock(v4);
        sub_20AEC325C(v2, &v23);
        v19 = v24;
        if (v24)
        {
          p_shared_owners = (unint64_t *)&v24->__shared_owners_;
          do
            v21 = __ldaxr(p_shared_owners);
          while (__stlxr(v21 - 1, p_shared_owners));
          if (!v21)
          {
            ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
            std::__shared_weak_count::__release_weak(v19);
          }
        }
        sub_20B0A5250((uint64_t)v22);
        return;
      }
    }
    else
    {
      v7 = 0;
    }
    v13 = (std::__shared_weak_count *)operator new(0x48uLL);
    v13->__shared_owners_ = 0;
    v13->__shared_weak_owners_ = 0;
    v13->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40C138;
    sub_20B0AFF98(&v13[1].__vftable, 1);
    p_shared_weak_owners = (unint64_t *)&v13->__shared_weak_owners_;
    do
      v15 = __ldxr(p_shared_weak_owners);
    while (__stxr(v15 + 1, p_shared_weak_owners));
    v16 = *(std::__shared_weak_count **)(v3 + 208);
    *(_QWORD *)(v3 + 200) = v13 + 1;
    *(_QWORD *)(v3 + 208) = v13;
    if (v16)
      std::__shared_weak_count::__release_weak(v16);
    v23 = &v13[1].__vftable;
    v24 = v13;
    if (v7)
    {
      v17 = (unint64_t *)&v7->__shared_owners_;
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
        std::__shared_weak_count::__release_weak(v7);
      }
    }
    goto LABEL_21;
  }
  v8 = (std::__shared_weak_count *)operator new(0x48uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40C138;
  sub_20B0AFF98(&v8[1].__vftable, 0);
  v23 = v9;
  v24 = v8;
  sub_20AEC325C(v2, &v23);
  v10 = v24;
  if (v24)
  {
    v11 = (unint64_t *)&v24->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
}

void sub_20B0A76DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  std::mutex *v12;
  std::__shared_weak_count *v13;
  std::__shared_weak_count *v14;
  void *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;

  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v16);
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v18 = __ldaxr(p_shared_owners);
    while (__stlxr(v18 - 1, p_shared_owners));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
      std::__shared_weak_count::__release_weak(v13);
    }
  }
  std::mutex::unlock(v12);
  sub_20B0A5250((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A77E4(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn4elog10APILogging20DefaultSetupFunctionE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn4elog10APILogging20DefaultSetupFunctionE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn4elog10APILogging20DefaultSetupFunctionE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn4elog10APILogging20DefaultSetupFunctionE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B0A7850()
{
  return &unk_24C40C1F8;
}

void sub_20B0A7860()
{
  JUMPOUT(0x20BD3583CLL);
}

_BYTE *sub_20B0A7874(uint64_t a1)
{
  _BYTE *result;

  result = operator new(0x10uLL);
  *(_QWORD *)result = &off_24C40C218;
  result[8] = *(_BYTE *)(a1 + 8);
  return result;
}

uint64_t sub_20B0A78AC(uint64_t result, uint64_t a2)
{
  *(_QWORD *)a2 = &off_24C40C218;
  *(_BYTE *)(a2 + 8) = *(_BYTE *)(result + 8);
  return result;
}

uint64_t sub_20B0A78D0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3esn4elog10APILogging28DefaultInternalSetupFunctionE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3esn4elog10APILogging28DefaultInternalSetupFunctionE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3esn4elog10APILogging28DefaultInternalSetupFunctionE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3esn4elog10APILogging28DefaultInternalSetupFunctionE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B0A793C()
{
  return &unk_24C40C278;
}

void sub_20B0A794C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A7970(uint64_t result)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = *(uint64_t **)(result + 24);
  if (v1)
  {
    sub_20B0A5324(*(uint64_t **)(result + 24));
    v2 = *v1;
    *v1 = 0;
    if (v2)
    {
      v3 = sub_20B0A6FCC(v2);
      MEMORY[0x20BD3583C](v3, 0x1060C406F83F42DLL);
    }
    JUMPOUT(0x20BD3583CLL);
  }
  return result;
}

uint64_t sub_20B0A79E0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE")
    return a1 + 24;
  if (((v3 & (unint64_t)"NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"NSt3__110shared_ptrIN4cv3d3esn4elog10APILoggingEE27__shared_ptr_default_deleteIS4_S4_EE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 24;
  return 0;
}

void sub_20B0A7A50(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;

  v2 = atomic_load((unsigned __int8 *)&qword_25463CD80);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_25463CD80))
  {
    *a1 = qword_25463CD78;
  }
  else
  {
    sub_20AEBFFE4(&qword_25463CD78);
    __cxa_guard_release(&qword_25463CD80);
    *a1 = qword_25463CD78;
  }
}

void sub_20B0A7AC8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463CD80);
  _Unwind_Resume(a1);
}

void sub_20B0A7AE0(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25463CD90);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463CD90))
  {
    sub_20B0A7A50(&v5);
    sub_20AEC0D64(__p, "cv3d");
    sub_20AEC4B5C(&v5, (uint64_t)__p, &qword_25463CD88);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_25463CD90);
  }
  *a1 = qword_25463CD88;
}

void sub_20B0A7B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25463CD90);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25463CD90);
  _Unwind_Resume(a1);
}

void sub_20B0A7BD4(_QWORD *a1@<X8>)
{
  unsigned __int8 v2;
  void *__p[2];
  char v4;
  uint64_t *v5;

  v2 = atomic_load((unsigned __int8 *)&qword_25463CDA0);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463CDA0))
  {
    sub_20B0A7A50(&v5);
    sub_20AEC0D64(__p, "cv3dapi");
    sub_20AEC4B5C(&v5, (uint64_t)__p, &qword_25463CD98);
    if (v4 < 0)
      operator delete(__p[0]);
    __cxa_guard_release(&qword_25463CDA0);
  }
  *a1 = qword_25463CD98;
}

void sub_20B0A7C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_25463CDA0);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_25463CDA0);
  _Unwind_Resume(a1);
}

void sub_20B0A7CC8(std::locale *this)
{
  std::locale::__imp *locale;
  unint64_t *v3;
  unint64_t v4;

  locale = this[6].__locale_;
  if (!locale)
    goto LABEL_5;
  v3 = (unint64_t *)((char *)locale + 8);
  do
    v4 = __ldaxr(v3);
  while (__stlxr(v4 - 1, v3));
  if (!v4)
  {
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 16))(locale);
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)locale);
    std::locale::~locale(this);
  }
  else
  {
LABEL_5:
    std::locale::~locale(this);
  }
}

_QWORD *sub_20B0A7D30(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)a1[1];
  *a1 = &off_24C40C2E8;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2[1];
    *v2 = &off_24C40CA70;
    v2[1] = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = v2[1];
      v2[1] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    MEMORY[0x20BD3583C](v2, 0xA1C40BD48D6D6);
  }
  return a1;
}

_QWORD *sub_20B0A7DB4(_QWORD *a1)
{
  _QWORD *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (_QWORD *)a1[1];
  *a1 = &off_24C40C2E8;
  a1[1] = 0;
  if (v2)
  {
    v3 = v2[1];
    *v2 = &off_24C40CA70;
    v2[1] = 0;
    if (v3)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
      v4 = v2[1];
      v2[1] = 0;
      if (v4)
        (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    }
    MEMORY[0x20BD3583C](v2, 0xA1C40BD48D6D6);
  }
  return a1;
}

void sub_20B0A7E38(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  uint64_t v3;

  v1 = (_QWORD *)a1[1];
  *a1 = &off_24C40C2E8;
  a1[1] = 0;
  if (v1)
  {
    v2 = v1[1];
    *v1 = &off_24C40CA70;
    v1[1] = 0;
    if (v2)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
      v3 = v1[1];
      v1[1] = 0;
      if (v3)
        (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    }
    MEMORY[0x20BD3583C](v1, 0xA1C40BD48D6D6);
  }
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B0A7ECC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_24C40CA70;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[1];
    a1[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

void sub_20B0A7F24(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_24C40CA70;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[1];
    a1[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A7F8C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B0A7F9C(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B0A7FAC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B0A7FBC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
}

uint64_t sub_20B0A7FCC(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
}

void sub_20B0A7FDC()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 17);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0A8014(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0A8028()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 14);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0A8060(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0A8078()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0A808C(uint64_t a1, _DWORD *a2)
{
  *a2 = -1000;
}

void sub_20B0A80A4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A80C8(uint64_t a1)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t sub_20B0A80E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if (v3 == 0x800000020B5E44A1)
    return a1 + 24;
  if (((v3 & 0x800000020B5E44A1 & 0x8000000000000000) != 0) == __OFSUB__(v3, 0x800000020B5E44A1))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020B5E44A1 & 0x7FFFFFFFFFFFFFFFLL)))
    return a1 + 24;
  return 0;
}

_QWORD *sub_20B0A8160(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C40C438;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B0A81A4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C40C438;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A81F8(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20B0A820C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C40C438;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B0A8250(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C40C438;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A82A4(uint64_t a1)
{
  const std::locale *v2;

  v2 = (const std::locale *)MEMORY[0x20BD3568C]();
  *(_QWORD *)(a1 + 8) = std::locale::use_facet(v2, MEMORY[0x24BEDB350]);
  *(_QWORD *)(a1 + 16) = std::locale::use_facet((const std::locale *)a1, MEMORY[0x24BEDB4B0]);
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_QWORD *)(a1 + 56) = 0;
  return a1;
}

void sub_20B0A82FC(_Unwind_Exception *a1)
{
  std::locale *v1;

  std::locale::~locale(v1);
  _Unwind_Resume(a1);
}

std::locale *sub_20B0A8310(uint64_t a1, uint64_t a2, char a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  std::locale *result;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  v8 = operator new();
  v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  *(_QWORD *)v8 = &unk_24C40C540;
  *(_QWORD *)(v8 + 8) = v9;
  result = std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a2);
  *(_OWORD *)(v8 + 24) = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(v8 + 40) = *(_OWORD *)(a2 + 24);
  v11 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(v8 + 56) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v8 + 64) = v11;
  if (v11)
  {
    v12 = (unint64_t *)(v11 + 8);
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  *(_QWORD *)(v8 + 72) = *(_QWORD *)(a2 + 56);
  *(_DWORD *)(v8 + 80) = a4;
  *(_BYTE *)(v8 + 84) = a3;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_20B0A83D8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 6);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0A8410(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0A8424(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C40C438;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B0A8468(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C40C438;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A84BC(uint64_t result, uint64_t a2)
{
  int v2;

  if (!*(_BYTE *)(a2 + 92))
  {
    if (!*(_BYTE *)(result + 16))
      goto LABEL_12;
    v2 = *(unsigned __int8 *)(*(_QWORD *)(a2 + 16) - 1);
    if (v2 != 13 && v2 != 10)
      goto LABEL_12;
LABEL_11:
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
    return result;
  }
  if (*(_QWORD *)(a2 + 16) == *(_QWORD *)(a2 + 8) && (*(_BYTE *)(a2 + 88) & 1) == 0)
    goto LABEL_11;
LABEL_12:
  *(_DWORD *)a2 = -993;
  *(_QWORD *)(a2 + 80) = 0;
  return result;
}

_QWORD *sub_20B0A851C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C40C438;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B0A8560(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C40C438;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A85B4(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  int v3;
  BOOL v4;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) && (*(_BYTE *)(a2 + 88) & 2) == 0
    || *(_BYTE *)(result + 16) && ((v3 = *v2, v3 != 13) ? (v4 = v3 == 10) : (v4 = 1), v4))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

std::locale *sub_20B0A8604(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C4F8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20B0A865C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C4F8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A86C4(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v2 = *(unsigned __int8 **)(a2 + 8);
  v3 = *(unsigned __int8 **)(a2 + 24);
  if (v2 == v3)
    goto LABEL_19;
  v4 = *(unsigned __int8 **)(a2 + 16);
  if (v4 != v3)
  {
    if (v4 == v2)
    {
      v5 = *(_DWORD *)(a2 + 88);
      if ((v5 & 0x80) == 0)
      {
        if ((v5 & 4) == 0)
        {
          v6 = *v2;
          if (v6 == 95)
            goto LABEL_17;
          goto LABEL_15;
        }
        goto LABEL_19;
      }
    }
    v7 = *(v4 - 1);
    v8 = *v4;
    if (v7 == 95
      || (v7 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v7) & 0x500) != 0)
    {
      v9 = 1;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    else
    {
      v9 = 0;
      if ((_DWORD)v8 == 95)
        goto LABEL_24;
    }
    if ((v8 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v8) & 0x500) == 0)
    {
      if (*(_BYTE *)(result + 40) == (v9 != 0))
        goto LABEL_20;
      goto LABEL_27;
    }
LABEL_24:
    if (*(_BYTE *)(result + 40) != (v9 != 1))
      goto LABEL_27;
    goto LABEL_20;
  }
  if ((*(_BYTE *)(a2 + 88) & 8) == 0)
  {
    v6 = *(v3 - 1);
    if (v6 == 95)
      goto LABEL_17;
LABEL_15:
    if ((v6 & 0x80) == 0 && (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(result + 24) + 16) + 4 * v6) & 0x500) != 0)
    {
LABEL_17:
      if (*(_BYTE *)(result + 40) != 1)
        goto LABEL_27;
LABEL_20:
      *(_DWORD *)a2 = -993;
      *(_QWORD *)(a2 + 80) = 0;
      return result;
    }
  }
LABEL_19:
  if (!*(_BYTE *)(result + 40))
    goto LABEL_20;
LABEL_27:
  v10 = *(_QWORD *)(result + 8);
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = v10;
  return result;
}

std::locale *sub_20B0A8818(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C540;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  return a1;
}

void sub_20B0A88B8(std::locale *a1)
{
  std::locale *v2;
  std::__shared_weak_count *locale;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::locale::__imp *v6;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C540;
  v2 = a1 + 2;
  locale = (std::__shared_weak_count *)a1[8].__locale_;
  if (locale)
  {
    p_shared_owners = (unint64_t *)&locale->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))locale->__on_zero_shared)(locale);
      std::__shared_weak_count::__release_weak(locale);
    }
  }
  std::locale::~locale(v2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  v6 = a1[1].__locale_;
  if (v6)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v6 + 8))(v6);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0A8968(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  char v9;
  char *v10;
  unint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t v17;
  void *__p;
  char *v19;
  uint64_t v20;
  __int128 v21;
  char v22;
  uint64_t v23;
  uint64_t v24;
  char v25;
  __int128 v26;
  char v27;
  char v28;
  uint64_t v29;

  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0uLL;
  v27 = 0;
  v28 = 0;
  v29 = 0;
  __p = 0;
  v19 = 0;
  v4 = (*(_DWORD *)(a1 + 44) + 1);
  v6 = *(_QWORD *)(a2 + 16);
  v5 = *(_QWORD *)(a2 + 24);
  v20 = 0;
  *(_QWORD *)&v21 = v5;
  *((_QWORD *)&v21 + 1) = v5;
  v22 = 0;
  sub_20B0A8F64((uint64_t)&__p, v4, &v21);
  v23 = v6;
  v24 = v6;
  v25 = 0;
  v26 = v21;
  v27 = v22;
  v29 = v6;
  v28 = 1;
  v7 = *(_QWORD *)(a2 + 16);
  if (*(_BYTE *)(a2 + 92))
    v8 = v7 == *(_QWORD *)(a2 + 8);
  else
    v8 = 0;
  v9 = v8;
  if (*(unsigned __int8 *)(a1 + 84) == sub_20B0A8AF0(a1 + 16, v7, *(_QWORD *)(a2 + 24), (uint64_t *)&__p, *(_DWORD *)(a2 + 88) & 0xFBF | 0x40u, v9))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    v10 = (char *)__p;
    goto LABEL_13;
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 8);
  v10 = (char *)__p;
  v11 = 0xAAAAAAAAAAAAAAABLL * ((v19 - (_BYTE *)__p) >> 3);
  if (v11 < 2)
  {
LABEL_13:
    if (!v10)
      return;
    goto LABEL_14;
  }
  v12 = 0;
  v13 = *(_DWORD *)(a1 + 80);
  v14 = *(_QWORD *)(a2 + 32);
  v15 = 1;
  do
  {
    v16 = &v10[24 * v15];
    v17 = v14 + 24 * (v13 + v12);
    *(_OWORD *)v17 = *(_OWORD *)v16;
    *(_BYTE *)(v17 + 16) = v16[16];
    v15 = (v12 + 2);
    ++v12;
  }
  while (v11 > v15);
LABEL_14:
  v19 = v10;
  operator delete(v10);
}

void sub_20B0A8AD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0A8AF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unsigned int v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  void *v25;
  void *v26;
  char *v27;
  __int128 v28;
  uint64_t v29;
  char *v30;
  char *v31;
  void *v32;
  void *v33;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  _BYTE *v39;
  unsigned int v40;
  uint64_t v41;
  char v42;
  _BYTE v44[56];
  void *__p[2];
  _QWORD v46[3];
  __int128 v47;
  char v48;
  char *v49;
  char *v50;
  unint64_t v51;

  v49 = 0;
  v50 = 0;
  v51 = 0;
  v6 = *(_QWORD *)(a1 + 40);
  if (v6)
  {
    *(_QWORD *)&v47 = a3;
    *((_QWORD *)&v47 + 1) = a3;
    v48 = 0;
    *(_DWORD *)v44 = 0;
    memset(&v44[8], 0, 48);
    *(_OWORD *)__p = 0u;
    memset(v46, 0, 21);
    v50 = sub_20B0A9268((void **)&v49, (uint64_t)v44);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    if (*(_QWORD *)&v44[32])
    {
      *(_QWORD *)&v44[40] = *(_QWORD *)&v44[32];
      operator delete(*(void **)&v44[32]);
    }
    v13 = v50;
    *((_DWORD *)v50 - 24) = 0;
    *((_QWORD *)v13 - 11) = a2;
    *((_QWORD *)v13 - 10) = a2;
    *((_QWORD *)v13 - 9) = a3;
    v14 = *((_QWORD *)v13 - 8);
    v15 = *(unsigned int *)(a1 + 28);
    v16 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v13 - 7) - v14) >> 3);
    if (v15 <= v16)
    {
      if (v15 < v16)
        *((_QWORD *)v13 - 7) = v14 + 24 * v15;
    }
    else
    {
      sub_20B0A9438((void **)v13 - 8, v15 - v16, &v47);
      v13 = v50;
    }
    v17 = *((_QWORD *)v13 - 5);
    v18 = *(unsigned int *)(a1 + 32);
    v19 = (*((_QWORD *)v13 - 4) - v17) >> 4;
    if (v18 <= v19)
    {
      if (v18 < v19)
        *((_QWORD *)v13 - 4) = v17 + 16 * v18;
    }
    else
    {
      sub_20B0A95D8((char **)v13 - 5, v18 - v19);
      v13 = v50;
    }
    *((_QWORD *)v13 - 2) = v6;
    *((_DWORD *)v13 - 2) = a5;
    *(v13 - 4) = a6;
    v20 = 1;
    while (2)
    {
      if ((v20 & 0xFFF) == 0 && (int)(v20 >> 12) >= (int)a3 - (int)a2)
        sub_20B0A9150();
      v22 = *((_QWORD *)v13 - 2);
      if (v22)
        (*(void (**)(uint64_t, char *))(*(_QWORD *)v22 + 16))(v22, v13 - 96);
      switch(*((_DWORD *)v13 - 24))
      {
        case 0xFFFFFC18:
          v23 = *((_QWORD *)v13 - 10);
          if ((a5 & 0x20) != 0 && v23 == a2 || (a5 & 0x1000) != 0 && v23 != a3)
            goto LABEL_26;
          v35 = *a4;
          *(_QWORD *)v35 = a2;
          *(_QWORD *)(v35 + 8) = v23;
          *(_BYTE *)(v35 + 16) = 1;
          v36 = *((_QWORD *)v13 - 8);
          v37 = *((_QWORD *)v13 - 7) - v36;
          if (v37)
          {
            v38 = 0xAAAAAAAAAAAAAAABLL * (v37 >> 3);
            v39 = (_BYTE *)(v36 + 16);
            v40 = 1;
            do
            {
              v41 = v35 + 24 * v40;
              *(_OWORD *)v41 = *((_OWORD *)v39 - 1);
              v42 = *v39;
              v39 += 24;
              *(_BYTE *)(v41 + 16) = v42;
            }
            while (v38 > v40++);
          }
          v6 = 1;
          v21 = v49;
          if (!v49)
            return v6;
          goto LABEL_37;
        case 0xFFFFFC1D:
        case 0xFFFFFC1E:
        case 0xFFFFFC21:
          goto LABEL_16;
        case 0xFFFFFC1F:
LABEL_26:
          v24 = v50;
          v25 = (void *)*((_QWORD *)v50 - 5);
          if (v25)
          {
            *((_QWORD *)v50 - 4) = v25;
            operator delete(v25);
          }
          v26 = (void *)*((_QWORD *)v24 - 8);
          if (v26)
          {
            *((_QWORD *)v24 - 7) = v26;
            operator delete(v26);
          }
          v50 = v24 - 96;
          goto LABEL_16;
        case 0xFFFFFC20:
          sub_20B0A9700((uint64_t)v44, (__int128 *)v13 - 6);
          (*(void (**)(_QWORD, uint64_t, char *))(**((_QWORD **)v13 - 2) + 24))(*((_QWORD *)v13 - 2), 1, v13 - 96);
          (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v46[1] + 24))(v46[1], 0, v44);
          v27 = v50;
          if ((unint64_t)v50 >= v51)
          {
            v50 = sub_20B0A9268((void **)&v49, (uint64_t)v44);
            if (__p[0])
            {
              __p[1] = __p[0];
              operator delete(__p[0]);
            }
          }
          else
          {
            v28 = *(_OWORD *)&v44[16];
            *(_OWORD *)v50 = *(_OWORD *)v44;
            *((_OWORD *)v27 + 1) = v28;
            *((_QWORD *)v27 + 4) = 0;
            *((_QWORD *)v27 + 5) = 0;
            *((_QWORD *)v27 + 6) = 0;
            *((_QWORD *)v27 + 7) = 0;
            *((_OWORD *)v27 + 2) = *(_OWORD *)&v44[32];
            *((_QWORD *)v27 + 6) = *(_QWORD *)&v44[48];
            memset(&v44[32], 0, 24);
            *((_QWORD *)v27 + 8) = 0;
            *((_QWORD *)v27 + 9) = 0;
            *(_OWORD *)(v27 + 56) = *(_OWORD *)__p;
            *((_QWORD *)v27 + 9) = v46[0];
            __p[0] = 0;
            __p[1] = 0;
            v46[0] = 0;
            v29 = v46[1];
            *(_QWORD *)(v27 + 85) = *(_QWORD *)((char *)&v46[1] + 5);
            *((_QWORD *)v27 + 10) = v29;
            v50 = v27 + 96;
          }
          if (*(_QWORD *)&v44[32])
          {
            *(_QWORD *)&v44[40] = *(_QWORD *)&v44[32];
            operator delete(*(void **)&v44[32]);
          }
LABEL_16:
          v21 = v49;
          v13 = v50;
          ++v20;
          if (v49 != v50)
            continue;
          v6 = 0;
          if (v49)
          {
LABEL_37:
            v30 = v50;
            v31 = v21;
            if (v50 != v21)
            {
              do
              {
                v32 = (void *)*((_QWORD *)v30 - 5);
                if (v32)
                {
                  *((_QWORD *)v30 - 4) = v32;
                  operator delete(v32);
                }
                v33 = (void *)*((_QWORD *)v30 - 8);
                if (v33)
                {
                  *((_QWORD *)v30 - 7) = v33;
                  operator delete(v33);
                }
                v30 -= 96;
              }
              while (v30 != v21);
              v31 = v49;
            }
            v50 = v21;
            operator delete(v31);
          }
          break;
        default:
          sub_20B0A919C();
      }
      break;
    }
  }
  return v6;
}

void sub_20B0A8EE0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B0A91E8((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20B0A8EF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  uint64_t v4;
  va_list va;

  va_start(va, a4);
  sub_20B0A9110((uint64_t *)va);
  sub_20B0A91E8((void **)(v4 - 112));
  _Unwind_Resume(a1);
}

void sub_20B0A8F3C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B0A91E8((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

void sub_20B0A8F50(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B0A91E8((void **)(v1 - 112));
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0A8F64(uint64_t a1, unint64_t a2, __int128 *a3)
{
  uint64_t v6;
  _QWORD *result;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v20;

  v6 = *(_QWORD *)(a1 + 16);
  result = *(_QWORD **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - (uint64_t)result) >> 3) < a2)
  {
    if (result)
    {
      *(_QWORD *)(a1 + 8) = result;
      operator delete(result);
      v6 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (a2 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v6 >> 3);
    v9 = 2 * v8;
    if (2 * v8 <= a2)
      v9 = a2;
    v10 = v8 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v9;
    if (v10 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      sub_20B0A90FC();
    v11 = 3 * v10;
    result = operator new(24 * v10);
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = &result[v11];
    v12 = 24 * a2;
    v13 = &result[3 * a2];
    do
    {
      *(_OWORD *)result = *a3;
      result[2] = *((_QWORD *)a3 + 2);
      result += 3;
      v12 -= 24;
    }
    while (v12);
    goto LABEL_25;
  }
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (v14 - (uint64_t)result) / 24;
  if (v15 >= a2)
    v16 = a2;
  else
    v16 = (v14 - (uint64_t)result) / 24;
  if (v16)
  {
    v17 = result;
    do
    {
      *(_OWORD *)v17 = *a3;
      *((_BYTE *)v17 + 16) = *((_BYTE *)a3 + 16);
      v17 += 3;
      --v16;
    }
    while (v16);
  }
  if (a2 <= v15)
  {
    v13 = &result[3 * a2];
LABEL_25:
    *(_QWORD *)(a1 + 8) = v13;
    return result;
  }
  v18 = v14 + 24 * (a2 - v15);
  v19 = 24 * a2 - 24 * v15;
  do
  {
    v20 = *a3;
    *(_QWORD *)(v14 + 16) = *((_QWORD *)a3 + 2);
    *(_OWORD *)v14 = v20;
    v14 += 24;
    v19 -= 24;
  }
  while (v19);
  *(_QWORD *)(a1 + 8) = v18;
  return result;
}

void sub_20B0A90FC()
{
  sub_20AEC014C("vector");
}

_QWORD *sub_20B0A9110(_QWORD *a1)
{
  void *v2;
  void *v3;

  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_20B0A9150()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 12);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0A9188(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0A919C()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 16);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0A91D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void **sub_20B0A91E8(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  void *v5;
  void *v6;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (void *)*((_QWORD *)v3 - 5);
        if (v5)
        {
          *((_QWORD *)v3 - 4) = v5;
          operator delete(v5);
        }
        v6 = (void *)*((_QWORD *)v3 - 8);
        if (v6)
        {
          *((_QWORD *)v3 - 7) = v6;
          operator delete(v6);
        }
        v3 -= 96;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

char *sub_20B0A9268(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  __int128 v8;
  char *v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  __int128 v19;
  uint64_t v20;
  char *v21;
  void *v22;
  void *v23;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_20B0A90FC();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = (char *)operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = *(_OWORD *)(a2 + 16);
  v9 = &v7[96 * v3];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v8;
  v10 = &v7[96 * v6];
  *((_OWORD *)v9 + 2) = *(_OWORD *)(a2 + 32);
  *((_QWORD *)v9 + 6) = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  *(_QWORD *)(v9 + 85) = *(_QWORD *)(a2 + 85);
  v11 = *(_QWORD *)(a2 + 72);
  v12 = *(_QWORD *)(a2 + 80);
  *((_QWORD *)v9 + 9) = 0;
  *((_QWORD *)v9 + 10) = v12;
  *(_OWORD *)(v9 + 56) = *(_OWORD *)(a2 + 56);
  *((_QWORD *)v9 + 9) = v11;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 48) = 0;
  *(_QWORD *)(a2 + 56) = 0;
  v13 = v9 + 96;
  v14 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 == *a1)
  {
    *a1 = v9;
    a1[1] = v13;
    a1[2] = v10;
  }
  else
  {
    v16 = 0;
    do
    {
      v17 = &v9[v16];
      v18 = &v15[v16];
      v19 = *(_OWORD *)&v15[v16 - 80];
      *((_OWORD *)v17 - 6) = *(_OWORD *)&v15[v16 - 96];
      *((_OWORD *)v17 - 5) = v19;
      *((_QWORD *)v17 - 7) = 0;
      *((_QWORD *)v17 - 6) = 0;
      *((_OWORD *)v17 - 4) = *(_OWORD *)&v15[v16 - 64];
      *((_QWORD *)v17 - 6) = *(_QWORD *)&v15[v16 - 48];
      *((_QWORD *)v18 - 8) = 0;
      *((_QWORD *)v18 - 7) = 0;
      *((_QWORD *)v18 - 6) = 0;
      *((_QWORD *)v17 - 4) = 0;
      *((_QWORD *)v17 - 3) = 0;
      *(_OWORD *)(v17 - 40) = *(_OWORD *)&v15[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v15[v16 - 24];
      *((_QWORD *)v18 - 5) = 0;
      *((_QWORD *)v18 - 4) = 0;
      *((_QWORD *)v18 - 3) = 0;
      v20 = *(_QWORD *)&v15[v16 - 16];
      *(_QWORD *)(v17 - 11) = *(_QWORD *)&v15[v16 - 11];
      *((_QWORD *)v17 - 2) = v20;
      v16 -= 96;
    }
    while (&v15[v16] != v14);
    v15 = (char *)*a1;
    v21 = (char *)a1[1];
    *a1 = &v9[v16];
    a1[1] = v13;
    a1[2] = v10;
    while (v21 != v15)
    {
      v22 = (void *)*((_QWORD *)v21 - 5);
      if (v22)
      {
        *((_QWORD *)v21 - 4) = v22;
        operator delete(v22);
      }
      v23 = (void *)*((_QWORD *)v21 - 8);
      if (v23)
      {
        *((_QWORD *)v21 - 7) = v23;
        operator delete(v23);
      }
      v21 -= 96;
    }
  }
  if (v15)
    operator delete(v15);
  return v13;
}

void sub_20B0A9438(void **a1, unint64_t a2, __int128 *a3)
{
  _BYTE *v6;
  char *v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  __int128 v15;
  char *v16;
  uint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  char *v21;
  __int128 v22;

  v7 = (char *)a1[1];
  v6 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) >= a2)
  {
    if (a2)
    {
      v13 = &v7[24 * a2];
      v14 = 24 * a2;
      do
      {
        v15 = *a3;
        *((_QWORD *)v7 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v7 = v15;
        v7 += 24;
        v14 -= 24;
      }
      while (v14);
      v7 = v13;
    }
    a1[1] = v7;
  }
  else
  {
    v8 = 0xAAAAAAAAAAAAAAABLL * ((v7 - (_BYTE *)*a1) >> 3);
    v9 = v8 + a2;
    if (v8 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20B0A90FC();
    v10 = 0xAAAAAAAAAAAAAAABLL * ((v6 - (_BYTE *)*a1) >> 3);
    if (2 * v10 > v9)
      v9 = 2 * v10;
    if (v10 >= 0x555555555555555)
      v11 = 0xAAAAAAAAAAAAAAALL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 > 0xAAAAAAAAAAAAAAALL)
        sub_20AEC60CC();
      v12 = (char *)operator new(24 * v11);
    }
    else
    {
      v12 = 0;
    }
    v16 = &v12[24 * v8];
    v17 = 24 * a2;
    v18 = &v16[24 * a2];
    v19 = v16;
    do
    {
      v20 = *a3;
      *((_QWORD *)v19 + 2) = *((_QWORD *)a3 + 2);
      *(_OWORD *)v19 = v20;
      v19 += 24;
      v17 -= 24;
    }
    while (v17);
    v21 = (char *)*a1;
    if (v7 != *a1)
    {
      do
      {
        v22 = *(_OWORD *)(v7 - 24);
        *((_QWORD *)v16 - 1) = *((_QWORD *)v7 - 1);
        *(_OWORD *)(v16 - 24) = v22;
        v16 -= 24;
        v7 -= 24;
      }
      while (v7 != v21);
      v7 = (char *)*a1;
    }
    *a1 = v16;
    a1[1] = v18;
    a1[2] = &v12[24 * v11];
    if (v7)
      operator delete(v7);
  }
}

void sub_20B0A95D8(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  size_t v14;
  char *v15;
  char *v16;

  v5 = a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    if (a2)
    {
      v12 = 16 * a2;
      bzero(a1[1], 16 * a2);
      v5 += v12;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = (v5 - *a1) >> 4;
    v8 = v7 + a2;
    if ((v7 + a2) >> 60)
      sub_20B0A90FC();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_20AEC60CC();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * v7];
    v14 = 16 * a2;
    v15 = &v11[16 * v10];
    bzero(v13, v14);
    v16 = &v13[v14];
    if (v5 != v6)
    {
      do
      {
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v13 -= 16;
        v5 -= 16;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v13;
    a1[1] = v16;
    a1[2] = v15;
    if (v5)
      operator delete(v5);
  }
}

uint64_t sub_20B0A9700(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  _BYTE *v6;
  _BYTE *v7;
  int64_t v8;
  char *v9;
  size_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  double *v31;
  const double *v32;
  uint64_t v33;
  const double *v34;
  double *v35;
  float64x2x2_t v36;
  float64x2x2_t v37;

  v4 = *a2;
  v5 = a2[1];
  *(_QWORD *)(a1 + 32) = 0;
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  v7 = (_BYTE *)*((_QWORD *)a2 + 4);
  v6 = (_BYTE *)*((_QWORD *)a2 + 5);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v8 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      sub_20B0A90FC();
    v9 = (char *)operator new(v8);
    *(_QWORD *)(a1 + 32) = v9;
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a1 + 48) = &v9[8 * (v8 >> 3)];
    v10 = 24 * ((v8 - 24) / 0x18uLL) + 24;
    memcpy(v9, v7, v10);
    *(_QWORD *)(a1 + 40) = &v9[v10];
  }
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v12 = (char *)*((_QWORD *)a2 + 7);
  v11 = (char *)*((_QWORD *)a2 + 8);
  v13 = v11 - v12;
  if (v11 != v12)
  {
    if (v13 < 0)
      sub_20B0A90FC();
    v14 = (char *)operator new(v11 - v12);
    *(_QWORD *)(a1 + 56) = v14;
    *(_QWORD *)(a1 + 64) = v14;
    *(_QWORD *)(a1 + 72) = &v14[16 * (v13 >> 4)];
    v15 = v13 - 16;
    if ((unint64_t)(v13 - 16) < 0xF0)
      goto LABEL_31;
    v21 = v15 & 0xFFFFFFFFFFFFFFF0 | 8;
    v22 = &v14[v21];
    v23 = &v12[v21];
    v24 = (v15 & 0xFFFFFFFFFFFFFFF0) + 16;
    v25 = v14 + 8 >= &v12[v24] || v12 + 8 >= &v14[v24];
    v26 = !v25;
    if (v12 < v22 && v14 < v23)
      goto LABEL_31;
    if (v26)
      goto LABEL_31;
    v28 = (v15 >> 4) + 1;
    v29 = 16 * (v28 & 0x1FFFFFFFFFFFFFFCLL);
    v30 = &v12[v29];
    v18 = &v14[v29];
    v31 = (double *)(v14 + 32);
    v32 = (const double *)(v12 + 32);
    v33 = v28 & 0x1FFFFFFFFFFFFFFCLL;
    do
    {
      v34 = v32 - 4;
      v36 = vld2q_f64(v34);
      v37 = vld2q_f64(v32);
      v35 = v31 - 4;
      vst2q_f64(v35, v36);
      vst2q_f64(v31, v37);
      v31 += 8;
      v32 += 8;
      v33 -= 4;
    }
    while (v33);
    v12 = v30;
    v14 = v18;
    if (v28 != (v28 & 0x1FFFFFFFFFFFFFFCLL))
    {
LABEL_31:
      do
      {
        v16 = *(_QWORD *)v12;
        v17 = *((_QWORD *)v12 + 1);
        v12 += 16;
        *(_QWORD *)v14 = v16;
        *((_QWORD *)v14 + 1) = v17;
        v14 += 16;
      }
      while (v12 != v11);
      v18 = v14;
    }
    *(_QWORD *)(a1 + 64) = v18;
  }
  v19 = *((_QWORD *)a2 + 10);
  *(_QWORD *)(a1 + 85) = *(_QWORD *)((char *)a2 + 85);
  *(_QWORD *)(a1 + 80) = v19;
  return a1;
}

void sub_20B0A98EC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void *v5;
  void *v6;

  v5 = *v3;
  if (*v3)
  {
    *(_QWORD *)(v1 + 64) = v5;
    operator delete(v5);
  }
  v6 = *v2;
  if (*v2)
  {
    *(_QWORD *)(v1 + 40) = v6;
    operator delete(v6);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0A9920()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 11);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0A9958(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0A996C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C40C438;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B0A99B0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C40C438;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0A9A04()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 3);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0A9A3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A9A50(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = operator new();
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &unk_24C40C5D0;
    *(_QWORD *)(v8 + 8) = v9;
    std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), a2);
    *(_BYTE *)(v8 + 40) = result;
LABEL_6:
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v8;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = operator new();
    v10 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
    *(_QWORD *)v8 = &unk_24C40C618;
    *(_QWORD *)(v8 + 8) = v10;
    result = (uint64_t)std::locale::locale((std::locale *)(v8 + 16), (const std::locale *)a1);
    *(_OWORD *)(v8 + 24) = *(_OWORD *)(a1 + 8);
    *(_BYTE *)(v8 + 40) = a2;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &unk_24C40C660;
  *(_QWORD *)(result + 8) = v7;
  *(_BYTE *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

void sub_20B0A9B84(_Unwind_Exception *a1)
{
  _QWORD *v1;
  std::locale *v2;
  uint64_t v4;

  std::locale::~locale(v2);
  *v1 = &unk_24C40C438;
  v4 = v1[1];
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  MEMORY[0x20BD3583C](v1, 0x10E1C4010F5D982);
  _Unwind_Resume(a1);
}

void sub_20B0A9BD4()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 4);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0A9C0C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0A9C20(uint64_t a1, int a2)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  std::locale *v8;
  std::locale *v9;
  std::locale::__imp *v10;
  char *v11;

  v4 = *(_DWORD *)(a1 + 24);
  if ((v4 & 1) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = (char *)&unk_24C40C698;
LABEL_6:
    v8->__locale_ = (std::locale::__imp *)(v11 + 16);
    v8[1].__locale_ = v10;
    result = (uint64_t)std::locale::locale(v8 + 2, (const std::locale *)a1);
    *(_OWORD *)&v9[3].__locale_ = *(_OWORD *)(a1 + 8);
    LODWORD(v9[5].__locale_) = a2;
    *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = v9;
    goto LABEL_7;
  }
  if ((v4 & 8) != 0)
  {
    v8 = (std::locale *)operator new();
    v9 = v8;
    v10 = *(std::locale::__imp **)(*(_QWORD *)(a1 + 56) + 8);
    v11 = (char *)&unk_24C40C6E0;
    goto LABEL_6;
  }
  result = operator new();
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(v6 + 8);
  *(_QWORD *)result = &unk_24C40C738;
  *(_QWORD *)(result + 8) = v7;
  *(_DWORD *)(result + 16) = a2;
  *(_QWORD *)(v6 + 8) = result;
LABEL_7:
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8);
  return result;
}

std::locale *sub_20B0A9D1C(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C5D0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20B0A9D74(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C5D0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A9DDC(uint64_t result, uint64_t a2)
{
  char *v3;
  uint64_t v4;

  v3 = *(char **)(a2 + 16);
  if (v3 == *(char **)(a2 + 24)
    || (v4 = result,
        result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(result + 24) + 40))(*(_QWORD *)(result + 24), *v3), *(unsigned __int8 *)(v4 + 40) != result))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    ++*(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(v4 + 8);
  }
  return result;
}

std::locale *sub_20B0A9E60(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C618;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20B0A9EB8(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C618;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0A9F20(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 40))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

_QWORD *sub_20B0A9F68(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C40C438;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B0A9FAC(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C40C438;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0AA000(uint64_t result, uint64_t a2)
{
  unsigned __int8 *v2;

  v2 = *(unsigned __int8 **)(a2 + 16);
  if (v2 == *(unsigned __int8 **)(a2 + 24) || *v2 != *(unsigned __int8 *)(result + 16))
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

std::locale *sub_20B0AA048(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C6A8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20B0AA0A0(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C6A8;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0AA108(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;

  v3 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 40) - 1);
  if (!*(_BYTE *)(v3 + 16)
    || (v4 = *(_QWORD *)(v3 + 8) - *(_QWORD *)v3, v5 = *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24) - v5 < v4))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  v6 = result;
  if (v4 >= 1)
  {
    v7 = 0;
    while (1)
    {
      v8 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)v3 + v7));
      result = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v6 + 24) + 40))(*(_QWORD *)(v6 + 24), *(char *)(*(_QWORD *)(a2 + 16) + v7));
      if (v8 != (_DWORD)result)
        goto LABEL_3;
      if (v4 == ++v7)
      {
        v5 = *(_QWORD *)(a2 + 16);
        break;
      }
    }
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v5 + v4;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(v6 + 8);
  return result;
}

std::locale *sub_20B0AA200(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C6F0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  return a1;
}

void sub_20B0AA258(std::locale *a1)
{
  std::locale::__imp *locale;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C6F0;
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  locale = a1[1].__locale_;
  if (locale)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)locale + 8))(locale);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0AA2C0(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  unsigned __int8 **v4;
  unsigned __int8 *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unsigned __int8 *v9;
  int v10;
  int v11;
  int v12;

  v2 = *(_DWORD *)(result + 40) - 1;
  v3 = *(_QWORD *)(a2 + 32);
  if (!*(_BYTE *)(v3 + 24 * v2 + 16)
    || (v4 = (unsigned __int8 **)(v3 + 24 * v2),
        v5 = *v4,
        v6 = v4[1] - *v4,
        v7 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v7 < v6))
  {
LABEL_3:
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
    return result;
  }
  if (v6 >= 1)
  {
    v8 = v6;
    v9 = *(unsigned __int8 **)(a2 + 16);
    do
    {
      v11 = *v5++;
      v10 = v11;
      v12 = *v9++;
      if (v10 != v12)
        goto LABEL_3;
    }
    while (--v8);
  }
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 16) = v7 + v6;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20B0AA350(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C40C438;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B0AA394(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C40C438;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD3583CLL);
}

unsigned int *sub_20B0AA3E8(unsigned int *result, uint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unsigned int v5;
  unsigned int *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;

  v2 = result[4];
  v3 = *(_QWORD *)(a2 + 32);
  if (0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 40) - v3) >> 3) < v2)
    sub_20B0A9BD4();
  v5 = v2 - 1;
  if (*(_BYTE *)(v3 + 24 * v5 + 16)
    && (v6 = result,
        v7 = v3 + 24 * v5,
        result = *(unsigned int **)v7,
        v8 = *(_QWORD *)(v7 + 8) - *(_QWORD *)v7,
        v9 = *(_QWORD *)(a2 + 16),
        *(_QWORD *)(a2 + 24) - v9 >= v8)
    && (result = (unsigned int *)memcmp(result, *(const void **)(a2 + 16), v8), !(_DWORD)result))
  {
    *(_DWORD *)a2 = -994;
    *(_QWORD *)(a2 + 16) = v9 + v8;
    *(_QWORD *)(a2 + 80) = *((_QWORD *)v6 + 1);
  }
  else
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  return result;
}

void sub_20B0AA4B4(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 40);
    v5 = *(_BYTE **)(a1 + 48);
    v16 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_20AEC60B8();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 40) = v13;
        *(_QWORD *)(a1 + 48) = v15;
        *(_QWORD *)(a1 + 56) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 48);
  v4 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 40);
  v7 = *(_BYTE **)(a1 + 40);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 40) = v12;
  *(_QWORD *)(a1 + 48) = v15;
  *(_QWORD *)(a1 + 56) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 48) = v15;
}

uint64_t sub_20B0AA92C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  const std::locale *v11;
  __int128 v12;
  std::string::size_type size;
  std::string *v14;
  BOOL v15;
  std::locale v17;
  std::string v18;

  *(_QWORD *)a1 = &unk_24C40C780;
  *(_QWORD *)(a1 + 8) = a3;
  v11 = (const std::locale *)(a1 + 16);
  std::locale::locale((std::locale *)(a1 + 16), (const std::locale *)a2);
  v12 = *(_OWORD *)(a2 + 8);
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 24) = v12;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_BYTE *)(a1 + 168) = a4;
  *(_BYTE *)(a1 + 169) = a5;
  *(_BYTE *)(a1 + 170) = a6;
  std::locale::locale(&v17, v11);
  std::locale::name(&v18, &v17);
  size = HIBYTE(v18.__r_.__value_.__r.__words[2]);
  if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    size = v18.__r_.__value_.__l.__size_;
  if (size == 1)
  {
    v14 = (std::string *)v18.__r_.__value_.__r.__words[0];
    if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v14 = &v18;
    v15 = v14->__r_.__value_.__s.__data_[0] != 67;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
      goto LABEL_9;
  }
  else
  {
    v15 = 1;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
LABEL_9:
      operator delete(v18.__r_.__value_.__l.__data_);
  }
  std::locale::~locale(&v17);
  *(_BYTE *)(a1 + 171) = v15;
  return a1;
}

void sub_20B0AAA40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::locale a9)
{
  uint64_t v9;
  std::locale *v10;
  void **v11;
  void **v12;
  void *v14;
  void *v15;
  void *v16;
  uint64_t v17;

  std::locale::~locale(&a9);
  sub_20AEC2E90((void **)(v9 + 136));
  v14 = *(void **)(v9 + 112);
  if (v14)
  {
    *(_QWORD *)(v9 + 120) = v14;
    operator delete(v14);
    sub_20B0AAAE0(v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
    {
LABEL_3:
      v16 = *v12;
      if (!*v12)
        goto LABEL_5;
      goto LABEL_4;
    }
  }
  else
  {
    sub_20B0AAAE0(v11);
    v15 = *(void **)(v9 + 64);
    if (!v15)
      goto LABEL_3;
  }
  *(_QWORD *)(v9 + 72) = v15;
  operator delete(v15);
  v16 = *v12;
  if (!*v12)
  {
LABEL_5:
    std::locale::~locale(v10);
    *(_QWORD *)v9 = &unk_24C40C438;
    v17 = *(_QWORD *)(v9 + 8);
    if (v17)
      (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    _Unwind_Resume(a1);
  }
LABEL_4:
  *(_QWORD *)(v9 + 48) = v16;
  operator delete(v16);
  goto LABEL_5;
}

void **sub_20B0AAAE0(void **a1)
{
  void **v2;
  void **v3;
  void *v4;

  v2 = (void **)*a1;
  if (*a1)
  {
    v3 = (void **)a1[1];
    v4 = *a1;
    if (v3 == v2)
    {
LABEL_11:
      a1[1] = v2;
      operator delete(v4);
      return a1;
    }
    while (1)
    {
      if (*((char *)v3 - 1) < 0)
      {
        operator delete(*(v3 - 3));
        if (*((char *)v3 - 25) < 0)
LABEL_9:
          operator delete(*(v3 - 6));
      }
      else if (*((char *)v3 - 25) < 0)
      {
        goto LABEL_9;
      }
      v3 -= 6;
      if (v3 == v2)
      {
        v4 = *a1;
        goto LABEL_11;
      }
    }
  }
  return a1;
}

void sub_20B0AAB70(std::locale *a1)
{
  sub_20B0AB690(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0AAB94(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  char *v4;
  char *v5;
  char v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int8 *v12;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  const void *v19;
  char v20;
  size_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  BOOL v24;
  uint64_t v25;
  int v26;
  size_t v27;
  unsigned __int8 v28;
  unsigned __int8 *v29;
  unint64_t v30;
  int v31;
  unsigned int v32;
  char v33;
  int v34;
  void *v35;
  void *v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  const void *v44;
  size_t v45;
  uint64_t v46;
  unsigned __int8 *v47;
  BOOL v48;
  int v49;
  char *v50;
  size_t v51;
  size_t v52;
  int v53;
  int v54;
  char *v55;
  size_t v56;
  size_t v57;
  int v58;
  int v59;
  char *v60;
  size_t v61;
  size_t v62;
  int v63;
  int v64;
  char *v65;
  size_t v66;
  size_t v67;
  int v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unint64_t v74;
  unint64_t v75;
  void *v76;
  size_t v77;
  size_t v78;
  uint64_t v79;
  BOOL v80;
  unsigned __int8 **v81;
  unsigned __int8 *v82;
  int v83;
  unsigned __int8 *v84;
  uint64_t v85;
  void *v86;
  size_t v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  unint64_t v92;
  size_t v93;
  size_t v94;
  uint64_t v95;
  uint64_t v96;
  BOOL v97;
  unsigned __int8 *v98;
  uint64_t v99;
  int v100;
  void **p_p;
  uint64_t v102;
  uint64_t v103;
  void *v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  const void *v108;
  int v109;
  uint64_t v110;
  int v111;
  int v112;
  int v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  uint64_t v117;
  int v118;
  unint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t *v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  char v126;
  BOOL v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  int v132;
  int v133;
  uint64_t v134;
  int v135;
  void *v136;
  size_t v137;
  char v138;
  __int16 __src;
  void *__p;
  size_t __n;
  char v142;

  v2 = a2;
  v4 = *(char **)(a2 + 16);
  v5 = *(char **)(a2 + 24);
  if (v4 == v5)
  {
    v25 = 0;
    v26 = *(unsigned __int8 *)(a1 + 168);
    goto LABEL_245;
  }
  if (!*(_BYTE *)(a1 + 171) || v4 + 1 == v5)
    goto LABEL_34;
  v6 = *v4;
  LOBYTE(__src) = *v4;
  v7 = v4[1];
  HIBYTE(__src) = v7;
  if (*(_BYTE *)(a1 + 169))
  {
    LOBYTE(__src) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v6);
    HIBYTE(__src) = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), v7);
  }
  v8 = a1 + 16;
  sub_20B0AB7D0(&__src, a1 + 16, &__p, (uint64_t)&__p);
  if (v142 < 0)
  {
    v27 = __n;
    operator delete(__p);
    if (v27)
      goto LABEL_8;
LABEL_34:
    v26 = 0;
    v25 = 1;
    v28 = **(_BYTE **)(v2 + 16);
    LOBYTE(__src) = v28;
    if (!*(_BYTE *)(a1 + 169))
      goto LABEL_36;
    goto LABEL_35;
  }
  if (!v142)
    goto LABEL_34;
LABEL_8:
  v9 = *(_QWORD *)(a1 + 112);
  v10 = *(_QWORD *)(a1 + 120) - v9;
  if (v10)
  {
    v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1)
      v11 = 1;
    v12 = (unsigned __int8 *)(v9 + 1);
    while (__src != *(v12 - 1) || HIBYTE(__src) != *v12)
    {
      v12 += 2;
      if (!--v11)
        goto LABEL_17;
    }
    goto LABEL_227;
  }
LABEL_17:
  if (!*(_BYTE *)(a1 + 170) || *(_QWORD *)(a1 + 88) == *(_QWORD *)(a1 + 96))
  {
    v26 = 0;
    goto LABEL_167;
  }
  v142 = 2;
  LOWORD(__p) = __src;
  BYTE2(__p) = 0;
  (*(void (**)(void **__return_ptr, _QWORD, void **, char *))(**(_QWORD **)(a1 + 32) + 32))(&v136, *(_QWORD *)(a1 + 32), &__p, (char *)&__p + 2);
  if (v142 < 0)
    operator delete(__p);
  v14 = *(_QWORD *)(a1 + 88);
  v15 = v138;
  v16 = *(_QWORD *)(a1 + 96) - v14;
  if (!v16)
  {
    v24 = 0;
    v70 = 0;
    v69 = 0;
    goto LABEL_164;
  }
  v128 = v2;
  v17 = 0;
  v18 = v16 / 48;
  if (v138 >= 0)
    v19 = &v136;
  else
    v19 = v136;
  v20 = v138;
  if (v138 >= 0)
    v21 = v138;
  else
    v21 = v137;
  if (v18 <= 1)
    v22 = 1;
  else
    v22 = v16 / 48;
  v23 = (unsigned __int8 *)(v14 + 47);
  v24 = 1;
  do
  {
    v59 = (char)*(v23 - 24);
    if (v59 >= 0)
      v60 = (char *)(v23 - 47);
    else
      v60 = *(char **)(v23 - 47);
    if (v59 >= 0)
      v61 = *(v23 - 24);
    else
      v61 = *(_QWORD *)(v23 - 39);
    if (v21 >= v61)
      v62 = v61;
    else
      v62 = v21;
    v63 = memcmp(v60, v19, v62);
    if (v63)
    {
      if ((v63 & 0x80000000) == 0)
        goto LABEL_98;
    }
    else if (v61 > v21)
    {
      goto LABEL_98;
    }
    v64 = (char)*v23;
    if (v64 >= 0)
      v65 = (char *)(v23 - 23);
    else
      v65 = *(char **)(v23 - 23);
    if (v64 >= 0)
      v66 = *v23;
    else
      v66 = *(_QWORD *)(v23 - 15);
    if (v66 >= v21)
      v67 = v21;
    else
      v67 = v66;
    v68 = memcmp(v19, v65, v67);
    if (v68)
    {
      if (v68 < 0)
      {
LABEL_123:
        v69 = 1;
        v70 = 5;
        goto LABEL_162;
      }
    }
    else if (v21 <= v66)
    {
      goto LABEL_123;
    }
LABEL_98:
    v24 = ++v17 < v18;
    v23 += 48;
  }
  while (v22 != v17);
  v70 = 0;
  v69 = 0;
LABEL_162:
  v2 = v128;
  v8 = a1 + 16;
  v15 = v20;
LABEL_164:
  if (v15 < 0)
    operator delete(v136);
  v26 = v69;
  if (v24)
    goto LABEL_207;
LABEL_167:
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
    goto LABEL_209;
  v133 = v26;
  v88 = v2;
  sub_20B0ABA64(&__src, v8, &__p, (uint64_t)&__p);
  v89 = *(_QWORD *)(a1 + 136);
  v90 = v142;
  v91 = *(_QWORD *)(a1 + 144) - v89;
  if (!v91)
    goto LABEL_188;
  v92 = v91 / 24;
  v93 = __n;
  if (v142 >= 0)
    v94 = v142;
  else
    v94 = __n;
  if (v142 < 0)
  {
    v135 = v142;
    v103 = 0;
    v104 = __p;
    if (v92 <= 1)
      v105 = 1;
    else
      v105 = v91 / 24;
    v97 = 1;
    do
    {
      v106 = *(unsigned __int8 *)(v89 + 23);
      v107 = (char)v106;
      if ((v106 & 0x80u) != 0)
        v106 = *(_QWORD *)(v89 + 8);
      if (v94 == v106)
      {
        v108 = v107 >= 0 ? (const void *)v89 : *(const void **)v89;
        if (!memcmp(v104, v108, v93))
        {
          v133 = 1;
          v70 = 5;
          goto LABEL_203;
        }
      }
      v97 = ++v103 < v92;
      v89 += 24;
    }
    while (v105 != v103);
    v70 = 0;
LABEL_203:
    v2 = v88;
    v90 = v135;
    goto LABEL_204;
  }
  if (!v142)
  {
    v114 = *(unsigned __int8 *)(v89 + 23);
    if ((v114 & 0x80u) != 0)
      v114 = *(_QWORD *)(v89 + 8);
    if (v114 != v142)
    {
      v119 = 0;
      if (v92 <= 1)
        v120 = 1;
      else
        v120 = v92;
      v121 = v120 - 1;
      v122 = (uint64_t *)(v89 + 32);
      v2 = v88;
      while (v121 != v119)
      {
        ++v119;
        v123 = *((unsigned __int8 *)v122 + 15);
        v125 = *v122;
        v122 += 3;
        v124 = v125;
        if ((v123 & 0x80u) != 0)
          v123 = v124;
        if (v94 == v123)
        {
          v97 = v119 < v92;
          v133 = 1;
          v70 = 5;
          goto LABEL_204;
        }
      }
      v97 = 0;
      v70 = 0;
      goto LABEL_204;
    }
    v2 = v88;
    v26 = 1;
LABEL_208:
    v25 = 2;
    goto LABEL_245;
  }
  v95 = 0;
  v96 = v92 <= 1 ? 1 : v91 / 24;
  v97 = 1;
  do
  {
    v98 = (unsigned __int8 *)(v89 + 24 * v95);
    v99 = v98[23];
    v100 = (char)v99;
    if ((v99 & 0x80u) != 0)
      v99 = *((_QWORD *)v98 + 1);
    if (v94 == v99)
    {
      if (v100 < 0)
        v98 = *(unsigned __int8 **)v98;
      p_p = &__p;
      v102 = v142;
      while (*(unsigned __int8 *)p_p == *v98)
      {
        p_p = (void **)((char *)p_p + 1);
        ++v98;
        if (!--v102)
        {
          v133 = 1;
          v70 = 5;
          v2 = v88;
          goto LABEL_204;
        }
      }
    }
    v97 = ++v95 < v92;
  }
  while (v95 != v96);
LABEL_188:
  v97 = 0;
  v70 = 0;
  v2 = v88;
LABEL_204:
  if (v90 < 0)
    operator delete(__p);
  v26 = v133;
  if (!v97)
  {
LABEL_209:
    if ((char)__src < 0)
    {
      v112 = *(_DWORD *)(a1 + 164);
    }
    else
    {
      v109 = *(_DWORD *)(a1 + 160);
      v110 = *(_QWORD *)(*(_QWORD *)(a1 + 24) + 16);
      v111 = *(_DWORD *)(v110 + 4 * __src);
      if (((v111 & v109) != 0 || __src == 95 && (v109 & 0x80) != 0)
        && (SHIBYTE(__src) & 0x80000000) == 0
        && ((*(_DWORD *)(v110 + 4 * HIBYTE(__src)) & v109) != 0 || (v109 & 0x80) != 0 && HIBYTE(__src) == 95))
      {
        goto LABEL_227;
      }
      v112 = *(_DWORD *)(a1 + 164);
      if ((v112 & v111) != 0 || __src == 95 && (v112 & 0x80) != 0)
      {
LABEL_226:
        v113 = v26;
LABEL_228:
        v26 = v113;
        v25 = 2;
        goto LABEL_245;
      }
    }
    if ((SHIBYTE(__src) & 0x80000000) == 0)
    {
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * HIBYTE(__src)) & v112) == 0)
      {
        v113 = 1;
        if (HIBYTE(__src) != 95 || (v112 & 0x80) == 0)
          goto LABEL_228;
      }
      goto LABEL_226;
    }
LABEL_227:
    v113 = 1;
    goto LABEL_228;
  }
LABEL_207:
  if (v70)
    goto LABEL_208;
  v25 = 2;
  v28 = **(_BYTE **)(v2 + 16);
  LOBYTE(__src) = v28;
  if (*(_BYTE *)(a1 + 169))
  {
LABEL_35:
    v28 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), (char)v28);
    LOBYTE(__src) = v28;
  }
LABEL_36:
  v29 = *(unsigned __int8 **)(a1 + 40);
  v30 = *(_QWORD *)(a1 + 48) - (_QWORD)v29;
  if (v30)
  {
    if (v30 <= 1)
      v30 = 1;
    while (1)
    {
      v31 = *v29++;
      if (v31 == v28)
        break;
      if (!--v30)
        goto LABEL_41;
    }
LABEL_244:
    v26 = 1;
    goto LABEL_245;
  }
LABEL_41:
  v32 = *(_DWORD *)(a1 + 164);
  if (v32 || *(_QWORD *)(a1 + 64) != *(_QWORD *)(a1 + 72))
  {
    if ((v28 & 0x80) != 0 || (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v28) & v32) == 0)
    {
      v34 = (v32 >> 7) & 1;
      v33 = v28 == 95 ? v34 : 0;
    }
    else
    {
      v33 = 1;
    }
    v35 = *(void **)(a1 + 72);
    v36 = memchr(*(void **)(a1 + 64), (char)v28, (size_t)v35 - *(_QWORD *)(a1 + 64));
    v37 = v36 ? v36 : v35;
    if ((v33 & 1) == 0 && v37 == v35)
      goto LABEL_244;
  }
  v38 = *(_QWORD *)(a1 + 88);
  v39 = *(_QWORD *)(a1 + 96);
  if (v38 == v39)
    goto LABEL_128;
  if (!*(_BYTE *)(a1 + 170))
  {
    v40 = 1;
    v138 = 1;
    LOWORD(v136) = v28;
    v41 = v39 - v38;
    if (v41)
      goto LABEL_59;
LABEL_155:
    v48 = 0;
    if ((v40 & 0x80) != 0)
      goto LABEL_126;
    goto LABEL_127;
  }
  v142 = 1;
  LOWORD(__p) = v28;
  (*(void (**)(void **__return_ptr, _QWORD, void **, char *))(**(_QWORD **)(a1 + 32) + 32))(&v136, *(_QWORD *)(a1 + 32), &__p, (char *)&__p + 1);
  if (v142 < 0)
    operator delete(__p);
  v38 = *(_QWORD *)(a1 + 88);
  v40 = v138;
  v41 = *(_QWORD *)(a1 + 96) - v38;
  if (!v41)
    goto LABEL_155;
LABEL_59:
  v134 = v25;
  v131 = v26;
  v129 = v2;
  v42 = 0;
  v43 = v41 / 48;
  v126 = v40;
  if ((v40 & 0x80u) == 0)
    v44 = &v136;
  else
    v44 = v136;
  if ((v40 & 0x80u) == 0)
    v45 = v40;
  else
    v45 = v137;
  if (v43 <= 1)
    v46 = 1;
  else
    v46 = v41 / 48;
  v47 = (unsigned __int8 *)(v38 + 47);
  v48 = 1;
  while (2)
  {
    v49 = (char)*(v47 - 24);
    if (v49 >= 0)
      v50 = (char *)(v47 - 47);
    else
      v50 = *(char **)(v47 - 47);
    if (v49 >= 0)
      v51 = *(v47 - 24);
    else
      v51 = *(_QWORD *)(v47 - 39);
    if (v45 >= v51)
      v52 = v51;
    else
      v52 = v45;
    v53 = memcmp(v50, v44, v52);
    if (v53)
    {
      if (v53 < 0)
        goto LABEL_84;
    }
    else if (v51 <= v45)
    {
LABEL_84:
      v54 = (char)*v47;
      if (v54 >= 0)
        v55 = (char *)(v47 - 23);
      else
        v55 = *(char **)(v47 - 23);
      if (v54 >= 0)
        v56 = *v47;
      else
        v56 = *(_QWORD *)(v47 - 15);
      if (v56 >= v45)
        v57 = v45;
      else
        v57 = v56;
      v58 = memcmp(v44, v55, v57);
      if (v58)
      {
        if (v58 < 0)
        {
LABEL_95:
          v26 = 1;
          v2 = v129;
          v25 = v134;
          if ((v126 & 0x80) == 0)
            goto LABEL_127;
          goto LABEL_126;
        }
      }
      else if (v45 <= v56)
      {
        goto LABEL_95;
      }
    }
    v48 = ++v42 < v43;
    v47 += 48;
    if (v46 != v42)
      continue;
    break;
  }
  v2 = v129;
  v26 = v131;
  v25 = v134;
  if ((v126 & 0x80) == 0)
    goto LABEL_127;
LABEL_126:
  operator delete(v136);
LABEL_127:
  if (v48)
    goto LABEL_245;
LABEL_128:
  if (*(_QWORD *)(a1 + 136) == *(_QWORD *)(a1 + 144))
  {
LABEL_239:
    if ((v28 & 0x80) != 0)
      goto LABEL_245;
    v115 = *(_DWORD *)(a1 + 160);
    if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 16) + 4 * v28) & v115) == 0)
    {
      v116 = (v115 >> 7) & 1;
      if (v28 != 95)
        v116 = 0;
      if (v116 != 1)
        goto LABEL_245;
    }
    goto LABEL_244;
  }
  sub_20B0ABA64(&__src, a1 + 16, (_BYTE *)&__src + 1, (uint64_t)&__p);
  v71 = *(_QWORD *)(a1 + 136);
  v72 = v142;
  v73 = *(_QWORD *)(a1 + 144) - v71;
  if (!v73)
  {
    if (v142 < 0)
      operator delete(__p);
LABEL_238:
    v28 = __src;
    goto LABEL_239;
  }
  v132 = v26;
  v130 = v2;
  v74 = 0;
  v75 = v73 / 24;
  v76 = __p;
  v77 = __n;
  if (v142 >= 0)
    v78 = v142;
  else
    v78 = __n;
  if (v75 <= 1)
    v79 = 1;
  else
    v79 = v73 / 24;
  v80 = 1;
  while (2)
  {
    v81 = (unsigned __int8 **)(v71 + 24 * v74);
    v82 = (unsigned __int8 *)*((unsigned __int8 *)v81 + 23);
    v83 = (char)v82;
    if ((char)v82 < 0)
      v82 = v81[1];
    if ((unsigned __int8 *)v78 != v82)
    {
LABEL_149:
      if (++v74 == v79)
      {
        if ((v72 & 0x80) != 0)
LABEL_236:
          operator delete(__p);
        v2 = v130;
        v26 = v132;
        goto LABEL_238;
      }
      goto LABEL_153;
    }
    if (v83 >= 0)
      v84 = (unsigned __int8 *)(v71 + 24 * v74);
    else
      v84 = *v81;
    if ((v72 & 0x80) == 0)
    {
      if (!(_DWORD)v72)
      {
LABEL_157:
        v2 = v130;
        v26 = 1;
        if (!v80)
          goto LABEL_238;
        goto LABEL_245;
      }
      v85 = 0;
      while (*((unsigned __int8 *)&__p + v85) == v84[v85])
      {
        if (v72 == ++v85)
          goto LABEL_157;
      }
      goto LABEL_149;
    }
    v127 = v80;
    v86 = v76;
    v87 = v77;
    if (memcmp(v76, v84, v77))
    {
      ++v74;
      v77 = v87;
      v76 = v86;
      if (v74 == v79)
        goto LABEL_236;
LABEL_153:
      v80 = v74 < v75;
      continue;
    }
    break;
  }
  operator delete(__p);
  v2 = v130;
  v26 = 1;
  if (!v127)
    goto LABEL_238;
LABEL_245:
  if (v26 == *(unsigned __int8 *)(a1 + 168))
  {
    v117 = 0;
    v118 = -993;
  }
  else
  {
    *(_QWORD *)(v2 + 16) += v25;
    v117 = *(_QWORD *)(a1 + 8);
    v118 = -995;
  }
  *(_DWORD *)v2 = v118;
  *(_QWORD *)(v2 + 80) = v117;
}

void sub_20B0AB618(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0AB638(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
  }
  else if ((*(char *)(a1 + 23) & 0x80000000) == 0)
  {
    return a1;
  }
  operator delete(*(void **)a1);
  return a1;
}

std::locale *sub_20B0AB690(std::locale *a1)
{
  std::locale::__imp *locale;
  std::locale::__imp *v3;
  std::locale::__imp *v4;
  std::locale::__imp *v5;
  std::locale::__imp *v6;
  std::locale::__imp *v7;
  std::locale::__imp *v8;
  std::locale::__imp *v9;
  std::locale::__imp *v10;
  std::locale::__imp *v11;

  a1->__locale_ = (std::locale::__imp *)&unk_24C40C780;
  locale = a1[17].__locale_;
  if (locale)
  {
    v3 = a1[18].__locale_;
    v4 = a1[17].__locale_;
    if (v3 != locale)
    {
      do
      {
        if (*((char *)v3 - 1) < 0)
          operator delete(*((void **)v3 - 3));
        v3 = (std::locale::__imp *)((char *)v3 - 24);
      }
      while (v3 != locale);
      v4 = a1[17].__locale_;
    }
    a1[18].__locale_ = locale;
    operator delete(v4);
  }
  v5 = a1[14].__locale_;
  if (v5)
  {
    a1[15].__locale_ = v5;
    operator delete(v5);
  }
  v6 = a1[11].__locale_;
  if (v6)
  {
    v7 = a1[12].__locale_;
    v8 = a1[11].__locale_;
    if (v7 == v6)
    {
LABEL_21:
      a1[12].__locale_ = v6;
      operator delete(v8);
      goto LABEL_22;
    }
    while (1)
    {
      if (*((char *)v7 - 1) < 0)
      {
        operator delete(*((void **)v7 - 3));
        if (*((char *)v7 - 25) < 0)
LABEL_19:
          operator delete(*((void **)v7 - 6));
      }
      else if (*((char *)v7 - 25) < 0)
      {
        goto LABEL_19;
      }
      v7 = (std::locale::__imp *)((char *)v7 - 48);
      if (v7 == v6)
      {
        v8 = a1[11].__locale_;
        goto LABEL_21;
      }
    }
  }
LABEL_22:
  v9 = a1[8].__locale_;
  if (v9)
  {
    a1[9].__locale_ = v9;
    operator delete(v9);
  }
  v10 = a1[5].__locale_;
  if (v10)
  {
    a1[6].__locale_ = v10;
    operator delete(v10);
  }
  std::locale::~locale(a1 + 2);
  a1->__locale_ = (std::locale::__imp *)&unk_24C40C438;
  v11 = a1[1].__locale_;
  if (v11)
    (*(void (**)(std::locale::__imp *))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_20B0AB7D0(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  __int128 *p_dst;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  uint64_t v18;
  __int128 *v19;
  size_t v20;
  std::string v21;
  __int128 __dst;
  int64_t v23;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v5 <= 0x16)
  {
    HIBYTE(v23) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = &__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (__int128 *)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (__int128 *)operator new(v10 + 1);
  *((_QWORD *)&__dst + 1) = v5;
  v23 = v11 | 0x8000000000000000;
  *(_QWORD *)&__dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  *(_QWORD *)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  *(_QWORD *)(a4 + 16) = 0;
  if (SHIBYTE(v23) < 0)
  {
    if (!*((_QWORD *)&__dst + 1))
      goto LABEL_17;
    v12 = (const char *)__dst;
  }
  else
  {
    if (!HIBYTE(v23))
      return;
    v12 = (const char *)&__dst;
  }
  std::__get_collation_name(&v21, v12);
  *(_OWORD *)a4 = *(_OWORD *)&v21.__r_.__value_.__l.__data_;
  v13 = v21.__r_.__value_.__r.__words[2];
  *(_QWORD *)(a4 + 16) = *((_QWORD *)&v21.__r_.__value_.__l + 2);
  v14 = HIBYTE(v13);
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14)
    goto LABEL_17;
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    v15 = HIBYTE(v23);
    if (HIBYTE(v23) >= 3u)
      return;
    v16 = (char *)&__dst;
    goto LABEL_25;
  }
  v15 = *((_QWORD *)&__dst + 1);
  if (*((_QWORD *)&__dst + 1) < 3uLL)
  {
    v16 = (char *)__dst;
LABEL_25:
    (*(void (**)(std::string *__return_ptr, _QWORD, char *, char *))(**(_QWORD **)(a2 + 16) + 32))(&v21, *(_QWORD *)(a2 + 16), v16, &v16[v15]);
    if (*(char *)(a4 + 23) < 0)
      operator delete(*(void **)a4);
    *(std::string *)a4 = v21;
    if (*(char *)(a4 + 23) < 0)
    {
      v18 = *(_QWORD *)(a4 + 8);
      if (v18 == 1 || v18 == 12)
      {
        if (&__dst != (__int128 *)a4)
        {
          if (v23 >= 0)
            v19 = &__dst;
          else
            v19 = (__int128 *)__dst;
          if (v23 >= 0)
            v20 = HIBYTE(v23);
          else
            v20 = *((_QWORD *)&__dst + 1);
          sub_20AEC8090((void **)a4, v19, v20);
        }
      }
      else
      {
        **(_BYTE **)a4 = 0;
        *(_QWORD *)(a4 + 8) = 0;
      }
    }
    else
    {
      v17 = *(unsigned __int8 *)(a4 + 23);
      if (v17 == 1 || v17 == 12)
      {
        if (&__dst != (__int128 *)a4)
        {
          if (SHIBYTE(v23) < 0)
          {
            sub_20AEC7FCC((_QWORD *)a4, (void *)__dst, *((size_t *)&__dst + 1));
          }
          else
          {
            *(_OWORD *)a4 = __dst;
            *(_QWORD *)(a4 + 16) = v23;
          }
        }
      }
      else
      {
        *(_BYTE *)a4 = 0;
        *(_BYTE *)(a4 + 23) = 0;
      }
    }
  }
LABEL_17:
  if (SHIBYTE(v23) < 0)
    operator delete((void *)__dst);
}

void sub_20B0ABA20(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (*(char *)(v17 + 23) < 0)
  {
    operator delete(*(void **)v17);
    if ((a17 & 0x80000000) == 0)
LABEL_3:
      _Unwind_Resume(exception_object);
  }
  else if ((a17 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0ABA64(_BYTE *__src@<X1>, uint64_t a2@<X0>, _BYTE *a3@<X2>, uint64_t a4@<X8>)
{
  size_t v5;
  void **p_dst;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  void **v13;
  uint64_t v14;
  int v15;
  _BYTE *v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  v5 = a3 - __src;
  if ((unint64_t)(a3 - __src) >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v5 <= 0x16)
  {
    HIBYTE(v19) = (_BYTE)a3 - (_BYTE)__src;
    p_dst = (void **)&__dst;
    if (__src == a3)
      goto LABEL_9;
LABEL_8:
    memcpy(p_dst, __src, v5);
    p_dst = (void **)((char *)p_dst + v5);
    goto LABEL_9;
  }
  v10 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
  if ((v5 | 7) != 0x17)
    v10 = v5 | 7;
  v11 = v10 + 1;
  p_dst = (void **)operator new(v10 + 1);
  v18 = v5;
  v19 = v11 | 0x8000000000000000;
  __dst = p_dst;
  if (__src != a3)
    goto LABEL_8;
LABEL_9:
  *(_BYTE *)p_dst = 0;
  v12 = HIBYTE(v19);
  if (v19 >= 0)
    v13 = (void **)&__dst;
  else
    v13 = __dst;
  if (v19 < 0)
    v12 = v18;
  (*(void (**)(_QWORD, void **, char *))(**(_QWORD **)(a2 + 16) + 32))(*(_QWORD *)(a2 + 16), v13, (char *)v13 + v12);
  v14 = *(unsigned __int8 *)(a4 + 23);
  v15 = (char)v14;
  if ((v14 & 0x80u) != 0)
    v14 = *(_QWORD *)(a4 + 8);
  if (v14 == 1)
  {
LABEL_25:
    if ((SHIBYTE(v19) & 0x80000000) == 0)
      return;
    goto LABEL_26;
  }
  if (v14 == 12)
  {
    if (v15 >= 0)
      v16 = (_BYTE *)a4;
    else
      v16 = *(_BYTE **)a4;
    v16[11] = v16[3];
    if (SHIBYTE(v19) < 0)
      goto LABEL_26;
    return;
  }
  if ((v15 & 0x80000000) == 0)
  {
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
    goto LABEL_25;
  }
  **(_BYTE **)a4 = 0;
  *(_QWORD *)(a4 + 8) = 0;
  if (SHIBYTE(v19) < 0)
LABEL_26:
    operator delete(__dst);
}

void sub_20B0ABBDC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0ABBF8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 5);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0ABC30(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0ABC44(uint64_t a1, char *a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t i;
  unint64_t v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unint64_t j;
  unint64_t v12;
  uint64_t v13;
  char v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t k;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t m;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  __int128 v30;
  uint64_t v31;
  char *v32;
  int v33;
  char *v34;
  char v35;
  char *v36;
  char v37;
  _BYTE *v38;
  unint64_t v39;
  __int128 v40;
  uint64_t v41;
  char *v42;
  int v43;
  void *v44[2];
  uint64_t v45;
  void *v46[2];
  uint64_t v47;
  void *__p[2];
  uint64_t v49;
  void *v50[2];
  uint64_t v51;

  v3 = a3;
  v4 = (uint64_t)a2;
  if (!*(_BYTE *)(a1 + 170))
  {
    v16 = a2[23];
    if (a2[23] < 0)
    {
      if (*((_QWORD *)a2 + 1) != 1)
        goto LABEL_74;
    }
    else if (v16 != 1)
    {
LABEL_74:
      sub_20B0ACDCC();
    }
    if (*(char *)(a3 + 23) < 0)
    {
      if (*(_QWORD *)(a3 + 8) != 1)
        goto LABEL_74;
    }
    else if (*(_BYTE *)(a3 + 23) != 1)
    {
      goto LABEL_74;
    }
    if (!*(_BYTE *)(a1 + 169))
    {
LABEL_67:
      *(_OWORD *)__p = *(_OWORD *)v4;
      v49 = *(_QWORD *)(v4 + 16);
      *(_QWORD *)(v4 + 8) = 0;
      *(_QWORD *)(v4 + 16) = 0;
      *(_QWORD *)v4 = 0;
      *(_OWORD *)v50 = *(_OWORD *)v3;
      v51 = *(_QWORD *)(v3 + 16);
      *(_QWORD *)(v3 + 8) = 0;
      *(_QWORD *)(v3 + 16) = 0;
      *(_QWORD *)v3 = 0;
      v39 = *(_QWORD *)(a1 + 96);
      if (v39 < *(_QWORD *)(a1 + 104))
      {
        v40 = *(_OWORD *)__p;
        *(_QWORD *)(v39 + 16) = v49;
        *(_OWORD *)v39 = v40;
        __p[1] = 0;
        v49 = 0;
        __p[0] = 0;
        v41 = v51;
        *(_OWORD *)(v39 + 24) = *(_OWORD *)v50;
        *(_QWORD *)(v39 + 40) = v41;
        v50[1] = 0;
        v51 = 0;
        v50[0] = 0;
        *(_QWORD *)(a1 + 96) = v39 + 48;
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      v42 = sub_20B0ACE18((void **)(a1 + 88), (uint64_t)__p);
      v43 = SHIBYTE(v51);
      *(_QWORD *)(a1 + 96) = v42;
      if ((v43 & 0x80000000) == 0)
      {
        if (SHIBYTE(v49) < 0)
          goto LABEL_69;
        return;
      }
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
LABEL_69:
      operator delete(__p[0]);
      return;
    }
    v34 = a2;
    if ((v16 & 0x80) != 0)
      v34 = *(char **)a2;
    v35 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v34);
    if (*(char *)(v4 + 23) < 0)
    {
      **(_BYTE **)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
        goto LABEL_64;
    }
    else
    {
      *(_BYTE *)v4 = v35;
      v36 = (char *)v3;
      if ((*(char *)(v3 + 23) & 0x80000000) == 0)
      {
LABEL_64:
        v37 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *v36);
        v38 = (_BYTE *)v3;
        if (*(char *)(v3 + 23) < 0)
          v38 = *(_BYTE **)v3;
        *v38 = v37;
        goto LABEL_67;
      }
    }
    v36 = *(char **)v3;
    goto LABEL_64;
  }
  if (*(_BYTE *)(a1 + 169))
  {
    for (i = 0; ; ++i)
    {
      v7 = *(unsigned __int8 *)(v4 + 23);
      if (*(char *)(v4 + 23) < 0)
      {
        if (i >= *(_QWORD *)(v4 + 8))
        {
LABEL_13:
          for (j = 0; ; ++j)
          {
            v12 = *(unsigned __int8 *)(v3 + 23);
            if (*(char *)(v3 + 23) < 0)
            {
              if (j >= *(_QWORD *)(v3 + 8))
                goto LABEL_44;
            }
            else if (j >= v12)
            {
              goto LABEL_44;
            }
            v13 = v3;
            if ((v12 & 0x80) != 0)
              v13 = *(_QWORD *)v3;
            v14 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v13 + j));
            v15 = v3;
            if (*(char *)(v3 + 23) < 0)
              v15 = *(_QWORD *)v3;
            *(_BYTE *)(v15 + j) = v14;
          }
        }
      }
      else if (i >= v7)
      {
        goto LABEL_13;
      }
      v8 = v4;
      if ((v7 & 0x80) != 0)
        v8 = *(_QWORD *)v4;
      v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), *(char *)(v8 + i));
      v10 = v4;
      if (*(char *)(v4 + 23) < 0)
        v10 = *(_QWORD *)v4;
      *(_BYTE *)(v10 + i) = v9;
    }
  }
  for (k = 0; ; ++k)
  {
    v19 = a2[23];
    if (a2[23] < 0)
      break;
    if (k >= v19)
      goto LABEL_35;
LABEL_33:
    v18 = a2;
    if ((v19 & 0x80) != 0)
    {
      v18 = *(char **)a2;
      v20 = *(char **)a2;
    }
    else
    {
      v20 = a2;
    }
    v20[k] = v18[k];
  }
  if (k < *((_QWORD *)a2 + 1))
    goto LABEL_33;
LABEL_35:
  for (m = 0; ; ++m)
  {
    v23 = *(unsigned __int8 *)(a3 + 23);
    if (*(char *)(a3 + 23) < 0)
      break;
    if (m >= v23)
      goto LABEL_44;
LABEL_42:
    v22 = a3;
    if ((v23 & 0x80) != 0)
    {
      v22 = *(_QWORD *)a3;
      v24 = *(_QWORD *)a3;
    }
    else
    {
      v24 = a3;
    }
    *(_BYTE *)(v24 + m) = *(_BYTE *)(v22 + m);
  }
  if (m < *(_QWORD *)(a3 + 8))
    goto LABEL_42;
LABEL_44:
  if (*(char *)(v4 + 23) < 0)
  {
    v26 = v4;
    v4 = *(_QWORD *)v4;
    v25 = *(_QWORD *)(v26 + 8);
  }
  else
  {
    v25 = *(unsigned __int8 *)(v4 + 23);
  }
  sub_20B0ACC3C(a1 + 16, v4, (char *)(v4 + v25));
  if (*(char *)(v3 + 23) < 0)
  {
    v28 = v3;
    v3 = *(_QWORD *)v3;
    v27 = *(_QWORD *)(v28 + 8);
  }
  else
  {
    v27 = *(unsigned __int8 *)(v3 + 23);
  }
  sub_20B0ACC3C(a1 + 16, v3, (char *)(v3 + v27));
  *(_OWORD *)__p = *(_OWORD *)v46;
  v49 = v47;
  *(_OWORD *)v50 = *(_OWORD *)v44;
  v51 = v45;
  v29 = *(_QWORD *)(a1 + 96);
  if (v29 >= *(_QWORD *)(a1 + 104))
  {
    v32 = sub_20B0ACE18((void **)(a1 + 88), (uint64_t)__p);
    v33 = SHIBYTE(v51);
    *(_QWORD *)(a1 + 96) = v32;
    if (v33 < 0)
    {
      operator delete(v50[0]);
      if ((SHIBYTE(v49) & 0x80000000) == 0)
        return;
    }
    else if ((SHIBYTE(v49) & 0x80000000) == 0)
    {
      return;
    }
    goto LABEL_69;
  }
  v30 = *(_OWORD *)__p;
  *(_QWORD *)(v29 + 16) = v49;
  *(_OWORD *)v29 = v30;
  __p[1] = 0;
  v49 = 0;
  __p[0] = 0;
  v31 = v51;
  *(_OWORD *)(v29 + 24) = *(_OWORD *)v50;
  *(_QWORD *)(v29 + 40) = v31;
  v50[1] = 0;
  v51 = 0;
  v50[0] = 0;
  *(_QWORD *)(a1 + 96) = v29 + 48;
  if (SHIBYTE(v49) < 0)
    goto LABEL_69;
}

void sub_20B0AC120(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20B0AB638((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0AC134(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  sub_20B0AB638((uint64_t)&a21);
  if (a14 < 0)
    operator delete(__p);
  if (a20 < 0)
    operator delete(a15);
  _Unwind_Resume(a1);
}

void sub_20B0AC170(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned __int8 v5;
  __int16 v6;
  unint64_t v7;
  char *v8;
  char **v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  _WORD *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  _BYTE *v28;
  char *v29;
  unint64_t v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  _OWORD *v34;
  char *v35;
  unint64_t v36;
  __int128 v37;
  __int16 v38;
  char *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  unint64_t v43;
  uint64_t v44;
  _BYTE *v45;
  char *v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  _OWORD *v51;
  char *v52;
  unint64_t v53;
  __int128 v54;
  __int16 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  _OWORD *v60;
  char *v61;
  unint64_t v62;
  __int128 v63;
  __int16 v64;

  if (*(_BYTE *)(a1 + 169))
  {
    v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
    v6 = v5 | (unsigned __int16)((*(unsigned __int16 (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a3) << 8);
    v8 = *(char **)(a1 + 120);
    v7 = *(_QWORD *)(a1 + 128);
    if ((unint64_t)v8 >= v7)
    {
      v9 = (char **)(a1 + 112);
      v10 = *(char **)(a1 + 112);
      v11 = v8 - v10;
      if (v8 - v10 > -3)
      {
        v12 = v11 >> 1;
        v13 = v7 - (_QWORD)v10;
        if (v13 <= (v11 >> 1) + 1)
          v14 = v12 + 1;
        else
          v14 = v13;
        if (v13 >= 0x7FFFFFFFFFFFFFFELL)
          v15 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v15 = v14;
        if (!v15)
        {
          v16 = 0;
          v17 = (_WORD *)(2 * v12);
          v18 = 0;
          *(_WORD *)(2 * v12) = v6;
          v19 = 2 * v12 + 2;
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
LABEL_30:
          v30 = (unint64_t)(v20 - 2);
          if (v30 < 0x1E)
            goto LABEL_71;
          if ((unint64_t)(v8 - &v16[v11 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
            goto LABEL_71;
          v31 = (v30 >> 1) + 1;
          v32 = 2 * (v31 & 0xFFFFFFFFFFFFFFF0);
          v33 = &v8[-v32];
          v17 = (_WORD *)((char *)v17 - v32);
          v34 = &v16[2 * v12 - 16];
          v35 = v8 - 16;
          v36 = v31 & 0xFFFFFFFFFFFFFFF0;
          do
          {
            v37 = *(_OWORD *)v35;
            *(v34 - 1) = *((_OWORD *)v35 - 1);
            *v34 = v37;
            v34 -= 2;
            v35 -= 32;
            v36 -= 16;
          }
          while (v36);
          v8 = v33;
          if (v31 != (v31 & 0xFFFFFFFFFFFFFFF0))
          {
LABEL_71:
            do
            {
              v38 = *((_WORD *)v8 - 1);
              v8 -= 2;
              *--v17 = v38;
            }
            while (v8 != v10);
          }
LABEL_63:
          v8 = *v9;
          goto LABEL_64;
        }
        if ((v15 & 0x8000000000000000) == 0)
        {
          v16 = operator new(2 * v15);
          v17 = &v16[2 * v12];
          v18 = &v16[2 * v15];
          *v17 = v6;
          v19 = (uint64_t)(v17 + 1);
          v20 = (char *)(v8 - v10);
          if (v8 == v10)
            goto LABEL_64;
          goto LABEL_30;
        }
LABEL_68:
        sub_20AEC60CC();
      }
LABEL_67:
      sub_20B0A90FC();
    }
LABEL_28:
    *(_WORD *)v8 = v6;
    v19 = (uint64_t)(v8 + 2);
    goto LABEL_66;
  }
  v9 = (char **)(a1 + 112);
  v6 = a2 | (unsigned __int16)((_WORD)a3 << 8);
  v8 = *(char **)(a1 + 120);
  v21 = *(_QWORD *)(a1 + 128);
  if (*(_BYTE *)(a1 + 170))
  {
    if ((unint64_t)v8 < v21)
      goto LABEL_28;
    v22 = *v9;
    v23 = v8 - *v9;
    if (v23 <= -3)
      goto LABEL_67;
    v24 = v23 >> 1;
    v25 = v21 - (_QWORD)v22;
    if (v25 <= (v23 >> 1) + 1)
      v26 = v24 + 1;
    else
      v26 = v25;
    if (v25 >= 0x7FFFFFFFFFFFFFFELL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v26;
    if (v27)
    {
      if (v27 < 0)
        goto LABEL_68;
      v28 = operator new(2 * v27);
      v17 = &v28[2 * v24];
      v18 = &v28[2 * v27];
      *v17 = v6;
      v19 = (uint64_t)(v17 + 1);
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    else
    {
      v28 = 0;
      v17 = (_WORD *)(2 * v24);
      v18 = 0;
      *(_WORD *)(2 * v24) = v6;
      v19 = 2 * v24 + 2;
      v29 = (char *)(v8 - v22);
      if (v8 == v22)
        goto LABEL_64;
    }
    v47 = (unint64_t)(v29 - 2);
    if (v47 < 0x1E)
      goto LABEL_72;
    if ((unint64_t)(v8 - &v28[v23 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_72;
    v48 = (v47 >> 1) + 1;
    v49 = 2 * (v48 & 0xFFFFFFFFFFFFFFF0);
    v50 = &v8[-v49];
    v17 = (_WORD *)((char *)v17 - v49);
    v51 = &v28[2 * v24 - 16];
    v52 = v8 - 16;
    v53 = v48 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v54 = *(_OWORD *)v52;
      *(v51 - 1) = *((_OWORD *)v52 - 1);
      *v51 = v54;
      v51 -= 2;
      v52 -= 32;
      v53 -= 16;
    }
    while (v53);
    v8 = v50;
    if (v48 != (v48 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_72:
      do
      {
        v55 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v55;
      }
      while (v8 != v22);
    }
    goto LABEL_63;
  }
  if ((unint64_t)v8 < v21)
    goto LABEL_28;
  v39 = *v9;
  v40 = v8 - *v9;
  if (v40 <= -3)
    goto LABEL_67;
  v41 = v40 >> 1;
  v42 = v21 - (_QWORD)v39;
  if (v42 <= (v40 >> 1) + 1)
    v43 = v41 + 1;
  else
    v43 = v42;
  if (v42 >= 0x7FFFFFFFFFFFFFFELL)
    v44 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v44 = v43;
  if (!v44)
  {
    v45 = 0;
    v17 = (_WORD *)(2 * v41);
    v18 = 0;
    *(_WORD *)(2 * v41) = v6;
    v19 = 2 * v41 + 2;
    v46 = (char *)(v8 - v39);
    if (v8 == v39)
      goto LABEL_64;
    goto LABEL_57;
  }
  if (v44 < 0)
    goto LABEL_68;
  v45 = operator new(2 * v44);
  v17 = &v45[2 * v41];
  v18 = &v45[2 * v44];
  *v17 = v6;
  v19 = (uint64_t)(v17 + 1);
  v46 = (char *)(v8 - v39);
  if (v8 != v39)
  {
LABEL_57:
    v56 = (unint64_t)(v46 - 2);
    if (v56 < 0x1E)
      goto LABEL_73;
    if ((unint64_t)(v8 - &v45[v40 & 0xFFFFFFFFFFFFFFFELL]) < 0x20)
      goto LABEL_73;
    v57 = (v56 >> 1) + 1;
    v58 = 2 * (v57 & 0xFFFFFFFFFFFFFFF0);
    v59 = &v8[-v58];
    v17 = (_WORD *)((char *)v17 - v58);
    v60 = &v45[2 * v41 - 16];
    v61 = v8 - 16;
    v62 = v57 & 0xFFFFFFFFFFFFFFF0;
    do
    {
      v63 = *(_OWORD *)v61;
      *(v60 - 1) = *((_OWORD *)v61 - 1);
      *v60 = v63;
      v60 -= 2;
      v61 -= 32;
      v62 -= 16;
    }
    while (v62);
    v8 = v59;
    if (v57 != (v57 & 0xFFFFFFFFFFFFFFF0))
    {
LABEL_73:
      do
      {
        v64 = *((_WORD *)v8 - 1);
        v8 -= 2;
        *--v17 = v64;
      }
      while (v8 != v39);
    }
    goto LABEL_63;
  }
LABEL_64:
  *(_QWORD *)(a1 + 112) = v17;
  *(_QWORD *)(a1 + 120) = v19;
  *(_QWORD *)(a1 + 128) = v18;
  if (v8)
    operator delete(v8);
LABEL_66:
  *(_QWORD *)(a1 + 120) = v19;
}

void sub_20B0AC538()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 1);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0AC570(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0AC584(uint64_t a1@<X0>, uint64_t a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  unint64_t v5;
  _OWORD *p_p;
  _BYTE *v10;
  char *v11;
  __int128 *v12;
  _OWORD *v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  unint64_t v19;
  char *v20;
  uint64_t v21;
  int v22;
  _BYTE *v23;
  void *__p;
  unint64_t v25;
  int64_t v26;

  v5 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v5 > 0x16)
  {
    v16 = (v5 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v5 | 7) != 0x17)
      v16 = v5 | 7;
    v17 = v16 + 1;
    p_p = operator new(v16 + 1);
    v25 = v5;
    v26 = v17 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v10 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v26) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v5 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    v10 = p_p;
    v11 = (char *)a2;
  }
  else
  {
    v10 = (char *)p_p + (v5 & 0xFFFFFFFFFFFFFFE0);
    v11 = (char *)(a2 + (v5 & 0xFFFFFFFFFFFFFFE0));
    v12 = (__int128 *)(a2 + 16);
    v13 = p_p + 1;
    v14 = v5 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v15 = *v12;
      *(v13 - 1) = *(v12 - 1);
      *v13 = v15;
      v12 += 2;
      v13 += 2;
      v14 -= 32;
    }
    while (v14);
    if (v5 == (v5 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v18 = *v11++;
    *v10++ = v18;
  }
  while (v11 != a3);
LABEL_16:
  *v10 = 0;
  v19 = HIBYTE(v26);
  if (v26 >= 0)
    v20 = (char *)&__p;
  else
    v20 = (char *)__p;
  if (v26 < 0)
    v19 = v25;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v20, &v20[v19]);
  v21 = *(unsigned __int8 *)(a4 + 23);
  v22 = (char)v21;
  if ((v21 & 0x80u) != 0)
    v21 = *(_QWORD *)(a4 + 8);
  if (v21 == 1)
    goto LABEL_32;
  if (v21 != 12)
  {
    if (v22 < 0)
    {
      **(_BYTE **)a4 = 0;
      *(_QWORD *)(a4 + 8) = 0;
      if ((SHIBYTE(v26) & 0x80000000) == 0)
        return;
LABEL_35:
      operator delete(__p);
      return;
    }
    *(_BYTE *)a4 = 0;
    *(_BYTE *)(a4 + 23) = 0;
LABEL_32:
    if ((SHIBYTE(v26) & 0x80000000) == 0)
      return;
    goto LABEL_35;
  }
  if (v22 >= 0)
    v23 = (_BYTE *)a4;
  else
    v23 = *(_BYTE **)a4;
  v23[11] = v23[3];
  if (SHIBYTE(v26) < 0)
    goto LABEL_35;
}

void sub_20B0AC75C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0AC778()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 2);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0AC7B0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0AC7C4(uint64_t a1, uint64_t a2)
{
  char v2;
  unint64_t v4;
  _BYTE *v5;
  _QWORD *v6;
  _BYTE *v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  size_t v11;
  _BYTE *v12;
  char *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  _BYTE *v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  size_t v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  size_t v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  _OWORD *v31;
  unint64_t v32;
  __int128 v33;
  char *v34;
  _QWORD *v35;
  unint64_t v36;
  uint64_t v37;
  __int128 *v38;
  _OWORD *v39;
  unint64_t v40;
  __int128 v41;
  char *v42;
  _QWORD *v43;
  unint64_t v44;
  uint64_t v45;
  __int128 *v46;
  _OWORD *v47;
  unint64_t v48;
  __int128 v49;
  char *v50;
  _QWORD *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  char v55;
  char *v56;
  char v57;
  char *v58;
  char v59;

  v2 = a2;
  if (!*(_BYTE *)(a1 + 169))
  {
    v6 = (_QWORD *)(a1 + 64);
    v5 = *(_BYTE **)(a1 + 72);
    v16 = *(_QWORD *)(a1 + 80);
    if (*(_BYTE *)(a1 + 170))
    {
      if ((unint64_t)v5 < v16)
        goto LABEL_24;
      v17 = (_BYTE *)*v6;
      v18 = (unint64_t)&v5[-*v6];
      v19 = v18 + 1;
      if ((uint64_t)(v18 + 1) >= 0)
      {
        v20 = v16 - (_QWORD)v17;
        if (2 * v20 > v19)
          v19 = 2 * v20;
        if (v20 >= 0x3FFFFFFFFFFFFFFFLL)
          v21 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v21 = v19;
        if (v21)
        {
          v12 = operator new(v21);
          v13 = &v12[v18];
          v14 = &v12[v21];
          v12[v18] = v2;
          v15 = (uint64_t)&v12[v18 + 1];
          if (v5 == v17)
            goto LABEL_49;
        }
        else
        {
          v12 = 0;
          v13 = &v5[-*v6];
          v14 = 0;
          *(_BYTE *)v18 = a2;
          v15 = v18 + 1;
          if (v5 == v17)
            goto LABEL_49;
        }
        if (v18 >= 8 && (unint64_t)(v17 - v12) >= 0x20)
        {
          if (v18 >= 0x20)
          {
            v28 = v18 & 0xFFFFFFFFFFFFFFE0;
            v38 = (__int128 *)(v5 - 16);
            v39 = &v12[v5 - 16 - v17];
            v40 = v18 & 0xFFFFFFFFFFFFFFE0;
            do
            {
              v41 = *v38;
              *(v39 - 1) = *(v38 - 1);
              *v39 = v41;
              v39 -= 2;
              v38 -= 2;
              v40 -= 32;
            }
            while (v40);
            if (v18 == v28)
              goto LABEL_86;
            if ((v18 & 0x18) == 0)
            {
              v13 -= v28;
              v5 -= v28;
              goto LABEL_80;
            }
          }
          else
          {
            v28 = 0;
          }
          v13 -= v18 & 0xFFFFFFFFFFFFFFF8;
          v42 = &v5[-v28 - 8];
          v43 = &v12[v42 - v17];
          v44 = v28 - (v18 & 0xFFFFFFFFFFFFFFF8);
          do
          {
            v45 = *(_QWORD *)v42;
            v42 -= 8;
            *v43-- = v45;
            v44 += 8;
          }
          while (v44);
          v5 -= v18 & 0xFFFFFFFFFFFFFFF8;
          if (v18 == (v18 & 0xFFFFFFFFFFFFFFF8))
            goto LABEL_86;
        }
LABEL_80:
        v56 = v13 - 1;
        do
        {
          v57 = *--v5;
          *v56-- = v57;
        }
        while (v5 != v17);
        goto LABEL_86;
      }
LABEL_89:
      sub_20AEC60B8();
    }
    if ((unint64_t)v5 < v16)
      goto LABEL_24;
    v23 = (_BYTE *)*v6;
    v24 = (unint64_t)&v5[-*v6];
    v25 = v24 + 1;
    if ((uint64_t)(v24 + 1) < 0)
      goto LABEL_89;
    v26 = v16 - (_QWORD)v23;
    if (2 * v26 > v25)
      v25 = 2 * v26;
    if (v26 >= 0x3FFFFFFFFFFFFFFFLL)
      v27 = 0x7FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      v12 = operator new(v27);
      v13 = &v12[v24];
      v14 = &v12[v27];
      v12[v24] = v2;
      v15 = (uint64_t)&v12[v24 + 1];
      if (v5 == v23)
      {
LABEL_49:
        *(_QWORD *)(a1 + 64) = v13;
        *(_QWORD *)(a1 + 72) = v15;
        *(_QWORD *)(a1 + 80) = v14;
        if (!v5)
          goto LABEL_88;
        goto LABEL_87;
      }
    }
    else
    {
      v12 = 0;
      v13 = &v5[-*v6];
      v14 = 0;
      *(_BYTE *)v24 = a2;
      v15 = v24 + 1;
      if (v5 == v23)
        goto LABEL_49;
    }
    if (v24 >= 8 && (unint64_t)(v23 - v12) >= 0x20)
    {
      if (v24 >= 0x20)
      {
        v29 = v24 & 0xFFFFFFFFFFFFFFE0;
        v46 = (__int128 *)(v5 - 16);
        v47 = &v12[v5 - 16 - v23];
        v48 = v24 & 0xFFFFFFFFFFFFFFE0;
        do
        {
          v49 = *v46;
          *(v47 - 1) = *(v46 - 1);
          *v47 = v49;
          v47 -= 2;
          v46 -= 2;
          v48 -= 32;
        }
        while (v48);
        if (v24 == v29)
          goto LABEL_86;
        if ((v24 & 0x18) == 0)
        {
          v13 -= v29;
          v5 -= v29;
          goto LABEL_84;
        }
      }
      else
      {
        v29 = 0;
      }
      v13 -= v24 & 0xFFFFFFFFFFFFFFF8;
      v50 = &v5[-v29 - 8];
      v51 = &v12[v50 - v23];
      v52 = v29 - (v24 & 0xFFFFFFFFFFFFFFF8);
      do
      {
        v53 = *(_QWORD *)v50;
        v50 -= 8;
        *v51-- = v53;
        v52 += 8;
      }
      while (v52);
      v5 -= v24 & 0xFFFFFFFFFFFFFFF8;
      if (v24 == (v24 & 0xFFFFFFFFFFFFFFF8))
        goto LABEL_86;
    }
LABEL_84:
    v58 = v13 - 1;
    do
    {
      v59 = *--v5;
      *v58-- = v59;
    }
    while (v5 != v23);
    goto LABEL_86;
  }
  v2 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a2);
  v5 = *(_BYTE **)(a1 + 72);
  v4 = *(_QWORD *)(a1 + 80);
  if ((unint64_t)v5 < v4)
  {
LABEL_24:
    *v5 = v2;
    v15 = (uint64_t)(v5 + 1);
    goto LABEL_88;
  }
  v6 = (_QWORD *)(a1 + 64);
  v7 = *(_BYTE **)(a1 + 64);
  v8 = v5 - v7;
  v9 = v5 - v7 + 1;
  if (v9 < 0)
    goto LABEL_89;
  v10 = v4 - (_QWORD)v7;
  if (2 * v10 > v9)
    v9 = 2 * v10;
  if (v10 >= 0x3FFFFFFFFFFFFFFFLL)
    v11 = 0x7FFFFFFFFFFFFFFFLL;
  else
    v11 = v9;
  if (v11)
  {
    v12 = operator new(v11);
    v13 = &v12[v8];
    v14 = &v12[v11];
    v12[v8] = v2;
    v15 = (uint64_t)&v12[v8 + 1];
    if (v5 == v7)
      goto LABEL_49;
  }
  else
  {
    v12 = 0;
    v13 = (char *)(v5 - v7);
    v14 = 0;
    *(_BYTE *)v8 = v2;
    v15 = v8 + 1;
    if (v5 == v7)
      goto LABEL_49;
  }
  if (v8 < 8 || (unint64_t)(v7 - v12) < 0x20)
    goto LABEL_76;
  if (v8 < 0x20)
  {
    v22 = 0;
    goto LABEL_55;
  }
  v22 = v8 & 0xFFFFFFFFFFFFFFE0;
  v30 = (__int128 *)(v5 - 16);
  v31 = &v12[v5 - 16 - v7];
  v32 = v8 & 0xFFFFFFFFFFFFFFE0;
  do
  {
    v33 = *v30;
    *(v31 - 1) = *(v30 - 1);
    *v31 = v33;
    v31 -= 2;
    v30 -= 2;
    v32 -= 32;
  }
  while (v32);
  if (v8 != v22)
  {
    if ((v8 & 0x18) == 0)
    {
      v13 -= v22;
      v5 -= v22;
      goto LABEL_76;
    }
LABEL_55:
    v13 -= v8 & 0xFFFFFFFFFFFFFFF8;
    v34 = &v5[-v22 - 8];
    v35 = &v12[v34 - v7];
    v36 = v22 - (v8 & 0xFFFFFFFFFFFFFFF8);
    do
    {
      v37 = *(_QWORD *)v34;
      v34 -= 8;
      *v35-- = v37;
      v36 += 8;
    }
    while (v36);
    v5 -= v8 & 0xFFFFFFFFFFFFFFF8;
    if (v8 == (v8 & 0xFFFFFFFFFFFFFFF8))
      goto LABEL_86;
LABEL_76:
    v54 = v13 - 1;
    do
    {
      v55 = *--v5;
      *v54-- = v55;
    }
    while (v5 != v7);
  }
LABEL_86:
  v5 = (_BYTE *)*v6;
  *(_QWORD *)(a1 + 64) = v12;
  *(_QWORD *)(a1 + 72) = v15;
  *(_QWORD *)(a1 + 80) = v14;
  if (v5)
LABEL_87:
    operator delete(v5);
LABEL_88:
  *(_QWORD *)(a1 + 72) = v15;
}

void sub_20B0ACC3C(uint64_t a1, uint64_t a2, char *a3)
{
  unint64_t v3;
  _OWORD *p_p;
  _BYTE *v8;
  char *v9;
  __int128 *v10;
  _OWORD *v11;
  unint64_t v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  unint64_t v17;
  char *v18;
  void *__p;
  unint64_t v20;
  int64_t v21;

  v3 = (unint64_t)&a3[-a2];
  if ((unint64_t)&a3[-a2] >= 0x7FFFFFFFFFFFFFF8)
    sub_20AEC0138();
  if (v3 > 0x16)
  {
    v14 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v14 = v3 | 7;
    v15 = v14 + 1;
    p_p = operator new(v14 + 1);
    v20 = v3;
    v21 = v15 | 0x8000000000000000;
    __p = p_p;
    if ((char *)a2 != a3)
      goto LABEL_4;
LABEL_13:
    v8 = p_p;
    goto LABEL_16;
  }
  HIBYTE(v21) = (_BYTE)a3 - a2;
  p_p = &__p;
  if ((char *)a2 == a3)
    goto LABEL_13;
LABEL_4:
  if (v3 < 0x20 || (unint64_t)p_p - a2 < 0x20)
  {
    v8 = p_p;
    v9 = (char *)a2;
  }
  else
  {
    v8 = (char *)p_p + (v3 & 0xFFFFFFFFFFFFFFE0);
    v9 = (char *)(a2 + (v3 & 0xFFFFFFFFFFFFFFE0));
    v10 = (__int128 *)(a2 + 16);
    v11 = p_p + 1;
    v12 = v3 & 0xFFFFFFFFFFFFFFE0;
    do
    {
      v13 = *v10;
      *(v11 - 1) = *(v10 - 1);
      *v11 = v13;
      v10 += 2;
      v11 += 2;
      v12 -= 32;
    }
    while (v12);
    if (v3 == (v3 & 0xFFFFFFFFFFFFFFE0))
      goto LABEL_16;
  }
  do
  {
    v16 = *v9++;
    *v8++ = v16;
  }
  while (v9 != a3);
LABEL_16:
  *v8 = 0;
  v17 = HIBYTE(v21);
  if (v21 >= 0)
    v18 = (char *)&__p;
  else
    v18 = (char *)__p;
  if (v21 < 0)
    v17 = v20;
  (*(void (**)(_QWORD, char *, char *))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), v18, &v18[v17]);
  if (SHIBYTE(v21) < 0)
    operator delete(__p);
}

void sub_20B0ACDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0ACDCC()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 9);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0ACE04(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

char *sub_20B0ACE18(void **a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  char *v11;
  void **v12;
  void **v13;
  __int128 v14;
  __int128 v15;
  void **v16;

  v3 = 0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 4);
  v4 = v3 + 1;
  if (v3 + 1 > 0x555555555555555)
    sub_20B0A90FC();
  if (0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) > v4)
    v4 = 0x5555555555555556 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v6 = 0x555555555555555;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x555555555555555)
      sub_20AEC60CC();
    v7 = (char *)operator new(48 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[48 * v3];
  *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  *(_OWORD *)v8 = *(_OWORD *)a2;
  v9 = &v7[48 * v6];
  v10 = *(_OWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_OWORD *)(v8 + 24) = v10;
  *((_QWORD *)v8 + 5) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a2 + 32) = 0;
  *(_QWORD *)(a2 + 40) = 0;
  v11 = v8 + 48;
  v12 = (void **)*a1;
  v13 = (void **)a1[1];
  if (v13 != *a1)
  {
    do
    {
      v14 = *((_OWORD *)v13 - 3);
      *((_QWORD *)v8 - 4) = *(v13 - 4);
      *((_OWORD *)v8 - 3) = v14;
      *(v13 - 5) = 0;
      *(v13 - 4) = 0;
      *(v13 - 6) = 0;
      v15 = *(_OWORD *)(v13 - 3);
      *((_QWORD *)v8 - 1) = *(v13 - 1);
      *(_OWORD *)(v8 - 24) = v15;
      v8 -= 48;
      *(v13 - 2) = 0;
      *(v13 - 1) = 0;
      *(v13 - 3) = 0;
      v13 -= 6;
    }
    while (v13 != v12);
    v13 = (void **)*a1;
    v16 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v11;
    a1[2] = v9;
    while (1)
    {
      if (v16 == v13)
        goto LABEL_22;
      if (*((char *)v16 - 1) < 0)
      {
        operator delete(*(v16 - 3));
        if ((*((char *)v16 - 25) & 0x80000000) == 0)
          goto LABEL_14;
      }
      else if ((*((char *)v16 - 25) & 0x80000000) == 0)
      {
        goto LABEL_14;
      }
      operator delete(*(v16 - 6));
LABEL_14:
      v16 -= 6;
    }
  }
  *a1 = v8;
  a1[1] = v11;
  a1[2] = v9;
LABEL_22:
  if (v13)
    operator delete(v13);
  return v11;
}

_QWORD *sub_20B0ACFB4(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C40C438;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B0ACFF8(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C40C438;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0AD04C(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(*(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1)) = *(_QWORD *)(a2 + 16);
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20B0AD07C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C40C438;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B0AD0C0(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C40C438;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0AD114(uint64_t result, uint64_t a2)
{
  uint64_t v2;

  *(_DWORD *)a2 = -994;
  v2 = *(_QWORD *)(a2 + 32) + 24 * (*(_DWORD *)(result + 16) - 1);
  *(_QWORD *)(v2 + 8) = *(_QWORD *)(a2 + 16);
  *(_BYTE *)(v2 + 16) = 1;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20B0AD14C(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _QWORD *result;

  v10 = (_QWORD *)operator new();
  v11 = *(_QWORD *)(a1 + 56);
  v12 = *(_QWORD *)(v11 + 8);
  *v10 = &unk_24C40C3C0;
  v10[1] = v12;
  *(_QWORD *)(v11 + 8) = 0;
  v13 = operator new();
  v14 = *(_DWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v13 = &unk_24C40C858;
  *(_QWORD *)(v13 + 8) = v15;
  *(_QWORD *)(v13 + 16) = v10;
  *(_QWORD *)(v13 + 24) = a2;
  *(_QWORD *)(v13 + 32) = -1;
  *(_DWORD *)(v13 + 40) = v14;
  *(_DWORD *)(v13 + 44) = a4;
  *(_DWORD *)(v13 + 48) = a5;
  *(_BYTE *)(v13 + 52) = 0;
  *(_QWORD *)(a3 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &unk_24C40C8E8;
  result[1] = v13;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v13 + 16);
  *(_QWORD *)(a3 + 8) = v13;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_20B0AD260(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B0AD27C(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0AD29C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, int a6, char a7)
{
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *result;

  v14 = (_QWORD *)operator new();
  v15 = *(_QWORD *)(a1 + 56);
  v16 = *(_QWORD *)(v15 + 8);
  *v14 = &unk_24C40C3C0;
  v14[1] = v16;
  *(_QWORD *)(v15 + 8) = 0;
  v17 = operator new();
  v18 = *(_DWORD *)(a1 + 32);
  v19 = *(_QWORD *)(a4 + 8);
  *(_QWORD *)v17 = &unk_24C40C858;
  *(_QWORD *)(v17 + 8) = v19;
  *(_QWORD *)(v17 + 16) = v14;
  *(_QWORD *)(v17 + 24) = a2;
  *(_QWORD *)(v17 + 32) = a3;
  *(_DWORD *)(v17 + 40) = v18;
  *(_DWORD *)(v17 + 44) = a5;
  *(_DWORD *)(v17 + 48) = a6;
  *(_BYTE *)(v17 + 52) = a7;
  *(_QWORD *)(a4 + 8) = 0;
  result = (_QWORD *)operator new();
  *result = &unk_24C40C8E8;
  result[1] = v17;
  *(_QWORD *)(*(_QWORD *)(a1 + 56) + 8) = result;
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v17 + 16);
  *(_QWORD *)(a4 + 8) = v17;
  ++*(_DWORD *)(a1 + 32);
  return result;
}

void sub_20B0AD3BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B0AD3D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B0AD3F8()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 8);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0AD430(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0AD444()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 7);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0AD47C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0AD490(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C40C8B8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C40C438;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20B0AD4F8(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C40C8B8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C40C438;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0AD570(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v8;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  _BYTE *v35;

  v2 = *(unsigned int *)(result + 40);
  v3 = *(_QWORD *)(a2 + 56);
  v4 = (unint64_t *)(v3 + 16 * v2);
  if (*(_DWORD *)a2 != -991)
  {
    *v4 = 0;
    if (!*(_QWORD *)(result + 32))
    {
      *(_DWORD *)a2 = -994;
      goto LABEL_28;
    }
    if (*(_QWORD *)(result + 24))
    {
      *(_DWORD *)a2 = -994;
      *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
      *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
      v20 = *(_DWORD *)(result + 44);
      v21 = *(_DWORD *)(result + 48);
      if (v20 == v21)
        return result;
      v22 = (v21 - 1);
      v23 = (v20 - 1);
      v24 = *(_QWORD *)(a2 + 24);
      v25 = *(_QWORD *)(a2 + 32);
      v26 = v22 - v23;
      if ((unint64_t)(v22 - v23) >= 2)
      {
        v27 = (v26 & 0xFFFFFFFFFFFFFFFELL) + v23;
        v28 = v25 + 24 * v23 + 24;
        v29 = v26 & 0xFFFFFFFFFFFFFFFELL;
        do
        {
          *(_QWORD *)(v28 - 24) = v24;
          *(_QWORD *)(v28 - 16) = v24;
          *(_QWORD *)v28 = v24;
          *(_QWORD *)(v28 + 8) = v24;
          *(_BYTE *)(v28 - 8) = 0;
          *(_BYTE *)(v28 + 16) = 0;
          v28 += 48;
          v29 -= 2;
        }
        while (v29);
        if (v26 == (v26 & 0xFFFFFFFFFFFFFFFELL))
          return result;
      }
      else
      {
        v27 = v23;
      }
      v30 = v22 - v27;
      v31 = (_BYTE *)(v25 + 24 * v27 + 16);
      do
      {
        *((_QWORD *)v31 - 2) = v24;
        *((_QWORD *)v31 - 1) = v24;
        *v31 = 0;
        v31 += 24;
        --v30;
      }
      while (v30);
      return result;
    }
LABEL_26:
    *(_DWORD *)a2 = -992;
    return result;
  }
  v5 = *v4 + 1;
  *v4 = v5;
  v6 = *(_QWORD *)(result + 24);
  v7 = *(_QWORD *)(result + 32);
  v8 = v5 < v7;
  if (v5 < v7 && v5 >= v6)
    v8 = v5 < v7 && *(_QWORD *)(v3 + 16 * v2 + 8) != *(_QWORD *)(a2 + 16);
  if (v8 && v5 >= v6)
    goto LABEL_26;
  *(_DWORD *)a2 = -994;
  if (!v8)
  {
LABEL_28:
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  *(_QWORD *)(v3 + 16 * v2 + 8) = *(_QWORD *)(a2 + 16);
  v12 = *(_DWORD *)(result + 44);
  v13 = *(_DWORD *)(result + 48);
  if (v12 == v13)
    return result;
  v14 = (v13 - 1);
  v15 = (v12 - 1);
  v16 = *(_QWORD *)(a2 + 24);
  v17 = *(_QWORD *)(a2 + 32);
  v18 = v14 - v15;
  if ((unint64_t)(v14 - v15) < 2)
  {
    v19 = v15;
LABEL_39:
    v34 = v14 - v19;
    v35 = (_BYTE *)(v17 + 24 * v19 + 16);
    do
    {
      *((_QWORD *)v35 - 2) = v16;
      *((_QWORD *)v35 - 1) = v16;
      *v35 = 0;
      v35 += 24;
      --v34;
    }
    while (v34);
    return result;
  }
  v19 = (v18 & 0xFFFFFFFFFFFFFFFELL) + v15;
  v32 = v17 + 24 * v15 + 24;
  v33 = v18 & 0xFFFFFFFFFFFFFFFELL;
  do
  {
    *(_QWORD *)(v32 - 24) = v16;
    *(_QWORD *)(v32 - 16) = v16;
    *(_QWORD *)v32 = v16;
    *(_QWORD *)(v32 + 8) = v16;
    *(_BYTE *)(v32 - 8) = 0;
    *(_BYTE *)(v32 + 16) = 0;
    v32 += 48;
    v33 -= 2;
  }
  while (v33);
  if (v18 != (v18 & 0xFFFFFFFFFFFFFFFELL))
    goto LABEL_39;
  return result;
}

uint64_t sub_20B0AD754(uint64_t result, int a2, uint64_t a3)
{
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  _BYTE *v14;

  *(_DWORD *)a3 = -994;
  if (*(unsigned __int8 *)(result + 52) == a2)
  {
    *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 16);
    return result;
  }
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + 8);
  v3 = *(_DWORD *)(result + 44);
  *(_QWORD *)(*(_QWORD *)(a3 + 56) + 16 * *(unsigned int *)(result + 40) + 8) = *(_QWORD *)(a3 + 16);
  v4 = *(_DWORD *)(result + 48);
  if (v3 != v4)
  {
    v5 = (v4 - 1);
    v6 = (v3 - 1);
    v7 = *(_QWORD *)(a3 + 24);
    v8 = *(_QWORD *)(a3 + 32);
    v9 = v5 - v6;
    if ((unint64_t)(v5 - v6) < 2)
    {
      v10 = v6;
LABEL_9:
      v13 = v5 - v10;
      v14 = (_BYTE *)(v8 + 24 * v10 + 16);
      do
      {
        *((_QWORD *)v14 - 2) = v7;
        *((_QWORD *)v14 - 1) = v7;
        *v14 = 0;
        v14 += 24;
        --v13;
      }
      while (v13);
      return result;
    }
    v10 = (v9 & 0xFFFFFFFFFFFFFFFELL) + v6;
    v11 = v8 + 24 * v6 + 24;
    v12 = v9 & 0xFFFFFFFFFFFFFFFELL;
    do
    {
      *(_QWORD *)(v11 - 24) = v7;
      *(_QWORD *)(v11 - 16) = v7;
      *(_QWORD *)v11 = v7;
      *(_QWORD *)(v11 + 8) = v7;
      *(_BYTE *)(v11 - 8) = 0;
      *(_BYTE *)(v11 + 16) = 0;
      v11 += 48;
      v12 -= 2;
    }
    while (v12);
    if (v9 != (v9 & 0xFFFFFFFFFFFFFFFELL))
      goto LABEL_9;
  }
  return result;
}

_QWORD *sub_20B0AD81C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C40C8B8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C40C438;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20B0AD884(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C40C8B8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C40C438;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0AD900()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0AD914(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -991;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

_QWORD *sub_20B0AD928(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C40C8B8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C40C438;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  return a1;
}

void sub_20B0AD990(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  *a1 = &unk_24C40C8B8;
  v2 = a1[2];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  *a1 = &unk_24C40C438;
  v3 = a1[1];
  if (v3)
    (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0ADA08(uint64_t a1, _DWORD *a2)
{
  *a2 = -992;
}

uint64_t sub_20B0ADA14(uint64_t result, int a2, uint64_t a3)
{
  uint64_t v3;

  *(_DWORD *)a3 = -994;
  v3 = 8;
  if (a2)
    v3 = 16;
  *(_QWORD *)(a3 + 80) = *(_QWORD *)(result + v3);
  return result;
}

void sub_20B0ADA3C()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0ADA50(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = -994;
  *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  return result;
}

void sub_20B0ADA64()
{
  void *exception;

  exception = __cxa_allocate_exception(0x18uLL);
  MEMORY[0x20BD35044](exception, 15);
  __cxa_throw(exception, MEMORY[0x24BEDB6D0], MEMORY[0x24BEDABD0]);
}

void sub_20B0ADA9C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0ADAB0(_QWORD *a1)
{
  uint64_t v2;

  *a1 = &unk_24C40C438;
  v2 = a1[1];
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_20B0ADAF4(_QWORD *a1)
{
  uint64_t v1;

  *a1 = &unk_24C40C438;
  v1 = a1[1];
  if (v1)
    (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0ADB48(uint64_t result, uint64_t a2)
{
  _BYTE *v2;

  v2 = *(_BYTE **)(a2 + 16);
  if (v2 == *(_BYTE **)(a2 + 24) || !*v2)
  {
    *(_DWORD *)a2 = -993;
    *(_QWORD *)(a2 + 80) = 0;
  }
  else
  {
    *(_DWORD *)a2 = -995;
    *(_QWORD *)(a2 + 16) = v2 + 1;
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(result + 8);
  }
  return result;
}

uint64_t sub_20B0ADB88(uint64_t a1, unsigned __int8 a2)
{
  if ((a2 & 0xF8) != 0x30 && (a2 & 0xFE) != 0x38 || a2 - 49 > 8)
    return 0;
  if (a2 - 48 > *(_DWORD *)(a1 + 28))
    sub_20B0A9BD4();
  sub_20B0A9C20(a1, a2 - 48);
  return 1;
}

uint64_t sub_20B0ADBE8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v9;
  int v10;
  __int128 *v11;
  int v12;
  uint64_t i;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t result;

  if ((a5 & 0x80) != 0)
    v9 = a5 & 0xFFA;
  else
    v9 = a5;
  v10 = *(_DWORD *)(a1 + 28);
  *(_QWORD *)(a4 + 24) = a3;
  v11 = (__int128 *)(a4 + 24);
  *(_QWORD *)(a4 + 32) = a3;
  *(_BYTE *)(a4 + 40) = 0;
  sub_20B0A8F64(a4, (v10 + 1), (__int128 *)(a4 + 24));
  *(_QWORD *)(a4 + 48) = a2;
  *(_QWORD *)(a4 + 56) = a2;
  *(_BYTE *)(a4 + 64) = 0;
  *(_OWORD *)(a4 + 72) = *v11;
  *(_BYTE *)(a4 + 88) = *(_BYTE *)(a4 + 40);
  if ((v9 & 0x800) == 0)
    *(_QWORD *)(a4 + 104) = a2;
  *(_BYTE *)(a4 + 96) = 1;
  if ((*(_WORD *)(a1 + 24) & 0x1F0) == 0)
  {
    if ((sub_20B0A8AF0(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0) & 1) != 0)
      goto LABEL_28;
    goto LABEL_13;
  }
  if (*(_DWORD *)(a1 + 28))
  {
    if (sub_20B0AE800(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0))
      goto LABEL_28;
LABEL_13:
    if (a2 != a3 && (v9 & 0x40) == 0)
    {
      v12 = v9 | 0x80;
      for (i = a2 + 1; i != a3; ++i)
      {
        sub_20B0A8F64(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
        if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
        {
          if (*(_DWORD *)(a1 + 28))
          {
            if (sub_20B0AE800(a1, i, a3, (uint64_t *)a4, v12, 0))
              goto LABEL_28;
          }
          else if ((sub_20B0ADEF4(a1, i, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
          {
            goto LABEL_28;
          }
        }
        else if ((sub_20B0A8AF0(a1, i, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
        sub_20B0A8F64(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
      }
      sub_20B0A8F64(a4, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a4 + 8) - *(_QWORD *)a4) >> 3), v11);
      if ((*(_WORD *)(a1 + 24) & 0x1F0) != 0)
      {
        if (*(_DWORD *)(a1 + 28))
        {
          if (sub_20B0AE800(a1, a3, a3, (uint64_t *)a4, v12, 0))
            goto LABEL_28;
        }
        else if ((sub_20B0ADEF4(a1, a3, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
        {
          goto LABEL_28;
        }
      }
      else if ((sub_20B0A8AF0(a1, a3, a3, (uint64_t *)a4, v12, 0) & 1) != 0)
      {
        goto LABEL_28;
      }
    }
    result = 0;
    *(_QWORD *)(a4 + 8) = *(_QWORD *)a4;
    return result;
  }
  if ((sub_20B0ADEF4(a1, a2, a3, (uint64_t *)a4, v9, (v9 & 0x800) == 0) & 1) == 0)
    goto LABEL_13;
LABEL_28:
  if (*(_QWORD *)(a4 + 8) == *(_QWORD *)a4)
    v14 = v11;
  else
    v14 = *(__int128 **)a4;
  v15 = *(_QWORD *)v14;
  *(_QWORD *)(a4 + 56) = *(_QWORD *)v14;
  *(_BYTE *)(a4 + 64) = *(_QWORD *)(a4 + 48) != v15;
  v16 = *((_QWORD *)v14 + 1);
  *(_QWORD *)(a4 + 72) = v16;
  *(_BYTE *)(a4 + 88) = v16 != *(_QWORD *)(a4 + 80);
  return 1;
}

uint64_t sub_20B0ADEF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  unint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  unint64_t v44;
  void *v45;
  void *v46;
  uint64_t v47;
  __int128 v48;
  unint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  __int128 v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t v61;
  __int128 v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  uint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  unint64_t v70;
  void *v71;
  void *v72;
  _QWORD *v73;
  unint64_t v74;
  uint64_t v75;
  unint64_t v76;
  void *v77;
  void *v78;
  uint64_t v79;
  __int128 v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  void **v84;
  void **v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  void *v89;
  uint64_t *v91;
  uint64_t v92;
  char v93;
  _BYTE v96[56];
  void *__p[2];
  _QWORD v98[3];
  __int128 v99;
  __int128 v100;
  __int128 v101;

  v100 = 0u;
  v101 = 0u;
  v99 = 0u;
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
  {
LABEL_79:
    v84 = (void **)*((_QWORD *)&v99 + 1);
    v85 = (void **)v100;
    *((_QWORD *)&v101 + 1) = 0;
    v86 = v100 - *((_QWORD *)&v99 + 1);
    if ((_QWORD)v100 - *((_QWORD *)&v99 + 1) < 0x11uLL)
      goto LABEL_81;
    do
    {
LABEL_80:
      operator delete(*v84);
      v85 = (void **)v100;
      v84 = (void **)(*((_QWORD *)&v99 + 1) + 8);
      *((_QWORD *)&v99 + 1) = v84;
      v86 = v100 - (_QWORD)v84;
    }
    while ((_QWORD)v100 - (_QWORD)v84 > 0x10uLL);
    goto LABEL_81;
  }
  *(_DWORD *)v96 = 0;
  memset(&v96[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v98, 0, 21);
  sub_20B0AEFB0((uint64_t)&v99);
  v11 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (((_QWORD)v101 + *((_QWORD *)&v101 + 1)) / 0x2AuLL))
      + 96 * (((_QWORD)v101 + *((_QWORD *)&v101 + 1)) % 0x2AuLL);
  v12 = *(_OWORD *)&v96[16];
  *(_OWORD *)v11 = *(_OWORD *)v96;
  *(_OWORD *)(v11 + 16) = v12;
  *(_QWORD *)(v11 + 40) = 0;
  *(_QWORD *)(v11 + 48) = 0;
  *(_QWORD *)(v11 + 32) = 0;
  memset(&v96[32], 0, 24);
  *(_QWORD *)(v11 + 56) = 0;
  *(_QWORD *)(v11 + 64) = 0;
  *(_QWORD *)(v11 + 72) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v98[0] = 0;
  v13 = v98[1];
  *(_QWORD *)(v11 + 85) = *(_QWORD *)((char *)&v98[1] + 5);
  *(_QWORD *)(v11 + 80) = v13;
  v15 = *((_QWORD *)&v101 + 1);
  v14 = v101;
  v16 = ++*((_QWORD *)&v101 + 1);
  v17 = *((_QWORD *)&v99 + 1);
  v18 = *(unsigned int *)(a1 + 32);
  v19 = v101 + v15;
  v20 = 8 * (v19 / 0x2A);
  v21 = 96 * (v19 % 0x2A);
  v22 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + v20) + v21;
  *(_DWORD *)v22 = 0;
  *(_QWORD *)(v22 + 8) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 16) = a2;
  *(_QWORD *)(*(_QWORD *)(v17 + v20) + v21 + 24) = a3;
  v23 = *(_QWORD *)(v17 + v20) + v21;
  v26 = *(_QWORD *)(v23 + 56);
  v24 = v23 + 56;
  v25 = v26;
  v27 = (*(_QWORD *)(v24 + 8) - v26) >> 4;
  v91 = a4;
  if (v18 <= v27)
  {
    if (v18 < v27)
      *(_QWORD *)(v24 + 8) = v25 + 16 * v18;
  }
  else
  {
    sub_20B0A95D8((char **)v24, v18 - v27);
    v16 = *((_QWORD *)&v101 + 1);
    v14 = v101;
    v17 = *((_QWORD *)&v99 + 1);
  }
  v93 = 0;
  v28 = 0;
  v92 = 0;
  v29 = v14 + v16 - 1;
  v30 = 8 * (v29 / 0x2A);
  v31 = 96 * (v29 % 0x2A);
  *(_QWORD *)(*(_QWORD *)(v17 + v30) + v31 + 80) = v6;
  v32 = a3 - a2;
  v33 = *(_QWORD *)(v17 + v30) + v31;
  *(_DWORD *)(v33 + 88) = a5;
  *(_BYTE *)(v33 + 92) = a6;
  while (2)
  {
    if ((++v28 & 0xFFF) == 0 && (int)(v28 >> 12) >= (int)v32)
      sub_20B0A9150();
    v35 = v16 + v101 - 1;
    v36 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v35 / 0x2A));
    v37 = v35 % 0x2A;
    v38 = v36 + 96 * (v35 % 0x2A);
    v40 = (_QWORD *)(v38 + 80);
    v39 = *(_QWORD *)(v38 + 80);
    if (v39)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v39 + 16))(v39, v36 + 96 * v37);
    switch(*(_DWORD *)v38)
    {
      case 0xFFFFFC18:
        v41 = *(_QWORD *)(v36 + 96 * v37 + 16);
        if ((a5 & 0x20) != 0 && v41 == a2 || (a5 & 0x1000) != 0 && v41 != a3)
          goto LABEL_21;
        v64 = v41 - *(_QWORD *)(v36 + 96 * v37 + 8);
        v65 = v92;
        if ((v93 & (v92 >= v64)) == 0)
          v65 = v64;
        if (v65 == v32)
        {
          v66 = (void **)*((_QWORD *)&v99 + 1);
          v67 = v100;
          if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          {
            *((_QWORD *)&v101 + 1) = 0;
            v81 = 0;
          }
          else
          {
            v68 = (_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((unint64_t)v101 / 0x2A));
            v69 = (_QWORD *)(*v68 + 96 * ((unint64_t)v101 % 0x2A));
            v70 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) / 0x2AuLL))
                + 96 * ((*((_QWORD *)&v101 + 1) + (_QWORD)v101) % 0x2AuLL);
            if (v69 != (_QWORD *)v70)
            {
              do
              {
                v71 = (void *)v69[7];
                if (v71)
                {
                  v69[8] = v71;
                  operator delete(v71);
                }
                v72 = (void *)v69[4];
                if (v72)
                {
                  v69[5] = v72;
                  operator delete(v72);
                }
                v69 += 12;
                if ((_QWORD *)((char *)v69 - *v68) == (_QWORD *)4032)
                {
                  v73 = (_QWORD *)v68[1];
                  ++v68;
                  v69 = v73;
                }
              }
              while (v69 != (_QWORD *)v70);
              v66 = (void **)*((_QWORD *)&v99 + 1);
              v67 = v100;
            }
            *((_QWORD *)&v101 + 1) = 0;
            v81 = v67 - (_QWORD)v66;
            if (v81 >= 0x11)
            {
              do
              {
                operator delete(*v66);
                v66 = (void **)(*((_QWORD *)&v99 + 1) + 8);
                *((_QWORD *)&v99 + 1) = v66;
                v81 = v100 - (_QWORD)v66;
              }
              while ((_QWORD)v100 - (_QWORD)v66 > 0x10uLL);
            }
          }
          if (v81 >> 3 == 1)
          {
            v82 = 21;
          }
          else
          {
            if (v81 >> 3 != 2)
            {
LABEL_76:
              v93 = 1;
              v92 = a3 - a2;
              goto LABEL_8;
            }
            v82 = 42;
          }
          *(_QWORD *)&v101 = v82;
          goto LABEL_76;
        }
        v92 = v65;
        v74 = *((_QWORD *)&v101 + 1) + v101 - 1;
        v75 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v74 / 0x2A));
        v76 = v74 % 0x2A;
        v77 = *(void **)(v75 + 96 * (v74 % 0x2A) + 56);
        if (v77)
        {
          *(_QWORD *)(v75 + 96 * v76 + 64) = v77;
          operator delete(v77);
        }
        v78 = *(void **)(v75 + 96 * v76 + 32);
        if (v78)
        {
          *(_QWORD *)(v75 + 96 * v76 + 40) = v78;
          operator delete(v78);
        }
        v79 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v80 = v101;
        --*((_QWORD *)&v101 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v79 = 0;
        if ((unint64_t)(v79 - (*((_QWORD *)&v80 + 1) + v80) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(_QWORD *)&v100 = v100 - 8;
        }
        v93 = 1;
LABEL_8:
        v16 = *((_QWORD *)&v101 + 1);
        if (*((_QWORD *)&v101 + 1))
          continue;
        if ((v93 & 1) != 0)
        {
          v83 = *v91;
          *(_QWORD *)v83 = a2;
          *(_QWORD *)(v83 + 8) = a2 + v92;
          v6 = 1;
          *(_BYTE *)(v83 + 16) = 1;
          goto LABEL_79;
        }
        v6 = 0;
        v84 = (void **)*((_QWORD *)&v99 + 1);
        v85 = (void **)v100;
        *((_QWORD *)&v101 + 1) = 0;
        v86 = v100 - *((_QWORD *)&v99 + 1);
        if ((_QWORD)v100 - *((_QWORD *)&v99 + 1) >= 0x11uLL)
          goto LABEL_80;
LABEL_81:
        v87 = v86 >> 3;
        if (v87 == 1)
        {
          v88 = 21;
LABEL_85:
          *(_QWORD *)&v101 = v88;
        }
        else if (v87 == 2)
        {
          v88 = 42;
          goto LABEL_85;
        }
        if (v84 != v85)
        {
          do
          {
            v89 = *v84++;
            operator delete(v89);
          }
          while (v84 != v85);
          if ((_QWORD)v100 != *((_QWORD *)&v99 + 1))
            *(_QWORD *)&v100 = v100 + ((*((_QWORD *)&v99 + 1) - v100 + 7) & 0xFFFFFFFFFFFFFFF8);
        }
        if ((_QWORD)v99)
          operator delete((void *)v99);
        return v6;
      case 0xFFFFFC19:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        goto LABEL_8;
      case 0xFFFFFC1D:
        v49 = v101;
        if (!(_QWORD)v101)
        {
          sub_20B0AF550((uint64_t)&v99);
          v49 = v101;
        }
        v50 = (_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v49 / 0x2A));
        v51 = *v50 + 96 * (v49 % 0x2A);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v51 = 0;
        if (v51 == *v50)
          v51 = *(v50 - 1) + 4032;
        v52 = *(_OWORD *)(v38 + 16);
        *(_OWORD *)(v51 - 96) = *(_OWORD *)v38;
        *(_OWORD *)(v51 - 80) = v52;
        v53 = v36 + 96 * v37;
        *(_QWORD *)(v51 - 56) = 0;
        *(_QWORD *)(v51 - 48) = 0;
        *(_QWORD *)(v51 - 64) = 0;
        *(_OWORD *)(v51 - 64) = *(_OWORD *)(v53 + 32);
        *(_QWORD *)(v51 - 48) = *(_QWORD *)(v53 + 48);
        *(_QWORD *)(v53 + 32) = 0;
        *(_QWORD *)(v53 + 40) = 0;
        *(_QWORD *)(v53 + 48) = 0;
        *(_QWORD *)(v51 - 40) = 0;
        *(_QWORD *)(v51 - 32) = 0;
        *(_QWORD *)(v51 - 24) = 0;
        *(_OWORD *)(v51 - 40) = *(_OWORD *)(v53 + 56);
        *(_QWORD *)(v51 - 24) = *(_QWORD *)(v53 + 72);
        *(_QWORD *)(v53 + 56) = 0;
        *(_QWORD *)(v53 + 64) = 0;
        *(_QWORD *)(v53 + 72) = 0;
        v54 = *v40;
        *(_QWORD *)(v51 - 11) = *(_QWORD *)(v38 + 85);
        *(_QWORD *)(v51 - 16) = v54;
        v55 = *((_QWORD *)&v101 + 1);
        *(_QWORD *)&v101 = v101 - 1;
        ++*((_QWORD *)&v101 + 1);
        v56 = v55 + v101;
        v57 = (v55 + (uint64_t)v101) / 0x2AuLL;
        v43 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * v57);
        v44 = v56 - 42 * v57;
        v45 = *(void **)(v43 + 96 * v44 + 56);
        if (!v45)
          goto LABEL_23;
        goto LABEL_22;
      case 0xFFFFFC1F:
LABEL_21:
        v42 = *((_QWORD *)&v101 + 1) + v101 - 1;
        v43 = *(_QWORD *)(*((_QWORD *)&v99 + 1) + 8 * (v42 / 0x2A));
        v44 = v42 % 0x2A;
        v45 = *(void **)(v43 + 96 * (v42 % 0x2A) + 56);
        if (v45)
        {
LABEL_22:
          *(_QWORD *)(v43 + 96 * v44 + 64) = v45;
          operator delete(v45);
        }
LABEL_23:
        v46 = *(void **)(v43 + 96 * v44 + 32);
        if (v46)
        {
          *(_QWORD *)(v43 + 96 * v44 + 40) = v46;
          operator delete(v46);
        }
        v47 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v48 = v101;
        --*((_QWORD *)&v101 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v47 = 0;
        if ((unint64_t)(v47 - (*((_QWORD *)&v48 + 1) + v48) + 1) >= 0x54)
        {
          operator delete(*(void **)(v100 - 8));
          *(_QWORD *)&v100 = v100 - 8;
        }
        goto LABEL_8;
      case 0xFFFFFC20:
        sub_20B0A9700((uint64_t)v96, (__int128 *)(v36 + 96 * v37));
        (*(void (**)(_QWORD, uint64_t, unint64_t))(*(_QWORD *)*v40 + 24))(*v40, 1, v36 + 96 * v37);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v98[1] + 24))(v98[1], 0, v96);
        v58 = *((_QWORD *)&v99 + 1);
        if ((_QWORD)v100 == *((_QWORD *)&v99 + 1))
          v59 = 0;
        else
          v59 = 42 * ((uint64_t)(v100 - *((_QWORD *)&v99 + 1)) >> 3) - 1;
        v60 = *((_QWORD *)&v101 + 1) + v101;
        if (v59 == *((_QWORD *)&v101 + 1) + (_QWORD)v101)
        {
          sub_20B0AEFB0((uint64_t)&v99);
          v58 = *((_QWORD *)&v99 + 1);
          v60 = *((_QWORD *)&v101 + 1) + v101;
        }
        v61 = *(_QWORD *)(v58 + 8 * (v60 / 0x2A)) + 96 * (v60 % 0x2A);
        v62 = *(_OWORD *)&v96[16];
        *(_OWORD *)v61 = *(_OWORD *)v96;
        *(_OWORD *)(v61 + 16) = v62;
        *(_QWORD *)(v61 + 40) = 0;
        *(_QWORD *)(v61 + 48) = 0;
        *(_QWORD *)(v61 + 32) = 0;
        *(_OWORD *)(v61 + 32) = *(_OWORD *)&v96[32];
        *(_QWORD *)(v61 + 48) = *(_QWORD *)&v96[48];
        memset(&v96[32], 0, 24);
        *(_QWORD *)(v61 + 56) = 0;
        *(_QWORD *)(v61 + 64) = 0;
        *(_QWORD *)(v61 + 72) = 0;
        *(_OWORD *)(v61 + 56) = *(_OWORD *)__p;
        *(_QWORD *)(v61 + 72) = v98[0];
        __p[0] = 0;
        __p[1] = 0;
        v98[0] = 0;
        v63 = v98[1];
        *(_QWORD *)(v61 + 85) = *(_QWORD *)((char *)&v98[1] + 5);
        *(_QWORD *)(v61 + 80) = v63;
        ++*((_QWORD *)&v101 + 1);
        if (__p[0])
        {
          __p[1] = __p[0];
          operator delete(__p[0]);
        }
        if (*(_QWORD *)&v96[32])
        {
          *(_QWORD *)&v96[40] = *(_QWORD *)&v96[32];
          operator delete(*(void **)&v96[32]);
        }
        goto LABEL_8;
      default:
        sub_20B0A919C();
    }
  }
}

void sub_20B0AE77C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B0AEF3C((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_20B0AE790(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  uint64_t v11;
  va_list va;

  va_start(va, a11);
  sub_20B0A9110((uint64_t *)va);
  sub_20B0AEF3C((void **)(v11 - 144));
  _Unwind_Resume(a1);
}

void sub_20B0AE7D8(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B0AEF3C((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

void sub_20B0AE7EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B0AEF3C((void **)(v1 - 144));
  _Unwind_Resume(a1);
}

uint64_t sub_20B0AE800(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, int a5, char a6)
{
  uint64_t v6;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  char *v24;
  char *v25;
  uint64_t v26;
  char *v27;
  void *v28;
  void *v29;
  char *v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  void *v36;
  char *v37;
  char *v38;
  void *v39;
  void *v40;
  void *v41;
  void *v42;
  uint64_t v43;
  unint64_t v44;
  _BYTE *v45;
  unsigned int v46;
  uint64_t v47;
  char v48;
  uint64_t v49;
  void *v50;
  char *v51;
  char *v52;
  char *v53;
  void *v54;
  void *v55;
  uint64_t *v57;
  uint64_t v58;
  char v59;
  _BYTE v61[56];
  void *__p[2];
  _QWORD v63[3];
  __int128 v64;
  char v65;
  _BYTE v66[40];
  __int128 v67;
  void *v68[6];
  char *v69;
  char *v70;
  unint64_t v71;

  v69 = 0;
  v70 = 0;
  v71 = 0;
  *(_DWORD *)v66 = 0;
  memset(&v66[8], 0, 32);
  v67 = 0u;
  memset(v68, 0, 37);
  v6 = *(_QWORD *)(a1 + 40);
  if (!v6)
    goto LABEL_63;
  *(_QWORD *)&v64 = a3;
  *((_QWORD *)&v64 + 1) = a3;
  v65 = 0;
  *(_DWORD *)v61 = 0;
  memset(&v61[8], 0, 48);
  *(_OWORD *)__p = 0uLL;
  memset(v63, 0, 21);
  v70 = sub_20B0A9268((void **)&v69, (uint64_t)v61);
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (*(_QWORD *)&v61[32])
  {
    *(_QWORD *)&v61[40] = *(_QWORD *)&v61[32];
    operator delete(*(void **)&v61[32]);
  }
  v12 = v70;
  *((_DWORD *)v70 - 24) = 0;
  *((_QWORD *)v12 - 11) = a2;
  *((_QWORD *)v12 - 10) = a2;
  *((_QWORD *)v12 - 9) = a3;
  v13 = *((_QWORD *)v12 - 8);
  v14 = *(unsigned int *)(a1 + 28);
  v15 = 0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)v12 - 7) - v13) >> 3);
  if (v14 <= v15)
  {
    if (v14 < v15)
      *((_QWORD *)v12 - 7) = v13 + 24 * v14;
  }
  else
  {
    sub_20B0A9438((void **)v12 - 8, v14 - v15, &v64);
    v12 = v70;
  }
  v16 = *((_QWORD *)v12 - 5);
  v17 = *(unsigned int *)(a1 + 32);
  v18 = (*((_QWORD *)v12 - 4) - v16) >> 4;
  v57 = a4;
  if (v17 <= v18)
  {
    if (v17 < v18)
      *((_QWORD *)v12 - 4) = v16 + 16 * v17;
  }
  else
  {
    sub_20B0A95D8((char **)v12 - 5, v17 - v18);
    v12 = v70;
  }
  v19 = 0;
  v59 = 0;
  v20 = 0;
  v21 = a3 - a2;
  *((_QWORD *)v12 - 2) = v6;
  *((_DWORD *)v12 - 2) = a5;
  v58 = a3;
  *(v12 - 4) = a6;
  do
  {
    v22 = (++v20 & 0xFFF) != 0 || (int)(v20 >> 12) < (int)v21;
    if (!v22)
      sub_20B0A9150();
    v24 = v12 - 16;
    v23 = *((_QWORD *)v12 - 2);
    v25 = v12 - 96;
    if (v23)
      (*(void (**)(uint64_t, char *))(*(_QWORD *)v23 + 16))(v23, v12 - 96);
    switch(*(_DWORD *)v25)
    {
      case 0xFFFFFC18:
        v26 = *((_QWORD *)v12 - 10);
        if ((a5 & 0x20) != 0 && v26 == a2 || (a5 & 0x1000) != 0 && v26 != v58)
          goto LABEL_29;
        v33 = v19;
        v34 = v26 - *((_QWORD *)v12 - 11);
        if ((v59 & (v33 >= v34)) == 0)
        {
          v35 = *(_OWORD *)v25;
          *(_OWORD *)&v66[16] = *((_OWORD *)v12 - 5);
          *(_OWORD *)v66 = v35;
          if (v66 != v25)
          {
            sub_20B0AF908((char **)&v66[32], *((char **)v12 - 8), *((char **)v12 - 7), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)v12 - 7) - *((_QWORD *)v12 - 8)) >> 3));
            sub_20B0AFB04((double **)v68, *((_QWORD *)v12 - 5), *((char **)v12 - 4), (uint64_t)(*((_QWORD *)v12 - 4) - *((_QWORD *)v12 - 5)) >> 4);
          }
          v36 = *(void **)v24;
          *(void **)((char *)&v68[3] + 5) = *(void **)(v12 - 11);
          v68[3] = v36;
          v33 = v34;
        }
        v37 = v70;
        if (v33 == v21)
        {
          v38 = v69;
          while (v37 != v38)
          {
            v39 = (void *)*((_QWORD *)v37 - 5);
            if (v39)
            {
              *((_QWORD *)v37 - 4) = v39;
              operator delete(v39);
            }
            v40 = (void *)*((_QWORD *)v37 - 8);
            if (v40)
            {
              *((_QWORD *)v37 - 7) = v40;
              operator delete(v40);
            }
            v37 -= 96;
          }
          v70 = v38;
          v59 = 1;
          v19 = v21;
        }
        else
        {
          v19 = v33;
          v41 = (void *)*((_QWORD *)v70 - 5);
          if (v41)
          {
            *((_QWORD *)v70 - 4) = v41;
            operator delete(v41);
          }
          v42 = (void *)*((_QWORD *)v37 - 8);
          if (v42)
          {
            *((_QWORD *)v37 - 7) = v42;
            operator delete(v42);
          }
          v70 = v37 - 96;
          v59 = 1;
        }
        break;
      case 0xFFFFFC1D:
      case 0xFFFFFC1E:
      case 0xFFFFFC21:
        break;
      case 0xFFFFFC1F:
LABEL_29:
        v27 = v70;
        v28 = (void *)*((_QWORD *)v70 - 5);
        if (v28)
        {
          *((_QWORD *)v70 - 4) = v28;
          operator delete(v28);
        }
        v29 = (void *)*((_QWORD *)v27 - 8);
        if (v29)
        {
          *((_QWORD *)v27 - 7) = v29;
          operator delete(v29);
        }
        v70 = v27 - 96;
        break;
      case 0xFFFFFC20:
        sub_20B0A9700((uint64_t)v61, (__int128 *)v12 - 6);
        (*(void (**)(_QWORD, uint64_t, char *))(**(_QWORD **)v24 + 24))(*(_QWORD *)v24, 1, v12 - 96);
        (*(void (**)(_QWORD, _QWORD, _BYTE *))(*(_QWORD *)v63[1] + 24))(v63[1], 0, v61);
        v30 = v70;
        if ((unint64_t)v70 >= v71)
        {
          v70 = sub_20B0A9268((void **)&v69, (uint64_t)v61);
          if (__p[0])
          {
            __p[1] = __p[0];
            operator delete(__p[0]);
          }
        }
        else
        {
          v31 = *(_OWORD *)&v61[16];
          *(_OWORD *)v70 = *(_OWORD *)v61;
          *((_OWORD *)v30 + 1) = v31;
          *((_QWORD *)v30 + 4) = 0;
          *((_QWORD *)v30 + 5) = 0;
          *((_QWORD *)v30 + 6) = 0;
          *((_QWORD *)v30 + 7) = 0;
          *((_OWORD *)v30 + 2) = *(_OWORD *)&v61[32];
          *((_QWORD *)v30 + 6) = *(_QWORD *)&v61[48];
          memset(&v61[32], 0, 24);
          *((_QWORD *)v30 + 8) = 0;
          *((_QWORD *)v30 + 9) = 0;
          *(_OWORD *)(v30 + 56) = *(_OWORD *)__p;
          *((_QWORD *)v30 + 9) = v63[0];
          __p[0] = 0;
          __p[1] = 0;
          v63[0] = 0;
          v32 = v63[1];
          *(_QWORD *)(v30 + 85) = *(_QWORD *)((char *)&v63[1] + 5);
          *((_QWORD *)v30 + 10) = v32;
          v70 = v30 + 96;
        }
        if (*(_QWORD *)&v61[32])
        {
          *(_QWORD *)&v61[40] = *(_QWORD *)&v61[32];
          operator delete(*(void **)&v61[32]);
        }
        break;
      default:
        sub_20B0A919C();
    }
    v12 = v70;
  }
  while (v69 != v70);
  if ((v59 & 1) == 0)
  {
LABEL_63:
    v49 = 0;
    v50 = v68[0];
    if (!v68[0])
      goto LABEL_65;
    goto LABEL_64;
  }
  v43 = *v57;
  *(_QWORD *)v43 = a2;
  *(_QWORD *)(v43 + 8) = a2 + v19;
  *(_BYTE *)(v43 + 16) = 1;
  if ((_QWORD)v67 != *(_QWORD *)&v66[32])
  {
    v44 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v67 - *(_QWORD *)&v66[32]) >> 3);
    v45 = (_BYTE *)(*(_QWORD *)&v66[32] + 16);
    v46 = 1;
    do
    {
      v47 = v43 + 24 * v46;
      *(_OWORD *)v47 = *((_OWORD *)v45 - 1);
      v48 = *v45;
      v45 += 24;
      *(_BYTE *)(v47 + 16) = v48;
      v22 = v44 > v46++;
    }
    while (v22);
  }
  v49 = 1;
  v50 = v68[0];
  if (v68[0])
  {
LABEL_64:
    v68[1] = v50;
    operator delete(v50);
  }
LABEL_65:
  if (*(_QWORD *)&v66[32])
  {
    *(_QWORD *)&v67 = *(_QWORD *)&v66[32];
    operator delete(*(void **)&v66[32]);
  }
  v51 = v69;
  if (v69)
  {
    v52 = v70;
    v53 = v69;
    if (v70 != v69)
    {
      do
      {
        v54 = (void *)*((_QWORD *)v52 - 5);
        if (v54)
        {
          *((_QWORD *)v52 - 4) = v54;
          operator delete(v54);
        }
        v55 = (void *)*((_QWORD *)v52 - 8);
        if (v55)
        {
          *((_QWORD *)v52 - 7) = v55;
          operator delete(v55);
        }
        v52 -= 96;
      }
      while (v52 != v51);
      v53 = v69;
    }
    v70 = v51;
    operator delete(v53);
  }
  return v49;
}

void sub_20B0AED90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  uint64_t v33;

  sub_20B0A9110(&a33);
  sub_20B0A91E8((void **)(v33 - 120));
  _Unwind_Resume(a1);
}

void sub_20B0AEDE4(_QWORD *a1)
{
  void **v2;
  void **v3;
  unint64_t v4;
  void **v5;
  char *v6;
  unint64_t v7;
  void *v8;
  void *v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v3 == v2)
  {
    a1[5] = 0;
    v11 = 0;
  }
  else
  {
    v4 = a1[4];
    v5 = &v2[v4 / 0x2A];
    v6 = (char *)*v5 + 96 * (v4 % 0x2A);
    v7 = (unint64_t)v2[(a1[5] + v4) / 0x2A] + 96 * ((a1[5] + v4) % 0x2A);
    if (v6 != (char *)v7)
    {
      do
      {
        v8 = (void *)*((_QWORD *)v6 + 7);
        if (v8)
        {
          *((_QWORD *)v6 + 8) = v8;
          operator delete(v8);
        }
        v9 = (void *)*((_QWORD *)v6 + 4);
        if (v9)
        {
          *((_QWORD *)v6 + 5) = v9;
          operator delete(v9);
        }
        v6 += 96;
        if (v6 - (_BYTE *)*v5 == 4032)
        {
          v10 = (char *)v5[1];
          ++v5;
          v6 = v10;
        }
      }
      while (v6 != (char *)v7);
      v2 = (void **)a1[1];
      v3 = (void **)a1[2];
    }
    a1[5] = 0;
    v11 = (char *)v3 - (char *)v2;
    if (v11 >= 0x11)
    {
      do
      {
        operator delete(*v2);
        v12 = a1[2];
        v2 = (void **)(a1[1] + 8);
        a1[1] = v2;
        v11 = v12 - (_QWORD)v2;
      }
      while (v11 > 0x10);
    }
  }
  if (v11 >> 3 == 1)
  {
    v13 = 21;
  }
  else
  {
    if (v11 >> 3 != 2)
      return;
    v13 = 42;
  }
  a1[4] = v13;
}

void **sub_20B0AEF3C(void **a1)
{
  void **v2;
  void **v3;
  void *v4;
  _BYTE *v5;
  _BYTE *v6;

  sub_20B0AEDE4(a1);
  v2 = (void **)a1[1];
  v3 = (void **)a1[2];
  if (v2 != v3)
  {
    do
    {
      v4 = *v2++;
      operator delete(v4);
    }
    while (v2 != v3);
    v6 = a1[1];
    v5 = a1[2];
    if (v5 != v6)
      a1[2] = &v5[(v6 - v5 + 7) & 0xFFFFFFFFFFFFFFF8];
  }
  if (*a1)
    operator delete(*a1);
  return a1;
}

void sub_20B0AEFB0(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  char *v5;
  _QWORD *v6;
  char *v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  int64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  void *v26;
  void *v27;
  char *v28;
  char *v29;
  unint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  char *v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  BOOL v41;
  int64_t v42;
  unint64_t v43;
  char *v44;
  _QWORD *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int64_t v49;
  unint64_t v50;
  char *v51;
  unint64_t v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  int64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  __int128 *v68;
  char *v69;
  uint64_t v70;
  __int128 v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  __int128 *v76;
  _OWORD *v77;
  uint64_t v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  __int128 *v84;
  _OWORD *v85;
  uint64_t v86;
  __int128 v87;
  uint64_t v88;
  void *v89;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2A;
  v4 = v2 - 42;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v6 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v6 + 1);
    v8 = *v6;
    *(_QWORD *)(a1 + 8) = v6 + 1;
    if (v5 != *(char **)(a1 + 24))
    {
LABEL_76:
      *(_QWORD *)v5 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v35 = (v5 - v9) >> 2;
      if (v5 == v9)
        v35 = 1;
      if (!(v35 >> 61))
      {
        v36 = v35 >> 2;
        v37 = 8 * v35;
        v38 = (char *)operator new(8 * v35);
        v39 = &v38[8 * v36];
        v40 = &v38[v37];
        v42 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v42 & 0xFFFFFFFFFFFFFFF8];
          v43 = v42 - 8;
          if ((unint64_t)(v42 - 8) >= 0x38)
          {
            v73 = &v38[8 * v36];
            v44 = v73;
            if ((unint64_t)(v73 - v7) >= 0x20)
            {
              v74 = (v43 >> 3) + 1;
              v75 = 8 * (v74 & 0x3FFFFFFFFFFFFFFCLL);
              v44 = &v39[v75];
              v7 += v75;
              v76 = (__int128 *)(v6 + 3);
              v77 = v73 + 16;
              v78 = v74 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v79 = *v76;
                *(v77 - 1) = *(v76 - 1);
                *v77 = v79;
                v76 += 2;
                v77 += 2;
                v78 -= 4;
              }
              while (v78);
              if (v74 == (v74 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v44 = &v38[8 * v36];
          }
          do
          {
            v80 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v44 = v80;
            v44 += 8;
          }
          while (v44 != v5);
        }
        goto LABEL_74;
      }
LABEL_85:
      sub_20AEC60CC();
    }
LABEL_5:
    v11 = v10 >> 3;
    if (v11 >= -1)
      v12 = v11 + 1;
    else
      v12 = v11 + 2;
    v13 = v12 >> 1;
    v14 = -v13;
    v15 = &v7[-8 * v13];
    v16 = v5 - v7;
    if (v5 != v7)
    {
      memmove(&v7[-8 * v13], v7, v5 - v7);
      v7 = *(char **)(a1 + 8);
    }
    v5 = &v15[v16];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = &v15[v16];
    goto LABEL_76;
  }
  v18 = *(_QWORD *)(a1 + 16);
  v17 = *(_QWORD *)(a1 + 24);
  v19 = *(_QWORD *)(a1 + 8);
  v20 = v18 - v19;
  v21 = (v18 - v19) >> 3;
  v22 = v17 - *(_QWORD *)a1;
  if (v21 < (unint64_t)(v22 >> 3))
  {
    if (v17 != v18)
    {
      v89 = operator new(0xFC0uLL);
      sub_20AEC6E44((char **)a1, &v89);
      return;
    }
    v89 = operator new(0xFC0uLL);
    sub_20AEC6FD0((void **)a1, &v89);
    v45 = *(_QWORD **)(a1 + 8);
    v5 = *(char **)(a1 + 16);
    v7 = (char *)(v45 + 1);
    v8 = *v45;
    *(_QWORD *)(a1 + 8) = v45 + 1;
    if (v5 != *(char **)(a1 + 24))
      goto LABEL_76;
    v9 = *(char **)a1;
    v10 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      v46 = (v5 - v9) >> 2;
      if (v5 == v9)
        v46 = 1;
      if (!(v46 >> 61))
      {
        v47 = v46 >> 2;
        v48 = 8 * v46;
        v38 = (char *)operator new(8 * v46);
        v39 = &v38[8 * v47];
        v40 = &v38[v48];
        v49 = v5 - v7;
        v41 = v5 == v7;
        v5 = v39;
        if (!v41)
        {
          v5 = &v39[v49 & 0xFFFFFFFFFFFFFFF8];
          v50 = v49 - 8;
          if ((unint64_t)(v49 - 8) >= 0x38)
          {
            v81 = &v38[8 * v47];
            v51 = v81;
            if ((unint64_t)(v81 - v7) >= 0x20)
            {
              v82 = (v50 >> 3) + 1;
              v83 = 8 * (v82 & 0x3FFFFFFFFFFFFFFCLL);
              v51 = &v39[v83];
              v7 += v83;
              v84 = (__int128 *)(v45 + 3);
              v85 = v81 + 16;
              v86 = v82 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v87 = *v84;
                *(v85 - 1) = *(v84 - 1);
                *v85 = v87;
                v84 += 2;
                v85 += 2;
                v86 -= 4;
              }
              while (v86);
              if (v82 == (v82 & 0x3FFFFFFFFFFFFFFCLL))
                goto LABEL_74;
            }
          }
          else
          {
            v51 = &v38[8 * v47];
          }
          do
          {
            v88 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v51 = v88;
            v51 += 8;
          }
          while (v51 != v5);
        }
LABEL_74:
        *(_QWORD *)a1 = v38;
        *(_QWORD *)(a1 + 8) = v39;
        *(_QWORD *)(a1 + 16) = v5;
        *(_QWORD *)(a1 + 24) = v40;
        if (v9)
        {
          operator delete(v9);
          v5 = *(char **)(a1 + 16);
        }
        goto LABEL_76;
      }
      goto LABEL_85;
    }
    goto LABEL_5;
  }
  v23 = v22 >> 2;
  if (v17 == *(_QWORD *)a1)
    v24 = 1;
  else
    v24 = v23;
  if (v24 >> 61)
    goto LABEL_85;
  v25 = (char *)operator new(8 * v24);
  v26 = operator new(0xFC0uLL);
  v27 = v26;
  v28 = &v25[8 * v21];
  v29 = &v25[8 * v24];
  if (v21 == v24)
  {
    if (v20 < 1)
    {
      if (v18 == v19)
        v52 = 1;
      else
        v52 = v20 >> 2;
      if (v52 >> 61)
        sub_20AEC60CC();
      v28 = (char *)operator new(8 * v52);
      v29 = &v28[8 * v52];
      operator delete(v25);
      v53 = *(_QWORD *)(a1 + 8);
      v18 = *(_QWORD *)(a1 + 16);
      v25 = v28;
      *(_QWORD *)v28 = v27;
      v31 = v28 + 8;
      if (v18 == v53)
        goto LABEL_24;
      do
      {
LABEL_49:
        if (v28 == v25)
        {
          if (v31 >= v29)
          {
            if (v29 == v28)
              v58 = 1;
            else
              v58 = (v29 - v28) >> 2;
            if (v58 >> 61)
              sub_20AEC60CC();
            v59 = (char *)operator new(8 * v58);
            v25 = v59;
            v60 = (v58 + 3) >> 2;
            v54 = &v59[8 * v60];
            v33 = v54;
            v61 = v31 - v28;
            if (v31 != v28)
            {
              v33 = &v54[v61 & 0xFFFFFFFFFFFFFFF8];
              v62 = v61 - 8;
              v63 = &v59[8 * v60];
              v64 = v28;
              if (v62 < 0x38)
                goto LABEL_89;
              v65 = 8 * v60;
              v63 = &v59[8 * v60];
              v64 = v28;
              if ((unint64_t)(v63 - v28) < 0x20)
                goto LABEL_89;
              v66 = (v62 >> 3) + 1;
              v67 = 8 * (v66 & 0x3FFFFFFFFFFFFFFCLL);
              v63 = &v54[v67];
              v64 = &v28[v67];
              v68 = (__int128 *)(v28 + 16);
              v69 = &v59[v65 + 16];
              v70 = v66 & 0x3FFFFFFFFFFFFFFCLL;
              do
              {
                v71 = *v68;
                *((_OWORD *)v69 - 1) = *(v68 - 1);
                *(_OWORD *)v69 = v71;
                v68 += 2;
                v69 += 32;
                v70 -= 4;
              }
              while (v70);
              if (v66 != (v66 & 0x3FFFFFFFFFFFFFFCLL))
              {
LABEL_89:
                do
                {
                  v72 = *(_QWORD *)v64;
                  v64 += 8;
                  *(_QWORD *)v63 = v72;
                  v63 += 8;
                }
                while (v63 != v33);
              }
            }
            v29 = &v59[8 * v58];
            operator delete(v28);
          }
          else
          {
            v56 = (v29 - v31) >> 3;
            if (v56 >= -1)
              v57 = v56 + 1;
            else
              v57 = v56 + 2;
            v33 = &v31[8 * (v57 >> 1)];
            v54 = &v28[8 * (v57 >> 1)];
            if (v31 == v28)
            {
              v25 = v31;
            }
            else
            {
              memmove(&v28[8 * (v57 >> 1)], v28, v31 - v28);
              v25 = v28;
            }
          }
        }
        else
        {
          v54 = v28;
          v33 = v31;
        }
        v55 = *(_QWORD *)(v18 - 8);
        v18 -= 8;
        *((_QWORD *)v54 - 1) = v55;
        v32 = v54 - 8;
        v31 = v33;
        v28 = v32;
      }
      while (v18 != *(_QWORD *)(a1 + 8));
      goto LABEL_25;
    }
    v30 = v21 + 2;
    if (v21 >= -1)
      v30 = v21 + 1;
    v28 -= 8 * (v30 >> 1);
  }
  *(_QWORD *)v28 = v26;
  v31 = v28 + 8;
  if (v18 != v19)
    goto LABEL_49;
LABEL_24:
  v32 = v28;
  v33 = v31;
LABEL_25:
  v34 = *(char **)a1;
  *(_QWORD *)a1 = v25;
  *(_QWORD *)(a1 + 8) = v32;
  *(_QWORD *)(a1 + 16) = v33;
  *(_QWORD *)(a1 + 24) = v29;
  if (v34)
    operator delete(v34);
}

void sub_20B0AF4F0(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v2);
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B0AF50C(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B0AF520(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B0AF538(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_20B0AF550(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  void *v13;
  void *v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  char *v22;
  void *v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  unint64_t v32;
  char *v33;
  char *v34;
  unint64_t v35;
  int64_t v36;
  unint64_t v37;
  uint64_t v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  __int128 *v44;
  char *v45;
  uint64_t v46;
  __int128 v47;
  void *v48;

  v3 = *(uint64_t **)(a1 + 8);
  v2 = *(uint64_t **)(a1 + 16);
  v4 = v2 - v3;
  if (v2 == v3)
    v5 = 0;
  else
    v5 = 42 * v4 - 1;
  v6 = *(_QWORD *)(a1 + 32);
  if ((unint64_t)(v5 - (*(_QWORD *)(a1 + 40) + v6)) >= 0x2A)
  {
    *(_QWORD *)(a1 + 32) = v6 + 42;
    v48 = (void *)*(v2 - 1);
    *(_QWORD *)(a1 + 16) = v2 - 1;
    sub_20AEC6FD0((void **)a1, &v48);
    return;
  }
  v7 = *(uint64_t **)(a1 + 24);
  v8 = *(uint64_t **)a1;
  v9 = (uint64_t)v7 - *(_QWORD *)a1;
  if (v4 < v9 >> 3)
  {
    if (v3 == v8)
    {
      v48 = operator new(0xFC0uLL);
      sub_20AEC6E44((char **)a1, &v48);
      v18 = *(_QWORD *)(a1 + 16);
      v48 = *(void **)(v18 - 8);
      *(_QWORD *)(a1 + 16) = v18 - 8;
      sub_20AEC6FD0((void **)a1, &v48);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
        goto LABEL_9;
    }
    else
    {
      v48 = operator new(0xFC0uLL);
      sub_20AEC6FD0((void **)a1, &v48);
      if (*(_QWORD *)(a1 + 16) - *(_QWORD *)(a1 + 8) == 8)
      {
LABEL_9:
        v10 = 21;
LABEL_19:
        *(_QWORD *)(a1 + 32) = v10;
        return;
      }
    }
    v10 = *(_QWORD *)(a1 + 32) + 42;
    goto LABEL_19;
  }
  if (v7 == v8)
    v11 = 1;
  else
    v11 = v9 >> 2;
  if (v11 >> 61)
    sub_20AEC60CC();
  v12 = (char *)operator new(8 * v11);
  v13 = operator new(0xFC0uLL);
  v14 = v13;
  if (v11)
  {
    v15 = &v12[8 * v11];
    *(_QWORD *)v12 = v13;
    v16 = v12 + 8;
    v17 = v12;
    if (v3 != v2)
      goto LABEL_27;
    goto LABEL_21;
  }
  v19 = (char *)operator new(8uLL);
  v15 = v19 + 8;
  operator delete(v12);
  v3 = *(uint64_t **)(a1 + 8);
  v20 = *(uint64_t **)(a1 + 16);
  v12 = v19;
  *(_QWORD *)v19 = v14;
  v16 = v19 + 8;
  v17 = v19;
  if (v3 != v20)
  {
    while (1)
    {
LABEL_27:
      if (v16 == v15)
      {
        if (v12 <= v17)
        {
          if (v16 == v17)
            v32 = 1;
          else
            v32 = (v16 - v17) >> 2;
          if (v32 >> 61)
            sub_20AEC60CC();
          v33 = (char *)operator new(8 * v32);
          v34 = v33;
          v35 = v32 >> 2;
          v21 = &v33[8 * (v32 >> 2)];
          v24 = v21;
          v36 = v16 - v12;
          if (v16 != v12)
          {
            v24 = &v21[v36 & 0xFFFFFFFFFFFFFFF8];
            v37 = v36 - 8;
            if (v37 < 0x38 || (v38 = 8 * v35, (unint64_t)(&v33[8 * v35] - v12) < 0x20))
            {
              v39 = &v33[8 * (v32 >> 2)];
              v40 = v12;
              goto LABEL_43;
            }
            v42 = (v37 >> 3) + 1;
            v43 = 8 * (v42 & 0x3FFFFFFFFFFFFFFCLL);
            v39 = &v21[v43];
            v40 = &v12[v43];
            v44 = (__int128 *)(v12 + 16);
            v45 = &v33[v38 + 16];
            v46 = v42 & 0x3FFFFFFFFFFFFFFCLL;
            do
            {
              v47 = *v44;
              *((_OWORD *)v45 - 1) = *(v44 - 1);
              *(_OWORD *)v45 = v47;
              v44 += 2;
              v45 += 32;
              v46 -= 4;
            }
            while (v46);
            if (v42 != (v42 & 0x3FFFFFFFFFFFFFFCLL))
            {
              do
              {
LABEL_43:
                v41 = *(_QWORD *)v40;
                v40 += 8;
                *(_QWORD *)v39 = v41;
                v39 += 8;
              }
              while (v39 != v24);
            }
          }
          v16 = &v33[8 * v32];
          if (v17)
            operator delete(v17);
          v17 = v34;
          goto LABEL_26;
        }
        v26 = (v12 - v17) >> 3;
        if (v26 >= -1)
          v27 = v26 + 1;
        else
          v27 = v26 + 2;
        v28 = v27 >> 1;
        v29 = &v12[-8 * (v27 >> 1)];
        v30 = v16;
        if (v16 != v12)
        {
          memmove(v29, v12, v16 - v12);
          v30 = v12;
        }
        v31 = -v28;
        v24 = &v29[v16 - v12];
        v21 = &v30[8 * v31];
      }
      else
      {
        v21 = v12;
        v24 = v16;
        v16 = v15;
      }
LABEL_26:
      v15 = v16;
      v25 = *v3++;
      *(_QWORD *)v24 = v25;
      v22 = v24 + 8;
      v16 = v22;
      v12 = v21;
      if (v3 == *(uint64_t **)(a1 + 16))
        goto LABEL_22;
    }
  }
LABEL_21:
  v21 = v12;
  v22 = v16;
LABEL_22:
  v23 = *(void **)a1;
  *(_QWORD *)a1 = v17;
  *(_QWORD *)(a1 + 8) = v21;
  *(_QWORD *)(a1 + 16) = v22;
  *(_QWORD *)(a1 + 24) = v15;
  if (v22 - v21 == 8)
  {
    *(_QWORD *)(a1 + 32) = 21;
    if (v23)
LABEL_24:
      operator delete(v23);
  }
  else
  {
    *(_QWORD *)(a1 + 32) += 42;
    if (v23)
      goto LABEL_24;
  }
}

void sub_20B0AF8CC(_Unwind_Exception *a1)
{
  void *v1;
  void *v2;

  operator delete(v1);
  operator delete(v2);
  _Unwind_Resume(a1);
}

char *sub_20B0AF908(char **a1, char *a2, char *a3, size_t __sz)
{
  char *v6;
  uint64_t v8;
  char *result;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  char *v15;
  int64_t v16;
  _QWORD *v17;
  char *v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  __int128 v23;
  char *v24;
  char *v25;

  v6 = a2;
  v8 = (uint64_t)a1[2];
  result = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)result) >> 3) >= __sz)
  {
    v18 = a1[1];
    v17 = a1 + 1;
    v14 = v18;
    v19 = 0xAAAAAAAAAAAAAAABLL * ((v18 - result) >> 3);
    if (v19 >= __sz)
    {
      v24 = result;
      if (a2 != a3)
      {
        v25 = result;
        do
        {
          *(_OWORD *)v25 = *(_OWORD *)v6;
          v25[16] = v6[16];
          v24 += 24;
          v6 += 24;
          v25 += 24;
        }
        while (v6 != a3);
      }
      v16 = v24 - result;
      v14 = result;
    }
    else
    {
      v20 = &a2[24 * v19];
      if (v14 != result)
      {
        do
        {
          *(_OWORD *)result = *(_OWORD *)v6;
          result[16] = v6[16];
          v6 += 24;
          result += 24;
        }
        while (v6 != v20);
      }
      v21 = v14;
      if (v20 != a3)
      {
        v22 = v14;
        do
        {
          v23 = *(_OWORD *)v20;
          *((_QWORD *)v22 + 2) = *((_QWORD *)v20 + 2);
          *(_OWORD *)v22 = v23;
          v22 += 24;
          v20 += 24;
          v21 += 24;
        }
        while (v20 != a3);
      }
      v16 = v21 - v14;
    }
  }
  else
  {
    if (result)
    {
      a1[1] = result;
      operator delete(result);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_26;
    v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    v11 = 2 * v10;
    if (2 * v10 <= __sz)
      v11 = __sz;
    v12 = v10 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v11;
    if (v12 > 0xAAAAAAAAAAAAAAALL)
LABEL_26:
      sub_20B0A90FC();
    v13 = 24 * v12;
    result = (char *)operator new(24 * v12);
    v14 = result;
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[v13];
    v15 = result;
    if (v6 != a3)
    {
      result = (char *)memcpy(result, v6, 24 * ((a3 - v6 - 24) / 0x18uLL) + 24);
      v15 = &v14[24 * ((a3 - v6 - 24) / 0x18uLL) + 24];
    }
    v16 = v15 - v14;
    v17 = a1 + 1;
  }
  *v17 = &v14[v16];
  return result;
}

double *sub_20B0AFB04(double **a1, unint64_t a2, char *a3, size_t __sz)
{
  uint64_t v8;
  double *v9;
  double *v10;
  unint64_t v11;
  uint64_t v12;
  double *result;
  double **v14;
  double *v15;
  unint64_t v16;
  char *v17;
  int64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  char *v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  double *v35;
  const double *v36;
  uint64_t v37;
  const double *v38;
  double *v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  unint64_t v44;
  BOOL v46;
  unint64_t v48;
  uint64_t v49;
  const double *v50;
  double *v51;
  uint64_t v52;
  const double *v53;
  double *v54;
  char *v55;
  unint64_t v56;
  BOOL v58;
  uint64_t v60;
  uint64_t v61;
  double *v62;
  const double *v63;
  uint64_t v64;
  const double *v65;
  double *v66;
  unint64_t v67;
  char *v68;
  unint64_t v69;
  unint64_t v70;
  BOOL v71;
  char v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  const double *v76;
  double *v77;
  uint64_t v78;
  const double *v79;
  float64x2x2_t v80;
  float64x2x2_t v81;
  float64x2x2_t v82;
  float64x2x2_t v83;
  float64x2x2_t v84;
  float64x2x2_t v85;
  float64x2x2_t v86;
  float64x2x2_t v87;

  v8 = (uint64_t)a1[2];
  v9 = *a1;
  v10 = *a1;
  if (__sz > (v8 - (uint64_t)*a1) >> 4)
  {
    if (v10)
    {
      a1[1] = v10;
      operator delete(v10);
      v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (__sz >> 60)
      goto LABEL_85;
    v11 = v8 >> 3;
    if (v8 >> 3 <= __sz)
      v11 = __sz;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0)
      v11 = 0xFFFFFFFFFFFFFFFLL;
    if (v11 >> 60)
LABEL_85:
      sub_20B0A90FC();
    v12 = 2 * v11;
    result = (double *)operator new(16 * v11);
    *a1 = result;
    v14 = a1 + 1;
    a1[2] = &result[v12];
    v15 = result;
    if ((char *)a2 == a3)
      goto LABEL_34;
    v16 = (unint64_t)&a3[-a2 - 16];
    if (v16 >= 0x30)
    {
      v33 = (v16 >> 4) + 1;
      v34 = 2 * (v33 & 0x1FFFFFFFFFFFFFFCLL);
      v17 = (char *)(a2 + v34 * 8);
      v15 = &result[v34];
      v35 = result + 4;
      v36 = (const double *)(a2 + 32);
      v37 = v33 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v38 = v36 - 4;
        v80 = vld2q_f64(v38);
        v84 = vld2q_f64(v36);
        v39 = v35 - 4;
        vst2q_f64(v39, v80);
        vst2q_f64(v35, v84);
        v35 += 8;
        v36 += 8;
        v37 -= 4;
      }
      while (v37);
      if (v33 == (v33 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_34;
    }
    else
    {
      v17 = (char *)a2;
      v15 = result;
    }
    do
    {
      v40 = *(_QWORD *)v17;
      v41 = *((_QWORD *)v17 + 1);
      v17 += 16;
      *(_QWORD *)v15 = v40;
      *((_QWORD *)v15 + 1) = v41;
      v15 += 2;
    }
    while (v17 != a3);
LABEL_34:
    *v14 = v15;
    return result;
  }
  result = a1[1];
  v14 = a1 + 1;
  v18 = (char *)result - (char *)v9;
  v19 = ((char *)result - (char *)v9) >> 4;
  if (v19 < __sz)
  {
    v20 = (char *)(a2 + 16 * v19);
    if (result == v9)
      goto LABEL_18;
    if ((unint64_t)(v18 - 16) >= 0xF0)
    {
      v42 = (v18 & 0xFFFFFFFFFFFFFFF0) - 8;
      v43 = (char *)v9 + v42;
      v44 = a2 + v42;
      v46 = (unint64_t)(v9 + 1) < a2 + (v18 & 0xFFFFFFFFFFFFFFF0)
         && a2 + 8 < (unint64_t)v9 + (v18 & 0xFFFFFFFFFFFFFFF0);
      v21 = (char *)a2;
      if (((unint64_t)v43 <= a2 || (unint64_t)v9 >= v44) && !v46)
      {
        v48 = ((unint64_t)(v18 - 16) >> 4) + 1;
        v49 = 2 * (v48 & 0x1FFFFFFFFFFFFFFCLL);
        v10 = &v9[v49];
        v21 = (char *)(a2 + v49 * 8);
        v50 = (const double *)(a2 + 32);
        v51 = v9 + 4;
        v52 = v48 & 0x1FFFFFFFFFFFFFFCLL;
        do
        {
          v53 = v50 - 4;
          v81 = vld2q_f64(v53);
          v85 = vld2q_f64(v50);
          v54 = v51 - 4;
          vst2q_f64(v54, v81);
          vst2q_f64(v51, v85);
          v50 += 8;
          v51 += 8;
          v52 -= 4;
        }
        while (v52);
        if (v48 == (v48 & 0x1FFFFFFFFFFFFFFCLL))
        {
LABEL_18:
          if (v20 == a3)
          {
            v15 = result;
          }
          else
          {
            v24 = (char *)(v18 + a2);
            v25 = (unint64_t)&a3[-v18 - a2 - 16];
            if (v25 >= 0x170)
            {
              v55 = &v24[v25 & 0xFFFFFFFFFFFFFFF0];
              v56 = (unint64_t)(v24 + 8);
              v58 = result + 1 < (double *)v55 + 2 && v56 < (unint64_t)result + (v25 & 0xFFFFFFFFFFFFFFF0) + 16;
              v15 = result;
              if ((v20 >= (char *)result + (v25 & 0xFFFFFFFFFFFFFFF0) + 8 || result >= (double *)v55 + 1) && !v58)
              {
                v60 = (v25 >> 4) + 1;
                v61 = 2 * (v60 & 0x1FFFFFFFFFFFFFFCLL);
                v20 += v61 * 8;
                v15 = &result[v61];
                v62 = result + 4;
                v63 = (const double *)(a2 + 16 * v19 + 32);
                v64 = v60 & 0x1FFFFFFFFFFFFFFCLL;
                do
                {
                  v65 = v63 - 4;
                  v82 = vld2q_f64(v65);
                  v86 = vld2q_f64(v63);
                  v66 = v62 - 4;
                  vst2q_f64(v66, v82);
                  vst2q_f64(v62, v86);
                  v62 += 8;
                  v63 += 8;
                  v64 -= 4;
                }
                while (v64);
                if (v60 == (v60 & 0x1FFFFFFFFFFFFFFCLL))
                  goto LABEL_34;
              }
            }
            else
            {
              v15 = result;
            }
            do
            {
              v26 = *(_QWORD *)v20;
              v27 = *((_QWORD *)v20 + 1);
              v20 += 16;
              *(_QWORD *)v15 = v26;
              *((_QWORD *)v15 + 1) = v27;
              v15 += 2;
            }
            while (v20 != a3);
          }
          goto LABEL_34;
        }
      }
    }
    else
    {
      v21 = (char *)a2;
    }
    do
    {
      v22 = *(_QWORD *)v21;
      v23 = *((_QWORD *)v21 + 1);
      v21 += 16;
      *(_QWORD *)v10 = v22;
      *((_QWORD *)v10 + 1) = v23;
      v10 += 2;
    }
    while (v21 != v20);
    goto LABEL_18;
  }
  if ((char *)a2 == a3)
  {
    v29 = (char *)v10;
  }
  else
  {
    v28 = (unint64_t)&a3[-a2 - 16];
    if (v28 < 0xF0
      || ((v67 = v28 & 0xFFFFFFFFFFFFFFF0 | 8,
           v68 = (char *)v9 + v67,
           v69 = a2 + v67,
           v70 = (v28 & 0xFFFFFFFFFFFFFFF0) + 16,
           (unint64_t)(v9 + 1) < a2 + v70)
        ? (v71 = a2 + 8 >= (unint64_t)v9 + v70)
        : (v71 = 1),
          v71 ? (v72 = 0) : (v72 = 1),
          (unint64_t)v68 > a2 ? (v73 = (unint64_t)v9 >= v69) : (v73 = 1),
          !v73 || (v72 & 1) != 0))
    {
      v29 = (char *)v10;
      v30 = (char *)a2;
    }
    else
    {
      v74 = (v28 >> 4) + 1;
      v75 = 2 * (v74 & 0x1FFFFFFFFFFFFFFCLL);
      v29 = (char *)&v9[v75];
      v30 = (char *)(a2 + v75 * 8);
      v76 = (const double *)(a2 + 32);
      v77 = v9 + 4;
      v78 = v74 & 0x1FFFFFFFFFFFFFFCLL;
      do
      {
        v79 = v76 - 4;
        v83 = vld2q_f64(v79);
        v87 = vld2q_f64(v76);
        result = v77 - 4;
        vst2q_f64(result, v83);
        vst2q_f64(v77, v87);
        v76 += 8;
        v77 += 8;
        v78 -= 4;
      }
      while (v78);
      if (v74 == (v74 & 0x1FFFFFFFFFFFFFFCLL))
        goto LABEL_36;
    }
    do
    {
      v31 = *(_QWORD *)v30;
      v32 = *((_QWORD *)v30 + 1);
      v30 += 16;
      *(_QWORD *)v29 = v31;
      *((_QWORD *)v29 + 1) = v32;
      v29 += 16;
    }
    while (v30 != a3);
  }
LABEL_36:
  *v14 = (double *)((char *)v10 + v29 - (char *)v9);
  return result;
}

uint64_t sub_20B0AFEF4(uint64_t a1)
{
  std::__shared_weak_count *v2;

  v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
    std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B0AFF20(uint64_t *a1)
{
  std::mutex *v2;
  uint64_t i;
  uint64_t v4;
  uint64_t v5;

  v2 = (std::mutex *)(a1 + 3);
  std::mutex::lock((std::mutex *)(a1 + 3));
  v4 = *a1;
  for (i = a1[1]; v4 != i; v4 += 8)
  {
    v5 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v4 + 8) + 8);
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 24))(v5);
  }
  std::mutex::unlock(v2);
}

void sub_20B0AFF84(_Unwind_Exception *a1)
{
  std::mutex *v1;

  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_20B0AFF98(_QWORD *a1, int a2)
{
  char *v4;
  uint64_t v5;
  std::__thread_struct *v6;
  int v7;
  _QWORD *v8;
  char ***v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  std::__shared_weak_count *v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  char **v24;
  std::mutex *v25;
  unint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _BYTE *v35;
  char *v36;
  char *v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v42;
  _OWORD *v43;
  char *v44;
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  _QWORD *v48;
  _QWORD *v49;

  sub_20AEC0644((uint64_t)a1, 0);
  if (!a2)
  {
    *a1 = &off_24C40CAB8;
    a1[2] = &unk_24C40CAE8;
    a1[3] = 0;
    a1[4] = 0;
    a1[5] = 0;
    return;
  }
  v48 = (_QWORD *)operator new();
  v4 = (char *)operator new(0x8000uLL);
  bzero(v4, 0x8000uLL);
  v5 = operator new();
  *(_QWORD *)(v5 + 8) = &unk_24C40CBE8;
  *(_QWORD *)v5 = &off_24C40CBA0;
  strcpy((char *)(v5 + 16), "OSLogAppender");
  *(_BYTE *)(v5 + 39) = 13;
  *(_QWORD *)(v5 + 40) = 850045863;
  *(_QWORD *)(v5 + 104) = v4;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_QWORD *)(v5 + 96) = 0;
  *(_QWORD *)(v5 + 112) = v4 + 0x8000;
  *(_QWORD *)(v5 + 120) = v4 + 0x8000;
  *(_QWORD *)(v5 + 208) = 1018212795;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_QWORD *)(v5 + 160) = 1018212795;
  *(_QWORD *)(v5 + 144) = 0;
  *(_QWORD *)(v5 + 150) = 0;
  *(_OWORD *)(v5 + 168) = 0u;
  *(_OWORD *)(v5 + 184) = 0u;
  *(_QWORD *)(v5 + 200) = 0;
  *(_OWORD *)(v5 + 216) = 0u;
  *(_OWORD *)(v5 + 232) = 0u;
  *(_QWORD *)(v5 + 248) = 0;
  *(_QWORD *)(v5 + 256) = 1018212795;
  *(_BYTE *)(v5 + 312) = 0;
  *(_OWORD *)(v5 + 289) = 0u;
  *(_OWORD *)(v5 + 280) = 0u;
  *(_OWORD *)(v5 + 264) = 0u;
  v6 = (std::__thread_struct *)operator new();
  std::__thread_struct::__thread_struct(v6);
  v49 = (_QWORD *)operator new();
  *v49 = v6;
  v49[1] = sub_20B0B09C8;
  v49[2] = v5;
  v7 = pthread_create((pthread_t *)(v5 + 304), 0, (void *(__cdecl *)(void *))sub_20B0B17C8, v49);
  if (!v7)
  {
    v8 = a1 + 2;
    *(_BYTE *)(v5 + 312) = 1;
    *v48 = &off_24C40CB40;
    v48[1] = v5 + 8;
    *a1 = &off_24C40CAB8;
    a1[2] = &unk_24C40CAE8;
    a1[3] = v48;
    a1[4] = 0;
    v9 = (char ***)(a1 + 4);
    a1[5] = 0;
    v10 = atomic_load((unsigned __int8 *)&qword_25463AED0);
    if ((v10 & 1) == 0 && __cxa_guard_acquire(&qword_25463AED0))
    {
      __cxa_atexit((void (*)(void *))MEMORY[0x24BEDB380], &stru_254634C80, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463AED0);
    }
    std::mutex::lock(&stru_254634C80);
    v11 = atomic_load((unsigned __int8 *)&qword_25463AED8);
    if ((v11 & 1) == 0 && __cxa_guard_acquire(&qword_25463AED8))
    {
      __cxa_atexit((void (*)(void *))sub_20B0AFEF4, &qword_25463AEE0, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463AED8);
    }
    if (qword_25463AEE8)
    {
      v12 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_25463AEE8);
      v13 = v12;
      if (v12)
      {
        v14 = qword_25463AEE0;
        v15 = (char *)v12;
        if (qword_25463AEE0)
          goto LABEL_20;
      }
    }
    else
    {
      v13 = 0;
    }
    v15 = (char *)operator new(0x70uLL);
    *((_QWORD *)v15 + 1) = 0;
    *((_QWORD *)v15 + 2) = 0;
    *(_QWORD *)v15 = &off_24C40CC78;
    *((_QWORD *)v15 + 3) = 0;
    v14 = (uint64_t)(v15 + 24);
    *((_QWORD *)v15 + 6) = 850045863;
    *((_QWORD *)v15 + 4) = 0;
    *((_QWORD *)v15 + 5) = 0;
    *(_OWORD *)(v15 + 56) = 0u;
    *(_OWORD *)(v15 + 72) = 0u;
    *(_OWORD *)(v15 + 88) = 0u;
    *((_QWORD *)v15 + 13) = 0;
    sub_20B531FC0((uint64_t)sub_20B0AFF20, (uint64_t)(v15 + 24));
    v16 = (unint64_t *)(v15 + 16);
    do
      v17 = __ldxr(v16);
    while (__stxr(v17 + 1, v16));
    v18 = (std::__shared_weak_count *)qword_25463AEE8;
    qword_25463AEE0 = (uint64_t)(v15 + 24);
    qword_25463AEE8 = (uint64_t)v15;
    if (v18)
      std::__shared_weak_count::__release_weak(v18);
    if (v13)
    {
      p_shared_owners = (unint64_t *)&v13->__shared_owners_;
      do
        v20 = __ldaxr(p_shared_owners);
      while (__stlxr(v20 - 1, p_shared_owners));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
        std::__shared_weak_count::__release_weak(v13);
      }
    }
LABEL_20:
    std::mutex::unlock(&stru_254634C80);
    v21 = (std::__shared_weak_count *)a1[5];
    a1[4] = v14;
    a1[5] = v15;
    if (v21)
    {
      v22 = (unint64_t *)&v21->__shared_owners_;
      do
        v23 = __ldaxr(v22);
      while (__stlxr(v23 - 1, v22));
      if (!v23)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
    v24 = *v9;
    v25 = (std::mutex *)(*v9 + 3);
    std::mutex::lock(v25);
    v27 = v24[1];
    v26 = (unint64_t)v24[2];
    if ((unint64_t)v27 < v26)
    {
      *(_QWORD *)v27 = v8;
      v28 = (uint64_t)(v27 + 8);
LABEL_38:
      v24[1] = (char *)v28;
      std::mutex::unlock(v25);
      return;
    }
    v29 = *v24;
    v30 = v27 - *v24;
    v31 = v30 >> 3;
    v32 = (v30 >> 3) + 1;
    if (v32 >> 61)
      sub_20AEC60B8();
    v33 = v26 - (_QWORD)v29;
    if (v33 >> 2 > v32)
      v32 = v33 >> 2;
    if ((unint64_t)v33 >= 0x7FFFFFFFFFFFFFF8)
      v34 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v34 = v32;
    if (v34)
    {
      if (v34 >> 61)
        sub_20AEC60CC();
      v35 = operator new(8 * v34);
      v36 = &v35[8 * v31];
      v37 = &v35[8 * v34];
      *(_QWORD *)v36 = v8;
      v28 = (uint64_t)(v36 + 8);
      v38 = (char *)(v27 - v29);
      if (v27 == v29)
      {
LABEL_36:
        *v24 = v36;
        v24[1] = (char *)v28;
        v24[2] = v37;
        if (!v27)
          goto LABEL_38;
LABEL_37:
        operator delete(v27);
        goto LABEL_38;
      }
    }
    else
    {
      v35 = 0;
      v36 = (char *)(8 * v31);
      v37 = 0;
      *(_QWORD *)(8 * v31) = v8;
      v28 = 8 * v31 + 8;
      v38 = (char *)(v27 - v29);
      if (v27 == v29)
        goto LABEL_36;
    }
    v39 = (unint64_t)(v38 - 8);
    if (v39 < 0x58)
      goto LABEL_57;
    if ((unint64_t)(v27 - v35 - v30) < 0x20)
      goto LABEL_57;
    v40 = (v39 >> 3) + 1;
    v41 = 8 * (v40 & 0x3FFFFFFFFFFFFFFCLL);
    v42 = &v27[-v41];
    v36 -= v41;
    v43 = &v35[8 * v31 - 16];
    v44 = v27 - 16;
    v45 = v40 & 0x3FFFFFFFFFFFFFFCLL;
    do
    {
      v46 = *(_OWORD *)v44;
      *(v43 - 1) = *((_OWORD *)v44 - 1);
      *v43 = v46;
      v43 -= 2;
      v44 -= 32;
      v45 -= 4;
    }
    while (v45);
    v27 = v42;
    if (v40 != (v40 & 0x3FFFFFFFFFFFFFFCLL))
    {
LABEL_57:
      do
      {
        v47 = *((_QWORD *)v27 - 1);
        v27 -= 8;
        *((_QWORD *)v36 - 1) = v47;
        v36 -= 8;
      }
      while (v27 != v29);
    }
    v27 = *v24;
    *v24 = v36;
    v24[1] = (char *)v28;
    v24[2] = v37;
    if (!v27)
      goto LABEL_38;
    goto LABEL_37;
  }
  std::__throw_system_error(v7, "thread constructor failed");
  __break(1u);
}

void sub_20B0B053C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, _Unwind_Exception *exception_object, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  void **v21;
  std::mutex *v22;
  void *v23;
  void *v24;

  std::mutex::~mutex(v22);
  v23 = *v21;
  if (*v21)
  {
    v20[1].__shared_owners_ = (uint64_t)v23;
    operator delete(v23);
  }
  std::__shared_weak_count::~__shared_weak_count(v20);
  operator delete(v24);
  sub_20AEC147C((uint64_t)&a17);
  std::mutex::unlock(&stru_254634C80);
  sub_20AEC147C(v19);
  sub_20B0A7D30(v18);
  nullsub_1(v17);
  _Unwind_Resume(a1);
}

void sub_20B0B060C()
{
  uint64_t v0;

  sub_20B0B1860((uint64_t **)(v0 - 96));
  JUMPOUT(0x20B0B0618);
}

uint64_t sub_20B0B06BC(_QWORD *a1)
{
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  v2 = a1[4];
  if (v2)
  {
    std::mutex::lock((std::mutex *)(v2 + 24));
    v3 = a1 + 2;
    v4 = *(_QWORD **)(v2 + 8);
    v5 = *(_QWORD **)v2;
    if (*(_QWORD **)v2 != v4)
    {
      while ((_QWORD *)*v5 != v3)
      {
        if (++v5 == v4)
        {
          v5 = *(_QWORD **)(v2 + 8);
          break;
        }
      }
    }
    if (v5 != v4)
    {
      v6 = v5 + 1;
      if (v5 + 1 != v4)
      {
        do
        {
          if ((_QWORD *)*v6 != v3)
            *v5++ = *v6;
          ++v6;
        }
        while (v6 != v4);
        v4 = *(_QWORD **)(v2 + 8);
      }
    }
    if (v5 != v4)
      *(_QWORD *)(v2 + 8) = v5;
    std::mutex::unlock((std::mutex *)(v2 + 24));
  }
  v7 = (std::__shared_weak_count *)a1[5];
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
  v10 = (_QWORD *)a1[3];
  a1[2] = &off_24C40C2E8;
  a1[3] = 0;
  if (v10)
  {
    v11 = v10[1];
    *v10 = &off_24C40CA70;
    v10[1] = 0;
    if (v11)
    {
      (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
      v12 = v10[1];
      v10[1] = 0;
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
    }
    MEMORY[0x20BD3583C](v10, 0xA1C40BD48D6D6);
  }
  return nullsub_1(a1);
}

uint64_t sub_20B0B084C(uint64_t a1)
{
  return sub_20B0B06BC((_QWORD *)(a1 - 16));
}

void sub_20B0B0854(_QWORD *a1)
{
  sub_20B0B06BC(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0B0878(uint64_t a1)
{
  sub_20B0B06BC((_QWORD *)(a1 - 16));
  JUMPOUT(0x20BD3583CLL);
}

const char *sub_20B0B08A4()
{
  return "OSLogSurrogateAppender";
}

_QWORD *sub_20B0B08B0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_24C40CA70;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[1];
    a1[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  return a1;
}

void sub_20B0B0908(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = a1[1];
  *a1 = &off_24C40CA70;
  a1[1] = 0;
  if (v2)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
    v3 = a1[1];
    a1[1] = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
  }
  JUMPOUT(0x20BD3583CLL);
}

void **sub_20B0B0970(void **a1)
{
  uint64_t *v2;
  uint64_t *v3;
  void *v4;

  v2 = (uint64_t *)*a1;
  if (*a1)
  {
    v3 = (uint64_t *)a1[1];
    v4 = v2;
    if (v3 != v2)
    {
      do
        v3 = sub_20B0B1AAC(v3 - 4);
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void sub_20B0B09C8(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *p_shared_owners;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  int v20;
  _BYTE *v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unsigned __int8 v34;
  const char *v35;
  size_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  const void *v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  unint64_t *v47;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  int v52;
  const char *v53;
  uint64_t v54;
  char v55;
  std::promise<void> v56;
  char v57;
  std::unique_lock<std::mutex> __lk;
  uint64_t v59;
  void *object;
  void *v61[2];
  unint64_t v62;
  char v63;
  void *__p[2];
  unint64_t v65;
  char v66;
  __int128 v67;
  __int128 v68;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 40);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 40));
  while (1)
  {
    v2 = atomic_load((unsigned __int8 *)(a1 + 156));
    v3 = *(_QWORD *)(a1 + 144);
    if ((v2 & 1) != 0)
    {
      if (!v3)
      {
        if (__lk.__owns_)
          std::mutex::unlock(__lk.__m_);
        return;
      }
LABEL_9:
      *(_BYTE *)(a1 + 157) = 1;
      goto LABEL_14;
    }
    if (v3)
      goto LABEL_9;
    while (1)
    {
      v4 = atomic_load((unsigned __int8 *)(a1 + 156));
      if ((v4 & 1) != 0)
        break;
      std::condition_variable::wait((std::condition_variable *)(a1 + 160), &__lk);
      if (*(_QWORD *)(a1 + 144))
        goto LABEL_9;
    }
    v5 = *(_QWORD *)(a1 + 144);
    *(_BYTE *)(a1 + 157) = 1;
    if (v5)
      break;
LABEL_2:
    *(_BYTE *)(a1 + 157) = 0;
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 256));
  }
  while (1)
  {
LABEL_14:
    v6 = *(_QWORD *)(a1 + 128);
    v7 = *(_QWORD *)(a1 + 104);
    v8 = (uint64_t *)(v7 + 32 * v6);
    LOBYTE(v54) = 0;
    v55 = 0;
    if (*((_BYTE *)v8 + 8))
    {
      v9 = *v8;
      *v8 = 0;
      v54 = v9;
      v55 = 1;
    }
    LOBYTE(v56.__state_) = 0;
    v57 = 0;
    if (*((_BYTE *)v8 + 24))
    {
      v10 = v7 + 32 * v6;
      v56.__state_ = *(std::__assoc_sub_state **)(v10 + 16);
      *(_QWORD *)(v10 + 16) = 0;
      v57 = 1;
    }
    v67 = 0u;
    v68 = 0u;
    v11 = *(_QWORD *)(a1 + 104) + 32 * v6;
    v12 = *(unsigned __int8 *)(v11 + 8);
    if (*(_BYTE *)(v11 + 8))
    {
      v13 = *(_QWORD *)v11;
      *(_QWORD *)v11 = 0;
      if (!v13)
      {
        v12 = 0;
LABEL_32:
        *(_BYTE *)(v11 + 8) = 0;
        goto LABEL_33;
      }
      v14 = *(std::__shared_weak_count **)(v13 + 32);
      if (!v14)
        goto LABEL_24;
      p_shared_owners = (unint64_t *)&v14->__shared_owners_;
      do
        v16 = __ldaxr(p_shared_owners);
      while (__stlxr(v16 - 1, p_shared_owners));
      if (!v16)
      {
        ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
        std::__shared_weak_count::__release_weak(v14);
        v17 = *(std::__shared_weak_count **)(v13 + 16);
        if (v17)
          goto LABEL_25;
      }
      else
      {
LABEL_24:
        v17 = *(std::__shared_weak_count **)(v13 + 16);
        if (v17)
        {
LABEL_25:
          v18 = (unint64_t *)&v17->__shared_owners_;
          do
            v19 = __ldaxr(v18);
          while (__stlxr(v19 - 1, v18));
          if (!v19)
          {
            ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
            std::__shared_weak_count::__release_weak(v17);
          }
        }
      }
      MEMORY[0x20BD3583C](v13, 0x10F0C40B62ED6C6);
      v12 = BYTE8(v68);
      goto LABEL_32;
    }
LABEL_33:
    v22 = *(unsigned __int8 *)(v11 + 24);
    v21 = (_BYTE *)(v11 + 24);
    v20 = v22;
    v23 = (uint64_t *)(v21 - 8);
    if (v22 != v12)
    {
      if (v20)
      {
        MEMORY[0x20BD35710](v23);
        *v21 = 0;
        if (!BYTE8(v68))
          goto LABEL_37;
      }
      else
      {
        *v23 = v68;
        *(_QWORD *)&v68 = 0;
        *v21 = 1;
        if (!BYTE8(v68))
          goto LABEL_37;
      }
LABEL_36:
      MEMORY[0x20BD35710](&v68);
      goto LABEL_37;
    }
    if (v20)
    {
      v24 = v68;
      *(_QWORD *)&v68 = 0;
      v59 = *v23;
      *v23 = v24;
      MEMORY[0x20BD35710](&v59);
      if (BYTE8(v68))
        goto LABEL_36;
    }
LABEL_37:
    if (BYTE8(v67))
    {
      v25 = v67;
      *(_QWORD *)&v67 = 0;
      if (v25)
      {
        v26 = *(std::__shared_weak_count **)(v25 + 32);
        if (!v26)
          goto LABEL_43;
        v27 = (unint64_t *)&v26->__shared_owners_;
        do
          v28 = __ldaxr(v27);
        while (__stlxr(v28 - 1, v27));
        if (!v28)
        {
          ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
          std::__shared_weak_count::__release_weak(v26);
          v29 = *(std::__shared_weak_count **)(v25 + 16);
          if (v29)
            goto LABEL_44;
        }
        else
        {
LABEL_43:
          v29 = *(std::__shared_weak_count **)(v25 + 16);
          if (v29)
          {
LABEL_44:
            v30 = (unint64_t *)&v29->__shared_owners_;
            do
              v31 = __ldaxr(v30);
            while (__stlxr(v31 - 1, v30));
            if (!v31)
            {
              ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
              std::__shared_weak_count::__release_weak(v29);
            }
          }
        }
        MEMORY[0x20BD3583C](v25, 0x10F0C40B62ED6C6);
      }
    }
    v32 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5;
    v33 = *(_QWORD *)(a1 + 128) + 1;
    if (v33 < v32)
      v32 = 0;
    *(_QWORD *)(a1 + 128) = v33 - v32;
    --*(_QWORD *)(a1 + 144);
    std::condition_variable::notify_all((std::condition_variable *)(a1 + 208));
    if (!__lk.__owns_)
    {
      v52 = 1;
      v53 = "unique_lock::unlock: not locked";
      goto LABEL_123;
    }
    std::mutex::unlock(__lk.__m_);
    __lk.__owns_ = 0;
    if (v55)
    {
      if (!v54)
      {
LABEL_91:
        if (v57)
          std::promise<void>::set_value(&v56);
        goto LABEL_93;
      }
      v34 = atomic_load((unsigned __int8 *)&qword_254630278);
      if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_254630278))
      {
        sub_20B5271B0((uint64_t)&v67);
        sub_20AECF058("com.apple.cv3d", (unint64_t)&v67, &qword_254630260);
        if (BYTE8(v68) && SBYTE7(v68) < 0)
          operator delete((void *)v67);
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &qword_254630260, &dword_20AEBB000);
        __cxa_guard_release(&qword_254630278);
      }
      if (byte_254630277 >= 0)
        v35 = (const char *)&qword_254630260;
      else
        v35 = (const char *)qword_254630260;
      if (byte_254630277 >= 0)
        v36 = byte_254630277;
      else
        v36 = unk_254630268;
      object = os_log_create(v35, *(const char **)(v54 + 40));
      if (v36 > 0x7FFFFFFFFFFFFFF7)
        sub_20AEC0138();
      if (v36 >= 0x17)
      {
        v38 = (v36 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v36 | 7) != 0x17)
          v38 = v36 | 7;
        v39 = v38 + 1;
        v37 = operator new(v38 + 1);
        v61[1] = (void *)v36;
        v62 = v39 | 0x8000000000000000;
        v61[0] = v37;
      }
      else
      {
        HIBYTE(v62) = v36;
        v37 = v61;
        if (!v36)
        {
LABEL_75:
          *((_BYTE *)v37 + v36) = 0;
          v63 = 1;
          v40 = *(_QWORD *)(v54 + 48);
          if (v40 > 0x7FFFFFFFFFFFFFF7)
            sub_20AEC0138();
          v41 = *(const void **)(v54 + 40);
          if (v40 >= 0x17)
          {
            v43 = (v40 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v40 | 7) != 0x17)
              v43 = v40 | 7;
            v44 = v43 + 1;
            v42 = operator new(v43 + 1);
            __p[1] = (void *)v40;
            v65 = v44 | 0x8000000000000000;
            __p[0] = v42;
          }
          else
          {
            HIBYTE(v65) = *(_QWORD *)(v54 + 48);
            v42 = __p;
            if (!v40)
            {
              LOBYTE(__p[0]) = 0;
              v66 = 1;
              if ((SHIBYTE(v65) & 0x80000000) == 0)
                goto LABEL_79;
              goto LABEL_85;
            }
          }
          memmove(v42, v41, v40);
          *((_BYTE *)v42 + v40) = 0;
          v66 = 1;
          if ((SHIBYTE(v65) & 0x80000000) == 0)
          {
LABEL_79:
            if (!v63)
              goto LABEL_88;
            goto LABEL_86;
          }
LABEL_85:
          operator delete(__p[0]);
          if (!v63)
          {
LABEL_88:
            if (object)
              os_release(object);
            os_log_pack_send();
            goto LABEL_91;
          }
LABEL_86:
          if (SHIBYTE(v62) < 0)
            operator delete(v61[0]);
          goto LABEL_88;
        }
      }
      memmove(v37, v35, v36);
      goto LABEL_75;
    }
LABEL_93:
    if (!__lk.__m_)
    {
      v52 = 1;
      v53 = "unique_lock::lock: references null mutex";
      goto LABEL_123;
    }
    if (__lk.__owns_)
      break;
    std::mutex::lock(__lk.__m_);
    __lk.__owns_ = 1;
    if (v57)
      MEMORY[0x20BD35710](&v56);
    if (!v55)
      goto LABEL_13;
    v45 = v54;
    v54 = 0;
    if (!v45)
      goto LABEL_13;
    v46 = *(std::__shared_weak_count **)(v45 + 32);
    if (!v46)
      goto LABEL_103;
    v47 = (unint64_t *)&v46->__shared_owners_;
    do
      v48 = __ldaxr(v47);
    while (__stlxr(v48 - 1, v47));
    if (!v48)
    {
      ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
      std::__shared_weak_count::__release_weak(v46);
      v49 = *(std::__shared_weak_count **)(v45 + 16);
      if (v49)
      {
LABEL_104:
        v50 = (unint64_t *)&v49->__shared_owners_;
        do
          v51 = __ldaxr(v50);
        while (__stlxr(v51 - 1, v50));
        if (!v51)
        {
          ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
          std::__shared_weak_count::__release_weak(v49);
        }
      }
    }
    else
    {
LABEL_103:
      v49 = *(std::__shared_weak_count **)(v45 + 16);
      if (v49)
        goto LABEL_104;
    }
    MEMORY[0x20BD3583C](v45, 0x10F0C40B62ED6C6);
LABEL_13:
    if (!*(_QWORD *)(a1 + 144))
      goto LABEL_2;
  }
  v52 = 11;
  v53 = "unique_lock::lock: already locked";
LABEL_123:
  std::__throw_system_error(v52, v53);
  __break(1u);
}

void sub_20B0B115C(uint64_t a1)
{
  sub_20B0B1B80(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0B1180(uint64_t a1)
{
  uint64_t result;

  result = a1 + 16;
  if (*(char *)(a1 + 39) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_20B0B119C(uint64_t a1)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 40);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 40));
  while (*(_BYTE *)(a1 + 157) || *(_QWORD *)(a1 + 144))
    std::condition_variable::wait((std::condition_variable *)(a1 + 256), &v2);
  if (v2.__owns_)
    std::mutex::unlock(v2.__m_);
}

void sub_20B0B1208(uint64_t a1, uint64_t *a2)
{
  std::__assoc_sub_state *v4;
  std::promise<void> v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 40);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(_QWORD *)(a1 + 144) == (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5)
    sub_20B0B1CC0(a1, &__lk);
  std::promise<void>::promise(&v5);
  std::promise<void>::get_future(&v5);
  sub_20B0B202C((_QWORD *)(a1 + 104), a2, (uint64_t *)&v5);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 160));
  if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
    __lk.__owns_ = 0;
    std::__assoc_sub_state::wait(v4);
    std::future<void>::~future((std::future<void> *)&v4);
    MEMORY[0x20BD35710](&v5);
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    __break(1u);
  }
}

void sub_20B0B12F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::mutex *a11, char a12)
{
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B0B1334(uint64_t a1, uint64_t *a2)
{
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 40);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(_QWORD *)(a1 + 144) == (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5)
    sub_20B0B1CC0(a1, &v4);
  sub_20B0B2160((_QWORD *)(a1 + 104), a2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 160));
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
}

void sub_20B0B13C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_20B0B13E0(uint64_t a1, uint64_t *a2)
{
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 40);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 40));
  if (*(_QWORD *)(a1 + 144) == (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5)
    sub_20B0B1CC0(a1, &v4);
  sub_20B0B227C((_QWORD *)(a1 + 104), a2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 160));
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
}

void sub_20B0B1470(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0B148C(uint64_t a1)
{
  return sub_20B0B1B80(a1 - 8);
}

void sub_20B0B1494(uint64_t a1)
{
  sub_20B0B1B80(a1 - 8);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0B14BC(uint64_t a1)
{
  uint64_t result;

  result = a1 + 8;
  if (*(char *)(a1 + 31) < 0)
    return *(_QWORD *)result;
  return result;
}

void sub_20B0B14D8(uint64_t a1)
{
  std::unique_lock<std::mutex> v2;

  v2.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  v2.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  while (*(_BYTE *)(a1 + 149) || *(_QWORD *)(a1 + 136))
    std::condition_variable::wait((std::condition_variable *)(a1 + 248), &v2);
  if (v2.__owns_)
    std::mutex::unlock(v2.__m_);
}

void sub_20B0B1544(uint64_t a1, uint64_t *a2)
{
  std::__assoc_sub_state *v4;
  std::promise<void> v5;
  std::unique_lock<std::mutex> __lk;

  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  if (*(_QWORD *)(a1 + 136) == (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 5)
    sub_20B0B1CC0(a1 - 8, &__lk);
  std::promise<void>::promise(&v5);
  std::promise<void>::get_future(&v5);
  sub_20B0B202C((_QWORD *)(a1 + 96), a2, (uint64_t *)&v5);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 152));
  if (__lk.__owns_)
  {
    std::mutex::unlock(__lk.__m_);
    __lk.__owns_ = 0;
    std::__assoc_sub_state::wait(v4);
    std::future<void>::~future((std::future<void> *)&v4);
    MEMORY[0x20BD35710](&v5);
    if (__lk.__owns_)
      std::mutex::unlock(__lk.__m_);
  }
  else
  {
    std::__throw_system_error(1, "unique_lock::unlock: not locked");
    __break(1u);
  }
}

void sub_20B0B162C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, std::mutex *a11, char a12)
{
  if (a12)
    std::mutex::unlock(a11);
  _Unwind_Resume(exception_object);
}

void sub_20B0B1670(uint64_t a1, uint64_t *a2)
{
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  if (*(_QWORD *)(a1 + 136) == (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 5)
    sub_20B0B1CC0(a1 - 8, &v4);
  sub_20B0B2160((_QWORD *)(a1 + 96), a2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 152));
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
}

void sub_20B0B1700(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

void sub_20B0B171C(uint64_t a1, uint64_t *a2)
{
  std::unique_lock<std::mutex> v4;

  v4.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(a1 + 32);
  v4.__owns_ = 1;
  std::mutex::lock((std::mutex *)(a1 + 32));
  if (*(_QWORD *)(a1 + 136) == (uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 5)
    sub_20B0B1CC0(a1 - 8, &v4);
  sub_20B0B227C((_QWORD *)(a1 + 96), a2);
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 152));
  if (v4.__owns_)
    std::mutex::unlock(v4.__m_);
}

void sub_20B0B17AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, char a10)
{
  if (a10)
    std::mutex::unlock(a9);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0B17C8(uint64_t a1)
{
  std::__thread_specific_ptr<std::__thread_struct> *v2;
  const void *v3;
  const void *v4;
  uint64_t v5;

  v2 = std::__thread_local_data();
  v3 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  pthread_setspecific(v2->__key_, v3);
  (*(void (**)(_QWORD))(a1 + 8))(*(_QWORD *)(a1 + 16));
  v4 = *(const void **)a1;
  *(_QWORD *)a1 = 0;
  if (v4)
  {
    v5 = MEMORY[0x20BD35314]();
    MEMORY[0x20BD3583C](v5, 0x20C4093837F09);
  }
  MEMORY[0x20BD3583C](a1, 0xA0C40A8488062);
  return 0;
}

void sub_20B0B184C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0B1860((uint64_t **)va);
  _Unwind_Resume(a1);
}

uint64_t **sub_20B0B1860(uint64_t **a1)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *v2;
    *v2 = 0;
    if (v3)
    {
      v4 = MEMORY[0x20BD35314]();
      MEMORY[0x20BD3583C](v4, 0x20C4093837F09);
    }
    MEMORY[0x20BD3583C](v2, 0xA0C40A8488062);
  }
  return a1;
}

uint64_t *sub_20B0B18C8(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = MEMORY[0x20BD35314]();
    MEMORY[0x20BD3583C](v3, 0x20C4093837F09);
  }
  return a1;
}

uint64_t sub_20B0B190C(uint64_t result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;

  v2 = result;
  if (*(unsigned __int8 *)(result + 8) == *((unsigned __int8 *)a2 + 8))
  {
    if (*(_BYTE *)(result + 8))
    {
      v3 = *a2;
      *a2 = 0;
      v4 = *(_QWORD *)result;
      *(_QWORD *)result = v3;
      if (v4)
      {
        v5 = *(std::__shared_weak_count **)(v4 + 32);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v8 = *(std::__shared_weak_count **)(v4 + 16);
        if (v8)
        {
          v9 = (unint64_t *)&v8->__shared_owners_;
          do
            v10 = __ldaxr(v9);
          while (__stlxr(v10 - 1, v9));
          if (!v10)
          {
            ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
            std::__shared_weak_count::__release_weak(v8);
          }
        }
        JUMPOUT(0x20BD3583CLL);
      }
    }
  }
  else if (*(_BYTE *)(result + 8))
  {
    v11 = *(_QWORD *)result;
    *(_QWORD *)result = 0;
    if (v11)
    {
      v12 = *(std::__shared_weak_count **)(v11 + 32);
      if (v12)
      {
        v13 = (unint64_t *)&v12->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      v15 = *(std::__shared_weak_count **)(v11 + 16);
      if (v15)
      {
        v16 = (unint64_t *)&v15->__shared_owners_;
        do
          v17 = __ldaxr(v16);
        while (__stlxr(v17 - 1, v16));
        if (!v17)
        {
          ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
          std::__shared_weak_count::__release_weak(v15);
        }
      }
      result = MEMORY[0x20BD3583C](v11, 0x10F0C40B62ED6C6);
    }
    *(_BYTE *)(v2 + 8) = 0;
  }
  else
  {
    v18 = *a2;
    *a2 = 0;
    *(_QWORD *)result = v18;
    *(_BYTE *)(result + 8) = 1;
  }
  return result;
}

uint64_t *sub_20B0B1AAC(uint64_t *a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;

  if (*((_BYTE *)a1 + 24))
    MEMORY[0x20BD35710](a1 + 2);
  if (*((_BYTE *)a1 + 8))
  {
    v2 = *a1;
    *a1 = 0;
    if (v2)
    {
      v3 = *(std::__shared_weak_count **)(v2 + 32);
      if (v3)
      {
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v5 = __ldaxr(p_shared_owners);
        while (__stlxr(v5 - 1, p_shared_owners));
        if (!v5)
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v3);
        }
      }
      v6 = *(std::__shared_weak_count **)(v2 + 16);
      if (v6)
      {
        v7 = (unint64_t *)&v6->__shared_owners_;
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      MEMORY[0x20BD3583C](v2, 0x10F0C40B62ED6C6);
    }
  }
  return a1;
}

uint64_t sub_20B0B1B80(uint64_t a1)
{
  std::mutex *v2;
  uint64_t *v3;
  uint64_t *v4;
  void *v5;
  std::unique_lock<std::mutex> v7;

  *(_QWORD *)a1 = &off_24C40CBA0;
  *(_QWORD *)(a1 + 8) = &unk_24C40CBE8;
  v2 = (std::mutex *)(a1 + 40);
  std::mutex::lock((std::mutex *)(a1 + 40));
  atomic_store(1u, (unsigned __int8 *)(a1 + 156));
  std::condition_variable::notify_all((std::condition_variable *)(a1 + 160));
  std::mutex::unlock(v2);
  v7.__m_ = v2;
  v7.__owns_ = 1;
  std::mutex::lock(v2);
  while (*(_BYTE *)(a1 + 157) || *(_QWORD *)(a1 + 144))
    std::condition_variable::wait((std::condition_variable *)(a1 + 256), &v7);
  if (v7.__owns_)
    std::mutex::unlock(v7.__m_);
  std::thread::join((std::thread *)(a1 + 304));
  if (*(_BYTE *)(a1 + 312))
    std::thread::~thread((std::thread *)(a1 + 304));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 256));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 208));
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 160));
  v3 = *(uint64_t **)(a1 + 104);
  if (v3)
  {
    v4 = *(uint64_t **)(a1 + 112);
    v5 = *(void **)(a1 + 104);
    if (v4 != v3)
    {
      do
        v4 = sub_20B0B1AAC(v4 - 4);
      while (v4 != v3);
      v5 = *(void **)(a1 + 104);
    }
    *(_QWORD *)(a1 + 112) = v3;
    operator delete(v5);
  }
  std::mutex::~mutex(v2);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

void sub_20B0B1CC0(uint64_t a1, std::unique_lock<std::mutex> *__lk)
{
  int v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  int64_t v9;
  char *v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  int v23;
  _BYTE *v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  _BYTE *v33;
  int v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  __int128 v44;
  uint64_t v45;

  v3 = *(_DWORD *)(a1 + 152);
  switch(v3)
  {
    case 2:
      v43 = 0u;
      v44 = 0u;
      v31 = *(_QWORD *)(a1 + 104) + 32 * *(_QWORD *)(a1 + 128);
      sub_20B0B190C(v31, (uint64_t *)&v43);
      v34 = *(unsigned __int8 *)(v31 + 24);
      v33 = (_BYTE *)(v31 + 24);
      v32 = v34;
      v35 = (uint64_t *)(v33 - 8);
      if (v34 == BYTE8(v44))
      {
        if (v32)
        {
          v36 = v44;
          *(_QWORD *)&v44 = 0;
          v45 = *v35;
          *v35 = v36;
          MEMORY[0x20BD35710](&v45);
        }
      }
      else if (v32)
      {
        MEMORY[0x20BD35710](v35);
        *v33 = 0;
      }
      else
      {
        *v35 = v44;
        *(_QWORD *)&v44 = 0;
        *v33 = 1;
      }
      sub_20B0B1AAC((uint64_t *)&v43);
      v40 = (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5;
      v41 = *(_QWORD *)(a1 + 128) + 1;
      if (v41 < v40)
        v40 = 0;
      *(_QWORD *)(a1 + 128) = v41 - v40;
      --*(_QWORD *)(a1 + 144);
      break;
    case 1:
      while (*(_QWORD *)(a1 + 144) == (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 5)
        std::condition_variable::wait((std::condition_variable *)(a1 + 208), __lk);
      break;
    case 0:
      v5 = *(uint64_t **)(a1 + 104);
      v4 = *(uint64_t **)(a1 + 112);
      v6 = (char *)v4 - (char *)v5;
      if (v4 == v5)
      {
        v11 = 0;
        v8 = 0;
        v15 = 0;
        v14 = 0;
        v12 = 0;
        v10 = 0;
        if (v4)
          goto LABEL_40;
      }
      else
      {
        if ((unint64_t)v6 >= 0x7FFFFFFFFFFFFFF1)
          sub_20AEC60B8();
        v7 = v6 >> 4;
        v8 = *(_QWORD *)(a1 + 144);
        v9 = 2 * v6;
        v10 = (char *)operator new(2 * v6);
        v11 = &v10[32 * v7];
        bzero(v10, v9);
        v12 = &v10[v9];
        if (v8)
        {
          v42 = v11;
          v13 = 0;
          v14 = 0;
          v15 = 0;
          v8 = 0;
          v16 = v9 >> 5;
          do
          {
            while (1)
            {
              v17 = *(_QWORD *)(a1 + 104);
              v18 = (v13 + *(_QWORD *)(a1 + 128)) % (unint64_t)((*(_QWORD *)(a1 + 112) - v17) >> 5);
              v19 = (uint64_t *)(v17 + 32 * v18);
              LOBYTE(v43) = 0;
              BYTE8(v43) = 0;
              if (*((_BYTE *)v19 + 8))
              {
                v20 = *v19;
                *v19 = 0;
                *(_QWORD *)&v43 = v20;
                BYTE8(v43) = 1;
              }
              LOBYTE(v44) = 0;
              BYTE8(v44) = 0;
              if (*((_BYTE *)v19 + 24))
              {
                v21 = v17 + 32 * v18;
                *(_QWORD *)&v44 = *(_QWORD *)(v21 + 16);
                *(_QWORD *)(v21 + 16) = 0;
                BYTE8(v44) = 1;
              }
              sub_20B0B190C((uint64_t)&v10[32 * v15], (uint64_t *)&v43);
              v22 = &v10[32 * v15];
              v25 = v22[24];
              v24 = v22 + 24;
              v23 = v25;
              v26 = (uint64_t *)(v24 - 8);
              if (v25 == BYTE8(v44))
              {
                if (v23)
                {
                  v27 = v44;
                  *(_QWORD *)&v44 = 0;
                  v45 = *v26;
                  *v26 = v27;
                  MEMORY[0x20BD35710](&v45);
                }
              }
              else if (v23)
              {
                MEMORY[0x20BD35710](v26);
                *v24 = 0;
              }
              else
              {
                *v26 = v44;
                *(_QWORD *)&v44 = 0;
                *v24 = 1;
              }
              sub_20B0B1AAC((uint64_t *)&v43);
              v28 = v15 + 1;
              v29 = v15 + 1 >= v16 ? v16 : 0;
              if (v8 == v16)
                break;
              ++v8;
              v15 = v28 - v29;
              if (++v13 == *(_QWORD *)(a1 + 144))
                goto LABEL_27;
            }
            if (v14 + 1 >= v16)
              v30 = v16;
            else
              v30 = 0;
            v14 = v14 + 1 - v30;
            v8 = v16;
            v15 = v28 - v29;
            ++v13;
          }
          while (v13 != *(_QWORD *)(a1 + 144));
LABEL_27:
          v4 = *(uint64_t **)(a1 + 104);
          v11 = v42;
          if (!v4)
            goto LABEL_44;
          goto LABEL_40;
        }
        v15 = 0;
        v14 = 0;
        v4 = v5;
        if (v5)
        {
LABEL_40:
          v38 = *(uint64_t **)(a1 + 112);
          v39 = v4;
          if (v38 != v4)
          {
            do
              v38 = sub_20B0B1AAC(v38 - 4);
            while (v38 != v4);
            v39 = *(uint64_t **)(a1 + 104);
          }
          *(_QWORD *)(a1 + 112) = v4;
          operator delete(v39);
        }
      }
LABEL_44:
      *(_QWORD *)(a1 + 104) = v10;
      *(_QWORD *)(a1 + 112) = v12;
      *(_QWORD *)(a1 + 120) = v11;
      *(_QWORD *)(a1 + 128) = v14;
      *(_QWORD *)(a1 + 136) = v15;
      *(_QWORD *)(a1 + 144) = v8;
      break;
  }
}

uint64_t sub_20B0B202C(_QWORD *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BYTE *v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t result;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  char v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  unsigned __int8 v23;
  uint64_t v24;

  v4 = *a1 + 32 * a1[4];
  v5 = *a3;
  *a3 = 0;
  v19 = 1;
  v6 = *a2;
  *a2 = 0;
  v20 = v6;
  v21 = 1;
  v22 = v5;
  v18 = 0;
  v23 = 1;
  sub_20B0B190C(v4, &v20);
  v9 = *(unsigned __int8 *)(v4 + 24);
  v8 = (_BYTE *)(v4 + 24);
  v7 = v9;
  v10 = (uint64_t *)(v8 - 8);
  if (v9 == v23)
  {
    if (v7)
    {
      v11 = v22;
      v22 = 0;
      v24 = *v10;
      *v10 = v11;
      MEMORY[0x20BD35710](&v24);
    }
  }
  else if (v7)
  {
    MEMORY[0x20BD35710](v10);
    *v8 = 0;
  }
  else
  {
    *v10 = v22;
    v22 = 0;
    *v8 = 1;
  }
  sub_20B0B1AAC(&v20);
  result = MEMORY[0x20BD35710](&v18);
  v13 = (uint64_t)(a1[1] - *a1) >> 5;
  v14 = a1[5];
  v15 = a1[4] + 1;
  if (v15 >= v13)
    v16 = (uint64_t)(a1[1] - *a1) >> 5;
  else
    v16 = 0;
  a1[4] = v15 - v16;
  if (v14 == v13)
  {
    v17 = a1[3] + 1;
    if (v17 < v13)
      v13 = 0;
    a1[3] = v17 - v13;
  }
  else
  {
    a1[5] = v14 + 1;
  }
  return result;
}

uint64_t *sub_20B0B2160(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  char v18;
  uint64_t v19;
  unsigned __int8 v20;
  uint64_t v21;

  v3 = *a1 + 32 * a1[4];
  v4 = *a2;
  *a2 = 0;
  v17 = v4;
  v18 = 1;
  LOBYTE(v19) = 0;
  v20 = 0;
  sub_20B0B190C(v3, &v17);
  v7 = *(unsigned __int8 *)(v3 + 24);
  v6 = (_BYTE *)(v3 + 24);
  v5 = v7;
  v8 = (uint64_t *)(v6 - 8);
  if (v7 == v20)
  {
    if (v5)
    {
      v9 = v19;
      v19 = 0;
      v21 = *v8;
      *v8 = v9;
      MEMORY[0x20BD35710](&v21);
    }
  }
  else if (v5)
  {
    MEMORY[0x20BD35710](v8);
    *v6 = 0;
  }
  else
  {
    *v8 = v19;
    v19 = 0;
    *v6 = 1;
  }
  result = sub_20B0B1AAC(&v17);
  v11 = a1[5];
  v12 = a1[1];
  v13 = (v12 - *a1) >> 5;
  v14 = a1[4] + 1;
  if (v14 >= v13)
    v15 = (v12 - *a1) >> 5;
  else
    v15 = 0;
  a1[4] = v14 - v15;
  if (v11 == v13)
  {
    v16 = a1[3] + 1;
    if (v16 < v11)
      v11 = 0;
    a1[3] = v16 - v11;
  }
  else
  {
    a1[5] = v11 + 1;
  }
  return result;
}

uint64_t *sub_20B0B227C(_QWORD *a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  _BYTE *v6;
  int v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t *result;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  unsigned __int8 v19;
  uint64_t v20;

  v3 = *a1 + 32 * a1[4];
  v4 = *a2;
  v16 = a2[1];
  v17 = 1;
  v18 = v4;
  *a2 = 0;
  a2[1] = 0;
  v19 = 1;
  sub_20B0B190C(v3, &v16);
  v7 = *(unsigned __int8 *)(v3 + 24);
  v6 = (_BYTE *)(v3 + 24);
  v5 = v7;
  v8 = (uint64_t *)(v6 - 8);
  if (v7 == v19)
  {
    if (v5)
    {
      v9 = v18;
      v18 = 0;
      v20 = *v8;
      *v8 = v9;
      MEMORY[0x20BD35710](&v20);
    }
  }
  else if (v5)
  {
    MEMORY[0x20BD35710](v8);
    *v6 = 0;
  }
  else
  {
    *v8 = v18;
    v18 = 0;
    *v6 = 1;
  }
  result = sub_20B0B1AAC(&v16);
  v11 = (uint64_t)(a1[1] - *a1) >> 5;
  v12 = a1[5];
  v13 = a1[4] + 1;
  if (v13 >= v11)
    v14 = (uint64_t)(a1[1] - *a1) >> 5;
  else
    v14 = 0;
  a1[4] = v13 - v14;
  if (v12 == v11)
  {
    v15 = a1[3] + 1;
    if (v15 < v11)
      v11 = 0;
    a1[3] = v15 - v11;
  }
  else
  {
    a1[5] = v12 + 1;
  }
  return result;
}

void sub_20B0B2398(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40CC78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B0B23A8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40CC78;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0B23D8(uint64_t a1)
{
  void *v2;

  sub_20B5321D4((uint64_t)sub_20B0AFF20);
  std::mutex::~mutex((std::mutex *)(a1 + 48));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_20B0B2428(_QWORD *a1@<X8>)
{
  _QWORD *v2;
  void *__p;
  char v4;
  char v5;
  void *v6;
  void *v7;
  uint64_t v8;

  v2 = (_QWORD *)operator new();
  v7 = 0;
  v8 = 0;
  v6 = 0;
  LOBYTE(__p) = 0;
  v5 = 0;
  sub_20B21AE74(v2, 1, (uint64_t)&v6, (uint64_t *)&__p);
  *a1 = v2;
  if (v5 && v4 < 0)
    operator delete(__p);
  if (v6)
  {
    v7 = v6;
    operator delete(v6);
  }
}

void sub_20B0B24B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, void *a17, uint64_t a18)
{
  uint64_t v18;

  if (a16 && a15 < 0)
    operator delete(__p);
  if (a17)
    operator delete(a17);
  MEMORY[0x20BD3583C](v18, 0xA1C40BD48D6D6);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0B2500(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v5[16];
  void *v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *__p;
  char v12;
  char v13;
  char v14;
  char v15;
  _QWORD v16[2];
  _QWORD v17[2];

  v17[0] = a1;
  v17[1] = a2;
  v16[0] = &off_24C40CD68;
  v16[1] = v17;
  sub_20B52A3E8((uint64_t)v16, (uint64_t)v5);
  if (v15)
    return a1;
  if (*(_BYTE *)(a1 + 88))
  {
    v4 = *(_QWORD *)(a1 + 80);
    if (!v4)
      sub_20AECABA4();
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v4 + 48))(v4, v5);
    if (v15)
      return a1;
  }
  if (!v14)
    return a1;
  if (v13)
  {
    if (v12 < 0)
      operator delete(__p);
    if (v10 < 0)
      operator delete(v9);
  }
  if (!v8 || (v7 & 0x80000000) == 0)
    return a1;
  operator delete(v6);
  return a1;
}

void sub_20B0B25DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0B25F0(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v5;
  uint64_t v6;
  int v7;
  char *v8;
  int v9;
  _QWORD *v10;
  char *v11;
  _QWORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v30;
  _QWORD v31[3];
  _QWORD *v32;
  char v33;
  _QWORD v34[3];
  _QWORD *v35;
  _QWORD v36[3];
  _QWORD *v37;
  unsigned __int8 v38;
  _QWORD v39[3];
  _QWORD *v40;
  uint64_t v41;

  v41 = *MEMORY[0x24BDAC8D0];
  *a1 = &off_24C40CD00;
  v5 = (_QWORD *)a2[3];
  if (v5)
  {
    if (v5 == a2)
    {
      v35 = v34;
      (*(void (**)(_QWORD *, _QWORD *))(*a2 + 24))(a2, v34);
    }
    else
    {
      v35 = (_QWORD *)a2[3];
      a2[3] = 0;
    }
  }
  else
  {
    v35 = 0;
  }
  LOBYTE(v31[0]) = 0;
  v33 = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    v6 = *(_QWORD *)(a3 + 24);
    if (v6)
    {
      if (v6 == a3)
      {
        v32 = v31;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a3 + 24))(a3, v31);
      }
      else
      {
        v32 = *(_QWORD **)(a3 + 24);
        *(_QWORD *)(a3 + 24) = 0;
      }
    }
    else
    {
      v32 = 0;
    }
    v7 = 1;
    v33 = 1;
  }
  else
  {
    v7 = 0;
  }
  v8 = (char *)operator new(0xC0uLL);
  *((_QWORD *)v8 + 1) = 0;
  *((_QWORD *)v8 + 2) = 0;
  *(_QWORD *)v8 = &off_24C40CDA8;
  if (v35)
  {
    if (v35 == v34)
    {
      v40 = v39;
      (*(void (**)(_QWORD *, _QWORD *))(v34[0] + 24))(v34, v39);
      LOBYTE(v36[0]) = 0;
      v38 = 0;
      if (!v33)
        goto LABEL_23;
    }
    else
    {
      v40 = v35;
      v35 = 0;
      LOBYTE(v36[0]) = 0;
      v38 = 0;
      if (!v7)
      {
LABEL_23:
        v9 = 0;
        *((_QWORD *)v8 + 4) = 0;
        *((_QWORD *)v8 + 5) = 0;
        *((_QWORD *)v8 + 3) = &off_24C40CCC8;
        v10 = v40;
        if (!v40)
          goto LABEL_24;
LABEL_29:
        if (v10 == v39)
        {
          *((_QWORD *)v8 + 9) = v8 + 48;
          (*(void (**)(_QWORD *))(v39[0] + 24))(v39);
          v13 = v38;
          v8[80] = 0;
          v11 = v8 + 80;
          v8[112] = 0;
          if (v13)
            goto LABEL_31;
        }
        else
        {
          *((_QWORD *)v8 + 9) = v10;
          v40 = 0;
          v8[80] = 0;
          v11 = v8 + 80;
          v8[112] = 0;
          if (v9)
            goto LABEL_31;
        }
LABEL_35:
        *((_QWORD *)v8 + 15) = 0;
        *((_QWORD *)v8 + 16) = 850045863;
        *(_OWORD *)(v8 + 136) = 0u;
        *(_OWORD *)(v8 + 152) = 0u;
        *(_OWORD *)(v8 + 168) = 0u;
        *((_QWORD *)v8 + 23) = 0;
        goto LABEL_43;
      }
    }
  }
  else
  {
    v40 = 0;
    LOBYTE(v36[0]) = 0;
    v38 = 0;
    if (!v7)
      goto LABEL_23;
  }
  if (v32)
  {
    if (v32 == v31)
    {
      v37 = v36;
      (*(void (**)(_QWORD *, _QWORD *))(v31[0] + 24))(v31, v36);
    }
    else
    {
      v37 = v32;
      v32 = 0;
    }
  }
  else
  {
    v37 = 0;
  }
  v9 = 1;
  v38 = 1;
  *((_QWORD *)v8 + 4) = 0;
  *((_QWORD *)v8 + 5) = 0;
  *((_QWORD *)v8 + 3) = &off_24C40CCC8;
  v10 = v40;
  if (v40)
    goto LABEL_29;
LABEL_24:
  *((_QWORD *)v8 + 9) = 0;
  v8[80] = 0;
  v11 = v8 + 80;
  v8[112] = 0;
  if (!v9)
    goto LABEL_35;
LABEL_31:
  if (v37)
  {
    if (v37 == v36)
    {
      *((_QWORD *)v8 + 13) = v11;
      (*(void (**)(_QWORD *))(v36[0] + 24))(v36);
      v30 = v38;
      v8[112] = 1;
      *((_QWORD *)v8 + 15) = 0;
      *((_QWORD *)v8 + 16) = 850045863;
      *(_OWORD *)(v8 + 136) = 0u;
      *(_OWORD *)(v8 + 152) = 0u;
      *(_OWORD *)(v8 + 168) = 0u;
      *((_QWORD *)v8 + 23) = 0;
      if (!v30)
        goto LABEL_43;
      goto LABEL_38;
    }
    v12 = &v37;
    *((_QWORD *)v8 + 13) = v37;
  }
  else
  {
    v12 = v8 + 104;
  }
  *v12 = 0;
  v8[112] = 1;
  *((_QWORD *)v8 + 15) = 0;
  *((_QWORD *)v8 + 16) = 850045863;
  *(_OWORD *)(v8 + 136) = 0u;
  *(_OWORD *)(v8 + 152) = 0u;
  *(_OWORD *)(v8 + 168) = 0u;
  *((_QWORD *)v8 + 23) = 0;
LABEL_38:
  v14 = v37;
  if (v37 == v36)
  {
    v15 = 4;
    v14 = v36;
  }
  else
  {
    if (!v37)
      goto LABEL_43;
    v15 = 5;
  }
  (*(void (**)(void))(*v14 + 8 * v15))();
LABEL_43:
  v16 = v8 + 24;
  v17 = v40;
  if (v40 == v39)
  {
    v18 = 4;
    v17 = v39;
    goto LABEL_47;
  }
  if (v40)
  {
    v18 = 5;
LABEL_47:
    (*(void (**)(void))(*v17 + 8 * v18))();
  }
  a1[1] = v16;
  a1[2] = v8;
  sub_20B0B2428(v36);
  v19 = v36[0];
  v36[0] = 0;
  v20 = *((_QWORD *)v8 + 15);
  *((_QWORD *)v8 + 15) = v19;
  if (v20)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
    v21 = v36[0];
    v36[0] = 0;
    if (v21)
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
  }
  v22 = (unint64_t *)(v8 + 16);
  do
    v23 = __ldxr(v22);
  while (__stxr(v23 + 1, v22));
  v24 = (std::__shared_weak_count *)*((_QWORD *)v8 + 5);
  *((_QWORD *)v8 + 4) = v16;
  *((_QWORD *)v8 + 5) = v8;
  if (v24)
    std::__shared_weak_count::__release_weak(v24);
  if (v33)
  {
    v25 = v32;
    if (v32 == v31)
    {
      v26 = 4;
      v25 = v31;
    }
    else
    {
      if (!v32)
        goto LABEL_61;
      v26 = 5;
    }
    (*(void (**)(void))(*v25 + 8 * v26))();
  }
LABEL_61:
  v27 = v35;
  if (v35 == v34)
  {
    v28 = 4;
    v27 = v34;
    goto LABEL_65;
  }
  if (v35)
  {
    v28 = 5;
LABEL_65:
    (*(void (**)(void))(*v27 + 8 * v28))();
  }
  return a1;
}

void sub_20B0B2A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0B2B30(_QWORD *result)
{
  _QWORD *v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  *result = &off_24C40CD00;
  v2 = (std::__shared_weak_count *)result[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

void sub_20B0B2BA4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  *a1 = &off_24C40CD00;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0B2C18(uint64_t a1, uint64_t a2)
{
  sub_20B0B2500(*(_QWORD *)(a1 + 8), a2);
  return a1;
}

uint64_t sub_20B0B2C40(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)a1 = &off_24C40CCC8;
  std::mutex::~mutex((std::mutex *)(a1 + 104));
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(_QWORD **)(a1 + 80);
    if (v3 == (_QWORD *)(a1 + 56))
    {
      v4 = 4;
      v3 = (_QWORD *)(a1 + 56);
    }
    else
    {
      if (!v3)
        goto LABEL_9;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
LABEL_9:
  v5 = *(_QWORD **)(a1 + 48);
  if (v5 == (_QWORD *)(a1 + 24))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 24);
  }
  else
  {
    if (!v5)
      goto LABEL_14;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_14:
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  return a1;
}

void sub_20B0B2CFC(uint64_t a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  std::__shared_weak_count *v7;

  *(_QWORD *)a1 = &off_24C40CCC8;
  std::mutex::~mutex((std::mutex *)(a1 + 104));
  v2 = *(_QWORD *)(a1 + 96);
  *(_QWORD *)(a1 + 96) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  if (*(_BYTE *)(a1 + 88))
  {
    v3 = *(_QWORD **)(a1 + 80);
    if (v3 == (_QWORD *)(a1 + 56))
    {
      v4 = 4;
      v3 = (_QWORD *)(a1 + 56);
    }
    else
    {
      if (!v3)
        goto LABEL_9;
      v4 = 5;
    }
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
LABEL_9:
  v5 = *(_QWORD **)(a1 + 48);
  if (v5 == (_QWORD *)(a1 + 24))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 24);
  }
  else
  {
    if (!v5)
      goto LABEL_14;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_14:
  v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
    std::__shared_weak_count::__release_weak(v7);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0B2DD4()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0B2DE8(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(*v1 + 48);
  if (!v2)
    sub_20AECABA4();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 48))(v2, v1[1]);
}

void sub_20B0B2E18(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40CDA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B0B2E28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40CDA8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0B2E58(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

std::mutex **sub_20B0B2E68(std::mutex **a1)
{
  std::mutex *v2;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::mutex::~mutex(v2);
    MEMORY[0x20BD3583C]();
  }
  return a1;
}

void sub_20B0B2EAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, char a6, uint64_t a7, char a8, char a9)
{
  char *v13;
  char *v14;
  char *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  _BYTE *v21;
  uint64_t v22;
  _BYTE *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _BYTE *v27;
  _QWORD *v28;
  uint64_t v29;
  _BYTE *v30;
  uint64_t v31;
  std::mutex **v32;
  uint64_t v33;
  std::__shared_weak_count *v34;
  unint64_t *v35;
  unint64_t v36;
  std::__shared_weak_count *v37;
  unint64_t *p_shared_owners;
  unint64_t v39;
  __int128 v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  _QWORD *v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  uint64_t v51;
  std::mutex *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t *v57;
  _QWORD *v58;
  unsigned __int8 v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _BYTE *v64;
  uint64_t v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  _BYTE *v76;
  uint64_t v77;
  _OWORD *v78;
  int v79;
  _OWORD *v80;
  __int128 v81;
  std::__shared_weak_count *v82;
  __int128 v83;
  std::__shared_weak_count *v84;
  __int128 v85;
  std::__shared_weak_count *v86;
  unint64_t *v87;
  unint64_t v88;
  int v89;
  uint64_t v90;
  __int128 v91;
  uint64_t v92;
  uint64_t v93;
  __int128 v94;
  std::__shared_weak_count *v95;
  unint64_t *v96;
  unint64_t v97;
  _OWORD *v98;
  uint64_t v99;
  _OWORD *v100;
  void **v101;
  void **v102;
  __int128 v103;
  size_t v104;
  void **v105;
  char v106;
  __int128 v107;
  void *v108;
  size_t v109;
  void **v110;
  char v111;
  __int128 v112;
  void *v113;
  size_t v114;
  void **v115;
  char v116;
  __int128 v117;
  void *v118;
  size_t v119;
  void **v120;
  char v121;
  __int128 v122;
  void *v123;
  size_t v124;
  void **v125;
  char v126;
  __int128 v127;
  void *v128;
  size_t v129;
  __int128 v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  std::chrono::steady_clock::time_point v134;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v135;
  std::chrono::time_point<std::chrono::system_clock, std::chrono::duration<long long, std::ratio<1, 1000000000>>> v136;
  std::chrono::steady_clock::time_point v137;
  std::chrono::system_clock::time_point v138;
  _BYTE *v139;
  int v140;
  uint64_t v141;
  char v142;
  void *v143;
  char v144;
  __int128 v145;
  std::__shared_weak_count *v146;
  void *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  void *v151;
  int v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  std::mutex *v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t *v159;
  unint64_t v160;
  uint64_t v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  std::__shared_weak_count *v166;
  unint64_t *v167;
  unint64_t v168;
  unint64_t *v169;
  unint64_t v170;
  void *v175[2];
  char v176;
  char v177;
  void *v178;
  char v179;
  void *v180;
  char v181;
  char v182;
  char v183;
  void *v184[2];
  char v185;
  char v186;
  void *v187;
  char v188;
  void *v189;
  char v190;
  char v191;
  char v192;
  void *v193[2];
  char v194;
  char v195;
  void *v196;
  char v197;
  void *v198;
  char v199;
  char v200;
  char v201;
  __int128 v202;
  _QWORD v203[2];
  _BYTE __p[32];
  __int128 v205;
  __int128 v206;
  __int128 v207;
  void *v208[3];
  uint64_t v209;
  __int128 v210;
  uint64_t v211;
  __int128 v212;
  uint64_t v213;
  __int128 v214;
  uint64_t v215;
  __int128 v216;
  uint64_t v217;
  char v218;
  __int128 v219;
  uint64_t v220;
  __int128 v221;
  __int128 v222;
  __int128 v223;
  std::unique_lock<std::mutex> __lk;
  void *v225[2];
  char v226;
  unsigned __int8 v227;
  __int128 v228;
  uint64_t v229;
  uint64_t v230;
  __int128 v231;
  uint64_t v232;
  char v233;
  char v234;
  uint64_t v235;

  v235 = *MEMORY[0x24BDAC8D0];
  v13 = (char *)operator new(0x4B8uLL);
  *(_OWORD *)(v13 + 8) = 0u;
  *(_QWORD *)v13 = &off_24C40D278;
  v14 = v13 + 64;
  bzero(v13 + 64, 0x468uLL);
  *((_QWORD *)v13 + 3) = &off_24C40CDF8;
  v15 = v13 + 24;
  *((_QWORD *)v13 + 4) = &unk_24C40CE60;
  *((_QWORD *)v13 + 5) = &unk_24C40CE98;
  v13[104] = 0;
  v13[144] = 0;
  v13[176] = 0;
  v13[472] = 0;
  v13[712] = 0;
  v13[752] = 0;
  v13[64] = 0;
  *((_QWORD *)v13 + 101) = 850045863;
  *((_OWORD *)v13 + 51) = 0u;
  *((_OWORD *)v13 + 52) = 0u;
  *((_OWORD *)v13 + 53) = 0u;
  *((_QWORD *)v13 + 108) = 0;
  *((_QWORD *)v13 + 109) = 1018212795;
  *((_OWORD *)v13 + 55) = 0u;
  *((_OWORD *)v13 + 56) = 0u;
  *((_QWORD *)v13 + 114) = 0;
  v13[1128] = 0;
  v13[1184] = 0;
  *(_OWORD *)(v13 + 1192) = 0u;
  *((_QWORD *)v13 + 145) = 0;
  *(_OWORD *)(v13 + 1144) = 0u;
  v13[1168] = 0;
  v16 = (unint64_t *)(v13 + 16);
  *(_QWORD *)&v202 = v13 + 24;
  *((_QWORD *)&v202 + 1) = v13;
  do
    v17 = __ldxr(v16);
  while (__stxr(v17 + 1, v16));
  *((_QWORD *)v13 + 6) = v15;
  *((_QWORD *)v13 + 7) = v13;
  v18 = a1;
  v19 = a5;
  if (*(_BYTE *)(a3 + 32))
  {
    v20 = *(_QWORD *)(a3 + 24);
    if (v20)
    {
      if (v20 == a3)
      {
        *((_QWORD *)v13 + 11) = v14;
        (*(void (**)(uint64_t, char *))(*(_QWORD *)a3 + 24))(a3, v14);
        goto LABEL_9;
      }
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v20 + 16))(v20);
    }
    *((_QWORD *)v13 + 11) = v20;
LABEL_9:
    v13[96] = 1;
    v15 = (char *)v202;
  }
  v21 = v15 + 80;
  if (v15[112] == *(_BYTE *)(a4 + 32))
  {
    if (!v15[112])
      goto LABEL_43;
    v22 = *(_QWORD *)(a4 + 24);
    if (v22)
    {
      if (v22 == a4)
      {
        *(_QWORD *)&__p[24] = __p;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, __p);
LABEL_28:
        if (__p != v21)
        {
          v26 = *(_QWORD *)&__p[24];
          v27 = (_BYTE *)*((_QWORD *)v15 + 13);
          if (*(_BYTE **)&__p[24] == __p)
          {
            if (v27 == v21)
            {
              (*(void (**)(_BYTE *, std::unique_lock<std::mutex> *))(*(_QWORD *)__p + 24))(__p, &__lk);
              (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
              *(_QWORD *)&__p[24] = 0;
              (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)v15 + 13) + 24))(*((_QWORD *)v15 + 13), __p);
              (*(void (**)(_QWORD))(**((_QWORD **)v15 + 13) + 32))(*((_QWORD *)v15 + 13));
              *((_QWORD *)v15 + 13) = 0;
              *(_QWORD *)&__p[24] = __p;
              (*(void (**)(std::unique_lock<std::mutex> *, char *))&__lk.__m_->__m_.__opaque[16])(&__lk, v15 + 80);
              (*(void (**)(std::unique_lock<std::mutex> *))&__lk.__m_->__m_.__opaque[24])(&__lk);
              *((_QWORD *)v15 + 13) = v21;
              v28 = *(_QWORD **)&__p[24];
              if (*(_BYTE **)&__p[24] == __p)
                goto LABEL_32;
            }
            else
            {
              (*(void (**)(_BYTE *, char *))(*(_QWORD *)__p + 24))(__p, v15 + 80);
              (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
              *(_QWORD *)&__p[24] = *((_QWORD *)v15 + 13);
              v30 = *(_BYTE **)&__p[24];
              *((_QWORD *)v15 + 13) = v21;
              v28 = v30;
              if (v30 == __p)
                goto LABEL_32;
            }
            goto LABEL_38;
          }
          if (v27 != v21)
          {
            *(_QWORD *)&__p[24] = *((_QWORD *)v15 + 13);
            *((_QWORD *)v15 + 13) = v26;
            v28 = v27;
            if (v27 == __p)
            {
LABEL_32:
              v29 = 4;
              v28 = __p;
LABEL_40:
              (*(void (**)(void))(*v28 + 8 * v29))();
              goto LABEL_43;
            }
LABEL_38:
            if (!v28)
              goto LABEL_43;
            v29 = 5;
            goto LABEL_40;
          }
          (*(void (**)(char *, _BYTE *))(*(_QWORD *)v21 + 24))(v15 + 80, __p);
          (*(void (**)(_QWORD))(**((_QWORD **)v15 + 13) + 32))(*((_QWORD *)v15 + 13));
          *((_QWORD *)v15 + 13) = *(_QWORD *)&__p[24];
          *(_QWORD *)&__p[24] = __p;
        }
        v28 = *(_QWORD **)&__p[24];
        if (*(_BYTE **)&__p[24] == __p)
          goto LABEL_32;
        goto LABEL_38;
      }
      v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
    }
    *(_QWORD *)&__p[24] = v22;
    goto LABEL_28;
  }
  if (v15[112])
  {
    v23 = (_BYTE *)*((_QWORD *)v15 + 13);
    if (v23 == v21)
    {
      v24 = 4;
    }
    else
    {
      if (!v23)
      {
LABEL_26:
        v15[112] = 0;
        goto LABEL_43;
      }
      v24 = 5;
      v21 = (_BYTE *)*((_QWORD *)v15 + 13);
    }
    (*(void (**)(_BYTE *))(*(_QWORD *)v21 + 8 * v24))(v21);
    goto LABEL_26;
  }
  v25 = *(_QWORD *)(a4 + 24);
  if (v25)
  {
    if (v25 == a4)
    {
      *((_QWORD *)v15 + 13) = v21;
      (*(void (**)(_QWORD, char *))(**(_QWORD **)(a4 + 24) + 24))(*(_QWORD *)(a4 + 24), v15 + 80);
      goto LABEL_42;
    }
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
  }
  *((_QWORD *)v15 + 13) = v25;
LABEL_42:
  v15[112] = 1;
LABEL_43:
  *(_BYTE *)(v202 + 1112) = a9;
  v31 = operator new();
  *(_OWORD *)(v31 + 16) = 0u;
  *(_OWORD *)(v31 + 32) = 0u;
  v32 = (std::mutex **)(v31 + 32);
  *(_QWORD *)(v31 + 48) = 0;
  *(_OWORD *)v31 = 0u;
  if (a8)
  {
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a7 + 96))(__p, a7);
    v33 = *(_QWORD *)__p;
    v34 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v35 = (unint64_t *)(*(_QWORD *)&__p[8] + 16);
      do
        v36 = __ldxr(v35);
      while (__stxr(v36 + 1, v35));
    }
    v37 = *(std::__shared_weak_count **)(v31 + 8);
    *(_QWORD *)v31 = v33;
    *(_QWORD *)(v31 + 8) = v34;
    if (v37)
    {
      std::__shared_weak_count::__release_weak(v37);
      v34 = *(std::__shared_weak_count **)&__p[8];
    }
    if (v34)
    {
      p_shared_owners = (unint64_t *)&v34->__shared_owners_;
      do
        v39 = __ldaxr(p_shared_owners);
      while (__stlxr(v39 - 1, p_shared_owners));
      if (!v39)
      {
        ((void (*)(std::__shared_weak_count *))v34->__on_zero_shared)(v34);
        std::__shared_weak_count::__release_weak(v34);
      }
    }
    (*(void (**)(_BYTE *__return_ptr, uint64_t))(*(_QWORD *)a7 + 80))(__p, a7);
    v40 = *(_OWORD *)__p;
    *(_QWORD *)__p = 0;
    *(_QWORD *)&__p[8] = 0;
    v41 = *(std::__shared_weak_count **)(v31 + 48);
    *(_OWORD *)(v31 + 40) = v40;
    if (v41)
    {
      v42 = (unint64_t *)&v41->__shared_owners_;
      do
        v43 = __ldaxr(v42);
      while (__stlxr(v43 - 1, v42));
      if (!v43)
      {
        ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
        std::__shared_weak_count::__release_weak(v41);
      }
    }
    v44 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v45 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v46 = __ldaxr(v45);
      while (__stlxr(v46 - 1, v45));
      goto LABEL_81;
    }
  }
  else
  {
    v47 = operator new(0x28uLL);
    v47[1] = 0;
    v47[2] = 0;
    *v47 = &off_24C40D228;
    *(_QWORD *)&__lk.__owns_ = 0;
    v225[0] = 0;
    __lk.__m_ = 0;
    __p[0] = 0;
    __p[24] = 0;
    sub_20B21AE74(v47 + 3, 1, (uint64_t)&__lk, (uint64_t *)__p);
    if (__p[24] && (__p[23] & 0x80000000) != 0)
      operator delete(*(void **)__p);
    if (__lk.__m_)
    {
      *(_QWORD *)&__lk.__owns_ = __lk.__m_;
      operator delete(__lk.__m_);
    }
    v48 = *(std::__shared_weak_count **)(v31 + 24);
    *(_QWORD *)(v31 + 16) = v47 + 3;
    *(_QWORD *)(v31 + 24) = v47;
    if (v48)
    {
      v49 = (unint64_t *)&v48->__shared_owners_;
      do
        v50 = __ldaxr(v49);
      while (__stlxr(v50 - 1, v49));
      if (!v50)
      {
        ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
        std::__shared_weak_count::__release_weak(v48);
      }
    }
    v51 = operator new();
    *(_QWORD *)v51 = 850045863;
    *(_OWORD *)(v51 + 8) = 0u;
    *(_OWORD *)(v51 + 24) = 0u;
    *(_OWORD *)(v51 + 40) = 0u;
    *(_QWORD *)(v51 + 56) = 0;
    v52 = *v32;
    *v32 = (std::mutex *)v51;
    if (v52)
    {
      std::mutex::~mutex(v52);
      MEMORY[0x20BD3583C]();
    }
    v54 = *(_QWORD *)(v31 + 16);
    v53 = *(_QWORD *)(v31 + 24);
    if (v53)
    {
      v55 = (unint64_t *)(v53 + 8);
      do
        v56 = __ldxr(v55);
      while (__stxr(v56 + 1, v55));
    }
    v44 = *(std::__shared_weak_count **)(v31 + 48);
    *(_QWORD *)(v31 + 40) = v54;
    *(_QWORD *)(v31 + 48) = v53;
    if (v44)
    {
      v57 = (unint64_t *)&v44->__shared_owners_;
      do
        v46 = __ldaxr(v57);
      while (__stlxr(v46 - 1, v57));
LABEL_81:
      if (!v46)
      {
        ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
        std::__shared_weak_count::__release_weak(v44);
      }
    }
  }
  v58 = *(_QWORD **)(v202 + 1120);
  *(_QWORD *)(v202 + 1120) = v31;
  if (v58)
    sub_20B0BA598(v58);
  v59 = atomic_load((unsigned __int8 *)&qword_25463AEF0);
  v60 = a2;
  if ((v59 & 1) == 0 && __cxa_guard_acquire(&qword_25463AEF0))
  {
    sub_20B0B49C0();
    __cxa_atexit((void (*)(void *))sub_20B0B4B44, &qword_25463AEF8, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463AEF0);
    v19 = a5;
    v60 = a2;
    v18 = a1;
  }
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)qword_25463AEF8;
  sub_20B0BDC30((unsigned int *)__p, (uint64_t *)&__lk);
  v61 = ((unint64_t)__p[12] << 32) | ((unint64_t)__p[13] << 40) | *(_DWORD *)&__p[8] & 0xFFFFFF00 | ((unint64_t)*(unsigned int *)&__p[12] << 32) & 0xFF00000000000000 | ((unint64_t)__p[14] << 48) | __p[8] & 0x3F | 0x80;
  v62 = v202;
  *(_QWORD *)(v202 + 1128) = (*(unsigned int *)__p | ((unint64_t)__p[4] << 32) | ((unint64_t)__p[5] << 40)) & 0xFFFFFFFFFFFFFFLL | ((unint64_t)__p[7] << 56) | ((unint64_t)(HIWORD(*(_DWORD *)&__p[4]) & 0xF | 0x40u) << 48);
  *(_QWORD *)(v62 + 1136) = v61;
  if (*(_BYTE *)(v60 + 40))
  {
    __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)&v202;
    *(_QWORD *)&__lk.__owns_ = v60;
    v203[0] = &off_24C40CFE8;
    v203[1] = &__lk;
    sub_20B52A3E8((uint64_t)v203, (uint64_t)__p);
    if (!BYTE8(v210))
      goto LABEL_276;
    v62 = v202;
  }
  v63 = v60 + 72;
  v64 = (_BYTE *)(v62 + 688);
  if (*(unsigned __int8 *)(v62 + 720) != *(unsigned __int8 *)(v60 + 104))
  {
    if (*(_BYTE *)(v62 + 720))
    {
      v67 = *(_BYTE **)(v62 + 712);
      if (v67 == v64)
      {
        v68 = 4;
      }
      else
      {
        if (!v67)
          goto LABEL_106;
        v68 = 5;
        v64 = *(_BYTE **)(v62 + 712);
      }
      (*(void (**)(_BYTE *))(*(_QWORD *)v64 + 8 * v68))(v64);
LABEL_106:
      *(_BYTE *)(v62 + 720) = 0;
      if (!a6)
        goto LABEL_107;
      goto LABEL_130;
    }
    v69 = *(_QWORD *)(v60 + 96);
    if (v69)
    {
      if (v69 == v63)
      {
        *(_QWORD *)(v62 + 712) = v64;
        (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v60 + 96) + 24))(*(_QWORD *)(v60 + 96), v62 + 688);
        goto LABEL_128;
      }
      v70 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v69 + 16))(*(_QWORD *)(v60 + 96));
    }
    else
    {
      v70 = 0;
    }
    *(_QWORD *)(v62 + 712) = v70;
LABEL_128:
    *(_BYTE *)(v62 + 720) = 1;
    v60 = a2;
LABEL_129:
    if (!a6)
      goto LABEL_107;
    goto LABEL_130;
  }
  if (!*(_BYTE *)(v62 + 720))
    goto LABEL_129;
  v65 = *(_QWORD *)(v60 + 96);
  if (!v65)
  {
    v66 = 0;
    goto LABEL_103;
  }
  if (v65 != v63)
  {
    v66 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v65 + 16))(*(_QWORD *)(v60 + 96));
LABEL_103:
    *(_QWORD *)&__p[24] = v66;
    goto LABEL_111;
  }
  *(_QWORD *)&__p[24] = __p;
  (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v63 + 24))(v63, __p);
LABEL_111:
  if (__p == v64)
    goto LABEL_123;
  v73 = *(_QWORD *)&__p[24];
  v74 = *(_BYTE **)(v62 + 712);
  if (*(_BYTE **)&__p[24] == __p)
  {
    if (v74 == v64)
    {
      (*(void (**)(_BYTE *, std::unique_lock<std::mutex> *))(*(_QWORD *)__p + 24))(__p, &__lk);
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
      *(_QWORD *)&__p[24] = 0;
      (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(v62 + 712) + 24))(*(_QWORD *)(v62 + 712), __p);
      (*(void (**)(_QWORD))(**(_QWORD **)(v62 + 712) + 32))(*(_QWORD *)(v62 + 712));
      *(_QWORD *)(v62 + 712) = 0;
      *(_QWORD *)&__p[24] = __p;
      (*(void (**)(std::unique_lock<std::mutex> *, uint64_t))&__lk.__m_->__m_.__opaque[16])(&__lk, v62 + 688);
      (*(void (**)(std::unique_lock<std::mutex> *))&__lk.__m_->__m_.__opaque[24])(&__lk);
      *(_QWORD *)(v62 + 712) = v64;
      v75 = *(_BYTE **)&__p[24];
      if (*(_BYTE **)&__p[24] != __p)
        goto LABEL_124;
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)__p + 24))(__p, v62 + 688);
      (*(void (**)(_QWORD))(**(_QWORD **)&__p[24] + 32))(*(_QWORD *)&__p[24]);
      *(_QWORD *)&__p[24] = *(_QWORD *)(v62 + 712);
      v76 = *(_BYTE **)&__p[24];
      *(_QWORD *)(v62 + 712) = v64;
      v75 = v76;
      if (v76 != __p)
        goto LABEL_124;
    }
LABEL_115:
    v60 = a2;
    (*(void (**)(void))(*(_QWORD *)__p + 32))();
    if (!a6)
      goto LABEL_107;
    goto LABEL_130;
  }
  if (v74 == v64)
  {
    (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v64 + 24))(v62 + 688, __p);
    (*(void (**)(_QWORD))(**(_QWORD **)(v62 + 712) + 32))(*(_QWORD *)(v62 + 712));
    *(_QWORD *)(v62 + 712) = *(_QWORD *)&__p[24];
    *(_QWORD *)&__p[24] = __p;
LABEL_123:
    v75 = *(_BYTE **)&__p[24];
    if (*(_BYTE **)&__p[24] != __p)
      goto LABEL_124;
    goto LABEL_115;
  }
  *(_QWORD *)&__p[24] = *(_QWORD *)(v62 + 712);
  *(_QWORD *)(v62 + 712) = v73;
  v75 = v74;
  if (v74 == __p)
    goto LABEL_115;
LABEL_124:
  v60 = a2;
  if (!v75)
    goto LABEL_129;
  (*(void (**)(_BYTE *))(*(_QWORD *)v75 + 40))(v75);
  if (!a6)
  {
LABEL_107:
    v71 = *(unsigned __int8 *)(v60 + 48);
    v72 = v202;
    *(_BYTE *)(v202 + 896) = v71;
    if (v71 < 3)
    {
      if (!*(_BYTE *)(v60 + 40))
        goto LABEL_329;
      goto LABEL_259;
    }
LABEL_249:
    sub_20AF55B94((uint64_t)v193, "Invalid sync type value");
    v201 = 1;
    sub_20B52280C((uint64_t)v193, (uint64_t)__p);
    *(_OWORD *)v18 = *(_OWORD *)__p;
    *(_BYTE *)(v18 + 16) = 0;
    *(_BYTE *)(v18 + 112) = 0;
    if ((_BYTE)v210)
    {
      *(_BYTE *)(v18 + 40) = 0;
      v132 = BYTE8(v205);
      if (BYTE8(v205))
      {
        *(_OWORD *)(v18 + 16) = *(_OWORD *)&__p[16];
        *(_QWORD *)(v18 + 32) = v205;
        *(_QWORD *)&__p[24] = 0;
        *(_QWORD *)&v205 = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_BYTE *)(v18 + 40) = 1;
      }
      *(_BYTE *)(v18 + 48) = 0;
      *(_BYTE *)(v18 + 104) = 0;
      if ((_BYTE)v209)
      {
        v133 = *((_QWORD *)&v207 + 1);
        *(_QWORD *)(v18 + 64) = v207;
        *(_OWORD *)(v18 + 48) = v206;
        v206 = 0uLL;
        *(_QWORD *)(v18 + 72) = v133;
        *(_OWORD *)(v18 + 80) = *(_OWORD *)v208;
        *(void **)(v18 + 96) = v208[2];
        *(_QWORD *)&v207 = 0;
        memset(v208, 0, sizeof(v208));
        *(_BYTE *)(v18 + 104) = 1;
      }
      *(_BYTE *)(v18 + 112) = 1;
      *(_BYTE *)(v18 + 120) = 0;
      if (v132 && SBYTE7(v205) < 0)
        operator delete(*(void **)&__p[16]);
      if (!v201)
        goto LABEL_399;
    }
    else
    {
      *(_BYTE *)(v18 + 120) = 0;
      if (!v201)
        goto LABEL_399;
    }
    if (v200)
    {
      if (v199 < 0)
        operator delete(v198);
      if (v197 < 0)
        operator delete(v196);
    }
    if (v195 && v194 < 0)
    {
      operator delete(v193[0]);
      v146 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
      if (!*((_QWORD *)&v202 + 1))
        return;
      goto LABEL_400;
    }
    goto LABEL_399;
  }
LABEL_130:
  sub_20B238228(v19, v202, (uint64_t)__p);
  v77 = v202;
  v78 = (_OWORD *)(v202 + 392);
  v79 = *(unsigned __int8 *)(v202 + 440);
  *(_BYTE *)(v202 + 152) = __p[0];
  v80 = (_OWORD *)(v77 + 160);
  if (v79)
  {
    sub_20B0BA9E4((uint64_t)v80, (uint64_t)&__p[8]);
    v81 = v221;
    v221 = 0uLL;
    v82 = *(std::__shared_weak_count **)(v77 + 400);
    *v78 = v81;
    if (v82)
      std::__shared_weak_count::__release_weak(v82);
    v83 = v222;
    v222 = 0uLL;
    v84 = *(std::__shared_weak_count **)(v77 + 416);
    v78[1] = v83;
    if (v84)
      std::__shared_weak_count::__release_weak(v84);
    v85 = v223;
    v223 = 0uLL;
    v86 = *(std::__shared_weak_count **)(v77 + 432);
    v78[2] = v85;
    if (v86)
    {
      v87 = (unint64_t *)&v86->__shared_owners_;
      do
        v88 = __ldaxr(v87);
      while (__stlxr(v88 - 1, v87));
      if (!v88)
      {
        ((void (*)(std::__shared_weak_count *))v86->__on_zero_shared)(v86);
        std::__shared_weak_count::__release_weak(v86);
      }
    }
  }
  else
  {
    *v80 = *(_OWORD *)&__p[8];
    v89 = *(_DWORD *)&__p[24];
    *(_BYTE *)(v77 + 184) = 0;
    *(_DWORD *)(v77 + 176) = v89;
    *(_BYTE *)(v77 + 208) = 0;
    if (BYTE8(v206))
    {
      *(_OWORD *)(v77 + 184) = v205;
      *(_QWORD *)(v77 + 200) = v206;
      *(_QWORD *)&v206 = 0;
      v205 = 0uLL;
      *(_BYTE *)(v77 + 208) = 1;
    }
    *(_BYTE *)(v77 + 216) = 0;
    *(_BYTE *)(v77 + 360) = 0;
    if (v218)
    {
      v90 = v209;
      *(void **)(v77 + 232) = v208[0];
      *(_OWORD *)(v77 + 216) = v207;
      v207 = 0uLL;
      v91 = *(_OWORD *)&v208[1];
      v208[0] = 0;
      v208[1] = 0;
      *(_QWORD *)(v77 + 256) = v90;
      v92 = v213;
      *(_QWORD *)(v77 + 280) = v211;
      *(_QWORD *)(v77 + 304) = v92;
      v93 = v217;
      *(_QWORD *)(v77 + 328) = v215;
      *(_OWORD *)(v77 + 240) = v91;
      v208[2] = 0;
      v209 = 0;
      *(_OWORD *)(v77 + 264) = v210;
      v210 = 0uLL;
      *(_OWORD *)(v77 + 288) = v212;
      v211 = 0;
      v212 = 0uLL;
      v213 = 0;
      *(_OWORD *)(v77 + 312) = v214;
      v214 = 0uLL;
      v94 = v216;
      *(_QWORD *)(v77 + 352) = v93;
      *(_OWORD *)(v77 + 336) = v94;
      v215 = 0;
      v216 = 0uLL;
      v217 = 0;
      *(_BYTE *)(v77 + 360) = 1;
    }
    *(_OWORD *)(v77 + 368) = v219;
    *(_QWORD *)(v77 + 384) = v220;
    *v78 = v221;
    v221 = 0uLL;
    v78[1] = v222;
    v222 = 0uLL;
    v78[2] = v223;
    v223 = 0uLL;
    *(_BYTE *)(v77 + 440) = 1;
  }
  v95 = (std::__shared_weak_count *)*((_QWORD *)&v223 + 1);
  if (*((_QWORD *)&v223 + 1))
  {
    v96 = (unint64_t *)(*((_QWORD *)&v223 + 1) + 8);
    do
      v97 = __ldaxr(v96);
    while (__stlxr(v97 - 1, v96));
    if (!v97)
    {
      ((void (*)(std::__shared_weak_count *))v95->__on_zero_shared)(v95);
      std::__shared_weak_count::__release_weak(v95);
    }
  }
  if (*((_QWORD *)&v222 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v222 + 1));
  if (*((_QWORD *)&v221 + 1))
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v221 + 1));
  if (!v218)
    goto LABEL_161;
  if (SHIBYTE(v217) < 0)
  {
    operator delete((void *)v216);
    if ((SHIBYTE(v215) & 0x80000000) == 0)
    {
LABEL_157:
      if ((SHIBYTE(v213) & 0x80000000) == 0)
        goto LABEL_158;
      goto LABEL_176;
    }
  }
  else if ((SHIBYTE(v215) & 0x80000000) == 0)
  {
    goto LABEL_157;
  }
  operator delete((void *)v214);
  if ((SHIBYTE(v213) & 0x80000000) == 0)
  {
LABEL_158:
    if ((SHIBYTE(v211) & 0x80000000) == 0)
      goto LABEL_159;
LABEL_177:
    operator delete((void *)v210);
    if ((SHIBYTE(v209) & 0x80000000) == 0)
    {
LABEL_160:
      if ((SHIBYTE(v208[0]) & 0x80000000) == 0)
        goto LABEL_161;
LABEL_179:
      operator delete((void *)v207);
      if (!BYTE8(v206))
        goto LABEL_164;
      goto LABEL_162;
    }
    goto LABEL_178;
  }
LABEL_176:
  operator delete((void *)v212);
  if (SHIBYTE(v211) < 0)
    goto LABEL_177;
LABEL_159:
  if ((SHIBYTE(v209) & 0x80000000) == 0)
    goto LABEL_160;
LABEL_178:
  operator delete(v208[1]);
  if (SHIBYTE(v208[0]) < 0)
    goto LABEL_179;
LABEL_161:
  if (!BYTE8(v206))
    goto LABEL_164;
LABEL_162:
  if (SBYTE7(v206) < 0)
    operator delete((void *)v205);
LABEL_164:
  v98 = v19 + 5;
  v99 = v202;
  v100 = (_OWORD *)(v202 + 448);
  if (*(_BYTE *)(v202 + 680))
  {
    *v100 = *v98;
    *(_DWORD *)(v99 + 464) = *((_DWORD *)v19 + 14);
    sub_20AFA945C(v99 + 472, v19 + 8);
    v101 = (void **)(v99 + 504);
    v102 = (void **)(v19 + 12);
    if (*(unsigned __int8 *)(v99 + 648) == *((unsigned __int8 *)v19 + 240))
    {
      if (*(_BYTE *)(v99 + 648) && v101 != v102)
      {
        if (*(char *)(v99 + 527) < 0)
        {
          if (*((char *)v19 + 119) >= 0)
          {
            v104 = *((unsigned __int8 *)v19 + 119);
          }
          else
          {
            v102 = (void **)v19[12];
            v104 = v19[13];
          }
          sub_20AEC8090(v101, v102, v104);
        }
        else if ((*((_BYTE *)v19 + 119) & 0x80) != 0)
        {
          sub_20AEC7FCC(v101, (void *)v19[12], v19[13]);
        }
        else
        {
          v103 = *(_OWORD *)v102;
          *(_QWORD *)(v99 + 520) = v19[14];
          *(_OWORD *)v101 = v103;
        }
        v105 = (void **)(v99 + 528);
        v106 = *((_BYTE *)v19 + 143);
        if (*(char *)(v99 + 551) < 0)
        {
          if (v106 >= 0)
            v108 = v19 + 15;
          else
            v108 = (void *)v19[15];
          if (v106 >= 0)
            v109 = *((unsigned __int8 *)v19 + 143);
          else
            v109 = v19[16];
          sub_20AEC8090(v105, v108, v109);
        }
        else if ((*((_BYTE *)v19 + 143) & 0x80) != 0)
        {
          sub_20AEC7FCC(v105, (void *)v19[15], v19[16]);
        }
        else
        {
          v107 = *(_OWORD *)(v19 + 15);
          *(_QWORD *)(v99 + 544) = v19[17];
          *(_OWORD *)v105 = v107;
        }
        v110 = (void **)(v99 + 552);
        v111 = *((_BYTE *)v19 + 167);
        if (*(char *)(v99 + 575) < 0)
        {
          if (v111 >= 0)
            v113 = v19 + 18;
          else
            v113 = (void *)v19[18];
          if (v111 >= 0)
            v114 = *((unsigned __int8 *)v19 + 167);
          else
            v114 = v19[19];
          sub_20AEC8090(v110, v113, v114);
        }
        else if ((*((_BYTE *)v19 + 167) & 0x80) != 0)
        {
          sub_20AEC7FCC(v110, (void *)v19[18], v19[19]);
        }
        else
        {
          v112 = *((_OWORD *)v19 + 9);
          *(_QWORD *)(v99 + 568) = v19[20];
          *(_OWORD *)v110 = v112;
        }
        v115 = (void **)(v99 + 576);
        v116 = *((_BYTE *)v19 + 191);
        if (*(char *)(v99 + 599) < 0)
        {
          if (v116 >= 0)
            v118 = v19 + 21;
          else
            v118 = (void *)v19[21];
          if (v116 >= 0)
            v119 = *((unsigned __int8 *)v19 + 191);
          else
            v119 = v19[22];
          sub_20AEC8090(v115, v118, v119);
        }
        else if ((*((_BYTE *)v19 + 191) & 0x80) != 0)
        {
          sub_20AEC7FCC(v115, (void *)v19[21], v19[22]);
        }
        else
        {
          v117 = *(_OWORD *)(v19 + 21);
          *(_QWORD *)(v99 + 592) = v19[23];
          *(_OWORD *)v115 = v117;
        }
        v120 = (void **)(v99 + 600);
        v121 = *((_BYTE *)v19 + 215);
        if (*(char *)(v99 + 623) < 0)
        {
          if (v121 >= 0)
            v123 = v19 + 24;
          else
            v123 = (void *)v19[24];
          if (v121 >= 0)
            v124 = *((unsigned __int8 *)v19 + 215);
          else
            v124 = v19[25];
          sub_20AEC8090(v120, v123, v124);
        }
        else if ((*((_BYTE *)v19 + 215) & 0x80) != 0)
        {
          sub_20AEC7FCC(v120, (void *)v19[24], v19[25]);
        }
        else
        {
          v122 = *((_OWORD *)v19 + 12);
          *(_QWORD *)(v99 + 616) = v19[26];
          *(_OWORD *)v120 = v122;
        }
        v125 = (void **)(v99 + 624);
        v126 = *((_BYTE *)v19 + 239);
        if (*(char *)(v99 + 647) < 0)
        {
          if (v126 >= 0)
            v128 = v19 + 27;
          else
            v128 = (void *)v19[27];
          if (v126 >= 0)
            v129 = *((unsigned __int8 *)v19 + 239);
          else
            v129 = v19[28];
          sub_20AEC8090(v125, v128, v129);
        }
        else if ((*((_BYTE *)v19 + 239) & 0x80) != 0)
        {
          sub_20AEC7FCC(v125, (void *)v19[27], v19[28]);
        }
        else
        {
          v127 = *(_OWORD *)(v19 + 27);
          *(_QWORD *)(v99 + 640) = v19[29];
          *(_OWORD *)v125 = v127;
        }
      }
    }
    else if (*(_BYTE *)(v99 + 648))
    {
      sub_20B0BACE8((uint64_t)v101);
    }
    else
    {
      sub_20AF3FE60((char *)v101, (__int128 *)v102);
      *(_BYTE *)(v99 + 648) = 1;
    }
    v130 = *(_OWORD *)(v19 + 31);
    *(_QWORD *)(v99 + 672) = v19[33];
    *(_OWORD *)(v99 + 656) = v130;
  }
  else
  {
    sub_20B0BAD9C((uint64_t)v100, (uint64_t)v98);
    *(_BYTE *)(v99 + 680) = 1;
  }
  sub_20B237C08(v202 + 152, 1, (uint64_t)__p);
  if (!BYTE8(v210))
  {
LABEL_276:
    __lk = *(std::unique_lock<std::mutex> *)__p;
    v139 = sub_20AECEBD0(v225, (__int128 *)&__p[16]);
    *(std::unique_lock<std::mutex> *)v18 = __lk;
    *(_BYTE *)(v18 + 16) = 0;
    *(_BYTE *)(v18 + 112) = 0;
    if (v234)
    {
      *(_BYTE *)(v18 + 40) = 0;
      v140 = v227;
      if (v227)
      {
        *(_OWORD *)(v18 + 16) = *(_OWORD *)v139;
        *(_QWORD *)(v18 + 32) = *((_QWORD *)v139 + 2);
        *((_QWORD *)v139 + 1) = 0;
        *((_QWORD *)v139 + 2) = 0;
        *(_QWORD *)v139 = 0;
        *(_BYTE *)(v18 + 40) = 1;
      }
      *(_BYTE *)(v18 + 48) = 0;
      *(_BYTE *)(v18 + 104) = 0;
      if (v233)
      {
        v141 = v230;
        *(_QWORD *)(v18 + 64) = v229;
        *(_OWORD *)(v18 + 48) = v228;
        v228 = 0uLL;
        *(_QWORD *)(v18 + 72) = v141;
        *(_OWORD *)(v18 + 80) = v231;
        *(_QWORD *)(v18 + 96) = v232;
        v229 = 0;
        v231 = 0uLL;
        v232 = 0;
        *(_BYTE *)(v18 + 104) = 1;
      }
      *(_BYTE *)(v18 + 112) = 1;
      *(_BYTE *)(v18 + 120) = 0;
      if (v140 && v226 < 0)
        operator delete(v225[0]);
      if (BYTE8(v210))
        goto LABEL_399;
    }
    else
    {
      *(_BYTE *)(v18 + 120) = 0;
      if (BYTE8(v210))
        goto LABEL_399;
    }
    if ((_BYTE)v210)
    {
      if ((_BYTE)v209)
      {
        if (SHIBYTE(v208[2]) < 0)
          operator delete(v208[0]);
        if (SBYTE7(v207) < 0)
          operator delete((void *)v206);
      }
      if (BYTE8(v205) && SBYTE7(v205) < 0)
      {
        operator delete(*(void **)&__p[16]);
        v146 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
        if (!*((_QWORD *)&v202 + 1))
          return;
        goto LABEL_400;
      }
    }
    goto LABEL_399;
  }
  v131 = *(unsigned __int8 *)(a2 + 48);
  v72 = v202;
  *(_BYTE *)(v202 + 896) = v131;
  if (v131 > 2)
    goto LABEL_249;
LABEL_259:
  __lk.__m_ = (std::unique_lock<std::mutex>::mutex_type *)(v72 + 784);
  __lk.__owns_ = 1;
  std::mutex::lock((std::mutex *)(v72 + 784));
  v134.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_ + 2000000000;
  while (!*(_BYTE *)(v72 + 776))
  {
    if (v134.__d_.__rep_ <= std::chrono::steady_clock::now().__d_.__rep_)
    {
LABEL_286:
      if (!*(_BYTE *)(v72 + 776))
      {
        v144 = 0;
        v60 = a2;
        goto LABEL_326;
      }
      break;
    }
    v137.__d_.__rep_ = v134.__d_.__rep_ - std::chrono::steady_clock::now().__d_.__rep_;
    if (v137.__d_.__rep_ >= 1)
    {
      std::chrono::steady_clock::now();
      v138.__d_.__rep_ = std::chrono::system_clock::now().__d_.__rep_;
      if (!v138.__d_.__rep_)
      {
        v135 = 0;
        goto LABEL_261;
      }
      if (v138.__d_.__rep_ < 1)
      {
        if ((unint64_t)v138.__d_.__rep_ < 0xFFDF3B645A1CAC09)
        {
          v135 = 0x8000000000000000;
          goto LABEL_261;
        }
      }
      else if ((unint64_t)v138.__d_.__rep_ > 0x20C49BA5E353F7)
      {
        v135 = 0x7FFFFFFFFFFFFFFFLL;
        if ((v137.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL) != 0x7FFFFFFFFFFFFFFFLL)
        {
LABEL_275:
          v136.__d_.__rep_ = 0x7FFFFFFFFFFFFFFFLL;
          goto LABEL_262;
        }
LABEL_261:
        v136.__d_.__rep_ = v135 + v137.__d_.__rep_;
LABEL_262:
        std::condition_variable::__do_timed_wait((std::condition_variable *)(v72 + 848), &__lk, v136);
        std::chrono::steady_clock::now();
        goto LABEL_263;
      }
      v135 = 1000 * v138.__d_.__rep_;
      if (1000 * v138.__d_.__rep_ > (v137.__d_.__rep_ ^ 0x7FFFFFFFFFFFFFFFLL))
        goto LABEL_275;
      goto LABEL_261;
    }
LABEL_263:
    if (std::chrono::steady_clock::now().__d_.__rep_ >= v134.__d_.__rep_)
      goto LABEL_286;
  }
  v60 = a2;
  if (*(_BYTE *)(a2 + 48) != 2)
  {
LABEL_325:
    v144 = 1;
    goto LABEL_326;
  }
  if (!*(_BYTE *)(v72 + 768))
  {
    if (*(_BYTE *)(v72 + 1104))
    {
      std::condition_variable::~condition_variable((std::condition_variable *)(v72 + 1056));
      v147 = *(void **)(v72 + 1032);
      if (v147)
      {
        *(_QWORD *)(v72 + 1040) = v147;
        operator delete(v147);
      }
      std::mutex::~mutex((std::mutex *)(v72 + 968));
      *(_BYTE *)(v72 + 1104) = 0;
    }
    goto LABEL_325;
  }
  v142 = 2;
  if (*(_BYTE *)(v72 + 744) && !*(_QWORD *)(v72 + 736))
  {
    if (*(_BYTE *)(v72 + 760))
      v142 = 2;
    else
      v142 = 1;
  }
  if (*(_BYTE *)(v72 + 1104))
  {
    std::condition_variable::~condition_variable((std::condition_variable *)(v72 + 1056));
    v143 = *(void **)(v72 + 1032);
    if (v143)
    {
      *(_QWORD *)(v72 + 1040) = v143;
      operator delete(v143);
    }
    std::mutex::~mutex((std::mutex *)(v72 + 968));
  }
  *(_BYTE *)(v72 + 904) = v142;
  *(_BYTE *)(v72 + 912) = 0;
  *(_BYTE *)(v72 + 920) = 0;
  *(_BYTE *)(v72 + 928) = 0;
  *(_BYTE *)(v72 + 936) = 0;
  *(_BYTE *)(v72 + 944) = 0;
  *(_BYTE *)(v72 + 952) = 0;
  *(_OWORD *)(v72 + 960) = xmmword_20B5E4C30;
  *(_OWORD *)(v72 + 976) = 0u;
  *(_OWORD *)(v72 + 992) = 0u;
  *(_OWORD *)(v72 + 1008) = 0u;
  *(_OWORD *)(v72 + 1024) = 0u;
  *(_OWORD *)(v72 + 1040) = 0u;
  *(_QWORD *)(v72 + 1056) = 1018212795;
  *(_QWORD *)(v72 + 1096) = 0;
  *(_OWORD *)(v72 + 1064) = 0u;
  *(_OWORD *)(v72 + 1080) = 0u;
  v144 = 1;
  *(_BYTE *)(v72 + 1104) = 1;
  v145 = *(_OWORD *)(v72 + 744);
  *(_OWORD *)__p = *(_OWORD *)(v72 + 728);
  *(_OWORD *)&__p[16] = v145;
  *(_QWORD *)&v205 = *(_QWORD *)(v72 + 760);
  sub_20B213F88(v72 + 904, (__int128 *)__p);
LABEL_326:
  if (__lk.__owns_)
    std::mutex::unlock(__lk.__m_);
  if ((v144 & 1) == 0)
  {
    v150 = v202;
    if (*(_BYTE *)(v202 + 1104))
    {
      std::condition_variable::~condition_variable((std::condition_variable *)(v202 + 1056));
      v151 = *(void **)(v150 + 1032);
      if (v151)
      {
        *(_QWORD *)(v150 + 1040) = v151;
        operator delete(v151);
      }
      std::mutex::~mutex((std::mutex *)(v150 + 968));
      *(_BYTE *)(v150 + 1104) = 0;
    }
    sub_20AF55B94((uint64_t)v184, "Client received no configuration from server after connection. This might mean the server could be outdated. Make sure to update VisualLogger server to protocol version 1.3.0+ (or same or newer version as the client).");
    v192 = 1;
    sub_20B0B4C58(0xCu, (__int128 *)v184, (uint64_t)__p);
    *(_OWORD *)v18 = *(_OWORD *)__p;
    *(_BYTE *)(v18 + 16) = 0;
    *(_BYTE *)(v18 + 112) = 0;
    if ((_BYTE)v210)
    {
      *(_BYTE *)(v18 + 40) = 0;
      v152 = BYTE8(v205);
      if (BYTE8(v205))
      {
        *(_OWORD *)(v18 + 16) = *(_OWORD *)&__p[16];
        *(_QWORD *)(v18 + 32) = v205;
        *(_QWORD *)&__p[24] = 0;
        *(_QWORD *)&v205 = 0;
        *(_QWORD *)&__p[16] = 0;
        *(_BYTE *)(v18 + 40) = 1;
      }
      *(_BYTE *)(v18 + 48) = 0;
      *(_BYTE *)(v18 + 104) = 0;
      if ((_BYTE)v209)
      {
        v153 = *((_QWORD *)&v207 + 1);
        *(_QWORD *)(v18 + 64) = v207;
        *(_OWORD *)(v18 + 48) = v206;
        v206 = 0uLL;
        *(_QWORD *)(v18 + 72) = v153;
        *(_OWORD *)(v18 + 80) = *(_OWORD *)v208;
        *(void **)(v18 + 96) = v208[2];
        *(_QWORD *)&v207 = 0;
        memset(v208, 0, sizeof(v208));
        *(_BYTE *)(v18 + 104) = 1;
      }
      *(_BYTE *)(v18 + 112) = 1;
      *(_BYTE *)(v18 + 120) = 0;
      if (v152 && SBYTE7(v205) < 0)
        operator delete(*(void **)&__p[16]);
      if (!v192)
        goto LABEL_399;
    }
    else
    {
      *(_BYTE *)(v18 + 120) = 0;
      if (!v192)
        goto LABEL_399;
    }
    if (v191)
    {
      if (v190 < 0)
        operator delete(v189);
      if (v188 < 0)
        operator delete(v187);
    }
    if (v186 && v185 < 0)
    {
      operator delete(v184[0]);
      v146 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
      if (!*((_QWORD *)&v202 + 1))
        return;
      goto LABEL_400;
    }
    goto LABEL_399;
  }
LABEL_329:
  if (!*(_BYTE *)(v60 + 50) || *(_BYTE *)(v60 + 48) == 2)
  {
    v154 = v202;
    if (*(_BYTE *)(v202 + 776) && !*(_BYTE *)(v60 + 50) && *(_BYTE *)(v202 + 768))
    {
      sub_20B0B4DD0((uint64_t)__p, v202, 0, 0);
      if (!BYTE8(v210))
      {
        sub_20B0B52D8((uint64_t)__p);
        __lk = *(std::unique_lock<std::mutex> *)__p;
        sub_20AECEBD0(v225, (__int128 *)&__p[16]);
        sub_20AFEDBD0(v18, (uint64_t)&__lk);
        sub_20AECCE40((uint64_t)&__lk);
        sub_20AECD704((uint64_t)__p);
        v146 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
        if (*((_QWORD *)&v202 + 1))
          goto LABEL_400;
        return;
      }
      sub_20AECD704((uint64_t)__p);
      v154 = v202;
    }
    v155 = *(_QWORD *)(v154 + 1120);
    v156 = *(std::mutex **)(v155 + 32);
    if (v156)
    {
      std::mutex::lock(*(std::mutex **)(v155 + 32));
      v158 = *(_QWORD *)(v155 + 40);
      v157 = *(_QWORD *)(v155 + 48);
      *(_QWORD *)__p = v158;
      *(_QWORD *)&__p[8] = v157;
      if (v157)
      {
        v159 = (unint64_t *)(v157 + 8);
        do
          v160 = __ldxr(v159);
        while (__stxr(v160 + 1, v159));
      }
      std::mutex::unlock(v156);
      v154 = v202;
    }
    else
    {
      v158 = *(_QWORD *)(v155 + 40);
      v161 = *(_QWORD *)(v155 + 48);
      *(_QWORD *)__p = v158;
      *(_QWORD *)&__p[8] = v161;
      if (v161)
      {
        v162 = (unint64_t *)(v161 + 8);
        do
          v163 = __ldxr(v162);
        while (__stxr(v163 + 1, v162));
      }
    }
    if (v154)
      v164 = v154 + 16;
    else
      v164 = 0;
    v165 = *(_QWORD *)(v158 + 8);
    if (!v165)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v165 = *(_QWORD *)(v158 + 8);
    }
    sub_20B21A6A0(v165, v164);
    v166 = *(std::__shared_weak_count **)&__p[8];
    if (*(_QWORD *)&__p[8])
    {
      v167 = (unint64_t *)(*(_QWORD *)&__p[8] + 8);
      do
        v168 = __ldaxr(v167);
      while (__stlxr(v168 - 1, v167));
      if (!v168)
      {
        ((void (*)(std::__shared_weak_count *))v166->__on_zero_shared)(v166);
        std::__shared_weak_count::__release_weak(v166);
      }
    }
    *(_OWORD *)v18 = v202;
    v202 = 0uLL;
    *(_BYTE *)(v18 + 120) = 1;
    goto LABEL_399;
  }
  sub_20AF55B94((uint64_t)v175, "When syncing is disabled, the first sync point must not be deferred");
  v183 = 1;
  sub_20B52280C((uint64_t)v175, (uint64_t)__p);
  *(_OWORD *)v18 = *(_OWORD *)__p;
  *(_BYTE *)(v18 + 16) = 0;
  *(_BYTE *)(v18 + 112) = 0;
  if ((_BYTE)v210)
  {
    *(_BYTE *)(v18 + 40) = 0;
    v148 = BYTE8(v205);
    if (BYTE8(v205))
    {
      *(_OWORD *)(v18 + 16) = *(_OWORD *)&__p[16];
      *(_QWORD *)(v18 + 32) = v205;
      *(_QWORD *)&__p[24] = 0;
      *(_QWORD *)&v205 = 0;
      *(_QWORD *)&__p[16] = 0;
      *(_BYTE *)(v18 + 40) = 1;
    }
    *(_BYTE *)(v18 + 48) = 0;
    *(_BYTE *)(v18 + 104) = 0;
    if ((_BYTE)v209)
    {
      v149 = *((_QWORD *)&v207 + 1);
      *(_QWORD *)(v18 + 64) = v207;
      *(_OWORD *)(v18 + 48) = v206;
      v206 = 0uLL;
      *(_QWORD *)(v18 + 72) = v149;
      *(_OWORD *)(v18 + 80) = *(_OWORD *)v208;
      *(void **)(v18 + 96) = v208[2];
      *(_QWORD *)&v207 = 0;
      memset(v208, 0, sizeof(v208));
      *(_BYTE *)(v18 + 104) = 1;
    }
    *(_BYTE *)(v18 + 112) = 1;
    *(_BYTE *)(v18 + 120) = 0;
    if (v148 && SBYTE7(v205) < 0)
      operator delete(*(void **)&__p[16]);
  }
  else
  {
    *(_BYTE *)(v18 + 120) = 0;
  }
  if (!v183)
    goto LABEL_399;
  if (v182)
  {
    if (v181 < 0)
      operator delete(v180);
    if (v179 < 0)
      operator delete(v178);
  }
  if (!v177 || (v176 & 0x80000000) == 0)
  {
LABEL_399:
    v146 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
    if (*((_QWORD *)&v202 + 1))
      goto LABEL_400;
    return;
  }
  operator delete(v175[0]);
  v146 = (std::__shared_weak_count *)*((_QWORD *)&v202 + 1);
  if (!*((_QWORD *)&v202 + 1))
    return;
LABEL_400:
  v169 = (unint64_t *)&v146->__shared_owners_;
  do
    v170 = __ldaxr(v169);
  while (__stlxr(v170 - 1, v169));
  if (!v170)
  {
    ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
    std::__shared_weak_count::__release_weak(v146);
  }
}

void sub_20B0B4854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,void *__p,uint64_t a58,int a59,__int16 a60,char a61,char a62,char a63)
{
  __cxa_guard_abort(&qword_25463AEF0);
  sub_20AEC147C((uint64_t)&a53);
  _Unwind_Resume(a1);
}

void sub_20B0B49C0()
{
  uint64_t i;
  char *v1;
  std::random_device v2;
  _BYTE __token[2504];
  __int128 v4;
  _BYTE __dst[2496];
  _BYTE v6[2496];

  MEMORY[0x24BDAC7A8]();
  __token[23] = 12;
  strcpy(__token, "/dev/urandom");
  std::random_device::random_device(&v2, (const std::string *)__token);
  if ((__token[23] & 0x80000000) != 0)
    operator delete(*(void **)__token);
  for (i = 0; i != 2496; i += 4)
    *(_DWORD *)&v6[i] = MEMORY[0x20BD352B4](&v2);
  memcpy(__dst, v6, sizeof(__dst));
  sub_20B0BD664(__dst, (uint64_t)__token);
  v1 = (char *)operator new(0x9F8uLL);
  *((_QWORD *)v1 + 1) = 0;
  *((_QWORD *)v1 + 2) = 0;
  *(_QWORD *)v1 = &off_24C40D3D8;
  memcpy(v1 + 24, __token, 0x9C8uLL);
  *((_QWORD *)v1 + 316) = &off_24C41F9C8;
  *(_OWORD *)(v1 + 2536) = v4;
  qword_25463AEF8 = (uint64_t)(v1 + 24);
  unk_25463AF00 = v1;
  std::random_device::~random_device(&v2);
}

void sub_20B0B4AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12, int a13, char a14)
{
  sub_20B5206A0((uint64_t)&STACK[0x9D8]);
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

void sub_20B0B4B00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

void sub_20B0B4B14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0B4B30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, std::random_device a11, std::random_device a12)
{
  std::random_device::~random_device(&a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0B4B44(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0B4BAC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;

  v2 = *(std::__shared_weak_count **)(a1 + 280);
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
  {
LABEL_5:
    v5 = *(std::__shared_weak_count **)(a1 + 264);
    if (!v5)
      goto LABEL_7;
    goto LABEL_6;
  }
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  v5 = *(std::__shared_weak_count **)(a1 + 264);
  if (v5)
LABEL_6:
    std::__shared_weak_count::__release_weak(v5);
LABEL_7:
  v6 = *(std::__shared_weak_count **)(a1 + 248);
  if (v6)
    std::__shared_weak_count::__release_weak(v6);
  sub_20AF3F978(a1 + 64);
  if (!*(_BYTE *)(a1 + 56) || (*(char *)(a1 + 55) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 32));
  return a1;
}

void sub_20B0B4C58(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_20AECEBD0(v7, a2);
  sub_20B0BAE8C((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_20B0B4DBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCDB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0B4DD0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  std::mutex *v7;
  std::string::size_type v8;
  _QWORD *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  _BYTE *v13;
  int v14;
  uint64_t v15;
  __int128 v16;
  char v18;
  __int128 v19;
  _BYTE v20[28];
  int v21;
  __int128 v22;
  __int128 __p;
  char v24;
  char v25;
  void *v26;
  char v27;
  void *v28;
  char v29;
  char v30;
  char v31;
  char v32;
  _OWORD v33[2];
  int v34;
  char v35;
  _QWORD v36[4];
  __int128 v37;
  __int128 v38;
  char v39;
  unsigned __int8 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  char v46;
  char v47;
  char v48;
  _QWORD v49[2];
  _QWORD v50[3];
  _QWORD *v51;
  uint64_t v52;

  v52 = *MEMORY[0x24BDAC8D0];
  v21 = 9;
  LOBYTE(v22) = 0;
  v32 = 0;
  v7 = (std::mutex *)(a2 + 904);
  LOBYTE(v19) = 0;
  v20[16] = 0;
  *(_DWORD *)&v20[24] = 0;
  v18 = 1;
  v8 = a2 + 152;
  while (1)
  {
    if (*(_BYTE *)(a2 + 896) == 2)
    {
      sub_20B213B78(v7, (uint64_t)&v37);
      v19 = v37;
      *(_OWORD *)v20 = v38;
      if (v20[16])
        goto LABEL_9;
    }
    else
    {
      LOBYTE(v19) = 0;
      *((_QWORD *)&v19 + 1) = 0;
      *(_QWORD *)v20 = 0;
      v20[8] = 1;
      if (v20[16])
      {
LABEL_9:
        if (!*(_BYTE *)(a2 + 440))
          goto LABEL_13;
        goto LABEL_12;
      }
    }
    v20[16] = 1;
    if (!*(_BYTE *)(a2 + 440))
      goto LABEL_13;
LABEL_12:
    v33[0] = v19;
    v33[1] = *(_OWORD *)v20;
    v34 = 1;
    v35 = 1;
    sub_20B2378F8(v8, (uint64_t)v33, (uint64_t)&v37);
    if (v48)
      goto LABEL_13;
    sub_20B0B5C00((uint64_t)&v21, (uint64_t)&v37);
    v18 = 0;
    if (v48 || !v47)
      goto LABEL_13;
    if (!v46)
    {
LABEL_24:
      if (!v40)
        goto LABEL_13;
      goto LABEL_25;
    }
    if (SHIBYTE(v45) < 0)
    {
      operator delete((void *)v44);
      if ((SHIBYTE(v42) & 0x80000000) == 0)
        goto LABEL_24;
    }
    else if ((SHIBYTE(v42) & 0x80000000) == 0)
    {
      goto LABEL_24;
    }
    operator delete((void *)v41);
    if (!v40)
      goto LABEL_13;
LABEL_25:
    if (v39 < 0)
      operator delete((void *)v38);
LABEL_13:
    if (!*(_BYTE *)(a2 + 144))
      goto LABEL_15;
    v36[0] = a2;
    v36[1] = &v19;
    v36[2] = &v21;
    v36[3] = &v18;
    v49[0] = &off_24C40D0B8;
    v49[1] = v36;
    sub_20B52A3E8((uint64_t)v49, (uint64_t)&v37);
    if (v48)
      goto LABEL_15;
    sub_20B0B5C00((uint64_t)&v21, (uint64_t)&v37);
    if (v48 || !v47)
      goto LABEL_15;
    if (v46)
    {
      if (SHIBYTE(v45) < 0)
      {
        operator delete((void *)v44);
        if (SHIBYTE(v42) < 0)
        {
LABEL_39:
          operator delete((void *)v41);
          if (!v40)
            goto LABEL_15;
          goto LABEL_33;
        }
      }
      else if (SHIBYTE(v42) < 0)
      {
        goto LABEL_39;
      }
    }
    if (!v40)
      goto LABEL_15;
LABEL_33:
    if (v39 < 0)
      operator delete((void *)v38);
LABEL_15:
    if (v19 != 1)
      break;
    v50[0] = &off_24C40D168;
    v50[1] = a2;
    v51 = v50;
    v11 = sub_20B213D34((uint64_t)v7, (uint64_t)v50, a3, a4);
    v9 = v51;
    if (v51 == v50)
    {
      v9 = v50;
      v10 = 4;
    }
    else
    {
      if (!v51)
        goto LABEL_4;
      v10 = 5;
    }
    (*(void (**)(void))(*v9 + 8 * v10))();
LABEL_4:
    *(_DWORD *)&v20[24] = v11 ^ 1;
    v18 = v11;
    if ((v11 & 1) == 0)
      goto LABEL_42;
  }
  v18 = 0;
LABEL_42:
  if (!v32)
  {
    v16 = *(_OWORD *)v20;
    *(_OWORD *)a1 = v19;
    *(_OWORD *)(a1 + 16) = v16;
    *(_OWORD *)(a1 + 28) = *(_OWORD *)&v20[12];
    *(_BYTE *)(a1 + 120) = 1;
    return;
  }
  if (*(_BYTE *)(a2 + 112))
  {
    v12 = *(_QWORD *)(a2 + 104);
    if (!v12)
      sub_20AECABA4();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v12 + 48))(v12, &v22);
  }
  v37 = v22;
  v13 = sub_20AECEBD0(&v38, &__p);
  *(_OWORD *)a1 = v37;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (v47)
  {
    *(_BYTE *)(a1 + 40) = 0;
    v14 = v40;
    if (v40)
    {
      *(_OWORD *)(a1 + 16) = *(_OWORD *)v13;
      *(_QWORD *)(a1 + 32) = *((_QWORD *)v13 + 2);
      *((_QWORD *)v13 + 1) = 0;
      *((_QWORD *)v13 + 2) = 0;
      *(_QWORD *)v13 = 0;
      *(_BYTE *)(a1 + 40) = 1;
    }
    *(_BYTE *)(a1 + 48) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (v46)
    {
      v15 = v43;
      *(_QWORD *)(a1 + 64) = v42;
      *(_OWORD *)(a1 + 48) = v41;
      v42 = 0;
      v41 = 0uLL;
      *(_QWORD *)(a1 + 72) = v15;
      *(_OWORD *)(a1 + 80) = v44;
      *(_QWORD *)(a1 + 96) = v45;
      v44 = 0uLL;
      v45 = 0;
      *(_BYTE *)(a1 + 104) = 1;
    }
    *(_BYTE *)(a1 + 112) = 1;
    *(_BYTE *)(a1 + 120) = 0;
    if (v14 && v39 < 0)
      operator delete((void *)v38);
  }
  else
  {
    *(_BYTE *)(a1 + 120) = 0;
  }
  if (v32 && v31)
  {
    if (!v30)
      goto LABEL_61;
    if ((v29 & 0x80000000) == 0)
    {
      if ((v27 & 0x80000000) == 0)
        goto LABEL_61;
LABEL_66:
      operator delete(v26);
      if (!v25)
        return;
LABEL_62:
      if (v24 < 0)
        operator delete((void *)__p);
      return;
    }
    operator delete(v28);
    if (v27 < 0)
      goto LABEL_66;
LABEL_61:
    if (v25)
      goto LABEL_62;
  }
}

void sub_20B0B5258(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ...)
{
  va_list va;

  va_start(va, a12);
  sub_20B0B60AC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0B52D8(uint64_t result)
{
  _QWORD *exception;

  if (*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C3F6160;
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
  }
  return result;
}

uint64_t sub_20B0B5318(uint64_t a1)
{
  unint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  _QWORD *v6;
  std::mutex *v7;
  std::__shared_weak_count *v8;
  uint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  _QWORD *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  _QWORD *v23;
  void *v24;
  _QWORD *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  std::__shared_weak_count *v31;
  std::__shared_weak_count *v32;
  unint64_t *v33;
  unint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;
  uint64_t v41;
  void *v42;
  char v43;
  char v44;
  void *v45;
  char v46;
  void *__p;
  char v48;
  char v49;
  char v50;
  char v51;

  *(_QWORD *)a1 = &off_24C40CDF8;
  *(_QWORD *)(a1 + 8) = &unk_24C40CE60;
  *(_QWORD *)(a1 + 16) = &unk_24C40CE98;
  v2 = a1 + 16;
  v3 = *(std::__shared_weak_count **)(a1 + 1176);
  *(_OWORD *)(a1 + 1168) = 0u;
  if (!v3)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  do
    v5 = __ldaxr(p_shared_owners);
  while (__stlxr(v5 - 1, p_shared_owners));
  if (!v5)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
    v6 = *(_QWORD **)(a1 + 1120);
    v7 = (std::mutex *)v6[4];
    if (v7)
      goto LABEL_6;
  }
  else
  {
LABEL_5:
    v6 = *(_QWORD **)(a1 + 1120);
    v7 = (std::mutex *)v6[4];
    if (v7)
    {
LABEL_6:
      std::mutex::lock(v7);
      v9 = v6[5];
      v8 = (std::__shared_weak_count *)v6[6];
      if (v8)
      {
        v10 = (unint64_t *)&v8->__shared_owners_;
        do
          v11 = __ldxr(v10);
        while (__stxr(v11 + 1, v10));
      }
      std::mutex::unlock(v7);
      goto LABEL_14;
    }
  }
  v9 = v6[5];
  v8 = (std::__shared_weak_count *)v6[6];
  if (v8)
  {
    v12 = (unint64_t *)&v8->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
LABEL_14:
  v14 = *(_QWORD **)(v9 + 8);
  if (!v14)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v14 = *(_QWORD **)(v9 + 8);
  }
  sub_20B21A9F0(v14, v2);
  if (v8)
  {
    v15 = (unint64_t *)&v8->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v17 = *(std::__shared_weak_count **)(a1 + 136);
    if (v17)
    {
      v18 = (unint64_t *)&v17->__shared_owners_;
      do
        v19 = __ldaxr(v18);
      while (__stlxr(v19 - 1, v18));
      if (!v19)
      {
        ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
        std::__shared_weak_count::__release_weak(v17);
      }
    }
    *(_BYTE *)(a1 + 144) = 0;
  }
  if (*(_BYTE *)(a1 + 440))
  {
    sub_20B237C08(a1 + 152, 2, (uint64_t)&v41);
    if (!v51)
    {
      if (v50)
      {
        if (v49)
        {
          if (v48 < 0)
            operator delete(__p);
          if (v46 < 0)
            operator delete(v45);
        }
        if (v44 && v43 < 0)
          operator delete(v42);
      }
    }
  }
  v20 = *(std::__shared_weak_count **)(a1 + 1176);
  if (v20)
  {
    v21 = (unint64_t *)&v20->__shared_owners_;
    do
      v22 = __ldaxr(v21);
    while (__stlxr(v22 - 1, v21));
    if (!v22)
    {
      ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
      std::__shared_weak_count::__release_weak(v20);
    }
  }
  if (*(_BYTE *)(a1 + 1160))
    sub_20B0A5250(a1 + 1144);
  v23 = *(_QWORD **)(a1 + 1120);
  *(_QWORD *)(a1 + 1120) = 0;
  if (v23)
    sub_20B0BA598(v23);
  if (*(_BYTE *)(a1 + 1104))
  {
    std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 1056));
    v24 = *(void **)(a1 + 1032);
    if (v24)
    {
      *(_QWORD *)(a1 + 1040) = v24;
      operator delete(v24);
    }
    std::mutex::~mutex((std::mutex *)(a1 + 968));
  }
  std::condition_variable::~condition_variable((std::condition_variable *)(a1 + 848));
  std::mutex::~mutex((std::mutex *)(a1 + 784));
  if (*(_BYTE *)(a1 + 720))
  {
    v25 = *(_QWORD **)(a1 + 712);
    if (v25 == (_QWORD *)(a1 + 688))
    {
      v26 = 4;
      v25 = (_QWORD *)(a1 + 688);
      goto LABEL_49;
    }
    if (v25)
    {
      v26 = 5;
LABEL_49:
      (*(void (**)(void))(*v25 + 8 * v26))();
    }
  }
  if (*(_BYTE *)(a1 + 680))
  {
    sub_20AF3F978(a1 + 504);
    if (*(_BYTE *)(a1 + 496))
    {
      if (*(char *)(a1 + 495) < 0)
        operator delete(*(void **)(a1 + 472));
    }
  }
  if (*(_BYTE *)(a1 + 440))
  {
    v27 = *(std::__shared_weak_count **)(a1 + 432);
    if (v27)
    {
      v28 = (unint64_t *)&v27->__shared_owners_;
      do
        v29 = __ldaxr(v28);
      while (__stlxr(v29 - 1, v28));
      if (!v29)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
    v30 = *(std::__shared_weak_count **)(a1 + 416);
    if (v30)
      std::__shared_weak_count::__release_weak(v30);
    v31 = *(std::__shared_weak_count **)(a1 + 400);
    if (v31)
      std::__shared_weak_count::__release_weak(v31);
    sub_20AF3F978(a1 + 216);
    if (*(_BYTE *)(a1 + 208) && *(char *)(a1 + 207) < 0)
      operator delete(*(void **)(a1 + 184));
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v32 = *(std::__shared_weak_count **)(a1 + 136);
    if (v32)
    {
      v33 = (unint64_t *)&v32->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v32->__on_zero_shared)(v32);
        std::__shared_weak_count::__release_weak(v32);
      }
    }
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v35 = *(_QWORD **)(a1 + 104);
    if (v35 == (_QWORD *)(a1 + 80))
    {
      v36 = 4;
      v35 = (_QWORD *)(a1 + 80);
    }
    else
    {
      if (!v35)
        goto LABEL_79;
      v36 = 5;
    }
    (*(void (**)(void))(*v35 + 8 * v36))();
  }
LABEL_79:
  if (!*(_BYTE *)(a1 + 72))
    goto LABEL_85;
  v37 = *(_QWORD **)(a1 + 64);
  if (v37 == (_QWORD *)(a1 + 40))
  {
    v38 = 4;
    v37 = (_QWORD *)(a1 + 40);
  }
  else
  {
    if (!v37)
      goto LABEL_85;
    v38 = 5;
  }
  (*(void (**)(void))(*v37 + 8 * v38))();
LABEL_85:
  v39 = *(std::__shared_weak_count **)(a1 + 32);
  if (v39)
    std::__shared_weak_count::__release_weak(v39);
  return a1;
}

uint64_t sub_20B0B5770(uint64_t a1)
{
  return sub_20B0B5318(a1 - 8);
}

uint64_t sub_20B0B5778(uint64_t a1)
{
  return sub_20B0B5318(a1 - 16);
}

void sub_20B0B5780(uint64_t a1)
{
  sub_20B0B5318(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0B57A4(uint64_t a1)
{
  sub_20B0B5318(a1 - 8);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0B57CC(uint64_t a1)
{
  sub_20B0B5318(a1 - 16);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0B57F4(uint64_t a1)
{
  return a1 + 8;
}

uint64_t sub_20B0B57FC(uint64_t a1)
{
  return a1 + 1128;
}

void sub_20B0B5804(uint64_t a1@<X0>, const void ***a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  _BYTE *v7;
  int v8;
  uint64_t v9;
  int v10;
  __int128 v11;
  __int128 v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  char v20;
  char v21;
  uint64_t v22;
  const void ***v23;
  int *v24;
  __int128 v25;
  void *__p;
  char v27;
  unsigned __int8 v28;
  void *v29[2];
  uint64_t v30;
  uint64_t v31;
  void *v32[2];
  uint64_t v33;
  char v34;
  char v35;
  char v36;
  uint64_t (**v37)();
  uint64_t *v38;

  v10 = 9;
  LOBYTE(v11) = 0;
  v21 = 0;
  if (*(_BYTE *)(a1 + 440))
  {
    sub_20B2375E8(a1 + 152, a2, (uint64_t)&v25);
    if (!v36)
    {
      sub_20B0B5C00((uint64_t)&v10, (uint64_t)&v25);
      if (!v36)
      {
        if (v35)
        {
          if (v34)
          {
            if (SHIBYTE(v33) < 0)
              operator delete(v32[0]);
            if (SHIBYTE(v30) < 0)
              operator delete(v29[0]);
          }
          if (v28 && v27 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 720))
  {
    v22 = a1;
    v23 = a2;
    v24 = &v10;
    v37 = &off_24C40D2C8;
    v38 = &v22;
    sub_20B52A3E8((uint64_t)&v37, (uint64_t)&v25);
    if (!v36)
    {
      sub_20B0B5C00((uint64_t)&v10, (uint64_t)&v25);
      if (!v36)
      {
        if (v35)
        {
          if (v34)
          {
            if (SHIBYTE(v33) < 0)
              operator delete(v32[0]);
            if (SHIBYTE(v30) < 0)
              operator delete(v29[0]);
          }
          if (v28 && v27 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (*(_BYTE *)(a1 + 144))
  {
    v22 = a1;
    v23 = a2;
    v24 = &v10;
    v37 = &off_24C40D308;
    v38 = &v22;
    sub_20B52A3E8((uint64_t)&v37, (uint64_t)&v25);
    if (!v36)
    {
      sub_20B0B5C00((uint64_t)&v10, (uint64_t)&v25);
      if (!v36)
      {
        if (v35)
        {
          if (v34)
          {
            if (SHIBYTE(v33) < 0)
              operator delete(v32[0]);
            if (SHIBYTE(v30) < 0)
              operator delete(v29[0]);
          }
          if (v28 && v27 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (!v21)
  {
    *(_BYTE *)(a3 + 120) = 1;
    return;
  }
  if (*(_BYTE *)(a1 + 112))
  {
    v6 = *(_QWORD *)(a1 + 104);
    if (!v6)
      sub_20AECABA4();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v6 + 48))(v6, &v11);
  }
  v25 = v11;
  v7 = sub_20AECEBD0(&__p, &v12);
  *(_OWORD *)a3 = v25;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v35)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v8 = v28;
    if (v28)
    {
      *(_OWORD *)(a3 + 16) = *(_OWORD *)v7;
      *(_QWORD *)(a3 + 32) = *((_QWORD *)v7 + 2);
      *((_QWORD *)v7 + 1) = 0;
      *((_QWORD *)v7 + 2) = 0;
      *(_QWORD *)v7 = 0;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v34)
    {
      v9 = v31;
      *(_QWORD *)(a3 + 64) = v30;
      *(_OWORD *)(a3 + 48) = *(_OWORD *)v29;
      v29[0] = 0;
      v29[1] = 0;
      *(_QWORD *)(a3 + 72) = v9;
      *(_OWORD *)(a3 + 80) = *(_OWORD *)v32;
      *(_QWORD *)(a3 + 96) = v33;
      v30 = 0;
      v32[0] = 0;
      v32[1] = 0;
      v33 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v8 && v27 < 0)
      operator delete(__p);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (v21 && v20)
  {
    if (!v19)
      goto LABEL_30;
    if (v18 < 0)
    {
      operator delete(v17);
      if ((v16 & 0x80000000) == 0)
      {
LABEL_30:
        if (!v14)
          return;
LABEL_31:
        if (v13 < 0)
          operator delete((void *)v12);
        return;
      }
    }
    else if ((v16 & 0x80000000) == 0)
    {
      goto LABEL_30;
    }
    operator delete(v15);
    if (!v14)
      return;
    goto LABEL_31;
  }
}

void sub_20B0B5B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  sub_20AECD704((uint64_t)&a29);
  sub_20B0B60AC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0B5BB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0B60AC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0B5BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0B60AC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0B5BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0B60AC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0B5BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0B60AC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0B5C00(uint64_t a1, uint64_t a2)
{
  char *v4;
  void **v5;
  int v6;
  _OWORD *v7;
  int v8;
  _OWORD *v9;
  unsigned int v10;
  int v11;
  _OWORD *v12;
  int v13;
  uint64_t v14;
  void *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  std::string v20;
  __int128 v21;
  char v22;
  char v23;
  void *v24;
  char v25;
  void *v26;
  char v27;
  char v28;
  char v29;
  __int128 v30;
  __int128 __p;
  uint64_t v32;
  char v33;
  void *v34[2];
  uint64_t v35;
  uint64_t v36;
  void *v37[2];
  uint64_t v38;
  char v39;
  unsigned __int8 v40;

  v4 = (char *)(a1 + 8);
  if (*(_BYTE *)(a1 + 128))
    goto LABEL_2;
  v10 = *(_DWORD *)a1;
  LOBYTE(v21) = 0;
  v29 = 0;
  sub_20B0BAE8C((uint64_t)&v30, v10, &v21);
  v11 = *(unsigned __int8 *)(a1 + 128);
  *(_OWORD *)v4 = v30;
  v12 = (_OWORD *)(a1 + 24);
  if (!v11)
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    v16 = v40;
    if (v40)
    {
      *(_BYTE *)(a1 + 48) = 0;
      if (v33)
      {
        *v12 = __p;
        *(_QWORD *)(a1 + 40) = v32;
        v32 = 0;
        __p = 0uLL;
        *(_BYTE *)(a1 + 48) = 1;
      }
      *(_BYTE *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v39)
      {
        v17 = v36;
        *(_QWORD *)(a1 + 72) = v35;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)v34;
        v34[0] = 0;
        v34[1] = 0;
        *(_QWORD *)(a1 + 80) = v17;
        *(_OWORD *)(a1 + 88) = *(_OWORD *)v37;
        *(_QWORD *)(a1 + 104) = v38;
        v35 = 0;
        v37[0] = 0;
        v37[1] = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 112) = 1;
      }
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 1;
    if (!v16)
      goto LABEL_49;
    goto LABEL_41;
  }
  sub_20AECE874((uint64_t)v12, &__p);
  if (v40)
  {
LABEL_41:
    if (v39)
    {
      if (SHIBYTE(v38) < 0)
        operator delete(v37[0]);
      if (SHIBYTE(v35) < 0)
        operator delete(v34[0]);
    }
    if (v33 && SHIBYTE(v32) < 0)
      operator delete((void *)__p);
  }
LABEL_49:
  if (v29)
  {
    if (v28)
    {
      if (v27 < 0)
        operator delete(v26);
      if (v25 < 0)
        operator delete(v24);
    }
    if (v23 && v22 < 0)
      operator delete((void *)v21);
  }
LABEL_2:
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a1 + 16) || *(_DWORD *)a2 != *(_DWORD *)v4)
  {
    sub_20B5287D4(a2, &v20);
    sub_20B529470(v4, (void **)&v20.__r_.__value_.__l.__data_, (uint64_t)&v30);
    v8 = *(unsigned __int8 *)(a1 + 128);
    *(_OWORD *)v4 = v30;
    v9 = (_OWORD *)(a1 + 24);
    if (v8)
    {
      sub_20AECE874((uint64_t)v9, &__p);
      if (!v40)
        goto LABEL_30;
    }
    else
    {
      *(_BYTE *)(a1 + 24) = 0;
      *(_BYTE *)(a1 + 120) = 0;
      v13 = v40;
      if (v40)
      {
        *(_BYTE *)(a1 + 48) = 0;
        if (v33)
        {
          *v9 = __p;
          *(_QWORD *)(a1 + 40) = v32;
          v32 = 0;
          __p = 0uLL;
          *(_BYTE *)(a1 + 48) = 1;
        }
        *(_BYTE *)(a1 + 56) = 0;
        *(_BYTE *)(a1 + 112) = 0;
        if (v39)
        {
          v14 = v36;
          *(_QWORD *)(a1 + 72) = v35;
          *(_OWORD *)(a1 + 56) = *(_OWORD *)v34;
          v34[0] = 0;
          v34[1] = 0;
          *(_QWORD *)(a1 + 80) = v14;
          *(_OWORD *)(a1 + 88) = *(_OWORD *)v37;
          *(_QWORD *)(a1 + 104) = v38;
          v35 = 0;
          v37[0] = 0;
          v37[1] = 0;
          v38 = 0;
          *(_BYTE *)(a1 + 112) = 1;
        }
        *(_BYTE *)(a1 + 120) = 1;
      }
      *(_BYTE *)(a1 + 128) = 1;
      if (!v13)
      {
LABEL_30:
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
        {
          v15 = (void *)v20.__r_.__value_.__r.__words[0];
LABEL_33:
          operator delete(v15);
          return;
        }
        return;
      }
    }
    if (!v39)
      goto LABEL_27;
    if (SHIBYTE(v38) < 0)
    {
      operator delete(v37[0]);
      if ((SHIBYTE(v35) & 0x80000000) == 0)
      {
LABEL_27:
        if (!v33)
          goto LABEL_30;
LABEL_28:
        if (SHIBYTE(v32) < 0)
          operator delete((void *)__p);
        goto LABEL_30;
      }
    }
    else if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
      goto LABEL_27;
    }
    operator delete(v34[0]);
    if (!v33)
      goto LABEL_30;
    goto LABEL_28;
  }
  if (*(_BYTE *)(a2 + 112))
    v5 = (void **)(a2 + 16);
  else
    v5 = (void **)&unk_20B610E70;
  if (!*((_BYTE *)v5 + 24))
    return;
  sub_20B529470(v4, v5, (uint64_t)&v30);
  v6 = *(unsigned __int8 *)(a1 + 128);
  *(_OWORD *)v4 = v30;
  v7 = (_OWORD *)(a1 + 24);
  if (v6)
  {
    sub_20AECE874((uint64_t)v7, &__p);
    if (!v40)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 24) = 0;
    *(_BYTE *)(a1 + 120) = 0;
    v18 = v40;
    if (v40)
    {
      *(_BYTE *)(a1 + 48) = 0;
      if (v33)
      {
        *v7 = __p;
        *(_QWORD *)(a1 + 40) = v32;
        v32 = 0;
        __p = 0uLL;
        *(_BYTE *)(a1 + 48) = 1;
      }
      *(_BYTE *)(a1 + 56) = 0;
      *(_BYTE *)(a1 + 112) = 0;
      if (v39)
      {
        v19 = v36;
        *(_QWORD *)(a1 + 72) = v35;
        *(_OWORD *)(a1 + 56) = *(_OWORD *)v34;
        v34[0] = 0;
        v34[1] = 0;
        *(_QWORD *)(a1 + 80) = v19;
        *(_OWORD *)(a1 + 88) = *(_OWORD *)v37;
        *(_QWORD *)(a1 + 104) = v38;
        v35 = 0;
        v37[0] = 0;
        v37[1] = 0;
        v38 = 0;
        *(_BYTE *)(a1 + 112) = 1;
      }
      *(_BYTE *)(a1 + 120) = 1;
    }
    *(_BYTE *)(a1 + 128) = 1;
    if (!v18)
      return;
  }
  if (v39)
  {
    if (SHIBYTE(v38) < 0)
      operator delete(v37[0]);
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
  }
  if (v33 && SHIBYTE(v32) < 0)
  {
    v15 = (void *)__p;
    goto LABEL_33;
  }
}

void sub_20B0B6078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECCDB4((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0B6090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0B60AC(uint64_t a1)
{
  if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 120))
    return a1;
  if (*(_BYTE *)(a1 + 112))
  {
    if ((*(char *)(a1 + 111) & 0x80000000) == 0)
    {
      if ((*(char *)(a1 + 79) & 0x80000000) == 0)
        goto LABEL_6;
LABEL_10:
      operator delete(*(void **)(a1 + 56));
      if (!*(_BYTE *)(a1 + 48))
        return a1;
      goto LABEL_7;
    }
    operator delete(*(void **)(a1 + 88));
    if (*(char *)(a1 + 79) < 0)
      goto LABEL_10;
  }
LABEL_6:
  if (!*(_BYTE *)(a1 + 48))
    return a1;
LABEL_7:
  if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20B0B6140(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  __int128 v3;
  int v4;
  uint64_t v5;
  _BYTE *v6;
  int v7;
  uint64_t v8;
  __int128 v9;
  void *v10;
  char v11;
  unsigned __int8 v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  uint64_t v17;
  char v18;
  char v19;
  __int128 v20;
  __int128 __p;
  uint64_t v22;
  unsigned __int8 v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  __int128 v32;
  char v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  char v39;
  char v40;

  if (!*(_BYTE *)(a1 + 896))
  {
    LOBYTE(v32) = 0;
    v40 = 0;
    sub_20B0B4C58(0xBu, &v32, (uint64_t)&v20);
    *(_OWORD *)a2 = v20;
    *(_BYTE *)(a2 + 16) = 0;
    *(_BYTE *)(a2 + 112) = 0;
    if (v30)
    {
      *(_BYTE *)(a2 + 40) = 0;
      v4 = v23;
      if (v23)
      {
        *(_OWORD *)(a2 + 16) = __p;
        *(_QWORD *)(a2 + 32) = v22;
        v22 = 0;
        __p = 0uLL;
        *(_BYTE *)(a2 + 40) = 1;
      }
      *(_BYTE *)(a2 + 48) = 0;
      *(_BYTE *)(a2 + 104) = 0;
      if (v29)
      {
        v5 = v26;
        *(_QWORD *)(a2 + 64) = v25;
        *(_OWORD *)(a2 + 48) = v24;
        v24 = 0uLL;
        *(_QWORD *)(a2 + 72) = v5;
        *(_OWORD *)(a2 + 80) = v27;
        *(_QWORD *)(a2 + 96) = v28;
        v25 = 0;
        v27 = 0uLL;
        v28 = 0;
        *(_BYTE *)(a2 + 104) = 1;
      }
      *(_BYTE *)(a2 + 112) = 1;
      *(_BYTE *)(a2 + 120) = 0;
      if (v4 && SHIBYTE(v22) < 0)
        operator delete((void *)__p);
      if (!v40)
        return;
    }
    else
    {
      *(_BYTE *)(a2 + 120) = 0;
      if (!v40)
        return;
    }
    if (v39)
    {
      if (v38 < 0)
        operator delete(v37);
      if (v36 < 0)
        operator delete(v35);
    }
    if (v34 && v33 < 0)
      operator delete((void *)v32);
    return;
  }
  if (!*(_BYTE *)(a1 + 1104))
  {
    *(_BYTE *)a2 = 0;
    *(_BYTE *)(a2 + 32) = 0;
    goto LABEL_16;
  }
  sub_20B0B4DD0((uint64_t)&v20, a1, 0, 0);
  if (v31)
  {
    v3 = __p;
    *(_OWORD *)a2 = v20;
    *(_OWORD *)(a2 + 16) = v3;
    *(_QWORD *)(a2 + 32) = v22;
LABEL_16:
    *(_BYTE *)(a2 + 120) = 1;
    return;
  }
  v9 = v20;
  v6 = sub_20AECEBD0(&v10, &__p);
  *(_OWORD *)a2 = v9;
  *(_BYTE *)(a2 + 16) = 0;
  *(_BYTE *)(a2 + 112) = 0;
  if (v19)
  {
    *(_BYTE *)(a2 + 40) = 0;
    v7 = v12;
    if (v12)
    {
      *(_OWORD *)(a2 + 16) = *(_OWORD *)v6;
      *(_QWORD *)(a2 + 32) = *((_QWORD *)v6 + 2);
      *((_QWORD *)v6 + 1) = 0;
      *((_QWORD *)v6 + 2) = 0;
      *(_QWORD *)v6 = 0;
      *(_BYTE *)(a2 + 40) = 1;
    }
    *(_BYTE *)(a2 + 48) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    if (v18)
    {
      v8 = v15;
      *(_QWORD *)(a2 + 64) = v14;
      *(_OWORD *)(a2 + 48) = v13;
      v13 = 0uLL;
      *(_QWORD *)(a2 + 72) = v8;
      *(_OWORD *)(a2 + 80) = v16;
      *(_QWORD *)(a2 + 96) = v17;
      v14 = 0;
      v16 = 0uLL;
      v17 = 0;
      *(_BYTE *)(a2 + 104) = 1;
    }
    *(_BYTE *)(a2 + 112) = 1;
    *(_BYTE *)(a2 + 120) = 0;
    if (v7 && v11 < 0)
      operator delete(v10);
  }
  else
  {
    *(_BYTE *)(a2 + 120) = 0;
  }
  if (!v31 && v30)
  {
    if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      if (SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v23)
    {
      if (SHIBYTE(v22) < 0)
        operator delete((void *)__p);
    }
  }
}

void sub_20B0B6458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, ...)
{
  va_list va;

  va_start(va, a16);
  sub_20AECD704((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0B646C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AECCDB4(v1 - 136);
  _Unwind_Resume(a1);
}

void sub_20B0B6480(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  char v7;
  char v8;
  void *v9;
  char v10;
  void *v11;
  char v12;
  char v13;
  char v14;
  __int128 v15;
  __int128 __p;
  uint64_t v17;
  unsigned __int8 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  char v24;
  char v25;

  if (*(_BYTE *)(a1 + 896))
  {
    if (*(_BYTE *)(a1 + 1104))
    {
      sub_20B0B4DD0(a3, a1, a2, 1);
    }
    else
    {
      *(_BYTE *)a3 = 0;
      *(_BYTE *)(a3 + 32) = 0;
      *(_DWORD *)(a3 + 40) = 0;
      *(_BYTE *)(a3 + 120) = 1;
    }
    return;
  }
  LOBYTE(v6) = 0;
  v14 = 0;
  sub_20B0B4C58(0xBu, &v6, (uint64_t)&v15);
  *(_OWORD *)a3 = v15;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (!v25)
  {
    *(_BYTE *)(a3 + 120) = 0;
    if (!v14)
      return;
    goto LABEL_16;
  }
  *(_BYTE *)(a3 + 40) = 0;
  v4 = v18;
  if (v18)
  {
    *(_OWORD *)(a3 + 16) = __p;
    *(_QWORD *)(a3 + 32) = v17;
    v17 = 0;
    __p = 0uLL;
    *(_BYTE *)(a3 + 40) = 1;
  }
  *(_BYTE *)(a3 + 48) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  if (v24)
  {
    v5 = v21;
    *(_QWORD *)(a3 + 64) = v20;
    *(_OWORD *)(a3 + 48) = v19;
    v19 = 0uLL;
    *(_QWORD *)(a3 + 72) = v5;
    *(_OWORD *)(a3 + 80) = v22;
    *(_QWORD *)(a3 + 96) = v23;
    v20 = 0;
    v22 = 0uLL;
    v23 = 0;
    *(_BYTE *)(a3 + 104) = 1;
  }
  *(_BYTE *)(a3 + 112) = 1;
  *(_BYTE *)(a3 + 120) = 0;
  if (v4 && SHIBYTE(v17) < 0)
    operator delete((void *)__p);
  if (v14)
  {
LABEL_16:
    if (v13)
    {
      if (v12 < 0)
        operator delete(v11);
      if (v10 < 0)
        operator delete(v9);
    }
    if (v8 && v7 < 0)
      operator delete((void *)v6);
  }
}

void sub_20B0B664C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCDB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0B6660(_BYTE *a1, _QWORD *a2)
{
  void *v2;
  void *v3;
  char v4;
  char v5;
  char v6;
  _BYTE *v7;
  _QWORD *v8;
  uint64_t v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  _QWORD *v13;
  int v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  char **v19;
  char *v20;
  int v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  unsigned __int8 v33;
  _QWORD v34[3];
  __int128 v35;
  void *__p;
  char v37;
  unsigned __int8 v38;
  void *v39;
  uint64_t v40;
  uint64_t v41;
  void *v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  char v46;
  char v47;
  _QWORD v48[2];
  _BYTE v49[24];
  _BYTE *v50;
  uint64_t v51;

  v7 = a1;
  v51 = *MEMORY[0x24BDAC8D0];
  v22 = 9;
  LOBYTE(v23) = 0;
  v33 = 0;
  v8 = a2 + 1;
  v9 = a2[1];
  v19 = (char **)*a2;
  v20 = (char *)v9;
  if (a2[2])
  {
    *(_QWORD *)(v9 + 16) = &v20;
    *a2 = v8;
    *v8 = 0;
    a2[2] = 0;
    if (!a1[440])
      goto LABEL_7;
  }
  else
  {
    v19 = &v20;
    if (!a1[440])
      goto LABEL_7;
  }
  sub_20B237F18((std::string::size_type)(a1 + 152), &v19, (uint64_t)&v35);
  if (!v47)
  {
    sub_20B0B5C00((uint64_t)&v22, (uint64_t)&v35);
    if (!v47)
    {
      if (v46)
      {
        if (v45)
        {
          if (SHIBYTE(v44) < 0)
            operator delete(v42);
          if (SHIBYTE(v41) < 0)
            operator delete(v39);
        }
        if (v38 && v37 < 0)
          operator delete(__p);
      }
    }
  }
LABEL_7:
  if (v7[144])
  {
    v34[0] = v7;
    v34[1] = &v19;
    v34[2] = &v22;
    v48[0] = &off_24C40D348;
    v48[1] = v34;
    sub_20B52A3E8((uint64_t)v48, (uint64_t)&v35);
    if (!v47)
    {
      sub_20B0B5C00((uint64_t)&v22, (uint64_t)&v35);
      if (!v47)
      {
        if (v46)
        {
          if (v45)
          {
            if (SHIBYTE(v44) < 0)
              operator delete(v42);
            if (SHIBYTE(v41) < 0)
              operator delete(v39);
          }
          if (v38 && v37 < 0)
            operator delete(__p);
        }
      }
    }
  }
  if (v7[112])
  {
    v10 = (_BYTE *)*((_QWORD *)v7 + 13);
    if (v10)
    {
      if (v10 == v7 + 80)
      {
        v50 = v49;
        (*(void (**)(_BYTE *, _BYTE *))(*((_QWORD *)v7 + 10) + 24))(v7 + 80, v49);
        v11 = v50;
        v12 = v33;
        if (v33)
        {
LABEL_16:
          if (!v11)
            sub_20AECABA4();
          (*(void (**)(_BYTE *, __int128 *))(*(_QWORD *)v11 + 48))(v11, &v23);
          v35 = v23;
          v13 = sub_20AECEBD0(&__p, &v24);
          if (!v46)
          {
            v17 = 0;
            v16 = 0;
            v7 = 0;
            v15 = 0;
            goto LABEL_30;
          }
          v14 = v38;
          if (v38)
          {
            v7 = __p;
            v4 = v37;
            *v13 = 0;
            v13[1] = 0;
            v15 = 1;
            v13[2] = 0;
            if (v45)
              goto LABEL_20;
          }
          else
          {
            v7 = 0;
            v15 = 0;
            if (v45)
            {
LABEL_20:
              v2 = v39;
              v5 = HIBYTE(v41);
              v39 = 0;
              v40 = 0;
              v3 = v42;
              v6 = HIBYTE(v44);
              v41 = 0;
              v42 = 0;
              v43 = 0;
              v16 = 1;
              v44 = 0;
              v17 = 1;
              if (!v14)
                goto LABEL_30;
              goto LABEL_28;
            }
          }
          v16 = 0;
          v2 = 0;
          v17 = 1;
          if (!v14)
            goto LABEL_30;
LABEL_28:
          if (v37 < 0)
            operator delete(__p);
LABEL_30:
          v11 = v50;
          if (v50 != v49)
            goto LABEL_31;
          goto LABEL_24;
        }
LABEL_23:
        v17 = 0;
        v16 = 0;
        v15 = 0;
        if (v11 != v49)
        {
LABEL_31:
          if (!v11)
          {
LABEL_34:
            if (!v12 || !v17)
              goto LABEL_42;
            if (!v16)
              goto LABEL_39;
            if (v6 < 0)
            {
              operator delete(v3);
              if ((v5 & 0x80) == 0)
              {
LABEL_39:
                if (!v15)
                  goto LABEL_42;
                goto LABEL_40;
              }
            }
            else if ((v5 & 0x80) == 0)
            {
              goto LABEL_39;
            }
            operator delete(v2);
            if (!v15)
              goto LABEL_42;
LABEL_40:
            if (v4 < 0)
              operator delete(v7);
            goto LABEL_42;
          }
          v18 = 5;
LABEL_33:
          (*(void (**)(void))(*(_QWORD *)v11 + 8 * v18))();
          goto LABEL_34;
        }
LABEL_24:
        v18 = 4;
        v11 = v49;
        goto LABEL_33;
      }
      v11 = (_BYTE *)(*(uint64_t (**)(_QWORD))(*(_QWORD *)v10 + 16))(*((_QWORD *)v7 + 13));
    }
    else
    {
      v11 = 0;
    }
    v50 = v11;
    v12 = v33;
    if (v33)
      goto LABEL_16;
    goto LABEL_23;
  }
LABEL_42:
  sub_20AEC833C((uint64_t)&v19, v20);
  if (v33 && v32)
  {
    if (!v31)
      goto LABEL_47;
    if (v30 < 0)
    {
      operator delete(v29);
      if ((v28 & 0x80000000) == 0)
      {
LABEL_47:
        if (!v26)
          return;
LABEL_48:
        if (v25 < 0)
          operator delete((void *)v24);
        return;
      }
    }
    else if ((v28 & 0x80000000) == 0)
    {
      goto LABEL_47;
    }
    operator delete(v27);
    if (!v26)
      return;
    goto LABEL_48;
  }
}

void sub_20B0B6A78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
  sub_20AECD704((uint64_t)&a33);
  sub_20AEC833C((uint64_t)&a10, a11);
  sub_20B0B60AC((uint64_t)&a13);
  _Unwind_Resume(a1);
}

void sub_20B0B6AEC(uint64_t a1, _QWORD *a2)
{
  sub_20B0B6660((_BYTE *)(a1 - 16), a2);
}

void sub_20B0B6AF4(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  __int128 *p_p;
  _BOOL4 v11;
  uint64_t v12;
  _BOOL4 v13;
  char v14;
  uint64_t v15;
  __int128 *v16;
  __int128 *v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  unint64_t *v21;
  unint64_t v22;
  const void *v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  BOOL v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  std::__shared_weak_count *v31;
  unint64_t *v32;
  unint64_t v33;
  int v34;
  char v35;
  std::__shared_weak_count *v36;
  uint64_t v37;
  unint64_t *v38;
  unint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  unint64_t *v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t *v47;
  unint64_t v48;
  uint64_t v49;
  _BOOL4 v50;
  char v51;
  uint64_t v52;
  __int128 *p_s1;
  __int128 *v54;
  uint64_t v55;
  const void *v56;
  std::__shared_weak_count *v57;
  unint64_t *p_shared_owners;
  unint64_t v59;
  BOOL v60;
  unint64_t *v61;
  unint64_t v62;
  std::__shared_weak_count *v63;
  uint64_t v64;
  unint64_t *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t v71;
  _BOOL4 v72;
  char v73;
  uint64_t v74;
  __int128 *v75;
  __int128 *v76;
  uint64_t v77;
  const void *v78;
  std::__shared_weak_count *v79;
  unint64_t *v80;
  unint64_t v81;
  BOOL v82;
  unint64_t *v83;
  unint64_t v84;
  std::string::size_type v85;
  std::__shared_weak_count *size;
  unint64_t *v87;
  unint64_t v88;
  unsigned __int8 *v89;
  uint64_t v90;
  uint64_t v91;
  std::mutex *v92;
  std::__shared_weak_count *v93;
  uint64_t v94;
  unint64_t *v95;
  unint64_t v96;
  uint64_t v97;
  _BOOL4 v98;
  char v99;
  uint64_t v100;
  __int128 *v101;
  __int128 *v102;
  uint64_t v103;
  const void *v104;
  std::__shared_weak_count *v105;
  unint64_t *v106;
  unint64_t v107;
  BOOL v108;
  unint64_t *v109;
  unint64_t v110;
  std::__shared_weak_count *v111;
  uint64_t v112;
  unint64_t *v113;
  unint64_t v114;
  unint64_t *v115;
  unint64_t v116;
  uint64_t v117;
  unint64_t *v118;
  unint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  size_t v124;
  uint64_t v125;
  uint64_t v126;
  int v127;
  const void **v128;
  unsigned __int8 *v129;
  std::string::size_type *v130;
  std::mutex *v131;
  std::__shared_weak_count *v132;
  std::__shared_weak_count *v133;
  std::string::size_type v134;
  uint64_t v135;
  unint64_t *v136;
  unint64_t v137;
  std::__shared_weak_count *v138;
  std::__shared_weak_count *v139;
  uint64_t v140;
  unint64_t *v141;
  unint64_t v142;
  unint64_t *p_shared_weak_owners;
  unint64_t v144;
  unint64_t v145;
  std::__shared_weak_count *v146;
  std::__shared_weak_count *v147;
  uint64_t v148;
  unint64_t *v149;
  unint64_t v150;
  std::__shared_weak_count *v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t *v154;
  unint64_t v155;
  unint64_t *v156;
  unint64_t v157;
  uint64_t v158;
  std::mutex *v159;
  uint64_t v160;
  std::__shared_weak_count *v161;
  uint64_t v162;
  unint64_t *v163;
  unint64_t v164;
  unint64_t *v165;
  unint64_t v166;
  _QWORD *v167;
  unint64_t *v168;
  unint64_t v169;
  unint64_t *v170;
  unint64_t v171;
  std::__shared_weak_count *v172;
  unint64_t *v173;
  unint64_t v174;
  std::__shared_weak_count *v175;
  unint64_t *v176;
  unint64_t v177;
  uint64_t v178;
  std::mutex *v179;
  std::__shared_weak_count *v180;
  uint64_t v181;
  unint64_t *v182;
  unint64_t v183;
  unint64_t *v184;
  unint64_t v185;
  char v186;
  char *v187;
  size_t v188;
  unint64_t *v189;
  unint64_t v190;
  std::string::size_type v191;
  std::__shared_weak_count *v192;
  unint64_t *v193;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  std::__shared_weak_count *v199;
  unint64_t *v200;
  unint64_t v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  int v205;
  const void **v206;
  unsigned __int8 *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  int v211;
  const void **v212;
  unsigned __int8 *v213;
  uint64_t v214;
  int v215;
  int v216;
  int v217;
  int v218;
  BOOL v220;
  _BOOL4 v221;
  _QWORD *v222;
  unint64_t v223;
  unint64_t v224;
  uint64_t v225;
  char v226;
  unint64_t v227;
  unsigned __int8 *v228;
  unsigned __int8 *v229;
  unsigned __int8 *v230;
  uint64_t v231;
  int64_t v232;
  int v233;
  _QWORD *v234;
  unint64_t v235;
  unint64_t v236;
  uint64_t v237;
  char v238;
  unint64_t v239;
  unsigned __int8 *v240;
  unsigned __int8 *v241;
  unsigned __int8 *v242;
  uint64_t v243;
  int64_t v244;
  int v245;
  int v246;
  unsigned int v247;
  std::recursive_mutex ***v248;
  std::recursive_mutex *v249;
  std::recursive_mutex **v250;
  std::recursive_mutex **v251;
  unsigned int v252;
  uint64_t v253;
  std::recursive_mutex ***v254;
  std::recursive_mutex **v255;
  std::recursive_mutex **v256;
  std::recursive_mutex **v257;
  uint64_t v258;
  BOOL v259;
  std::recursive_mutex ***v260;
  __int128 v261;
  std::__shared_weak_count *v262;
  uint64_t v263;
  _QWORD *v264;
  std::__shared_weak_count *v265;
  unint64_t *v266;
  unint64_t v267;
  std::__shared_weak_count *v268;
  unint64_t *v269;
  unint64_t v270;
  std::recursive_mutex ***v271;
  unint64_t v272;
  unint64_t *v273;
  unint64_t v274;
  std::__shared_weak_count *v275;
  unint64_t *v276;
  unint64_t v277;
  std::__shared_weak_count *v278;
  unint64_t *v279;
  unint64_t v280;
  unint64_t v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  unint64_t *v286;
  char *v287;
  char *v288;
  void *v289;
  std::__shared_weak_count *v290;
  unint64_t *v291;
  unint64_t v292;
  int v293;
  uint64_t v294;
  int v295;
  uint64_t v296;
  std::__shared_weak_count *v297;
  uint64_t v298;
  uint64_t v299;
  std::condition_variable *v300;
  _OWORD *v301;
  std::mutex *v302;
  uint64_t v303;
  std::string v304;
  std::string __dst;
  char v306;
  void *v307;
  char v308;
  void *v309;
  char v310;
  char v311;
  char v312;
  __int128 __p;
  __int128 v314;
  uint64_t v315;
  unsigned __int8 v316;
  __int128 v317;
  uint64_t v318;
  uint64_t v319;
  __int128 v320;
  uint64_t v321;
  char v322;
  char v323;
  char v324;
  uint64_t v325;
  std::__shared_weak_count *v326;
  void *v327[2];
  char v328;
  char v329;
  void *v330;
  char v331;
  void *v332;
  char v333;
  char v334;
  char v335;
  void *v336;
  char *v337;
  unint64_t v338;
  __int128 __s1;
  __int128 v340;
  void *v341;
  unsigned __int8 v342;
  __int128 v343;
  void *v344;
  uint64_t v345;
  __int128 v346;
  uint64_t v347;
  char v348;
  char v349;
  uint64_t v350;
  std::__shared_weak_count *v351;
  std::string::size_type v352;
  std::string::size_type v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356[3];

  v336 = 0;
  v337 = 0;
  v338 = 0;
  v6 = *a2;
  v5 = a2[1];
  if (*a2 == v5)
  {
LABEL_600:
    if (!*(_BYTE *)(a1 + 72)
      || v336 == v337
      || (*(_QWORD *)&__s1 = a1,
          *((_QWORD *)&__s1 + 1) = &v336,
          v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&off_24C40D1E8,
          v304.__r_.__value_.__l.__size_ = (std::string::size_type)&__s1,
          sub_20B52A3E8((uint64_t)&v304, (uint64_t)&__p),
          v324))
    {
      *(_BYTE *)(a3 + 120) = 1;
    }
    else
    {
      sub_20B5287D4((uint64_t)&__p, &v304);
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
        sub_20AEC60F4(&__dst, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
      else
        __dst = v304;
      v306 = 1;
      LOBYTE(v307) = 0;
      v311 = 0;
      v312 = 1;
      sub_20B0B4C58(8u, (__int128 *)&__dst, (uint64_t)&__s1);
      *(_OWORD *)a3 = __s1;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v349)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v295 = v342;
        if (v342)
        {
          *(_OWORD *)(a3 + 16) = v340;
          *(_QWORD *)(a3 + 32) = v341;
          v341 = 0;
          v340 = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v348)
        {
          v296 = v345;
          *(_QWORD *)(a3 + 64) = v344;
          *(_OWORD *)(a3 + 48) = v343;
          v343 = 0uLL;
          *(_QWORD *)(a3 + 72) = v296;
          *(_OWORD *)(a3 + 80) = v346;
          *(_QWORD *)(a3 + 96) = v347;
          v344 = 0;
          v346 = 0uLL;
          v347 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v295 && SHIBYTE(v341) < 0)
          operator delete((void *)v340);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (v312)
      {
        if (v311)
        {
          if (v310 < 0)
            operator delete(v309);
          if (v308 < 0)
            operator delete(v307);
        }
        if (v306 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__dst.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v304.__r_.__value_.__l.__data_);
      if (!v324 && v323)
      {
        if (v322)
        {
          if (SHIBYTE(v321) < 0)
            operator delete((void *)v320);
          if (SHIBYTE(v318) < 0)
            operator delete((void *)v317);
        }
        if (v316 && SHIBYTE(v315) < 0)
          operator delete((void *)v314);
      }
    }
    goto LABEL_604;
  }
  v301 = (_OWORD *)(a1 + 728);
  v302 = (std::mutex *)(a1 + 784);
  v300 = (std::condition_variable *)(a1 + 848);
  v299 = a1 + 904;
  v303 = a2[1];
  while (1)
  {
    v8 = *(_QWORD *)(v6 + 8);
    if (!v8)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v8 = *(_QWORD *)(v6 + 8);
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v8 + 48))(&__p);
    v9 = BYTE7(v314);
    if (SBYTE7(v314) < 0)
      v9 = *((_QWORD *)&__p + 1);
    if (v9 == 8)
    {
      p_p = (__int128 *)__p;
      if ((SBYTE7(v314) & 0x80u) == 0)
        p_p = &__p;
      v11 = *(_QWORD *)"cv3d.net" == *(_QWORD *)p_p;
      if ((SBYTE7(v314) & 0x80000000) == 0)
      {
LABEL_15:
        if (!v11)
          goto LABEL_31;
        goto LABEL_16;
      }
    }
    else
    {
      v11 = 0;
      if ((SBYTE7(v314) & 0x80000000) == 0)
        goto LABEL_15;
    }
    operator delete((void *)__p);
    if (!v11)
    {
LABEL_31:
      v19 = v337;
      if ((unint64_t)v337 < v338)
      {
        *(_QWORD *)v337 = &off_24C411E78;
        *((_QWORD *)v19 + 1) = *(_QWORD *)(v6 + 8);
        v20 = *(_QWORD *)(v6 + 16);
        *((_QWORD *)v19 + 2) = v20;
        if (v20)
        {
          v21 = (unint64_t *)(v20 + 8);
          do
            v22 = __ldxr(v21);
          while (__stxr(v22 + 1, v21));
        }
        goto LABEL_35;
      }
      goto LABEL_3;
    }
LABEL_16:
    v12 = *(_QWORD *)(v6 + 8);
    if (!v12)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v12 = *(_QWORD *)(v6 + 8);
    }
    (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v12 + 48))(&__s1);
    v13 = 0;
    strcpy((char *)&__p, "cv3d.net");
    BYTE7(v314) = 8;
    DWORD2(v314) = 2;
    LOBYTE(v315) = 1;
    v14 = BYTE7(v340);
    if ((SBYTE7(v340) & 0x80u) == 0)
      v15 = BYTE7(v340);
    else
      v15 = *((_QWORD *)&__s1 + 1);
    if (v15 != 8)
      goto LABEL_39;
    if ((BYTE7(v340) & 0x80) != 0)
    {
      if (!memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
      {
LABEL_38:
        v13 = DWORD2(v340) == 2;
LABEL_39:
        if ((v14 & 0x80) == 0)
          goto LABEL_40;
        goto LABEL_88;
      }
      operator delete((void *)__s1);
LABEL_89:
      v49 = *(_QWORD *)(v6 + 8);
      if (!v49)
      {
        if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
        {
          abort();
        }
        v49 = *(_QWORD *)(v6 + 8);
      }
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v49 + 48))(&__s1);
      v50 = 0;
      strcpy((char *)&__p, "cv3d.net");
      BYTE7(v314) = 8;
      DWORD2(v314) = 5;
      LOBYTE(v315) = 1;
      v51 = BYTE7(v340);
      if ((SBYTE7(v340) & 0x80u) == 0)
        v52 = BYTE7(v340);
      else
        v52 = *((_QWORD *)&__s1 + 1);
      if (v52 == 8)
      {
        if ((BYTE7(v340) & 0x80) != 0)
        {
          if (memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
          {
            operator delete((void *)__s1);
            goto LABEL_132;
          }
        }
        else if (BYTE7(v340))
        {
          p_s1 = &__s1;
          v54 = &__p;
          v55 = BYTE7(v340);
          while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v54)
          {
            p_s1 = (__int128 *)((char *)p_s1 + 1);
            v54 = (__int128 *)((char *)v54 + 1);
            if (!--v55)
              goto LABEL_104;
          }
          v50 = 0;
          if ((BYTE7(v340) & 0x80) != 0)
          {
LABEL_131:
            operator delete((void *)__s1);
            if (!v50)
              goto LABEL_132;
LABEL_107:
            v56 = *(const void **)(v6 + 8);
            v57 = *(std::__shared_weak_count **)(v6 + 16);
            if (v57)
            {
              p_shared_owners = (unint64_t *)&v57->__shared_owners_;
              do
                v59 = __ldxr(p_shared_owners);
              while (__stxr(v59 + 1, p_shared_owners));
            }
            if (v56)
            {
              v60 = __dynamic_cast(v56, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D610, 0) != 0;
              if (!v57)
                goto LABEL_117;
            }
            else
            {
              v60 = 0;
              if (!v57)
                goto LABEL_117;
            }
            v61 = (unint64_t *)&v57->__shared_owners_;
            do
              v62 = __ldaxr(v61);
            while (__stlxr(v62 - 1, v61));
            if (v62)
            {
LABEL_117:
              if (v60)
                goto LABEL_118;
LABEL_123:
              v63 = 0;
              v64 = 0;
              __p = 0uLL;
            }
            else
            {
              ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
              std::__shared_weak_count::__release_weak(v57);
              if (!v60)
                goto LABEL_123;
LABEL_118:
              v64 = *(_QWORD *)(v6 + 8);
              v63 = *(std::__shared_weak_count **)(v6 + 16);
              if (v63)
              {
                v65 = (unint64_t *)&v63->__shared_owners_;
                do
                  v66 = __ldxr(v65);
                while (__stxr(v66 + 1, v65));
              }
              *(_QWORD *)&__p = v64;
              *((_QWORD *)&__p + 1) = v63;
            }
            std::mutex::lock(v302);
            if (!*(_BYTE *)(a1 + 776))
            {
              v301[1] = 0u;
              v301[2] = 0u;
              *v301 = 0u;
              *(_BYTE *)(a1 + 776) = 1;
            }
            v67 = *(_OWORD *)(v64 + 8);
            v68 = *(_OWORD *)(v64 + 24);
            *(_OWORD *)((char *)v301 + 25) = *(_OWORD *)(v64 + 33);
            *v301 = v67;
            v301[1] = v68;
            std::condition_variable::notify_all(v300);
            std::mutex::unlock(v302);
            if (!v63)
              goto LABEL_5;
            v69 = (unint64_t *)&v63->__shared_owners_;
            do
              v70 = __ldaxr(v69);
            while (__stlxr(v70 - 1, v69));
LABEL_598:
            if (!v70)
            {
              ((void (*)(std::__shared_weak_count *))v63->__on_zero_shared)(v63);
              std::__shared_weak_count::__release_weak(v63);
            }
            goto LABEL_5;
          }
LABEL_106:
          if (v50)
            goto LABEL_107;
LABEL_132:
          v71 = *(_QWORD *)(v6 + 8);
          if (!v71)
          {
            if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
            {
              abort();
            }
            v71 = *(_QWORD *)(v6 + 8);
          }
          (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v71 + 48))(&__s1);
          v72 = 0;
          strcpy((char *)&__p, "cv3d.net");
          BYTE7(v314) = 8;
          DWORD2(v314) = 3;
          LOBYTE(v315) = 1;
          v73 = BYTE7(v340);
          if ((SBYTE7(v340) & 0x80u) == 0)
            v74 = BYTE7(v340);
          else
            v74 = *((_QWORD *)&__s1 + 1);
          if (v74 == 8)
          {
            if ((BYTE7(v340) & 0x80) != 0)
            {
              if (memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
              {
                operator delete((void *)__s1);
                goto LABEL_191;
              }
            }
            else if (BYTE7(v340))
            {
              v75 = &__s1;
              v76 = &__p;
              v77 = BYTE7(v340);
              while (*(unsigned __int8 *)v75 == *(unsigned __int8 *)v76)
              {
                v75 = (__int128 *)((char *)v75 + 1);
                v76 = (__int128 *)((char *)v76 + 1);
                if (!--v77)
                  goto LABEL_147;
              }
              v72 = 0;
              if ((BYTE7(v340) & 0x80) != 0)
              {
LABEL_190:
                operator delete((void *)__s1);
                if (!v72)
                  goto LABEL_191;
LABEL_150:
                v78 = *(const void **)(v6 + 8);
                v79 = *(std::__shared_weak_count **)(v6 + 16);
                if (v79)
                {
                  v80 = (unint64_t *)&v79->__shared_owners_;
                  do
                    v81 = __ldxr(v80);
                  while (__stxr(v81 + 1, v80));
                }
                if (v78)
                {
                  v82 = __dynamic_cast(v78, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D560, 0) != 0;
                  if (!v79)
                    goto LABEL_160;
                }
                else
                {
                  v82 = 0;
                  if (!v79)
                    goto LABEL_160;
                }
                v83 = (unint64_t *)&v79->__shared_owners_;
                do
                  v84 = __ldaxr(v83);
                while (__stlxr(v84 - 1, v83));
                if (!v84)
                {
                  ((void (*)(std::__shared_weak_count *))v79->__on_zero_shared)(v79);
                  std::__shared_weak_count::__release_weak(v79);
                  if (!v82)
                    goto LABEL_183;
LABEL_161:
                  v85 = *(_QWORD *)(v6 + 8);
                  size = *(std::__shared_weak_count **)(v6 + 16);
                  if (size)
                  {
                    v87 = (unint64_t *)&size->__shared_owners_;
                    do
                      v88 = __ldxr(v87);
                    while (__stxr(v88 + 1, v87));
                  }
                  v304.__r_.__value_.__r.__words[0] = v85;
                  v304.__r_.__value_.__l.__size_ = (std::string::size_type)size;
                  if (*(_BYTE *)(a1 + 1112))
                    goto LABEL_165;
LABEL_184:
                  v91 = *(_QWORD *)(a1 + 1120);
                  v92 = *(std::mutex **)(v91 + 32);
                  if (v92)
                  {
                    std::mutex::lock(*(std::mutex **)(v91 + 32));
                    v94 = *(_QWORD *)(v91 + 40);
                    v93 = *(std::__shared_weak_count **)(v91 + 48);
                    *(_QWORD *)&__p = v94;
                    *((_QWORD *)&__p + 1) = v93;
                    if (v93)
                    {
                      v95 = (unint64_t *)&v93->__shared_owners_;
                      do
                        v96 = __ldxr(v95);
                      while (__stxr(v96 + 1, v95));
                    }
                    std::mutex::unlock(v92);
                  }
                  else
                  {
                    v94 = *(_QWORD *)(v91 + 40);
                    v93 = *(std::__shared_weak_count **)(v91 + 48);
                    *(_QWORD *)&__p = v94;
                    *((_QWORD *)&__p + 1) = v93;
                    if (v93)
                    {
                      v115 = (unint64_t *)&v93->__shared_owners_;
                      do
                        v116 = __ldxr(v115);
                      while (__stxr(v116 + 1, v115));
                    }
                  }
                  v117 = *(_QWORD *)(v94 + 8);
                  if (!v117)
                  {
                    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
                    {
                      abort();
                    }
                    v117 = *(_QWORD *)(v94 + 8);
                  }
                  sub_20B21AB14(v117, (_QWORD *)(v85 + 8));
                  if (v93)
                  {
                    v118 = (unint64_t *)&v93->__shared_owners_;
                    do
                      v119 = __ldaxr(v118);
                    while (__stlxr(v119 - 1, v118));
                    if (!v119)
                    {
                      ((void (*)(std::__shared_weak_count *))v93->__on_zero_shared)(v93);
                      std::__shared_weak_count::__release_weak(v93);
                    }
                  }
                  size = (std::__shared_weak_count *)v304.__r_.__value_.__l.__size_;
                  goto LABEL_237;
                }
LABEL_160:
                if (v82)
                  goto LABEL_161;
LABEL_183:
                size = 0;
                v85 = 0;
                *(_OWORD *)&v304.__r_.__value_.__l.__data_ = 0uLL;
                if (!*(_BYTE *)(a1 + 1112))
                  goto LABEL_184;
LABEL_165:
                v89 = (unsigned __int8 *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
                sub_20B1E3CE8(v89, (uint64_t)&__s1);
                __p = __s1;
                sub_20AECEBD0(&v314, &v340);
                if (*(_BYTE *)(a1 + 112))
                {
                  v90 = *(_QWORD *)(a1 + 104);
                  if (!v90)
                    sub_20AECABA4();
                  (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v90 + 48))(v90, &__p);
                }
                if (!v323)
                  goto LABEL_175;
                if (!v322)
                  goto LABEL_172;
                if ((SHIBYTE(v321) & 0x80000000) == 0)
                {
                  if ((SHIBYTE(v318) & 0x80000000) == 0)
                    goto LABEL_172;
LABEL_273:
                  operator delete((void *)v317);
                  if (!v316)
                    goto LABEL_175;
LABEL_173:
                  if (SHIBYTE(v315) < 0)
                    operator delete((void *)v314);
                  goto LABEL_175;
                }
                operator delete((void *)v320);
                if (SHIBYTE(v318) < 0)
                  goto LABEL_273;
LABEL_172:
                if (v316)
                  goto LABEL_173;
LABEL_175:
                if (v349)
                {
                  if (!v348)
                    goto LABEL_179;
                  if ((SHIBYTE(v347) & 0x80000000) == 0)
                  {
                    if ((SHIBYTE(v344) & 0x80000000) == 0)
                      goto LABEL_179;
LABEL_276:
                    operator delete((void *)v343);
                    if (!v342)
                      goto LABEL_237;
LABEL_180:
                    if (SHIBYTE(v341) < 0)
                      operator delete((void *)v340);
                    goto LABEL_237;
                  }
                  operator delete((void *)v346);
                  if (SHIBYTE(v344) < 0)
                    goto LABEL_276;
LABEL_179:
                  if (v342)
                    goto LABEL_180;
                }
LABEL_237:
                if (size)
                {
                  v120 = (unint64_t *)&size->__shared_owners_;
                  do
                    v121 = __ldaxr(v120);
                  while (__stlxr(v121 - 1, v120));
                  if (!v121)
                  {
                    ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
                    std::__shared_weak_count::__release_weak(size);
                  }
                }
                v5 = v303;
                goto LABEL_5;
              }
LABEL_149:
              if (v72)
                goto LABEL_150;
LABEL_191:
              v97 = *(_QWORD *)(v6 + 8);
              if (!v97)
              {
                if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
                {
                  abort();
                }
                v97 = *(_QWORD *)(v6 + 8);
              }
              (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v97 + 48))(&__s1);
              v98 = 0;
              strcpy((char *)&__p, "cv3d.net");
              BYTE7(v314) = 8;
              DWORD2(v314) = 4;
              LOBYTE(v315) = 1;
              v99 = BYTE7(v340);
              if ((SBYTE7(v340) & 0x80u) == 0)
                v100 = BYTE7(v340);
              else
                v100 = *((_QWORD *)&__s1 + 1);
              if (v100 == 8)
              {
                if ((BYTE7(v340) & 0x80) != 0)
                {
                  if (memcmp((const void *)__s1, &__p, *((size_t *)&__s1 + 1)))
                  {
                    operator delete((void *)__s1);
                    goto LABEL_266;
                  }
                }
                else if (BYTE7(v340))
                {
                  v101 = &__s1;
                  v102 = &__p;
                  v103 = BYTE7(v340);
                  while (*(unsigned __int8 *)v101 == *(unsigned __int8 *)v102)
                  {
                    v101 = (__int128 *)((char *)v101 + 1);
                    v102 = (__int128 *)((char *)v102 + 1);
                    if (!--v103)
                      goto LABEL_206;
                  }
                  v98 = 0;
                  if ((BYTE7(v340) & 0x80) != 0)
                  {
LABEL_265:
                    operator delete((void *)__s1);
                    if (!v98)
                      goto LABEL_266;
LABEL_209:
                    v104 = *(const void **)(v6 + 8);
                    v105 = *(std::__shared_weak_count **)(v6 + 16);
                    if (v105)
                    {
                      v106 = (unint64_t *)&v105->__shared_owners_;
                      do
                        v107 = __ldxr(v106);
                      while (__stxr(v107 + 1, v106));
                    }
                    if (v104)
                    {
                      v108 = __dynamic_cast(v104, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D5E0, 0) != 0;
                      if (!v105)
                        goto LABEL_219;
                    }
                    else
                    {
                      v108 = 0;
                      if (!v105)
                        goto LABEL_219;
                    }
                    v109 = (unint64_t *)&v105->__shared_owners_;
                    do
                      v110 = __ldaxr(v109);
                    while (__stlxr(v110 - 1, v109));
                    if (v110)
                    {
LABEL_219:
                      if (v108)
                        goto LABEL_220;
LABEL_244:
                      v112 = 0;
                      v325 = 0;
                      v326 = 0;
                      if (MEMORY[0x38])
                        goto LABEL_245;
                      goto LABEL_395;
                    }
                    ((void (*)(std::__shared_weak_count *))v105->__on_zero_shared)(v105);
                    std::__shared_weak_count::__release_weak(v105);
                    if (!v108)
                      goto LABEL_244;
LABEL_220:
                    v112 = *(_QWORD *)(v6 + 8);
                    v111 = *(std::__shared_weak_count **)(v6 + 16);
                    if (v111)
                    {
                      v113 = (unint64_t *)&v111->__shared_owners_;
                      do
                        v114 = __ldxr(v113);
                      while (__stxr(v114 + 1, v113));
                    }
                    v325 = v112;
                    v326 = v111;
                    if (!*(_BYTE *)(v112 + 56))
                      goto LABEL_395;
LABEL_245:
                    v122 = *(_QWORD *)(a1 + 1168);
                    if (v122)
                    {
                      v123 = *(unsigned __int8 *)(v122 + 71);
                      v124 = *(_QWORD *)(v122 + 56);
                      if ((v123 & 0x80u) == 0)
                        v125 = *(unsigned __int8 *)(v122 + 71);
                      else
                        v125 = *(_QWORD *)(v122 + 56);
                      v126 = *(unsigned __int8 *)(v112 + 55);
                      v127 = (char)v126;
                      if ((v126 & 0x80u) != 0)
                        v126 = *(_QWORD *)(v112 + 40);
                      if (v125 == v126)
                      {
                        v128 = (const void **)(v122 + 48);
                        if (v127 >= 0)
                          v129 = (unsigned __int8 *)(v112 + 32);
                        else
                          v129 = *(unsigned __int8 **)(v112 + 32);
                        if ((v123 & 0x80) != 0)
                        {
                          if (!memcmp(*v128, v129, v124))
                            goto LABEL_395;
                        }
                        else
                        {
                          if (!(_DWORD)v123)
                            goto LABEL_395;
                          while (*(unsigned __int8 *)v128 == *v129)
                          {
                            v128 = (const void **)((char *)v128 + 1);
                            ++v129;
                            if (!--v123)
                              goto LABEL_395;
                          }
                        }
                      }
                      sub_20AF55B94((uint64_t)&__s1, "Received a different target destination context during 'update enabled loggers' command. Retargeting of visualized textual log messages is not yet implemented. Command ignored.");
                      LOBYTE(v347) = 1;
                      sub_20AF55A38((uint64_t)&__p, 0x16u, &__s1);
                      if (*(_BYTE *)(a1 + 112))
                      {
                        v140 = *(_QWORD *)(a1 + 104);
                        if (!v140)
                          sub_20AECABA4();
                        (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v140 + 48))(v140, &__p);
                      }
                      if (v323)
                      {
                        if (v322)
                        {
                          if (SHIBYTE(v321) < 0)
                            operator delete((void *)v320);
                          if (SHIBYTE(v318) < 0)
                            operator delete((void *)v317);
                        }
                        if (v316 && SHIBYTE(v315) < 0)
                          operator delete((void *)v314);
                      }
                      if ((_BYTE)v347)
                      {
                        if (BYTE8(v346))
                        {
                          if (SBYTE7(v346) < 0)
                            operator delete(v344);
                          if (SBYTE7(v343) < 0)
                            operator delete(v341);
                        }
                        if (BYTE8(v340) && SBYTE7(v340) < 0)
                          operator delete((void *)__s1);
                      }
LABEL_395:
                      v191 = *(_QWORD *)(a1 + 1168);
                      v192 = *(std::__shared_weak_count **)(a1 + 1176);
                      v352 = v191;
                      v353 = (std::string::size_type)v192;
                      if (v192)
                      {
                        v193 = (unint64_t *)&v192->__shared_owners_;
                        do
                          v194 = __ldxr(v193);
                        while (__stxr(v194 + 1, v193));
                      }
                      v195 = *(_QWORD *)(v112 + 8);
                      v196 = *(_QWORD *)(v112 + 16);
                      if (v195 != v196)
                      {
                        v297 = v192;
                        v298 = a3;
                        while (1)
                        {
                          if (!*(_BYTE *)(a1 + 1160))
                          {
                            sub_20B0A53E8((uint64_t *)&__p);
                            v197 = __p;
                            if (*(_BYTE *)(a1 + 1160))
                            {
                              v198 = *((_QWORD *)&__p + 1);
                              __p = 0uLL;
                              *(_QWORD *)(a1 + 1144) = v197;
                              v199 = *(std::__shared_weak_count **)(a1 + 1152);
                              *(_QWORD *)(a1 + 1152) = v198;
                              if (v199)
                              {
                                v200 = (unint64_t *)&v199->__shared_owners_;
                                do
                                  v201 = __ldaxr(v200);
                                while (__stlxr(v201 - 1, v200));
                                if (!v201)
                                {
                                  ((void (*)(std::__shared_weak_count *))v199->__on_zero_shared)(v199);
                                  std::__shared_weak_count::__release_weak(v199);
                                }
                              }
                            }
                            else
                            {
                              *(_OWORD *)(a1 + 1144) = __p;
                              __p = 0uLL;
                              *(_BYTE *)(a1 + 1160) = 1;
                            }
                            sub_20B0A5250((uint64_t)&__p);
                          }
                          sub_20B0A7AE0(&v350);
                          v202 = *(unsigned __int8 *)(v350 + 39);
                          if ((v202 & 0x80u) == 0)
                            v203 = *(unsigned __int8 *)(v350 + 39);
                          else
                            v203 = *(_QWORD *)(v350 + 24);
                          v204 = *(unsigned __int8 *)(v195 + 23);
                          v205 = (char)v204;
                          if ((v204 & 0x80u) != 0)
                            v204 = *(_QWORD *)(v195 + 8);
                          if (v203 == v204)
                          {
                            v206 = (const void **)(v350 + 16);
                            if (v205 >= 0)
                              v207 = (unsigned __int8 *)v195;
                            else
                              v207 = *(unsigned __int8 **)v195;
                            if ((v202 & 0x80) != 0)
                            {
                              if (!memcmp(*v206, v207, *(_QWORD *)(v350 + 24)))
                                goto LABEL_445;
                            }
                            else
                            {
                              if (!*(_BYTE *)(v350 + 39))
                                goto LABEL_445;
                              while (*(unsigned __int8 *)v206 == *v207)
                              {
                                v206 = (const void **)((char *)v206 + 1);
                                ++v207;
                                if (!--v202)
                                  goto LABEL_445;
                              }
                            }
                          }
                          sub_20B0A7BD4(v356);
                          v208 = *(unsigned __int8 *)(v356[0] + 39);
                          if ((v208 & 0x80u) == 0)
                            v209 = *(unsigned __int8 *)(v356[0] + 39);
                          else
                            v209 = *(_QWORD *)(v356[0] + 24);
                          v210 = *(unsigned __int8 *)(v195 + 23);
                          v211 = (char)v210;
                          if ((v210 & 0x80u) != 0)
                            v210 = *(_QWORD *)(v195 + 8);
                          if (v209 == v210)
                          {
                            v212 = (const void **)(v356[0] + 16);
                            if (v211 >= 0)
                              v213 = (unsigned __int8 *)v195;
                            else
                              v213 = *(unsigned __int8 **)v195;
                            if ((v208 & 0x80) != 0)
                            {
                              v221 = memcmp(*v212, v213, *(_QWORD *)(v356[0] + 24)) == 0;
                            }
                            else
                            {
                              if (!*(_BYTE *)(v356[0] + 39))
                              {
LABEL_445:
                                v221 = 1;
                                goto LABEL_448;
                              }
                              v214 = v208 - 1;
                              do
                              {
                                v216 = *(unsigned __int8 *)v212;
                                v212 = (const void **)((char *)v212 + 1);
                                v215 = v216;
                                v218 = *v213++;
                                v217 = v218;
                                v220 = v214-- != 0;
                                v221 = v215 == v217;
                              }
                              while (v215 == v217 && v220);
                            }
                          }
                          else
                          {
                            v221 = 0;
                          }
LABEL_448:
                          sub_20B0A7AE0(&v355);
                          v222 = (_QWORD *)(v355 + 16);
                          v223 = *(unsigned __int8 *)(v355 + 39);
                          v224 = *(_QWORD *)(v355 + 24);
                          if ((v223 & 0x80u) == 0)
                            v225 = *(unsigned __int8 *)(v355 + 39);
                          else
                            v225 = *(_QWORD *)(v355 + 24);
                          v226 = *(_BYTE *)(v195 + 23);
                          if (v226 >= 0)
                            v227 = *(unsigned __int8 *)(v195 + 23);
                          else
                            v227 = *(_QWORD *)(v195 + 8);
                          if (v226 >= 0)
                            v228 = (unsigned __int8 *)v195;
                          else
                            v228 = *(unsigned __int8 **)v195;
                          if (v225 != v227)
                            goto LABEL_464;
                          if ((v223 & 0x80) == 0)
                          {
                            if (!*(_BYTE *)(v355 + 39))
                              goto LABEL_500;
                            v229 = v228;
                            v230 = (unsigned __int8 *)(v355 + 16);
                            v231 = *(unsigned __int8 *)(v355 + 39);
                            while (*v230 == *v229)
                            {
                              ++v230;
                              ++v229;
                              if (!--v231)
                                goto LABEL_500;
                            }
LABEL_464:
                            if ((v223 & 0x80) != 0)
                            {
                              v222 = (_QWORD *)*v222;
                              v232 = *(_QWORD *)(v355 + 24);
                            }
                            else
                            {
                              v232 = *(unsigned __int8 *)(v355 + 39);
                            }
                            goto LABEL_468;
                          }
                          v222 = (_QWORD *)*v222;
                          v233 = memcmp(v222, v228, *(_QWORD *)(v355 + 24));
                          v232 = v224;
                          if (!v233)
                            goto LABEL_500;
LABEL_468:
                          if (v232 > (uint64_t)v227 || memcmp(v228, v222, v232))
                            goto LABEL_470;
                          if ((v223 & 0x80) != 0)
                          {
                            if (v227 <= v224)
                              goto LABEL_470;
                          }
                          else
                          {
                            v224 = v223;
                            if (v227 <= v223)
                              goto LABEL_470;
                          }
                          if (v228[v224] == 46)
                          {
LABEL_500:
                            v246 = 0;
                            v247 = *(_DWORD *)(v195 + 24);
                            if (!v221)
                              goto LABEL_515;
                            goto LABEL_501;
                          }
LABEL_470:
                          sub_20B0A7BD4(&v354);
                          v234 = (_QWORD *)(v354 + 16);
                          v235 = *(unsigned __int8 *)(v354 + 39);
                          v236 = *(_QWORD *)(v354 + 24);
                          if ((v235 & 0x80u) == 0)
                            v237 = *(unsigned __int8 *)(v354 + 39);
                          else
                            v237 = *(_QWORD *)(v354 + 24);
                          v238 = *(_BYTE *)(v195 + 23);
                          if (v238 >= 0)
                            v239 = *(unsigned __int8 *)(v195 + 23);
                          else
                            v239 = *(_QWORD *)(v195 + 8);
                          if (v238 >= 0)
                            v240 = (unsigned __int8 *)v195;
                          else
                            v240 = *(unsigned __int8 **)v195;
                          if (v237 != v239)
                            goto LABEL_486;
                          if ((v235 & 0x80) == 0)
                          {
                            if (!*(_BYTE *)(v354 + 39))
                              goto LABEL_514;
                            v241 = v240;
                            v242 = (unsigned __int8 *)(v354 + 16);
                            v243 = *(unsigned __int8 *)(v354 + 39);
                            while (*v242 == *v241)
                            {
                              ++v242;
                              ++v241;
                              if (!--v243)
                                goto LABEL_514;
                            }
LABEL_486:
                            if ((v235 & 0x80) != 0)
                            {
                              v234 = (_QWORD *)*v234;
                              v244 = *(_QWORD *)(v354 + 24);
                            }
                            else
                            {
                              v244 = *(unsigned __int8 *)(v354 + 39);
                            }
                            goto LABEL_493;
                          }
                          v234 = (_QWORD *)*v234;
                          v245 = memcmp(v234, v240, *(_QWORD *)(v354 + 24));
                          v244 = v236;
                          if (!v245)
                            goto LABEL_514;
LABEL_493:
                          if (v244 > (uint64_t)v239 || memcmp(v240, v234, v244))
                            goto LABEL_402;
                          if ((v235 & 0x80) != 0)
                          {
                            if (v239 <= v236)
                              goto LABEL_402;
                          }
                          else
                          {
                            v236 = v235;
                            if (v239 <= v235)
                              goto LABEL_402;
                          }
                          if (v240[v236] == 46)
                          {
LABEL_514:
                            v246 = 1;
                            v247 = *(_DWORD *)(v195 + 24);
                            if (!v221)
                            {
LABEL_515:
                              v253 = 0x100000001;
                              switch(v247)
                              {
                                case 0u:
                                  v258 = 0x100000006;
                                  if (v246)
                                    goto LABEL_522;
                                  goto LABEL_402;
                                case 1u:
                                  if ((v246 & 1) == 0)
                                    goto LABEL_402;
                                  v258 = 0;
LABEL_522:
                                  sub_20B0A6B78(*(std::recursive_mutex ****)(a1 + 1144), v195, v258);
                                  goto LABEL_402;
                                case 2u:
                                  goto LABEL_528;
                                case 3u:
                                  v253 = 0x100000002;
                                  v254 = *(std::recursive_mutex ****)(a1 + 1144);
                                  v255 = *v254;
                                  if (!v246)
                                    goto LABEL_507;
                                  goto LABEL_529;
                                case 4u:
                                  v253 = 0x100000003;
                                  v254 = *(std::recursive_mutex ****)(a1 + 1144);
                                  v255 = *v254;
                                  if (!v246)
                                    goto LABEL_507;
                                  goto LABEL_529;
                                case 5u:
                                  v253 = 0x100000004;
LABEL_528:
                                  v254 = *(std::recursive_mutex ****)(a1 + 1144);
                                  v255 = *v254;
                                  if (v246)
                                    goto LABEL_529;
                                  goto LABEL_507;
                                case 6u:
                                  v253 = 0x100000005;
                                  v254 = *(std::recursive_mutex ****)(a1 + 1144);
                                  v255 = *v254;
                                  if (!v246)
                                    goto LABEL_507;
                                  goto LABEL_529;
                                case 7u:
                                  v253 = 0x100000006;
                                  v254 = *(std::recursive_mutex ****)(a1 + 1144);
                                  v255 = *v254;
                                  if (!v246)
                                    goto LABEL_507;
                                  goto LABEL_529;
                                default:
                                  goto LABEL_669;
                              }
                            }
LABEL_501:
                            if (v247 > 1)
                            {
                              v252 = v247 - 2;
                              if (v252 >= 6)
                              {
LABEL_669:
                                sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/Client.cpp", 663, (uint64_t)"", 0, (uint64_t)"invalid argument", 16, (void (*)(void **))sub_20B532360);
LABEL_670:
                                abort();
                              }
                              v253 = v252 + 0x100000001;
                              v254 = *(std::recursive_mutex ****)(a1 + 1144);
                              v255 = *v254;
                              if (v246)
                              {
LABEL_529:
                                if (*((_DWORD *)v255 + 28) != 2)
                                {
                                  sub_20B0A64B4(v254, 6);
                                  v254 = *(std::recursive_mutex ****)(a1 + 1144);
                                }
                                if ((sub_20B0A6B78(v254, v195, v253) & 1) == 0
                                  && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/Client.cpp", 702, (uint64_t)"ret == elog::APILogging::Available()", 36, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
                                {
                                  goto LABEL_670;
                                }
                              }
                              else
                              {
LABEL_507:
                                if (*((_DWORD *)v255 + 29) != 2)
                                  sub_20B0A6718(v254);
                              }
                            }
                            else
                            {
                              v248 = *(std::recursive_mutex ****)(a1 + 1144);
                              if (v246)
                              {
                                v249 = **v248;
                                std::recursive_mutex::lock(v249);
                                v250 = *v248;
                                *(_QWORD *)&__p = (*v248)[10];
                                v304.__r_.__value_.__r.__words[0] = (std::string::size_type)v250[12];
                                sub_20B0A6940((uint64_t **)&__p, (uint64_t *)&v304);
                                v251 = *v248;
                                if (*((_BYTE *)*v248 + 124))
                                  *((_BYTE *)v251 + 124) = 0;
                                *((_DWORD *)v251 + 28) = 1;
                              }
                              else
                              {
                                v249 = **v248;
                                std::recursive_mutex::lock(v249);
                                v256 = *v248;
                                *(_QWORD *)&__p = (*v248)[10];
                                v304.__r_.__value_.__r.__words[0] = (std::string::size_type)v256[13];
                                sub_20B0A69F4((uint64_t **)&__p, (uint64_t *)&v304);
                                v257 = *v248;
                                if (*((_BYTE *)*v248 + 132))
                                  *((_BYTE *)v257 + 132) = 0;
                                *((_DWORD *)v257 + 29) = 1;
                              }
                              std::recursive_mutex::unlock(v249);
                            }
                          }
LABEL_402:
                          v195 += 32;
                          if (v195 == v196)
                          {
                            v191 = v352;
                            v192 = v297;
                            a3 = v298;
                            break;
                          }
                        }
                      }
                      if (*(_BYTE *)(a1 + 1160))
                        v259 = v191 == 0;
                      else
                        v259 = 1;
                      v5 = v303;
                      if (!v259)
                      {
                        v260 = *(std::recursive_mutex ****)(a1 + 1144);
                        if (*((_DWORD *)*v260 + 28) != 2)
                          goto LABEL_579;
                        sub_20B0A6EB0(v260, &__p);
                        v261 = __p;
                        if ((_QWORD)__p == *((_QWORD *)&__p + 1))
                        {
                          if ((_QWORD)__p)
                          {
                            *((_QWORD *)&__p + 1) = __p;
                            operator delete((void *)__p);
                          }
                          goto LABEL_562;
                        }
                        v262 = v192;
                        v263 = *((_QWORD *)&__p + 1);
                        v264 = (_QWORD *)__p;
                        while (*v264 != v191)
                        {
                          v264 += 2;
                          if (v264 == *((_QWORD **)&__p + 1))
                          {
                            v264 = (_QWORD *)*((_QWORD *)&__p + 1);
                            break;
                          }
                        }
                        if ((_QWORD)__p)
                        {
                          do
                          {
                            v265 = *(std::__shared_weak_count **)(v263 - 8);
                            if (v265)
                            {
                              v266 = (unint64_t *)&v265->__shared_owners_;
                              do
                                v267 = __ldaxr(v266);
                              while (__stlxr(v267 - 1, v266));
                              if (!v267)
                              {
                                ((void (*)(std::__shared_weak_count *))v265->__on_zero_shared)(v265);
                                std::__shared_weak_count::__release_weak(v265);
                              }
                            }
                            v263 -= 16;
                          }
                          while (v263 != (_QWORD)v261);
                          *((_QWORD *)&__p + 1) = v261;
                          operator delete((void *)__p);
                          v259 = v264 == *((_QWORD **)&v261 + 1);
                          v5 = v303;
                          v192 = v262;
                          if (v259)
                          {
                            v191 = v352;
                            goto LABEL_562;
                          }
                        }
                        else
                        {
                          v259 = v264 == *((_QWORD **)&__p + 1);
                          v5 = v303;
                          v192 = v262;
                          if (!v259)
                            goto LABEL_579;
LABEL_562:
                          v268 = (std::__shared_weak_count *)v353;
                          v304.__r_.__value_.__r.__words[0] = v191;
                          v304.__r_.__value_.__l.__size_ = v353;
                          if (v353)
                          {
                            v269 = (unint64_t *)(v353 + 8);
                            do
                              v270 = __ldxr(v269);
                            while (__stxr(v270 + 1, v269));
                            v271 = *(std::recursive_mutex ****)(a1 + 1144);
                            *((_QWORD *)&__p + 1) = v268;
                            do
                              v272 = __ldxr(v269);
                            while (__stxr(v272 + 1, v269));
                          }
                          else
                          {
                            v271 = *(std::recursive_mutex ****)(a1 + 1144);
                            *((_QWORD *)&__p + 1) = 0;
                          }
                          *(_QWORD *)&__p = v191;
                          sub_20B0A6DC8(v271, (uint64_t *)&__p);
                          if (v268)
                          {
                            v273 = (unint64_t *)&v268->__shared_owners_;
                            do
                              v274 = __ldaxr(v273);
                            while (__stlxr(v274 - 1, v273));
                            if (!v274)
                            {
                              ((void (*)(std::__shared_weak_count *))v268->__on_zero_shared)(v268);
                              std::__shared_weak_count::__release_weak(v268);
                            }
                          }
                          v275 = (std::__shared_weak_count *)v304.__r_.__value_.__l.__size_;
                          if (v304.__r_.__value_.__l.__size_)
                          {
                            v276 = (unint64_t *)(v304.__r_.__value_.__l.__size_ + 8);
                            do
                              v277 = __ldaxr(v276);
                            while (__stlxr(v277 - 1, v276));
                            if (!v277)
                            {
                              ((void (*)(std::__shared_weak_count *))v275->__on_zero_shared)(v275);
                              std::__shared_weak_count::__release_weak(v275);
                            }
                          }
                        }
LABEL_579:
                        if (*(_DWORD *)(**(_QWORD **)(a1 + 1144) + 116) == 2)
                        {
                          v278 = (std::__shared_weak_count *)v353;
                          if (v353)
                          {
                            v279 = (unint64_t *)(v353 + 8);
                            do
                              v280 = __ldxr(v279);
                            while (__stxr(v280 + 1, v279));
                            do
                              v281 = __ldxr(v279);
                            while (__stxr(v281 + 1, v279));
                            do
                              v282 = __ldaxr(v279);
                            while (__stlxr(v282 - 1, v279));
                            if (!v282)
                            {
                              ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                              std::__shared_weak_count::__release_weak(v278);
                            }
                            do
                              v283 = __ldaxr(v279);
                            while (__stlxr(v283 - 1, v279));
                            if (!v283)
                            {
                              ((void (*)(std::__shared_weak_count *))v278->__on_zero_shared)(v278);
                              std::__shared_weak_count::__release_weak(v278);
                            }
                          }
                        }
                      }
                      if (v192)
                      {
                        v284 = (unint64_t *)&v192->__shared_owners_;
                        do
                          v285 = __ldaxr(v284);
                        while (__stlxr(v285 - 1, v284));
                        if (!v285)
                        {
                          ((void (*)(std::__shared_weak_count *))v192->__on_zero_shared)(v192);
                          std::__shared_weak_count::__release_weak(v192);
                        }
                      }
                      v63 = v326;
                      if (!v326)
                        goto LABEL_5;
                      v286 = (unint64_t *)&v326->__shared_owners_;
                      do
                        v70 = __ldaxr(v286);
                      while (__stlxr(v70 - 1, v286));
                      goto LABEL_598;
                    }
                    v130 = *(std::string::size_type **)(a1 + 1120);
                    v131 = (std::mutex *)v130[4];
                    if (v131)
                    {
                      std::mutex::lock(v131);
                      v132 = (std::__shared_weak_count *)v130[1];
                      if (v132)
                      {
                        v133 = std::__shared_weak_count::lock(v132);
                        if (v133)
                        {
                          v134 = *v130;
                          goto LABEL_305;
                        }
                      }
                      else
                      {
                        v133 = 0;
                      }
                      v134 = 0;
LABEL_305:
                      std::mutex::unlock(v131);
LABEL_306:
                      if (v134)
                      {
                        if (v133)
                        {
                          v141 = (unint64_t *)&v133->__shared_owners_;
                          do
                            v142 = __ldxr(v141);
                          while (__stxr(v142 + 1, v141));
                          p_shared_weak_owners = (unint64_t *)&v133->__shared_weak_owners_;
                          do
                            v144 = __ldxr(p_shared_weak_owners);
                          while (__stxr(v144 + 1, p_shared_weak_owners));
                          do
                            v145 = __ldaxr(v141);
                          while (__stlxr(v145 - 1, v141));
                          if (!v145)
                          {
                            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                            std::__shared_weak_count::__release_weak(v133);
                          }
                          v146 = v133;
LABEL_334:
                          v156 = (unint64_t *)&v146->__shared_owners_;
                          do
                            v157 = __ldaxr(v156);
                          while (__stlxr(v157 - 1, v156));
                          if (!v157)
                          {
                            ((void (*)(std::__shared_weak_count *))v146->__on_zero_shared)(v146);
                            std::__shared_weak_count::__release_weak(v146);
                          }
                        }
LABEL_338:
                        v158 = *(_QWORD *)(a1 + 1120);
                        v159 = *(std::mutex **)(v158 + 32);
                        if (v159)
                        {
                          v160 = a3;
                          std::mutex::lock(*(std::mutex **)(v158 + 32));
                          v162 = *(_QWORD *)(v158 + 40);
                          v161 = *(std::__shared_weak_count **)(v158 + 48);
                          v350 = v162;
                          v351 = v161;
                          if (v161)
                          {
                            v163 = (unint64_t *)&v161->__shared_owners_;
                            do
                              v164 = __ldxr(v163);
                            while (__stxr(v164 + 1, v163));
                          }
                          std::mutex::unlock(v159);
                        }
                        else
                        {
                          v160 = a3;
                          v162 = *(_QWORD *)(v158 + 40);
                          v161 = *(std::__shared_weak_count **)(v158 + 48);
                          v350 = v162;
                          v351 = v161;
                          if (v161)
                          {
                            v165 = (unint64_t *)&v161->__shared_owners_;
                            do
                              v166 = __ldxr(v165);
                            while (__stxr(v166 + 1, v165));
                          }
                        }
                        v167 = operator new(0x70uLL);
                        v167[1] = 0;
                        v167[2] = 0;
                        *v167 = &off_24C40D388;
                        *(_QWORD *)&__s1 = v162;
                        *((_QWORD *)&__s1 + 1) = v161;
                        v350 = 0;
                        v351 = 0;
                        v304.__r_.__value_.__r.__words[0] = v134;
                        v304.__r_.__value_.__l.__size_ = (std::string::size_type)v133;
                        if (v133)
                        {
                          v168 = (unint64_t *)&v133->__shared_weak_owners_;
                          do
                            v169 = __ldxr(v168);
                          while (__stxr(v169 + 1, v168));
                        }
                        LOBYTE(__p) = 0;
                        BYTE8(v314) = 0;
                        a3 = v160;
                        if (*(_BYTE *)(v112 + 56))
                        {
                          if (*(char *)(v112 + 55) < 0)
                          {
                            sub_20AEC60F4(&__p, *(void **)(v112 + 32), *(_QWORD *)(v112 + 40));
                          }
                          else
                          {
                            __p = *(_OWORD *)(v112 + 32);
                            *(_QWORD *)&v314 = *(_QWORD *)(v112 + 48);
                          }
                          BYTE8(v314) = 1;
                        }
                        v352 = 0;
                        v353 = 0;
                        sub_20B1DFFB8((uint64_t)(v167 + 3), &__s1, &v304, &__p, &v352);
                        if (BYTE8(v314) && SBYTE7(v314) < 0)
                          operator delete((void *)__p);
                        if (v133)
                          std::__shared_weak_count::__release_weak(v133);
                        if (v161)
                        {
                          v170 = (unint64_t *)&v161->__shared_owners_;
                          do
                            v171 = __ldaxr(v170);
                          while (__stlxr(v171 - 1, v170));
                          if (!v171)
                          {
                            ((void (*)(std::__shared_weak_count *))v161->__on_zero_shared)(v161);
                            std::__shared_weak_count::__release_weak(v161);
                          }
                        }
                        *(_QWORD *)(a1 + 1168) = v167 + 3;
                        v172 = *(std::__shared_weak_count **)(a1 + 1176);
                        *(_QWORD *)(a1 + 1176) = v167;
                        if (v172)
                        {
                          v173 = (unint64_t *)&v172->__shared_owners_;
                          do
                            v174 = __ldaxr(v173);
                          while (__stlxr(v174 - 1, v173));
                          if (!v174)
                          {
                            ((void (*)(std::__shared_weak_count *))v172->__on_zero_shared)(v172);
                            std::__shared_weak_count::__release_weak(v172);
                          }
                        }
                        v175 = v351;
                        if (v351)
                        {
                          v176 = (unint64_t *)&v351->__shared_owners_;
                          do
                            v177 = __ldaxr(v176);
                          while (__stlxr(v177 - 1, v176));
                          if (!v177)
                          {
                            ((void (*)(std::__shared_weak_count *))v175->__on_zero_shared)(v175);
                            std::__shared_weak_count::__release_weak(v175);
                          }
                        }
                        v178 = *(_QWORD *)(a1 + 1120);
                        v179 = *(std::mutex **)(v178 + 32);
                        if (v179)
                        {
                          std::mutex::lock(*(std::mutex **)(v178 + 32));
                          v181 = *(_QWORD *)(v178 + 40);
                          v180 = *(std::__shared_weak_count **)(v178 + 48);
                          *(_QWORD *)&__p = v181;
                          *((_QWORD *)&__p + 1) = v180;
                          if (v180)
                          {
                            v182 = (unint64_t *)&v180->__shared_owners_;
                            do
                              v183 = __ldxr(v182);
                            while (__stxr(v183 + 1, v182));
                          }
                          std::mutex::unlock(v179);
                        }
                        else
                        {
                          v181 = *(_QWORD *)(v178 + 40);
                          v180 = *(std::__shared_weak_count **)(v178 + 48);
                          *(_QWORD *)&__p = v181;
                          *((_QWORD *)&__p + 1) = v180;
                          if (v180)
                          {
                            v184 = (unint64_t *)&v180->__shared_owners_;
                            do
                              v185 = __ldxr(v184);
                            while (__stxr(v185 + 1, v184));
                          }
                        }
                        v186 = *(_BYTE *)(v112 + 55);
                        if (v186 >= 0)
                          v187 = (char *)(v112 + 32);
                        else
                          v187 = *(char **)(v112 + 32);
                        if (v186 >= 0)
                          v188 = *(unsigned __int8 *)(v112 + 55);
                        else
                          v188 = *(_QWORD *)(v112 + 40);
                        sub_20B21BE70(v181, v187, v188, 1);
                        if (v180)
                        {
                          v189 = (unint64_t *)&v180->__shared_owners_;
                          do
                            v190 = __ldaxr(v189);
                          while (__stlxr(v190 - 1, v189));
                          if (!v190)
                          {
                            ((void (*)(std::__shared_weak_count *))v180->__on_zero_shared)(v180);
                            std::__shared_weak_count::__release_weak(v180);
                          }
                        }
                        if (v133)
                          std::__shared_weak_count::__release_weak(v133);
                        goto LABEL_395;
                      }
                      v146 = v133;
                      v147 = *(std::__shared_weak_count **)(a1 + 32);
                      if (v147)
                      {
LABEL_317:
                        v148 = *(_QWORD *)(a1 + 24);
                        v149 = (unint64_t *)&v147->__shared_weak_owners_;
                        do
                          v150 = __ldxr(v149);
                        while (__stxr(v150 + 1, v149));
                        v151 = std::__shared_weak_count::lock(v147);
                        v133 = v151;
                        if (v151)
                        {
                          if (v148)
                            v134 = v148 + 8;
                          else
                            v134 = 0;
                          v152 = (unint64_t *)&v151->__shared_weak_owners_;
                          do
                            v153 = __ldxr(v152);
                          while (__stxr(v153 + 1, v152));
                          std::__shared_weak_count::__release_weak(v147);
                          v154 = (unint64_t *)&v133->__shared_owners_;
                          do
                            v155 = __ldaxr(v154);
                          while (__stlxr(v155 - 1, v154));
                          if (!v155)
                          {
                            ((void (*)(std::__shared_weak_count *))v133->__on_zero_shared)(v133);
                            v147 = v133;
                            goto LABEL_332;
                          }
                        }
                        else
                        {
                          v134 = 0;
LABEL_332:
                          std::__shared_weak_count::__release_weak(v147);
                        }
LABEL_333:
                        if (v146)
                          goto LABEL_334;
                        goto LABEL_338;
                      }
                    }
                    else
                    {
                      v138 = (std::__shared_weak_count *)v130[1];
                      if (v138)
                      {
                        v139 = std::__shared_weak_count::lock(v138);
                        if (v139)
                        {
                          v133 = v139;
                          v134 = *v130;
                          goto LABEL_306;
                        }
                      }
                      v146 = 0;
                      v147 = *(std::__shared_weak_count **)(a1 + 32);
                      if (v147)
                        goto LABEL_317;
                    }
                    v134 = 0;
                    v133 = 0;
                    goto LABEL_333;
                  }
LABEL_208:
                  if (v98)
                    goto LABEL_209;
LABEL_266:
                  v19 = v337;
                  if ((unint64_t)v337 < v338)
                  {
                    *(_QWORD *)v337 = &off_24C411E78;
                    *((_QWORD *)v19 + 1) = *(_QWORD *)(v6 + 8);
                    v135 = *(_QWORD *)(v6 + 16);
                    *((_QWORD *)v19 + 2) = v135;
                    if (v135)
                    {
                      v136 = (unint64_t *)(v135 + 8);
                      do
                        v137 = __ldxr(v136);
                      while (__stxr(v137 + 1, v136));
                    }
                    goto LABEL_35;
                  }
                  goto LABEL_3;
                }
LABEL_206:
                v98 = DWORD2(v340) == 4;
              }
              if (v99 < 0)
                goto LABEL_265;
              goto LABEL_208;
            }
LABEL_147:
            v72 = DWORD2(v340) == 3;
          }
          if (v73 < 0)
            goto LABEL_190;
          goto LABEL_149;
        }
LABEL_104:
        v50 = DWORD2(v340) == 5;
      }
      if (v51 < 0)
        goto LABEL_131;
      goto LABEL_106;
    }
    if (!BYTE7(v340))
      goto LABEL_38;
    v16 = &__s1;
    v17 = &__p;
    v18 = BYTE7(v340);
    while (*(unsigned __int8 *)v16 == *(unsigned __int8 *)v17)
    {
      v16 = (__int128 *)((char *)v16 + 1);
      v17 = (__int128 *)((char *)v17 + 1);
      if (!--v18)
        goto LABEL_38;
    }
    v13 = 0;
    if ((BYTE7(v340) & 0x80) == 0)
    {
LABEL_40:
      if (!v13)
        goto LABEL_89;
      goto LABEL_41;
    }
LABEL_88:
    operator delete((void *)__s1);
    if (!v13)
      goto LABEL_89;
LABEL_41:
    v23 = *(const void **)(v6 + 8);
    v24 = *(std::__shared_weak_count **)(v6 + 16);
    if (v24)
    {
      v25 = (unint64_t *)&v24->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
    }
    if (v23)
    {
      v27 = __dynamic_cast(v23, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D490, 0) != 0;
      if (!v24)
        goto LABEL_51;
    }
    else
    {
      v27 = 0;
      if (!v24)
        goto LABEL_51;
    }
    v28 = (unint64_t *)&v24->__shared_owners_;
    do
      v29 = __ldaxr(v28);
    while (__stlxr(v29 - 1, v28));
    if (v29)
    {
LABEL_51:
      if (!v27)
        goto LABEL_60;
      goto LABEL_52;
    }
    ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
    std::__shared_weak_count::__release_weak(v24);
    if (!v27)
    {
LABEL_60:
      v31 = 0;
      v30 = 0;
      __s1 = 0uLL;
      if (!MEMORY[0x38])
        goto LABEL_61;
      goto LABEL_56;
    }
LABEL_52:
    v30 = *(_QWORD *)(v6 + 8);
    v31 = *(std::__shared_weak_count **)(v6 + 16);
    if (v31)
    {
      v32 = (unint64_t *)&v31->__shared_owners_;
      do
        v33 = __ldxr(v32);
      while (__stxr(v33 + 1, v32));
    }
    *(_QWORD *)&__s1 = v30;
    *((_QWORD *)&__s1 + 1) = v31;
    if (!*(_BYTE *)(v30 + 56))
    {
LABEL_61:
      if (*(_BYTE *)(a1 + 440))
      {
        v37 = *(_QWORD *)(a1 + 424);
        v36 = *(std::__shared_weak_count **)(a1 + 432);
        *(_QWORD *)&__p = v37;
        *((_QWORD *)&__p + 1) = v36;
        if (v36)
        {
          v38 = (unint64_t *)&v36->__shared_owners_;
          do
            v39 = __ldxr(v38);
          while (__stxr(v39 + 1, v38));
        }
        std::mutex::lock((std::mutex *)(v37 + 8));
        ++*(_QWORD *)v37;
        std::condition_variable::notify_all((std::condition_variable *)(v37 + 72));
        std::mutex::unlock((std::mutex *)(v37 + 8));
        if (v36)
        {
          v40 = (unint64_t *)&v36->__shared_owners_;
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
      }
      v35 = 0;
      v34 = 1;
      if (v31)
        goto LABEL_75;
      goto LABEL_79;
    }
LABEL_56:
    if (*(_DWORD *)(v30 + 48))
    {
      v34 = 1;
      v35 = 1;
      if (!v31)
        goto LABEL_79;
LABEL_75:
      v44 = (unint64_t *)&v31->__shared_owners_;
      do
        v45 = __ldaxr(v44);
      while (__stlxr(v45 - 1, v44));
      if (!v45)
      {
        ((void (*)(std::__shared_weak_count *))v31->__on_zero_shared)(v31);
        std::__shared_weak_count::__release_weak(v31);
      }
      goto LABEL_79;
    }
    if (*(_BYTE *)(a1 + 1104))
    {
      v43 = *(_OWORD *)(v30 + 8);
      v42 = v30 + 8;
      __p = v43;
      v314 = *(_OWORD *)(v42 + 16);
      v315 = *(_QWORD *)(v42 + 32);
      sub_20B213F88(v299, &__p);
    }
    v34 = 0;
    v35 = 0;
    if (v31)
      goto LABEL_75;
LABEL_79:
    if ((v35 & 1) != 0)
      break;
    v5 = v303;
    if (!v34)
      goto LABEL_5;
    v19 = v337;
    if ((unint64_t)v337 < v338)
    {
      *(_QWORD *)v337 = &off_24C411E78;
      *((_QWORD *)v19 + 1) = *(_QWORD *)(v6 + 8);
      v46 = *(_QWORD *)(v6 + 16);
      *((_QWORD *)v19 + 2) = v46;
      if (v46)
      {
        v47 = (unint64_t *)(v46 + 8);
        do
          v48 = __ldxr(v47);
        while (__stxr(v48 + 1, v47));
      }
LABEL_35:
      v7 = v19 + 24;
      goto LABEL_4;
    }
LABEL_3:
    v7 = sub_20B0BD07C((char **)&v336, *(_QWORD *)(v6 + 8), *(_QWORD *)(v6 + 16));
LABEL_4:
    v337 = v7;
LABEL_5:
    v6 += 24;
    if (v6 == v5)
      goto LABEL_600;
  }
  sub_20AF55B94((uint64_t)v327, "Client received invalid sync command from server.");
  v335 = 1;
  sub_20B0B4C58(8u, (__int128 *)v327, (uint64_t)&__p);
  *(_OWORD *)a3 = __p;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v323)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v293 = v316;
    if (v316)
    {
      *(_OWORD *)(a3 + 16) = v314;
      *(_QWORD *)(a3 + 32) = v315;
      v315 = 0;
      v314 = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v322)
    {
      v294 = v319;
      *(_QWORD *)(a3 + 64) = v318;
      *(_OWORD *)(a3 + 48) = v317;
      v317 = 0uLL;
      *(_QWORD *)(a3 + 72) = v294;
      *(_OWORD *)(a3 + 80) = v320;
      *(_QWORD *)(a3 + 96) = v321;
      v318 = 0;
      v320 = 0uLL;
      v321 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    *(_BYTE *)(a3 + 120) = 0;
    if (v293 && SHIBYTE(v315) < 0)
      operator delete((void *)v314);
  }
  else
  {
    *(_BYTE *)(a3 + 120) = 0;
  }
  if (v335)
  {
    if (v334)
    {
      if (v333 < 0)
        operator delete(v332);
      if (v331 < 0)
        operator delete(v330);
    }
    if (v329 && v328 < 0)
      operator delete(v327[0]);
  }
LABEL_604:
  v287 = (char *)v336;
  if (v336)
  {
    v288 = v337;
    v289 = v336;
    if (v337 != v336)
    {
      do
      {
        v290 = (std::__shared_weak_count *)*((_QWORD *)v288 - 1);
        if (v290)
        {
          v291 = (unint64_t *)&v290->__shared_owners_;
          do
            v292 = __ldaxr(v291);
          while (__stlxr(v292 - 1, v291));
          if (!v292)
          {
            ((void (*)(std::__shared_weak_count *))v290->__on_zero_shared)(v290);
            std::__shared_weak_count::__release_weak(v290);
          }
        }
        v288 -= 24;
      }
      while (v288 != v287);
      v289 = v336;
    }
    v337 = v287;
    operator delete(v289);
  }
}

void sub_20B0B8B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  void *a69;
  char a72;
  std::__shared_weak_count *v72;
  std::__shared_weak_count *v73;
  uint64_t v74;
  void *v76;

  if (a41 && a40 < 0)
    operator delete(__p);
  if (v72)
    std::__shared_weak_count::__release_weak(v72);
  sub_20AEC147C((uint64_t)&a72);
  std::__shared_weak_count::~__shared_weak_count(v73);
  operator delete(v76);
  sub_20AEC147C(v74 - 152);
  if (v72)
  {
    std::__shared_weak_count::__release_weak(v72);
    sub_20AEC147C((uint64_t)&a54);
    sub_20B0B8EC0(&a69);
    _Unwind_Resume(a1);
  }
  sub_20AEC147C((uint64_t)&a54);
  sub_20B0B8EC0(&a69);
  _Unwind_Resume(a1);
}

void **sub_20B0B8EC0(void **a1)
{
  char *v2;
  char *v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = (char *)*a1;
  if (*a1)
  {
    v3 = (char *)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = (std::__shared_weak_count *)*((_QWORD *)v3 - 1);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20B0B8F58(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr))(*(_QWORD *)a1 + 32))(v3);
  if (v12 || !v11)
    return a1 + 8;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1 + 8;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1 + 8;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1 + 8;
  operator delete(v3[2]);
  return a1 + 8;
}

uint64_t sub_20B0B9008(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)(a1 - 8) + 32))(v3, a1 - 8);
  if (v12 || !v11)
    return a1;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1;
  operator delete(v3[2]);
  return a1;
}

void sub_20B0B90B8(uint64_t a1, uint64_t a2)
{
  uint64_t *v3;
  std::mutex *v4;
  std::__shared_weak_count *v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  std::__shared_weak_count *v11;
  int v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  std::__shared_weak_count *v20;
  std::__shared_weak_count *v21;
  uint64_t v22;
  unint64_t *v23;
  unint64_t v24;
  std::mutex *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unint64_t *p_shared_weak_owners;
  unint64_t v36;
  std::__shared_weak_count *v37;
  std::__shared_weak_count *v38;
  uint64_t v39;
  unint64_t *v40;
  unint64_t v41;
  std::__shared_weak_count *v42;
  unint64_t *v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::__shared_weak_count *v47;
  unint64_t *v48;
  unint64_t v49;
  std::__shared_weak_count *v50;
  unint64_t *v51;
  unint64_t v52;
  std::__shared_weak_count *v53;
  unint64_t *v54;
  unint64_t v55;
  unint64_t *v56;
  std::__shared_weak_count *v57;
  unint64_t *v58;
  unint64_t v59;
  uint64_t v60;
  std::__shared_weak_count *v61;
  __int128 v62;
  __int128 v63;
  char v64;
  char v65;
  void *v66;
  char v67;
  void *v68;
  char v69;
  char v70;
  char v71;
  __int128 v72;
  void *v73;
  char v74;
  char v75;
  void *v76;
  char v77;
  void *__p;
  char v79;
  char v80;
  char v81;
  uint64_t v82;
  std::__shared_weak_count *v83;
  uint64_t v84;
  std::__shared_weak_count *v85;

  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 24))(&v82, a2);
  if (!v82)
    goto LABEL_111;
  v3 = *(uint64_t **)(a1 + 1120);
  v4 = (std::mutex *)v3[4];
  if (v4)
  {
    std::mutex::lock((std::mutex *)v3[4]);
    v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        v7 = *v3;
        std::mutex::unlock(v4);
        if (v7)
          goto LABEL_6;
      }
      else
      {
        std::mutex::unlock(v4);
      }
    }
    else
    {
      v6 = 0;
      std::mutex::unlock(v4);
    }
    goto LABEL_14;
  }
  v10 = (std::__shared_weak_count *)v3[1];
  if (v10)
  {
    v11 = std::__shared_weak_count::lock(v10);
    if (v11)
    {
      v6 = v11;
      if (*v3)
      {
LABEL_6:
        p_shared_owners = (unint64_t *)&v6->__shared_owners_;
        do
          v9 = __ldaxr(p_shared_owners);
        while (__stlxr(v9 - 1, p_shared_owners));
        goto LABEL_109;
      }
LABEL_14:
      v12 = *(unsigned __int8 *)(a1 + 1112);
      if (v6)
      {
        v13 = (unint64_t *)&v6->__shared_owners_;
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
      if (v12)
        goto LABEL_111;
      goto LABEL_22;
    }
  }
  if (*(_BYTE *)(a1 + 1112))
    goto LABEL_111;
LABEL_22:
  sub_20B1E3A00((unsigned __int8 *)(a1 + 1128), (uint64_t)&v62);
  v72 = v62;
  sub_20AECEBD0(&v73, &v63);
  if (*(_BYTE *)(a1 + 112))
  {
    v15 = *(_QWORD *)(a1 + 104);
    if (!v15)
      sub_20AECABA4();
    (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)v15 + 48))(v15, &v72);
  }
  if (v81)
  {
    if (v80)
    {
      if (v79 < 0)
        operator delete(__p);
      if (v77 < 0)
        operator delete(v76);
    }
    if (v75 && v74 < 0)
      operator delete(v73);
  }
  if (v71)
  {
    if (v70)
    {
      if (v69 < 0)
        operator delete(v68);
      if (v67 < 0)
        operator delete(v66);
    }
    if (v65 && v64 < 0)
      operator delete((void *)v63);
  }
  v16 = *(uint64_t **)(a1 + 1120);
  v6 = v83;
  v60 = v82;
  v61 = v83;
  if (v83)
  {
    v17 = (unint64_t *)&v83->__shared_owners_;
    do
      v18 = __ldxr(v17);
    while (__stxr(v18 + 1, v17));
  }
  v19 = (std::__shared_weak_count *)v16[1];
  if (v19)
  {
    v20 = std::__shared_weak_count::lock(v19);
    if (v20)
    {
      v21 = v20;
      v22 = *v16;
      v23 = (unint64_t *)&v20->__shared_owners_;
      do
        v24 = __ldaxr(v23);
      while (__stlxr(v24 - 1, v23));
      if (!v24)
      {
        ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
        std::__shared_weak_count::__release_weak(v21);
      }
      if (v22
        && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/Client.cpp", 66, (uint64_t)"!controlled_visuallogger.lock()", 31, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_117;
      }
    }
  }
  if (!v16[2]
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/Client.cpp", 67, (uint64_t)"owned_contexts", 14, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    goto LABEL_117;
  }
  v25 = (std::mutex *)v16[4];
  if (v25)
    goto LABEL_59;
  if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/Client.cpp", 68, (uint64_t)"mutex", 5, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
LABEL_117:
    abort();
  }
  v25 = (std::mutex *)v16[4];
LABEL_59:
  std::mutex::lock(v25);
  v27 = v16[5];
  v26 = v16[6];
  *(_QWORD *)&v62 = v27;
  *((_QWORD *)&v62 + 1) = v26;
  if (v26)
  {
    v28 = (unint64_t *)(v26 + 8);
    do
      v29 = __ldxr(v28);
    while (__stxr(v29 + 1, v28));
    v30 = v16[5];
  }
  else
  {
    v30 = v27;
  }
  sub_20B21C3DC(v30, (uint64_t)&v72);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v60 + 80))(&v84, v60);
  if (v84 != v27)
  {
    v31 = v16[5];
    v32 = *(_QWORD **)(v31 + 8);
    if (!v32)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_118;
      }
      v32 = *(_QWORD **)(v31 + 8);
    }
    sub_20B21A9F0(v32, a1 + 16);
    v33 = v84;
    v34 = *(_QWORD *)(v84 + 8);
    if (!v34)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        goto LABEL_118;
      }
      v34 = *(_QWORD *)(v33 + 8);
    }
    sub_20B21AB14(v34, &v72);
  }
  if (v61)
  {
    p_shared_weak_owners = (unint64_t *)&v61->__shared_weak_owners_;
    do
      v36 = __ldxr(p_shared_weak_owners);
    while (__stxr(v36 + 1, p_shared_weak_owners));
  }
  v37 = (std::__shared_weak_count *)v16[1];
  *v16 = v60;
  v16[1] = (uint64_t)v61;
  if (v37)
    std::__shared_weak_count::__release_weak(v37);
  v39 = v84;
  v38 = v85;
  if (v85)
  {
    v40 = (unint64_t *)&v85->__shared_owners_;
    do
      v41 = __ldxr(v40);
    while (__stxr(v41 + 1, v40));
  }
  v42 = (std::__shared_weak_count *)v16[6];
  v16[5] = v39;
  v16[6] = (uint64_t)v38;
  if (v42)
  {
    v43 = (unint64_t *)&v42->__shared_owners_;
    do
      v44 = __ldaxr(v43);
    while (__stlxr(v44 - 1, v43));
    if (!v44)
    {
      ((void (*)(std::__shared_weak_count *))v42->__on_zero_shared)(v42);
      std::__shared_weak_count::__release_weak(v42);
    }
  }
  if (v84 != (_QWORD)v62)
  {
    v45 = v16[5];
    v46 = *(_QWORD *)(v45 + 8);
    if (v46)
    {
LABEL_90:
      sub_20B21A6A0(v46, a1 + 16);
      goto LABEL_91;
    }
    if (!sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/NamedContext.cpp", 747, (uint64_t)"p_", 2, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      v46 = *(_QWORD *)(v45 + 8);
      goto LABEL_90;
    }
LABEL_118:
    abort();
  }
LABEL_91:
  v47 = (std::__shared_weak_count *)v16[3];
  v16[2] = 0;
  v16[3] = 0;
  if (v47)
  {
    v48 = (unint64_t *)&v47->__shared_owners_;
    do
      v49 = __ldaxr(v48);
    while (__stlxr(v49 - 1, v48));
    if (!v49)
    {
      ((void (*)(std::__shared_weak_count *))v47->__on_zero_shared)(v47);
      std::__shared_weak_count::__release_weak(v47);
    }
  }
  v50 = v85;
  if (v85)
  {
    v51 = (unint64_t *)&v85->__shared_owners_;
    do
      v52 = __ldaxr(v51);
    while (__stlxr(v52 - 1, v51));
    if (!v52)
    {
      ((void (*)(std::__shared_weak_count *))v50->__on_zero_shared)(v50);
      std::__shared_weak_count::__release_weak(v50);
    }
  }
  sub_20AEC833C((uint64_t)&v72, *((char **)&v72 + 1));
  v53 = (std::__shared_weak_count *)*((_QWORD *)&v62 + 1);
  if (*((_QWORD *)&v62 + 1))
  {
    v54 = (unint64_t *)(*((_QWORD *)&v62 + 1) + 8);
    do
      v55 = __ldaxr(v54);
    while (__stlxr(v55 - 1, v54));
    if (!v55)
    {
      ((void (*)(std::__shared_weak_count *))v53->__on_zero_shared)(v53);
      std::__shared_weak_count::__release_weak(v53);
    }
  }
  std::mutex::unlock(v25);
  if (v6)
  {
    v56 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldaxr(v56);
    while (__stlxr(v9 - 1, v56));
LABEL_109:
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
LABEL_111:
  v57 = v83;
  if (v83)
  {
    v58 = (unint64_t *)&v83->__shared_owners_;
    do
      v59 = __ldaxr(v58);
    while (__stlxr(v59 - 1, v58));
    if (!v59)
    {
      ((void (*)(std::__shared_weak_count *))v57->__on_zero_shared)(v57);
      std::__shared_weak_count::__release_weak(v57);
    }
  }
}

void sub_20B0B9708(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,char *a28)
{
  std::mutex *v28;
  uint64_t v29;

  sub_20AEC833C((uint64_t)&a27, a28);
  sub_20AEC147C((uint64_t)&a12);
  std::mutex::unlock(v28);
  sub_20AEC147C((uint64_t)&a10);
  sub_20AEC147C(v29 - 96);
  _Unwind_Resume(a1);
}

void sub_20B0B97DC(uint64_t a1, uint64_t a2)
{
  sub_20B0B90B8(a1 - 8, a2);
}

BOOL sub_20B0B97EC(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 *v2;
  int v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned __int8 *v10;
  int v12;
  int v13;

  v2 = a2;
  v4 = a2[40];
  if (a1[40])
    v5 = v4 == 0;
  else
    v5 = 1;
  if (v5)
  {
    if (v4 | a1[40])
      return 0;
  }
  else
  {
    v6 = a1[23];
    if ((v6 & 0x80u) == 0)
      v7 = a1[23];
    else
      v7 = *((_QWORD *)a1 + 1);
    v8 = a2[23];
    v9 = (char)v8;
    if ((v8 & 0x80u) != 0)
      v8 = *((_QWORD *)a2 + 1);
    if (v7 != v8)
      return 0;
    if (v9 < 0)
      a2 = *(unsigned __int8 **)a2;
    if ((v6 & 0x80) != 0)
    {
      if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
        return 0;
    }
    else if (a1[23])
    {
      v10 = a1;
      while (*v10 == *a2)
      {
        ++v10;
        ++a2;
        if (!--v6)
          goto LABEL_23;
      }
      return 0;
    }
LABEL_23:
    if (*((unsigned __int16 *)a1 + 12) != *((unsigned __int16 *)v2 + 12) || *((_DWORD *)a1 + 8) != *((_DWORD *)v2 + 8))
      return 0;
  }
  if (a1[48] != v2[48]
    || (a1[50] == 0) == (v2[50] != 0)
    || (a1[64] != 0) != (v2[64] != 0)
    || a1[64] && *((_QWORD *)a1 + 7) != *((_QWORD *)v2 + 7))
  {
    return 0;
  }
  v12 = a1[128];
  v13 = v2[128];
  if (!a1[128] || !v2[128] || (v12 = a1[120], v13 = v2[120], !a1[120]) || !v2[120])
  {
    if ((v12 != 0) == (v13 != 0))
      goto LABEL_40;
    return 0;
  }
  if (*((_QWORD *)a1 + 14) != *((_QWORD *)v2 + 14))
    return 0;
LABEL_40:
  if (a1[104])
    return 0;
  return v2[104] == 0;
}

uint64_t sub_20B0B9994(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  char v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _OWORD v20[7];
  char v21;
  _BYTE v22[24];
  _BYTE *v23;
  char v24;
  _BYTE v25[24];
  _BYTE *v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C40CED0;
  *(_QWORD *)(a1 + 8) = &unk_24C40CF30;
  v25[0] = 0;
  v27 = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    v11 = *(_QWORD *)(a3 + 24);
    if (v11)
    {
      if (v11 == a3)
      {
        v26 = v25;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a3 + 24))(a3, v25);
      }
      else
      {
        v26 = *(_BYTE **)(a3 + 24);
        *(_QWORD *)(a3 + 24) = 0;
      }
    }
    else
    {
      v26 = 0;
    }
    v27 = 1;
  }
  v22[0] = 0;
  v24 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v12 = *(_QWORD *)(a4 + 24);
    if (v12)
    {
      if (v12 == a4)
      {
        v23 = v22;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v22);
      }
      else
      {
        v23 = *(_BYTE **)(a4 + 24);
        *(_QWORD *)(a4 + 24) = 0;
      }
    }
    else
    {
      v23 = 0;
    }
    v24 = 1;
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v13 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8);
    v14 = 1;
  }
  else
  {
    v14 = 0;
    v13 = 0;
  }
  sub_20B0B2EAC((uint64_t)v20, a2, (uint64_t)v25, (uint64_t)v22, v13, v14, a5, a6, 0);
  if (!v21)
  {
    sub_20B0B52D8((uint64_t)v20);
    sub_20B0BFB50((uint64_t)v20);
  }
  *(_OWORD *)(a1 + 16) = v20[0];
  v20[0] = 0uLL;
  if (v24)
  {
    v15 = v23;
    if (v23 == v22)
    {
      v16 = 4;
      v15 = v22;
    }
    else
    {
      if (!v23)
        goto LABEL_25;
      v16 = 5;
    }
    (*(void (**)(void))(*v15 + 8 * v16))();
  }
LABEL_25:
  if (v27)
  {
    v17 = v26;
    if (v26 == v25)
    {
      v18 = 4;
      v17 = v25;
      goto LABEL_30;
    }
    if (v26)
    {
      v18 = 5;
LABEL_30:
      (*(void (**)(void))(*v17 + 8 * v18))();
    }
  }
  return a1;
}

void sub_20B0B9BB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0B9C50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  char v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _OWORD v16[7];
  char v17;
  _BYTE v18[24];
  _BYTE *v19;
  char v20;
  _BYTE v21[24];
  _BYTE *v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)a1 = &off_24C40CED0;
  *(_QWORD *)(a1 + 8) = &unk_24C40CF30;
  v21[0] = 0;
  v23 = 0;
  if (*(_BYTE *)(a3 + 32))
  {
    v7 = *(_QWORD *)(a3 + 24);
    if (v7)
    {
      if (v7 == a3)
      {
        v22 = v21;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a3 + 24))(a3, v21);
      }
      else
      {
        v22 = *(_BYTE **)(a3 + 24);
        *(_QWORD *)(a3 + 24) = 0;
      }
    }
    else
    {
      v22 = 0;
    }
    v23 = 1;
  }
  v18[0] = 0;
  v20 = 0;
  if (*(_BYTE *)(a4 + 32))
  {
    v8 = *(_QWORD *)(a4 + 24);
    if (v8)
    {
      if (v8 == a4)
      {
        v19 = v18;
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)a4 + 24))(a4, v18);
      }
      else
      {
        v19 = *(_BYTE **)(a4 + 24);
        *(_QWORD *)(a4 + 24) = 0;
      }
    }
    else
    {
      v19 = 0;
    }
    v20 = 1;
  }
  if (*(_BYTE *)(a2 + 64))
  {
    v9 = *(_QWORD **)(*(_QWORD *)(a2 + 56) + 8);
    v10 = 1;
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  sub_20B0B2EAC((uint64_t)v16, a2, (uint64_t)v21, (uint64_t)v18, v9, v10, 0, 0, 1);
  if (!v17)
  {
    sub_20B0B52D8((uint64_t)v16);
    sub_20B0BFB50((uint64_t)v16);
  }
  *(_OWORD *)(a1 + 16) = v16[0];
  v16[0] = 0uLL;
  if (v20)
  {
    v11 = v19;
    if (v19 == v18)
    {
      v12 = 4;
      v11 = v18;
    }
    else
    {
      if (!v19)
        goto LABEL_25;
      v12 = 5;
    }
    (*(void (**)(void))(*v11 + 8 * v12))();
  }
LABEL_25:
  if (v23)
  {
    v13 = v22;
    if (v22 == v21)
    {
      v14 = 4;
      v13 = v21;
      goto LABEL_30;
    }
    if (v22)
    {
      v14 = 5;
LABEL_30:
      (*(void (**)(void))(*v13 + 8 * v14))();
    }
  }
  return a1;
}

void sub_20B0B9E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0B9F00(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_24C40CED0;
  a1[1] = &unk_24C40CF30;
  v2 = (std::__shared_weak_count *)a1[3];
  a1[2] = 0;
  a1[3] = 0;
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
  }
  v5 = (std::__shared_weak_count *)a1[3];
  if (!v5)
    return a1;
  v6 = (unint64_t *)&v5->__shared_owners_;
  do
    v7 = __ldaxr(v6);
  while (__stlxr(v7 - 1, v6));
  if (v7)
    return a1;
  ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
  std::__shared_weak_count::__release_weak(v5);
  return a1;
}

void sub_20B0B9FB4(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(a1 - 1) = &off_24C40CED0;
  v1 = (std::__shared_weak_count *)a1[2];
  *a1 = &unk_24C40CF30;
  a1[1] = 0;
  a1[2] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v5 = (std::__shared_weak_count *)a1[2];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
}

void sub_20B0BA064(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *a1 = &off_24C40CED0;
  a1[1] = &unk_24C40CF30;
  v2 = (std::__shared_weak_count *)a1[3];
  a1[2] = 0;
  a1[3] = 0;
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
    v5 = (std::__shared_weak_count *)a1[3];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0BA118(_QWORD *a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *v6;
  unint64_t v7;

  *(a1 - 1) = &off_24C40CED0;
  v1 = (std::__shared_weak_count *)a1[2];
  *a1 = &unk_24C40CF30;
  a1[1] = 0;
  a1[2] = 0;
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
    v5 = (std::__shared_weak_count *)a1[2];
    if (v5)
    {
      v6 = (unint64_t *)&v5->__shared_owners_;
      do
        v7 = __ldaxr(v6);
      while (__stlxr(v7 - 1, v6));
      if (!v7)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0BA1DC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 16) + 8;
}

uint64_t sub_20B0BA1E8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B0BA1F8(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B0BA208(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 40))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B0BA218(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16));
}

uint64_t sub_20B0BA228(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 16) + 32))(v3);
  if (v12 || !v11)
    return a1 + 8;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1 + 8;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1 + 8;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1 + 8;
  operator delete(v3[2]);
  return a1 + 8;
}

uint64_t sub_20B0BA2DC(uint64_t a1)
{
  void *v3[4];
  char v4;
  char v5;
  void *v6;
  char v7;
  void *v8;
  char v9;
  char v10;
  char v11;
  char v12;

  (*(void (**)(void **__return_ptr))(**(_QWORD **)(a1 + 8) + 32))(v3);
  if (v12 || !v11)
    return a1;
  if (v10)
  {
    if ((v9 & 0x80000000) == 0)
    {
      if ((v7 & 0x80000000) == 0)
        goto LABEL_7;
LABEL_11:
      operator delete(v6);
      if (!v5)
        return a1;
      goto LABEL_8;
    }
    operator delete(v8);
    if (v7 < 0)
      goto LABEL_11;
  }
LABEL_7:
  if (!v5)
    return a1;
LABEL_8:
  if ((v4 & 0x80000000) == 0)
    return a1;
  operator delete(v3[2]);
  return a1;
}

void sub_20B0BA390(uint64_t a1, uint64_t a2)
{
  sub_20B0B90B8(*(_QWORD *)(a1 + 16), a2);
}

void sub_20B0BA398(uint64_t a1, uint64_t a2)
{
  sub_20B0B90B8(*(_QWORD *)(a1 + 8), a2);
}

_QWORD *sub_20B0BA3A8(_QWORD *a1, uint64_t a2)
{
  _QWORD *v3;
  void **v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  _BYTE *v8;
  unsigned __int8 *v9;
  _QWORD *v10;
  _QWORD *v11;
  const char *v12;
  uint64_t v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v17;
  void *__p[2];
  unsigned __int8 v19;
  char v20;
  char *v21;
  _BYTE v22[24];
  int v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v3 = sub_20AEC01D0(a1, (uint64_t)"Client<", 7);
  v17 = a2;
  v23 = 0;
  sub_20AED5838((uint64_t)&v21, (uint64_t)v22, &v17);
  if (v23 == -1)
    sub_20AECFAB8();
  v21 = &v20;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40D130[v23])(__p, &v21, v22);
  if (v23 != -1)
    ((void (*)(char **, _BYTE *))off_24C40D0E8[v23])(&v21, v22);
  if ((v19 & 0x80u) == 0)
    v4 = __p;
  else
    v4 = (void **)__p[0];
  if ((v19 & 0x80u) == 0)
    v5 = v19;
  else
    v5 = (uint64_t)__p[1];
  v6 = sub_20AEC01D0(v3, (uint64_t)v4, v5);
  v7 = sub_20AEC01D0(v6, (uint64_t)">{", 2);
  v8 = *(_BYTE **)(a2 + 16);
  v9 = (unsigned __int8 *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)v8 + 24))(v8);
  sub_20B5211A0(v9, v22);
  v10 = sub_20AEC01D0(v7, (uint64_t)v22, 36);
  v11 = sub_20AEC01D0(v10, (uint64_t)", tcp/ip ", 9);
  if (v8[144])
    v12 = "enabled";
  else
    v12 = "disabled";
  if (v8[144])
    v13 = 7;
  else
    v13 = 8;
  v14 = sub_20AEC01D0(v11, (uint64_t)v12, v13);
  v15 = sub_20AEC01D0(v14, (uint64_t)"}", 1);
  if ((char)v19 < 0)
    operator delete(__p[0]);
  return v15;
}

void sub_20B0BA544(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2)
    sub_20AEC01C0(exception_object);
  _Unwind_Resume(exception_object);
}

void sub_20B0BA598(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  std::mutex *v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;

  v2 = (std::__shared_weak_count *)a1[6];
  if (!v2)
    goto LABEL_5;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (!v4)
  {
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    v5 = (std::mutex *)a1[4];
    a1[4] = 0;
    if (!v5)
      goto LABEL_7;
  }
  else
  {
LABEL_5:
    v5 = (std::mutex *)a1[4];
    a1[4] = 0;
    if (!v5)
    {
LABEL_7:
      v6 = (std::__shared_weak_count *)a1[3];
      if (!v6)
        goto LABEL_11;
      v7 = (unint64_t *)&v6->__shared_owners_;
      do
        v8 = __ldaxr(v7);
      while (__stlxr(v8 - 1, v7));
      if (!v8)
      {
        ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
        std::__shared_weak_count::__release_weak(v6);
        v9 = (std::__shared_weak_count *)a1[1];
        if (!v9)
          goto LABEL_17;
      }
      else
      {
LABEL_11:
        v9 = (std::__shared_weak_count *)a1[1];
        if (!v9)
          goto LABEL_17;
      }
      std::__shared_weak_count::__release_weak(v9);
LABEL_17:
      JUMPOUT(0x20BD3583CLL);
    }
  }
  std::mutex::~mutex(v5);
  MEMORY[0x20BD3583C]();
  goto LABEL_7;
}

void sub_20B0BA688()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0BA69C(uint64_t a1)
{
  uint64_t **v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19[2];
  _QWORD v20[3];
  _QWORD *v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x24BDAC8D0];
  v1 = *(uint64_t ***)(a1 + 8);
  v2 = (uint64_t)v1[1];
  v3 = *(_DWORD *)(v2 + 32);
  v15 = *(_OWORD *)(v2 + 112);
  v16 = *(_QWORD *)(v2 + 128);
  v4 = **v1;
  v20[0] = &off_24C40D028;
  v20[1] = v4;
  v21 = v20;
  v22 = 1;
  v19[0] = 0;
  v19[1] = 0;
  *(_QWORD *)&v18 = v4;
  *((_QWORD *)&v18 + 1) = 1;
  v17 = v3;
  v5 = operator new(0x110uLL);
  v5[1] = 0;
  v5[2] = 0;
  *v5 = &off_24C413080;
  v6 = v5 + 3;
  sub_20B22E0FC((uint64_t)(v5 + 3), &v17, v2, v19, &v15, &v18, (uint64_t)v20);
  v9 = **v1;
  if (*(_BYTE *)(v9 + 144))
  {
    v10 = *(std::__shared_weak_count **)(v9 + 136);
    *(_QWORD *)(v9 + 128) = v6;
    *(_QWORD *)(v9 + 136) = v5;
    if (v10)
    {
      p_shared_owners = (unint64_t *)&v10->__shared_owners_;
      do
        v12 = __ldaxr(p_shared_owners);
      while (__stlxr(v12 - 1, p_shared_owners));
      if (!v12)
      {
        ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
        std::__shared_weak_count::__release_weak(v10);
      }
    }
  }
  else
  {
    *(_QWORD *)(v9 + 120) = &off_24C413140;
    *(_QWORD *)(v9 + 128) = v6;
    *(_QWORD *)(v9 + 136) = v5;
    *(_BYTE *)(v9 + 144) = 1;
  }
  if (v22)
  {
    v13 = v21;
    if (v21 == v20)
    {
      v14 = 4;
      v13 = v20;
    }
    else
    {
      if (!v21)
        return;
      v14 = 5;
    }
    (*(void (**)(_QWORD *, uint64_t, uint64_t))(*v13 + 8 * v14))(v13, v7, v8);
  }
}

void sub_20B0BA81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, char *a20,char a21)
{
  std::__shared_weak_count *v21;
  void *v23;
  char *v24;
  uint64_t v25;

  std::__shared_weak_count::~__shared_weak_count(v21);
  operator delete(v23);
  if (a21)
  {
    v24 = a20;
    if (a20 == &a17)
    {
      v25 = 4;
      v24 = &a17;
    }
    else
    {
      if (!a20)
        goto LABEL_7;
      v25 = 5;
    }
    (*(void (**)(void))(*(_QWORD *)v24 + 8 * v25))();
  }
LABEL_7:
  _Unwind_Resume(a1);
}

void sub_20B0BA878()
{
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B0BA88C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C40D028;
  result[1] = v3;
  return result;
}

uint64_t sub_20B0BA8C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C40D028;
  a2[1] = v2;
  return result;
}

void sub_20B0BA8DC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void *v3;
  char v4;
  char v5;
  void *v6;
  char v7;
  void *__p;
  char v9;
  char v10;
  char v11;
  char v12;

  sub_20B0B6AF4(*(_QWORD *)(a1 + 8), a2, (uint64_t)&v2);
  if (!v12 && v11)
  {
    if (!v10)
      goto LABEL_7;
    if (v9 < 0)
    {
      operator delete(__p);
      if ((v7 & 0x80000000) == 0)
      {
LABEL_7:
        if (!v5)
          return;
        goto LABEL_8;
      }
    }
    else if ((v7 & 0x80000000) == 0)
    {
      goto LABEL_7;
    }
    operator delete(v6);
    if (!v5)
      return;
LABEL_8:
    if (v4 < 0)
      operator delete(v3);
  }
}

uint64_t sub_20B0BA96C(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit3viz6Client4Impl15CommandReceiverE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3kit3viz6Client4Impl15CommandReceiverE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit3viz6Client4Impl15CommandReceiverE"))
    return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit3viz6Client4Impl15CommandReceiverE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B0BA9D8()
{
  return &unk_24C40D098;
}

uint64_t sub_20B0BA9E4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  __int128 v17;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  v4 = a1 + 24;
  v5 = (__int128 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 48) != *(unsigned __int8 *)(a2 + 48))
  {
    if (!*(_BYTE *)(a1 + 48))
    {
      v10 = *v5;
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)v4 = v10;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_QWORD *)v5 = 0;
      *(_BYTE *)(a1 + 48) = 1;
      v7 = a1 + 56;
      v8 = a2 + 56;
      v9 = *(unsigned __int8 *)(a1 + 200);
      if (v9 == *(unsigned __int8 *)(a2 + 200))
        goto LABEL_12;
LABEL_15:
      if (v9)
      {
        sub_20B0BACE8(v7);
      }
      else
      {
        v11 = *(_OWORD *)v8;
        *(_QWORD *)(v7 + 16) = *(_QWORD *)(v8 + 16);
        *(_OWORD *)v7 = v11;
        *(_QWORD *)(v8 + 8) = 0;
        *(_QWORD *)(v8 + 16) = 0;
        *(_QWORD *)v8 = 0;
        v12 = *(_OWORD *)(a2 + 80);
        *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
        *(_OWORD *)(a1 + 80) = v12;
        *(_QWORD *)(a2 + 88) = 0;
        *(_QWORD *)(a2 + 96) = 0;
        *(_QWORD *)(a2 + 80) = 0;
        v13 = *(_OWORD *)(a2 + 104);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
        *(_OWORD *)(a1 + 104) = v13;
        *(_QWORD *)(a2 + 112) = 0;
        *(_QWORD *)(a2 + 120) = 0;
        *(_QWORD *)(a2 + 104) = 0;
        v14 = *(_OWORD *)(a2 + 128);
        *(_QWORD *)(a1 + 144) = *(_QWORD *)(a2 + 144);
        *(_OWORD *)(a1 + 128) = v14;
        *(_QWORD *)(a2 + 128) = 0;
        *(_QWORD *)(a2 + 136) = 0;
        *(_QWORD *)(a2 + 144) = 0;
        v15 = *(_OWORD *)(a2 + 152);
        *(_QWORD *)(a1 + 168) = *(_QWORD *)(a2 + 168);
        *(_OWORD *)(a1 + 152) = v15;
        *(_QWORD *)(a2 + 152) = 0;
        *(_QWORD *)(a2 + 160) = 0;
        *(_QWORD *)(a2 + 168) = 0;
        v16 = *(_OWORD *)(a2 + 176);
        *(_QWORD *)(a1 + 192) = *(_QWORD *)(a2 + 192);
        *(_OWORD *)(a1 + 176) = v16;
        *(_QWORD *)(a2 + 176) = 0;
        *(_QWORD *)(a2 + 184) = 0;
        *(_QWORD *)(a2 + 192) = 0;
        *(_BYTE *)(a1 + 200) = 1;
      }
      goto LABEL_18;
    }
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)v4);
    *(_BYTE *)(a1 + 48) = 0;
LABEL_11:
    v7 = a1 + 56;
    v8 = a2 + 56;
    v9 = *(unsigned __int8 *)(a1 + 200);
    if (v9 == *(unsigned __int8 *)(a2 + 200))
      goto LABEL_12;
    goto LABEL_15;
  }
  if (!*(_BYTE *)(a1 + 48))
    goto LABEL_11;
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)v4);
  v6 = *v5;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v4 = v6;
  *(_BYTE *)(a2 + 47) = 0;
  *(_BYTE *)(a2 + 24) = 0;
  v7 = a1 + 56;
  v8 = a2 + 56;
  v9 = *(unsigned __int8 *)(a1 + 200);
  if (v9 != *(unsigned __int8 *)(a2 + 200))
    goto LABEL_15;
LABEL_12:
  if (v9)
    sub_20B0BABA8(v7, (__int128 *)v8);
LABEL_18:
  v17 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v17;
  return a1;
}

uint64_t sub_20B0BABA8(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  void **v5;
  __int128 v6;
  void **v7;
  __int128 v8;
  void **v9;
  __int128 v10;
  void **v11;
  __int128 v12;
  void **v13;
  __int128 v14;

  if (*(char *)(a1 + 23) < 0)
    operator delete(*(void **)a1);
  v4 = *a2;
  *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((_BYTE *)a2 + 23) = 0;
  *(_BYTE *)a2 = 0;
  v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0)
    operator delete(*v5);
  v6 = *(__int128 *)((char *)a2 + 24);
  *(_QWORD *)(a1 + 40) = *((_QWORD *)a2 + 5);
  *(_OWORD *)v5 = v6;
  *((_BYTE *)a2 + 47) = 0;
  *((_BYTE *)a2 + 24) = 0;
  v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0)
    operator delete(*v7);
  v8 = a2[3];
  *(_QWORD *)(a1 + 64) = *((_QWORD *)a2 + 8);
  *(_OWORD *)v7 = v8;
  *((_BYTE *)a2 + 71) = 0;
  *((_BYTE *)a2 + 48) = 0;
  v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
    operator delete(*v9);
  v10 = *(__int128 *)((char *)a2 + 72);
  *(_QWORD *)(a1 + 88) = *((_QWORD *)a2 + 11);
  *(_OWORD *)v9 = v10;
  *((_BYTE *)a2 + 95) = 0;
  *((_BYTE *)a2 + 72) = 0;
  v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0)
    operator delete(*v11);
  v12 = a2[6];
  *(_QWORD *)(a1 + 112) = *((_QWORD *)a2 + 14);
  *(_OWORD *)v11 = v12;
  *((_BYTE *)a2 + 119) = 0;
  *((_BYTE *)a2 + 96) = 0;
  v13 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0)
    operator delete(*v13);
  v14 = *(__int128 *)((char *)a2 + 120);
  *(_QWORD *)(a1 + 136) = *((_QWORD *)a2 + 17);
  *(_OWORD *)v13 = v14;
  *((_BYTE *)a2 + 143) = 0;
  *((_BYTE *)a2 + 120) = 0;
  return a1;
}

void sub_20B0BACE8(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 144))
  {
    if (*(char *)(a1 + 143) < 0)
    {
      operator delete(*(void **)(a1 + 120));
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
      {
LABEL_4:
        if ((*(char *)(a1 + 95) & 0x80000000) == 0)
          goto LABEL_5;
        goto LABEL_12;
      }
    }
    else if ((*(char *)(a1 + 119) & 0x80000000) == 0)
    {
      goto LABEL_4;
    }
    operator delete(*(void **)(a1 + 96));
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
    {
LABEL_5:
      if ((*(char *)(a1 + 71) & 0x80000000) == 0)
        goto LABEL_6;
      goto LABEL_13;
    }
LABEL_12:
    operator delete(*(void **)(a1 + 72));
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
    {
LABEL_6:
      if ((*(char *)(a1 + 47) & 0x80000000) == 0)
        goto LABEL_7;
      goto LABEL_14;
    }
LABEL_13:
    operator delete(*(void **)(a1 + 48));
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
    {
LABEL_7:
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      {
LABEL_8:
        *(_BYTE *)(a1 + 144) = 0;
        return;
      }
LABEL_15:
      operator delete(*(void **)a1);
      goto LABEL_8;
    }
LABEL_14:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      goto LABEL_8;
    goto LABEL_15;
  }
}

uint64_t sub_20B0BAD9C(uint64_t a1, uint64_t a2)
{
  int v4;
  __int128 v5;
  __int128 v6;

  *(_OWORD *)a1 = *(_OWORD *)a2;
  v4 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 16) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  *(_BYTE *)(a1 + 56) = 0;
  *(_BYTE *)(a1 + 200) = 0;
  if (*(_BYTE *)(a2 + 200))
  {
    sub_20AF3FE60((char *)(a1 + 56), (__int128 *)(a2 + 56));
    *(_BYTE *)(a1 + 200) = 1;
  }
  v6 = *(_OWORD *)(a2 + 208);
  *(_QWORD *)(a1 + 224) = *(_QWORD *)(a2 + 224);
  *(_OWORD *)(a1 + 208) = v6;
  return a1;
}

void sub_20B0BAE58(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;

  if (*(_BYTE *)(v1 + 48))
  {
    if (*(char *)(v1 + 47) < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0BAE8C(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  __int128 *v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  char v20;

  v4 = atomic_load((unsigned __int8 *)&qword_25463CF58);
  if ((v4 & 1) == 0)
  {
    v10 = a3;
    v9 = a2;
    v8 = __cxa_guard_acquire(&qword_25463CF58);
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC3198, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF58);
      a2 = v9;
      a3 = v10;
    }
  }
  v5 = a2;
  sub_20AECEBD0(__dst, a3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &off_253EC3198;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v20)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v12;
    __dst[1] = 0;
    v12 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v19)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  v6 = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v18;
  __p[1] = 0;
  v18 = 0;
  v15 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v14[0]);
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_13;
LABEL_8:
  if (!v13)
    return a1;
LABEL_14:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

void sub_20B0BB03C()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0BB050(uint64_t a1)
{
  uint64_t *v1;
  __int128 *v2;
  uint64_t v3;
  __int128 v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  uint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  __int128 v23[2];
  int v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  std::__shared_weak_count *v28;
  std::__shared_weak_count *v29;
  std::__shared_weak_count *v30;
  uint64_t (**v31)();
  uint64_t v32;
  std::__shared_weak_count *v33;
  _BYTE v34[16];
  void *v35;
  char v36;
  char v37;
  void *v38;
  char v39;
  void *__p;
  char v41;
  char v42;
  char v43;
  char v44;

  v1 = *(uint64_t **)(a1 + 8);
  v3 = *v1;
  v2 = (__int128 *)v1[1];
  v4 = v2[1];
  v23[0] = *v2;
  v23[1] = v4;
  v24 = 1;
  v25 = 1;
  sub_20B0BB38C(v23, &v26);
  v5 = (std::__shared_weak_count *)operator new(0x50uLL);
  v5->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v5->__shared_owners_;
  v5->__shared_weak_owners_ = 0;
  v5->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C88;
  v5[1].__vftable = 0;
  *(_WORD *)((char *)&v5[1].__shared_weak_owners_ + 7) = 0;
  LOBYTE(v5[3].__vftable) = 0;
  v7 = v27;
  v8 = v28;
  v27 = 0;
  v28 = 0;
  v29 = v5 + 1;
  v30 = v5;
  do
    v9 = __ldxr(p_shared_owners);
  while (__stxr(v9 + 1, p_shared_owners));
  v31 = &off_24C411E78;
  v32 = v7;
  v33 = v8;
  if (v8)
  {
    v10 = (unint64_t *)&v8->__shared_owners_;
    do
      v11 = __ldxr(v10);
    while (__stxr(v11 + 1, v10));
    do
      v12 = __ldaxr(v10);
    while (__stlxr(v12 - 1, v10));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (!v13)
  {
    ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
    std::__shared_weak_count::__release_weak(v5);
  }
  sub_20B21D7E4(*(_QWORD *)(v3 + 128), (uint64_t)&v29);
  v44 = 1;
  v14 = v33;
  if (v33)
  {
    v15 = (unint64_t *)&v33->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
    {
      ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
      std::__shared_weak_count::__release_weak(v14);
    }
  }
  v17 = v30;
  if (v30)
  {
    v18 = (unint64_t *)&v30->__shared_owners_;
    do
      v19 = __ldaxr(v18);
    while (__stlxr(v19 - 1, v18));
    if (!v19)
    {
      ((void (*)(std::__shared_weak_count *))v17->__on_zero_shared)(v17);
      std::__shared_weak_count::__release_weak(v17);
    }
  }
  v20 = v28;
  if (!v28)
    goto LABEL_26;
  v21 = (unint64_t *)&v28->__shared_owners_;
  do
    v22 = __ldaxr(v21);
  while (__stlxr(v22 - 1, v21));
  if (!v22)
  {
    ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
    std::__shared_weak_count::__release_weak(v20);
    if (v44)
      return;
  }
  else
  {
LABEL_26:
    if (v44)
      return;
  }
  sub_20B0B5C00(v1[2], (uint64_t)v34);
  *(_BYTE *)v1[3] = 0;
  if (!v44 && v43)
  {
    if (v42)
    {
      if (v41 < 0)
        operator delete(__p);
      if (v39 < 0)
        operator delete(v38);
    }
    if (v37)
    {
      if (v36 < 0)
        operator delete(v35);
    }
  }
}

void sub_20B0BB2BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46,char a47,int a48,__int16 a49,char a50,char a51,int a52,__int16 a53,char a54,char a55)
{
  if (!(_BYTE)a53 && (_BYTE)a49)
  {
    if (a47)
    {
      if (a46 < 0)
        operator delete(__p);
      if (a39 < 0)
        operator delete(a34);
    }
    if (a33)
    {
      if (a32 < 0)
      {
        operator delete(a27);
        _Unwind_Resume(exception_object);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0BB38C@<X0>(__int128 *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  _QWORD *v9;
  unint64_t v11;
  unint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  char v18;
  char v19;
  char v20;
  char v21;
  char v22;
  char v23;
  char v24;
  char v25;
  char v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  v4 = mach_continuous_time();
  v5 = atomic_load((unsigned __int8 *)&qword_25463D170);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
  {
    mach_timebase_info((mach_timebase_info_t)&v13);
    LODWORD(v12) = DWORD1(v13);
    LODWORD(v11) = v13;
    *(double *)&qword_25463D168 = (double)v11 / (double)v12;
    __cxa_guard_release(&qword_25463D170);
  }
  v17[0] = llround(*(double *)&qword_25463D168 * (double)v4);
  v17[1] = 2;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  v21 = 0;
  v22 = 0;
  v23 = 0;
  v24 = 0;
  v25 = 0;
  v26 = 0;
  v27 = 0;
  v6 = a1[1];
  v13 = *a1;
  v14 = v6;
  v15 = a1[2];
  v16 = *((_QWORD *)a1 + 6);
  v7 = operator new();
  *(_QWORD *)v7 = &off_24C40D4B8;
  v8 = v14;
  *(_OWORD *)(v7 + 8) = v13;
  *(_OWORD *)(v7 + 24) = v8;
  *(_OWORD *)(v7 + 40) = v15;
  *(_QWORD *)(v7 + 56) = v16;
  sub_20AF4CAF4(v7 + 64, (uint64_t)v17);
  *(_QWORD *)v7 = &off_24C40D438;
  *a2 = &off_24C411E78;
  a2[1] = v7;
  v9 = (_QWORD *)operator new();
  *v9 = &off_24C411F70;
  v9[1] = 0;
  v9[2] = 0;
  v9[3] = v7;
  a2[2] = v9;
  return sub_20AF4EA3C((uint64_t)v17);
}

void sub_20B0BB53C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B0BB554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  sub_20AF4EA3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BB578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  uint64_t v9;
  va_list va;

  va_start(va, a9);
  MEMORY[0x20BD3583C](v9, 0x10B3C40A30D6217);
  sub_20AF4EA3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BB5A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20AF4EA3C((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0BB5B8(_QWORD *a1)
{
  *a1 = &off_24C40D4B8;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  return a1;
}

void sub_20B0BB5E8(_QWORD *a1)
{
  *a1 = &off_24C40D4B8;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0BB628(uint64_t a1)
{
  return a1 + 64;
}

uint64_t sub_20B0BB630(uint64_t a1, void *lpsrc)
{
  _BYTE *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  _BOOL4 v8;
  BOOL v9;
  char v11;
  char *v12;

  v4 = __dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D478, 0);
  if (!v4)
    return 0;
  if ((void *)a1 == lpsrc)
    return 1;
  v5 = (*(_BYTE *)(a1 + 56) != 0) == (v4[56] != 0);
  if (*(_BYTE *)(a1 + 56) && v4[56])
  {
    v6 = *(unsigned int *)(a1 + 48);
    v7 = *((_DWORD *)v4 + 12);
    v8 = v7 == v6;
    v9 = v7 == -1;
    LODWORD(v5) = v7 == -1;
    if (v9)
      v8 = 0;
    if ((_DWORD)v6 == -1)
      v5 = v5;
    else
      v5 = v8;
    if ((_DWORD)v6 != -1 && v8)
    {
      v12 = &v11;
      return ((uint64_t (*)(char **, uint64_t, _BYTE *))off_24C40D148[v6])(&v12, a1 + 8, v4 + 8);
    }
  }
  return v5;
}

void sub_20B0BB730(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20B0BC87C();
  sub_20B0BB7E4(a1);
  sub_20AF4DD70(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 64, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20B0BB7C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0BB7E4(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254634E58);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634E58))
  {
    v4 = sub_20B0BC584();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20AF4E53C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20AEC60F4(&xmmword_254634E40, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254634E50 = *(_QWORD *)(v9 - 8);
      xmmword_254634E40 = v7;
    }
    sub_20AEC2E90(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634E40, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634E58);
  }
  return sub_20B0BCD60(&xmmword_254634E40, (uint64_t)"{", a1 + 8, (uint64_t)"}");
}

void sub_20B0BB8F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC2E90(&a9);
  __cxa_guard_abort(&qword_254634E58);
  _Unwind_Resume(a1);
}

void sub_20B0BB914(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634E58);
  _Unwind_Resume(a1);
}

void sub_20B0BB92C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 2;
}

double sub_20B0BB958@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  sub_20B23080C(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

_QWORD *sub_20B0BB98C(_QWORD *a1)
{
  *a1 = &off_24C40D4B8;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  return a1;
}

void sub_20B0BB9BC(_QWORD *a1)
{
  *a1 = &off_24C40D4B8;
  sub_20AF4EA3C((uint64_t)(a1 + 8));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0BB9FC(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20B0BC020();
  return sub_20B0BBB50(v2, (uint64_t)"{", a1 + 8, (uint64_t)",", a1 + 64, (uint64_t)"}");
}

uint64_t sub_20B0BBA54(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20B0BBD7C((uint64_t)v5, (uint64_t)v2, a1 + 8);
  if (v3 == -1)
    sub_20AECFAB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40D130[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40D0E8[v3])(v5, v2);
  return result;
}

void sub_20B0BBAEC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C40D0E8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20B0BBB24(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20B0BBB50(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20AED5C4C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20B0BBD7C((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40D100[v16])(&p_p_dst, &__dst);
  sub_20AF4D170((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40D100[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40D130[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40D0E8[v16])(&p_dst, &__dst);
  return result;
}

void sub_20B0BBCEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BBD04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BBD18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BBD2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BBD40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BBD54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BBD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BBD7C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20B2130EC((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40D118[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B0BBFCC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B0BBFF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0BC00C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20B0BC020()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634CD8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634CD8))
    return &xmmword_254634CC0;
  v2 = sub_20B0BC0FC();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254634CC0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254634CD0 = v2->__r_.__value_.__r.__words[2];
    xmmword_254634CC0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634CC0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634CD8);
  return &xmmword_254634CC0;
}

void sub_20B0BC0E4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634CD8);
  _Unwind_Resume(a1);
}

std::string *sub_20B0BC0FC()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634CF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634CF8))
    return &stru_254634CE0;
  sub_20B0BC3A0((uint64_t)__p);
  sub_20B0BC1EC((char *)__p, &stru_254634CE0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634CE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634CF8);
  return &stru_254634CE0;
}

void sub_20B0BC1AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634CF8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634CF8);
  _Unwind_Resume(a1);
}

void sub_20B0BC1EC(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B0BC584();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20AF4DB74();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 2uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20B0BC350(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20AEC2E90((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B0BC3A0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634D78);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634D78))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::Sync>]", qword_254634D60);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634D60, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634D78);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634D98);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634D98))
  {
    v5 = sub_20AED4780(qword_254634D60, "<", 0);
    sub_20AED467C(qword_254634D60, 0, v5, qword_254634D80);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634D80, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634D98);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254634DB8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254634DB8))
  {
    sub_20B531658((uint64_t)qword_254634D80, (uint64_t)&xmmword_254634DA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634DA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634DB8);
  }
  if (byte_254634DB7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254634DA0, *((unint64_t *)&xmmword_254634DA0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254634DA0;
    *(_QWORD *)(a1 + 16) = unk_254634DB0;
  }
}

void sub_20B0BC53C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634DB8);
  _Unwind_Resume(a1);
}

void sub_20B0BC554(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634D98);
  _Unwind_Resume(a1);
}

void sub_20B0BC56C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634D78);
  _Unwind_Resume(a1);
}

__int128 *sub_20B0BC584()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634D18);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634D18))
    return &xmmword_254634D00;
  v2 = (char *)sub_20B0BC660();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254634D00, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254634D10 = *((_QWORD *)v2 + 2);
    xmmword_254634D00 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634D00, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634D18);
  return &xmmword_254634D00;
}

void sub_20B0BC648(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634D18);
  _Unwind_Resume(a1);
}

void *sub_20B0BC660()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254634D38);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634D38))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::Sync]", qword_254634D20);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634D20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634D38);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254634D58);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254634D58))
    return &unk_254634D40;
  sub_20B531658((uint64_t)qword_254634D20, (uint64_t)&unk_254634D40);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254634D40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634D58);
  return &unk_254634D40;
}

void sub_20B0BC750(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634D58);
  _Unwind_Resume(a1);
}

void sub_20B0BC768(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634D38);
  _Unwind_Resume(a1);
}

BOOL sub_20B0BC780(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  BOOL v4;
  _BOOL8 result;

  if (*(_QWORD *)a2 != *(_QWORD *)a3)
    return 0;
  v3 = *(unsigned __int8 *)(a3 + 16);
  if (*(_BYTE *)(a2 + 16))
    v4 = v3 == 0;
  else
    v4 = 1;
  if (v4)
  {
    if ((*(_BYTE *)(a2 + 16) != 0) == (v3 != 0))
      goto LABEL_10;
    return 0;
  }
  if (*(_QWORD *)(a2 + 8) != *(_QWORD *)(a3 + 8))
    return 0;
LABEL_10:
  result = (*(_BYTE *)(a2 + 32) != 0) == (*(_BYTE *)(a3 + 32) != 0);
  if (*(_BYTE *)(a2 + 32))
  {
    if (*(_BYTE *)(a3 + 32))
      return *(_QWORD *)(a2 + 24) == *(_QWORD *)(a3 + 24);
  }
  return result;
}

BOOL sub_20B0BC810(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  BOOL v3;

  if (*a2 != *a3 || *((_QWORD *)a2 + 1) != *((_QWORD *)a3 + 1))
    return 0;
  if (a2[24])
    v3 = a3[24] == 0;
  else
    v3 = 1;
  if (v3)
    return (a2[24] != 0) == (a3[24] != 0);
  else
    return *((_QWORD *)a2 + 2) == *((_QWORD *)a3 + 2);
}

std::string *sub_20B0BC87C()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254634DD8);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634DD8))
  {
    sub_20AEC0D64(v11, "viz::PackageData");
    v2 = sub_20B0BC584();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_20B0BCB64();
    if (*((char *)v4 + 23) < 0)
    {
      sub_20AEC60F4(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_20AF6DABC();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AEC60F4(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_20AEC7620(v10, (uint64_t)__dst, 4uLL);
    sub_20B53170C((char *)v11, (uint64_t *)v10, &stru_254634DC0, v8, v9);
    sub_20AEC2E90(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634DC0, &dword_20AEBB000);
        __cxa_guard_release(&qword_254634DD8);
        return &stru_254634DC0;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_254634DC0;
}

void sub_20B0BCA88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20AEC2E90(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_254634DD8);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20B0BCB3C()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20B0BCB18);
  }
}

__int128 *sub_20B0BCB64()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634DF8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634DF8))
    return &xmmword_254634DE0;
  v2 = (char *)sub_20B0BCC40();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254634DE0, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254634DF0 = *((_QWORD *)v2 + 2);
    xmmword_254634DE0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634DE0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634DF8);
  return &xmmword_254634DE0;
}

void sub_20B0BCC28(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634DF8);
  _Unwind_Resume(a1);
}

void *sub_20B0BCC40()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254634E18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634E18))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::NetworkPackage]", qword_254634E00);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634E00, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634E18);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_254634E38);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_254634E38))
    return &unk_254634E20;
  sub_20B531658((uint64_t)qword_254634E00, (uint64_t)&unk_254634E20);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_254634E20, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634E38);
  return &unk_254634E20;
}

void sub_20B0BCD30(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634E38);
  _Unwind_Resume(a1);
}

void sub_20B0BCD48(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634E18);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0BCD60(__int128 *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20AED5C4C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20B0BBD7C((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40D100[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40D130[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40D0E8[v11])(&p_dst, &__dst);
  return result;
}

void sub_20B0BCEA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BCEB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BCECC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BCEE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BCEF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BCF0C()
{
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B0BCF20(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C40D168;
  result[1] = v3;
  return result;
}

uint64_t sub_20B0BCF54(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C40D168;
  a2[1] = v2;
  return result;
}

uint64_t sub_20B0BCF70(uint64_t a1)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  unsigned int v8;

  v1 = *(_QWORD *)(a1 + 8);
  if (*(_BYTE *)(v1 + 440))
  {
    v2 = *(std::__shared_weak_count **)(v1 + 400);
    if (v2)
    {
      v3 = std::__shared_weak_count::lock(v2);
      if (v3)
      {
        v4 = v3;
        v5 = *(_QWORD *)(v1 + 392);
        p_shared_owners = (unint64_t *)&v3->__shared_owners_;
        do
          v7 = __ldaxr(p_shared_owners);
        while (__stlxr(v7 - 1, p_shared_owners));
        if (v7)
        {
          if (v5)
          {
LABEL_8:
            v8 = 0;
            goto LABEL_11;
          }
        }
        else
        {
          ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
          std::__shared_weak_count::__release_weak(v4);
          if (v5)
            goto LABEL_8;
        }
      }
    }
  }
  v8 = 1;
LABEL_11:
  if (*(_BYTE *)(v1 + 144))
    return 0;
  else
    return v8;
}

uint64_t sub_20B0BD004(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl10000"
                     "00000EEEEEEEENK3$_0clEvEUlvE0_")
    return a1 + 8;
  if (((v3 & (unint64_t)"ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioI"
                                "Ll1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_" & 0x8000000000000000) != 0) == __OFSUB__(v3, "ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"ZZN4cv3d3kit3viz6Client4Impl8SyncImplENSt3__18optionalINS4_6chrono8durationIxNS4_5ratioILl1ELl1000000000EEEEEEEENK3$_0clEvEUlvE0_" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B0BD070()
{
  return &unk_24C40D1C8;
}

char *sub_20B0BD07C(char **a1, uint64_t a2, uint64_t a3)
{
  char *v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v10;
  char *v11;
  char *v12;
  unint64_t *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  std::__shared_weak_count *v18;
  unint64_t *p_shared_owners;
  unint64_t v20;

  v4 = *a1;
  v5 = a1[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * ((a1[2] - v4) >> 3) > v7)
    v7 = 0x5555555555555556 * ((a1[2] - v4) >> 3);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - v4) >> 3) >= 0x555555555555555)
    v7 = 0xAAAAAAAAAAAAAAALL;
  if (v7 > 0xAAAAAAAAAAAAAAALL)
    sub_20AEC60CC();
  v10 = 24 * v7;
  v11 = (char *)operator new(24 * v7);
  v12 = &v11[24 * v6];
  *(_QWORD *)v12 = &off_24C411E78;
  *((_QWORD *)v12 + 1) = a2;
  *((_QWORD *)v12 + 2) = a3;
  if (a3)
  {
    v13 = (unint64_t *)(a3 + 8);
    do
      v14 = __ldxr(v13);
    while (__stxr(v14 + 1, v13));
    v4 = *a1;
    v5 = a1[1];
  }
  v15 = &v11[v10];
  v16 = v12 + 24;
  if (v5 == v4)
  {
    *a1 = v12;
    a1[1] = v16;
    a1[2] = v15;
  }
  else
  {
    do
    {
      *((_QWORD *)v12 - 3) = &off_24C411E78;
      v12 -= 24;
      *(_OWORD *)(v12 + 8) = *((_OWORD *)v5 - 1);
      *((_QWORD *)v5 - 2) = 0;
      *((_QWORD *)v5 - 1) = 0;
      v5 -= 24;
    }
    while (v5 != v4);
    v4 = *a1;
    v17 = a1[1];
    *a1 = v12;
    a1[1] = v16;
    a1[2] = v15;
    while (v17 != v4)
    {
      v18 = (std::__shared_weak_count *)*((_QWORD *)v17 - 1);
      if (v18)
      {
        p_shared_owners = (unint64_t *)&v18->__shared_owners_;
        do
          v20 = __ldaxr(p_shared_owners);
        while (__stlxr(v20 - 1, p_shared_owners));
        if (!v20)
        {
          ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
          std::__shared_weak_count::__release_weak(v18);
        }
      }
      v17 -= 24;
    }
  }
  if (v4)
    operator delete(v4);
  return v16;
}

void sub_20B0BD20C()
{
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0BD220(uint64_t a1)
{
  _QWORD *v1;
  uint64_t v2;

  v1 = *(_QWORD **)(a1 + 8);
  v2 = *(_QWORD *)(*v1 + 64);
  if (!v2)
    sub_20AECABA4();
  return (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 48))(v2, v1[1]);
}

_QWORD *sub_20B0BD250(uint64_t *a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD **v5;
  int v6;
  const char *v7;
  uint64_t v8;
  _BYTE *v9;
  _QWORD **v10;
  const char *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD **v14;
  uint64_t v15;
  _QWORD **v16;
  uint64_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD **v21;
  char v23;
  char v24[8];
  _QWORD **v25;
  char *v26;

  v4 = *a1;
  if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
    v5 = *(_QWORD ***)(a2 + 8);
    if (*(_BYTE *)(v4 + 40))
      goto LABEL_3;
LABEL_7:
    sub_20AEC01D0(*v5, (uint64_t)"nullopt", 7);
    v9 = (_BYTE *)a1[1];
    if (*(_BYTE *)a2)
      goto LABEL_13;
    goto LABEL_12;
  }
  sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v5 = *(_QWORD ***)(a2 + 8);
  if (!*(_BYTE *)(v4 + 40))
    goto LABEL_7;
LABEL_3:
  sub_20AEC01D0(*v5, (uint64_t)"{", 1);
  sub_20B422980(*v5, v4);
  sub_20AEC01D0(*v5, (uint64_t)",", 1);
  v6 = *(_DWORD *)(v4 + 32);
  if (v6 == 1)
  {
    v7 = "Memory";
    v8 = 6;
  }
  else if (v6)
  {
    v7 = "invalid network type";
    v8 = 20;
  }
  else
  {
    v7 = "Socket";
    v8 = 6;
  }
  sub_20AEC01D0(*v5, (uint64_t)v7, v8);
  sub_20AEC01D0(*v5, (uint64_t)"}", 1);
  v9 = (_BYTE *)a1[1];
  if (!*(_BYTE *)a2)
LABEL_12:
    sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
LABEL_13:
  *(_BYTE *)a2 = 0;
  v10 = *(_QWORD ***)(a2 + 8);
  sub_20AEC01D0(*v10, (uint64_t)"{", 1);
  sub_20B0BFB5C(*v10, v9);
  sub_20AEC01D0(*v10, (uint64_t)",", 1);
  if (v9[2])
  {
    v11 = "kDeferFirstSync";
    v12 = 15;
  }
  else
  {
    v11 = "nullopt";
    v12 = 7;
  }
  sub_20AEC01D0(*v10, (uint64_t)v11, v12);
  sub_20AEC01D0(*v10, (uint64_t)"}", 1);
  v13 = a1[2];
  if (*(_BYTE *)a2)
  {
    *(_BYTE *)a2 = 0;
    v14 = *(_QWORD ***)(a2 + 8);
    if (*(_BYTE *)(v13 + 8))
      goto LABEL_18;
  }
  else
  {
    sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
    *(_BYTE *)a2 = 0;
    v14 = *(_QWORD ***)(a2 + 8);
    if (*(_BYTE *)(v13 + 8))
    {
LABEL_18:
      sub_20B23E4E0(*v14, *(_QWORD *)v13);
      v15 = a1[3];
      if (*(_BYTE *)a2)
        goto LABEL_19;
      goto LABEL_31;
    }
  }
  sub_20AEC01D0(*v14, (uint64_t)"nullopt", 7);
  v15 = a1[3];
  if (*(_BYTE *)a2)
  {
LABEL_19:
    *(_BYTE *)a2 = 0;
    v16 = *(_QWORD ***)(a2 + 8);
    if (*(_BYTE *)(v15 + 32))
      goto LABEL_20;
LABEL_32:
    sub_20AEC01D0(*v16, (uint64_t)"nullopt", 7);
    v20 = a1[4];
    if (*(_BYTE *)a2)
      goto LABEL_27;
LABEL_33:
    sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
    *(_BYTE *)a2 = 0;
    v21 = *(_QWORD ***)(a2 + 8);
    if (*(_BYTE *)(v20 + 16))
      goto LABEL_28;
    return sub_20AEC01D0(*v21, (uint64_t)"nullopt", 7);
  }
LABEL_31:
  sub_20AEC01D0(**(_QWORD ***)(a2 + 8), (uint64_t)",", 1);
  *(_BYTE *)a2 = 0;
  v16 = *(_QWORD ***)(a2 + 8);
  if (!*(_BYTE *)(v15 + 32))
    goto LABEL_32;
LABEL_20:
  v17 = *(_QWORD *)(v15 + 24);
  if (v17)
    v18 = "f(){*}";
  else
    v18 = "f(){nullptr}";
  if (v17)
    v19 = 6;
  else
    v19 = 12;
  sub_20AEC01D0(*v16, (uint64_t)v18, v19);
  v20 = a1[4];
  if (!*(_BYTE *)a2)
    goto LABEL_33;
LABEL_27:
  *(_BYTE *)a2 = 0;
  v21 = *(_QWORD ***)(a2 + 8);
  if (*(_BYTE *)(v20 + 16))
  {
LABEL_28:
    sub_20AEC01D0(*v21, (uint64_t)"{", 1);
    v24[0] = 1;
    v25 = v21;
    v26 = &v23;
    sub_20AFF578C((uint64_t)v24, v20);
    return sub_20AEC01D0(*v21, (uint64_t)"}", 1);
  }
  return sub_20AEC01D0(*v21, (uint64_t)"nullopt", 7);
}

void sub_20B0BD5C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40D228;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B0BD5D4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40D228;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0BD604(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B0BD614(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40D278;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B0BD624(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40D278;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0BD654(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B0BD664(const void *a1@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  unint64_t *v6;
  unint64_t v7;
  std::__shared_weak_count *v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t (**v11)();
  __int128 v12;
  uint64_t v13;
  __int128 v14;
  void *__p;
  void *v16;
  char *v17;

  v4 = (char *)operator new(0x9C0uLL);
  v5 = v4 + 2496;
  __p = v4;
  v17 = v4 + 2496;
  memcpy(v4, a1, 0x9C0uLL);
  v16 = v5;
  sub_20B520590((int **)&__p, &v13);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  v11 = &off_24C41F9C8;
  v12 = v14;
  if (*((_QWORD *)&v14 + 1))
  {
    v6 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
  }
  sub_20B0BD7A4((_QWORD *)a2, (uint64_t)&v11);
  *(_QWORD *)(a2 + 2504) = &off_24C41F9C8;
  *(_OWORD *)(a2 + 2512) = v12;
  v12 = 0uLL;
  v8 = (std::__shared_weak_count *)*((_QWORD *)&v14 + 1);
  if (*((_QWORD *)&v14 + 1))
  {
    v9 = (unint64_t *)(*((_QWORD *)&v14 + 1) + 8);
    do
      v10 = __ldaxr(v9);
    while (__stlxr(v10 - 1, v9));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
}

void sub_20B0BD76C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  sub_20B5206A0((uint64_t)va);
  sub_20B5206A0((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_20B0BD788(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17)
{
  if (__p)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void *sub_20B0BD7A4(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  char v4;
  void *result;
  uint64_t v6;
  std::runtime_error *exception;
  _DWORD __src[624];
  uint64_t v9;

  v9 = *MEMORY[0x24BDAC8D0];
  v3 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  if (!v4)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    std::runtime_error::runtime_error(exception, "not a seed sequence");
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  sub_20B0BD8A8(v3, __src, &v9);
  result = memcpy(a1, __src, 0x9C0uLL);
  a1[312] = 0;
  if ((*(_DWORD *)a1 & 0x80000000) == 0)
  {
    v6 = 4;
    while (!*(_DWORD *)((char *)a1 + v6))
    {
      v6 += 4;
      if (v6 == 2496)
      {
        *(_DWORD *)a1 = 0x80000000;
        return result;
      }
    }
  }
  return result;
}

void sub_20B0BD890(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unint64_t sub_20B0BD8A8(unint64_t result, _DWORD *__b, _BYTE *a3)
{
  int **v4;
  uint64_t v5;
  unint64_t v6;
  int *v7;
  int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  int v41;
  unsigned int v42;

  if (__b == (_DWORD *)a3)
    return result;
  v4 = (int **)result;
  v5 = a3 - (_BYTE *)__b;
  if (a3 - (_BYTE *)__b >= 1)
    memset(__b, 139, 4 * (((unint64_t)v5 >> 2) - ((unint64_t)v5 > 3)) + 4);
  v6 = v5 >> 2;
  v8 = *v4;
  v7 = v4[1];
  v9 = (char *)v7 - (char *)*v4;
  v10 = v9 >> 2;
  v11 = 11;
  v12 = 7;
  v13 = 5;
  v14 = 3;
  v15 = (v5 >> 2) - 1;
  if ((unint64_t)v5 <= 0x18)
    v14 = v15 >> 1;
  if ((unint64_t)v5 <= 0x98)
    v13 = v14;
  if ((unint64_t)v5 <= 0x10C)
    v12 = v13;
  if ((unint64_t)v5 <= 0x9B8)
    v11 = v12;
  v16 = (unint64_t)v9 >> 2;
  v17 = (v6 - v11) >> 1;
  v18 = v17 + v11;
  v19 = v10 + 1;
  if (v10 + 1 > v6)
    v20 = v10 + 1;
  else
    v20 = v5 >> 2;
  v21 = __b[v17];
  v22 = 1664525 * (*__b ^ __b[v15] ^ v21 ^ ((*__b ^ __b[v15] ^ v21) >> 27));
  __b[v17] = v22 + v21;
  v23 = v22 + v16;
  __b[v18] += v23;
  *__b = v23;
  v24 = v17 % v6;
  result = v18 / v6;
  v25 = v18 % v6;
  if (v7 == v8)
  {
    v26 = 0;
    if (v19 >= v6)
      goto LABEL_49;
  }
  else
  {
    v26 = 0;
    v27 = 2;
    if (v19 > 2)
      v27 = v10 + 1;
    result = v27 - 1;
    do
    {
      if (v26 + 1 == v6)
        v26 = 0;
      else
        ++v26;
      if (v15 + 1 == v6)
        v15 = 0;
      else
        ++v15;
      if (v24 + 1 == v6)
        v24 = 0;
      else
        ++v24;
      v28 = __b[v24];
      v29 = __b[v26] ^ __b[v15] ^ v28;
      v30 = 1664525 * (v29 ^ (v29 >> 27));
      __b[v24] = v30 + v28;
      v32 = *v8++;
      v31 = v32;
      if (v25 + 1 == v6)
        v25 = 0;
      else
        ++v25;
      v33 = v31 + v26 + v30;
      __b[v25] += v33;
      __b[v26] = v33;
      --result;
    }
    while (result);
    if (v19 >= v6)
      goto LABEL_49;
  }
  v34 = ~v10 + v20;
  do
  {
    if (v26 + 1 == v6)
      v26 = 0;
    else
      ++v26;
    if (v15 + 1 == v6)
      v15 = 0;
    else
      ++v15;
    if (v24 + 1 == v6)
      v24 = 0;
    else
      ++v24;
    v35 = __b[v24];
    if (v25 + 1 == v6)
      v25 = 0;
    else
      ++v25;
    v36 = 1664525 * (__b[v26] ^ __b[v15] ^ v35 ^ ((__b[v26] ^ __b[v15] ^ v35) >> 27));
    __b[v24] = v36 + v35;
    v37 = v36 + v26;
    result = 4 * v25;
    __b[v25] += v37;
    __b[v26] = v37;
    --v34;
  }
  while (v34);
LABEL_49:
  if (v20 < v20 + v6)
  {
    v38 = v5 >> 2;
    do
    {
      if (v26 + 1 == v6)
        v26 = 0;
      else
        ++v26;
      if (v15 + 1 == v6)
        v15 = 0;
      else
        ++v15;
      if (v24 + 1 == v6)
        v24 = 0;
      else
        ++v24;
      if (v25 + 1 == v6)
        v25 = 0;
      else
        ++v25;
      v39 = __b[v24];
      v40 = v39 + __b[v26] + __b[v15];
      v41 = 1566083941 * (v40 ^ (v40 >> 27));
      __b[v24] = v41 ^ v39;
      v42 = v41 - v26;
      result = v42 ^ __b[v25];
      __b[v25] = result;
      __b[v26] = v42;
      --v38;
    }
    while (v38);
  }
  return result;
}

void sub_20B0BDB94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40D3D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B0BDBA4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40D3D8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0BDBD4(uint64_t a1)
{
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;

  v1 = *(std::__shared_weak_count **)(a1 + 2544);
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
}

unsigned int *sub_20B0BDC30(unsigned int *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;

  v2 = *a2;
  v3 = *(_QWORD *)(*a2 + 2496);
  v4 = (v3 + 1) % 0x270uLL;
  v5 = 4 * v4;
  v6 = *(_DWORD *)(*a2 + 4 * ((v3 + 397) % 0x270uLL)) ^ ((*(_DWORD *)(*a2 + 4 * v4) & 0x7FFFFFFE | *(_DWORD *)(*a2 + 4 * v3) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(*a2 + 4 * v4) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(*a2 + 4 * v3) = v6;
  v7 = ((v6 ^ (v6 >> 11)) << 7) & 0x9D2C5680 ^ v6 ^ (v6 >> 11);
  *result = (v7 << 15) & 0xEFC60000 ^ v7 ^ (((v7 << 15) & 0xEFC60000 ^ v7) >> 18);
  if (v4 == 623)
    v8 = 0;
  else
    v8 = v4 + 1;
  if (v4 >= 0xE3)
    v9 = -227;
  else
    v9 = 397;
  v10 = *(_DWORD *)(v2 + 4 * (v9 + v4)) ^ ((*(_DWORD *)(v2 + 4 * v8) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v4) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v8) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + v5) = v10;
  v11 = ((v10 ^ (v10 >> 11)) << 7) & 0x9D2C5680 ^ v10 ^ (v10 >> 11);
  result[1] = (v11 << 15) & 0xEFC60000 ^ v11 ^ (((v11 << 15) & 0xEFC60000 ^ v11) >> 18);
  v12 = (v8 + 1) % 0x270;
  v13 = *(_DWORD *)(v2 + 4 * ((v8 + 397) % 0x270)) ^ ((*(_DWORD *)(v2 + 4 * v12) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v8) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v12) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + 4 * v8) = v13;
  v14 = ((v13 ^ (v13 >> 11)) << 7) & 0x9D2C5680 ^ v13 ^ (v13 >> 11);
  result[2] = (v14 << 15) & 0xEFC60000 ^ v14 ^ (((v14 << 15) & 0xEFC60000 ^ v14) >> 18);
  if (v12 == 623)
    v15 = 0;
  else
    v15 = v12 + 1;
  if (v12 >= 0xE3)
    v16 = -227;
  else
    v16 = 397;
  v17 = *(_DWORD *)(v2 + 4 * (v16 + v12)) ^ ((*(_DWORD *)(v2 + 4 * v15) & 0x7FFFFFFE | *(_DWORD *)(v2 + 4 * v12) & 0x80000000) >> 1) ^ ((int)(*(_DWORD *)(v2 + 4 * v15) << 31) >> 31) & 0x9908B0DF;
  *(_DWORD *)(v2 + 4 * v12) = v17;
  v18 = ((v17 ^ (v17 >> 11)) << 7) & 0x9D2C5680 ^ v17 ^ (v17 >> 11);
  result[3] = (v18 << 15) & 0xEFC60000 ^ v18 ^ (((v18 << 15) & 0xEFC60000 ^ v18) >> 18);
  *(_QWORD *)(v2 + 2496) = v15;
  return result;
}

void sub_20B0BDE24()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0BDE38(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t *v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  uint64_t (**v20)();
  uint64_t v21;
  std::__shared_weak_count *v22;
  void *v23[4];
  char v24;
  char v25;
  void *v26;
  char v27;
  void *__p;
  char v29;
  char v30;
  char v31;
  char v32;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *v1;
  v3 = (uint64_t *)v1[1];
  v4 = (std::__shared_weak_count *)v3[1];
  v18 = *v3;
  v19 = v4;
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
  }
  v8 = v3[3];
  v7 = (std::__shared_weak_count *)v3[4];
  v20 = &off_24C411E78;
  v21 = v8;
  v22 = v7;
  if (v7)
  {
    v9 = (unint64_t *)&v7->__shared_owners_;
    do
      v10 = __ldxr(v9);
    while (__stxr(v10 + 1, v9));
  }
  v11 = *(_QWORD *)(v2 + 712);
  if (!v11)
    sub_20AECABA4();
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v11 + 48))(v23, v11, &v18);
  v12 = v22;
  if (!v22)
    goto LABEL_12;
  v13 = (unint64_t *)&v22->__shared_owners_;
  do
    v14 = __ldaxr(v13);
  while (__stlxr(v14 - 1, v13));
  if (!v14)
  {
    ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
    std::__shared_weak_count::__release_weak(v12);
    v15 = v19;
    if (!v19)
      goto LABEL_16;
  }
  else
  {
LABEL_12:
    v15 = v19;
    if (!v19)
      goto LABEL_16;
  }
  v16 = (unint64_t *)&v15->__shared_owners_;
  do
    v17 = __ldaxr(v16);
  while (__stlxr(v17 - 1, v16));
  if (!v17)
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    if (v32)
      return;
    goto LABEL_17;
  }
LABEL_16:
  if (v32)
    return;
LABEL_17:
  sub_20B0B5C00(v1[2], (uint64_t)v23);
  if (!v32 && v31)
  {
    if (v30)
    {
      if (v29 < 0)
        operator delete(__p);
      if (v27 < 0)
        operator delete(v26);
    }
    if (v25)
    {
      if (v24 < 0)
        operator delete(v23[2]);
    }
  }
}

void sub_20B0BDFD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36,char a37,int a38,__int16 a39,char a40,char a41,int a42,__int16 a43,char a44,char a45)
{
  if (!(_BYTE)a43 && (_BYTE)a39)
  {
    if (a37)
    {
      if (a36 < 0)
        operator delete(__p);
      if (a29 < 0)
        operator delete(a24);
    }
    if (a23)
    {
      if (a22 < 0)
      {
        operator delete(a17);
        _Unwind_Resume(exception_object);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0BE080()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0BE094(uint64_t a1)
{
  sub_20B21D7E4(*(_QWORD *)(**(_QWORD **)(a1 + 8) + 128), *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8));
}

void sub_20B0BE0A8()
{
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0BE0BC(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  std::__shared_weak_count *v23;
  std::__shared_weak_count *v24;
  std::__shared_weak_count *v25;
  uint64_t (**v26)();
  uint64_t v27;
  std::__shared_weak_count *v28;
  _BYTE v29[16];
  void *v30;
  char v31;
  char v32;
  void *v33;
  char v34;
  void *__p;
  char v36;
  char v37;
  char v38;
  char v39;

  v1 = *(uint64_t **)(a1 + 8);
  v2 = *v1;
  sub_20B0BE3D8((_QWORD *)v1[1], &v21);
  v3 = (std::__shared_weak_count *)operator new(0x50uLL);
  v3->__shared_owners_ = 0;
  p_shared_owners = (unint64_t *)&v3->__shared_owners_;
  v3->__shared_weak_owners_ = 0;
  v3->__vftable = (std::__shared_weak_count_vtbl *)&off_24C3F3C88;
  v3[1].__vftable = 0;
  *(_WORD *)((char *)&v3[1].__shared_weak_owners_ + 7) = 0;
  LOBYTE(v3[3].__vftable) = 0;
  v5 = v22;
  v6 = v23;
  v22 = 0;
  v23 = 0;
  v24 = v3 + 1;
  v25 = v3;
  do
    v7 = __ldxr(p_shared_owners);
  while (__stxr(v7 + 1, p_shared_owners));
  v26 = &off_24C411E78;
  v27 = v5;
  v28 = v6;
  if (v6)
  {
    v8 = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(v8);
    while (__stxr(v9 + 1, v8));
    do
      v10 = __ldaxr(v8);
    while (__stlxr(v10 - 1, v8));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  do
    v11 = __ldaxr(p_shared_owners);
  while (__stlxr(v11 - 1, p_shared_owners));
  if (!v11)
  {
    ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
    std::__shared_weak_count::__release_weak(v3);
  }
  sub_20B21D7E4(*(_QWORD *)(v2 + 128), (uint64_t)&v24);
  v39 = 1;
  v12 = v28;
  if (v28)
  {
    v13 = (unint64_t *)&v28->__shared_owners_;
    do
      v14 = __ldaxr(v13);
    while (__stlxr(v14 - 1, v13));
    if (!v14)
    {
      ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
      std::__shared_weak_count::__release_weak(v12);
    }
  }
  v15 = v25;
  if (v25)
  {
    v16 = (unint64_t *)&v25->__shared_owners_;
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  v18 = v23;
  if (!v23)
    goto LABEL_26;
  v19 = (unint64_t *)&v23->__shared_owners_;
  do
    v20 = __ldaxr(v19);
  while (__stlxr(v20 - 1, v19));
  if (!v20)
  {
    ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
    std::__shared_weak_count::__release_weak(v18);
    if (v39)
      return;
  }
  else
  {
LABEL_26:
    if (v39)
      return;
  }
  sub_20B0B5C00(v1[2], (uint64_t)v29);
  if (!v39 && v38)
  {
    if (v37)
    {
      if (v36 < 0)
        operator delete(__p);
      if (v34 < 0)
        operator delete(v33);
    }
    if (v32)
    {
      if (v31 < 0)
        operator delete(v30);
    }
  }
}

void sub_20B0BE308(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,char a39,int a40,__int16 a41,char a42,char a43,int a44,__int16 a45,char a46,char a47)
{
  if (!(_BYTE)a45 && (_BYTE)a41)
  {
    if (a39)
    {
      if (a38 < 0)
        operator delete(__p);
      if (a31 < 0)
        operator delete(a26);
    }
    if (a25)
    {
      if (a24 < 0)
      {
        operator delete(a19);
        _Unwind_Resume(exception_object);
      }
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0BE3D8@<X0>(_QWORD *a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  unsigned __int8 v5;
  unint64_t v7;
  unint64_t v8;
  mach_timebase_info info;
  _QWORD v10[2];
  char v11;
  char v12;
  char v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v4 = mach_continuous_time();
  v5 = atomic_load((unsigned __int8 *)&qword_25463D170);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_25463D170))
  {
    mach_timebase_info(&info);
    LODWORD(v7) = info.numer;
    LODWORD(v8) = info.denom;
    *(double *)&qword_25463D168 = (double)v7 / (double)v8;
    __cxa_guard_release(&qword_25463D170);
  }
  v10[0] = llround(*(double *)&qword_25463D168 * (double)v4);
  v10[1] = 2;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v18 = 0;
  v19 = 0;
  v20 = 0;
  sub_20B0BE51C(a1, (uint64_t)v10, a2);
  return sub_20AF4EA3C((uint64_t)v10);
}

void sub_20B0BE4F0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463D170);
  _Unwind_Resume(a1);
}

void sub_20B0BE508(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AF4EA3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BE51C(_QWORD *a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  char *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  char **v13;
  char *v14;
  uint64_t v15;

  v5 = a1 + 1;
  v6 = a1[1];
  v13 = (char **)*a1;
  v14 = (char *)v6;
  v15 = a1[2];
  if (v15)
  {
    *(_QWORD *)(v6 + 16) = &v14;
    *a1 = v5;
    *v5 = 0;
    a1[2] = 0;
  }
  else
  {
    v13 = &v14;
  }
  v7 = (_QWORD *)operator new();
  v8 = v7;
  v9 = v14;
  v7[1] = v13;
  *v7 = &off_24C40D588;
  v7[2] = v9;
  v10 = v7 + 2;
  v11 = v15;
  v7[3] = v15;
  if (v11)
  {
    *((_QWORD *)v9 + 2) = v10;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v7[1] = v10;
  }
  sub_20AF4CAF4((uint64_t)(v7 + 4), a2);
  *v8 = &off_24C40D508;
  *a3 = &off_24C411E78;
  a3[1] = v8;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C411F70;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v8;
  a3[2] = v12;
  sub_20AEC833C((uint64_t)&v13, v14);
}

void sub_20B0BE644(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;

  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B0BE66C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  uint64_t v11;
  uint64_t v12;

  sub_20AEC833C(v12, *(char **)(v11 + 16));
  MEMORY[0x20BD3583C](v11, 0x10B3C407C1CE13ALL);
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B0BE6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0BE6C0(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C40D588;
  sub_20AF4EA3C(a1 + 32);
  sub_20AEC833C(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

void sub_20B0BE6FC(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C40D588;
  sub_20AF4EA3C(a1 + 32);
  sub_20AEC833C(a1 + 8, *(char **)(a1 + 16));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0BE748(uint64_t a1)
{
  return a1 + 32;
}

uint64_t sub_20B0BE750(char *a1, char *lpsrc)
{
  uint64_t result;
  _QWORD *v5;
  char *v6;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EB8, (const struct __class_type_info *)&unk_24C40D548, 0);
  if (result)
  {
    if (a1 == lpsrc)
    {
      return 1;
    }
    else
    {
      v5 = (_QWORD *)(result + 8);
      v6 = a1 + 8;
      return sub_20AF45D6C((uint64_t)&v6, &v5);
    }
  }
  return result;
}

void sub_20B0BE7D4(uint64_t a1)
{
  __int128 *v2;
  void *__p;
  char v4;

  v2 = (__int128 *)sub_20B0BF670();
  sub_20B0BE888(a1);
  sub_20AF4DD70(v2, (uint64_t)"{", (uint64_t)&__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (v4 < 0)
    operator delete(__p);
}

void sub_20B0BE86C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0BE888(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  void *v8;
  uint64_t v9;

  v2 = atomic_load((unsigned __int8 *)&qword_254634F38);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634F38))
  {
    v4 = sub_20AF42B4C();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20AF4E53C((char *)v4, v6, "::", 2, 0, (uint64_t)&v8);
    if (*(char *)(v9 - 1) < 0)
    {
      sub_20AEC60F4(&xmmword_254634F20, *(void **)(v9 - 24), *(_QWORD *)(v9 - 16));
    }
    else
    {
      v7 = *(_OWORD *)(v9 - 24);
      qword_254634F30 = *(_QWORD *)(v9 - 8);
      xmmword_254634F20 = v7;
    }
    sub_20AEC2E90(&v8);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634F20, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634F38);
  }
  return sub_20B0BF958(&xmmword_254634F20, (uint64_t)"{", (_QWORD *)(a1 + 8), (uint64_t)"}");
}

void sub_20B0BE998(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC2E90(&a9);
  __cxa_guard_abort(&qword_254634F38);
  _Unwind_Resume(a1);
}

void sub_20B0BE9B8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634F38);
  _Unwind_Resume(a1);
}

void sub_20B0BE9D0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.net");
  *(_DWORD *)(a1 + 24) = 3;
}

double sub_20B0BE9FC@<D0>(const void *a1@<X0>, _OWORD *a2@<X8>)
{
  double result;
  __int128 v4;

  sub_20B230AB8(a1, &v4);
  result = *(double *)&v4;
  *a2 = v4;
  return result;
}

uint64_t sub_20B0BEA30(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C40D588;
  sub_20AF4EA3C(a1 + 32);
  sub_20AEC833C(a1 + 8, *(char **)(a1 + 16));
  return a1;
}

void sub_20B0BEA6C(uint64_t a1)
{
  *(_QWORD *)a1 = &off_24C40D588;
  sub_20AF4EA3C(a1 + 32);
  sub_20AEC833C(a1 + 8, *(char **)(a1 + 16));
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0BEAB8(uint64_t a1)
{
  __int128 *v2;

  v2 = sub_20B0BF10C();
  return sub_20B0BEC0C(v2, (uint64_t)"{", (_QWORD *)(a1 + 8), (uint64_t)",", a1 + 32, (uint64_t)"}");
}

uint64_t sub_20B0BEB10(uint64_t a1)
{
  uint64_t result;
  _BYTE v2[24];
  int v3;
  char v4;
  _QWORD v5[2];

  v3 = 0;
  sub_20B0BEE38((uint64_t)v5, (uint64_t)v2, (_QWORD *)(a1 + 8));
  if (v3 == -1)
    sub_20AECFAB8();
  v5[0] = &v4;
  result = ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40D130[v3])(v5, v2);
  if (v3 != -1)
    return ((uint64_t (*)(_QWORD *, _BYTE *))off_24C40D0E8[v3])(v5, v2);
  return result;
}

void sub_20B0BEBA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, int a13)
{
  uint64_t v13;

  if (a13 != -1)
    ((void (*)(uint64_t, char *))off_24C40D0E8[a13])(v13 - 17, &a10);
  _Unwind_Resume(exception_object);
}

void sub_20B0BEBE0(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 15;
  strcpy((char *)a1, "unknown_package");
  *(_DWORD *)(a1 + 24) = 0;
}

uint64_t sub_20B0BEC0C(__int128 *a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result;
  char v12;
  char v13;
  __int128 __dst;
  uint64_t v15;
  int v16;
  __int128 *p_dst;
  uint64_t v18;
  __int128 *v19;
  uint64_t v20;
  uint64_t v21;
  __int128 **p_p_dst;

  v16 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v15 = *((_QWORD *)a1 + 2);
  }
  v16 = 1;
  p_dst = &__dst;
  v18 = a2;
  v19 = &__dst;
  v20 = a2;
  v21 = a2;
  sub_20AED5C4C((uint64_t *)&v19, (uint64_t)&__dst);
  sub_20B0BEE38((uint64_t)&v13, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v18 = a4;
  v19 = &__dst;
  v20 = a4;
  v21 = a4;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40D100[v16])(&p_p_dst, &__dst);
  sub_20AF4D170((uint64_t)&v12, (uint64_t)&__dst, a5);
  p_dst = &__dst;
  v18 = a6;
  v19 = &__dst;
  v20 = a6;
  v21 = a6;
  if (v16 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40D100[v16])(&p_p_dst, &__dst);
  if (v16 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40D130[v16])(&p_dst, &__dst);
  if (v16 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40D0E8[v16])(&p_dst, &__dst);
  return result;
}

void sub_20B0BEDA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BEDC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BEDD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BEDE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BEDFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BEE10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BEE24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BEE38(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void *v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__p[2];
  unint64_t v20;
  _QWORD *v21[5];
  _QWORD *v22;
  char v23;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v22 = (_QWORD *)v5;
  v21[0] = (_QWORD *)(v5 + 16);
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"{", 1);
  sub_20AFB0E24((uint64_t)&v23, v21, a3);
  sub_20AEC01D0(v21[0], (uint64_t)"}", 1);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __p;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = operator new(v12 + 1);
    __p[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __p[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __p;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v22;
  if (v22)
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *v22 = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)((char *)v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    v14[3] = MEMORY[0x24BEDB848] + 16;
    v14[2] = v17;
    if (*((char *)v14 + 111) < 0)
      operator delete((void *)v14[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 16);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = (_QWORD *)a2;
  v21[1] = __p;
  v21[2] = (_QWORD *)a2;
  v21[3] = __p;
  v21[4] = __p;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40D118[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__p[0]);
}

void sub_20B0BF0B8(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B0BF0DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0BF0F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_list va;

  va_start(va, a9);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

__int128 *sub_20B0BF10C()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634E78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634E78))
    return &xmmword_254634E60;
  v2 = sub_20B0BF1E8();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254634E60, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254634E70 = v2->__r_.__value_.__r.__words[2];
    xmmword_254634E60 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634E60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634E78);
  return &xmmword_254634E60;
}

void sub_20B0BF1D0(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634E78);
  _Unwind_Resume(a1);
}

std::string *sub_20B0BF1E8()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634E98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634E98))
    return &stru_254634E80;
  sub_20B0BF48C((uint64_t)__p);
  sub_20B0BF2D8((char *)__p, &stru_254634E80);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634E80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634E98);
  return &stru_254634E80;
}

void sub_20B0BF298(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634E98);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634E98);
  _Unwind_Resume(a1);
}

void sub_20B0BF2D8(char *a1@<X0>, std::string *a2@<X8>)
{
  __int128 *v4;
  __int128 v5;
  __int128 *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void **v10;
  void **v11;
  void *v12;
  void *__p;
  void **v14;
  void *__dst[2];
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  uint64_t v19;

  v19 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20AF42B4C();
  if (*((char *)v4 + 23) < 0)
  {
    sub_20AEC60F4(__dst, *(void **)v4, *((_QWORD *)v4 + 1));
  }
  else
  {
    v5 = *v4;
    v16 = *((_QWORD *)v4 + 2);
    *(_OWORD *)__dst = v5;
  }
  v6 = sub_20AF4DB74();
  if (*((char *)v6 + 23) < 0)
  {
    sub_20AEC60F4(&v17, *(void **)v6, *((_QWORD *)v6 + 1));
  }
  else
  {
    v7 = *v6;
    v18 = *((_QWORD *)v6 + 2);
    v17 = v7;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 2uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v8, v9);
  v10 = (void **)__p;
  if (__p)
  {
    v11 = v14;
    v12 = __p;
    if (v14 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != v10);
      v12 = __p;
    }
    v14 = v10;
    operator delete(v12);
  }
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      return;
LABEL_19:
    operator delete(__dst[0]);
    return;
  }
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_19;
}

void sub_20B0BF43C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_20AEC2E90((void **)&a9);
  if (a24 < 0)
    operator delete(__p);
  if (a18 < 0)
  {
    operator delete(a13);
    _Unwind_Resume(a1);
  }
  _Unwind_Resume(a1);
}

void sub_20B0BF48C(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634EB8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634EB8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::ValueData<cv3d::kit::viz::UpdateEnabledContexts>]", qword_254634EA0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634EA0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634EB8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634ED8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634ED8))
  {
    v5 = sub_20AED4780(qword_254634EA0, "<", 0);
    sub_20AED467C(qword_254634EA0, 0, v5, qword_254634EC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634EC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634ED8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254634EF8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254634EF8))
  {
    sub_20B531658((uint64_t)qword_254634EC0, (uint64_t)&xmmword_254634EE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634EE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634EF8);
  }
  if (byte_254634EF7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254634EE0, *((unint64_t *)&xmmword_254634EE0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254634EE0;
    *(_QWORD *)(a1 + 16) = unk_254634EF0;
  }
}

void sub_20B0BF628(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634EF8);
  _Unwind_Resume(a1);
}

void sub_20B0BF640(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634ED8);
  _Unwind_Resume(a1);
}

void sub_20B0BF658(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634EB8);
  _Unwind_Resume(a1);
}

std::string *sub_20B0BF670()
{
  unsigned __int8 v0;
  __int128 *v2;
  __int128 v3;
  __int128 *v4;
  __int128 v5;
  std::string *v6;
  __int128 v7;
  int64x2_t v8;
  int8x16_t v9;
  void *v10[3];
  void *v11[2];
  char v12;
  void *__dst[2];
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  std::string::size_type v18;
  void *__p[2];
  uint64_t v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v0 = atomic_load((unsigned __int8 *)&qword_254634F18);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254634F18))
  {
    sub_20AEC0D64(v11, "viz::PackageData");
    v2 = sub_20AF42B4C();
    if (*((char *)v2 + 23) < 0)
    {
      sub_20AEC60F4(__dst, *(void **)v2, *((_QWORD *)v2 + 1));
    }
    else
    {
      v3 = *v2;
      v14 = *((_QWORD *)v2 + 2);
      *(_OWORD *)__dst = v3;
    }
    v4 = sub_20B0BCB64();
    if (*((char *)v4 + 23) < 0)
    {
      sub_20AEC60F4(&v15, *(void **)v4, *((_QWORD *)v4 + 1));
    }
    else
    {
      v5 = *v4;
      v16 = *((_QWORD *)v4 + 2);
      v15 = v5;
    }
    v6 = sub_20AF6DE7C();
    if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_20AEC60F4(&v17, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
    }
    else
    {
      v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
      v18 = v6->__r_.__value_.__r.__words[2];
      v17 = v7;
    }
    *(_OWORD *)__p = *(_OWORD *)"void";
    v20 = 0x400000000000000;
    sub_20AEC7620(v10, (uint64_t)__dst, 4uLL);
    sub_20B53170C((char *)v11, (uint64_t *)v10, &stru_254634F00, v8, v9);
    sub_20AEC2E90(v10);
    if (SHIBYTE(v20) < 0)
    {
      operator delete(__p[0]);
      if ((SHIBYTE(v18) & 0x80000000) == 0)
      {
LABEL_15:
        if ((SHIBYTE(v16) & 0x80000000) == 0)
          goto LABEL_16;
        goto LABEL_21;
      }
    }
    else if ((SHIBYTE(v18) & 0x80000000) == 0)
    {
      goto LABEL_15;
    }
    operator delete((void *)v17);
    if ((SHIBYTE(v16) & 0x80000000) == 0)
    {
LABEL_16:
      if ((SHIBYTE(v14) & 0x80000000) == 0)
        goto LABEL_17;
      goto LABEL_22;
    }
LABEL_21:
    operator delete((void *)v15);
    if ((SHIBYTE(v14) & 0x80000000) == 0)
    {
LABEL_17:
      if ((v12 & 0x80000000) == 0)
      {
LABEL_18:
        __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634F00, &dword_20AEBB000);
        __cxa_guard_release(&qword_254634F18);
        return &stru_254634F00;
      }
LABEL_23:
      operator delete(v11[0]);
      goto LABEL_18;
    }
LABEL_22:
    operator delete(__dst[0]);
    if ((v12 & 0x80000000) == 0)
      goto LABEL_18;
    goto LABEL_23;
  }
  return &stru_254634F00;
}

void sub_20B0BF87C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20AEC2E90(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_8;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
    {
LABEL_10:
      if (a18 < 0)
        operator delete(a13);
      __cxa_guard_abort(&qword_254634F18);
      _Unwind_Resume(a1);
    }
LABEL_9:
    operator delete(a20);
    goto LABEL_10;
  }
LABEL_8:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
    goto LABEL_10;
  goto LABEL_9;
}

void sub_20B0BF930()
{
  uint64_t v0;
  uint64_t v1;

  while (1)
  {
    if (*(char *)(v0 - 1) < 0)
      operator delete(*(void **)(v0 - 24));
    v0 -= 24;
    if (v0 == v1)
      JUMPOUT(0x20B0BF90CLL);
  }
}

uint64_t sub_20B0BF958(__int128 *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  uint64_t result;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  __int128 *p_dst;
  uint64_t v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  __int128 **p_p_dst;

  v11 = -1;
  if (*((char *)a1 + 23) < 0)
  {
    sub_20AEC60F4(&__dst, *(void **)a1, *((_QWORD *)a1 + 1));
  }
  else
  {
    __dst = *a1;
    v10 = *((_QWORD *)a1 + 2);
  }
  v11 = 1;
  p_dst = &__dst;
  v13 = a2;
  v14 = &__dst;
  v15 = a2;
  v16 = a2;
  sub_20AED5C4C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20B0BEE38((uint64_t)&v8, (uint64_t)&__dst, a3);
  p_dst = &__dst;
  v13 = a4;
  v14 = &__dst;
  v15 = a4;
  v16 = a4;
  if (v11 == -1)
    sub_20AECFAB8();
  p_p_dst = &p_dst;
  ((void (*)(__int128 ***, __int128 *))off_24C40D100[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20AECFAB8();
  p_dst = (__int128 *)&p_p_dst;
  result = ((uint64_t (*)(__int128 **, __int128 *))off_24C40D130[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(__int128 **, __int128 *))off_24C40D0E8[v11])(&p_dst, &__dst);
  return result;
}

void sub_20B0BFA98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BFAB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BFAC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BFAD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BFAEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0BFB00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40D388;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B0BFB10(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&off_24C40D388;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0BFB40(uint64_t a1)
{
  return (**(uint64_t (***)(uint64_t))(a1 + 24))(a1 + 24);
}

void sub_20B0BFB50(uint64_t a1)
{
  sub_20B529C20(a1);
}

_QWORD *sub_20B0BFB5C(_QWORD *a1, _BYTE *a2)
{
  int v2;
  const char *v3;
  uint64_t v4;

  v2 = *a2;
  if (v2 == 2)
  {
    v3 = "Enabled";
    v4 = 7;
  }
  else if (v2 == 1)
  {
    v3 = "DisabledIgnoreSync";
    v4 = 18;
  }
  else if (*a2)
  {
    sub_20AEC01D0(a1, (uint64_t)"invalid client sync type (", 26);
    a1 = (_QWORD *)std::ostream::operator<<();
    v3 = ")";
    v4 = 1;
  }
  else
  {
    v3 = "Disabled";
    v4 = 8;
  }
  return sub_20AEC01D0(a1, (uint64_t)v3, v4);
}

_QWORD *sub_20B0BFBFC(_QWORD *a1, _BYTE *a2)
{
  const char *v2;
  uint64_t v3;

  switch(*a2)
  {
    case 0:
      v2 = "NotSyncing";
      v3 = 10;
      break;
    case 1:
      v2 = "Waiting";
      v3 = 7;
      break;
    case 2:
      v2 = "Proceeding";
      v3 = 10;
      break;
    case 3:
      v2 = "ProceedingConditionally";
      v3 = 23;
      break;
    default:
      sub_20AEC01D0(a1, (uint64_t)"invalid sync status (", 21);
      a1 = (_QWORD *)std::ostream::operator<<();
      v2 = ")";
      v3 = 1;
      break;
  }
  return sub_20AEC01D0(a1, (uint64_t)v2, v3);
}

uint64_t sub_20B0BFCC0(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  const void **v14;
  unsigned __int8 *v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  int v20;
  BOOL v22;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_18;
    }
    return 0;
  }
LABEL_18:
  result = (a1[48] != 0) == (v6[48] != 0);
  if (!a1[48] || !v6[48])
    return result;
  v10 = a1[47];
  if ((v10 & 0x80u) == 0)
    v11 = a1[47];
  else
    v11 = *((_QWORD *)a1 + 4);
  v12 = v6[47];
  v13 = (char)v12;
  if ((v12 & 0x80u) != 0)
    v12 = *((_QWORD *)v6 + 4);
  if (v11 != v12)
    return 0;
  v14 = (const void **)(a1 + 24);
  if (v13 >= 0)
    v15 = v6 + 24;
  else
    v15 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  if ((v10 & 0x80) != 0)
    return memcmp(*v14, v15, *((_QWORD *)a1 + 4)) == 0;
  if (!a1[47])
    return 1;
  v16 = v10 - 1;
  do
  {
    v18 = *(unsigned __int8 *)v14;
    v14 = (const void **)((char *)v14 + 1);
    v17 = v18;
    v20 = *v15++;
    v19 = v20;
    v22 = v16-- != 0;
    result = v17 == v19;
  }
  while (v17 == v19 && v22);
  return result;
}

uint64_t sub_20B0BFE34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  std::__shared_weak_count *size;
  unint64_t *v7;
  unint64_t v8;
  unsigned __int8 v9;
  CFTypeID v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::logic_error *exception;
  uint64_t v16;
  std::__shared_weak_count *v17;
  std::string __p;
  std::string v19;

  sub_20B416B18((uint64_t *)&v19, a2, 1);
  *(_QWORD *)a1 = &off_24C3FA938;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = 0uLL;
  sub_20AF4CAF4(a1 + 32, a3);
  *(_QWORD *)a1 = &off_24C40D668;
  size = (std::__shared_weak_count *)v19.__r_.__value_.__l.__size_;
  if (v19.__r_.__value_.__l.__size_)
  {
    v7 = (unint64_t *)(v19.__r_.__value_.__l.__size_ + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))size->__on_zero_shared)(size);
      std::__shared_weak_count::__release_weak(size);
    }
  }
  *(_QWORD *)a1 = &off_24C40D700;
  sub_20AEEC2D8(&v16, a2);
  v9 = atomic_load((unsigned __int8 *)&qword_25463AF10);
  if ((v9 & 1) == 0 && __cxa_guard_acquire(&qword_25463AF10))
  {
    qword_25463AF58 = CFBooleanGetTypeID();
    qword_25463AF60 = CFStringGetTypeID();
    qword_25463AF68 = CFNumberGetTypeID();
    qword_25463AF70 = CFArrayGetTypeID();
    qword_25463AF78 = CFDictionaryGetTypeID();
    __cxa_guard_release(&qword_25463AF10);
  }
  if (!sub_20B4EF920((uint64_t)&v16, 5, (uint64_t)&qword_25463AF58))
  {
    sub_20B4F6600(v10, &__p);
    sub_20B0C08F0(&v19, (uint64_t *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, &v19);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  v11 = v17;
  if (!v17)
    return a1;
  p_shared_owners = (unint64_t *)&v17->__shared_owners_;
  do
    v13 = __ldaxr(p_shared_owners);
  while (__stlxr(v13 - 1, p_shared_owners));
  if (v13)
    return a1;
  ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
  std::__shared_weak_count::__release_weak(v11);
  return a1;
}

void sub_20B0C0034(_Unwind_Exception *a1, uint64_t a2, ...)
{
  _QWORD *v2;
  va_list va;

  va_start(va, a2);
  __cxa_guard_abort(&qword_25463AF10);
  sub_20AEC147C((uint64_t)va);
  sub_20B0C0128(v2);
  _Unwind_Resume(a1);
}

void sub_20B0C005C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  _QWORD *v23;

  if (a23 < 0)
  {
    operator delete(__p);
    sub_20AEC147C((uint64_t)&a10);
    sub_20B0C0128(v23);
    _Unwind_Resume(a1);
  }
  sub_20AEC147C((uint64_t)&a10);
  sub_20B0C0128(v23);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0C0128(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA938;
  sub_20AF4EA3C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

_QWORD *sub_20B0C01A0(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA938;
  sub_20AF4EA3C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B0C0218(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA938;
  sub_20AF4EA3C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0C0290(uint64_t a1)
{
  unsigned __int8 v2;
  __int128 *v3;
  __int128 v4;
  std::string *v5;
  __int128 v6;
  int64x2_t v7;
  int8x16_t v8;
  void *v9[3];
  void *v10[2];
  char v11;
  void *__p[2];
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  __int128 v16;
  std::string::size_type v17;
  void *v18[2];
  uint64_t v19;
  uint64_t v20;

  v20 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)&qword_25463AF18);
  if ((v2 & 1) != 0 || !__cxa_guard_acquire(&qword_25463AF18))
    goto LABEL_2;
  sub_20AEC0D64(v10, "viz::PackageData");
  v3 = sub_20AFAF544();
  if (*((char *)v3 + 23) < 0)
  {
    sub_20AEC60F4(__p, *(void **)v3, *((_QWORD *)v3 + 1));
  }
  else
  {
    v4 = *v3;
    v13 = *((_QWORD *)v3 + 2);
    *(_OWORD *)__p = v4;
  }
  *(_OWORD *)v14 = *(_OWORD *)"viz::Package";
  v15 = 0xC00000000000000;
  v5 = sub_20B0C0A70();
  if (SHIBYTE(v5->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&v16, v5->__r_.__value_.__l.__data_, v5->__r_.__value_.__l.__size_);
  }
  else
  {
    v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v17 = v5->__r_.__value_.__r.__words[2];
    v16 = v6;
  }
  *(_OWORD *)v18 = *(_OWORD *)"void";
  v19 = 0x400000000000000;
  sub_20AEC7620(v9, (uint64_t)__p, 4uLL);
  sub_20B53170C((char *)v10, (uint64_t *)v9, &stru_25463AF28, v7, v8);
  sub_20AEC2E90(v9);
  if (SHIBYTE(v19) < 0)
  {
    operator delete(v18[0]);
    if ((SHIBYTE(v17) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v15) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_20;
    }
  }
  else if ((SHIBYTE(v17) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete((void *)v16);
  if ((SHIBYTE(v15) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v13) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_21:
    operator delete(__p[0]);
    if ((v11 & 0x80000000) == 0)
      goto LABEL_17;
LABEL_22:
    operator delete(v10[0]);
    goto LABEL_17;
  }
LABEL_20:
  operator delete(v14[0]);
  if (SHIBYTE(v13) < 0)
    goto LABEL_21;
LABEL_16:
  if (v11 < 0)
    goto LABEL_22;
LABEL_17:
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_25463AF28, &dword_20AEBB000);
  __cxa_guard_release(&qword_25463AF18);
LABEL_2:
  sub_20B0C05D0(a1);
  sub_20AF4DD70((__int128 *)&stru_25463AF28, (uint64_t)"{", (uint64_t)__p, (uint64_t)",", a1 + 32, (uint64_t)"}");
  if (SHIBYTE(v13) < 0)
    operator delete(__p[0]);
}

void sub_20B0C04C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  sub_20AEC2E90(&a10);
  if (a43 < 0)
  {
    operator delete(__p);
    if ((a37 & 0x80000000) == 0)
    {
LABEL_3:
      if ((a31 & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((a37 & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(a32);
  if ((a31 & 0x80000000) == 0)
  {
LABEL_4:
    if ((a25 & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(a26);
  if ((a25 & 0x80000000) == 0)
  {
LABEL_5:
    if ((a18 & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(a20);
  if ((a18 & 0x80000000) == 0)
  {
LABEL_6:
    __cxa_guard_abort(&qword_25463AF18);
    _Unwind_Resume(a1);
  }
LABEL_11:
  operator delete(a13);
  __cxa_guard_abort(&qword_25463AF18);
  _Unwind_Resume(a1);
}

void sub_20B0C05A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0C05D0(uint64_t a1)
{
  unsigned __int8 v2;
  uint64_t result;
  __int128 *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  char v8;
  __int128 __dst;
  uint64_t v10;
  int v11;
  void ***p_dst;
  const char *v13;
  __int128 *v14;
  const char *v15;
  const char *v16;
  void **p_p_dst;

  v2 = atomic_load((unsigned __int8 *)&qword_25463AF20);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_25463AF20))
  {
    v4 = sub_20AFAF544();
    v5 = *((_QWORD *)v4 + 1);
    if (*((char *)v4 + 23) >= 0)
    {
      v6 = *((unsigned __int8 *)v4 + 23);
    }
    else
    {
      v4 = *(__int128 **)v4;
      v6 = v5;
    }
    sub_20AF4E53C((char *)v4, v6, "::", 2, 0, (uint64_t)&p_dst);
    if (*(v13 - 1) < 0)
    {
      sub_20AEC60F4(&xmmword_25463AF40, *((void **)v13 - 3), *((_QWORD *)v13 - 2));
    }
    else
    {
      v7 = *(_OWORD *)(v13 - 24);
      unk_25463AF50 = *((_QWORD *)v13 - 1);
      xmmword_25463AF40 = v7;
    }
    sub_20AEC2E90((void **)&p_dst);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_25463AF40, &dword_20AEBB000);
    __cxa_guard_release(&qword_25463AF20);
  }
  v11 = -1;
  if (byte_25463AF57 < 0)
  {
    sub_20AEC60F4(&__dst, (void *)xmmword_25463AF40, *((unint64_t *)&xmmword_25463AF40 + 1));
  }
  else
  {
    __dst = xmmword_25463AF40;
    v10 = unk_25463AF50;
  }
  v11 = 1;
  p_dst = (void ***)&__dst;
  v13 = "{";
  v14 = &__dst;
  v15 = "{";
  v16 = "{";
  sub_20AED5C4C((uint64_t *)&v14, (uint64_t)&__dst);
  sub_20AFAECE8((uint64_t)&v8, (uint64_t)&__dst, (uint64_t *)(a1 + 8));
  p_dst = (void ***)&__dst;
  v13 = "}";
  v14 = &__dst;
  v15 = "}";
  v16 = "}";
  if (v11 == -1)
    sub_20AECFAB8();
  p_p_dst = (void **)&p_dst;
  ((void (*)(void ***, __int128 *))off_24C40D6C0[v11])(&p_p_dst, &__dst);
  if (v11 == -1)
    sub_20AECFAB8();
  p_dst = &p_p_dst;
  result = ((uint64_t (*)(void ****, __int128 *))off_24C40D6D8[v11])(&p_dst, &__dst);
  if (v11 != -1)
    return ((uint64_t (*)(void ****, __int128 *))off_24C40D6A8[v11])(&p_dst, &__dst);
  return result;
}

void sub_20B0C07EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_list va;

  va_start(va, a7);
  sub_20AEC2E90((void **)va);
  __cxa_guard_abort(&qword_25463AF20);
  _Unwind_Resume(a1);
}

void sub_20B0C080C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_25463AF20);
  _Unwind_Resume(a1);
}

void sub_20B0C0824(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0C083C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0C0850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0C0864(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0C0878(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0C088C(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 23) = 8;
  strcpy((char *)a1, "cv3d.viz");
  *(_DWORD *)(a1 + 24) = 6;
}

void sub_20B0C08B8(uint64_t (***lpsrc)()@<X0>, _QWORD *a2@<X8>)
{
  sub_20B2346E4(lpsrc, 6, a2);
}

void sub_20B0C08F0(std::string *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t *v3;
  _QWORD v4[4];
  uint64_t v5;

  v5 = *MEMORY[0x24BDAC8D0];
  v4[0] = "DictionaryData must only contain Number, Boolean, String, Array or Dictionary values, but contains ";
  v4[1] = 99;
  v2 = *((unsigned __int8 *)a2 + 23);
  if ((v2 & 0x80u) == 0)
    v3 = a2;
  else
    v3 = (uint64_t *)*a2;
  if ((v2 & 0x80u) != 0)
    v2 = a2[1];
  v4[2] = v3;
  v4[3] = v2;
  sub_20AECFDF8((uint64_t)v4, (uint64_t)&v5, 0, 0, a1);
}

_QWORD *sub_20B0C0980(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA938;
  sub_20AF4EA3C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (!v2)
    return a1;
  p_shared_owners = (unint64_t *)&v2->__shared_owners_;
  do
    v4 = __ldaxr(p_shared_owners);
  while (__stlxr(v4 - 1, p_shared_owners));
  if (v4)
    return a1;
  ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
  std::__shared_weak_count::__release_weak(v2);
  return a1;
}

void sub_20B0C09F8(_QWORD *a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  *a1 = &off_24C3FA938;
  sub_20AF4EA3C((uint64_t)(a1 + 4));
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
  JUMPOUT(0x20BD3583CLL);
}

std::string *sub_20B0C0A70()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634F58);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634F58))
    return &stru_254634F40;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 6U]", __p);
  sub_20B531884((uint64_t)__p, &stru_254634F40);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634F40, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634F58);
  return &stru_254634F40;
}

void sub_20B0C0B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634F58);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634F58);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0C0B68(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 24), (void *)a2[2], a2[3]);
    }
    else
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 40) = a2[4];
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*((_BYTE *)a2 + 96))
  {
    v7 = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 56) = a2[10];
    *(_BYTE *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 1;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
    {
LABEL_8:
      v9 = a1 + 112;
      if (*((_BYTE *)a2 + 160))
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_20AEC60F4((_BYTE *)v8, (void *)a2[6], a2[7]);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(v8 + 16) = a2[8];
    *(_OWORD *)v8 = v10;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v9 = a1 + 112;
  if (*((_BYTE *)a2 + 160))
  {
LABEL_9:
    if (*((char *)a2 + 135) < 0)
    {
      sub_20AEC60F4(&v13, (void *)a2[14], a2[15]);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      v14 = a2[16];
    }
    *(_OWORD *)v9 = v13;
    *(_QWORD *)(v9 + 16) = v14;
    *(_BYTE *)(a1 + 136) = 1;
    v11 = *((_BYTE *)a2 + 200);
    if (v11)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  v11 = *((_BYTE *)a2 + 200);
  if (v11)
  {
LABEL_20:
    sub_20B0C39D4(a2 + 22, (uint64_t)&v13);
    *(_OWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 160) = v14;
    v11 = 1;
    goto LABEL_21;
  }
LABEL_17:
  *(_BYTE *)(a1 + 144) = 0;
LABEL_21:
  *(_BYTE *)(a1 + 168) = v11;
  return a1;
}

void sub_20B0C0D24(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[104] && v1[103] < 0)
    operator delete(*v3);
  if (v1[48])
  {
    if (v1[47] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B0C0D90@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_20AEC60F4(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_20AEC60F4(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_20B0C3C3C((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_20B0C0F3C(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0C0FA8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))off_24C40D788[v2])(&v4, a1);
  *(_DWORD *)(a1 + 16) = -1;
  return a1;
}

uint64_t sub_20B0C1000(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t result;
  std::logic_error *exception;
  _QWORD v7[4];
  std::string v8;

  v4 = *(_QWORD *)(a2 + 8);
  if (!v4)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v4 = *(_QWORD *)(a2 + 8);
  }
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 56))(v4);
  if (!*a1)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20B217798(a2, v7);
    sub_20B0C5920((uint64_t)&v8, (uint64_t)v7);
    std::logic_error::logic_error(exception, &v8);
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8D0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18F0, (void (*)(void *))MEMORY[0x24BEDAB88]);
  }
  return result;
}

void sub_20B0C10F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  uint64_t v22;
  void *v23;
  int v24;

  if (a22 < 0)
    operator delete(__p);
  if (a15 < 0)
  {
    operator delete(a10);
    if ((v24 & 1) == 0)
    {
LABEL_8:
      sub_20AEC147C(v22);
      _Unwind_Resume(a1);
    }
  }
  else if (!v24)
  {
    goto LABEL_8;
  }
  __cxa_free_exception(v23);
  goto LABEL_8;
}

void sub_20B0C1158(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  _BYTE v35[120];
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v2 = *(uint64_t **)(a1 + 64);
  v3 = *(uint64_t **)(a1 + 72);
  if (v2 == v3)
  {
LABEL_44:
    sub_20B1E2D0C((uint64_t *)(a1 + 8), (uint64_t)v35);
    sub_20B0BFB50((uint64_t)v35);
  }
  v4 = (__int128 *)(a1 + 8);
  while (1)
  {
    v6 = *v2;
    v5 = (std::__shared_weak_count *)v2[1];
    v38 = *v2;
    v39 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      break;
    v12 = *(const void **)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    if (v10 == v11)
      goto LABEL_11;
LABEL_12:
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 += 2;
    if (v2 == v3)
      goto LABEL_44;
  }
  v11 = *(unsigned __int8 *)(a1 + 31);
  v12 = (const void *)(a1 + 8);
  if (v10 != v11)
    goto LABEL_12;
LABEL_11:
  if (memcmp(v9, v12, v11))
    goto LABEL_12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(&v36, v6, *(unsigned int *)(a1 + 32));
  v15 = v36;
  if (!v36)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      sub_20AEC60F4(&v32, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
    else
    {
      v32 = *v4;
      v33 = *(_QWORD *)(a1 + 24);
    }
    v34 = *(_DWORD *)(a1 + 32);
    sub_20B1E2F90((uint64_t)&v32, (uint64_t)v35);
    sub_20B0BFB50((uint64_t)v35);
  }
  v16 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v16 != -1)
  {
    if (!(_DWORD)v16)
    {
      v17 = v37;
      if (v37)
      {
        v18 = (unint64_t *)&v37->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(std::__shared_weak_count **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v17;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      goto LABEL_33;
    }
    ((void (*)(_BYTE *, uint64_t))off_24C40D788[v16])(v35, a1 + 40);
    v15 = v36;
  }
  *(_DWORD *)(a1 + 56) = -1;
  v23 = v37;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_DWORD *)(a1 + 56) = 0;
LABEL_33:
  v26 = v37;
  if (v37)
  {
    v27 = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20B0C13F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  sub_20AEC147C(v17 - 96);
  sub_20AEC147C(v17 - 80);
  _Unwind_Resume(a1);
}

void sub_20B0C143C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC147C(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_20B0C1450(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC147C(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_20B0C1464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20AECCE40((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0C1478(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  void *__p[2];
  uint64_t v10;
  int v11;

  v6 = *(_QWORD *)(a2 + 8);
  if (!v6)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Visualization/src/IData.cpp", 200, (uint64_t)"data_", 5, (uint64_t)&unk_20B5A8A89, 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v6 = *(_QWORD *)(a2 + 8);
  }
  (*(void (**)(void **__return_ptr))(*(_QWORD *)v6 + 48))(__p);
  if (SHIBYTE(v10) < 0)
  {
    sub_20AEC60F4((_BYTE *)(a1 + 8), __p[0], (unint64_t)__p[1]);
    v7 = SHIBYTE(v10);
    *(_DWORD *)(a1 + 32) = v11;
    if (v7 < 0)
      operator delete(__p[0]);
  }
  else
  {
    *(_OWORD *)(a1 + 8) = *(_OWORD *)__p;
    *(_QWORD *)(a1 + 24) = v10;
    *(_DWORD *)(a1 + 32) = v11;
  }
  sub_20B0C1000(__p, a2);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)__p;
  *(_DWORD *)(a1 + 56) = 1;
  sub_20AF43774((_QWORD *)(a1 + 64), a3);
  return a1;
}

void sub_20B0C157C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0C15BC(uint64_t a1, __int128 *a2, uint64_t a3, uint64_t a4)
{
  __int128 v8;
  int v9;
  uint64_t v10;
  _BYTE v12[2];

  if (*((char *)a2 + 23) < 0)
  {
    sub_20AEC60F4((_BYTE *)(a1 + 8), *(void **)a2, *((_QWORD *)a2 + 1));
  }
  else
  {
    v8 = *a2;
    *(_QWORD *)(a1 + 24) = *((_QWORD *)a2 + 2);
    *(_OWORD *)(a1 + 8) = v8;
  }
  v9 = *((_DWORD *)a2 + 6);
  *(_BYTE *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 32) = v9;
  *(_DWORD *)(a1 + 56) = -1;
  v10 = *(unsigned int *)(a3 + 16);
  if ((_DWORD)v10 != -1)
  {
    ((void (*)(_BYTE *, uint64_t, uint64_t))off_24C40D798[v10])(v12, a1 + 40, a3);
    *(_DWORD *)(a1 + 56) = v10;
  }
  sub_20AF43774((_QWORD *)(a1 + 64), a4);
  return a1;
}

void sub_20B0C167C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, __int16 a11, char a12, char a13)
{
  void **v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;

  v17 = *(unsigned int *)(v14 + 56);
  if ((_DWORD)v17 != -1)
    ((void (*)(char *, uint64_t))off_24C40D788[v17])(&a13, v15);
  *(_DWORD *)(v14 + 56) = -1;
  if (*(char *)(v14 + 31) < 0)
    operator delete(*v13);
  _Unwind_Resume(exception_object);
}

void sub_20B0C16D8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  __int128 *v4;
  std::__shared_weak_count *v5;
  uint64_t v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  const void *v9;
  uint64_t v10;
  size_t v11;
  const void *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::__shared_weak_count *v17;
  unint64_t *v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unint64_t *v21;
  unint64_t v22;
  std::__shared_weak_count *v23;
  unint64_t *v24;
  unint64_t v25;
  std::__shared_weak_count *v26;
  unint64_t *v27;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  int v34;
  _BYTE v35[120];
  uint64_t v36;
  std::__shared_weak_count *v37;
  uint64_t v38;
  std::__shared_weak_count *v39;

  v2 = *(uint64_t **)(a1 + 64);
  v3 = *(uint64_t **)(a1 + 72);
  if (v2 == v3)
  {
LABEL_44:
    sub_20B1E2D0C((uint64_t *)(a1 + 8), (uint64_t)v35);
    sub_20B0BFB50((uint64_t)v35);
  }
  v4 = (__int128 *)(a1 + 8);
  while (1)
  {
    v6 = *v2;
    v5 = (std::__shared_weak_count *)v2[1];
    v38 = *v2;
    v39 = v5;
    if (v5)
    {
      p_shared_owners = (unint64_t *)&v5->__shared_owners_;
      do
        v8 = __ldxr(p_shared_owners);
      while (__stxr(v8 + 1, p_shared_owners));
    }
    v9 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 16))(v6);
    if ((*(char *)(a1 + 31) & 0x80000000) == 0)
      break;
    v12 = *(const void **)(a1 + 8);
    v11 = *(_QWORD *)(a1 + 16);
    if (v10 == v11)
      goto LABEL_11;
LABEL_12:
    if (v5)
    {
      v13 = (unint64_t *)&v5->__shared_owners_;
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
        std::__shared_weak_count::__release_weak(v5);
      }
    }
    v2 += 2;
    if (v2 == v3)
      goto LABEL_44;
  }
  v11 = *(unsigned __int8 *)(a1 + 31);
  v12 = (const void *)(a1 + 8);
  if (v10 != v11)
    goto LABEL_12;
LABEL_11:
  if (memcmp(v9, v12, v11))
    goto LABEL_12;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v6 + 24))(&v36, v6, *(unsigned int *)(a1 + 32));
  v15 = v36;
  if (!v36)
  {
    if (*(char *)(a1 + 31) < 0)
    {
      sub_20AEC60F4(&v32, *(void **)(a1 + 8), *(_QWORD *)(a1 + 16));
    }
    else
    {
      v32 = *v4;
      v33 = *(_QWORD *)(a1 + 24);
    }
    v34 = *(_DWORD *)(a1 + 32);
    sub_20B1E2F90((uint64_t)&v32, (uint64_t)v35);
    sub_20B0BFB50((uint64_t)v35);
  }
  v16 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v16 != -1)
  {
    if (!(_DWORD)v16)
    {
      v17 = v37;
      if (v37)
      {
        v18 = (unint64_t *)&v37->__shared_owners_;
        do
          v19 = __ldxr(v18);
        while (__stxr(v19 + 1, v18));
      }
      v20 = *(std::__shared_weak_count **)(a1 + 48);
      *(_QWORD *)(a1 + 40) = v15;
      *(_QWORD *)(a1 + 48) = v17;
      if (v20)
      {
        v21 = (unint64_t *)&v20->__shared_owners_;
        do
          v22 = __ldaxr(v21);
        while (__stlxr(v22 - 1, v21));
        if (!v22)
        {
          ((void (*)(std::__shared_weak_count *))v20->__on_zero_shared)(v20);
          std::__shared_weak_count::__release_weak(v20);
        }
      }
      goto LABEL_33;
    }
    ((void (*)(_BYTE *, uint64_t))off_24C40D788[v16])(v35, a1 + 40);
    v15 = v36;
  }
  *(_DWORD *)(a1 + 56) = -1;
  v23 = v37;
  *(_QWORD *)(a1 + 40) = v15;
  *(_QWORD *)(a1 + 48) = v23;
  if (v23)
  {
    v24 = (unint64_t *)&v23->__shared_owners_;
    do
      v25 = __ldxr(v24);
    while (__stxr(v25 + 1, v24));
  }
  *(_DWORD *)(a1 + 56) = 0;
LABEL_33:
  v26 = v37;
  if (v37)
  {
    v27 = (unint64_t *)&v37->__shared_owners_;
    do
      v28 = __ldaxr(v27);
    while (__stlxr(v28 - 1, v27));
    if (!v28)
    {
      ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
      std::__shared_weak_count::__release_weak(v26);
    }
  }
  v29 = v39;
  if (v39)
  {
    v30 = (unint64_t *)&v39->__shared_owners_;
    do
      v31 = __ldaxr(v30);
    while (__stlxr(v31 - 1, v30));
    if (!v31)
    {
      ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
      std::__shared_weak_count::__release_weak(v29);
    }
  }
}

void sub_20B0C1974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  uint64_t v17;

  sub_20AEC147C(v17 - 96);
  sub_20AEC147C(v17 - 80);
  _Unwind_Resume(a1);
}

void sub_20B0C19BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC147C(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_20B0C19D0(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AEC147C(v1 - 80);
  _Unwind_Resume(a1);
}

void sub_20B0C19E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_list va;

  va_start(va, a6);
  sub_20AECCE40((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0C19F8(int a1)
{
  unsigned __int8 v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  BOOL v6;
  uint64_t *v7;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD v11[2];
  __int128 v12;
  uint64_t v13;
  _QWORD v14[2];
  __int128 v15;
  uint64_t v16;
  _QWORD v17[2];
  _QWORD v18[2];
  uint64_t v19;
  __int128 v20;
  uint64_t v21;
  int v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;

  v25 = *MEMORY[0x24BDAC8D0];
  v2 = atomic_load((unsigned __int8 *)qword_25463AF80);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(qword_25463AF80))
  {
    v9 = operator new(0x28uLL);
    v9[1] = 0;
    v9[2] = 0;
    v9[3] = &off_24C4134E8;
    *v9 = &off_24C3FED48;
    *((_DWORD *)v9 + 8) = 0;
    v18[0] = v9 + 3;
    v18[1] = v9;
    v14[0] = 0;
    v14[1] = 0;
    sub_20AFF4C9C(&v15, v18, 1uLL);
    LODWORD(v19) = 0;
    v20 = v15;
    v21 = v16;
    v15 = 0uLL;
    v16 = 0;
    v10 = operator new(0x28uLL);
    v10[1] = 0;
    v10[2] = 0;
    *v10 = &off_24C3FED48;
    v10[3] = &off_24C4134E8;
    *((_DWORD *)v10 + 8) = 1;
    v17[0] = v10 + 3;
    v17[1] = v10;
    v11[0] = 0;
    v11[1] = 0;
    sub_20AFF4C9C(&v12, v17, 1uLL);
    v22 = 1;
    v23 = v12;
    v24 = v13;
    v12 = 0uLL;
    v13 = 0;
    sub_20B0C1CC0(&v19, 2);
    sub_20B0C1E84((uint64_t)&v22);
    sub_20B0C1E84((uint64_t)&v19);
    sub_20AFAAEB8((void **)&v12);
    sub_20AEC147C((uint64_t)v17);
    sub_20AEC147C((uint64_t)v11);
    sub_20AFAAEB8((void **)&v15);
    sub_20AEC147C((uint64_t)v18);
    sub_20AEC147C((uint64_t)v14);
    __cxa_atexit((void (*)(void *))sub_20B0C1F1C, &qword_25463AFB0, &dword_20AEBB000);
    __cxa_guard_release(qword_25463AF80);
  }
  v3 = qword_25463AFB8;
  if (!qword_25463AFB8)
    goto LABEL_12;
  v4 = &qword_25463AFB8;
  do
  {
    v5 = *(_DWORD *)(v3 + 32);
    v6 = v5 < a1;
    if (v5 >= a1)
      v7 = (uint64_t *)v3;
    else
      v7 = (uint64_t *)(v3 + 8);
    if (!v6)
      v4 = (uint64_t *)v3;
    v3 = *v7;
  }
  while (*v7);
  if (v4 == &qword_25463AFB8 || *((_DWORD *)v4 + 8) > a1)
LABEL_12:
    v4 = &qword_25463AFB8;
  return v4 + 5;
}

void sub_20B0C1C08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,char a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_20B0C1E84(v24);
  sub_20B0C1E84((uint64_t)&a24);
  sub_20AFAAEB8(&a11);
  sub_20AEC147C((uint64_t)&a20);
  sub_20AEC147C((uint64_t)&a9);
  sub_20AFAAEB8(&a17);
  sub_20AEC147C((uint64_t)&a22);
  sub_20AEC147C((uint64_t)&a15);
  __cxa_guard_abort(qword_25463AF80);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0C1CC0(uint64_t *result, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  BOOL v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  _DWORD *v13;

  qword_25463AFC0 = 0;
  qword_25463AFB8 = 0;
  qword_25463AFB0 = (uint64_t)&qword_25463AFB8;
  if (a2)
  {
    v2 = result;
    v3 = 0;
    v4 = &result[4 * a2];
    v5 = *(_DWORD *)result;
LABEL_6:
    v7 = &qword_25463AFB8;
LABEL_10:
    if (v3)
    {
      v10 = v7 + 1;
      if (v7[1])
        goto LABEL_24;
    }
    else
    {
LABEL_20:
      v10 = &qword_25463AFB8;
      v7 = &qword_25463AFB8;
    }
LABEL_21:
    v13 = operator new(0x40uLL);
    v13[8] = v5;
    sub_20AF43774((_QWORD *)v13 + 5, (uint64_t)(v2 + 1));
    *(_QWORD *)v13 = 0;
    *((_QWORD *)v13 + 1) = 0;
    *((_QWORD *)v13 + 2) = v7;
    *v10 = (uint64_t)v13;
    if (*(_QWORD *)qword_25463AFB0)
    {
      qword_25463AFB0 = *(_QWORD *)qword_25463AFB0;
      v13 = (_DWORD *)*v10;
    }
    result = sub_20AEC84C8((uint64_t *)qword_25463AFB8, (uint64_t *)v13);
    ++qword_25463AFC0;
LABEL_24:
    while (1)
    {
      v2 += 4;
      if (v2 == v4)
        break;
      v3 = qword_25463AFB8;
      v5 = *(_DWORD *)v2;
      if ((uint64_t *)qword_25463AFB0 == &qword_25463AFB8)
        goto LABEL_6;
      v6 = qword_25463AFB8;
      if (qword_25463AFB8)
      {
        do
        {
          v7 = (uint64_t *)v6;
          v6 = *(_QWORD *)(v6 + 8);
        }
        while (v6);
      }
      else
      {
        v8 = &qword_25463AFB8;
        do
        {
          v7 = (uint64_t *)v8[2];
          v9 = *v7 == (_QWORD)v8;
          v8 = v7;
        }
        while (v9);
      }
      if (*((_DWORD *)v7 + 8) < v5)
        goto LABEL_10;
      if (!qword_25463AFB8)
        goto LABEL_20;
      v11 = qword_25463AFB8;
      while (1)
      {
        while (1)
        {
          v7 = (uint64_t *)v11;
          v12 = *(_DWORD *)(v11 + 32);
          if (v12 <= v5)
            break;
          v11 = *v7;
          v10 = v7;
          if (!*v7)
            goto LABEL_21;
        }
        if (v12 >= v5)
          break;
        v11 = v7[1];
        if (!v11)
        {
          v10 = v7 + 1;
          goto LABEL_21;
        }
      }
    }
  }
  return result;
}

void sub_20B0C1E4C(_Unwind_Exception *a1)
{
  _QWORD *v1;

  sub_20B0C5B10(v1);
  _Unwind_Resume(a1);
}

void sub_20B0C1E60(_Unwind_Exception *a1)
{
  void *v1;

  operator delete(v1);
  sub_20B0C5B10((_QWORD *)qword_25463AFB8);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0C1E84(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  v2 = *(_QWORD *)(a1 + 8);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 16);
    v4 = *(void **)(a1 + 8);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 8);
    }
    *(_QWORD *)(a1 + 16) = v2;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_20B0C1F1C(uint64_t a1)
{
  sub_20B0C5B10(*(_QWORD **)(a1 + 8));
  return a1;
}

void sub_20B0C1F44(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  __int128 v4;
  _BYTE *v5;
  int v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  __int128 v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  unsigned __int8 v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  __int128 v20;
  void *v21[2];
  uint64_t v22;
  char v23;
  __int128 v24;
  uint64_t v25;
  uint64_t v26;
  void *v27[2];
  uint64_t v28;
  char v29;
  char v30;
  char v31;
  std::string v32;
  char v33;
  unsigned __int8 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  void *__dst[2];
  __int128 v43;
  void *v44;
  char v45;
  void *v46;
  void *v47;
  void *v48;
  char v49;
  char v50;
  char v51;
  char v52;
  char v53;
  char v54;
  _QWORD v55[3];
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  unsigned __int8 v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  __int128 v63;
  uint64_t v64;
  char v65;
  char v66;
  char v67;
  char v68;
  _QWORD v69[2];

  v69[0] = a1;
  v69[1] = a2;
  LOBYTE(v56) = 0;
  v68 = 0;
  v55[0] = &off_24C40D7B8;
  v55[1] = &v56;
  v55[2] = v69;
  sub_20B52A3E8((uint64_t)v55, (uint64_t)__dst);
  if (v54)
  {
    v31 = v67;
    if (v67)
    {
      v4 = v56;
      v56 = 0uLL;
      v20 = v4;
      *(_OWORD *)v21 = v57;
    }
    else
    {
      v20 = v56;
      LOBYTE(v21[0]) = 0;
      v30 = 0;
      if (v66)
      {
        v23 = 0;
        if (v59)
        {
          *(_OWORD *)v21 = v57;
          v22 = v58;
          v58 = 0;
          v57 = 0uLL;
          v23 = 1;
        }
        LOBYTE(v24) = 0;
        v29 = 0;
        if (v65)
        {
          v25 = v61;
          v24 = v60;
          v60 = 0uLL;
          v26 = v62;
          *(_OWORD *)v27 = v63;
          v28 = v64;
          v61 = 0;
          v63 = 0uLL;
          v64 = 0;
          v29 = 1;
        }
        v30 = 1;
      }
    }
  }
  else
  {
    *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
    v5 = sub_20AECEBD0(&v32.__r_.__value_.__s.__data_[16], &v43);
    v20 = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
    LOBYTE(v21[0]) = 0;
    v30 = 0;
    if (v41)
    {
      v23 = 0;
      v6 = v34;
      if (v34)
      {
        *(_OWORD *)v21 = *(_OWORD *)v5;
        v22 = *((_QWORD *)v5 + 2);
        *((_QWORD *)v5 + 1) = 0;
        *((_QWORD *)v5 + 2) = 0;
        *(_QWORD *)v5 = 0;
        v23 = 1;
      }
      LOBYTE(v24) = 0;
      v29 = 0;
      if (v40)
      {
        v25 = v36;
        v24 = v35;
        v35 = 0uLL;
        v26 = v37;
        *(_OWORD *)v27 = v38;
        v28 = v39;
        v36 = 0;
        v38 = 0uLL;
        v39 = 0;
        v29 = 1;
      }
      v30 = 1;
      v31 = 0;
      if (v6 && v33 < 0)
        operator delete((void *)v32.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v31 = 0;
    }
    if (!v54 && v53)
    {
      if (v52)
      {
        if (v51 < 0)
          operator delete(v48);
        if (SHIBYTE(v47) < 0)
          operator delete(v46);
      }
      if (v45 && SHIBYTE(v44) < 0)
        operator delete((void *)v43);
    }
  }
  if (v68)
  {
    if (v67)
    {
      v7 = (std::__shared_weak_count *)*((_QWORD *)&v56 + 1);
      if (*((_QWORD *)&v56 + 1))
      {
        v8 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
        do
          v9 = __ldaxr(v8);
        while (__stlxr(v9 - 1, v8));
        if (!v9)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
    }
    else if (v66)
    {
      if (v65)
      {
        if (SHIBYTE(v64) < 0)
          operator delete((void *)v63);
        if (SHIBYTE(v61) < 0)
          operator delete((void *)v60);
      }
      if (v59 && SHIBYTE(v58) < 0)
        operator delete((void *)v57);
    }
  }
  if (v31)
  {
    v10 = v20;
    v11 = *(_OWORD *)v21;
    v20 = 0uLL;
    *(_OWORD *)a3 = v10;
    *(_OWORD *)(a3 + 16) = v11;
    *(_BYTE *)(a3 + 120) = 1;
  }
  else
  {
    v15 = atomic_load((unsigned __int8 *)&qword_25463CF50);
    if ((v15 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF50))
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC3190, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF50);
    }
    if (*((_UNKNOWN ***)&v20 + 1) == &off_253EC3190)
    {
      sub_20AECEBD0(__dst, (__int128 *)v21);
      sub_20B0C5BC0(v20, (__int128 *)__dst, (uint64_t)&v56);
      *(_OWORD *)a3 = v56;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v66)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v16 = v59;
        if (v59)
        {
          *(_OWORD *)(a3 + 16) = v57;
          *(_QWORD *)(a3 + 32) = v58;
          v58 = 0;
          v57 = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v65)
        {
          v17 = v62;
          *(_QWORD *)(a3 + 64) = v61;
          *(_OWORD *)(a3 + 48) = v60;
          v60 = 0uLL;
          *(_QWORD *)(a3 + 72) = v17;
          *(_OWORD *)(a3 + 80) = v63;
          *(_QWORD *)(a3 + 96) = v64;
          v61 = 0;
          v63 = 0uLL;
          v64 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v16 && SHIBYTE(v58) < 0)
          operator delete((void *)v57);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (v50)
      {
        if (v49)
        {
          if (SHIBYTE(v48) < 0)
            operator delete(v47);
          if (SHIBYTE(v46) < 0)
            operator delete(v44);
        }
        if (BYTE8(v43) && SBYTE7(v43) < 0)
          operator delete(__dst[0]);
      }
    }
    else
    {
      sub_20B5287D4((uint64_t)&v20, &v32);
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20AEC60F4(__dst, v32.__r_.__value_.__l.__data_, v32.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)&v32.__r_.__value_.__l.__data_;
        *(_QWORD *)&v43 = *((_QWORD *)&v32.__r_.__value_.__l + 2);
      }
      BYTE8(v43) = 1;
      LOBYTE(v44) = 0;
      v49 = 0;
      v50 = 1;
      sub_20B0C5BC0(3u, (__int128 *)__dst, (uint64_t)&v56);
      *(_OWORD *)a3 = v56;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v66)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v18 = v59;
        if (v59)
        {
          *(_OWORD *)(a3 + 16) = v57;
          *(_QWORD *)(a3 + 32) = v58;
          v58 = 0;
          v57 = 0uLL;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v65)
        {
          v19 = v62;
          *(_QWORD *)(a3 + 64) = v61;
          *(_OWORD *)(a3 + 48) = v60;
          v60 = 0uLL;
          *(_QWORD *)(a3 + 72) = v19;
          *(_OWORD *)(a3 + 80) = v63;
          *(_QWORD *)(a3 + 96) = v64;
          v61 = 0;
          v63 = 0uLL;
          v64 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v18 && SHIBYTE(v58) < 0)
          operator delete((void *)v57);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (v50)
      {
        if (v49)
        {
          if (SHIBYTE(v48) < 0)
            operator delete(v47);
          if (SHIBYTE(v46) < 0)
            operator delete(v44);
        }
        if (BYTE8(v43) && SBYTE7(v43) < 0)
          operator delete(__dst[0]);
      }
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
  if (v31)
  {
    v12 = (std::__shared_weak_count *)*((_QWORD *)&v20 + 1);
    if (*((_QWORD *)&v20 + 1))
    {
      v13 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v14 = __ldaxr(v13);
      while (__stlxr(v14 - 1, v13));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
  }
  else if (v30)
  {
    if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete(v27[0]);
      if (SHIBYTE(v25) < 0)
        operator delete((void *)v24);
    }
    if (v23 && SHIBYTE(v22) < 0)
      operator delete(v21[0]);
  }
}

void sub_20B0C2614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a30 < 0)
    operator delete(__p);
  sub_20AED7018((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0C268C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  unsigned __int8 v12;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  _BYTE v17[32];
  uint64_t v18;
  char v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  void *v23[2];
  uint64_t v24;
  char v25;
  char v26;
  char v27;
  std::string v28;
  char v29;
  unsigned __int8 v30;
  __int128 v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  char v36;
  char v37;
  void *__dst[2];
  __int128 v39;
  void *v40;
  char v41;
  void *v42;
  void *v43;
  void *v44;
  char v45;
  char v46;
  char v47;
  char v48;
  char v49;
  char v50;
  _QWORD v51[3];
  _BYTE v52[32];
  uint64_t v53;
  unsigned __int8 v54;
  __int128 v55;
  uint64_t v56;
  uint64_t v57;
  __int128 v58;
  uint64_t v59;
  char v60;
  char v61;
  char v62;
  char v63;
  _QWORD v64[2];

  v64[0] = a2;
  v64[1] = a1;
  v52[0] = 0;
  v63 = 0;
  v51[0] = &off_24C40D858;
  v51[1] = v52;
  v51[2] = v64;
  sub_20B52A3E8((uint64_t)v51, (uint64_t)__dst);
  if (v50)
  {
    v27 = v62;
    if (v62)
    {
      *(_QWORD *)v17 = &off_24C411E78;
      *(_OWORD *)&v17[8] = *(_OWORD *)&v52[8];
      *(_QWORD *)&v52[8] = 0;
      *(_QWORD *)&v52[16] = 0;
    }
    else
    {
      *(_OWORD *)v17 = *(_OWORD *)v52;
      v17[16] = 0;
      v26 = 0;
      if (v61)
      {
        v19 = 0;
        if (v54)
        {
          *(_OWORD *)&v17[16] = *(_OWORD *)&v52[16];
          v18 = v53;
          *(_QWORD *)&v52[24] = 0;
          v53 = 0;
          *(_QWORD *)&v52[16] = 0;
          v19 = 1;
        }
        LOBYTE(v20) = 0;
        v25 = 0;
        if (v60)
        {
          v21 = v56;
          v20 = v55;
          v55 = 0uLL;
          v22 = v57;
          *(_OWORD *)v23 = v58;
          v24 = v59;
          v56 = 0;
          v58 = 0uLL;
          v59 = 0;
          v25 = 1;
        }
        v26 = 1;
      }
    }
  }
  else
  {
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
    v4 = sub_20AECEBD0(&v28.__r_.__value_.__s.__data_[16], &v39);
    *(_OWORD *)v17 = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
    v17[16] = 0;
    v26 = 0;
    if (v37)
    {
      v19 = 0;
      v5 = v30;
      if (v30)
      {
        *(_OWORD *)&v17[16] = *(_OWORD *)v4;
        v18 = *((_QWORD *)v4 + 2);
        *((_QWORD *)v4 + 1) = 0;
        *((_QWORD *)v4 + 2) = 0;
        *(_QWORD *)v4 = 0;
        v19 = 1;
      }
      LOBYTE(v20) = 0;
      v25 = 0;
      if (v36)
      {
        v21 = v32;
        v20 = v31;
        v31 = 0uLL;
        v22 = v33;
        *(_OWORD *)v23 = v34;
        v24 = v35;
        v32 = 0;
        v34 = 0uLL;
        v35 = 0;
        v25 = 1;
      }
      v26 = 1;
      v27 = 0;
      if (v5 && v29 < 0)
        operator delete((void *)v28.__r_.__value_.__r.__words[2]);
    }
    else
    {
      v27 = 0;
    }
    if (!v50 && v49)
    {
      if (v48)
      {
        if (v47 < 0)
          operator delete(v44);
        if (SHIBYTE(v43) < 0)
          operator delete(v42);
      }
      if (v41 && SHIBYTE(v40) < 0)
        operator delete((void *)v39);
    }
  }
  if (v63)
  {
    if (v62)
    {
      v6 = *(std::__shared_weak_count **)&v52[16];
      if (*(_QWORD *)&v52[16])
      {
        v7 = (unint64_t *)(*(_QWORD *)&v52[16] + 8);
        do
          v8 = __ldaxr(v7);
        while (__stlxr(v8 - 1, v7));
        if (!v8)
        {
          ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
          std::__shared_weak_count::__release_weak(v6);
        }
      }
    }
    else if (v61)
    {
      if (v60)
      {
        if (SHIBYTE(v59) < 0)
          operator delete((void *)v58);
        if (SHIBYTE(v56) < 0)
          operator delete((void *)v55);
      }
      if (v54 && SHIBYTE(v53) < 0)
        operator delete(*(void **)&v52[16]);
    }
  }
  if (v27)
  {
    *(_QWORD *)a3 = &off_24C411E78;
    *(_OWORD *)(a3 + 8) = *(_OWORD *)&v17[8];
    *(_QWORD *)&v17[8] = 0;
    *(_QWORD *)&v17[16] = 0;
    *(_BYTE *)(a3 + 120) = 1;
  }
  else
  {
    v12 = atomic_load((unsigned __int8 *)&qword_25463CF50);
    if ((v12 & 1) == 0 && __cxa_guard_acquire(&qword_25463CF50))
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC3190, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF50);
    }
    if (*(_UNKNOWN ***)&v17[8] == &off_253EC3190)
    {
      sub_20AECEBD0(__dst, (__int128 *)&v17[16]);
      sub_20B0C5BC0(v17[0], (__int128 *)__dst, (uint64_t)v52);
      *(_OWORD *)a3 = *(_OWORD *)v52;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v61)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v13 = v54;
        if (v54)
        {
          *(_OWORD *)(a3 + 16) = *(_OWORD *)&v52[16];
          *(_QWORD *)(a3 + 32) = v53;
          *(_QWORD *)&v52[24] = 0;
          v53 = 0;
          *(_QWORD *)&v52[16] = 0;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v60)
        {
          v14 = v57;
          *(_QWORD *)(a3 + 64) = v56;
          *(_OWORD *)(a3 + 48) = v55;
          v55 = 0uLL;
          *(_QWORD *)(a3 + 72) = v14;
          *(_OWORD *)(a3 + 80) = v58;
          *(_QWORD *)(a3 + 96) = v59;
          v56 = 0;
          v58 = 0uLL;
          v59 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v13 && SHIBYTE(v53) < 0)
          operator delete(*(void **)&v52[16]);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (v46)
      {
        if (v45)
        {
          if (SHIBYTE(v44) < 0)
            operator delete(v43);
          if (SHIBYTE(v42) < 0)
            operator delete(v40);
        }
        if (BYTE8(v39) && SBYTE7(v39) < 0)
          operator delete(__dst[0]);
      }
    }
    else
    {
      sub_20B5287D4((uint64_t)v17, &v28);
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_20AEC60F4(__dst, v28.__r_.__value_.__l.__data_, v28.__r_.__value_.__l.__size_);
      }
      else
      {
        *(_OWORD *)__dst = *(_OWORD *)&v28.__r_.__value_.__l.__data_;
        *(_QWORD *)&v39 = *((_QWORD *)&v28.__r_.__value_.__l + 2);
      }
      BYTE8(v39) = 1;
      LOBYTE(v40) = 0;
      v45 = 0;
      v46 = 1;
      sub_20B0C5BC0(3u, (__int128 *)__dst, (uint64_t)v52);
      *(_OWORD *)a3 = *(_OWORD *)v52;
      *(_BYTE *)(a3 + 16) = 0;
      *(_BYTE *)(a3 + 112) = 0;
      if (v61)
      {
        *(_BYTE *)(a3 + 40) = 0;
        v15 = v54;
        if (v54)
        {
          *(_OWORD *)(a3 + 16) = *(_OWORD *)&v52[16];
          *(_QWORD *)(a3 + 32) = v53;
          *(_QWORD *)&v52[24] = 0;
          v53 = 0;
          *(_QWORD *)&v52[16] = 0;
          *(_BYTE *)(a3 + 40) = 1;
        }
        *(_BYTE *)(a3 + 48) = 0;
        *(_BYTE *)(a3 + 104) = 0;
        if (v60)
        {
          v16 = v57;
          *(_QWORD *)(a3 + 64) = v56;
          *(_OWORD *)(a3 + 48) = v55;
          v55 = 0uLL;
          *(_QWORD *)(a3 + 72) = v16;
          *(_OWORD *)(a3 + 80) = v58;
          *(_QWORD *)(a3 + 96) = v59;
          v56 = 0;
          v58 = 0uLL;
          v59 = 0;
          *(_BYTE *)(a3 + 104) = 1;
        }
        *(_BYTE *)(a3 + 112) = 1;
        *(_BYTE *)(a3 + 120) = 0;
        if (v15 && SHIBYTE(v53) < 0)
          operator delete(*(void **)&v52[16]);
      }
      else
      {
        *(_BYTE *)(a3 + 120) = 0;
      }
      if (v46)
      {
        if (v45)
        {
          if (SHIBYTE(v44) < 0)
            operator delete(v43);
          if (SHIBYTE(v42) < 0)
            operator delete(v40);
        }
        if (BYTE8(v39) && SBYTE7(v39) < 0)
          operator delete(__dst[0]);
      }
      if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v28.__r_.__value_.__l.__data_);
    }
  }
  if (v27)
  {
    v9 = *(std::__shared_weak_count **)&v17[16];
    if (*(_QWORD *)&v17[16])
    {
      v10 = (unint64_t *)(*(_QWORD *)&v17[16] + 8);
      do
        v11 = __ldaxr(v10);
      while (__stlxr(v11 - 1, v10));
      if (!v11)
      {
        ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
        std::__shared_weak_count::__release_weak(v9);
      }
    }
  }
  else if (v26)
  {
    if (v25)
    {
      if (SHIBYTE(v24) < 0)
        operator delete(v23[0]);
      if (SHIBYTE(v21) < 0)
        operator delete((void *)v20);
    }
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(*(void **)&v17[16]);
  }
}

void sub_20B0C2D7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  if (a30 < 0)
  {
    operator delete(__p);
    sub_20AFAB33C((uint64_t)&a9);
    _Unwind_Resume(a1);
  }
  sub_20AFAB33C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0C2DE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41)
{
  uint64_t v41;

  sub_20AECD704((uint64_t)&a41);
  sub_20B0C48AC(v41 - 200);
  _Unwind_Resume(a1);
}

void sub_20B0C2DFC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B0C48AC(v1 - 200);
  _Unwind_Resume(a1);
}

void sub_20B0C2E10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  size_t v17;
  void **v18;
  unint64_t v19;
  unint64_t v20;
  const void *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *__dst[2];
  unint64_t v30;
  _QWORD v31[5];
  _QWORD *v32;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v31[0] = v5;
  if (*(_BYTE *)(a3 + 24))
  {
    v6 = *(char *)(a3 + 23);
    if (v6 >= 0)
      v7 = a3;
    else
      v7 = *(_QWORD *)a3;
    if (v6 >= 0)
      v8 = *(unsigned __int8 *)(a3 + 23);
    else
      v8 = *(_QWORD *)(a3 + 8);
    sub_20AEC01D0((_QWORD *)(v5 + 16), v7, v8);
  }
  if (*(_BYTE *)(a3 + 80))
  {
    v9 = sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)"#", 1);
    v12 = *(_QWORD *)(a3 + 32);
    v11 = a3 + 32;
    v10 = v12;
    v13 = *(char *)(v11 + 23);
    if (v13 >= 0)
      v14 = v11;
    else
      v14 = v10;
    if (v13 >= 0)
      v15 = *(unsigned __int8 *)(v11 + 23);
    else
      v15 = *(_QWORD *)(v11 + 8);
    sub_20AEC01D0(v9, v14, v15);
  }
  v16 = *(_DWORD *)(v5 + 120);
  if ((v16 & 0x10) != 0)
  {
    v19 = *(_QWORD *)(v5 + 112);
    v20 = *(_QWORD *)(v5 + 72);
    if (v19 < v20)
    {
      *(_QWORD *)(v5 + 112) = v20;
      v19 = v20;
    }
    v21 = *(const void **)(v5 + 64);
    v17 = v19 - (_QWORD)v21;
    if (v19 - (unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_38;
  }
  else
  {
    if ((v16 & 8) == 0)
    {
      v17 = 0;
      HIBYTE(v30) = 0;
      v18 = __dst;
      goto LABEL_30;
    }
    v21 = *(const void **)(v5 + 40);
    v17 = *(_QWORD *)(v5 + 56) - (_QWORD)v21;
    if (v17 >= 0x7FFFFFFFFFFFFFF8)
LABEL_38:
      sub_20AEC0138();
  }
  if (v17 >= 0x17)
  {
    v22 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v22 = v17 | 7;
    v23 = v22 + 1;
    v18 = (void **)operator new(v22 + 1);
    __dst[1] = (void *)v17;
    v30 = v23 | 0x8000000000000000;
    __dst[0] = v18;
    goto LABEL_29;
  }
  HIBYTE(v30) = v17;
  v18 = __dst;
  if (v17)
LABEL_29:
    memmove(v18, v21, v17);
LABEL_30:
  *((_BYTE *)v18 + v17) = 0;
  v24 = v31[0];
  if (v31[0])
  {
    v25 = MEMORY[0x24BEDB7F0];
    v26 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v31[0] = *MEMORY[0x24BEDB7F0];
    v27 = *(_QWORD *)(v25 + 72);
    *(_QWORD *)(v24 + *(_QWORD *)(v26 - 24)) = *(_QWORD *)(v25 + 64);
    *(_QWORD *)(v24 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v24 + 16) = v27;
    if (*(char *)(v24 + 111) < 0)
      operator delete(*(void **)(v24 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v24 + 128);
    MEMORY[0x20BD3583C](v24, 0x10B2C40EED050F3);
  }
  v31[0] = a2;
  v31[1] = __dst;
  v31[2] = a2;
  v31[3] = __dst;
  v31[4] = __dst;
  v28 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v28 == -1)
    sub_20AECFAB8();
  v32 = v31;
  ((void (*)(_QWORD **, uint64_t))off_24C40D740[v28])(&v32, a2);
  if (SHIBYTE(v30) < 0)
    operator delete(__dst[0]);
}

void sub_20B0C30BC(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B0C30E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0C30FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0C3110(uint64_t a1, unint64_t a2)
{
  void **v2;
  void **v4;
  uint64_t v5;
  char *v6;
  char *v7;
  uint64_t v8;
  void **v9;
  __int128 v10;

  v2 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 5) < a2)
  {
    if (a2 >= 0x2AAAAAAAAAAAAABLL)
      sub_20AEC60B8();
    v4 = *(void ***)(a1 + 8);
    v5 = 96 * a2;
    v6 = (char *)operator new(96 * a2);
    v7 = &v6[(char *)v4 - (char *)v2];
    *(_QWORD *)&v10 = v7;
    *((_QWORD *)&v10 + 1) = &v6[v5];
    if (v4 != v2)
    {
      v8 = 0;
      do
      {
        sub_20AED3B1C(&v7[v8 * 8 - 96], (__int128 *)&v4[v8 - 12]);
        v8 -= 12;
      }
      while (&v4[v8] != v2);
      v2 = *(void ***)a1;
      v9 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = &v7[v8 * 8];
      *(_OWORD *)(a1 + 8) = v10;
      while (1)
      {
        if (v9 == v2)
          goto LABEL_17;
        if (*((_BYTE *)v9 - 16) && *((char *)v9 - 41) < 0)
        {
          operator delete(*(v9 - 8));
          if (!*((_BYTE *)v9 - 72))
            goto LABEL_7;
        }
        else if (!*((_BYTE *)v9 - 72))
        {
          goto LABEL_7;
        }
        if (*((char *)v9 - 73) < 0)
          operator delete(*(v9 - 12));
LABEL_7:
        v9 -= 12;
      }
    }
    *(_QWORD *)a1 = v7;
    *(_QWORD *)(a1 + 8) = v7;
    *(_QWORD *)(a1 + 16) = &v6[v5];
LABEL_17:
    if (v2)
      operator delete(v2);
  }
}

char *sub_20B0C32C0(_QWORD *a1, uint64_t a2)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v6;
  _OWORD *v7;
  char *v8;
  char *v9;
  char *v10;
  char *v11;
  unsigned __int128 *v12;
  unsigned __int128 v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  void **v18;
  __int128 v20;

  v3 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[1] - *a1) >> 5);
  v4 = v3 + 1;
  if (v3 + 1 > 0x2AAAAAAAAAAAAAALL)
    sub_20AEC60B8();
  if (0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5) > v4)
    v4 = 0x5555555555555556 * ((uint64_t)(a1[2] - *a1) >> 5);
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[2] - *a1) >> 5) >= 0x155555555555555)
    v6 = 0x2AAAAAAAAAAAAAALL;
  else
    v6 = v4;
  if (v6)
  {
    if (v6 > 0x2AAAAAAAAAAAAAALL)
      sub_20AEC60CC();
    v7 = operator new(96 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = (char *)&v7[6 * v3];
  *((_QWORD *)&v20 + 1) = &v7[6 * v6];
  *v8 = 0;
  v8[24] = 0;
  if (*(_BYTE *)(a2 + 24))
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)a2 = 0;
    v8[24] = 1;
  }
  v9 = (char *)&v7[6 * v3];
  v9[32] = 0;
  v10 = v9 + 32;
  v10[48] = 0;
  v11 = (char *)&v7[6 * v3];
  if (*(_BYTE *)(a2 + 80))
  {
    *(_OWORD *)v10 = *(_OWORD *)(a2 + 32);
    *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 48);
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)(a2 + 48) = 0;
    *(_QWORD *)(a2 + 32) = 0;
    v12 = (unsigned __int128 *)(a2 + 64);
    do
      v13 = __ldaxp(v12);
    while (__stlxp(v13, v12));
    v7[6 * v3 + 4] = v13;
    v10[48] = 1;
    v11 = (char *)&v7[6 * v3];
  }
  v14 = v11 + 96;
  *(_QWORD *)&v20 = v11 + 96;
  v16 = (char *)*a1;
  v15 = (char *)a1[1];
  if (v15 != (char *)*a1)
  {
    v17 = 0;
    do
    {
      sub_20AED3B1C(&v8[v17 - 96], (__int128 *)&v15[v17 - 96]);
      v17 -= 96;
    }
    while (&v15[v17] != v16);
    v15 = (char *)*a1;
    v18 = (void **)a1[1];
    *a1 = &v8[v17];
    *(_OWORD *)(a1 + 1) = v20;
    v14 = (char *)v20;
    while (1)
    {
      if (v18 == (void **)v15)
        goto LABEL_31;
      if (*((_BYTE *)v18 - 16) && *((char *)v18 - 41) < 0)
      {
        operator delete(*(v18 - 8));
        if (!*((_BYTE *)v18 - 72))
          goto LABEL_21;
      }
      else if (!*((_BYTE *)v18 - 72))
      {
        goto LABEL_21;
      }
      if (*((char *)v18 - 73) < 0)
        operator delete(*(v18 - 12));
LABEL_21:
      v18 -= 12;
    }
  }
  *a1 = v8;
  a1[1] = v14;
  a1[2] = *((_QWORD *)&v20 + 1);
LABEL_31:
  if (v15)
    operator delete(v15);
  return v14;
}

uint64_t sub_20B0C3554(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t result;
  uint64_t *v6;
  unsigned __int8 ***v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 **v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  int v15;
  unsigned __int8 *v16;
  uint64_t v17;
  char v18;

  result = sub_20B0C369C((uint64_t)&v18, a2, a3);
  if ((_DWORD)result)
  {
    v6 = (uint64_t *)a2[5];
    v7 = (unsigned __int8 ***)a3[5];
    if (*((_BYTE *)v6 + 24))
      v8 = *((_BYTE *)v7 + 24) == 0;
    else
      v8 = 1;
    if (v8)
    {
      return (*((_BYTE *)v6 + 24) != 0) == (*((_BYTE *)v7 + 24) != 0);
    }
    else
    {
      v10 = *v6;
      v9 = v6[1];
      v11 = *v7;
      if (v9 - *v6 == (char *)v7[1] - (char *)*v7)
      {
        if (v10 == v9)
          return 1;
        while (1)
        {
          v12 = *(unsigned __int8 *)(v10 + 23);
          if ((v12 & 0x80u) == 0)
            v13 = (unsigned __int8 *)*(unsigned __int8 *)(v10 + 23);
          else
            v13 = *(unsigned __int8 **)(v10 + 8);
          v14 = (unsigned __int8 *)*((unsigned __int8 *)v11 + 23);
          v15 = (char)v14;
          if ((char)v14 < 0)
            v14 = v11[1];
          if (v13 != v14)
            break;
          if (v15 >= 0)
            v16 = (unsigned __int8 *)v11;
          else
            v16 = *v11;
          if ((v12 & 0x80) != 0)
          {
            if (memcmp(*(const void **)v10, v16, *(_QWORD *)(v10 + 8)))
              return 0;
          }
          else if (*(_BYTE *)(v10 + 23))
          {
            v17 = 0;
            while (*(unsigned __int8 *)(v10 + v17) == v16[v17])
            {
              if (v12 == ++v17)
                goto LABEL_13;
            }
            return 0;
          }
LABEL_13:
          v10 += 24;
          v11 += 3;
          result = 1;
          if (v10 == v9)
            return result;
        }
      }
      return 0;
    }
  }
  return result;
}

uint64_t sub_20B0C369C(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  unsigned __int8 **v16;
  BOOL v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  int v21;
  unsigned __int8 *v22;
  uint64_t v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  char v30;

  if (!sub_20B0C3874((uint64_t)&v30, a2, a3))
    return 0;
  v5 = (unsigned __int8 *)a2[3];
  v6 = (unsigned __int8 **)a3[3];
  v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0))
      return 0;
    goto LABEL_25;
  }
  v10 = v5[23];
  if ((v10 & 0x80u) == 0)
    v11 = (unsigned __int8 *)v5[23];
  else
    v11 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
  v12 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
  v13 = (char)v12;
  if ((char)v12 < 0)
    v12 = v6[1];
  if (v11 != v12)
    return 0;
  if (v13 >= 0)
    v14 = (unsigned __int8 *)a3[3];
  else
    v14 = *v6;
  if ((v10 & 0x80) == 0)
  {
    if (v5[23])
    {
      while (*v5 == *v14)
      {
        ++v5;
        ++v14;
        if (!--v10)
          goto LABEL_25;
      }
      return 0;
    }
    goto LABEL_25;
  }
  if (memcmp(*(const void **)v5, v14, *((_QWORD *)v5 + 1)))
    return 0;
LABEL_25:
  v15 = (unsigned __int8 *)a2[4];
  v16 = (unsigned __int8 **)a3[4];
  if (v15[24])
    v17 = *((_BYTE *)v16 + 24) == 0;
  else
    v17 = 1;
  if (v17)
    return (v15[24] != 0) == (*((_BYTE *)v16 + 24) != 0);
  v18 = v15[23];
  if ((v18 & 0x80u) == 0)
    v19 = (unsigned __int8 *)v15[23];
  else
    v19 = (unsigned __int8 *)*((_QWORD *)v15 + 1);
  v20 = (unsigned __int8 *)*((unsigned __int8 *)v16 + 23);
  v21 = (char)v20;
  if ((char)v20 < 0)
    v20 = v16[1];
  if (v19 != v20)
    return 0;
  if (v21 >= 0)
    v22 = (unsigned __int8 *)a3[4];
  else
    v22 = *v16;
  if ((v18 & 0x80) != 0)
    return memcmp(*(const void **)v15, v22, *((_QWORD *)v15 + 1)) == 0;
  if (!v15[23])
    return 1;
  v23 = v18 - 1;
  do
  {
    v25 = *v15++;
    v24 = v25;
    v27 = *v22++;
    v26 = v27;
    v29 = v23-- != 0;
    result = v24 == v26;
  }
  while (v24 == v26 && v29);
  return result;
}

BOOL sub_20B0C3874(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  unsigned __int8 *v5;
  unsigned __int8 **v6;
  int v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t v13;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  int v16;
  unsigned __int8 *v17;

  if (*(_QWORD *)*a2 != *(_QWORD *)*a3 || *(unsigned __int8 *)(*a2 + 8) != *(unsigned __int8 *)(*a3 + 8))
    return 0;
  v5 = (unsigned __int8 *)a2[1];
  v6 = (unsigned __int8 **)a3[1];
  v7 = *((unsigned __int8 *)v6 + 24);
  if (v5[24])
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
  {
    if ((v5[24] != 0) != (v7 != 0))
      return 0;
  }
  else
  {
    v13 = v5[23];
    if ((v13 & 0x80u) == 0)
      v14 = (unsigned __int8 *)v5[23];
    else
      v14 = (unsigned __int8 *)*((_QWORD *)v5 + 1);
    v15 = (unsigned __int8 *)*((unsigned __int8 *)v6 + 23);
    v16 = (char)v15;
    if ((char)v15 < 0)
      v15 = v6[1];
    if (v14 != v15)
      return 0;
    if (v16 >= 0)
      v17 = (unsigned __int8 *)a3[1];
    else
      v17 = *v6;
    if ((v13 & 0x80) != 0)
    {
      if (memcmp(*(const void **)v5, v17, *((_QWORD *)v5 + 1)))
        return 0;
    }
    else if (v5[23])
    {
      while (*v5 == *v17)
      {
        ++v5;
        ++v17;
        if (!--v13)
          goto LABEL_9;
      }
      return 0;
    }
  }
LABEL_9:
  v9 = a2[2];
  v10 = a3[2];
  if (*(_BYTE *)(v9 + 16))
    v11 = *(_BYTE *)(v10 + 16) == 0;
  else
    v11 = 1;
  if (v11)
    return (*(_BYTE *)(v9 + 16) != 0) == (*(_BYTE *)(v10 + 16) != 0);
  if (*(_QWORD *)v9 == *(_QWORD *)v10)
    return *(unsigned __int8 *)(v9 + 8) == *(unsigned __int8 *)(v10 + 8);
  return 0;
}

double sub_20B0C39D4@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (a1[1] - *a1) >> 5;
  v7 = 0;
  v6 = 0uLL;
  sub_20AECF88C((uint64_t)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_20B0C3ADC(*a1, a1[1], (uint64_t)&v6);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_20B0C3A48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0C3ADC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[24];
  int v14;
  char v15;
  _QWORD v16[2];

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v14 = 0;
      sub_20B0C2E10((uint64_t)v16, (uint64_t)v13, v5);
      if (v14 == -1)
        sub_20AECFAB8();
      v16[0] = &v15;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C40D770[v14])(__p, v16, v13);
      if (v14 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24C40D758[v14])(v16, v13);
      v7 = *(_QWORD *)(a3 + 8);
      if (v7 < *(_QWORD *)(a3 + 16))
      {
        v6 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v12;
        *(_OWORD *)v7 = v6;
        *(_QWORD *)(a3 + 8) = v7 + 24;
      }
      else
      {
        v8 = sub_20AEC81D4((void **)a3, (uint64_t)__p);
        v9 = SHIBYTE(v12);
        *(_QWORD *)(a3 + 8) = v8;
        if (v9 < 0)
          operator delete(__p[0]);
      }
      v5 += 96;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_20B0C3BE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B0C3C3C@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_20B0C3110((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_20B216330(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_20B0C32C0(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_20B0C3DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0C3F00(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_20B0C3F58(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 8);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_20B0C3FB0(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_20B0C3FD4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  unint64_t *v4;
  unint64_t v5;

  v3 = a3[1];
  *a2 = *a3;
  a2[1] = v3;
  if (v3)
  {
    v4 = (unint64_t *)(v3 + 8);
    do
      v5 = __ldxr(v4);
    while (__stxr(v5 + 1, v4));
  }
}

void sub_20B0C3FFC()
{
  JUMPOUT(0x20BD3583CLL);
}

double sub_20B0C4010(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  unint64_t v7;
  size_t v8;
  __int128 *p_dst;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  char *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  std::__shared_weak_count *v28;
  unint64_t *v29;
  unint64_t v30;
  double result;
  __int128 v32;
  __int128 __dst;
  unint64_t v34;
  _QWORD v35[3];
  _QWORD v36[2];
  _QWORD v37[3];
  const void *v38;
  uint64_t v39;
  const void *v40;
  unint64_t v41;
  void *__p;
  char v43;
  unint64_t v44;
  int v45;
  uint64_t v46;
  __int128 v47;
  __int128 v48;
  char *v49;
  char *v50;
  char v51[8];
  void *v52;
  uint64_t v53;
  unsigned __int8 v54;
  uint64_t v55;
  std::__shared_weak_count *v56;
  unsigned int v57;
  char *v58;
  char *v59;
  __int128 v60;
  std::__shared_weak_count *v61;
  uint64_t v62;

  v62 = *MEMORY[0x24BDAC8D0];
  v1 = *(_QWORD *)(a1 + 8);
  sub_20B0C1478((uint64_t)&v51, **(_QWORD **)(a1 + 16), *(_QWORD *)(*(_QWORD *)(a1 + 16) + 8));
  sub_20AEC0BD8((uint64_t)v36);
  v35[0] = &off_24C41EA78;
  v35[1] = 1;
  v35[2] = v37;
  LODWORD(v60) = 2;
  std::ostream::write();
  LODWORD(v60) = 2;
  std::ostream::write();
  v2 = v54;
  if ((v54 & 0x80u) != 0)
    v2 = v53;
  *(_QWORD *)&v60 = v2;
  std::ostream::write();
  std::ostream::write();
  std::ostream::write();
  if (v57 > 1)
    sub_20AECFAB8();
  v3 = v55;
  v4 = v56;
  if (v56)
  {
    p_shared_owners = (unint64_t *)&v56->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    do
      v7 = __ldaxr(p_shared_owners);
    while (__stlxr(v7 - 1, p_shared_owners));
    if (!v7)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  LODWORD(v60) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
  std::ostream::write();
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v3 + 32))(v3, v35, v60);
  if ((v45 & 0x10) != 0)
  {
    v10 = v44;
    if (v44 < v41)
    {
      v44 = v41;
      v10 = v41;
    }
    v11 = v40;
    v8 = v10 - (_QWORD)v40;
    if (v10 - (unint64_t)v40 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_62;
  }
  else
  {
    if ((v45 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v34) = 0;
      p_dst = &__dst;
      goto LABEL_23;
    }
    v11 = v38;
    v8 = v39 - (_QWORD)v38;
    if ((unint64_t)(v39 - (_QWORD)v38) >= 0x7FFFFFFFFFFFFFF8)
LABEL_62:
      sub_20AEC0138();
  }
  if (v8 >= 0x17)
  {
    v12 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v12 = v8 | 7;
    v13 = v12 + 1;
    p_dst = (__int128 *)operator new(v12 + 1);
    *((_QWORD *)&__dst + 1) = v8;
    v34 = v13 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_22;
  }
  HIBYTE(v34) = v8;
  p_dst = &__dst;
  if (v8)
LABEL_22:
    memmove(p_dst, v11, v8);
LABEL_23:
  *((_BYTE *)p_dst + v8) = 0;
  v14 = (char *)operator new(0x30uLL);
  v15 = (std::__shared_weak_count *)v14;
  *((_QWORD *)v14 + 1) = 0;
  v16 = (unint64_t *)(v14 + 8);
  *((_QWORD *)v14 + 2) = 0;
  *(_QWORD *)v14 = &unk_24C40D7F8;
  v17 = v14 + 24;
  v18 = v34;
  *((_QWORD *)v14 + 5) = v34;
  *(_OWORD *)(v14 + 24) = __dst;
  __dst = 0uLL;
  v34 = 0;
  v49 = v14 + 24;
  v50 = v14;
  v19 = HIBYTE(v18);
  if ((v19 & 0x80u) == 0)
    v20 = (uint64_t)(v14 + 24);
  else
    v20 = *((_QWORD *)v14 + 3);
  if ((v19 & 0x80u) == 0)
    v21 = v19;
  else
    v21 = *((_QWORD *)v14 + 4);
  if (!v20
    && v21
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  *((_QWORD *)&v60 + 1) = v17;
  v61 = v15;
  do
    v22 = __ldxr(v16);
  while (__stxr(v22 + 1, v16));
  *(_QWORD *)&v60 = sub_20B0C4730;
  sub_20B433FA8(&v47, (void (**)(uint64_t))&v60, v21, v20);
  if ((_QWORD)v60)
    ((void (*)(int))v60)(0);
  do
    v23 = __ldaxr(v16);
  while (__stlxr(v23 - 1, v16));
  if (v23)
  {
    v32 = v47;
    v60 = v48;
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_39;
  }
  else
  {
    ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
    std::__shared_weak_count::__release_weak(v15);
    v32 = v47;
    v60 = v48;
    if ((SHIBYTE(v34) & 0x80000000) == 0)
      goto LABEL_39;
  }
  operator delete((void *)__dst);
LABEL_39:
  v36[0] = *MEMORY[0x24BEDB7F0];
  v24 = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 72);
  *(_QWORD *)((char *)v36 + *(_QWORD *)(v36[0] - 24)) = *(_QWORD *)(MEMORY[0x24BEDB7F0] + 64);
  v37[0] = v24;
  v37[1] = MEMORY[0x24BEDB848] + 16;
  if (v43 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](&v46);
  v25 = v58;
  if (v58)
  {
    v26 = v59;
    v27 = v58;
    if (v59 != v58)
    {
      do
      {
        v28 = (std::__shared_weak_count *)*((_QWORD *)v26 - 1);
        if (v28)
        {
          v29 = (unint64_t *)&v28->__shared_owners_;
          do
            v30 = __ldaxr(v29);
          while (__stlxr(v30 - 1, v29));
          if (!v30)
          {
            ((void (*)(std::__shared_weak_count *))v28->__on_zero_shared)(v28);
            std::__shared_weak_count::__release_weak(v28);
          }
        }
        v26 -= 16;
      }
      while (v26 != v25);
      v27 = v58;
    }
    v59 = v25;
    operator delete(v27);
  }
  if (v57 != -1)
    ((void (*)(_QWORD *, uint64_t *))off_24C40D788[v57])(v36, &v55);
  v57 = -1;
  if ((char)v54 < 0)
    operator delete(v52);
  if (*(_BYTE *)(v1 + 128))
  {
    sub_20AED7018(v1);
    *(_BYTE *)(v1 + 128) = 0;
  }
  *(_OWORD *)v1 = v32;
  result = *(double *)&v60;
  *(_OWORD *)(v1 + 16) = v60;
  *(_BYTE *)(v1 + 120) = 1;
  *(_BYTE *)(v1 + 128) = 1;
  return result;
}

void sub_20B0C454C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20AEC01C0(exception_object);
}

void sub_20B0C46D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C40D7F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_20B0C46E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_24C40D7F8;
  std::__shared_weak_count::~__shared_weak_count(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0C4718(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0)
    operator delete(*(void **)(a1 + 24));
}

void sub_20B0C4730(int a1)
{
  __asm { BR              X10 }
}

uint64_t sub_20B0C4764()
{
  _QWORD *v0;
  std::__shared_weak_count *v1;
  unint64_t *p_shared_owners;
  unint64_t v3;
  uint64_t result;

  v1 = (std::__shared_weak_count *)v0[2];
  if (v1)
  {
    p_shared_owners = (unint64_t *)&v1->__shared_owners_;
    do
      v3 = __ldaxr(p_shared_owners);
    while (__stlxr(v3 - 1, p_shared_owners));
    if (!v3)
    {
      ((void (*)(std::__shared_weak_count *))v1->__on_zero_shared)(v1);
      std::__shared_weak_count::__release_weak(v1);
    }
  }
  result = 0;
  *v0 = 0;
  return result;
}

uint64_t sub_20B0C47B0(uint64_t a1, uint64_t a2, void (**a3)(int a1))
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  uint64_t result;

  v4 = *(_QWORD *)(v3 + 16);
  a3[1] = *(void (**)(int))(v3 + 8);
  a3[2] = (void (*)(int))v4;
  if (v4)
  {
    v5 = (unint64_t *)(v4 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = 0;
  *a3 = sub_20B0C4730;
  return result;
}

__n128 sub_20B0C47EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  __n128 result;

  result = *(__n128 *)(v3 + 8);
  *(__n128 *)(a3 + 8) = result;
  *(_QWORD *)(v3 + 8) = 0;
  *(_QWORD *)(v3 + 16) = 0;
  *(_QWORD *)a3 = sub_20B0C4730;
  *(_QWORD *)v3 = 0;
  return result;
}

uint64_t sub_20B0C4818(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5;
  uint64_t v6;

  if (a4)
  {
    v6 = *(_QWORD *)(a4 + 8);
    if (v6 != 0x800000020B5E5996)
    {
      if (((v6 & 0x800000020B5E5996 & 0x8000000000000000) != 0) == __OFSUB__(v6, 0x800000020B5E5996))
        return 0;
      if (strcmp((const char *)(v6 & 0x7FFFFFFFFFFFFFFFLL), (const char *)(0x800000020B5E5996 & 0x7FFFFFFFFFFFFFFFLL)))
      {
        return 0;
      }
    }
  }
  else if (a5 != &unk_20B5E59E8)
  {
    return 0;
  }
  return v5 + 8;
}

uint64_t sub_20B0C48AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  if (!*(_BYTE *)(a1 + 128))
    return a1;
  if (*(_BYTE *)(a1 + 120))
  {
    v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2)
      return a1;
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (v4)
      return a1;
    ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
    std::__shared_weak_count::__release_weak(v2);
    return a1;
  }
  else
  {
    if (!*(_BYTE *)(a1 + 112))
      return a1;
    if (*(_BYTE *)(a1 + 104))
    {
      if (*(char *)(a1 + 103) < 0)
        operator delete(*(void **)(a1 + 80));
      if (*(char *)(a1 + 71) < 0)
        operator delete(*(void **)(a1 + 48));
    }
    if (!*(_BYTE *)(a1 + 40) || (*(char *)(a1 + 39) & 0x80000000) == 0)
      return a1;
    operator delete(*(void **)(a1 + 16));
    return a1;
  }
}

void sub_20B0C497C()
{
  JUMPOUT(0x20BD3583CLL);
}

double sub_20B0C4990(uint64_t a1)
{
  uint64_t *v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  void *v11;
  void **v12;
  unsigned int v13;
  uint64_t v14;
  __int128 *v15;
  uint64_t v16;
  uint64_t v17;
  char *v18;
  char *v19;
  void *v20;
  std::__shared_weak_count *v21;
  unint64_t *p_shared_owners;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  int v30;
  __int128 v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  std::__shared_weak_count *v35;
  unint64_t *v36;
  unint64_t v37;
  char *v38;
  char *v39;
  void *v40;
  std::__shared_weak_count *v41;
  unint64_t *v42;
  unint64_t v43;
  std::__shared_weak_count *v44;
  unint64_t *v45;
  unint64_t v46;
  double result;
  _QWORD v48[3];
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  char v52;
  char v53[8];
  void *v54[2];
  __int128 v55;
  __int128 v56;
  int v57;
  void *v58;
  char *v59;
  _QWORD v60[3];
  char v61;
  uint64_t v62;
  int v63;
  void *__p;
  char *v65;
  unint64_t v66;
  __int128 v67;
  __int128 v68;
  __int128 v69;
  int v70;
  char *v71;
  char *v72;
  uint64_t v73;

  v73 = *MEMORY[0x24BDAC8D0];
  v2 = *(_QWORD *)(a1 + 8);
  v1 = *(uint64_t **)(a1 + 16);
  v3 = *v1;
  v57 = 0;
  v56 = 0u;
  v55 = 0u;
  *(_OWORD *)v54 = 0u;
  sub_20AF43774(&v58, v3);
  v4 = v1[1];
  v5 = *(_QWORD *)(v4 + 16);
  v6 = *(_QWORD *)(v4 + 24);
  if (v5)
    v7 = v6 == 0;
  else
    v7 = 0;
  if (v7
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  sub_20B4222E4(&v49, v5, v6);
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v50 + 16))(v50);
  v48[0] = &off_24C41EBB8;
  v48[1] = 1;
  v48[2] = v8;
  LODWORD(v66) = 2;
  std::istream::read();
  v9 = v66;
  if (v66 >= 2)
    v9 = 2;
  if (v9 >= 2)
  {
    LODWORD(v66) = 2;
    std::istream::read();
    v10 = v66;
    if (v66 >= 2)
      v10 = 2;
    if (v10 < 2)
    {
      sub_20B0C5284((uint64_t)v48, (uint64_t)v54);
LABEL_31:
      sub_20B0C16D8((uint64_t)&v53);
      if (v57)
        goto LABEL_117;
      v16 = v56;
      LODWORD(v66) = 2;
      std::istream::read();
      (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v16 + 40))(v16, v48, v66);
LABEL_66:
      v30 = v57;
      if (!v57)
        goto LABEL_68;
      goto LABEL_67;
    }
    v66 = 0;
    std::istream::read();
    if (SBYTE7(v55) < 0)
    {
      v11 = v54[1];
      if (v54[1] >= (void *)v66)
      {
        v12 = (void **)v54[0];
        v54[1] = (void *)v66;
        goto LABEL_29;
      }
    }
    else
    {
      v11 = (void *)BYTE7(v55);
      if (v66 <= BYTE7(v55))
      {
        BYTE7(v55) = v66 & 0x7F;
        v12 = v54;
LABEL_29:
        *((_BYTE *)v12 + v66) = 0;
        goto LABEL_30;
      }
    }
    std::string::append((std::string *)v54, v66 - (_QWORD)v11, 0);
LABEL_30:
    std::istream::read();
    std::istream::read();
    goto LABEL_31;
  }
  v70 = 0;
  v69 = 0u;
  v68 = 0u;
  v67 = 0u;
  sub_20AF43774(&v71, (uint64_t)&v58);
  LODWORD(v60[0]) = 2;
  std::istream::read();
  v13 = v60[0];
  if (LODWORD(v60[0]) >= 2)
    v13 = 2;
  if (v13 < 2)
  {
    sub_20B0C5284((uint64_t)v48, (uint64_t)&v67);
    goto LABEL_36;
  }
  v60[0] = 0;
  std::istream::read();
  if (SBYTE7(v68) < 0)
  {
    v14 = *((_QWORD *)&v67 + 1);
    if (*((_QWORD *)&v67 + 1) >= v60[0])
    {
      v15 = (__int128 *)v67;
      *((_QWORD *)&v67 + 1) = v60[0];
      goto LABEL_34;
    }
  }
  else
  {
    v14 = BYTE7(v68);
    if (v60[0] <= (unint64_t)BYTE7(v68))
    {
      BYTE7(v68) = v60[0] & 0x7F;
      v15 = &v67;
LABEL_34:
      *((_BYTE *)v15 + v60[0]) = 0;
      goto LABEL_35;
    }
  }
  std::string::append((std::string *)&v67, v60[0] - v14, 0);
LABEL_35:
  std::istream::read();
  std::istream::read();
LABEL_36:
  sub_20B0C1158((uint64_t)&v66);
  if (v70)
    sub_20AECFAB8();
  v17 = v69;
  LODWORD(v60[0]) = 1;
  std::istream::read();
  (*(void (**)(uint64_t, _QWORD *, _QWORD))(*(_QWORD *)v17 + 40))(v17, v48, LODWORD(v60[0]));
  sub_20B0C53C0((uint64_t)v60, (uint64_t)&v66);
  sub_20B0C5528((uint64_t)&v53, (uint64_t)v60);
  v18 = (char *)__p;
  if (__p)
  {
    v19 = v65;
    v20 = __p;
    if (v65 != __p)
    {
      do
      {
        v21 = (std::__shared_weak_count *)*((_QWORD *)v19 - 1);
        if (v21)
        {
          p_shared_owners = (unint64_t *)&v21->__shared_owners_;
          do
            v23 = __ldaxr(p_shared_owners);
          while (__stlxr(v23 - 1, p_shared_owners));
          if (!v23)
          {
            ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
            std::__shared_weak_count::__release_weak(v21);
          }
        }
        v19 -= 16;
      }
      while (v19 != v18);
      v20 = __p;
    }
    v65 = v18;
    operator delete(v20);
  }
  if (v63 != -1)
    ((void (*)(char *, uint64_t *))off_24C40D788[v63])(&v52, &v62);
  v63 = -1;
  if (v61 < 0)
    operator delete((void *)v60[1]);
  v24 = v71;
  if (v71)
  {
    v25 = v72;
    v26 = v71;
    if (v72 != v71)
    {
      do
      {
        v27 = (std::__shared_weak_count *)*((_QWORD *)v25 - 1);
        if (v27)
        {
          v28 = (unint64_t *)&v27->__shared_owners_;
          do
            v29 = __ldaxr(v28);
          while (__stlxr(v29 - 1, v28));
          if (!v29)
          {
            ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
            std::__shared_weak_count::__release_weak(v27);
          }
        }
        v25 -= 16;
      }
      while (v25 != v24);
      v26 = v71;
    }
    v72 = v24;
    operator delete(v26);
  }
  if (v70 != -1)
    ((void (*)(_QWORD *, __int128 *))off_24C40D788[v70])(v60, &v69);
  v70 = -1;
  if ((SBYTE7(v68) & 0x80000000) == 0)
    goto LABEL_66;
  operator delete((void *)v67);
  v30 = v57;
  if (!v57)
    goto LABEL_68;
LABEL_67:
  if (v30 != 1)
    goto LABEL_117;
LABEL_68:
  v31 = v56;
  if (!*((_QWORD *)&v56 + 1))
    goto LABEL_73;
  v32 = (unint64_t *)(*((_QWORD *)&v56 + 1) + 8);
  do
    v33 = __ldxr(v32);
  while (__stxr(v33 + 1, v32));
  do
    v34 = __ldaxr(v32);
  while (__stlxr(v34 - 1, v32));
  if (!v34)
  {
    (*(void (**)(_QWORD))(**((_QWORD **)&v31 + 1) + 16))(*((_QWORD *)&v31 + 1));
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v31 + 1));
    if ((_QWORD)v31)
    {
LABEL_74:
      if (!v57)
      {
        (*(void (**)(unint64_t *__return_ptr))(*(_QWORD *)v56 + 48))(&v66);
        v35 = v51;
        if (!v51)
          goto LABEL_83;
        goto LABEL_79;
      }
LABEL_117:
      sub_20AECFAB8();
    }
  }
  else
  {
LABEL_73:
    if ((_QWORD)v31)
      goto LABEL_74;
  }
  v67 = 0uLL;
  v66 = (unint64_t)&off_24C411E78;
  v35 = v51;
  if (!v51)
    goto LABEL_83;
LABEL_79:
  v36 = (unint64_t *)&v35->__shared_owners_;
  do
    v37 = __ldaxr(v36);
  while (__stlxr(v37 - 1, v36));
  if (!v37)
  {
    ((void (*)(std::__shared_weak_count *))v35->__on_zero_shared)(v35);
    std::__shared_weak_count::__release_weak(v35);
  }
LABEL_83:
  v38 = (char *)v58;
  if (v58)
  {
    v39 = v59;
    v40 = v58;
    if (v59 != v58)
    {
      do
      {
        v41 = (std::__shared_weak_count *)*((_QWORD *)v39 - 1);
        if (v41)
        {
          v42 = (unint64_t *)&v41->__shared_owners_;
          do
            v43 = __ldaxr(v42);
          while (__stlxr(v43 - 1, v42));
          if (!v43)
          {
            ((void (*)(std::__shared_weak_count *))v41->__on_zero_shared)(v41);
            std::__shared_weak_count::__release_weak(v41);
          }
        }
        v39 -= 16;
      }
      while (v39 != v38);
      v40 = v58;
    }
    v59 = v38;
    operator delete(v40);
  }
  if (v57 != -1)
    ((void (*)(_QWORD *, __int128 *))off_24C40D788[v57])(v60, &v56);
  v57 = -1;
  if (SBYTE7(v55) < 0)
    operator delete(v54[0]);
  if (*(_BYTE *)(v2 + 128))
  {
    if (*(_BYTE *)(v2 + 120))
    {
      v44 = *(std::__shared_weak_count **)(v2 + 16);
      if (v44)
      {
        v45 = (unint64_t *)&v44->__shared_owners_;
        do
          v46 = __ldaxr(v45);
        while (__stlxr(v46 - 1, v45));
        if (!v46)
        {
          ((void (*)(std::__shared_weak_count *))v44->__on_zero_shared)(v44);
          std::__shared_weak_count::__release_weak(v44);
        }
      }
    }
    else if (*(_BYTE *)(v2 + 112))
    {
      if (*(_BYTE *)(v2 + 104))
      {
        if (*(char *)(v2 + 103) < 0)
          operator delete(*(void **)(v2 + 80));
        if (*(char *)(v2 + 71) < 0)
          operator delete(*(void **)(v2 + 48));
      }
      if (*(_BYTE *)(v2 + 40) && *(char *)(v2 + 39) < 0)
        operator delete(*(void **)(v2 + 16));
    }
  }
  *(_QWORD *)v2 = &off_24C411E78;
  result = *(double *)&v67;
  *(_OWORD *)(v2 + 8) = v67;
  *(_BYTE *)(v2 + 120) = 1;
  *(_BYTE *)(v2 + 128) = 1;
  return result;
}

void sub_20B0C50F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,int a27,void *__p,uint64_t a29,uint64_t a30,char a31)
{
  if (!a2)
    _Unwind_Resume(exception_object);
  sub_20AEC01C0(exception_object);
}

void sub_20B0C5284(uint64_t a1, uint64_t a2)
{
  int v3;
  std::string __n;
  int v5;
  std::string v6;
  int v7;

  v7 = 0;
  __n.__r_.__value_.__r.__words[0] = 0;
  std::istream::read();
  *((_BYTE *)&v6.__r_.__value_.__s + 23) = 0;
  v6.__r_.__value_.__s.__data_[0] = 0;
  std::istream::read();
  std::istream::read();
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    sub_20AEC60F4(&__n, v6.__r_.__value_.__l.__data_, v6.__r_.__value_.__l.__size_);
  else
    __n = v6;
  v3 = v7;
  v5 = v7;
  if (*(char *)(a2 + 23) < 0)
  {
    operator delete(*(void **)a2);
    v3 = v5;
  }
  *(std::string *)a2 = __n;
  *(_DWORD *)(a2 + 24) = v3;
  if (SHIBYTE(v6.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v6.__r_.__value_.__l.__data_);
}

void sub_20B0C53A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0C53C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BYTE v6[16];
  int v7;
  void *__p[2];
  uint64_t v9;
  int v10;
  char v11;
  char v12;

  if (*(char *)(a2 + 31) < 0)
  {
    sub_20AEC60F4(__p, *(void **)(a2 + 8), *(_QWORD *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)__p = *(_OWORD *)(a2 + 8);
    v9 = *(_QWORD *)(a2 + 24);
  }
  v10 = *(_DWORD *)(a2 + 32);
  v6[0] = 0;
  v7 = -1;
  v4 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v4 != -1)
  {
    ((void (*)(char *, _BYTE *, uint64_t))off_24C40D798[v4])(&v11, v6, a2 + 40);
    v7 = v4;
  }
  sub_20B0C15BC(a1, (__int128 *)__p, (uint64_t)v6, a2 + 64);
  if (v7 != -1)
    ((void (*)(char *, _BYTE *))off_24C40D788[v7])(&v12, v6);
  v7 = -1;
  if (SHIBYTE(v9) < 0)
    operator delete(__p[0]);
  return a1;
}

void sub_20B0C54CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v18;

  if (a12 != -1)
    ((void (*)(uint64_t, char *))off_24C40D788[a12])(v18 - 33, &a10);
  a12 = -1;
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0C5528(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  __int128 *v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v17;
  char v18;

  v4 = a1 + 8;
  v5 = (__int128 *)(a2 + 8);
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)v4);
  v6 = *v5;
  *(_QWORD *)(v4 + 16) = *((_QWORD *)v5 + 2);
  *(_OWORD *)v4 = v6;
  *(_BYTE *)(a2 + 31) = 0;
  *(_BYTE *)(a2 + 8) = 0;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  v7 = *(unsigned int *)(a1 + 56);
  v8 = *(unsigned int *)(a2 + 56);
  if ((_DWORD)v7 == -1)
  {
    if ((_DWORD)v8 == -1)
      goto LABEL_8;
  }
  else if ((_DWORD)v8 == -1)
  {
    ((void (*)(char *, uint64_t))off_24C40D788[v7])(&v18, a1 + 40);
    *(_DWORD *)(a1 + 56) = -1;
    goto LABEL_8;
  }
  v17 = a1 + 40;
  ((void (*)(uint64_t *))off_24C40D888[v8])(&v17);
LABEL_8:
  v9 = (void **)(a1 + 64);
  v10 = *(_QWORD *)(a1 + 64);
  if (v10)
  {
    v11 = *(_QWORD *)(a1 + 72);
    v12 = *(void **)(a1 + 64);
    if (v11 != v10)
    {
      do
      {
        v13 = *(std::__shared_weak_count **)(v11 - 8);
        if (v13)
        {
          p_shared_owners = (unint64_t *)&v13->__shared_owners_;
          do
            v15 = __ldaxr(p_shared_owners);
          while (__stlxr(v15 - 1, p_shared_owners));
          if (!v15)
          {
            ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
            std::__shared_weak_count::__release_weak(v13);
          }
        }
        v11 -= 16;
      }
      while (v11 != v10);
      v12 = *v9;
    }
    *(_QWORD *)(a1 + 72) = v10;
    operator delete(v12);
    *v9 = 0;
    *(_QWORD *)(a1 + 72) = 0;
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_QWORD *)(a2 + 80) = 0;
  return a1;
}

uint64_t sub_20B0C5698(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  char v10;

  v2 = *(_QWORD *)(a1 + 64);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 72);
    v4 = *(void **)(a1 + 64);
    if (v3 != v2)
    {
      do
      {
        v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5)
        {
          p_shared_owners = (unint64_t *)&v5->__shared_owners_;
          do
            v7 = __ldaxr(p_shared_owners);
          while (__stlxr(v7 - 1, p_shared_owners));
          if (!v7)
          {
            ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
            std::__shared_weak_count::__release_weak(v5);
          }
        }
        v3 -= 16;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 64);
    }
    *(_QWORD *)(a1 + 72) = v2;
    operator delete(v4);
  }
  v8 = *(unsigned int *)(a1 + 56);
  if ((_DWORD)v8 != -1)
    ((void (*)(char *, uint64_t))off_24C40D788[v8])(&v10, a1 + 40);
  *(_DWORD *)(a1 + 56) = -1;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_20B0C5790(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))off_24C40D788[v5])(&v10, v4);
LABEL_9:
    *(_OWORD *)v4 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *(_DWORD *)(v4 + 16) = 0;
    return;
  }
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void sub_20B0C5854(uint64_t *a1, uint64_t a2, __int128 *a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  char v10;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 16);
  if ((_DWORD)v5 == -1)
    goto LABEL_9;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))off_24C40D788[v5])(&v10, v4);
LABEL_9:
    *(_OWORD *)v4 = *a3;
    *(_QWORD *)a3 = 0;
    *((_QWORD *)a3 + 1) = 0;
    *(_DWORD *)(v4 + 16) = 1;
    return;
  }
  v6 = *a3;
  *(_QWORD *)a3 = 0;
  *((_QWORD *)a3 + 1) = 0;
  v7 = *(std::__shared_weak_count **)(a2 + 8);
  *(_OWORD *)a2 = v6;
  if (v7)
  {
    p_shared_owners = (unint64_t *)&v7->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

uint64_t sub_20B0C5920(uint64_t a1, uint64_t a2)
{
  uint64_t result;
  _DWORD v4[6];
  int v5;
  _QWORD v6[2];
  char v7;
  _QWORD **v8;
  _QWORD *v9;
  const char *v10;
  char *v11;
  const char *v12;
  const char *v13;

  v5 = 0;
  sub_20AF71210(v4, "data of type ");
  v6[0] = a2;
  v6[1] = a2 + 24;
  v9 = v4;
  v10 = "{";
  v11 = (char *)v4;
  v12 = "{";
  v13 = "{";
  if (v5 == -1)
    goto LABEL_8;
  v8 = &v9;
  ((void (*)(_QWORD ***, _DWORD *))off_24C40D898[v5])(&v8, v4);
  LOBYTE(v9) = 1;
  v10 = (const char *)v4;
  v11 = &v7;
  sub_20AFF4834((uint64_t)v6, (uint64_t)&v9);
  v9 = v4;
  v10 = "}";
  v11 = (char *)v4;
  v12 = "}";
  v13 = "}";
  if (v5 == -1)
LABEL_8:
    sub_20AECFAB8();
  v8 = &v9;
  ((void (*)(_QWORD ***, _DWORD *))off_24C40D898[v5])(&v8, v4);
  v9 = v4;
  v10 = " is not serializable";
  v11 = (char *)v4;
  v12 = " is not serializable";
  v13 = " is not serializable";
  if (v5 == -1)
    sub_20AECFAB8();
  v6[0] = &v9;
  ((void (*)(_QWORD *, _DWORD *))off_24C40D8B0[v5])(v6, v4);
  if (v5 == -1)
    sub_20AECFAB8();
  v9 = v6;
  result = ((uint64_t (*)(_QWORD **, _DWORD *))off_24C40D770[v5])(&v9, v4);
  if (v5 != -1)
    return ((uint64_t (*)(_QWORD **, _DWORD *))off_24C40D758[v5])(&v9, v4);
  return result;
}

void sub_20B0C5AC0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0C5AD4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0C5AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0C5AFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0C5B10(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;

  if (a1)
  {
    sub_20B0C5B10(*a1);
    sub_20B0C5B10(a1[1]);
    v2 = a1[5];
    if (v2)
    {
      v3 = a1[6];
      v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          v5 = *(std::__shared_weak_count **)(v3 - 8);
          if (v5)
          {
            p_shared_owners = (unint64_t *)&v5->__shared_owners_;
            do
              v7 = __ldaxr(p_shared_owners);
            while (__stlxr(v7 - 1, p_shared_owners));
            if (!v7)
            {
              ((void (*)(std::__shared_weak_count *))v5->__on_zero_shared)(v5);
              std::__shared_weak_count::__release_weak(v5);
            }
          }
          v3 -= 16;
        }
        while (v3 != v2);
        v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

void sub_20B0C5BC0(unsigned int a1@<W0>, __int128 *a2@<X1>, uint64_t a3@<X8>)
{
  int v5;
  uint64_t v6;
  void *v7[2];
  char v8;
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  char v15;
  __int128 v16;
  __int128 __p;
  uint64_t v18;
  unsigned __int8 v19;
  __int128 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  char v25;
  char v26;

  sub_20AECEBD0(v7, a2);
  sub_20B0C5D38((uint64_t)&v16, a1, (__int128 *)v7);
  *(_OWORD *)a3 = v16;
  *(_BYTE *)(a3 + 16) = 0;
  *(_BYTE *)(a3 + 112) = 0;
  if (v26)
  {
    *(_BYTE *)(a3 + 40) = 0;
    v5 = v19;
    if (v19)
    {
      *(_OWORD *)(a3 + 16) = __p;
      *(_QWORD *)(a3 + 32) = v18;
      v18 = 0;
      __p = 0uLL;
      *(_BYTE *)(a3 + 40) = 1;
    }
    *(_BYTE *)(a3 + 48) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    if (v25)
    {
      v6 = v22;
      *(_QWORD *)(a3 + 64) = v21;
      *(_OWORD *)(a3 + 48) = v20;
      v20 = 0uLL;
      *(_QWORD *)(a3 + 72) = v6;
      *(_OWORD *)(a3 + 80) = v23;
      *(_QWORD *)(a3 + 96) = v24;
      v21 = 0;
      v23 = 0uLL;
      v24 = 0;
      *(_BYTE *)(a3 + 104) = 1;
    }
    *(_BYTE *)(a3 + 112) = 1;
    if (v5 && SHIBYTE(v18) < 0)
      operator delete((void *)__p);
  }
  if (v15)
  {
    if (!v14)
      goto LABEL_13;
    if (v13 < 0)
    {
      operator delete(v12);
      if ((v11 & 0x80000000) == 0)
      {
LABEL_13:
        if (!v9)
          return;
        goto LABEL_14;
      }
    }
    else if ((v11 & 0x80000000) == 0)
    {
      goto LABEL_13;
    }
    operator delete(v10);
    if (!v9)
      return;
LABEL_14:
    if (v8 < 0)
      operator delete(v7[0]);
  }
}

void sub_20B0C5D24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCDB4((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0C5D38(uint64_t a1, unsigned int a2, __int128 *a3)
{
  unsigned __int8 v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  unsigned int v9;
  __int128 *v10;
  void *__dst[2];
  uint64_t v12;
  char v13;
  void *v14[2];
  uint64_t v15;
  uint64_t v16;
  void *__p[2];
  uint64_t v18;
  char v19;
  char v20;

  v4 = atomic_load((unsigned __int8 *)&qword_25463CF50);
  if ((v4 & 1) == 0)
  {
    v10 = a3;
    v9 = a2;
    v8 = __cxa_guard_acquire(&qword_25463CF50);
    a2 = v9;
    a3 = v10;
    if (v8)
    {
      __cxa_atexit((void (*)(void *))std::error_category::~error_category, &off_253EC3190, &dword_20AEBB000);
      __cxa_guard_release(&qword_25463CF50);
      a2 = v9;
      a3 = v10;
    }
  }
  v5 = a2;
  sub_20AECEBD0(__dst, a3);
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = &off_253EC3190;
  *(_BYTE *)(a1 + 16) = 0;
  *(_BYTE *)(a1 + 112) = 0;
  if (!v20)
    return a1;
  *(_BYTE *)(a1 + 40) = 0;
  if (v13)
  {
    *(_OWORD *)(a1 + 16) = *(_OWORD *)__dst;
    *(_QWORD *)(a1 + 32) = v12;
    __dst[1] = 0;
    v12 = 0;
    __dst[0] = 0;
    *(_BYTE *)(a1 + 40) = 1;
  }
  *(_BYTE *)(a1 + 48) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  if (!v19)
  {
    *(_BYTE *)(a1 + 112) = 1;
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  v6 = v16;
  *(_QWORD *)(a1 + 64) = v15;
  *(_OWORD *)(a1 + 48) = *(_OWORD *)v14;
  v14[0] = 0;
  v14[1] = 0;
  *(_QWORD *)(a1 + 72) = v6;
  *(_OWORD *)(a1 + 80) = *(_OWORD *)__p;
  *(_QWORD *)(a1 + 96) = v18;
  __p[1] = 0;
  v18 = 0;
  v15 = 0;
  __p[0] = 0;
  *(_BYTE *)(a1 + 104) = 1;
  *(_BYTE *)(a1 + 112) = 1;
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
    if ((SHIBYTE(v15) & 0x80000000) == 0)
      goto LABEL_8;
LABEL_13:
    operator delete(v14[0]);
    if (!v13)
      return a1;
    goto LABEL_14;
  }
  operator delete(__p[0]);
  if (SHIBYTE(v15) < 0)
    goto LABEL_13;
LABEL_8:
  if (!v13)
    return a1;
LABEL_14:
  if ((SHIBYTE(v12) & 0x80000000) == 0)
    return a1;
  operator delete(__dst[0]);
  return a1;
}

std::string *sub_20B0C5EE4()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634F78);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634F78))
    return &stru_254634F60;
  sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = 1U]", __p);
  sub_20B531884((uint64_t)__p, &stru_254634F60);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634F60, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634F78);
  return &stru_254634F60;
}

void sub_20B0C5F9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634F78);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634F78);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0C5FDC(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DBA8 + v2))(&v4, a1 + 32);
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

double sub_20B0C6034@<D0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *v5;
  __int128 v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE __dst[24];

  v4 = *(unsigned __int8 *)(a1 + 16);
  *(_QWORD *)a2 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  *(_BYTE *)(a2 + 16) = 0;
  v5 = (_BYTE *)(a2 + 16);
  *(_BYTE *)(a2 + 40) = 0;
  if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
    {
      sub_20AEC60F4(v5, *(void **)(a1 + 24), *(_QWORD *)(a1 + 32));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 24);
      *(_OWORD *)v5 = v6;
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(a1 + 40);
    }
    *(_BYTE *)(a2 + 40) = 1;
  }
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 72) = 0;
  if (*(_BYTE *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a2 + 48), *(void **)(a1 + 80), *(_QWORD *)(a1 + 88));
    }
    else
    {
      v6 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a2 + 48) = v6;
      *(_QWORD *)(a2 + 64) = *(_QWORD *)(a1 + 96);
    }
    *(_BYTE *)(a2 + 72) = 1;
  }
  if (*(_BYTE *)(a1 + 72))
  {
    v7 = *(unsigned __int8 *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 56);
    *(_QWORD *)(a2 + 88) = v7;
    *(_BYTE *)(a2 + 96) = 1;
    if (*(_BYTE *)(a1 + 136))
      goto LABEL_13;
  }
  else
  {
    *(_BYTE *)(a2 + 80) = 0;
    *(_BYTE *)(a2 + 96) = 0;
    if (*(_BYTE *)(a1 + 136))
    {
LABEL_13:
      if (*(char *)(a1 + 135) < 0)
      {
        sub_20AEC60F4(__dst, *(void **)(a1 + 112), *(_QWORD *)(a1 + 120));
      }
      else
      {
        v6 = *(_OWORD *)(a1 + 112);
        *(_OWORD *)__dst = v6;
        *(_QWORD *)&__dst[16] = *(_QWORD *)(a1 + 128);
      }
      v9 = *(_QWORD *)&__dst[8];
      v10 = *(_QWORD *)&__dst[15];
      *(_QWORD *)(a2 + 112) = *(_QWORD *)__dst;
      *(_QWORD *)(a2 + 120) = v9;
      *(_QWORD *)(a2 + 127) = v10;
      *(_BYTE *)(a2 + 135) = __dst[23];
      *(_QWORD *)(a2 + 144) = 0;
      *(_QWORD *)(a2 + 152) = 0;
      *(_BYTE *)(a2 + 160) = 1;
      v8 = *(_BYTE *)(a1 + 168);
      if (v8)
        goto LABEL_20;
      goto LABEL_17;
    }
  }
  *(_BYTE *)(a2 + 112) = 0;
  *(_BYTE *)(a2 + 160) = 0;
  v8 = *(_BYTE *)(a1 + 168);
  if (v8)
  {
LABEL_20:
    sub_20B0D0E90((uint64_t *)(a1 + 144), (uint64_t)__dst);
    *(_QWORD *)&v6 = *(_QWORD *)__dst;
    *(_OWORD *)(a2 + 176) = *(_OWORD *)__dst;
    *(_QWORD *)(a2 + 192) = *(_QWORD *)&__dst[16];
    *(_BYTE *)(a2 + 200) = 1;
    return *(double *)&v6;
  }
LABEL_17:
  *(_BYTE *)(a2 + 176) = 0;
  *(_BYTE *)(a2 + 200) = v8;
  return *(double *)&v6;
}

void sub_20B0C61E0(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[72] && v1[71] < 0)
    operator delete(*v3);
  if (v1[40])
  {
    if (v1[39] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

_QWORD *sub_20B0C624C(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *p_shared_owners;
  unint64_t v12;
  uint64_t v13;
  int v14;
  __int16 v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *v20;
  unint64_t v21;
  _QWORD v23[2];
  std::__shared_weak_count *v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  int v28;
  __int16 v29;

  *a1 = off_24C40D900;
  a1[1] = &unk_24C40D978;
  sub_20B0D0A00((uint64_t)(a1 + 2), (uint64_t *)(a2 + 64));
  v23[0] = &off_24C3FA3D0;
  v9 = *(_QWORD *)(a2 + 16);
  v10 = *(std::__shared_weak_count **)(a2 + 24);
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v12 = __ldxr(p_shared_owners);
    while (__stxr(v12 + 1, p_shared_owners));
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_DWORD *)(a2 + 56);
    v15 = *(_WORD *)(a2 + 60);
    do
      v16 = __ldxr(p_shared_owners);
    while (__stxr(v16 + 1, p_shared_owners));
  }
  else
  {
    v13 = *(_QWORD *)(a2 + 48);
    v14 = *(_DWORD *)(a2 + 56);
    v15 = *(_WORD *)(a2 + 60);
  }
  v23[1] = v9;
  v24 = v10;
  v25 = *(_QWORD *)(a2 + 32);
  v26 = *(_DWORD *)(a2 + 40);
  v27 = v13;
  v28 = v14;
  v29 = v15;
  if (v10)
  {
    v17 = (unint64_t *)&v10->__shared_owners_;
    do
      v18 = __ldaxr(v17);
    while (__stlxr(v18 - 1, v17));
    if (!v18)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_20B2DDA08((uint64_t)(a1 + 24), (uint64_t)v23, 0, v4, v5, v6, v7, v8);
  v19 = v24;
  if (!v24)
    return a1;
  v20 = (unint64_t *)&v24->__shared_owners_;
  do
    v21 = __ldaxr(v20);
  while (__stlxr(v21 - 1, v20));
  if (v21)
    return a1;
  ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
  std::__shared_weak_count::__release_weak(v19);
  return a1;
}

void sub_20B0C63A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  sub_20AF9E0BC((uint64_t)va);
  sub_20B0CD92C(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0C63C4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40D900;
  *(_QWORD *)(a1 + 8) = &unk_24C40D978;
  v2 = *(unsigned int *)(a1 + 288);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DBA8 + v2))(&v4, a1 + 224);
  *(_DWORD *)(a1 + 288) = -1;
  sub_20B0CD92C(a1 + 16);
  return a1;
}

uint64_t sub_20B0C6434(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24C40D900;
  *(_QWORD *)a1 = &unk_24C40D978;
  v2 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DBA8 + v2))(&v4, a1 + 216);
  *(_DWORD *)(a1 + 280) = -1;
  return sub_20B0CD92C(a1 + 8);
}

uint64_t sub_20B0C64A4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40D900;
  *(_QWORD *)(a1 + 8) = &unk_24C40D978;
  v2 = *(unsigned int *)(a1 + 288);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DBA8 + v2))(&v4, a1 + 224);
  *(_DWORD *)(a1 + 288) = -1;
  sub_20B0CD92C(a1 + 16);
  return MEMORY[0x20BD3583C](a1, 0x10F3C406E56456ELL);
}

uint64_t sub_20B0C6528(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24C40D900;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40D978;
  v3 = *(unsigned int *)(a1 + 280);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DBA8 + v3))(&v5, a1 + 216);
  *(_DWORD *)(a1 + 280) = -1;
  sub_20B0CD92C(a1 + 8);
  return MEMORY[0x20BD3583C](v2, 0x10F3C406E56456ELL);
}

void sub_20B0C65B4(uint64_t a1, int *a2)
{
  if (!sub_20B0E6794(a2, a1)
    && !sub_20B0E6940(a2, a1)
    && !sub_20B0E6B10(a2, a1)
    && !sub_20B0E6CBC(a2, a1)
    && !sub_20B0E6E28((uint64_t)a2, a1))
  {
    sub_20B0E6F58(a1, a2);
  }
}

void sub_20B0C6638(uint64_t a1, uint64_t (***a2)())
{
  sub_20B0C6648(a2, a1);
}

void sub_20B0C6648(uint64_t (***a1)(), uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  void *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int16 *v20;
  unsigned int v21;
  unsigned int v22;
  char v23;
  char v24;
  char v25;
  char v26;
  void *__p;
  uint64_t v28;
  char v29;

  v4 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED20, 0);
  if (v4)
  {
    v5 = (uint64_t)v4;
    v6 = *((unsigned __int8 *)v4 + 104);
    v4[11] = "info";
    v4[12] = 4;
    if (!v6)
      *((_BYTE *)v4 + 104) = 1;
    sub_20B0D978C((uint64_t)v4, a2 + 16);
    v7 = *(unsigned __int8 *)(v5 + 104);
    *(_QWORD *)(v5 + 88) = "value";
    *(_QWORD *)(v5 + 96) = 5;
    if (!v7)
      *(_BYTE *)(v5 + 104) = 1;
    sub_20B0DB0C4(v5, (unsigned __int16 *)(a2 + 192));
    return;
  }
  v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
  if (v8)
  {
    v9 = v8;
    sub_20B0DD1A0((uint64_t)&__p, v8, a2 + 16);
    LODWORD(__p) = 2;
    sub_20B518854(v9[6], &__p);
    if (__p <= 1)
    {
      sub_20B0DDD08(v9, (unsigned __int16 *)(a2 + 192), __p);
    }
    else
    {
      sub_20B0DD290(v9 + 2);
      sub_20B0DDD08(v9, (unsigned __int16 *)(a2 + 192), 2u);
      v10 = v9[4];
      v11 = *(_QWORD *)(v10 - 16) - (*(uint64_t (**)(_QWORD *))(v9[2] + 32))(v9 + 2) + *(_QWORD *)(v10 - 8);
      if (v11)
        (*(void (**)(_QWORD *, uint64_t))(v9[2] + 40))(v9 + 2, v11);
      v9[4] -= 16;
    }
    return;
  }
  v12 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EDE0, 0);
  if (!v12)
  {
    v16 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
    if (!v16)
    {
      if (*a1 == &off_24C41C508)
      {
        sub_20B0E2418((uint64_t)&__p, a1, a2 + 16);
        sub_20B0E2EA4(a1, (unsigned __int16 *)(a2 + 192));
      }
      else
      {
        sub_20B0E70C8(a2, (uint64_t)a1);
      }
      return;
    }
    v17 = (uint64_t)v16;
    LODWORD(__p) = 6;
    sub_20B514490((uint64_t)v16, &__p);
    v18 = __p;
    if (__p >= 6)
      v19 = 6;
    else
      v19 = __p;
    if (v19 < 3)
      sub_20B0E0A94((uint64_t)&__p, v17, a2 + 16, v19);
    else
      sub_20B0E0C84(v17, a2 + 16, v19);
    if (v18 < 3 || *(_BYTE *)(v17 + 131))
    {
LABEL_31:
      v20 = (unsigned __int16 *)(a2 + 192);
      LODWORD(__p) = 2;
      sub_20B514490(v17, &__p);
      v21 = __p;
      if (__p >= 2)
        v22 = 2;
      else
        v22 = __p;
      if (v22 < 2)
        sub_20B0E19B0((const void *)v17, (uint64_t)v20);
      else
        sub_20B0E1E78(v17, v20);
      if (v21 < 2 || *(_BYTE *)(v17 + 131))
        return;
      while (1)
      {
        if ((*(_BYTE *)(*(_QWORD *)(v17 + 16) + *(_QWORD *)(**(_QWORD **)(v17 + 16) - 24) + 32) & 2) != 0)
          return;
        sub_20B51680C(v17, (uint64_t)&__p);
        if (v29 < 0)
        {
          if (v28 != 1 || *(unsigned __int8 *)(v17 + 72) != *(unsigned __int8 *)__p)
          {
LABEL_67:
            v26 = 1;
            goto LABEL_68;
          }
        }
        else if (v29 != 1 || *(unsigned __int8 *)(v17 + 72) != __p)
        {
          goto LABEL_67;
        }
        v26 = 0;
LABEL_68:
        if (v29 < 0)
          operator delete(__p);
        if (*(_BYTE *)(v17 + 131))
          v25 = 0;
        else
          v25 = v26;
        if ((v25 & 1) == 0)
          return;
      }
    }
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(v17 + 16) + *(_QWORD *)(**(_QWORD **)(v17 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_31;
      sub_20B51680C(v17, (uint64_t)&__p);
      if (v29 < 0)
      {
        if (v28 != 1 || *(unsigned __int8 *)(v17 + 72) != *(unsigned __int8 *)__p)
        {
LABEL_48:
          v24 = 1;
          goto LABEL_49;
        }
      }
      else if (v29 != 1 || *(unsigned __int8 *)(v17 + 72) != __p)
      {
        goto LABEL_48;
      }
      v24 = 0;
LABEL_49:
      if (v29 < 0)
        operator delete(__p);
      if (*(_BYTE *)(v17 + 131))
        v23 = 0;
      else
        v23 = v24;
      if ((v23 & 1) == 0)
        goto LABEL_31;
    }
  }
  v13 = (uint64_t)v12;
  v14 = *((unsigned __int8 *)v12 + 104);
  v12[11] = "info";
  v12[12] = 4;
  if (!v14)
    *((_BYTE *)v12 + 104) = 1;
  sub_20B0DE788((uint64_t)v12, a2 + 16);
  v15 = *(unsigned __int8 *)(v13 + 104);
  *(_QWORD *)(v13 + 88) = "value";
  *(_QWORD *)(v13 + 96) = 5;
  if (!v15)
    *(_BYTE *)(v13 + 104) = 1;
  sub_20B0DF954(v13, (unsigned __int16 *)(a2 + 192));
}

uint64_t sub_20B0C6AE0()
{
  return 2;
}

uint64_t sub_20B0C6AE8()
{
  return 2;
}

uint64_t sub_20B0C6AF0()
{
  return 1;
}

uint64_t sub_20B0C6AF8()
{
  return 1;
}

void sub_20B0C6B00(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD *v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  _BYTE v9[16];
  std::__shared_weak_count *v10;
  uint64_t v11;
  _BYTE v12[216];
  uint64_t v13;

  v13 = *MEMORY[0x24BDAC8D0];
  sub_20B2DDD24(a1 + 192, (uint64_t)v9);
  sub_20B0C6034(a1 + 16, (uint64_t)v12);
  v4 = operator new();
  sub_20B0033C0(v4, (uint64_t)v9, (uint64_t)v12);
  v11 = 0;
  *a2 = &off_24C411E78;
  a2[1] = v4;
  v5 = (_QWORD *)operator new();
  *v5 = &off_24C411F70;
  v5[1] = 0;
  v5[2] = 0;
  v5[3] = v4;
  a2[2] = v5;
  sub_20AF4EA3C((uint64_t)v12);
  v6 = v10;
  if (v10)
  {
    p_shared_owners = (unint64_t *)&v10->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B0C6C18(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  uint64_t v4;
  va_list va;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  va_list va1;
  va_list va2;

  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  v4 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  va_copy(va2, va1);
  v13 = va_arg(va2, _QWORD *);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20AF9D008((_QWORD **)va1);
  sub_20AF4EA3C((uint64_t)va2);
  sub_20AFFA660((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0C6C74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20AFFA660((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0C6C8C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B0C6B00(a1 - 8, a2);
}

uint64_t sub_20B0C6C94(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EF0, (const struct __class_type_info *)&unk_24C40DB70, 8);
  if (result)
  {
    v4 = result;
    v6[0] = a1 + 24;
    v6[1] = a1 + 40;
    v6[2] = a1 + 72;
    v6[3] = a1 + 96;
    v6[4] = a1 + 128;
    v6[5] = a1 + 160;
    v5[0] = result + 24;
    v5[1] = result + 40;
    v5[2] = result + 72;
    v5[3] = result + 96;
    v5[4] = result + 128;
    v5[5] = result + 160;
    result = sub_20B0C3554((uint64_t)&v7, v6, v5);
    if ((_DWORD)result)
      return sub_20B2DE03C((unsigned __int16 *)(a1 + 192), (unsigned __int16 *)(v4 + 192));
  }
  return result;
}

uint64_t sub_20B0C6D48(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EF0, (const struct __class_type_info *)&unk_24C40DB70, 8);
  if (result)
  {
    v4 = result;
    v6[0] = a1 + 16;
    v6[1] = a1 + 32;
    v6[2] = a1 + 64;
    v6[3] = a1 + 88;
    v6[4] = a1 + 120;
    v6[5] = a1 + 152;
    v5[0] = result + 24;
    v5[1] = result + 40;
    v5[2] = result + 72;
    v5[3] = result + 96;
    v5[4] = result + 128;
    v5[5] = result + 160;
    result = sub_20B0C3554((uint64_t)&v7, v6, v5);
    if ((_DWORD)result)
      return sub_20B2DE03C((unsigned __int16 *)(a1 + 184), (unsigned __int16 *)(v4 + 192));
  }
  return result;
}

void sub_20B0C6DFC(uint64_t a1, int *a2)
{
  if (!sub_20B0E6794(a2, a1)
    && !sub_20B0E6940(a2, a1)
    && !sub_20B0E6B10(a2, a1)
    && !sub_20B0E6CBC(a2, a1)
    && !sub_20B0E6E28((uint64_t)a2, a1))
  {
    sub_20B0E6F58(a1, a2);
  }
}

void sub_20B0C6E80(uint64_t a1, int *a2)
{
  uint64_t v3;

  v3 = a1 - 8;
  if (!sub_20B0E6794(a2, a1 - 8)
    && !sub_20B0E6940(a2, v3)
    && !sub_20B0E6B10(a2, v3)
    && !sub_20B0E6CBC(a2, v3)
    && !sub_20B0E6E28((uint64_t)a2, v3))
  {
    sub_20B0E6F58(v3, a2);
  }
}

void sub_20B0C6F04(uint64_t a1, uint64_t (***a2)())
{
  sub_20B0C6648(a2, a1);
}

void sub_20B0C6F14(uint64_t a1, uint64_t (***a2)())
{
  sub_20B0C6648(a2, a1 - 8);
}

uint64_t sub_20B0C6F24(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  *(_QWORD *)a1 = off_24C40FB08;
  *(_QWORD *)(a1 + 8) = &unk_24C40FB80;
  sub_20B0D0A00(a1 + 16, (uint64_t *)(a2 + 32));
  sub_20B41F464(a1 + 192, *(uint64_t **)(a2 + 8));
  *(_QWORD *)(a1 + 592) = 0;
  *(_OWORD *)(a1 + 576) = 0u;
  v4 = *(_QWORD *)(a2 + 8);
  if (*(_BYTE *)(v4 + 408))
    *(_QWORD *)(a1 + 584) = sub_20AEC63D0((char **)(a1 + 576), v4 + 384);
  return a1;
}

void sub_20B0C6FBC(_Unwind_Exception *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  void **v4;
  void **v5;
  void **v7;
  void **v8;
  void *v9;
  void **v10;

  v5 = v4;
  v10 = v5;
  v7 = (void **)*v5;
  if (*v5)
  {
    v8 = *(void ***)(v2 + 584);
    v9 = *v5;
    if (v8 != v7)
    {
      do
      {
        if (*((char *)v8 - 1) < 0)
          operator delete(*(v8 - 3));
        v8 -= 3;
      }
      while (v8 != v7);
      v9 = *v10;
    }
    *(_QWORD *)(v2 + 584) = v7;
    operator delete(v9);
  }
  sub_20B0CDABC(v3);
  sub_20B0CD92C(v1);
  _Unwind_Resume(a1);
}

void sub_20B0C702C(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20B0CD92C(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0C7040(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_24C40FB08;
  a1[1] = &unk_24C40FB80;
  v2 = a1[72];
  if (v2)
  {
    v3 = a1[73];
    v4 = (void *)a1[72];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[72];
    }
    a1[73] = v2;
    operator delete(v4);
  }
  sub_20B0CDABC(a1 + 24);
  sub_20B0CD92C((uint64_t)(a1 + 2));
  return a1;
}

uint64_t sub_20B0C70D0(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(a1 - 1) = off_24C40FB08;
  *a1 = &unk_24C40FB80;
  v2 = a1[71];
  if (v2)
  {
    v3 = a1[72];
    v4 = (void *)a1[71];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[71];
    }
    a1[72] = v2;
    operator delete(v4);
  }
  sub_20B0CDABC(a1 + 23);
  return sub_20B0CD92C((uint64_t)(a1 + 1));
}

void sub_20B0C715C(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *a1 = off_24C40FB08;
  a1[1] = &unk_24C40FB80;
  v2 = a1[72];
  if (v2)
  {
    v3 = a1[73];
    v4 = (void *)a1[72];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[72];
    }
    a1[73] = v2;
    operator delete(v4);
  }
  sub_20B0CDABC(a1 + 24);
  sub_20B0CD92C((uint64_t)(a1 + 2));
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0C71FC(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  *(a1 - 1) = off_24C40FB08;
  *a1 = &unk_24C40FB80;
  v2 = a1[71];
  if (v2)
  {
    v3 = a1[72];
    v4 = (void *)a1[71];
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 1) < 0)
          operator delete(*(void **)(v3 - 24));
        v3 -= 24;
      }
      while (v3 != v2);
      v4 = (void *)a1[71];
    }
    a1[72] = v2;
    operator delete(v4);
  }
  sub_20B0CDABC(a1 + 23);
  sub_20B0CD92C((uint64_t)(a1 + 1));
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0C72A4(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20B0C72D4(a2, a1, &v3);
}

void sub_20B0C72D4(uint64_t (***a1)(), uint64_t a2, unsigned int *a3)
{
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  unsigned int v10;

  v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  if (v6)
  {
    sub_20B0F8628((uint64_t)v6, a2, *a3);
  }
  else
  {
    v7 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
    if (v7)
    {
      sub_20B0F87D4((uint64_t)v7, a2, *a3);
    }
    else
    {
      v8 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
      if (v8)
      {
        sub_20B0F89C4((uint64_t)v8, a2, *a3);
      }
      else
      {
        v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
        if (v9)
        {
          sub_20B0F8B70((uint64_t)v9, a2, *a3);
        }
        else
        {
          v10 = *a3;
          if (*a1 == &off_24C41C2C8)
            sub_20B0F8D90((uint64_t)a1, a2, v10);
          else
            sub_20B0F8F94(a1, a2, v10);
        }
      }
    }
  }
}

void sub_20B0C740C(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20B0C743C(a2, a1, &v3);
}

void sub_20B0C743C(uint64_t (***a1)(), uint64_t a2, unsigned int *a3)
{
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  void *v9;
  unsigned int v10;
  char v11;
  char v12;
  char v13;
  char v14;

  if (!sub_20B0F9108(a1, a2, a3))
  {
    v6 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40ED58, 0);
    if (v6)
    {
      v7 = v6;
      v8 = *a3;
      sub_20B0DD1A0((uint64_t)&v11, v6, a2 + 16);
      sub_20B0EFE0C((uint64_t)&v12, v7, (uint64_t *)(a2 + 192));
      if (v8 >= 3)
        sub_20B0DDA1C((uint64_t)v7, (char **)(a2 + 576));
    }
    else if (!sub_20B0F9224(a1, a2, a3))
    {
      v9 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA28, (const struct __class_type_info *)&unk_24C40EE18, 0);
      if (v9)
      {
        sub_20B0F9340((uint64_t)v9, a2, *a3);
      }
      else
      {
        v10 = *a3;
        if (*a1 == &off_24C41C508)
        {
          sub_20B0E2418((uint64_t)&v13, a1, a2 + 16);
          sub_20B0F51BC((uint64_t)&v14, a1, (uint64_t *)(a2 + 192));
          if (v10 >= 3)
            sub_20B0E2D50(a1, a2 + 576);
        }
        else
        {
          sub_20B0F9594((uint64_t)a1, a2, v10);
        }
      }
    }
  }
}

uint64_t sub_20B0C75A4()
{
  return 3;
}

uint64_t sub_20B0C75AC()
{
  return 3;
}

uint64_t sub_20B0C75B4()
{
  return 1;
}

uint64_t sub_20B0C75BC()
{
  return 1;
}

void sub_20B0C75C4(uint64_t *a1@<X0>, _QWORD *a2@<X8>)
{
  unint64_t v2;
  char v3;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  __int128 __p;
  _BYTE v13[7];
  char v14;
  char v15;
  uint64_t v16[48];
  uint64_t v17;
  std::__shared_weak_count *v18;
  _DWORD v19[2];
  _BYTE v20[216];
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  v6 = a1[72];
  v7 = a1[73];
  if (v6 == v7)
  {
    v8 = 0;
  }
  else
  {
    v8 = *(void **)v6;
    v2 = *(_QWORD *)(v6 + 8);
    v19[0] = *(_DWORD *)(v6 + 16);
    *(_DWORD *)((char *)v19 + 3) = *(_DWORD *)(v6 + 19);
    v3 = *(_BYTE *)(v6 + 23);
    *(_QWORD *)(v6 + 8) = 0;
    *(_QWORD *)(v6 + 16) = 0;
    *(_QWORD *)v6 = 0;
  }
  sub_20B41FE0C(a1 + 24, 1, (uint64_t)v16);
  LOBYTE(__p) = 0;
  v15 = 0;
  if (v6 != v7)
  {
    if (v3 < 0)
    {
      sub_20AEC60F4(&__p, v8, v2);
    }
    else
    {
      *(_QWORD *)&__p = v8;
      *((_QWORD *)&__p + 1) = v2;
      *(_DWORD *)v13 = v19[0];
      *(_DWORD *)&v13[3] = *(_DWORD *)((char *)v19 + 3);
      v14 = v3;
    }
    v15 = 1;
  }
  sub_20B24AB84(&v17, (uint64_t)v16, &__p);
  sub_20B0C6034((uint64_t)(a1 + 2), (uint64_t)v20);
  sub_20B0F7E54(a2, &v17, (uint64_t)v20);
  sub_20AF4EA3C((uint64_t)v20);
  v9 = v18;
  if (v18)
  {
    p_shared_owners = (unint64_t *)&v18->__shared_owners_;
    do
      v11 = __ldaxr(p_shared_owners);
    while (__stlxr(v11 - 1, p_shared_owners));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
  if (v15 && v14 < 0)
    operator delete((void *)__p);
  sub_20B088C38(v16);
  if (v6 != v7 && v3 < 0)
    operator delete(v8);
}

void sub_20B0C776C(_Unwind_Exception *a1, uint64_t a2, void *__p, uint64_t a4, int a5, __int16 a6, char a7, char a8, char a9, ...)
{
  void *v9;
  uint64_t v10;
  uint64_t v11;
  char v12;
  va_list va;

  va_start(va, a9);
  if (a9 && a8 < 0)
    operator delete(__p);
  sub_20B088C38((uint64_t *)va);
  if (v10 != v11 && v12 < 0)
    operator delete(v9);
  _Unwind_Resume(a1);
}

void sub_20B0C77D8(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  sub_20B0C75C4((uint64_t *)(a1 - 8), a2);
}

uint64_t sub_20B0C77E0(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EF0, (const struct __class_type_info *)&unk_24C40FC48, 8);
  if (result)
  {
    v4 = result;
    result = sub_20B0F7F8C(a1 + 192, result + 192);
    if ((_DWORD)result)
    {
      v6[0] = a1 + 24;
      v6[1] = a1 + 40;
      v6[2] = a1 + 72;
      v6[3] = a1 + 96;
      v6[4] = a1 + 128;
      v6[5] = a1 + 160;
      v5[0] = v4 + 24;
      v5[1] = v4 + 40;
      v5[2] = v4 + 72;
      v5[3] = v4 + 96;
      v5[4] = v4 + 128;
      v5[5] = v4 + 160;
      return sub_20B0C3554((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

uint64_t sub_20B0C7894(uint64_t a1, void *lpsrc)
{
  uint64_t result;
  uint64_t v4;
  _QWORD v5[6];
  _QWORD v6[6];
  char v7;

  result = (uint64_t)__dynamic_cast(lpsrc, (const struct __class_type_info *)&unk_24C411EF0, (const struct __class_type_info *)&unk_24C40FC48, 8);
  if (result)
  {
    v4 = result;
    result = sub_20B0F7F8C(a1 + 184, result + 192);
    if ((_DWORD)result)
    {
      v6[0] = a1 + 16;
      v6[1] = a1 + 32;
      v6[2] = a1 + 64;
      v6[3] = a1 + 88;
      v6[4] = a1 + 120;
      v6[5] = a1 + 152;
      v5[0] = v4 + 24;
      v5[1] = v4 + 40;
      v5[2] = v4 + 72;
      v5[3] = v4 + 96;
      v5[4] = v4 + 128;
      v5[5] = v4 + 160;
      return sub_20B0C3554((uint64_t)&v7, v6, v5);
    }
  }
  return result;
}

void sub_20B0C7948(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20B0C72D4(a2, a1, &v3);
}

void sub_20B0C7978(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20B0C72D4(a2, a1 - 8, &v3);
}

void sub_20B0C79A8(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20B0C743C(a2, a1, &v3);
}

void sub_20B0C79D8(uint64_t a1, uint64_t (***a2)(), unsigned int a3)
{
  unsigned int v3;

  v3 = a3;
  sub_20B0C743C(a2, a1 - 8, &v3);
}

uint64_t sub_20B0C7A08(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  __int128 v10;
  char v11;
  __int128 v12;
  void *v13;
  size_t v14;
  char v15;
  __int128 v16;
  void *v17;
  size_t v18;
  char v19;
  __int128 v20;
  void *v21;
  size_t v22;
  char v23;
  __int128 v24;
  void *v25;
  size_t v26;
  char v27;
  __int128 v28;
  void *v29;
  size_t v30;
  char v31;
  __int128 v32;
  void *v33;
  size_t v34;

  v4 = a1 + 24;
  *(_OWORD *)(a1 + 48) = 0u;
  v5 = a1 + 48;
  v6 = a1 + 72;
  *(_OWORD *)(a1 + 96) = 0u;
  v7 = a1 + 96;
  v8 = a1 + 120;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_DWORD *)(a1 + 144) = *((_DWORD *)a2 + 4);
  if (*((_BYTE *)a2 + 48))
  {
    if (*((char *)a2 + 47) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 152), (void *)a2[3], a2[4]);
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 3);
      *(_QWORD *)(a1 + 168) = a2[5];
      *(_OWORD *)(a1 + 152) = v9;
    }
  }
  else
  {
    *(_BYTE *)(a1 + 175) = 0;
    *(_BYTE *)(a1 + 152) = 0;
  }
  *(_OWORD *)(a1 + 176) = *(_OWORD *)a2;
  v10 = *((_OWORD *)a2 + 13);
  *(_QWORD *)(a1 + 208) = a2[28];
  *(_OWORD *)(a1 + 192) = v10;
  if (*((_BYTE *)a2 + 200))
  {
    if (a2 + 7 != (_QWORD *)a1)
    {
      v11 = *((_BYTE *)a2 + 79);
      if (*(char *)(a1 + 23) < 0)
      {
        if (v11 >= 0)
          v13 = a2 + 7;
        else
          v13 = (void *)a2[7];
        if (v11 >= 0)
          v14 = *((unsigned __int8 *)a2 + 79);
        else
          v14 = a2[8];
        sub_20AEC8090((void **)a1, v13, v14);
      }
      else if ((*((_BYTE *)a2 + 79) & 0x80) != 0)
      {
        sub_20AEC7FCC((_QWORD *)a1, (void *)a2[7], a2[8]);
      }
      else
      {
        v12 = *(_OWORD *)(a2 + 7);
        *(_QWORD *)(a1 + 16) = a2[9];
        *(_OWORD *)a1 = v12;
      }
    }
    if ((_QWORD *)v4 != a2 + 10)
    {
      v15 = *((_BYTE *)a2 + 103);
      if (*(char *)(a1 + 47) < 0)
      {
        if (v15 >= 0)
          v17 = a2 + 10;
        else
          v17 = (void *)a2[10];
        if (v15 >= 0)
          v18 = *((unsigned __int8 *)a2 + 103);
        else
          v18 = a2[11];
        sub_20AEC8090((void **)v4, v17, v18);
      }
      else if ((*((_BYTE *)a2 + 103) & 0x80) != 0)
      {
        sub_20AEC7FCC((_QWORD *)v4, (void *)a2[10], a2[11]);
      }
      else
      {
        v16 = *((_OWORD *)a2 + 5);
        *(_QWORD *)(v4 + 16) = a2[12];
        *(_OWORD *)v4 = v16;
      }
    }
    if ((_QWORD *)v5 != a2 + 13)
    {
      v19 = *((_BYTE *)a2 + 127);
      if (*(char *)(a1 + 71) < 0)
      {
        if (v19 >= 0)
          v21 = a2 + 13;
        else
          v21 = (void *)a2[13];
        if (v19 >= 0)
          v22 = *((unsigned __int8 *)a2 + 127);
        else
          v22 = a2[14];
        sub_20AEC8090((void **)v5, v21, v22);
      }
      else if ((*((_BYTE *)a2 + 127) & 0x80) != 0)
      {
        sub_20AEC7FCC((_QWORD *)v5, (void *)a2[13], a2[14]);
      }
      else
      {
        v20 = *(_OWORD *)(a2 + 13);
        *(_QWORD *)(v5 + 16) = a2[15];
        *(_OWORD *)v5 = v20;
      }
    }
    if ((_QWORD *)v6 != a2 + 16)
    {
      v23 = *((_BYTE *)a2 + 151);
      if (*(char *)(a1 + 95) < 0)
      {
        if (v23 >= 0)
          v25 = a2 + 16;
        else
          v25 = (void *)a2[16];
        if (v23 >= 0)
          v26 = *((unsigned __int8 *)a2 + 151);
        else
          v26 = a2[17];
        sub_20AEC8090((void **)v6, v25, v26);
      }
      else if ((*((_BYTE *)a2 + 151) & 0x80) != 0)
      {
        sub_20AEC7FCC((_QWORD *)v6, (void *)a2[16], a2[17]);
      }
      else
      {
        v24 = *((_OWORD *)a2 + 8);
        *(_QWORD *)(v6 + 16) = a2[18];
        *(_OWORD *)v6 = v24;
      }
    }
    if ((_QWORD *)v7 != a2 + 19)
    {
      v27 = *((_BYTE *)a2 + 175);
      if (*(char *)(a1 + 119) < 0)
      {
        if (v27 >= 0)
          v29 = a2 + 19;
        else
          v29 = (void *)a2[19];
        if (v27 >= 0)
          v30 = *((unsigned __int8 *)a2 + 175);
        else
          v30 = a2[20];
        sub_20AEC8090((void **)v7, v29, v30);
      }
      else if ((*((_BYTE *)a2 + 175) & 0x80) != 0)
      {
        sub_20AEC7FCC((_QWORD *)v7, (void *)a2[19], a2[20]);
      }
      else
      {
        v28 = *(_OWORD *)(a2 + 19);
        *(_QWORD *)(v7 + 16) = a2[21];
        *(_OWORD *)v7 = v28;
      }
    }
    if ((_QWORD *)v8 != a2 + 22)
    {
      v31 = *((_BYTE *)a2 + 199);
      if (*(char *)(a1 + 143) < 0)
      {
        if (v31 >= 0)
          v33 = a2 + 22;
        else
          v33 = (void *)a2[22];
        if (v31 >= 0)
          v34 = *((unsigned __int8 *)a2 + 199);
        else
          v34 = a2[23];
        sub_20AEC8090((void **)v8, v33, v34);
      }
      else if ((*((_BYTE *)a2 + 199) & 0x80) != 0)
      {
        sub_20AEC7FCC((_QWORD *)v8, (void *)a2[22], a2[23]);
      }
      else
      {
        v32 = *((_OWORD *)a2 + 11);
        *(_QWORD *)(v8 + 16) = a2[24];
        *(_OWORD *)v8 = v32;
      }
    }
  }
  return a1;
}

void sub_20B0C7D08(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void **v6;

  if (*(char *)(v1 + 143) < 0)
  {
    operator delete(*v6);
    if ((*(char *)(v1 + 119) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 95) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_10;
    }
  }
  else if ((*(char *)(v1 + 119) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v5);
  if ((*(char *)(v1 + 95) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(v1 + 71) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*v4);
  if ((*(char *)(v1 + 71) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(v1 + 47) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*v3);
  if ((*(char *)(v1 + 47) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(v1 + 23) & 0x80000000) == 0)
      goto LABEL_7;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_7:
    _Unwind_Resume(exception_object);
LABEL_13:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B0C7DBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BOOL4 v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  char *v10;
  void *v11;
  __int128 v12;
  int v13;
  int v14;
  void *v15[3];
  void *v16[2];
  uint64_t v17;
  void *v18[2];
  uint64_t v19;
  void *v20[2];
  uint64_t v21;
  void *v22[2];
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  void *__p[2];
  void *v27;
  __int128 v28;
  uint64_t v29;
  void *v30[2];
  uint64_t v31;
  __int128 v32;
  uint64_t v33;
  void *v34[2];
  uint64_t v35;
  __int128 v36;
  uint64_t v37;
  char v38;

  if (*(char *)(a1 + 23) < 0)
  {
    if (*(_QWORD *)(a1 + 8))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 23))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    if (*(_QWORD *)(a1 + 32))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 47))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    if (*(_QWORD *)(a1 + 56))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 71))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    if (*(_QWORD *)(a1 + 80))
      goto LABEL_21;
  }
  else if (*(_BYTE *)(a1 + 95))
  {
    goto LABEL_21;
  }
  if (*(char *)(a1 + 119) < 0)
    v4 = *(_QWORD *)(a1 + 104);
  else
    v4 = *(unsigned __int8 *)(a1 + 119);
  if (v4)
  {
LABEL_21:
    v5 = 1;
    v6 = *(char *)(a1 + 175);
    if ((v6 & 0x80000000) == 0)
      goto LABEL_22;
LABEL_28:
    v7 = *(_QWORD *)(a1 + 160);
    LOBYTE(__p[0]) = 0;
    v38 = 0;
    if (!v5)
      goto LABEL_55;
LABEL_29:
    sub_20B527B34((char *)v15, (__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48), (__int128 *)(a1 + 72), (__int128 *)(a1 + 96), (__int128 *)(a1 + 120));
    if (!v38)
    {
      *(_OWORD *)__p = *(_OWORD *)v15;
      v11 = v15[2];
      memset(v15, 0, sizeof(v15));
      v12 = *(_OWORD *)v16;
      v16[0] = 0;
      v28 = v12;
      v27 = v11;
      v29 = v17;
      v16[1] = 0;
      v17 = 0;
      *(_OWORD *)v30 = *(_OWORD *)v18;
      v18[0] = 0;
      v18[1] = 0;
      v31 = v19;
      v33 = v21;
      v32 = *(_OWORD *)v20;
      v19 = 0;
      v20[0] = 0;
      v20[1] = 0;
      v21 = 0;
      *(_OWORD *)v34 = *(_OWORD *)v22;
      v22[0] = 0;
      v22[1] = 0;
      v35 = v23;
      v37 = v25;
      v36 = v24;
      v23 = 0;
      v24 = 0uLL;
      v25 = 0;
      v38 = 1;
      goto LABEL_52;
    }
    if (SHIBYTE(v27) < 0)
      operator delete(__p[0]);
    *(_OWORD *)__p = *(_OWORD *)v15;
    v27 = v15[2];
    HIBYTE(v15[2]) = 0;
    LOBYTE(v15[0]) = 0;
    if (SHIBYTE(v29) < 0)
      operator delete((void *)v28);
    v28 = *(_OWORD *)v16;
    v29 = v17;
    HIBYTE(v17) = 0;
    LOBYTE(v16[0]) = 0;
    if (SHIBYTE(v31) < 0)
      operator delete(v30[0]);
    *(_OWORD *)v30 = *(_OWORD *)v18;
    v31 = v19;
    HIBYTE(v19) = 0;
    LOBYTE(v18[0]) = 0;
    if (SHIBYTE(v33) < 0)
      operator delete((void *)v32);
    v32 = *(_OWORD *)v20;
    v33 = v21;
    HIBYTE(v21) = 0;
    LOBYTE(v20[0]) = 0;
    if (SHIBYTE(v35) < 0)
      operator delete(v34[0]);
    *(_OWORD *)v34 = *(_OWORD *)v22;
    v35 = v23;
    HIBYTE(v23) = 0;
    LOBYTE(v22[0]) = 0;
    if ((SHIBYTE(v37) & 0x80000000) == 0)
    {
      v36 = v24;
      v37 = v25;
      HIBYTE(v25) = 0;
      LOBYTE(v24) = 0;
      if (SHIBYTE(v21) < 0)
        goto LABEL_42;
LABEL_52:
      if (SHIBYTE(v19) < 0)
      {
LABEL_43:
        operator delete(v18[0]);
        if (SHIBYTE(v17) < 0)
          goto LABEL_44;
        goto LABEL_54;
      }
LABEL_53:
      if (SHIBYTE(v17) < 0)
      {
LABEL_44:
        operator delete(v16[0]);
        if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
          goto LABEL_55;
        goto LABEL_45;
      }
LABEL_54:
      if ((SHIBYTE(v15[2]) & 0x80000000) == 0)
        goto LABEL_55;
LABEL_45:
      operator delete(v15[0]);
      v9 = *(_DWORD *)(a1 + 144);
      LODWORD(v15[0]) = v9;
      if (v7)
        goto LABEL_56;
      goto LABEL_46;
    }
    operator delete((void *)v36);
    v36 = v24;
    v37 = v25;
    HIBYTE(v25) = 0;
    LOBYTE(v24) = 0;
    if (SHIBYTE(v23) < 0)
    {
      operator delete(v22[0]);
      if ((SHIBYTE(v21) & 0x80000000) == 0)
        goto LABEL_52;
    }
    else if ((SHIBYTE(v21) & 0x80000000) == 0)
    {
      goto LABEL_52;
    }
LABEL_42:
    operator delete(v20[0]);
    if (SHIBYTE(v19) < 0)
      goto LABEL_43;
    goto LABEL_53;
  }
  if (*(char *)(a1 + 143) < 0)
    v8 = *(_QWORD *)(a1 + 128);
  else
    v8 = *(unsigned __int8 *)(a1 + 143);
  v5 = v8 != 0;
  v6 = *(char *)(a1 + 175);
  if (v6 < 0)
    goto LABEL_28;
LABEL_22:
  v7 = v6;
  LOBYTE(__p[0]) = 0;
  v38 = 0;
  if (v5)
    goto LABEL_29;
LABEL_55:
  v9 = *(_DWORD *)(a1 + 144);
  LODWORD(v15[0]) = v9;
  if (v7)
  {
LABEL_56:
    if (*(char *)(a1 + 175) < 0)
    {
      sub_20AEC60F4(&v15[1], *(void **)(a1 + 152), *(_QWORD *)(a1 + 160));
      v9 = (int)v15[0];
    }
    else
    {
      *(_OWORD *)&v15[1] = *(_OWORD *)(a1 + 152);
      v16[0] = *(void **)(a1 + 168);
    }
    LOBYTE(v16[1]) = 1;
    *(_OWORD *)a2 = *(_OWORD *)(a1 + 176);
    *(_DWORD *)(a2 + 16) = v9;
    *(_OWORD *)(a2 + 24) = *(_OWORD *)&v15[1];
    *(void **)(a2 + 40) = v16[0];
    v15[1] = 0;
    v15[2] = 0;
    v16[0] = 0;
    *(_BYTE *)(a2 + 48) = 1;
    *(_BYTE *)(a2 + 56) = 0;
    v10 = (char *)(a2 + 56);
    *(_BYTE *)(a2 + 200) = 0;
    if (v38)
      goto LABEL_60;
LABEL_47:
    *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 192);
    *(_QWORD *)(a2 + 224) = *(_QWORD *)(a1 + 208);
    if (!v38)
      return;
    goto LABEL_64;
  }
LABEL_46:
  LOBYTE(v15[1]) = 0;
  LOBYTE(v16[1]) = 0;
  *(_OWORD *)a2 = *(_OWORD *)(a1 + 176);
  *(_DWORD *)(a2 + 16) = v9;
  *(_BYTE *)(a2 + 24) = 0;
  *(_BYTE *)(a2 + 48) = 0;
  *(_BYTE *)(a2 + 56) = 0;
  v10 = (char *)(a2 + 56);
  *(_BYTE *)(a2 + 200) = 0;
  if (!v38)
    goto LABEL_47;
LABEL_60:
  sub_20AF3FE60(v10, (__int128 *)__p);
  *(_BYTE *)(a2 + 200) = 1;
  v13 = LOBYTE(v16[1]);
  v14 = SHIBYTE(v16[0]);
  *(_OWORD *)(a2 + 208) = *(_OWORD *)(a1 + 192);
  *(_QWORD *)(a2 + 224) = *(_QWORD *)(a1 + 208);
  if (v13)
  {
    if (v14 < 0)
      operator delete(v15[1]);
  }
  if (!v38)
    return;
LABEL_64:
  if (SHIBYTE(v37) < 0)
  {
    operator delete((void *)v36);
    if ((SHIBYTE(v35) & 0x80000000) == 0)
    {
LABEL_66:
      if ((SHIBYTE(v33) & 0x80000000) == 0)
        goto LABEL_67;
      goto LABEL_73;
    }
  }
  else if ((SHIBYTE(v35) & 0x80000000) == 0)
  {
    goto LABEL_66;
  }
  operator delete(v34[0]);
  if ((SHIBYTE(v33) & 0x80000000) == 0)
  {
LABEL_67:
    if ((SHIBYTE(v31) & 0x80000000) == 0)
      goto LABEL_68;
LABEL_74:
    operator delete(v30[0]);
    if ((SHIBYTE(v29) & 0x80000000) == 0)
    {
LABEL_69:
      if ((SHIBYTE(v27) & 0x80000000) == 0)
        return;
LABEL_76:
      operator delete(__p[0]);
      return;
    }
    goto LABEL_75;
  }
LABEL_73:
  operator delete((void *)v32);
  if (SHIBYTE(v31) < 0)
    goto LABEL_74;
LABEL_68:
  if ((SHIBYTE(v29) & 0x80000000) == 0)
    goto LABEL_69;
LABEL_75:
  operator delete((void *)v28);
  if (SHIBYTE(v27) < 0)
    goto LABEL_76;
}

void sub_20B0C8310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20AF3F978((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B0C8324(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_20AF3F978((uint64_t)&a27);
  _Unwind_Resume(a1);
}

void sub_20B0C8338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  uint64_t v30;
  uint64_t v31;
  void **v32;

  sub_20AF3F978(v31);
  if (*(_BYTE *)(v30 + 48) && *(char *)(v30 + 47) < 0)
    operator delete(*v32);
  if (a16)
  {
    if (a15 < 0)
      operator delete(__p);
  }
  sub_20AF3F978((uint64_t)&a30);
  _Unwind_Resume(a1);
}

BOOL sub_20B0C8384(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned __int8 *v6;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const void **v13;
  unsigned __int8 *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  const void **v19;
  unsigned __int8 *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  const void **v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  const void **v31;
  unsigned __int8 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  const void **v37;
  unsigned __int8 *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  const void **v43;
  unsigned __int8 *v44;

  v2 = a1[23];
  if ((v2 & 0x80u) == 0)
    v3 = a1[23];
  else
    v3 = *((_QWORD *)a1 + 1);
  v4 = a2[23];
  v5 = (char)v4;
  if ((v4 & 0x80u) != 0)
    v4 = *((_QWORD *)a2 + 1);
  if (v3 != v4)
    return 0;
  v6 = a2;
  if (v5 < 0)
    a2 = *(unsigned __int8 **)a2;
  if ((v2 & 0x80) != 0)
  {
    if (memcmp(*(const void **)a1, a2, *((_QWORD *)a1 + 1)))
      return 0;
  }
  else if (a1[23])
  {
    v8 = a1;
    while (*v8 == *a2)
    {
      ++v8;
      ++a2;
      if (!--v2)
        goto LABEL_16;
    }
    return 0;
  }
LABEL_16:
  v9 = a1[47];
  if ((v9 & 0x80u) == 0)
    v10 = a1[47];
  else
    v10 = *((_QWORD *)a1 + 4);
  v11 = v6[47];
  v12 = (char)v11;
  if ((v11 & 0x80u) != 0)
    v11 = *((_QWORD *)v6 + 4);
  if (v10 != v11)
    return 0;
  v13 = (const void **)(a1 + 24);
  if (v12 >= 0)
    v14 = v6 + 24;
  else
    v14 = (unsigned __int8 *)*((_QWORD *)v6 + 3);
  if ((v9 & 0x80) != 0)
  {
    if (memcmp(*v13, v14, *((_QWORD *)a1 + 4)))
      return 0;
  }
  else if (a1[47])
  {
    while (*(unsigned __int8 *)v13 == *v14)
    {
      v13 = (const void **)((char *)v13 + 1);
      ++v14;
      if (!--v9)
        goto LABEL_31;
    }
    return 0;
  }
LABEL_31:
  v15 = a1[71];
  if ((v15 & 0x80u) == 0)
    v16 = a1[71];
  else
    v16 = *((_QWORD *)a1 + 7);
  v17 = v6[71];
  v18 = (char)v17;
  if ((v17 & 0x80u) != 0)
    v17 = *((_QWORD *)v6 + 7);
  if (v16 != v17)
    return 0;
  v19 = (const void **)(a1 + 48);
  if (v18 >= 0)
    v20 = v6 + 48;
  else
    v20 = (unsigned __int8 *)*((_QWORD *)v6 + 6);
  if ((v15 & 0x80) != 0)
  {
    if (memcmp(*v19, v20, *((_QWORD *)a1 + 7)))
      return 0;
  }
  else if (a1[71])
  {
    while (*(unsigned __int8 *)v19 == *v20)
    {
      v19 = (const void **)((char *)v19 + 1);
      ++v20;
      if (!--v15)
        goto LABEL_46;
    }
    return 0;
  }
LABEL_46:
  v21 = a1[95];
  if ((v21 & 0x80u) == 0)
    v22 = a1[95];
  else
    v22 = *((_QWORD *)a1 + 10);
  v23 = v6[95];
  v24 = (char)v23;
  if ((v23 & 0x80u) != 0)
    v23 = *((_QWORD *)v6 + 10);
  if (v22 != v23)
    return 0;
  v25 = (const void **)(a1 + 72);
  if (v24 >= 0)
    v26 = v6 + 72;
  else
    v26 = (unsigned __int8 *)*((_QWORD *)v6 + 9);
  if ((v21 & 0x80) != 0)
  {
    if (memcmp(*v25, v26, *((_QWORD *)a1 + 10)))
      return 0;
  }
  else if (a1[95])
  {
    while (*(unsigned __int8 *)v25 == *v26)
    {
      v25 = (const void **)((char *)v25 + 1);
      ++v26;
      if (!--v21)
        goto LABEL_61;
    }
    return 0;
  }
LABEL_61:
  v27 = a1[119];
  if ((v27 & 0x80u) == 0)
    v28 = a1[119];
  else
    v28 = *((_QWORD *)a1 + 13);
  v29 = v6[119];
  v30 = (char)v29;
  if ((v29 & 0x80u) != 0)
    v29 = *((_QWORD *)v6 + 13);
  if (v28 != v29)
    return 0;
  v31 = (const void **)(a1 + 96);
  if (v30 >= 0)
    v32 = v6 + 96;
  else
    v32 = (unsigned __int8 *)*((_QWORD *)v6 + 12);
  if ((v27 & 0x80) != 0)
  {
    if (memcmp(*v31, v32, *((_QWORD *)a1 + 13)))
      return 0;
  }
  else if (a1[119])
  {
    while (*(unsigned __int8 *)v31 == *v32)
    {
      v31 = (const void **)((char *)v31 + 1);
      ++v32;
      if (!--v27)
        goto LABEL_76;
    }
    return 0;
  }
LABEL_76:
  v33 = a1[143];
  if ((v33 & 0x80u) == 0)
    v34 = a1[143];
  else
    v34 = *((_QWORD *)a1 + 16);
  v35 = v6[143];
  v36 = (char)v35;
  if ((v35 & 0x80u) != 0)
    v35 = *((_QWORD *)v6 + 16);
  if (v34 != v35)
    return 0;
  v37 = (const void **)(a1 + 120);
  if (v36 >= 0)
    v38 = v6 + 120;
  else
    v38 = (unsigned __int8 *)*((_QWORD *)v6 + 15);
  if ((v33 & 0x80) != 0)
  {
    if (memcmp(*v37, v38, *((_QWORD *)a1 + 16)))
      return 0;
  }
  else if (a1[143])
  {
    while (*(unsigned __int8 *)v37 == *v38)
    {
      v37 = (const void **)((char *)v37 + 1);
      ++v38;
      if (!--v33)
        goto LABEL_91;
    }
    return 0;
  }
LABEL_91:
  if (*((_DWORD *)a1 + 36) != *((_DWORD *)v6 + 36))
    return 0;
  v39 = a1[175];
  if ((v39 & 0x80u) == 0)
    v40 = a1[175];
  else
    v40 = *((_QWORD *)a1 + 20);
  v41 = v6[175];
  v42 = (char)v41;
  if ((v41 & 0x80u) != 0)
    v41 = *((_QWORD *)v6 + 20);
  if (v40 != v41)
    return 0;
  v43 = (const void **)(a1 + 152);
  if (v42 >= 0)
    v44 = v6 + 152;
  else
    v44 = (unsigned __int8 *)*((_QWORD *)v6 + 19);
  if ((v39 & 0x80) != 0)
  {
    if (!memcmp(*v43, v44, *((_QWORD *)a1 + 20)))
      goto LABEL_107;
    return 0;
  }
  if (a1[175])
  {
    while (*(unsigned __int8 *)v43 == *v44)
    {
      v43 = (const void **)((char *)v43 + 1);
      ++v44;
      if (!--v39)
        goto LABEL_107;
    }
    return 0;
  }
LABEL_107:
  if (*((_QWORD *)a1 + 22) != *((_QWORD *)v6 + 22) || *((_QWORD *)a1 + 23) != *((_QWORD *)v6 + 23))
    return 0;
  if (*((_QWORD *)a1 + 24) != *((_QWORD *)v6 + 24)
    || *((_DWORD *)a1 + 50) != (unint64_t)*((unsigned int *)v6 + 50))
  {
    return 0;
  }
  return *(_QWORD *)(a1 + 204) == *(_QWORD *)(v6 + 204)
      && *((_DWORD *)a1 + 53) == (unint64_t)*((unsigned int *)v6 + 53);
}

uint64_t sub_20B0C878C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24C40E990;
  *(_QWORD *)(a1 + 8) = &unk_24C40E9F0;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20B0C8804(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24C40E990;
  *(_QWORD *)a1 = &unk_24C40E9F0;
  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0C887C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24C40E990;
  *(_QWORD *)(a1 + 8) = &unk_24C40E9F0;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_20B0C8908(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40E990;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40E9F0;
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v4))(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_20B0C899C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40EF08;
  *(_QWORD *)(a1 + 8) = &unk_24C40EF68;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20B0C8A4C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40EF08;
  *(_QWORD *)a1 = &unk_24C40EF68;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0C8AFC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40EF08;
  *(_QWORD *)(a1 + 8) = &unk_24C40EF68;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40F569C881);
}

uint64_t sub_20B0C8BC0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C40EF08;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40EF68;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40F569C881);
}

uint64_t sub_20B0C8C94(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F0E0;
  *(_QWORD *)(a1 + 8) = &unk_24C40F140;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20B0C8D44(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40F0E0;
  *(_QWORD *)a1 = &unk_24C40F140;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0C8DF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F0E0;
  *(_QWORD *)(a1 + 8) = &unk_24C40F140;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40F569C881);
}

uint64_t sub_20B0C8EB8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C40F0E0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40F140;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40F569C881);
}

uint64_t sub_20B0C8F8C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F2B8;
  *(_QWORD *)(a1 + 8) = &unk_24C40F318;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20B0C903C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40F2B8;
  *(_QWORD *)a1 = &unk_24C40F318;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0C90EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F2B8;
  *(_QWORD *)(a1 + 8) = &unk_24C40F318;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40F569C881);
}

uint64_t sub_20B0C91B0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C40F2B8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40F318;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40F569C881);
}

uint64_t sub_20B0C9284(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C410370;
  *(_QWORD *)(a1 + 8) = &unk_24C4103D0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20B0C9334(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C410370;
  *(_QWORD *)a1 = &unk_24C4103D0;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0C93E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C410370;
  *(_QWORD *)(a1 + 8) = &unk_24C4103D0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40F569C881);
}

uint64_t sub_20B0C94A8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C410370;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C4103D0;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40F569C881);
}

uint64_t sub_20B0C957C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C410510;
  *(_QWORD *)(a1 + 8) = &unk_24C410570;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20B0C962C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C410510;
  *(_QWORD *)a1 = &unk_24C410570;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0C96DC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C410510;
  *(_QWORD *)(a1 + 8) = &unk_24C410570;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40F569C881);
}

uint64_t sub_20B0C97A0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C410510;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C410570;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40F569C881);
}

uint64_t sub_20B0C9874(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24C40F490;
  *(_QWORD *)(a1 + 8) = &unk_24C40F4F0;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

_QWORD *sub_20B0C9900(_QWORD *result)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v4;

  v1 = result;
  *(result - 1) = off_24C40F490;
  *result = &unk_24C40F4F0;
  v2 = (uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))result[25];
  if (v2)
    result = (_QWORD *)v2(0, result + 25, 0, 0, 0);
  v3 = *((unsigned int *)v1 + 46);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))*(&off_24C40DC18 + v3))(&v4, v1 + 1);
  *((_DWORD *)v1 + 46) = -1;
  return result;
}

uint64_t sub_20B0C998C(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24C40F490;
  *(_QWORD *)(a1 + 8) = &unk_24C40F4F0;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40294CF2FDLL);
}

uint64_t sub_20B0C9A2C(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40F490;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40F4F0;
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 200);
  if (v3)
    v3(0, a1 + 200, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v4))(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40294CF2FDLL);
}

uint64_t sub_20B0C9AD4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F8E8;
  *(_QWORD *)(a1 + 8) = &unk_24C40F948;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20B0C9B84(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40F8E8;
  *(_QWORD *)a1 = &unk_24C40F948;
  v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0C9C34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F8E8;
  *(_QWORD *)(a1 + 8) = &unk_24C40F948;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C407D254C52);
}

uint64_t sub_20B0C9CF8(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C40F8E8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40F948;
  v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C407D254C52);
}

uint64_t sub_20B0C9DCC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40FD38;
  *(_QWORD *)(a1 + 8) = &unk_24C40FD98;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20B0C9E7C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40FD38;
  *(_QWORD *)a1 = &unk_24C40FD98;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0C9F2C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40FD38;
  *(_QWORD *)(a1 + 8) = &unk_24C40FD98;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10F3C40EF434651);
}

uint64_t sub_20B0C9FF0(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C40FD38;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40FD98;
  v3 = *(std::__shared_weak_count **)(a1 + 208);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10F3C40EF434651);
}

_BYTE *sub_20B0CA0C4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _BYTE *result;

  if (*(char *)(a1 + 23) < 0)
  {
    sub_20AEC60F4((_BYTE *)a2, *(void **)a1, *(_QWORD *)(a1 + 8));
    *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 24);
    v4 = a2 + 32;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
      goto LABEL_3;
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)a1;
    *(_QWORD *)(a2 + 16) = *(_QWORD *)(a1 + 16);
    *(_DWORD *)(a2 + 24) = *(unsigned __int8 *)(a1 + 24);
    v4 = a2 + 32;
    if ((*(char *)(a1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      *(_OWORD *)v4 = *(_OWORD *)(a1 + 32);
      *(_QWORD *)(v4 + 16) = *(_QWORD *)(a1 + 48);
      goto LABEL_6;
    }
  }
  sub_20AEC60F4((_BYTE *)v4, *(void **)(a1 + 32), *(_QWORD *)(a1 + 40));
LABEL_6:
  *(_DWORD *)(a2 + 56) = *(_DWORD *)(a1 + 56);
  if (*(char *)(a1 + 87) < 0)
  {
    sub_20AEC60F4((_BYTE *)(a2 + 64), *(void **)(a1 + 64), *(_QWORD *)(a1 + 72));
  }
  else
  {
    *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
    *(_QWORD *)(a2 + 80) = *(_QWORD *)(a1 + 80);
  }
  result = (_BYTE *)(a2 + 88);
  if (*(char *)(a1 + 111) < 0)
    return sub_20AEC60F4(result, *(void **)(a1 + 88), *(_QWORD *)(a1 + 96));
  *(_OWORD *)result = *(_OWORD *)(a1 + 88);
  *(_QWORD *)(a2 + 104) = *(_QWORD *)(a1 + 104);
  return result;
}

void sub_20B0CA1CC(_Unwind_Exception *exception_object)
{
  uint64_t v1;
  void **v2;
  void **v3;

  if (*(char *)(v1 + 87) < 0)
  {
    operator delete(*v3);
    if ((*(char *)(v1 + 55) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(v1 + 23) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_7;
    }
  }
  else if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*v2);
  if ((*(char *)(v1 + 23) & 0x80000000) == 0)
LABEL_4:
    _Unwind_Resume(exception_object);
LABEL_7:
  operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0CA240(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = &off_24C40FF10;
  *(_QWORD *)(a1 + 8) = &unk_24C40FF70;
  if (*(char *)(a1 + 311) < 0)
  {
    operator delete(*(void **)(a1 + 288));
    if ((*(char *)(a1 + 287) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 255) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 287) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 264));
  if ((*(char *)(a1 + 255) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 223) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_10;
  }
LABEL_9:
  operator delete(*(void **)(a1 + 232));
  if ((*(char *)(a1 + 223) & 0x80000000) == 0)
  {
LABEL_5:
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_12;
    goto LABEL_11;
  }
LABEL_10:
  operator delete(*(void **)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_11:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
LABEL_12:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CA314(uint64_t a1)
{
  return sub_20B0CA240(a1 - 8);
}

void sub_20B0CA31C(uint64_t a1)
{
  sub_20B0CA240(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0CA340(uint64_t a1)
{
  sub_20B0CA240(a1 - 8);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0CA368(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C4101D0;
  *(_QWORD *)(a1 + 8) = &unk_24C410230;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20B0CA410(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24C4101D0;
  *(_QWORD *)a1 = &unk_24C410230;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_20B0CA4B8(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)a1 = off_24C4101D0;
  *(_QWORD *)(a1 + 8) = &unk_24C410230;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x20BD3583CLL);
    }
  }
  ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, a1 + 16);
  goto LABEL_8;
}

void sub_20B0CA570(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24C4101D0;
  *(_QWORD *)a1 = &unk_24C410230;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x20BD3583CLL);
    }
  }
  ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, a1 + 8);
  goto LABEL_8;
}

uint64_t sub_20B0CA630(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40DF60;
  *(_QWORD *)(a1 + 8) = &unk_24C40DFC0;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CA698(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24C40DF60;
  *(_QWORD *)result = &unk_24C40DFC0;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_20B0CA700(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40DF60;
  *(_QWORD *)(a1 + 8) = &unk_24C40DFC0;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40CF772451);
}

uint64_t sub_20B0CA77C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24C40DF60;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40DFC0;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40CF772451);
}

uint64_t sub_20B0CA800(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E100;
  *(_QWORD *)(a1 + 8) = &unk_24C40E160;
  sub_20B0D0484(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CA86C(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24C40E100;
  *(_QWORD *)a1 = &unk_24C40E160;
  result = sub_20B0D0484(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return result;
}

uint64_t sub_20B0CA8D8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E100;
  *(_QWORD *)(a1 + 8) = &unk_24C40E160;
  sub_20B0D0484(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40DC57CB27);
}

uint64_t sub_20B0CA958(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24C40E100;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40E160;
  sub_20B0D0484(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40DC57CB27);
}

uint64_t sub_20B0CA9E0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E370;
  *(_QWORD *)(a1 + 8) = &unk_24C40E3D0;
  sub_20AEC833C(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20B0CAA50(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24C40E370;
  *(_QWORD *)a1 = &unk_24C40E3D0;
  sub_20AEC833C(a1 + 192, *(char **)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0CAAC0(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E370;
  *(_QWORD *)(a1 + 8) = &unk_24C40E3D0;
  sub_20AEC833C(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40546963AFLL);
}

uint64_t sub_20B0CAB44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24C40E370;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40E3D0;
  sub_20AEC833C(a1 + 192, *(char **)(a1 + 200));
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40546963AFLL);
}

uint64_t sub_20B0CABD0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = &off_24C40E510;
  *(_QWORD *)(a1 + 8) = &unk_24C40E570;
  if (*(_BYTE *)(a1 + 248) && *(char *)(a1 + 247) < 0)
    operator delete(*(void **)(a1 + 224));
  v2 = *(_QWORD *)(a1 + 200);
  if (v2)
  {
    v3 = *(_QWORD *)(a1 + 208);
    v4 = *(void **)(a1 + 200);
    if (v3 != v2)
    {
      do
      {
        if (*(char *)(v3 - 9) < 0)
          operator delete(*(void **)(v3 - 32));
        v3 -= 32;
      }
      while (v3 != v2);
      v4 = *(void **)(a1 + 200);
    }
    *(_QWORD *)(a1 + 208) = v2;
    operator delete(v4);
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CACA4(uint64_t a1)
{
  return sub_20B0CABD0(a1 - 8);
}

void sub_20B0CACAC(uint64_t a1)
{
  sub_20B0CABD0(a1);
  JUMPOUT(0x20BD3583CLL);
}

void sub_20B0CACD0(uint64_t a1)
{
  sub_20B0CABD0(a1 - 8);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0CACF8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E750;
  *(_QWORD *)(a1 + 8) = &unk_24C40E7B0;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CAD60(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24C40E750;
  *(_QWORD *)result = &unk_24C40E7B0;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_20B0CADC8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E750;
  *(_QWORD *)(a1 + 8) = &unk_24C40E7B0;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40956CF698);
}

uint64_t sub_20B0CAE44(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24C40E750;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40E7B0;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40956CF698);
}

uint64_t sub_20B0CAEC8()
{
  return 2;
}

uint64_t sub_20B0CAED0()
{
  return 1;
}

uint64_t sub_20B0CAED8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CAEE4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20B0CAEF0@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _BYTE *v6;
  _BYTE *v7;
  size_t v8;
  char *v9;
  char *v10;
  _BYTE v12[208];
  uint64_t (**v13)();
  char v14;
  void *__p;
  void *v16;
  char *v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v12);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v12);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v12);
  }
  v13 = &off_24C3F6340;
  v14 = *(_BYTE *)(a1 + 208);
  v16 = 0;
  v17 = 0;
  __p = 0;
  v7 = *(_BYTE **)(a1 + 216);
  v6 = *(_BYTE **)(a1 + 224);
  v8 = v6 - v7;
  if (v6 != v7)
  {
    if ((v8 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v9 = (char *)operator new(v6 - v7);
    v10 = &v9[v8];
    __p = v9;
    v17 = &v9[v8];
    memcpy(v9, v7, v8);
    v16 = v10;
  }
  sub_20AF4CAF4((uint64_t)v18, (uint64_t)v12);
  v13 = &off_24C3F62C0;
  sub_20B0F9DC4((uint64_t)&v13, a2);
  v13 = &off_24C3F6340;
  sub_20AF4EA3C((uint64_t)v18);
  if (__p)
  {
    v16 = __p;
    operator delete(__p);
  }
  return sub_20AF4EA3C((uint64_t)v12);
}

void sub_20B0CB048(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20AF77DBC(&a35);
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0CB064(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38)
{
  if (__p)
  {
    a38 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B0CB090(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24C40E8E8 && sub_20B16EB28(a1, (uint64_t)a2);
}

void sub_20B0CB0B0(uint64_t a1, uint64_t (***a2)())
{
  sub_20B16ED54(a2, a1);
}

void sub_20B0CB0C0(uint64_t a1, uint64_t (***a2)())
{
  sub_20B16FDB0(a2, a1);
}

uint64_t sub_20B0CB0D0()
{
  return 2;
}

uint64_t sub_20B0CB0D8()
{
  return 2;
}

uint64_t sub_20B0CB0E0()
{
  return 1;
}

void sub_20B0CB0E8(uint64_t a1, uint64_t (***a2)())
{
  sub_20B16ED54(a2, a1 - 8);
}

void sub_20B0CB0F8(uint64_t a1, uint64_t (***a2)())
{
  sub_20B16FDB0(a2, a1 - 8);
}

uint64_t sub_20B0CB108()
{
  return 2;
}

uint64_t sub_20B0CB110()
{
  return 1;
}

uint64_t sub_20B0CB118(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CB124(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20B0CB130@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24C3F6410;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20AF4CAF4((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24C3F6390;
  sub_20B104100((uint64_t)v15, a2);
  v15[0] = &off_24C3F6410;
  sub_20AF4EA3C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20AF4EA3C((uint64_t)v14);
}

void sub_20B0CB270(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20AF7639C(&a35);
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0CB28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B0CB2DC(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24C40EE60 && sub_20B171D10(a1, (uint64_t)a2);
}

void sub_20B0CB2FC(uint64_t a1, uint64_t (***a2)())
{
  sub_20B171F68(a2, a1);
}

void sub_20B0CB30C(uint64_t a1, uint64_t (***a2)())
{
  sub_20B172FC4(a2, a1);
}

void sub_20B0CB31C(uint64_t a1, uint64_t (***a2)())
{
  sub_20B171F68(a2, a1 - 8);
}

void sub_20B0CB32C(uint64_t a1, uint64_t (***a2)())
{
  sub_20B172FC4(a2, a1 - 8);
}

uint64_t sub_20B0CB33C()
{
  return 2;
}

uint64_t sub_20B0CB344()
{
  return 1;
}

uint64_t sub_20B0CB34C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CB358(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20B0CB364@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24C3F64E0;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20AF4CAF4((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24C3F6460;
  sub_20B113598((uint64_t)v15, a2);
  v15[0] = &off_24C3F64E0;
  sub_20AF4EA3C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20AF4EA3C((uint64_t)v14);
}

void sub_20B0CB4A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20AF6C510(&a35);
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0CB4C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B0CB510(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24C40F038 && sub_20B174DBC(a1, (uint64_t)a2);
}

void sub_20B0CB530(uint64_t a1, uint64_t (***a2)())
{
  sub_20B175014(a2, a1);
}

void sub_20B0CB540(uint64_t a1, uint64_t (***a2)())
{
  sub_20B176070(a2, a1);
}

void sub_20B0CB550(uint64_t a1, uint64_t (***a2)())
{
  sub_20B175014(a2, a1 - 8);
}

void sub_20B0CB560(uint64_t a1, uint64_t (***a2)())
{
  sub_20B176070(a2, a1 - 8);
}

uint64_t sub_20B0CB570()
{
  return 2;
}

uint64_t sub_20B0CB578()
{
  return 1;
}

uint64_t sub_20B0CB580(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CB58C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20B0CB598@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24C3F65B0;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20AF4CAF4((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24C3F6530;
  sub_20B127E90((uint64_t)v15, a2);
  v15[0] = &off_24C3F65B0;
  sub_20AF4EA3C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20AF4EA3C((uint64_t)v14);
}

void sub_20B0CB6D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20AF6EDC8(&a35);
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0CB6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B0CB744(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24C40F210 && sub_20B177FB8(a1, (uint64_t)a2);
}

void sub_20B0CB764(uint64_t a1, uint64_t (***a2)())
{
  sub_20B178210(a2, a1);
}

void sub_20B0CB774(uint64_t a1, uint64_t (***a2)())
{
  sub_20B17926C(a2, a1);
}

void sub_20B0CB784(uint64_t a1, uint64_t (***a2)())
{
  sub_20B178210(a2, a1 - 8);
}

void sub_20B0CB794(uint64_t a1, uint64_t (***a2)())
{
  sub_20B17926C(a2, a1 - 8);
}

uint64_t sub_20B0CB7A4()
{
  return 1;
}

uint64_t sub_20B0CB7AC()
{
  return 1;
}

uint64_t sub_20B0CB7B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CB7C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20B0CB7CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24C3F6680;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20AF4CAF4((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24C3F6600;
  sub_20B17B1B4((uint64_t)v15, a2);
  v15[0] = &off_24C3F6680;
  sub_20AF4EA3C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20AF4EA3C((uint64_t)v14);
}

void sub_20B0CB90C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20AF71A68(&a35);
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0CB928(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B0CB978(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24C4102C8 && sub_20B17B368(a1, (uint64_t)a2);
}

void sub_20B0CB998(uint64_t a1, uint64_t (***a2)())
{
  sub_20B17B5C0(a2, a1);
}

void sub_20B0CB9A8(uint64_t a1, uint64_t (***a2)())
{
  sub_20B180F3C(a2, a1);
}

uint64_t sub_20B0CB9B8()
{
  return 1;
}

uint64_t sub_20B0CB9C0()
{
  return 1;
}

uint64_t sub_20B0CB9C8()
{
  return 1;
}

void sub_20B0CB9D0(uint64_t a1, uint64_t (***a2)())
{
  sub_20B17B5C0(a2, a1 - 8);
}

void sub_20B0CB9E0(uint64_t a1, uint64_t (***a2)())
{
  sub_20B180F3C(a2, a1 - 8);
}

uint64_t sub_20B0CB9F0()
{
  return 1;
}

uint64_t sub_20B0CB9F8()
{
  return 1;
}

uint64_t sub_20B0CBA00(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CBA0C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20B0CBA18@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  _QWORD v17[28];

  v17[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 216);
  v6 = *(std::__shared_weak_count **)(a1 + 224);
  v15[0] = &off_24C3F6750;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  sub_20AF4CAF4((uint64_t)v17, (uint64_t)v14);
  v15[0] = &off_24C3F66D0;
  sub_20B18C1A4((uint64_t)v15, a2);
  v15[0] = &off_24C3F6750;
  sub_20AF4EA3C((uint64_t)v17);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20AF4EA3C((uint64_t)v14);
}

void sub_20B0CBB58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20AF73A9C(&a35);
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0CBB74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B0CBBC4(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24C410468 && sub_20B18C358(a1, (uint64_t)a2);
}

void sub_20B0CBBE4(uint64_t a1, uint64_t (***a2)())
{
  sub_20B18C5B0(a2, a1);
}

void sub_20B0CBBF4(uint64_t a1, uint64_t (***a2)())
{
  sub_20B191F2C(a2, a1);
}

void sub_20B0CBC04(uint64_t a1, uint64_t (***a2)())
{
  sub_20B18C5B0(a2, a1 - 8);
}

void sub_20B0CBC14(uint64_t a1, uint64_t (***a2)())
{
  sub_20B191F2C(a2, a1 - 8);
}

uint64_t sub_20B0CBC24()
{
  return 2;
}

uint64_t sub_20B0CBC2C()
{
  return 1;
}

uint64_t sub_20B0CBC34(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CBC40(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20B0CBC4C(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  uint64_t (**v12)();
  __int128 v13;
  _BYTE v14[208];
  uint64_t (**v15)();
  uint64_t (**v16)();
  __int128 v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  sub_20B444528((int *)(a1 + 200), &v12);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v14);
  }
  v15 = &off_24C3F5FB8;
  v16 = &off_24C41D808;
  v17 = v13;
  v13 = 0uLL;
  sub_20AF4CAF4((uint64_t)v18, (uint64_t)v14);
  v15 = &off_24C3F5F38;
  sub_20B13D2E8((uint64_t)&v15, a2);
  v15 = &off_24C3F5FB8;
  sub_20AF4EA3C((uint64_t)v18);
  v16 = &off_24C41D808;
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v17 + 1);
  if (*((_QWORD *)&v17 + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v17 + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
  sub_20AF4EA3C((uint64_t)v14);
  v12 = &off_24C41D808;
  v9 = (std::__shared_weak_count *)*((_QWORD *)&v13 + 1);
  if (*((_QWORD *)&v13 + 1))
  {
    v10 = (unint64_t *)(*((_QWORD *)&v13 + 1) + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B0CBDDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  sub_20AF5C810(&a39);
  sub_20AF4EA3C((uint64_t)&a13);
  sub_20B448814(&a10);
  _Unwind_Resume(a1);
}

void sub_20B0CBE14(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B448814((uint64_t *)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B0CBE28(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24C40F3E8 && sub_20B19D9D4(a1, (uint64_t)a2);
}

void sub_20B0CBE48(uint64_t a1, uint64_t (***a2)())
{
  sub_20B19DBEC(a2, a1);
}

void sub_20B0CBE58(uint64_t a1, uint64_t (***a2)())
{
  sub_20B19E9F0(a2, a1);
}

void sub_20B0CBE68(uint64_t a1, uint64_t (***a2)())
{
  sub_20B19DBEC(a2, a1 - 8);
}

void sub_20B0CBE78(uint64_t a1, uint64_t (***a2)())
{
  sub_20B19E9F0(a2, a1 - 8);
}

uint64_t sub_20B0CBE88()
{
  return 2;
}

uint64_t sub_20B0CBE90()
{
  return 1;
}

uint64_t sub_20B0CBE98(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CBEA4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20B0CBEB0(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  std::__shared_weak_count *v5;
  unint64_t *p_shared_owners;
  unint64_t v7;
  uint64_t v8;
  int v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v13[208];
  _QWORD v14[2];
  std::__shared_weak_count *v15;
  _QWORD v16[28];

  v16[27] = *MEMORY[0x24BDAC8D0];
  v4 = *(_QWORD *)(a1 + 200);
  v5 = *(std::__shared_weak_count **)(a1 + 208);
  if (v5)
  {
    p_shared_owners = (unint64_t *)&v5->__shared_owners_;
    do
      v7 = __ldxr(p_shared_owners);
    while (__stxr(v7 + 1, p_shared_owners));
  }
  v8 = a1 + 16;
  v9 = *(_DWORD *)(a1 + 192);
  if (v9 == 2)
  {
    sub_20B0C0D90(v8, (uint64_t)v13);
  }
  else if (v9 == 1)
  {
    sub_20B0F9F8C(v8, (uint64_t)v13);
  }
  else
  {
    if (v9)
      sub_20AECFAB8();
    sub_20B0C6034(v8, (uint64_t)v13);
  }
  v14[0] = &off_24C3FA938;
  v14[1] = v4;
  v15 = v5;
  sub_20AF4CAF4((uint64_t)v16, (uint64_t)v13);
  v14[0] = &off_24C40D700;
  sub_20B159564((uint64_t)v14, a2);
  v14[0] = &off_24C3FA938;
  sub_20AF4EA3C((uint64_t)v16);
  v10 = v15;
  if (v15)
  {
    v11 = (unint64_t *)&v15->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  sub_20AF4EA3C((uint64_t)v13);
}

void sub_20B0CC03C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  sub_20B0C01A0(&a37);
  sub_20AF4EA3C((uint64_t)&a11);
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0CC0A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0CC0B4(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24C40F840)
    return sub_20B1A08FC(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20B0CC0D4(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1A0B14(a2, a1);
}

void sub_20B0CC0E4(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1A1AB0(a2, a1);
}

void sub_20B0CC0F4(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1A0B14(a2, a1 - 8);
}

void sub_20B0CC104(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1A1AB0(a2, a1 - 8);
}

uint64_t sub_20B0CC114()
{
  return 2;
}

uint64_t sub_20B0CC11C()
{
  return 1;
}

uint64_t sub_20B0CC124(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CC130(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20B0CC13C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  std::__shared_weak_count *v6;
  uint64_t v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  std::__shared_weak_count *v10;
  unint64_t *v11;
  unint64_t v12;
  _BYTE v14[208];
  _QWORD v15[2];
  std::__shared_weak_count *v16;
  __int128 v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v14);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v14);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v14);
  }
  v7 = *(_QWORD *)(a1 + 208);
  v6 = *(std::__shared_weak_count **)(a1 + 216);
  v15[0] = &off_24C3F5478;
  v15[1] = v7;
  v16 = v6;
  if (v6)
  {
    p_shared_owners = (unint64_t *)&v6->__shared_owners_;
    do
      v9 = __ldxr(p_shared_owners);
    while (__stxr(v9 + 1, p_shared_owners));
  }
  v17 = *(_OWORD *)(a1 + 224);
  sub_20AF4CAF4((uint64_t)v18, (uint64_t)v14);
  v15[0] = &off_24C3F53F8;
  sub_20B16BBE0((uint64_t)v15, a2);
  v15[0] = &off_24C3F5478;
  sub_20AF4EA3C((uint64_t)v18);
  v10 = v16;
  if (v16)
  {
    v11 = (unint64_t *)&v16->__shared_owners_;
    do
      v12 = __ldaxr(v11);
    while (__stlxr(v12 - 1, v11));
    if (!v12)
    {
      ((void (*)(std::__shared_weak_count *))v10->__on_zero_shared)(v10);
      std::__shared_weak_count::__release_weak(v10);
    }
  }
  return sub_20AF4EA3C((uint64_t)v14);
}

void sub_20B0CC284(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35)
{
  sub_20AF4C490(&a35);
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0CC2A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37)
{
  std::__shared_weak_count *v38;
  unint64_t *p_shared_owners;
  unint64_t v40;

  v38 = a37;
  if (a37)
  {
    p_shared_owners = (unint64_t *)&a37->__shared_owners_;
    do
      v40 = __ldaxr(p_shared_owners);
    while (__stlxr(v40 - 1, p_shared_owners));
    if (!v40)
    {
      ((void (*)(std::__shared_weak_count *))v38->__on_zero_shared)(v38);
      std::__shared_weak_count::__release_weak(v38);
    }
  }
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

BOOL sub_20B0CC2F0(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24C40FC90 && sub_20B1A39BC(a1, (uint64_t)a2);
}

void sub_20B0CC310(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1A3C34(a2, a1);
}

void sub_20B0CC320(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1A4BD0(a2, a1);
}

void sub_20B0CC330(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1A3C34(a2, a1 - 8);
}

void sub_20B0CC340(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1A4BD0(a2, a1 - 8);
}

uint64_t sub_20B0CC350()
{
  return 1;
}

uint64_t sub_20B0CC358()
{
  return 1;
}

uint64_t sub_20B0CC360(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CC36C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20B0CC378(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  void *v8[2];
  char v9;
  void *v10;
  char v11;
  void *v12;
  char v13;
  void *v14;
  char v15;
  _BYTE v16[208];
  _QWORD v17[3];
  char v18;
  void *v19;
  char v20;
  void *v21;
  char v22;
  void *__p;
  char v24;
  _QWORD v25[28];

  v25[27] = *MEMORY[0x24BDAC8D0];
  sub_20B0CA0C4(a1 + 200, (uint64_t)v8);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v16);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v16);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v16);
  }
  sub_20B1A8D94((uint64_t)v17, (__int128 *)v8, (uint64_t)v16);
  v6 = operator new();
  sub_20B1A6B74(v6, (uint64_t)v17);
  *a2 = &off_24C411E78;
  a2[1] = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24C411F70;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a2[2] = v7;
  v17[0] = off_24C4100D8;
  sub_20AF4EA3C((uint64_t)v25);
  if (v24 < 0)
  {
    operator delete(__p);
    if ((v22 & 0x80000000) == 0)
    {
LABEL_9:
      if ((v20 & 0x80000000) == 0)
        goto LABEL_10;
      goto LABEL_18;
    }
  }
  else if ((v22 & 0x80000000) == 0)
  {
    goto LABEL_9;
  }
  operator delete(v21);
  if ((v20 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v18 & 0x80000000) == 0)
      goto LABEL_11;
    goto LABEL_19;
  }
LABEL_18:
  operator delete(v19);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_11:
    sub_20AF4EA3C((uint64_t)v16);
    if ((v15 & 0x80000000) == 0)
      goto LABEL_12;
    goto LABEL_20;
  }
LABEL_19:
  operator delete((void *)v17[1]);
  sub_20AF4EA3C((uint64_t)v16);
  if ((v15 & 0x80000000) == 0)
  {
LABEL_12:
    if ((v13 & 0x80000000) == 0)
      goto LABEL_13;
    goto LABEL_21;
  }
LABEL_20:
  operator delete(v14);
  if ((v13 & 0x80000000) == 0)
  {
LABEL_13:
    if ((v11 & 0x80000000) == 0)
      goto LABEL_14;
    goto LABEL_22;
  }
LABEL_21:
  operator delete(v12);
  if ((v11 & 0x80000000) == 0)
  {
LABEL_14:
    if ((v9 & 0x80000000) == 0)
      return;
LABEL_23:
    operator delete(v8[0]);
    return;
  }
LABEL_22:
  operator delete(v10);
  if (v9 < 0)
    goto LABEL_23;
}

void sub_20B0CC588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t (**a49)())
{
  uint64_t v49;

  (*(void (**)(uint64_t))(*(_QWORD *)v49 + 8))(v49);
  a49 = off_24C410058;
  sub_20B1A7288((uint64_t)&a49);
  sub_20AF4EA3C((uint64_t)&a23);
  sub_20B0CFD2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0CC5FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CFD2C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0CC610(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == &off_24C40FE68)
    return sub_20B1A8ED4(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20B0CC630(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1A9428(a2, a1);
}

double sub_20B0CC640(uint64_t a1, uint64_t (***a2)())
{
  return sub_20B1AAF88(a2, a1);
}

void sub_20B0CC650(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1A9428(a2, a1 - 8);
}

double sub_20B0CC660(uint64_t a1, uint64_t (***a2)())
{
  return sub_20B1AAF88(a2, a1 - 8);
}

uint64_t sub_20B0CC670()
{
  return 1;
}

uint64_t sub_20B0CC678()
{
  return 1;
}

uint64_t sub_20B0CC680(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CC68C(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20B0CC698@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10[3];
  char v11;
  char v12;
  void *v13;
  char v14;
  char v15;
  _BYTE v16[208];
  uint64_t (**v17)();
  uint64_t v18;
  void *v19;
  char v20;
  char v21;
  void *__p;
  char v23;
  char v24;
  _QWORD v25[28];

  v25[27] = *MEMORY[0x24BDAC8D0];
  sub_20B249FCC(a1 + 200);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v16);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v16);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v16);
  }
  sub_20B1AD7E4((uint64_t)&v17, v10, (uint64_t)v16);
  v6 = (_QWORD *)operator new();
  sub_20B1AD660((uint64_t)v6, (uint64_t)&v17);
  *v6 = off_24C40C018;
  *a2 = &off_24C411E78;
  a2[1] = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24C411F70;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a2[2] = v7;
  v17 = off_24C40C098;
  sub_20AF4EA3C((uint64_t)v25);
  if (v24 && v23 < 0)
    operator delete(__p);
  if (v21 && v20 < 0)
    operator delete(v19);
  v8 = v18;
  v18 = 0;
  if (v8)
    MEMORY[0x20BD3583C](v8, 0x1000C4072FAA15ELL);
  sub_20AF4EA3C((uint64_t)v16);
  if (v15 && v14 < 0)
    operator delete(v13);
  if (v12 && v11 < 0)
    operator delete((void *)v10[1]);
  result = v10[0];
  v10[0] = 0;
  if (result)
    return MEMORY[0x20BD3583C](result, 0x1000C4072FAA15ELL);
  return result;
}

void sub_20B0CC87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  uint64_t v45;

  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  sub_20B0A3958((uint64_t)&a45);
  sub_20AF4EA3C((uint64_t)&a19);
  sub_20B0A3820(&a10);
  _Unwind_Resume(a1);
}

void sub_20B0CC8E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0A3820((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0CC8F8(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24C410128)
    return sub_20B1AD8FC(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20B0CC918(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1ADB14(a2, a1);
}

void sub_20B0CC928(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1B25C8(a2, a1);
}

void sub_20B0CC938(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1ADB14(a2, a1 - 8);
}

void sub_20B0CC948(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1B25C8(a2, a1 - 8);
}

uint64_t sub_20B0CC958()
{
  return 1;
}

uint64_t sub_20B0CC960()
{
  return 1;
}

uint64_t sub_20B0CC968(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CC974(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20B0CC980@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  char v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v8;
  uint64_t v9;
  unint64_t v10;
  char v11;
  uint64_t v12;
  int v13;
  _BYTE v15[208];
  _QWORD v16[3];
  char v17;
  unint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  _QWORD v22[30];

  v22[27] = *MEMORY[0x24BDAC8D0];
  v8 = *(unsigned __int8 *)(a1 + 200);
  if (v8 == 2)
  {
    if (*(_DWORD *)(a1 + 248) != 1)
      goto LABEL_15;
    v10 = 0;
    LOBYTE(v9) = *(_BYTE *)(a1 + 208);
    v3 = *(_QWORD *)(a1 + 216);
    v2 = *(_BYTE *)(a1 + 224);
    v11 = 1;
    v5 = 1;
    v6 = *(_QWORD *)(a1 + 225);
    v12 = a1 + 16;
    v13 = *(_DWORD *)(a1 + 192);
    if (v13 != 2)
      goto LABEL_10;
  }
  else
  {
    if (v8 == 1)
    {
      if (*(_DWORD *)(a1 + 248))
        goto LABEL_15;
      v5 = 0;
      v9 = *(_QWORD *)(a1 + 208);
      v3 = *(_QWORD *)(a1 + 216);
      v2 = *(_BYTE *)(a1 + 224);
      v6 = (unint64_t)*(unsigned __int8 *)(a1 + 232) << 56;
      v4 = *(_QWORD *)(a1 + 233);
      v10 = v9 & 0xFFFFFFFFFFFFFF00;
      v11 = 1;
      v12 = a1 + 16;
      v13 = *(_DWORD *)(a1 + 192);
      if (v13 == 2)
        goto LABEL_8;
      goto LABEL_10;
    }
    LOBYTE(v9) = 0;
    v11 = 0;
    v10 = 0;
    v12 = a1 + 16;
    v13 = *(_DWORD *)(a1 + 192);
    if (v13 != 2)
    {
LABEL_10:
      if (v13 == 1)
      {
        sub_20B0F9F8C(v12, (uint64_t)v15);
        goto LABEL_14;
      }
      if (!v13)
      {
        sub_20B0C6034(v12, (uint64_t)v15);
        goto LABEL_14;
      }
LABEL_15:
      sub_20AECFAB8();
    }
  }
LABEL_8:
  sub_20B0C0D90(v12, (uint64_t)v15);
LABEL_14:
  v16[0] = &off_24C40D4B8;
  v16[1] = v10 | v9;
  v16[2] = v3;
  v17 = v2;
  v18 = v6;
  v19 = v4;
  v20 = v5;
  v21 = v11;
  sub_20AF4CAF4((uint64_t)v22, (uint64_t)v15);
  v16[0] = &off_24C40D438;
  sub_20B1B7134((uint64_t)v16, a2);
  v16[0] = &off_24C40D4B8;
  sub_20AF4EA3C((uint64_t)v22);
  return sub_20AF4EA3C((uint64_t)v15);
}

void sub_20B0CCB40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AF4EA3C(v9);
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0CCB60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AF4EA3C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0CCB78(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24C40DEB8)
    return sub_20B1B72FC(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20B0CCB98(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1B768C(a2, a1);
}

void sub_20B0CCBA8(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1BAF58(a2, a1);
}

void sub_20B0CCBB8(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1B768C(a2, a1 - 8);
}

void sub_20B0CCBC8(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1BAF58(a2, a1 - 8);
}

uint64_t sub_20B0CCBD8()
{
  return 1;
}

uint64_t sub_20B0CCBE0()
{
  return 1;
}

uint64_t sub_20B0CCBE8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CCBF4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20B0CCC00(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  _BYTE v9[216];
  __int128 v10;
  int v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  __int128 v28;
  uint64_t v29;
  uint64_t (**v30)();
  __int128 v31;
  int v32;
  __int128 __p;
  uint64_t v34;
  char v35;
  __int128 v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  void *v40[2];
  uint64_t v41;
  __int128 v42;
  uint64_t v43;
  void *v44[2];
  uint64_t v45;
  __int128 v46;
  uint64_t v47;
  char v48;
  __int128 v49;
  uint64_t v50;
  _QWORD v51[28];

  v51[27] = *MEMORY[0x24BDAC8D0];
  sub_20B0C7DBC(a1 + 200, (uint64_t)&v10);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v9);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v9);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v9);
  }
  v30 = off_24C40E278;
  v31 = v10;
  v32 = v11;
  LOBYTE(__p) = 0;
  v35 = 0;
  if (v14)
  {
    __p = v12;
    v34 = v13;
    v13 = 0;
    v12 = 0uLL;
    v35 = 1;
  }
  LOBYTE(v36) = 0;
  v48 = 0;
  if (v27)
  {
    v37 = v16;
    v36 = v15;
    v15 = 0uLL;
    v6 = v17;
    v16 = 0;
    v17 = 0uLL;
    v38 = v6;
    v39 = v18;
    v18 = 0;
    *(_OWORD *)v40 = v19;
    v19 = 0uLL;
    v41 = v20;
    v43 = v22;
    v42 = v21;
    v20 = 0;
    v21 = 0uLL;
    v22 = 0;
    *(_OWORD *)v44 = v23;
    v23 = 0uLL;
    v45 = v24;
    v47 = v26;
    v46 = v25;
    v24 = 0;
    v25 = 0uLL;
    v26 = 0;
    v48 = 1;
  }
  v49 = v28;
  v50 = v29;
  sub_20AF4CAF4((uint64_t)v51, (uint64_t)v9);
  v30 = off_24C40E1F8;
  v7 = (_QWORD *)operator new();
  sub_20B1BF844((uint64_t)v7, (uint64_t)&v30);
  *v7 = off_24C40E1F8;
  *a2 = &off_24C411E78;
  a2[1] = v7;
  v8 = (_QWORD *)operator new();
  *v8 = &off_24C411F70;
  v8[1] = 0;
  v8[2] = 0;
  v8[3] = v7;
  a2[2] = v8;
  v30 = off_24C40E278;
  sub_20AF4EA3C((uint64_t)v51);
  if (!v48)
    goto LABEL_18;
  if (SHIBYTE(v47) < 0)
  {
    operator delete((void *)v46);
    if ((SHIBYTE(v45) & 0x80000000) == 0)
    {
LABEL_14:
      if ((SHIBYTE(v43) & 0x80000000) == 0)
        goto LABEL_15;
      goto LABEL_34;
    }
  }
  else if ((SHIBYTE(v45) & 0x80000000) == 0)
  {
    goto LABEL_14;
  }
  operator delete(v44[0]);
  if ((SHIBYTE(v43) & 0x80000000) == 0)
  {
LABEL_15:
    if ((SHIBYTE(v41) & 0x80000000) == 0)
      goto LABEL_16;
LABEL_35:
    operator delete(v40[0]);
    if ((SHIBYTE(v39) & 0x80000000) == 0)
    {
LABEL_17:
      if ((SHIBYTE(v37) & 0x80000000) == 0)
        goto LABEL_18;
LABEL_37:
      operator delete((void *)v36);
      if (!v35)
        goto LABEL_21;
      goto LABEL_19;
    }
    goto LABEL_36;
  }
LABEL_34:
  operator delete((void *)v42);
  if (SHIBYTE(v41) < 0)
    goto LABEL_35;
LABEL_16:
  if ((SHIBYTE(v39) & 0x80000000) == 0)
    goto LABEL_17;
LABEL_36:
  operator delete((void *)v38);
  if (SHIBYTE(v37) < 0)
    goto LABEL_37;
LABEL_18:
  if (!v35)
    goto LABEL_21;
LABEL_19:
  if (SHIBYTE(v34) < 0)
    operator delete((void *)__p);
LABEL_21:
  sub_20AF4EA3C((uint64_t)v9);
  if (!v27)
    goto LABEL_28;
  if (SHIBYTE(v26) < 0)
  {
    operator delete((void *)v25);
    if ((SHIBYTE(v24) & 0x80000000) == 0)
    {
LABEL_24:
      if ((SHIBYTE(v22) & 0x80000000) == 0)
        goto LABEL_25;
      goto LABEL_41;
    }
  }
  else if ((SHIBYTE(v24) & 0x80000000) == 0)
  {
    goto LABEL_24;
  }
  operator delete((void *)v23);
  if ((SHIBYTE(v22) & 0x80000000) == 0)
  {
LABEL_25:
    if ((SHIBYTE(v20) & 0x80000000) == 0)
      goto LABEL_26;
    goto LABEL_42;
  }
LABEL_41:
  operator delete((void *)v21);
  if ((SHIBYTE(v20) & 0x80000000) == 0)
  {
LABEL_26:
    if ((SHIBYTE(v18) & 0x80000000) == 0)
      goto LABEL_27;
    goto LABEL_43;
  }
LABEL_42:
  operator delete((void *)v19);
  if ((SHIBYTE(v18) & 0x80000000) == 0)
  {
LABEL_27:
    if ((SHIBYTE(v16) & 0x80000000) == 0)
      goto LABEL_28;
LABEL_44:
    operator delete((void *)v15);
    if (!v14)
      return;
    goto LABEL_29;
  }
LABEL_43:
  operator delete((void *)v17);
  if (SHIBYTE(v16) < 0)
    goto LABEL_44;
LABEL_28:
  if (!v14)
    return;
LABEL_29:
  if (SHIBYTE(v13) < 0)
    operator delete((void *)v12);
}

void sub_20B0CCFC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  char a65;
  uint64_t v65;

  (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  sub_20B1BF794((uint64_t)&a65);
  sub_20AF4EA3C((uint64_t)&a9);
  sub_20B1BF7F4((uint64_t)&a36);
  _Unwind_Resume(a1);
}

void sub_20B0CD030(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,char a36)
{
  sub_20B1BF7F4((uint64_t)&a36);
  _Unwind_Resume(a1);
}

BOOL sub_20B0CD044(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24C40E058 && sub_20B1C0E98(a1, (uint64_t)a2);
}

void sub_20B0CD064(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1C10B0(a2, a1);
}

void sub_20B0CD074(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1C54DC(a2, a1);
}

void sub_20B0CD084(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1C10B0(a2, a1 - 8);
}

void sub_20B0CD094(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1C54DC(a2, a1 - 8);
}

uint64_t sub_20B0CD0A4()
{
  return 1;
}

uint64_t sub_20B0CD0AC()
{
  return 1;
}

uint64_t sub_20B0CD0B4(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CD0C0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20B0CD0CC(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  const void **v4;
  const void ***v5;
  uint64_t v6;
  int v7;
  const void **v8;
  const void ***v9;
  BOOL v10;
  uint64_t v11;
  _QWORD *v12;
  char **v13;
  char *v14;
  char *v15;
  _BYTE v16[208];
  uint64_t (**v17)();
  char **v18;
  char *v19[2];
  _QWORD v20[28];

  v20[27] = *MEMORY[0x24BDAC8D0];
  v14 = 0;
  v15 = 0;
  v13 = &v14;
  v4 = *(const void ***)(a1 + 200);
  v5 = (const void ***)(a1 + 208);
  if (v4 != (const void **)(a1 + 208))
  {
    do
    {
      sub_20AF4043C((uint64_t **)&v13, (uint64_t *)&v14, v4 + 4, (uint64_t)(v4 + 4));
      v8 = (const void **)v4[1];
      if (v8)
      {
        do
        {
          v9 = (const void ***)v8;
          v8 = (const void **)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (const void ***)v4[2];
          v10 = *v9 == v4;
          v4 = (const void **)v9;
        }
        while (!v10);
      }
      v4 = (const void **)v9;
    }
    while (v9 != v5);
  }
  v6 = a1 + 16;
  v7 = *(_DWORD *)(a1 + 192);
  if (v7 == 2)
  {
    sub_20B0C0D90(v6, (uint64_t)v16);
  }
  else if (v7 == 1)
  {
    sub_20B0F9F8C(v6, (uint64_t)v16);
  }
  else
  {
    if (v7)
      sub_20AECFAB8();
    sub_20B0C6034(v6, (uint64_t)v16);
  }
  v17 = &off_24C40D588;
  v18 = v13;
  v19[0] = v14;
  v19[1] = v15;
  if (v15)
  {
    *((_QWORD *)v14 + 2) = v19;
    v13 = &v14;
    v14 = 0;
    v15 = 0;
  }
  else
  {
    v18 = v19;
  }
  sub_20AF4CAF4((uint64_t)v20, (uint64_t)v16);
  v17 = &off_24C40D508;
  v11 = operator new();
  sub_20B1CA6D8(v11, (uint64_t)&v17);
  *a2 = &off_24C411E78;
  a2[1] = v11;
  v12 = (_QWORD *)operator new();
  *v12 = &off_24C411F70;
  v12[1] = 0;
  v12[2] = 0;
  v12[3] = v11;
  a2[2] = v12;
  v17 = &off_24C40D588;
  sub_20AF4EA3C((uint64_t)v20);
  sub_20AEC833C((uint64_t)&v18, v19[0]);
  sub_20AF4EA3C((uint64_t)v16);
  sub_20AEC833C((uint64_t)&v13, v14);
}

void sub_20B0CD2C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v39;

  (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  sub_20B0BE6C0((uint64_t)&a39);
  sub_20AF4EA3C((uint64_t)&a13);
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B0CD33C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

void sub_20B0CD354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
  sub_20AEC833C((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0CD36C(uint64_t a1, uint64_t (***a2)())
{
  if (*a2 == off_24C40E2C8)
    return sub_20B1CA82C(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20B0CD38C(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1CAA5C(a2, a1);
}

void sub_20B0CD39C(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1CD390(a2, a1);
}

void sub_20B0CD3AC(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1CAA5C(a2, a1 - 8);
}

void sub_20B0CD3BC(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1CD390(a2, a1 - 8);
}

uint64_t sub_20B0CD3CC()
{
  return 1;
}

uint64_t sub_20B0CD3D4()
{
  return 1;
}

uint64_t sub_20B0CD3DC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CD3E8(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

void sub_20B0CD3F4(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  void **v8;
  void **v9;
  void *v10;
  void **v11;
  void **v12;
  void *v13;
  void *v14;
  void **v15;
  void *v16;
  char v17;
  char v18;
  _BYTE v19[208];
  uint64_t (**v20)();
  void *v21;
  void **v22;
  void *__p;
  char v24;
  char v25;
  _QWORD v26[28];

  v26[27] = *MEMORY[0x24BDAC8D0];
  sub_20B1D08DC(a1 + 200, (uint64_t)&v14);
  v4 = a1 + 16;
  v5 = *(_DWORD *)(a1 + 192);
  if (v5 == 2)
  {
    sub_20B0C0D90(v4, (uint64_t)v19);
  }
  else if (v5 == 1)
  {
    sub_20B0F9F8C(v4, (uint64_t)v19);
  }
  else
  {
    if (v5)
      sub_20AECFAB8();
    sub_20B0C6034(v4, (uint64_t)v19);
  }
  sub_20B1D2B68((uint64_t)&v20, (uint64_t)&v14, (uint64_t)v19);
  v6 = (_QWORD *)operator new();
  sub_20B1D0A38((uint64_t)v6, (uint64_t)&v20);
  *v6 = off_24C40E608;
  *a2 = &off_24C411E78;
  a2[1] = v6;
  v7 = (_QWORD *)operator new();
  *v7 = &off_24C411F70;
  v7[1] = 0;
  v7[2] = 0;
  v7[3] = v6;
  a2[2] = v7;
  v20 = off_24C40E658;
  sub_20AF4EA3C((uint64_t)v26);
  if (v25 && v24 < 0)
    operator delete(__p);
  v8 = (void **)v21;
  if (v21)
  {
    v9 = v22;
    v10 = v21;
    if (v22 != v21)
    {
      do
      {
        if (*((char *)v9 - 9) < 0)
          operator delete(*(v9 - 4));
        v9 -= 4;
      }
      while (v9 != v8);
      v10 = v21;
    }
    v22 = v8;
    operator delete(v10);
  }
  sub_20AF4EA3C((uint64_t)v19);
  if (v18 && v17 < 0)
    operator delete(v16);
  v11 = (void **)v14;
  if (v14)
  {
    v12 = v15;
    v13 = v14;
    if (v15 != v14)
    {
      do
      {
        if (*((char *)v12 - 9) < 0)
          operator delete(*(v12 - 4));
        v12 -= 4;
      }
      while (v12 != v11);
      v13 = v14;
    }
    v15 = v11;
    operator delete(v13);
  }
}

void sub_20B0CD5F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t (**a43)())
{
  uint64_t v43;

  (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
  a43 = off_24C40E608;
  sub_20B1D11FC((uint64_t)&a43);
  sub_20AF4EA3C((uint64_t)&a17);
  sub_20B0D0744((uint64_t)&a10);
  _Unwind_Resume(a1);
}

void sub_20B0CD66C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0D0744((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0CD680(uint64_t a1, uint64_t (***a2)(uint64_t))
{
  if (*a2 == &off_24C40E468)
    return sub_20B1D2C80(a1, (uint64_t)a2);
  else
    return 0;
}

void sub_20B0CD6A0(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1D2EB8(a2, a1);
}

void sub_20B0CD6B0(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1D57AC(a2, a1);
}

void sub_20B0CD6C0(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1D2EB8(a2, a1 - 8);
}

void sub_20B0CD6D0(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1D57AC(a2, a1 - 8);
}

uint64_t sub_20B0CD6E0()
{
  return 1;
}

uint64_t sub_20B0CD6E8()
{
  return 1;
}

uint64_t sub_20B0CD6F0(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 40))(a1 + 8);
}

uint64_t sub_20B0CD6FC(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(a1 + 8) + 48))(a1 + 8);
}

uint64_t sub_20B0CD708@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  int v8;
  uint64_t v10;
  char v11;
  _OWORD v12[13];
  __int128 v13;
  _QWORD v14[3];
  char v15;
  __int128 v16;
  char v17;
  _QWORD v18[28];

  v18[27] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)(a1 + 248))
  {
    v3 = *(_QWORD *)(a1 + 208);
    v10 = *(_QWORD *)(a1 + 216);
    v11 = *(_BYTE *)(a1 + 224);
    *(_QWORD *)((char *)v12 + 7) = *(_QWORD *)(a1 + 232);
    HIBYTE(v12[0]) = *(_BYTE *)(a1 + 240);
    v4 = v3 & 0xFFFFFFFFFFFFFF00;
    v13 = v12[0];
    v5 = v3;
    v6 = 1;
    v7 = a1 + 16;
    v8 = *(_DWORD *)(a1 + 192);
    if (v8 != 2)
      goto LABEL_3;
LABEL_7:
    sub_20B0C0D90(v7, (uint64_t)v12);
    goto LABEL_9;
  }
  v5 = 0;
  v4 = 0;
  v6 = 0;
  v7 = a1 + 16;
  v8 = *(_DWORD *)(a1 + 192);
  if (v8 == 2)
    goto LABEL_7;
LABEL_3:
  if (v8 == 1)
  {
    sub_20B0F9F8C(v7, (uint64_t)v12);
  }
  else
  {
    if (v8)
      sub_20AECFAB8();
    sub_20B0C6034(v7, (uint64_t)v12);
  }
LABEL_9:
  v14[0] = &off_24C40E898;
  v14[1] = v4 | v5;
  v14[2] = v10;
  v15 = v11;
  v16 = v13;
  v17 = v6;
  sub_20AF4CAF4((uint64_t)v18, (uint64_t)v12);
  v14[0] = &off_24C40E848;
  sub_20B1D8FE4((uint64_t)v14, a2);
  v14[0] = &off_24C40E898;
  sub_20AF4EA3C((uint64_t)v18);
  return sub_20AF4EA3C((uint64_t)v12);
}

void sub_20B0CD87C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  uint64_t v3;
  va_list va;

  va_start(va, a3);
  sub_20AF4EA3C(v3);
  sub_20AF4EA3C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0CD89C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AF4EA3C((uint64_t)va);
  _Unwind_Resume(a1);
}

BOOL sub_20B0CD8B4(uint64_t a1, uint64_t (***a2)())
{
  return *a2 == off_24C40E6A8 && sub_20B1DAB18(a1, (uint64_t)a2);
}

void sub_20B0CD8D4(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1DADC8(a2, a1);
}

void sub_20B0CD8E4(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1DCF9C(a2, a1);
}

void sub_20B0CD8F4(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1DADC8(a2, a1 - 8);
}

void sub_20B0CD904(uint64_t a1, uint64_t (***a2)())
{
  sub_20B1DCF9C(a2, a1 - 8);
}

uint64_t sub_20B0CD914()
{
  return 3;
}

uint64_t sub_20B0CD91C()
{
  return 2;
}

uint64_t sub_20B0CD924()
{
  return 1;
}

uint64_t sub_20B0CD92C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  void *v4;

  if (*(_BYTE *)(a1 + 168))
  {
    v2 = *(_QWORD *)(a1 + 144);
    if (v2)
    {
      v3 = *(_QWORD *)(a1 + 152);
      v4 = *(void **)(a1 + 144);
      if (v3 != v2)
      {
        do
        {
          if (*(char *)(v3 - 1) < 0)
            operator delete(*(void **)(v3 - 24));
          v3 -= 24;
        }
        while (v3 != v2);
        v4 = *(void **)(a1 + 144);
      }
      *(_QWORD *)(a1 + 152) = v2;
      operator delete(v4);
    }
  }
  if (*(_BYTE *)(a1 + 136) && *(char *)(a1 + 135) < 0)
  {
    operator delete(*(void **)(a1 + 112));
    if (!*(_BYTE *)(a1 + 104))
      goto LABEL_16;
  }
  else if (!*(_BYTE *)(a1 + 104))
  {
    goto LABEL_16;
  }
  if (*(char *)(a1 + 103) < 0)
    operator delete(*(void **)(a1 + 80));
LABEL_16:
  if (!*(_BYTE *)(a1 + 48) || (*(char *)(a1 + 47) & 0x80000000) == 0)
    return a1;
  operator delete(*(void **)(a1 + 24));
  return a1;
}

void sub_20B0CDA0C(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

void sub_20B0CDA64(uint64_t a1, uint64_t a2)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v2 = *(std::__shared_weak_count **)(a2 + 16);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
    }
  }
}

uint64_t *sub_20B0CDABC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v33;
  int v34;
  uint64_t *v35;

  v2 = a1[44];
  if (v2)
  {
    a1[45] = v2;
    v3 = (unint64_t)(a1[46] - v2) >> 2;
    v33 = v2;
    v34 = v3;
    v4 = *((unsigned int *)a1 + 95);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBB8[v4])(&v35, a1 + 47);
  }
  v5 = a1[36];
  if (v5)
  {
    a1[37] = v5;
    v6 = -1431655765 * ((unint64_t)(a1[38] - v5) >> 2);
    v33 = v5;
    v34 = v6;
    v7 = *((unsigned int *)a1 + 79);
    if ((_DWORD)v7 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBC8[v7])(&v35, a1 + 39);
  }
  v8 = a1[32];
  if (v8)
  {
    a1[33] = v8;
    v9 = (unint64_t)(a1[34] - v8) >> 3;
    v33 = v8;
    v34 = v9;
    v10 = *((unsigned int *)a1 + 71);
    if ((_DWORD)v10 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBD8[v10])(&v35, a1 + 35);
  }
  v11 = a1[28];
  if (v11)
  {
    a1[29] = v11;
    v12 = (unint64_t)(a1[30] - v11) >> 3;
    v33 = v11;
    v34 = v12;
    v13 = *((unsigned int *)a1 + 63);
    if ((_DWORD)v13 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBE8[v13])(&v35, a1 + 31);
  }
  v14 = a1[24];
  if (v14)
  {
    a1[25] = v14;
    v15 = -1431655765 * ((unint64_t)(a1[26] - v14) >> 2);
    v33 = v14;
    v34 = v15;
    v16 = *((unsigned int *)a1 + 55);
    if ((_DWORD)v16 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBC8[v16])(&v35, a1 + 27);
  }
  v17 = a1[20];
  if (v17)
  {
    a1[21] = v17;
    v18 = *((_DWORD *)a1 + 44) - v17;
    v33 = v17;
    v34 = v18;
    v19 = *((unsigned int *)a1 + 47);
    if ((_DWORD)v19 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBF8[v19])(&v35, a1 + 23);
  }
  v20 = a1[15];
  if (v20)
  {
    a1[16] = v20;
    v21 = *((_DWORD *)a1 + 34) - v20;
    v33 = v20;
    v34 = v21;
    v22 = *((unsigned int *)a1 + 37);
    if ((_DWORD)v22 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBF8[v22])(&v35, a1 + 18);
  }
  v23 = a1[10];
  if (v23)
  {
    a1[11] = v23;
    v24 = -1431655765 * ((unint64_t)(a1[12] - v23) >> 2);
    v33 = v23;
    v34 = v24;
    v25 = *((unsigned int *)a1 + 27);
    if ((_DWORD)v25 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DC08[v25])(&v35, a1 + 13);
  }
  v26 = a1[5];
  if (v26)
  {
    a1[6] = v26;
    v27 = -1431655765 * ((unint64_t)(a1[7] - v26) >> 2);
    v33 = v26;
    v34 = v27;
    v28 = *((unsigned int *)a1 + 17);
    if ((_DWORD)v28 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DC08[v28])(&v35, a1 + 8);
  }
  v29 = *a1;
  if (*a1)
  {
    a1[1] = v29;
    v30 = -1431655765 * ((unint64_t)(a1[2] - v29) >> 2);
    v33 = v29;
    v34 = v30;
    v31 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v31 == -1)
      sub_20AECFAB8();
    v35 = &v33;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DC08[v31])(&v35, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20B0CDE68(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBC8[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20B0CDEF4(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBD8[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20B0CDF74(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 3;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBE8[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20B0CDFF4(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = *((_DWORD *)a1 + 4) - v2;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBF8[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20B0CE070(uint64_t *a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = -1431655765 * ((unint64_t)(a1[2] - v2) >> 2);
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DC08[v4])(&v8, a1 + 3);
  }
  return a1;
}

uint64_t *sub_20B0CE0FC(uint64_t *a1)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t *v8;

  v2 = *a1;
  if (*a1)
  {
    a1[1] = v2;
    v3 = (unint64_t)(a1[2] - v2) >> 2;
    v6 = v2;
    v7 = v3;
    v4 = *((unsigned int *)a1 + 7);
    if ((_DWORD)v4 == -1)
      sub_20AECFAB8();
    v8 = &v6;
    ((void (*)(uint64_t **, uint64_t *))off_24C40DBB8[v4])(&v8, a1 + 3);
  }
  return a1;
}

void sub_20B0CE17C(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20B0CE188(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD35D70](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_20B532360);
    abort();
  }
  return result;
}

void sub_20B0CE1FC(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20B0CE208(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD35D70](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_20B532360);
    abort();
  }
  return result;
}

void sub_20B0CE278(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20B0CE284(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD35D70](*MEMORY[0x24BDAEC58], **a1, 8 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_20B532360);
    abort();
  }
  return result;
}

void sub_20B0CE2F4(void ***a1)
{
  operator delete(**a1);
}

uint64_t sub_20B0CE300(_QWORD **a1)
{
  uint64_t result;

  result = MEMORY[0x20BD35D70](*MEMORY[0x24BDAEC58], **a1, 12 * *((unsigned int *)*a1 + 2));
  if ((_DWORD)result)
  {
    sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Memory/include/Kit/Memory/VMAllocator.hpp", 81, (uint64_t)"", 0, (uint64_t)"Illegal or non-allocated address specified.", 43, (void (*)(void **))sub_20B532360);
    abort();
  }
  return result;
}

uint64_t sub_20B0CE374(uint64_t a1, uint64_t a2)
{
  return sub_20B0CD92C(a2);
}

uint64_t sub_20B0CE37C(uint64_t a1, uint64_t a2)
{
  return sub_20B0CD92C(a2);
}

uint64_t sub_20B0CE384(uint64_t a1, uint64_t a2)
{
  return sub_20B0CD92C(a2);
}

uint64_t sub_20B0CE38C(uint64_t result)
{
  uint64_t v1;
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;

  v1 = result;
  v2 = *(std::__shared_weak_count **)(result + 24);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      return v1;
    }
  }
  return result;
}

uint64_t sub_20B0CE3F4(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24C40E990;
  *(_QWORD *)(a1 + 8) = &unk_24C40E9F0;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CE46C(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24C40E990;
  *(_QWORD *)(a1 + 8) = &unk_24C40E9F0;
  v2 = *(void **)(a1 + 216);
  if (v2)
  {
    *(_QWORD *)(a1 + 224) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40B4DE50DDLL);
}

void sub_20B0CE4F8(uint64_t a1)
{
  void *v2;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24C40E990;
  *(_QWORD *)a1 = &unk_24C40E9F0;
  v2 = *(void **)(a1 + 208);
  if (v2)
  {
    *(_QWORD *)(a1 + 216) = v2;
    operator delete(v2);
  }
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0CE570(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40E990;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40E9F0;
  v3 = *(void **)(a1 + 208);
  if (v3)
  {
    *(_QWORD *)(a1 + 216) = v3;
    operator delete(v3);
  }
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v4))(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40B4DE50DDLL);
}

uint64_t sub_20B0CE604(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40EF08;
  *(_QWORD *)(a1 + 8) = &unk_24C40EF68;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CE6B4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40EF08;
  *(_QWORD *)(a1 + 8) = &unk_24C40EF68;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40F569C881);
}

void sub_20B0CE778(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40EF08;
  *(_QWORD *)a1 = &unk_24C40EF68;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0CE828(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C40EF08;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40EF68;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40F569C881);
}

uint64_t sub_20B0CE8FC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F0E0;
  *(_QWORD *)(a1 + 8) = &unk_24C40F140;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CE9AC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F0E0;
  *(_QWORD *)(a1 + 8) = &unk_24C40F140;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40F569C881);
}

void sub_20B0CEA70(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40F0E0;
  *(_QWORD *)a1 = &unk_24C40F140;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0CEB20(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C40F0E0;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40F140;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40F569C881);
}

uint64_t sub_20B0CEBF4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F2B8;
  *(_QWORD *)(a1 + 8) = &unk_24C40F318;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CECA4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F2B8;
  *(_QWORD *)(a1 + 8) = &unk_24C40F318;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40F569C881);
}

void sub_20B0CED68(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40F2B8;
  *(_QWORD *)a1 = &unk_24C40F318;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0CEE18(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C40F2B8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40F318;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40F569C881);
}

uint64_t sub_20B0CEEEC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C410370;
  *(_QWORD *)(a1 + 8) = &unk_24C4103D0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CEF9C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C410370;
  *(_QWORD *)(a1 + 8) = &unk_24C4103D0;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40F569C881);
}

void sub_20B0CF060(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C410370;
  *(_QWORD *)a1 = &unk_24C4103D0;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0CF110(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C410370;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C4103D0;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40F569C881);
}

uint64_t sub_20B0CF1E4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C410510;
  *(_QWORD *)(a1 + 8) = &unk_24C410570;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CF294(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C410510;
  *(_QWORD *)(a1 + 8) = &unk_24C410570;
  v2 = *(std::__shared_weak_count **)(a1 + 224);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40F569C881);
}

void sub_20B0CF358(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C410510;
  *(_QWORD *)a1 = &unk_24C410570;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0CF408(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C410510;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C410570;
  v3 = *(std::__shared_weak_count **)(a1 + 216);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40F569C881);
}

uint64_t sub_20B0CF4DC(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24C40F490;
  *(_QWORD *)(a1 + 8) = &unk_24C40F4F0;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CF568(uint64_t a1)
{
  void (*v2)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v5;

  *(_QWORD *)a1 = off_24C40F490;
  *(_QWORD *)(a1 + 8) = &unk_24C40F4F0;
  v2 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 208);
  if (v2)
    v2(0, a1 + 208, 0, 0, 0);
  v3 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40294CF2FDLL);
}

_QWORD *sub_20B0CF608(_QWORD *result)
{
  _QWORD *v1;
  uint64_t (*v2)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD);
  uint64_t v3;
  char v4;

  v1 = result;
  *(result - 1) = off_24C40F490;
  *result = &unk_24C40F4F0;
  v2 = (uint64_t (*)(_QWORD, _QWORD *, _QWORD, _QWORD, _QWORD))result[25];
  if (v2)
    result = (_QWORD *)v2(0, result + 25, 0, 0, 0);
  v3 = *((unsigned int *)v1 + 46);
  if ((_DWORD)v3 != -1)
    result = (_QWORD *)((uint64_t (*)(char *, _QWORD *))*(&off_24C40DC18 + v3))(&v4, v1 + 1);
  *((_DWORD *)v1 + 46) = -1;
  return result;
}

uint64_t sub_20B0CF694(uint64_t a1)
{
  uint64_t v2;
  void (*v3)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD);
  uint64_t v4;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40F490;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40F4F0;
  v3 = *(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(a1 + 200);
  if (v3)
    v3(0, a1 + 200, 0, 0, 0);
  v4 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v4 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v4))(&v6, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40294CF2FDLL);
}

uint64_t sub_20B0CF73C(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F8E8;
  *(_QWORD *)(a1 + 8) = &unk_24C40F948;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CF7EC(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40F8E8;
  *(_QWORD *)(a1 + 8) = &unk_24C40F948;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C407D254C52);
}

void sub_20B0CF8B0(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40F8E8;
  *(_QWORD *)a1 = &unk_24C40F948;
  v2 = *(std::__shared_weak_count **)(a1 + 200);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0CF960(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C40F8E8;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40F948;
  v3 = *(std::__shared_weak_count **)(a1 + 200);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C407D254C52);
}

uint64_t sub_20B0CFA34(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40FD38;
  *(_QWORD *)(a1 + 8) = &unk_24C40FD98;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0CFAE4(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v7;

  *(_QWORD *)a1 = off_24C40FD38;
  *(_QWORD *)(a1 + 8) = &unk_24C40FD98;
  v2 = *(std::__shared_weak_count **)(a1 + 216);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 192);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v7, a1 + 16);
LABEL_7:
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10F3C40EF434651);
}

void sub_20B0CFBA8(uint64_t a1)
{
  std::__shared_weak_count *v2;
  unint64_t *p_shared_owners;
  unint64_t v4;
  uint64_t v5;
  char v6;

  *(_QWORD *)(a1 - 8) = off_24C40FD38;
  *(_QWORD *)a1 = &unk_24C40FD98;
  v2 = *(std::__shared_weak_count **)(a1 + 208);
  if (v2)
  {
    p_shared_owners = (unint64_t *)&v2->__shared_owners_;
    do
      v4 = __ldaxr(p_shared_owners);
    while (__stlxr(v4 - 1, p_shared_owners));
    if (!v4)
    {
      ((void (*)(std::__shared_weak_count *))v2->__on_zero_shared)(v2);
      std::__shared_weak_count::__release_weak(v2);
      v5 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v5 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v5 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v5 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v5))(&v6, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0CFC58(uint64_t a1)
{
  uint64_t v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;
  uint64_t v6;
  char v8;

  *(_QWORD *)(a1 - 8) = off_24C40FD38;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40FD98;
  v3 = *(std::__shared_weak_count **)(a1 + 208);
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
      v6 = *(unsigned int *)(a1 + 184);
      if ((_DWORD)v6 == -1)
        goto LABEL_7;
      goto LABEL_6;
    }
  }
  v6 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v6 != -1)
LABEL_6:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v6))(&v8, a1 + 8);
LABEL_7:
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10F3C40EF434651);
}

uint64_t sub_20B0CFD2C(uint64_t a1)
{
  if (*(char *)(a1 + 111) < 0)
  {
    operator delete(*(void **)(a1 + 88));
    if ((*(char *)(a1 + 87) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 55) & 0x80000000) == 0)
        goto LABEL_4;
LABEL_8:
      operator delete(*(void **)(a1 + 32));
      if ((*(char *)(a1 + 23) & 0x80000000) == 0)
        return a1;
      goto LABEL_9;
    }
  }
  else if ((*(char *)(a1 + 87) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 55) < 0)
    goto LABEL_8;
LABEL_4:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_9:
  operator delete(*(void **)a1);
  return a1;
}

void sub_20B0CFDB8(uint64_t a1)
{
  sub_20B0CA240(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0CFDDC(uint64_t a1)
{
  return sub_20B0CA240(a1 - 8);
}

void sub_20B0CFDE4(uint64_t a1)
{
  sub_20B0CA240(a1 - 8);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0CFE0C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C4101D0;
  *(_QWORD *)(a1 + 8) = &unk_24C410230;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
LABEL_8:
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

void sub_20B0CFEB4(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)a1 = off_24C4101D0;
  *(_QWORD *)(a1 + 8) = &unk_24C410230;
  if (*(_BYTE *)(a1 + 376) && *(char *)(a1 + 375) < 0)
    operator delete(*(void **)(a1 + 352));
  if (*(_BYTE *)(a1 + 344) && *(char *)(a1 + 343) < 0)
  {
    operator delete(*(void **)(a1 + 320));
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 192);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 192) = -1;
      JUMPOUT(0x20BD3583CLL);
    }
  }
  ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, a1 + 16);
  goto LABEL_8;
}

void sub_20B0CFF6C(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24C4101D0;
  *(_QWORD *)a1 = &unk_24C410230;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
    goto LABEL_7;
  }
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
LABEL_7:
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, a1 + 8);
LABEL_8:
  *(_DWORD *)(a1 + 184) = -1;
}

void sub_20B0D0014(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24C4101D0;
  *(_QWORD *)a1 = &unk_24C410230;
  if (*(_BYTE *)(a1 + 368) && *(char *)(a1 + 367) < 0)
    operator delete(*(void **)(a1 + 344));
  if (*(_BYTE *)(a1 + 336) && *(char *)(a1 + 335) < 0)
  {
    operator delete(*(void **)(a1 + 312));
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
      goto LABEL_8;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 184);
    if ((_DWORD)v2 == -1)
    {
LABEL_8:
      *(_DWORD *)(a1 + 184) = -1;
      JUMPOUT(0x20BD3583CLL);
    }
  }
  ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, a1 + 8);
  goto LABEL_8;
}

uint64_t sub_20B0D00D4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40DF60;
  *(_QWORD *)(a1 + 8) = &unk_24C40DFC0;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0D013C(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40DF60;
  *(_QWORD *)(a1 + 8) = &unk_24C40DFC0;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40CF772451);
}

uint64_t sub_20B0D01B8(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24C40DF60;
  *(_QWORD *)result = &unk_24C40DFC0;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_20B0D0220(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24C40DF60;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40DFC0;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40CF772451);
}

uint64_t sub_20B0D02A4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E100;
  *(_QWORD *)(a1 + 8) = &unk_24C40E160;
  sub_20B0D0484(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0D0310(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E100;
  *(_QWORD *)(a1 + 8) = &unk_24C40E160;
  sub_20B0D0484(a1 + 200);
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40DC57CB27);
}

uint64_t sub_20B0D0390(uint64_t a1)
{
  uint64_t result;
  uint64_t v3;
  char v4;

  *(_QWORD *)(a1 - 8) = off_24C40E100;
  *(_QWORD *)a1 = &unk_24C40E160;
  result = sub_20B0D0484(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v4, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return result;
}

uint64_t sub_20B0D03FC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24C40E100;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40E160;
  sub_20B0D0484(a1 + 192);
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40DC57CB27);
}

uint64_t sub_20B0D0484(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0)
  {
    operator delete(*(void **)(a1 + 152));
    if ((*(char *)(a1 + 143) & 0x80000000) == 0)
    {
LABEL_3:
      if ((*(char *)(a1 + 119) & 0x80000000) == 0)
        goto LABEL_4;
      goto LABEL_11;
    }
  }
  else if ((*(char *)(a1 + 143) & 0x80000000) == 0)
  {
    goto LABEL_3;
  }
  operator delete(*(void **)(a1 + 120));
  if ((*(char *)(a1 + 119) & 0x80000000) == 0)
  {
LABEL_4:
    if ((*(char *)(a1 + 95) & 0x80000000) == 0)
      goto LABEL_5;
    goto LABEL_12;
  }
LABEL_11:
  operator delete(*(void **)(a1 + 96));
  if ((*(char *)(a1 + 95) & 0x80000000) == 0)
  {
LABEL_5:
    if ((*(char *)(a1 + 71) & 0x80000000) == 0)
      goto LABEL_6;
    goto LABEL_13;
  }
LABEL_12:
  operator delete(*(void **)(a1 + 72));
  if ((*(char *)(a1 + 71) & 0x80000000) == 0)
  {
LABEL_6:
    if ((*(char *)(a1 + 47) & 0x80000000) == 0)
      goto LABEL_7;
LABEL_14:
    operator delete(*(void **)(a1 + 24));
    if ((*(char *)(a1 + 23) & 0x80000000) == 0)
      return a1;
    goto LABEL_15;
  }
LABEL_13:
  operator delete(*(void **)(a1 + 48));
  if (*(char *)(a1 + 47) < 0)
    goto LABEL_14;
LABEL_7:
  if ((*(char *)(a1 + 23) & 0x80000000) == 0)
    return a1;
LABEL_15:
  operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_20B0D0554(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E370;
  *(_QWORD *)(a1 + 8) = &unk_24C40E3D0;
  sub_20AEC833C(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0D05C4(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E370;
  *(_QWORD *)(a1 + 8) = &unk_24C40E3D0;
  sub_20AEC833C(a1 + 200, *(char **)(a1 + 208));
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40546963AFLL);
}

void sub_20B0D0648(uint64_t a1)
{
  uint64_t v2;
  char v3;

  *(_QWORD *)(a1 - 8) = off_24C40E370;
  *(_QWORD *)a1 = &unk_24C40E3D0;
  sub_20AEC833C(a1 + 192, *(char **)(a1 + 200));
  v2 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
}

uint64_t sub_20B0D06B8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24C40E370;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40E3D0;
  sub_20AEC833C(a1 + 192, *(char **)(a1 + 200));
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40546963AFLL);
}

uint64_t sub_20B0D0744(uint64_t a1)
{
  void **v2;
  void **v3;
  void **v4;

  if (*(_BYTE *)(a1 + 48) && *(char *)(a1 + 47) < 0)
  {
    operator delete(*(void **)(a1 + 24));
    v2 = *(void ***)a1;
    if (!*(_QWORD *)a1)
      return a1;
  }
  else
  {
    v2 = *(void ***)a1;
    if (!*(_QWORD *)a1)
      return a1;
  }
  v3 = *(void ***)(a1 + 8);
  v4 = v2;
  if (v3 != v2)
  {
    do
    {
      if (*((char *)v3 - 9) < 0)
        operator delete(*(v3 - 4));
      v3 -= 4;
    }
    while (v3 != v2);
    v4 = *(void ***)a1;
  }
  *(_QWORD *)(a1 + 8) = v2;
  operator delete(v4);
  return a1;
}

void sub_20B0D07DC(uint64_t a1)
{
  sub_20B0CABD0(a1);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0D0800(uint64_t a1)
{
  return sub_20B0CABD0(a1 - 8);
}

void sub_20B0D0808(uint64_t a1)
{
  sub_20B0CABD0(a1 - 8);
  JUMPOUT(0x20BD3583CLL);
}

uint64_t sub_20B0D0830(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E750;
  *(_QWORD *)(a1 + 8) = &unk_24C40E7B0;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return a1;
}

uint64_t sub_20B0D0898(uint64_t a1)
{
  uint64_t v2;
  char v4;

  *(_QWORD *)a1 = off_24C40E750;
  *(_QWORD *)(a1 + 8) = &unk_24C40E7B0;
  v2 = *(unsigned int *)(a1 + 192);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v4, a1 + 16);
  *(_DWORD *)(a1 + 192) = -1;
  return MEMORY[0x20BD3583C](a1, 0x10B3C40956CF698);
}

uint64_t sub_20B0D0914(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  char v3;

  v1 = result;
  *(_QWORD *)(result - 8) = off_24C40E750;
  *(_QWORD *)result = &unk_24C40E7B0;
  v2 = *(unsigned int *)(result + 184);
  if ((_DWORD)v2 != -1)
    result = ((uint64_t (*)(char *, uint64_t))*(&off_24C40DC18 + v2))(&v3, result + 8);
  *(_DWORD *)(v1 + 184) = -1;
  return result;
}

uint64_t sub_20B0D097C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  char v5;

  *(_QWORD *)(a1 - 8) = off_24C40E750;
  v2 = a1 - 8;
  *(_QWORD *)a1 = &unk_24C40E7B0;
  v3 = *(unsigned int *)(a1 + 184);
  if ((_DWORD)v3 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DC18 + v3))(&v5, a1 + 8);
  *(_DWORD *)(a1 + 184) = -1;
  return MEMORY[0x20BD3583C](v2, 0x10B3C40956CF698);
}

uint64_t sub_20B0D0A00(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  char v5;
  __int128 v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  __int128 v10;
  char v11;
  __int128 v13;
  uint64_t v14;

  v4 = *a2;
  v5 = *((_BYTE *)a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 48) = 0;
  if (*((_BYTE *)a2 + 40))
  {
    if (*((char *)a2 + 39) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 24), (void *)a2[2], a2[3]);
    }
    else
    {
      v6 = *((_OWORD *)a2 + 1);
      *(_QWORD *)(a1 + 40) = a2[4];
      *(_OWORD *)(a1 + 24) = v6;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  if (*((_BYTE *)a2 + 96))
  {
    v7 = *((_BYTE *)a2 + 88);
    *(_QWORD *)(a1 + 56) = a2[10];
    *(_BYTE *)(a1 + 64) = v7;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 1;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
      goto LABEL_8;
  }
  else
  {
    *(_BYTE *)(a1 + 56) = 0;
    *(_BYTE *)(a1 + 80) = 0;
    v8 = a1 + 80;
    *(_BYTE *)(a1 + 72) = 0;
    *(_BYTE *)(a1 + 104) = 0;
    if (!*((_BYTE *)a2 + 72))
    {
LABEL_8:
      v9 = a1 + 112;
      if (*((_BYTE *)a2 + 160))
        goto LABEL_9;
      goto LABEL_16;
    }
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_20AEC60F4((_BYTE *)v8, (void *)a2[6], a2[7]);
  }
  else
  {
    v10 = *((_OWORD *)a2 + 3);
    *(_QWORD *)(v8 + 16) = a2[8];
    *(_OWORD *)v8 = v10;
  }
  *(_BYTE *)(a1 + 104) = 1;
  v9 = a1 + 112;
  if (*((_BYTE *)a2 + 160))
  {
LABEL_9:
    if (*((char *)a2 + 135) < 0)
    {
      sub_20AEC60F4(&v13, (void *)a2[14], a2[15]);
    }
    else
    {
      v13 = *((_OWORD *)a2 + 7);
      v14 = a2[16];
    }
    *(_OWORD *)v9 = v13;
    *(_QWORD *)(v9 + 16) = v14;
    *(_BYTE *)(a1 + 136) = 1;
    v11 = *((_BYTE *)a2 + 200);
    if (v11)
      goto LABEL_20;
    goto LABEL_17;
  }
LABEL_16:
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  v11 = *((_BYTE *)a2 + 200);
  if (v11)
  {
LABEL_20:
    sub_20B0D0C28(a2 + 22, (uint64_t)&v13);
    *(_OWORD *)(a1 + 144) = v13;
    *(_QWORD *)(a1 + 160) = v14;
    v11 = 1;
    goto LABEL_21;
  }
LABEL_17:
  *(_BYTE *)(a1 + 144) = 0;
LABEL_21:
  *(_BYTE *)(a1 + 168) = v11;
  return a1;
}

void sub_20B0D0BBC(_Unwind_Exception *exception_object)
{
  char *v1;
  void **v2;
  void **v3;

  if (v1[104] && v1[103] < 0)
    operator delete(*v3);
  if (v1[48])
  {
    if (v1[47] < 0)
      operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B0D0C28@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v4;
  double result;
  __int128 v6;
  uint64_t v7;

  v4 = (a1[1] - *a1) >> 5;
  v7 = 0;
  v6 = 0uLL;
  sub_20AECF88C((uint64_t)&v6, 0xAAAAAAAAAAAAAAABLL * v4);
  sub_20B0D0D30(*a1, a1[1], (uint64_t)&v6);
  result = *(double *)&v6;
  *(_OWORD *)a2 = v6;
  *(_QWORD *)(a2 + 16) = v7;
  return result;
}

void sub_20B0D0C9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10)
{
  void **v11;
  void **v12;

  if (__p)
  {
    v11 = a10;
    v12 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((char *)v11 - 1) < 0)
          operator delete(*(v11 - 3));
        v11 -= 3;
      }
      while (v11 != __p);
      v12 = __p;
    }
    operator delete(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0D0D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  __int128 v6;
  unint64_t v7;
  char *v8;
  int v9;
  void *__p[2];
  uint64_t v12;
  _BYTE v13[24];
  int v14;
  char v15;
  _QWORD v16[2];

  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v14 = 0;
      sub_20B0C2E10((uint64_t)v16, (uint64_t)v13, v5);
      if (v14 == -1)
        sub_20AECFAB8();
      v16[0] = &v15;
      ((void (*)(void **__return_ptr, _QWORD *, _BYTE *))off_24C40DC60[v14])(__p, v16, v13);
      if (v14 != -1)
        ((void (*)(_QWORD *, _BYTE *))off_24C40DC48[v14])(v16, v13);
      v7 = *(_QWORD *)(a3 + 8);
      if (v7 < *(_QWORD *)(a3 + 16))
      {
        v6 = *(_OWORD *)__p;
        *(_QWORD *)(v7 + 16) = v12;
        *(_OWORD *)v7 = v6;
        *(_QWORD *)(a3 + 8) = v7 + 24;
      }
      else
      {
        v8 = sub_20AEC81D4((void **)a3, (uint64_t)__p);
        v9 = SHIBYTE(v12);
        *(_QWORD *)(a3 + 8) = v8;
        if (v9 < 0)
          operator delete(__p[0]);
      }
      v5 += 96;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_20B0D0E3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18)
{
  if (a14 < 0)
  {
    operator delete(__p);
    _Unwind_Resume(exception_object);
  }
  _Unwind_Resume(exception_object);
}

double sub_20B0D0E90@<D0>(uint64_t *a1@<X1>, uint64_t a2@<X8>)
{
  unint64_t v4;
  uint64_t i;
  uint64_t v6;
  uint64_t v7;
  _BYTE *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  unsigned __int128 v12;
  char *v13;
  double result;
  __int128 v15;
  unint64_t v16;
  void *v17[2];
  uint64_t v18;
  char v19;
  __int128 __p;
  uint64_t v21;
  unsigned __int128 v22;
  char v23;
  uint64_t v24;

  v24 = *MEMORY[0x24BDAC8D0];
  v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  v16 = 0;
  v15 = 0uLL;
  sub_20B0C3110((uint64_t)&v15, v4);
  v6 = *a1;
  for (i = a1[1]; v6 != i; v6 += 24)
  {
    if (*(char *)(v6 + 23) < 0)
    {
      v8 = *(_BYTE **)v6;
      v7 = *(_QWORD *)(v6 + 8);
    }
    else
    {
      v7 = *(unsigned __int8 *)(v6 + 23);
      v8 = (_BYTE *)v6;
    }
    sub_20B216330(v8, v7, (uint64_t)v17);
    v9 = *((_QWORD *)&v15 + 1);
    if (*((_QWORD *)&v15 + 1) >= v16)
    {
      v13 = sub_20B0C32C0(&v15, (uint64_t)v17);
    }
    else
    {
      **((_BYTE **)&v15 + 1) = 0;
      *(_BYTE *)(v9 + 24) = 0;
      if (v19)
      {
        v10 = *(_OWORD *)v17;
        *(_QWORD *)(v9 + 16) = v18;
        *(_OWORD *)v9 = v10;
        v17[1] = 0;
        v18 = 0;
        v17[0] = 0;
        *(_BYTE *)(v9 + 24) = 1;
      }
      *(_BYTE *)(v9 + 32) = 0;
      *(_BYTE *)(v9 + 80) = 0;
      if (v23)
      {
        v11 = __p;
        *(_QWORD *)(v9 + 48) = v21;
        *(_OWORD *)(v9 + 32) = v11;
        v21 = 0;
        __p = 0uLL;
        do
          v12 = __ldaxp(&v22);
        while (__stlxp(v12, &v22));
        *(_OWORD *)(v9 + 64) = v12;
        *(_BYTE *)(v9 + 80) = 1;
      }
      v13 = (char *)(v9 + 96);
    }
    *((_QWORD *)&v15 + 1) = v13;
    if (v23 && SHIBYTE(v21) < 0)
      operator delete((void *)__p);
    if (v19 && SHIBYTE(v18) < 0)
      operator delete(v17[0]);
  }
  result = *(double *)&v15;
  *(_OWORD *)a2 = v15;
  *(_QWORD *)(a2 + 16) = v16;
  return result;
}

void sub_20B0D103C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void **__p, void **a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  void **v30;
  void **v31;

  if (__p)
  {
    v30 = a10;
    v31 = __p;
    if (a10 != __p)
    {
      do
      {
        if (*((_BYTE *)v30 - 16) && *((char *)v30 - 41) < 0)
          operator delete(*(v30 - 8));
        if (*((_BYTE *)v30 - 72))
        {
          if (*((char *)v30 - 73) < 0)
            operator delete(*(v30 - 12));
        }
        v30 -= 12;
      }
      while (v30 != __p);
      v31 = __p;
    }
    operator delete(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0D1154(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0D1898((uint64_t)v8, a2);
  sub_20B0D1270(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0D1258(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D1270(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  void **v14;
  unsigned __int8 *v15;
  int v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  void **v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  void **v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  void **v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  void **v36;
  int v37;
  void **v38;
  unsigned __int8 *v39;
  int v40;
  void **v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_20B5086B4(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B5086B4(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(void ***)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = (uint64_t)v14;
    v15 = (unsigned __int8 *)sub_20B506370(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = (void **)*((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = (uint64_t)v17;
    sub_20B4181DC((void ***)&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_20B0D1BF4(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_20B506370(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = (void **)*((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = (uint64_t)v23;
    sub_20B4181DC((void ***)&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_20B0D1FB0((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_20B506370(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = (void **)*((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = (uint64_t)v28;
    sub_20B4181DC((void ***)&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_20B508B7C(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_20B506370(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = (void **)*((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = (uint64_t)v41;
      sub_20B4181DC((void ***)&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_20B508B7C(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_20B506370(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = (void **)*((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = (uint64_t)v32;
      sub_20B4181DC((void ***)&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_20B508B7C(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_20B506370(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = (void **)*((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = (uint64_t)v36;
      sub_20B4181DC((void ***)&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(void ***)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - (_QWORD)v38) >> 3);
      v43 = (uint64_t)v38;
      sub_20B50A640(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_20B508B7C(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20B0D1818(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0D1850(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0D1868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0D1880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0D1898(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;

  v4 = *(_OWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 24) = 0;
  *(_OWORD *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + 48) = 0;
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 24), *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
    }
    else
    {
      v5 = *(_OWORD *)(a2 + 24);
      *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
      *(_OWORD *)(a1 + 24) = v5;
    }
    *(_BYTE *)(a1 + 48) = 1;
  }
  v6 = *(_OWORD *)(a2 + 56);
  v7 = *(_QWORD *)(a2 + 72);
  *(_BYTE *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 72) = v7;
  *(_OWORD *)(a1 + 56) = v6;
  *(_BYTE *)(a1 + 104) = 0;
  if (*(_BYTE *)(a2 + 104))
  {
    if (*(char *)(a2 + 103) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 80), *(void **)(a2 + 80), *(_QWORD *)(a2 + 88));
    }
    else
    {
      v8 = *(_OWORD *)(a2 + 80);
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)(a1 + 80) = v8;
    }
    *(_BYTE *)(a1 + 104) = 1;
  }
  *(_BYTE *)(a1 + 112) = 0;
  *(_BYTE *)(a1 + 136) = 0;
  if (*(_BYTE *)(a2 + 136))
  {
    if (*(char *)(a2 + 135) < 0)
    {
      sub_20AEC60F4((_BYTE *)(a1 + 112), *(void **)(a2 + 112), *(_QWORD *)(a2 + 120));
    }
    else
    {
      v9 = *(_OWORD *)(a2 + 112);
      *(_QWORD *)(a1 + 128) = *(_QWORD *)(a2 + 128);
      *(_OWORD *)(a1 + 112) = v9;
    }
    *(_BYTE *)(a1 + 136) = 1;
  }
  *(_BYTE *)(a1 + 144) = 0;
  *(_BYTE *)(a1 + 168) = 0;
  if (*(_BYTE *)(a2 + 168))
  {
    *(_QWORD *)(a1 + 144) = 0;
    *(_QWORD *)(a1 + 152) = 0;
    *(_QWORD *)(a1 + 160) = 0;
    sub_20B0D1AC4((char *)(a1 + 144), *(_QWORD *)(a2 + 144), *(_QWORD *)(a2 + 152), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3));
    *(_BYTE *)(a1 + 168) = 1;
  }
  return a1;
}

void sub_20B0D1A08(_Unwind_Exception *exception_object)
{
  void **v1;
  char *v2;
  void **v3;
  void **v4;

  if (v2[136] && v2[135] < 0)
    operator delete(*v4);
  if (v2[104] && v2[103] < 0)
    operator delete(*v3);
  if (v2[48])
  {
    if (v2[47] < 0)
      operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_20B0D1AC4(char *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v5;
  char *v8;
  uint64_t v9;
  uint64_t v10;

  if (a4)
  {
    v5 = result;
    if (a4 >= 0xAAAAAAAAAAAAAABLL)
      sub_20AEC60B8();
    result = (char *)operator new(24 * a4);
    v8 = result;
    *v5 = result;
    v5[1] = result;
    v5[2] = &result[24 * a4];
    if (a2 != a3)
    {
      v9 = 0;
      do
      {
        result = &v8[v9];
        v10 = a2 + v9;
        if (*(char *)(a2 + v9 + 23) < 0)
        {
          result = (char *)sub_20AEC60F4(result, *(void **)v10, *(_QWORD *)(v10 + 8));
        }
        else
        {
          *(_OWORD *)result = *(_OWORD *)v10;
          *((_QWORD *)result + 2) = *(_QWORD *)(v10 + 16);
        }
        v9 += 24;
      }
      while (a2 + v9 != a3);
      v8 += v9;
    }
    v5[1] = v8;
  }
  return result;
}

void sub_20B0D1BA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  sub_20AEC7748(&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D1BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  for (; v11; v11 -= 24)
  {
    if (*(char *)(v10 + v11 - 1) < 0)
      operator delete(*(void **)(v10 + v11 - 24));
  }
  *(_QWORD *)(v9 + 8) = v10;
  sub_20AEC7748(&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D1BF4(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B0D1CFC((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B508B7C(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B0D1CB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0D1CD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D1CE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D1CFC(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)(&off_24C41C858)[2 * *a3], (uint64_t)(&off_24C41C858)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40DC30[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B0D1F5C(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B0D1F80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0D1F9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0D1FB0(int *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  __int128 v25;

  sub_20B50671C(a2);
  v22 = "version";
  v23 = 7;
  v24 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_20B5086B4(a2, &v24);
    v7 = *a1;
    if (*a1 >= 1)
      goto LABEL_4;
LABEL_20:
    v25 = *a3;
    v9 = *(unsigned __int8 **)(a2 + 40);
    if (*v9 <= 1u)
    {
      *(_QWORD *)(a2 + 72) = "ns";
      v10 = a2 + 72;
      v12 = (_BYTE *)(a2 + 88);
      v15 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 2;
      v13 = (_QWORD *)(a2 + 80);
      if (!v15)
        *v12 = 1;
      goto LABEL_29;
    }
    v13 = (_QWORD *)(a2 + 80);
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    if (!*(_BYTE *)(a2 + 88) || *(_QWORD *)(a2 + 80) != 7)
      goto LABEL_29;
    if (**(_DWORD **)v10 != *(_DWORD *)"version" || *(_DWORD *)(*(_QWORD *)v10 + 3) != *(_DWORD *)"sion")
      goto LABEL_29;
    goto LABEL_30;
  }
  *(_BYTE *)(a2 + 88) = 1;
  sub_20B5086B4(a2, &v24);
  v7 = *a1;
  if (*a1 < 1)
    goto LABEL_20;
LABEL_4:
  if (v7 == 2)
  {
    v22 = "min_version";
    v23 = 11;
    v24 = 2;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v8)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5086B4(a2, &v24);
  }
  v25 = *a3;
  v9 = *(unsigned __int8 **)(a2 + 40);
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "ns";
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    v11 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 80) = 2;
    v13 = (_QWORD *)(a2 + 80);
    if (!v11)
      *v12 = 1;
    goto LABEL_29;
  }
  v13 = (_QWORD *)(a2 + 80);
  v10 = a2 + 72;
  v12 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (**(_DWORD **)v10 == *(_DWORD *)"version"
      ? (v14 = *(_DWORD *)(*(_QWORD *)v10 + 3) == *(_DWORD *)"sion")
      : (v14 = 0),
        !v14))
  {
LABEL_29:
    LOBYTE(v22) = 5;
    v23 = v25;
    v17 = (unsigned __int8 *)sub_20B506370(a2);
    v18 = *v17;
    *v17 = 5;
    LOBYTE(v22) = v18;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v23;
    v23 = (uint64_t)v19;
    sub_20B4181DC((void ***)&v23, v18);
    v9 = *(unsigned __int8 **)(a2 + 40);
  }
LABEL_30:
  if (*v9 <= 1u)
  {
    v20 = *v12;
    *(_QWORD *)v10 = "clock_type";
    *v13 = 10;
    if (!v20)
      *v12 = 1;
  }
  v22 = (char *)&v25 + 8;
  sub_20B0D22E8(a2, (unsigned __int8 **)&v22);
  v21 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(a2 + 56) = v21 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B0D22B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0D22D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  void ***v10;

  sub_20B4181DC(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0D22E8(uint64_t a1, unsigned __int8 **a2)
{
  void **v3;
  BOOL v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  void **v11;
  unsigned __int8 *v12;
  void *__p[2];
  char v14;
  char v15[8];
  void **v16;
  int v17;
  char v18;
  char *v19;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    v12 = *a2;
    v17 = 0;
    sub_20B0D1CFC((uint64_t)&v19, (uint64_t)v15, v12);
    if (v17 == -1)
      sub_20AECFAB8();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, char *))off_24C40DC60[v17])(__p, &v19, v15);
    if (v17 != -1)
      ((void (*)(char **, char *))off_24C40DC48[v17])(&v19, v15);
    sub_20B508B7C(a1, (uint64_t)__p);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = (void **)**a2;
    if (*(_BYTE *)(a1 + 88))
      v4 = *(_QWORD *)(a1 + 80) == 7;
    else
      v4 = 0;
    if (!v4
      || ((v5 = *(int **)(a1 + 72), v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == *(_DWORD *)"version")
        ? (v8 = v7 == *(_DWORD *)"sion")
        : (v8 = 0),
          !v8))
    {
      v15[0] = 6;
      v16 = v3;
      v9 = (unsigned __int8 *)sub_20B506370(a1);
      v10 = *v9;
      *v9 = 6;
      v15[0] = v10;
      v11 = (void **)*((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = v16;
      v16 = v11;
      sub_20B4181DC(&v16, v10);
    }
  }
}

void sub_20B0D243C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20B4181DC(v13, a13);
  _Unwind_Resume(a1);
}

void sub_20B0D2454(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0D2470(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D2484(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D2498(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, const std::string::value_type *a4@<X4>, std::string::size_type a5@<X5>, std::string *a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string *p_p;
  std::string::size_type v17;
  std::string::size_type size;
  std::string *v19;
  std::string::size_type v20;
  __int128 i;
  std::string __p;
  __int128 v24;

  v11 = 0x5555555555555555 * ((a1 - a3) >> 3);
  if (v11 <= 1)
    v12 = 1;
  else
    v12 = 0x5555555555555555 * ((a1 - a3) >> 3);
  v13 = (v12 - 1) * a5;
  *(_QWORD *)&v24 = a1;
  *((_QWORD *)&v24 + 1) = a2;
  v14 = 0;
  v15 = a1 - a3;
  if (a1 != a3)
  {
    do
    {
      sub_20B0D26A8((unsigned __int8 **)&v24, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        size = __p.__r_.__value_.__l.__size_;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      v14 += size;
      *(_QWORD *)&v24 = v24 + 24;
    }
    while ((_QWORD)v24 != a3);
  }
  a6->__r_.__value_.__r.__words[0] = 0;
  a6->__r_.__value_.__l.__size_ = 0;
  a6->__r_.__value_.__r.__words[2] = 0;
  std::string::reserve(a6, v14 + v13);
  *(_QWORD *)&v24 = a1;
  *((_QWORD *)&v24 + 1) = a2;
  if (v15 < 0)
  {
    sub_20B0D26A8((unsigned __int8 **)&v24, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v17 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    else
      v17 = __p.__r_.__value_.__l.__size_;
    std::string::append(a6, (const std::string::value_type *)p_p, v17);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if ((unint64_t)v11 < 2)
        return;
    }
    else if ((unint64_t)v11 < 2)
    {
      return;
    }
    *(_QWORD *)&v24 = v24 + 24;
    for (i = v24; (_QWORD)i != a3; *(_QWORD *)&i = i + 24)
    {
      std::string::append(a6, a4, a5);
      sub_20B0D26A8((unsigned __int8 **)&i, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v19 = &__p;
      else
        v19 = (std::string *)__p.__r_.__value_.__r.__words[0];
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v20 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      else
        v20 = __p.__r_.__value_.__l.__size_;
      std::string::append(a6, (const std::string::value_type *)v19, v20);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_20B0D2664(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  uint64_t v19;

  if (a19 < 0)
    operator delete(__p);
  if (*(char *)(v19 + 23) < 0)
    operator delete(*(void **)v19);
  _Unwind_Resume(exception_object);
}

void sub_20B0D26A8(unsigned __int8 **a1@<X0>, std::string *a2@<X8>)
{
  unsigned __int8 *v3;
  std::string::size_type v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  const std::string::value_type *v8;

  v3 = *a1;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  if ((v3[23] & 0x80u) == 0)
    v4 = v3[23];
  else
    v4 = *((_QWORD *)v3 + 1);
  std::string::reserve(a2, v4);
  v5 = *((_QWORD *)v3 + 1);
  if ((v3[23] & 0x80u) == 0)
  {
    v6 = v3[23];
  }
  else
  {
    v3 = *(unsigned __int8 **)v3;
    v6 = v5;
  }
  if (v6)
  {
    while (1)
    {
      v7 = *v3;
      if (v7 == 59)
        break;
      if (v7 == 92)
      {
        v8 = "\\\\";
LABEL_15:
        std::string::append(a2, v8, 2uLL);
        goto LABEL_10;
      }
      std::string::push_back(a2, v7);
LABEL_10:
      ++v3;
      if (!--v6)
        return;
    }
    v8 = "\\;";
    goto LABEL_15;
  }
}

void sub_20B0D2774(_Unwind_Exception *exception_object)
{
  uint64_t v1;

  if (*(char *)(v1 + 23) < 0)
    operator delete(*(void **)v1);
  _Unwind_Resume(exception_object);
}

void sub_20B0D2794(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _BYTE v37[28];
  char v38[8];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  std::ios_base v61;
  uint64_t v62;
  int v63;
  uint64_t (**v64)();
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  __int16 v71;

  *(_OWORD *)v37 = *(_OWORD *)a2;
  *(_OWORD *)&v37[12] = *(_OWORD *)(a2 + 12);
  v38[0] = 0;
  v46 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24C40DC78[v3])(&v64, v38, a2 + 32);
    v46 = v3;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "io_format";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_20B0D3044((uint64_t)&v48, (uint64_t)&v49, (unsigned __int16 *)v37);
  if ((_DWORD)v52 == -1)
    sub_20AECFAB8();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24C40DC60[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24C40DC48[v52])(&v48, &v49);
  sub_20B508B7C(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_15;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_15;
  }
  v5 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "structure";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v5)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_15:
  sub_20B50671C(a1);
  v49 = (uint64_t)"version";
  v50 = 7;
  LODWORD(v51) = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B5086B4(a1, &v51);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "image_format";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_20B0D32F8((uint64_t)&v48, (uint64_t)&v49, (uint64_t *)&v37[8]);
  if ((_DWORD)v52 == -1)
    sub_20AECFAB8();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24C40DC60[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24C40DC48[v52])(&v48, &v49);
  sub_20B508B7C(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_30;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_30;
  }
  v8 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "size";
  *(_QWORD *)(a1 + 80) = 4;
  if (!v8)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_30:
  v49 = 2;
  v50 = (uint64_t)&v37[16];
  sub_20B5092A4(a1, (uint64_t)&v49);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "image_data";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  if (*(unsigned __int16 *)v37 == 1)
  {
    if (!v46)
    {
      v49 = (uint64_t)&off_24C3FA3D0;
      v12 = v39;
      v13 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = v43;
        v17 = v44;
        v18 = v45;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      else
      {
        v16 = v43;
        v17 = v44;
        v18 = v45;
      }
      v50 = v12;
      v51 = v13;
      v52 = v41;
      v53 = v42;
      v54 = v16;
      v55 = v17;
      v56 = v18;
      if (v13)
      {
        v28 = (unint64_t *)&v13->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_59;
    }
    if (v46 == 1)
    {
      v49 = (uint64_t)&off_24C3FA3D0;
      sub_20B2E41AC((uint64_t)v38, (uint64_t)&v50);
LABEL_59:
      sub_20B2DFE74((const void *)a1, (uint64_t)&v49);
      v30 = v51;
      if (!v51)
        goto LABEL_73;
      v31 = (unint64_t *)&v51->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      goto LABEL_72;
    }
LABEL_80:
    sub_20AECFAB8();
  }
  v11 = sub_20B2DF950(*(unsigned __int16 *)v37);
  if (v46)
  {
    if (v46 != 1)
      goto LABEL_80;
    v64 = &off_24C3FA3D0;
    sub_20B2E41AC((uint64_t)v38, (uint64_t)&v65);
  }
  else
  {
    v64 = &off_24C3FA3D0;
    v20 = v39;
    v21 = v40;
    if (v40)
    {
      v22 = (unint64_t *)&v40->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = v43;
      v25 = v44;
      v26 = v45;
      do
        v27 = __ldxr(v22);
      while (__stxr(v27 + 1, v22));
    }
    else
    {
      v24 = v43;
      v25 = v44;
      v26 = v45;
    }
    v65 = v20;
    v66 = v21;
    v67 = v41;
    v68 = v42;
    v69 = v24;
    v70 = v25;
    v71 = v26;
    if (v21)
    {
      v33 = (unint64_t *)&v21->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v49 = a1;
  std::streambuf::basic_streambuf();
  v50 = MEMORY[0x24BEDB848] + 16;
  v57 = 0u;
  v58 = 0u;
  v59 = 24;
  v60 = MEMORY[0x24BEDB828] + 24;
  v61.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v61, &v50);
  v62 = 0;
  v63 = -1;
  sub_20B0D359C(&v64, (char *)&v60, v11);
  sub_20B0D3A7C((uint64_t)&v49);
  v30 = v66;
  if (!v66)
    goto LABEL_73;
  v35 = (unint64_t *)&v66->__shared_owners_;
  do
    v32 = __ldaxr(v35);
  while (__stlxr(v32 - 1, v35));
LABEL_72:
  if (v32)
  {
LABEL_73:
    v36 = v46;
    if (v46 == -1)
      return;
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  v36 = v46;
  if (v46 != -1)
LABEL_74:
    ((void (*)(uint64_t *, char *))*(&off_24C40DBA8 + v36))(&v49, v38);
}

void sub_20B0D2DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_20B0D3A7C((uint64_t)&a24);
  sub_20AF9E0BC(v24 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D2DE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  MEMORY[0x20BD35758](v40);
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20AF9E0BC(v39 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D2E28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AF9E0BC(v9 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D2E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      sub_20B0C5FDC((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D2F34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  std::__shared_weak_count *v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  uint64_t v7;
  int v8;
  __int16 v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;

  *(_QWORD *)a2 = &off_24C3FA3D0;
  v3 = *(_QWORD *)(a3 + 8);
  v4 = *(std::__shared_weak_count **)(a3 + 16);
  if (v4)
  {
    p_shared_owners = (unint64_t *)&v4->__shared_owners_;
    do
      v6 = __ldxr(p_shared_owners);
    while (__stxr(v6 + 1, p_shared_owners));
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
    do
      v10 = __ldxr(p_shared_owners);
    while (__stxr(v10 + 1, p_shared_owners));
  }
  else
  {
    v7 = *(_QWORD *)(a3 + 40);
    v8 = *(_DWORD *)(a3 + 48);
    v9 = *(_WORD *)(a3 + 52);
  }
  *(_QWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = v4;
  v11 = *(_QWORD *)(a3 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a3 + 32);
  *(_QWORD *)(a2 + 24) = v11;
  *(_QWORD *)(a2 + 40) = v7;
  *(_DWORD *)(a2 + 48) = v8;
  *(_WORD *)(a2 + 52) = v9;
  if (v4)
  {
    v12 = (unint64_t *)&v4->__shared_owners_;
    do
      v13 = __ldaxr(v12);
    while (__stlxr(v13 - 1, v12));
    if (!v13)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
}

__n128 sub_20B0D2FFC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t *v5;
  unint64_t v6;
  __n128 result;
  __int128 v8;

  v4 = *(_QWORD *)(a3 + 8);
  v3 = *(_QWORD *)(a3 + 16);
  *(_QWORD *)a2 = &off_24C3FF020;
  *(_QWORD *)(a2 + 8) = v4;
  *(_QWORD *)(a2 + 16) = v3;
  if (v3)
  {
    v5 = (unint64_t *)(v3 + 8);
    do
      v6 = __ldxr(v5);
    while (__stxr(v6 + 1, v5));
  }
  result = *(__n128 *)(a3 + 24);
  v8 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v8;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_20B0D3044(uint64_t a1, uint64_t a2, unsigned __int16 *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20AEC01D0((_QWORD *)(v5 + 16), (uint64_t)(&off_24C4189E8)[2 * *a3], (uint64_t)(&off_24C4189E8)[2 * *a3 + 1]);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40DC30[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B0D32A4(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B0D32C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0D32E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0D32F8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  int v6;
  size_t v7;
  void **v8;
  unint64_t v9;
  unint64_t v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *__dst[2];
  unint64_t v20;
  _QWORD v21[5];
  _QWORD *v22;

  v5 = operator new();
  *(_OWORD *)v5 = 0u;
  *(_OWORD *)(v5 + 16) = 0u;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 112) = 0u;
  *(_OWORD *)(v5 + 128) = 0u;
  *(_OWORD *)(v5 + 144) = 0u;
  *(_OWORD *)(v5 + 160) = 0u;
  *(_OWORD *)(v5 + 176) = 0u;
  *(_OWORD *)(v5 + 192) = 0u;
  *(_OWORD *)(v5 + 208) = 0u;
  *(_OWORD *)(v5 + 224) = 0u;
  *(_OWORD *)(v5 + 240) = 0u;
  *(_OWORD *)(v5 + 256) = 0u;
  *(_QWORD *)(v5 + 272) = 0;
  sub_20AEC0BD8(v5);
  v21[0] = v5;
  sub_20B2DEBDC((_QWORD *)(v5 + 16), a3);
  v6 = *(_DWORD *)(v5 + 120);
  if ((v6 & 0x10) != 0)
  {
    v9 = *(_QWORD *)(v5 + 112);
    v10 = *(_QWORD *)(v5 + 72);
    if (v9 < v10)
    {
      *(_QWORD *)(v5 + 112) = v10;
      v9 = v10;
    }
    v11 = *(const void **)(v5 + 64);
    v7 = v9 - (_QWORD)v11;
    if (v9 - (unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_22;
  }
  else
  {
    if ((v6 & 8) == 0)
    {
      v7 = 0;
      HIBYTE(v20) = 0;
      v8 = __dst;
      goto LABEL_14;
    }
    v11 = *(const void **)(v5 + 40);
    v7 = *(_QWORD *)(v5 + 56) - (_QWORD)v11;
    if (v7 >= 0x7FFFFFFFFFFFFFF8)
LABEL_22:
      sub_20AEC0138();
  }
  if (v7 >= 0x17)
  {
    v12 = (v7 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v7 | 7) != 0x17)
      v12 = v7 | 7;
    v13 = v12 + 1;
    v8 = (void **)operator new(v12 + 1);
    __dst[1] = (void *)v7;
    v20 = v13 | 0x8000000000000000;
    __dst[0] = v8;
    goto LABEL_13;
  }
  HIBYTE(v20) = v7;
  v8 = __dst;
  if (v7)
LABEL_13:
    memmove(v8, v11, v7);
LABEL_14:
  *((_BYTE *)v8 + v7) = 0;
  v14 = v21[0];
  if (v21[0])
  {
    v15 = MEMORY[0x24BEDB7F0];
    v16 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v21[0] = *MEMORY[0x24BEDB7F0];
    v17 = *(_QWORD *)(v15 + 72);
    *(_QWORD *)(v14 + *(_QWORD *)(v16 - 24)) = *(_QWORD *)(v15 + 64);
    *(_QWORD *)(v14 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v14 + 16) = v17;
    if (*(char *)(v14 + 111) < 0)
      operator delete(*(void **)(v14 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v14 + 128);
    MEMORY[0x20BD3583C](v14, 0x10B2C40EED050F3);
  }
  v21[0] = a2;
  v21[1] = __dst;
  v21[2] = a2;
  v21[3] = __dst;
  v21[4] = __dst;
  v18 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v18 == -1)
    sub_20AECFAB8();
  v22 = v21;
  ((void (*)(_QWORD **, uint64_t))off_24C40DC30[v18])(&v22, a2);
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_20B0D3548(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B0D356C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0D3588(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0D359C(_DWORD *a1, char *a2, int a3)
{
  _BYTE *v4;
  int v5;
  _QWORD *exception;
  __int128 v7;
  void *v8[2];
  uint64_t v9;
  char v10;
  __int128 v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  char v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  __int128 v21;
  __int128 v22;
  char v23;
  char v24;
  void *v25;
  char v26;
  void *v27;
  char v28;
  char v29;
  char v30;
  __int128 v31;
  void *__p;
  char v33;
  unsigned __int8 v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;
  uint64_t v39;
  char v40;
  char v41;
  __int128 v42;
  void *v43;
  char v44;
  char v45;
  void *v46;
  char v47;
  void *v48;
  char v49;
  char v50;
  char v51;
  char v52;
  int v53;
  _QWORD v54[2];

  sub_20B2D17C0(a1, a2, a3, (uint64_t)&v42);
  if (v52)
  {
    v18 = 1;
    goto LABEL_36;
  }
  v54[0] = "save";
  v54[1] = 4;
  v53 = a3;
  sub_20B2D15EC("Failure during ", (uint64_t)v54, (uint64_t)" from stream with file format ", &v53, (uint64_t)": ");
  if (v52)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C3F6160;
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
  }
  sub_20B52A138(&v19, &v42, (uint64_t)&v21);
  v31 = v21;
  v4 = sub_20AECEBD0(&__p, &v22);
  v7 = v31;
  LOBYTE(v8[0]) = 0;
  v17 = 0;
  if (v41)
  {
    v10 = 0;
    v5 = v34;
    if (v34)
    {
      *(_OWORD *)v8 = *(_OWORD *)v4;
      v9 = *((_QWORD *)v4 + 2);
      *((_QWORD *)v4 + 1) = 0;
      *((_QWORD *)v4 + 2) = 0;
      *(_QWORD *)v4 = 0;
      v10 = 1;
    }
    LOBYTE(v11) = 0;
    v16 = 0;
    if (v40)
    {
      v12 = v36;
      v11 = v35;
      v35 = 0uLL;
      v13 = v37;
      *(_OWORD *)v14 = v38;
      v15 = v39;
      v36 = 0;
      v38 = 0uLL;
      v39 = 0;
      v16 = 1;
    }
    v17 = 1;
    v18 = 0;
    if (v5 && v33 < 0)
      operator delete(__p);
    if (!v30)
      goto LABEL_23;
    goto LABEL_15;
  }
  v18 = 0;
  if (v30)
  {
LABEL_15:
    if (v29)
    {
      if (v28 < 0)
        operator delete(v27);
      if (v26 < 0)
        operator delete(v25);
    }
    if (v24 && v23 < 0)
      operator delete((void *)v22);
  }
LABEL_23:
  if (v20 < 0)
  {
    operator delete(v19);
    if (v52)
      goto LABEL_36;
  }
  else if (v52)
  {
    goto LABEL_36;
  }
  if (v51)
  {
    if (v50)
    {
      if (v49 < 0)
        operator delete(v48);
      if (v47 < 0)
        operator delete(v46);
    }
    if (v45 && v44 < 0)
      operator delete(v43);
  }
LABEL_36:
  sub_20B0D38B0((uint64_t)&v7);
  if (!v18 && v17)
  {
    if (v16)
    {
      if (SHIBYTE(v15) < 0)
        operator delete(v14[0]);
      if (SHIBYTE(v12) < 0)
        operator delete((void *)v11);
    }
    if (v10)
    {
      if (SHIBYTE(v9) < 0)
        operator delete(v8[0]);
    }
  }
}

void sub_20B0D3860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,char a31)
{
  uint64_t v31;

  sub_20AECCE40((uint64_t)&a31);
  if (a30 < 0)
    operator delete(__p);
  sub_20AECD704(v31 - 168);
  _Unwind_Resume(a1);
}

void sub_20B0D389C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECD704((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0D38B0(uint64_t a1)
{
  std::runtime_error *exception;
  uint64_t v4;
  std::string v5;

  if (!*(_BYTE *)(a1 + 120))
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v4 = sub_20B0B52D8(a1);
    sub_20B5287D4(v4, &v5);
    std::runtime_error::runtime_error(exception, &v5);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  return sub_20B0D396C(a1);
}

void sub_20B0D3934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void *v15;
  int v16;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v16 & 1) == 0)
LABEL_6:
      _Unwind_Resume(a1);
  }
  else if (!v16)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v15);
  goto LABEL_6;
}

uint64_t sub_20B0D396C(uint64_t result)
{
  __int128 *v1;
  void *exception;
  __int128 v3;
  _BYTE v4[112];

  v1 = (__int128 *)result;
  if (!*(_BYTE *)(result + 120))
  {
    exception = __cxa_allocate_exception(0x80uLL);
    v3 = *v1;
    sub_20AECEBD0(v4, v1 + 1);
    sub_20AECF558((uint64_t)exception, &v3);
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22C0, (void (*)(void *))sub_20AECF5A8);
  }
  return result;
}

void sub_20B0D39E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AECCE40((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D39FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  sub_20AECCE40((uint64_t)&a9);
  __cxa_free_exception(v9);
  _Unwind_Resume(a1);
}

void sub_20B0D3A18(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0D3A2C(uint64_t a1)
{
  *(_QWORD *)a1 = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::streambuf::~streambuf();
}

uint64_t sub_20B0D3A7C(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  size_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  void **v19;
  void **v20;
  uint64_t v21;
  void **__dst;
  size_t v24;
  int64_t v25;
  size_t v26;
  void **v27;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_20AEC0138();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v24 = v3;
    v25 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v25);
  if (v25 >= 0)
    v11 = HIBYTE(v25);
  else
    v11 = v24;
  v12 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 88)
    || *(_QWORD *)(v12 + 80) != 7
    || ((v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (v16 = v15 == *(_DWORD *)"sion")
      : (v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    v27 = (void **)v11;
    v17 = (unsigned __int8 *)sub_20B506370(v12);
    v18 = *v17;
    *v17 = v26;
    LOBYTE(v26) = v18;
    v19 = (void **)*((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v27;
    v27 = v19;
    sub_20B4181DC(&v27, v18);
    v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v20 = 0;
    }
  }
  else
  {
    v20 = (void **)&__dst;
  }
  v21 = *(_QWORD *)a1;
  v26 = v11;
  v27 = v20;
  sub_20B506898(v21, &v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_20B0D3CC8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  void ***v13;

  sub_20B4181DC(v13, a13);
  sub_20AEC01C0(a1);
}

void sub_20B0D3CE4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0D1898((uint64_t)v8, a2);
  sub_20B0D3E00(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0D3DE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D3E00(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  size_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void **v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  const void **v30;
  const void **v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  char v38;
  uint64_t *v39;

  v6 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v6 + 40))
  {
    v39 = (uint64_t *)(v6 + 16);
    sub_20B51E95C(&v39, 2u);
    sub_20B51956C(*(_QWORD *)(a1 + 24));
    v7 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v7 + 40))
      goto LABEL_3;
LABEL_6:
    sub_20B51F1FC();
    v8 = *(char *)(a2 + 16);
    v9 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v9 + 40))
      goto LABEL_4;
    goto LABEL_7;
  }
  sub_20B51EBD0((uint64_t)&v39, v6 + 8);
  sub_20B51956C(*(_QWORD *)(a1 + 24));
  v7 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v7 + 40))
    goto LABEL_6;
LABEL_3:
  v39 = (uint64_t *)(v7 + 16);
  sub_20B51ECC0(&v39, *(_QWORD *)(a2 + 8));
  v8 = *(char *)(a2 + 16);
  v9 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v9 + 40))
  {
LABEL_4:
    v39 = (uint64_t *)(v9 + 16);
    sub_20B51DD74(&v39, v8);
    goto LABEL_11;
  }
LABEL_7:
  if (v8 < 0)
  {
    LOBYTE(v39) = -52;
    BYTE1(v39) = v8;
  }
  else
  {
    LOBYTE(v39) = v8;
  }
  std::ostream::write();
LABEL_11:
  v10 = *(_QWORD *)(a1 + 24);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v10 + 48), *(_QWORD *)(v10 + 16) - v11 - 9);
  v12 = *(_QWORD *)(v10 + 48);
  if (v12)
    memmove((void *)(*(_QWORD *)(v10 + 24) + v11), *(const void **)(v10 + 56), v12);
  *(_QWORD *)(v10 + 48) = 0;
  v13 = *(_QWORD *)(v10 + 80);
  v14 = *(_QWORD *)(v10 + 88) - 8;
  *(_QWORD *)(v10 + 88) = v14;
  if (v13 == v14)
  {
    std::ostream::write();
    if (*(_BYTE *)(v10 + 40))
    {
      free(*(void **)(v10 + 24));
      *(_BYTE *)(v10 + 40) = 0;
    }
  }
  if (*(_BYTE *)(a2 + 48))
  {
    v15 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v15 + 40))
    {
      v39 = (uint64_t *)(v15 + 16);
      sub_20B51DD74(&v39, 1);
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
        goto LABEL_19;
    }
    else
    {
      LOBYTE(v39) = 1;
      std::ostream::write();
      v16 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v16 + 40))
      {
LABEL_19:
        v39 = (uint64_t *)(v16 + 16);
        sub_20B51FA2C((uint64_t)&v38, &v39, (const void **)(a2 + 24));
        if (a3 < 4)
          return;
        goto LABEL_28;
      }
    }
    sub_20B51FE64((uint64_t)&v39, v16 + 8, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v17 + 40))
    {
      v39 = (uint64_t *)(v17 + 16);
      sub_20B51DD74(&v39, 0);
      if (a3 < 4)
        return;
    }
    else
    {
      LOBYTE(v39) = 0;
      std::ostream::write();
      if (a3 < 4)
        return;
    }
  }
LABEL_28:
  sub_20B0D4470(a1, a2 + 56);
  if (a3 != 5)
  {
    if (a3 < 6)
      return;
    if (!*(_BYTE *)(a2 + 104))
    {
      v23 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v23 + 40))
      {
        v39 = (uint64_t *)(v23 + 16);
        sub_20B51DD74(&v39, 0);
        if (!*(_BYTE *)(a2 + 136))
        {
LABEL_54:
          v26 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v26 + 40))
          {
            v39 = (uint64_t *)(v26 + 16);
            sub_20B51DD74(&v39, 0);
            if (*(_BYTE *)(a2 + 168))
              goto LABEL_56;
          }
          else
          {
            LOBYTE(v39) = 0;
            std::ostream::write();
            if (*(_BYTE *)(a2 + 168))
            {
LABEL_56:
              v27 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v27 + 40))
              {
                v39 = (uint64_t *)(v27 + 16);
                sub_20B51DD74(&v39, 1);
              }
              else
              {
                LOBYTE(v39) = 1;
                std::ostream::write();
              }
              v28 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
              v29 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v29 + 40))
              {
                v39 = (uint64_t *)(v29 + 16);
                sub_20B51F33C(&v39, v28);
              }
              else
              {
                sub_20B51F644();
              }
              v31 = *(const void ***)(a2 + 144);
              v30 = *(const void ***)(a2 + 152);
              v32 = ((char *)v30 - (char *)v31) / 24;
              v33 = *(_QWORD *)(a1 + 24);
              if (*(_BYTE *)(v33 + 40))
              {
                v39 = (uint64_t *)(v33 + 16);
                if (v30 != v31)
                {
                  v34 = 24 * v32;
                  do
                  {
                    sub_20B51FA2C((uint64_t)&v38, &v39, v31);
                    v31 += 3;
                    v34 -= 24;
                  }
                  while (v34);
                }
              }
              else if (v30 != v31)
              {
                v35 = v33 + 8;
                v36 = 24 * v32;
                do
                {
                  sub_20B51FE64((uint64_t)&v39, v35, (uint64_t)v31);
                  v31 += 3;
                  v36 -= 24;
                }
                while (v36);
              }
              return;
            }
          }
LABEL_72:
          v37 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v37 + 40))
          {
            v39 = (uint64_t *)(v37 + 16);
            sub_20B51DD74(&v39, 0);
          }
          else
          {
            LOBYTE(v39) = 0;
            std::ostream::write();
          }
          return;
        }
      }
      else
      {
        LOBYTE(v39) = 0;
        std::ostream::write();
        if (!*(_BYTE *)(a2 + 136))
          goto LABEL_54;
      }
LABEL_46:
      v24 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v24 + 40))
      {
        v39 = (uint64_t *)(v24 + 16);
        sub_20B51DD74(&v39, 1);
        v25 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v25 + 40))
          goto LABEL_48;
      }
      else
      {
        LOBYTE(v39) = 1;
        std::ostream::write();
        v25 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v25 + 40))
        {
LABEL_48:
          v39 = (uint64_t *)(v25 + 16);
          sub_20B51FA2C((uint64_t)&v38, &v39, (const void **)(a2 + 112));
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_56;
          goto LABEL_72;
        }
      }
      sub_20B51FE64((uint64_t)&v39, v25 + 8, a2 + 112);
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_56;
      goto LABEL_72;
    }
    v21 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v21 + 40))
    {
      v39 = (uint64_t *)(v21 + 16);
      sub_20B51DD74(&v39, 1);
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
        goto LABEL_37;
    }
    else
    {
      LOBYTE(v39) = 1;
      std::ostream::write();
      v22 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v22 + 40))
      {
LABEL_37:
        v39 = (uint64_t *)(v22 + 16);
        sub_20B51FA2C((uint64_t)&v38, &v39, (const void **)(a2 + 80));
        if (!*(_BYTE *)(a2 + 136))
          goto LABEL_54;
        goto LABEL_46;
      }
    }
    sub_20B51FE64((uint64_t)&v39, v22 + 8, a2 + 80);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_54;
    goto LABEL_46;
  }
  if (!*(_BYTE *)(a2 + 104))
    goto LABEL_72;
  v18 = (const void **)(a2 + 80);
  v19 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v19 + 40))
  {
    v39 = (uint64_t *)(v19 + 16);
    sub_20B51DD74(&v39, 1);
    v20 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v20 + 40))
    {
LABEL_32:
      v39 = (uint64_t *)(v20 + 16);
      sub_20B51FA2C((uint64_t)&v38, &v39, v18);
      return;
    }
  }
  else
  {
    LOBYTE(v39) = 1;
    std::ostream::write();
    v20 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v20 + 40))
      goto LABEL_32;
  }
  sub_20B51FE64((uint64_t)&v39, v20 + 8, (uint64_t)v18);
}

void sub_20B0D4470(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;

  v2 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a2 + 16))
  {
    if (*(_BYTE *)(v2 + 40))
    {
      v14 = (uint64_t *)(v2 + 16);
      sub_20B51DD74(&v14, 0);
    }
    else
    {
      LOBYTE(v14) = 0;
      std::ostream::write();
    }
    return;
  }
  if (*(_BYTE *)(v2 + 40))
  {
    v14 = (uint64_t *)(v2 + 16);
    sub_20B51DD74(&v14, 1);
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
      goto LABEL_4;
  }
  else
  {
    LOBYTE(v14) = 1;
    std::ostream::write();
    v5 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v5 + 40))
    {
LABEL_4:
      v14 = (uint64_t *)(v5 + 16);
      sub_20B51E95C(&v14, 2u);
      sub_20B51956C(*(_QWORD *)(a1 + 24));
      v6 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v6 + 40))
        goto LABEL_5;
LABEL_12:
      sub_20B51F1FC();
      v7 = *(char *)(a2 + 8);
      v8 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v8 + 40))
        goto LABEL_6;
LABEL_13:
      if (v7 < 0)
      {
        LOBYTE(v14) = -52;
        BYTE1(v14) = v7;
      }
      else
      {
        LOBYTE(v14) = v7;
      }
      std::ostream::write();
      goto LABEL_18;
    }
  }
  sub_20B51EBD0((uint64_t)&v14, v5 + 8);
  sub_20B51956C(*(_QWORD *)(a1 + 24));
  v6 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v6 + 40))
    goto LABEL_12;
LABEL_5:
  v14 = (uint64_t *)(v6 + 16);
  sub_20B51ECC0(&v14, *(_QWORD *)a2);
  v7 = *(char *)(a2 + 8);
  v8 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v8 + 40))
    goto LABEL_13;
LABEL_6:
  v14 = (uint64_t *)(v8 + 16);
  sub_20B51DD74(&v14, v7);
LABEL_18:
  v9 = *(_QWORD *)(a1 + 24);
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
}

void sub_20B0D4684(uint64_t *a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *p_shared_owners;
  unint64_t v18;
  uint64_t v19;
  int v20;
  __int16 v21;
  unint64_t v22;
  uint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  uint64_t v27;
  int v28;
  __int16 v29;
  unint64_t v30;
  unint64_t *v31;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t *v38;
  uint64_t v39;
  _BYTE v40[28];
  char v41[8];
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  unsigned int v49;
  uint64_t (**v50)();
  uint64_t v51;
  std::__shared_weak_count *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  __int16 v57;
  __int128 v58;
  __int128 v59;
  int v60;
  uint64_t v61;
  std::ios_base v62;
  uint64_t v63;
  int v64;
  uint64_t (**v65)();
  uint64_t v66;
  std::__shared_weak_count *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  int v71;
  __int16 v72;

  *(_OWORD *)v40 = *(_OWORD *)a2;
  *(_OWORD *)&v40[12] = *(_OWORD *)(a2 + 12);
  v41[0] = 0;
  v49 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24C40DC78[v3])(&v65, v41, a2 + 32);
    v49 = v3;
  }
  v4 = a1[3];
  if (*(_BYTE *)(v4 + 40))
  {
    v50 = (uint64_t (**)())(v4 + 16);
    sub_20B51E278((uint64_t **)&v50, *(unsigned __int16 *)v40);
  }
  else if (*(unsigned __int16 *)v40 > 0x7Fu)
  {
    if (*(unsigned __int16 *)v40 > 0xFFu)
    {
      LOBYTE(v50) = -51;
      *(_WORD *)((char *)&v50 + 1) = __rev16(*(unsigned __int16 *)v40);
    }
    else
    {
      LOBYTE(v50) = -52;
      BYTE1(v50) = v40[0];
    }
    std::ostream::write();
  }
  else
  {
    LOBYTE(v50) = v40[0];
    std::ostream::write();
  }
  v5 = a1[3];
  if (*(_BYTE *)(v5 + 40))
  {
    v50 = (uint64_t (**)())(v5 + 16);
    sub_20B51E95C((uint64_t **)&v50, 2u);
  }
  else
  {
    LOBYTE(v50) = 2;
    std::ostream::write();
  }
  sub_20B51956C(a1[3]);
  v6 = a1[3];
  if (*(_BYTE *)(v6 + 40))
  {
    v50 = (uint64_t (**)())(v6 + 16);
    sub_20B51F33C((uint64_t **)&v50, *(unint64_t *)&v40[8]);
  }
  else
  {
    sub_20B51F644();
  }
  v7 = a1[3];
  if (*(_BYTE *)(v7 + 40))
  {
    v50 = (uint64_t (**)())(v7 + 16);
    sub_20B51E95C((uint64_t **)&v50, *(unsigned int *)&v40[16]);
    sub_20B51E95C((uint64_t **)&v50, *(unsigned int *)&v40[20]);
  }
  else
  {
    v8 = v7 + 8;
    sub_20B51EBD0((uint64_t)&v50, v7 + 8);
    sub_20B51EBD0((uint64_t)&v50, v8);
  }
  v9 = a1[3];
  v10 = *(_QWORD *)(*(_QWORD *)(v9 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v9 + 48), *(_QWORD *)(v9 + 16) - v10 - 9);
  v11 = *(_QWORD *)(v9 + 48);
  if (v11)
    memmove((void *)(*(_QWORD *)(v9 + 24) + v10), *(const void **)(v9 + 56), v11);
  *(_QWORD *)(v9 + 48) = 0;
  v12 = *(_QWORD *)(v9 + 80);
  v13 = *(_QWORD *)(v9 + 88) - 8;
  *(_QWORD *)(v9 + 88) = v13;
  if (v12 == v13)
  {
    std::ostream::write();
    if (*(_BYTE *)(v9 + 40))
    {
      free(*(void **)(v9 + 24));
      *(_BYTE *)(v9 + 40) = 0;
    }
  }
  if (*(unsigned __int16 *)v40 == 1)
  {
    if (!v49)
    {
      v50 = &off_24C3FA3D0;
      v15 = v42;
      v16 = v43;
      if (v43)
      {
        p_shared_owners = (unint64_t *)&v43->__shared_owners_;
        do
          v18 = __ldxr(p_shared_owners);
        while (__stxr(v18 + 1, p_shared_owners));
        v19 = v46;
        v20 = v47;
        v21 = v48;
        do
          v22 = __ldxr(p_shared_owners);
        while (__stxr(v22 + 1, p_shared_owners));
      }
      else
      {
        v19 = v46;
        v20 = v47;
        v21 = v48;
      }
      v51 = v15;
      v52 = v16;
      v53 = v44;
      v54 = v45;
      v55 = v19;
      v56 = v20;
      v57 = v21;
      if (v16)
      {
        v31 = (unint64_t *)&v16->__shared_owners_;
        do
          v32 = __ldaxr(v31);
        while (__stlxr(v32 - 1, v31));
        if (!v32)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      goto LABEL_50;
    }
    if (v49 == 1)
    {
      v50 = &off_24C3FA3D0;
      sub_20B2E41AC((uint64_t)v41, (uint64_t)&v51);
LABEL_50:
      sub_20B2DFE74(a1, (uint64_t)&v50);
      v33 = v52;
      if (!v52)
        goto LABEL_64;
      v34 = (unint64_t *)&v52->__shared_owners_;
      do
        v35 = __ldaxr(v34);
      while (__stlxr(v35 - 1, v34));
      goto LABEL_63;
    }
LABEL_69:
    sub_20AECFAB8();
  }
  v14 = sub_20B2DF950(*(unsigned __int16 *)v40);
  if (v49)
  {
    if (v49 != 1)
      goto LABEL_69;
    v65 = &off_24C3FA3D0;
    sub_20B2E41AC((uint64_t)v41, (uint64_t)&v66);
  }
  else
  {
    v65 = &off_24C3FA3D0;
    v23 = v42;
    v24 = v43;
    if (v43)
    {
      v25 = (unint64_t *)&v43->__shared_owners_;
      do
        v26 = __ldxr(v25);
      while (__stxr(v26 + 1, v25));
      v27 = v46;
      v28 = v47;
      v29 = v48;
      do
        v30 = __ldxr(v25);
      while (__stxr(v30 + 1, v25));
    }
    else
    {
      v27 = v46;
      v28 = v47;
      v29 = v48;
    }
    v66 = v23;
    v67 = v24;
    v68 = v44;
    v69 = v45;
    v70 = v27;
    v71 = v28;
    v72 = v29;
    if (v24)
    {
      v36 = (unint64_t *)&v24->__shared_owners_;
      do
        v37 = __ldaxr(v36);
      while (__stlxr(v37 - 1, v36));
      if (!v37)
      {
        ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
        std::__shared_weak_count::__release_weak(v24);
      }
    }
  }
  v50 = (uint64_t (**)())a1;
  std::streambuf::basic_streambuf();
  v51 = MEMORY[0x24BEDB848] + 16;
  v58 = 0u;
  v59 = 0u;
  v60 = 24;
  v61 = MEMORY[0x24BEDB828] + 24;
  v62.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v62, &v51);
  v63 = 0;
  v64 = -1;
  sub_20B0D359C(&v65, (char *)&v61, v14);
  sub_20B0D4CD8((uint64_t)&v50);
  v33 = v67;
  if (!v67)
    goto LABEL_64;
  v38 = (unint64_t *)&v67->__shared_owners_;
  do
    v35 = __ldaxr(v38);
  while (__stlxr(v35 - 1, v38));
LABEL_63:
  if (v35)
  {
LABEL_64:
    v39 = v49;
    if (v49 == -1)
      return;
    goto LABEL_65;
  }
  ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
  std::__shared_weak_count::__release_weak(v33);
  v39 = v49;
  if (v49 != -1)
LABEL_65:
    ((void (*)(uint64_t (***)(), char *))*(&off_24C40DBA8 + v39))(&v50, v41);
}

void sub_20B0D4BBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  sub_20B0D4CD8((uint64_t)&a22);
  sub_20AF9E0BC(v22 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D4BE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = v36;
  MEMORY[0x20BD35758](v38);
  if (a36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20AF9E0BC(v37 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D4C24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AF9E0BC(v9 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D4C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v25 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      sub_20B0C5FDC((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0D4CD8(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *__dst;
  size_t v16;
  int64_t v17;
  uint64_t *v18;
  uint64_t *v19[2];
  char v20;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v17) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
      sub_20AEC0138();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v16 = v3;
    v17 = v9 | 0x8000000000000000;
    __dst = (uint64_t *)p_dst;
    goto LABEL_13;
  }
  HIBYTE(v17) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  if (v17 >= 0)
    v10 = HIBYTE(v17);
  else
    v10 = v16;
  v11 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(_BYTE *)(v11 + 40))
  {
    v19[0] = (uint64_t *)(v11 + 16);
    sub_20B51F33C(v19, v10);
  }
  else
  {
    sub_20B51F644();
  }
  if (SHIBYTE(v17) < 0)
  {
    v12 = __dst;
    if (v10 && !__dst)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v12 = 0;
    }
  }
  else
  {
    v12 = (uint64_t *)&__dst;
  }
  v13 = *(_QWORD *)(*(_QWORD *)a1 + 24);
  if (*(_BYTE *)(v13 + 40))
  {
    v18 = (uint64_t *)(v13 + 16);
    LODWORD(v19[0]) = v10;
    v19[1] = v12;
    sub_20B51D930((uint64_t)&v20, &v18, (unsigned int *)v19);
  }
  else
  {
    if (v10 > 0xFF)
    {
      if (WORD1(v10))
      {
        LOBYTE(v19[0]) = -58;
        *(_DWORD *)((char *)v19 + 1) = bswap32(v10);
      }
      else
      {
        LOBYTE(v19[0]) = -59;
        *(_WORD *)((char *)v19 + 1) = bswap32(v10) >> 16;
      }
      std::ostream::write();
    }
    else
    {
      LOBYTE(v19[0]) = -60;
      BYTE1(v19[0]) = v10;
      std::ostream::write();
    }
    std::ostream::write();
  }
  if (SHIBYTE(v17) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_20B0D4F88(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0D1898((uint64_t)v8, a2);
  sub_20B0D50A4(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0D508C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D50A4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  _BYTE *v11;
  _QWORD *v12;
  BOOL v13;
  uint64_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  unsigned __int8 *v20;
  unsigned __int8 *v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  unsigned __int8 *v26;
  int v27;
  uint64_t v28;
  int v29;
  unsigned __int8 *v30;
  int v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "auto_timestamp";
    *(_QWORD *)(a1 + 80) = 14;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  v42 = (unint64_t)"version";
  v43 = 7;
  v44 = 2;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v7 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v7))
  {
    sub_20B5069D0(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
      goto LABEL_7;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B5069D0(a1, &v44);
    v8 = *(unsigned __int8 **)(a1 + 40);
    if (*v8 <= 1u)
    {
LABEL_7:
      *(_QWORD *)(a1 + 72) = "ns";
      v9 = a1 + 72;
      v11 = (_BYTE *)(a1 + 88);
      v10 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 80) = 2;
      v12 = (_QWORD *)(a1 + 80);
      if (!v10)
        *v11 = 1;
      goto LABEL_16;
    }
  }
  v12 = (_QWORD *)(a1 + 80);
  v9 = a1 + 72;
  v11 = (_BYTE *)(a1 + 88);
  if (!*(_BYTE *)(a1 + 88)
    || *(_QWORD *)(a1 + 80) != 7
    || (**(_DWORD **)v9 == *(_DWORD *)"version"
      ? (v13 = *(_DWORD *)(*(_QWORD *)v9 + 3) == *(_DWORD *)"sion")
      : (v13 = 0),
        !v13))
  {
LABEL_16:
    v14 = *(_QWORD *)(a2 + 8);
    LOBYTE(v42) = 5;
    v43 = v14;
    v15 = (unsigned __int8 *)sub_20B505B08(a1);
    v16 = *v15;
    *v15 = 5;
    LOBYTE(v42) = v16;
    v17 = *((_QWORD *)v15 + 1);
    *((_QWORD *)v15 + 1) = v43;
    v43 = v17;
    sub_20B416E08(&v43, v16);
    v8 = *(unsigned __int8 **)(a1 + 40);
  }
  if (*v8 <= 1u)
  {
    v18 = *v11;
    *(_QWORD *)v9 = "clock_type";
    *v12 = 10;
    if (!v18)
      *v11 = 1;
  }
  v42 = a2 + 16;
  sub_20B0D56CC(a1, (unsigned __int8 **)&v42);
  v19 = *(_QWORD *)(a1 + 56);
  v20 = *(unsigned __int8 **)(v19 - 8);
  *(_QWORD *)(a1 + 40) = v20;
  *(_QWORD *)(a1 + 56) = v19 - 8;
  if (*(_BYTE *)(a1 + 88))
    *v11 = 0;
  if (*v20 <= 1u)
  {
    *(_QWORD *)v9 = "name";
    *v12 = 4;
    *v11 = 1;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    LOBYTE(v42) = 0;
    v43 = 0;
    v21 = (unsigned __int8 *)sub_20B505B08(a1);
    v22 = *v21;
    *v21 = v42;
    LOBYTE(v42) = v22;
    v23 = *((_QWORD *)v21 + 1);
    *((_QWORD *)v21 + 1) = v43;
    v43 = v23;
    sub_20B416E08(&v43, v22);
    if (a3 < 4)
      return;
LABEL_28:
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v24 = *v11, *(_QWORD *)v9 = "custom_timestamp", *v12 = 16, v24))
    {
      if (*(_BYTE *)(a2 + 72))
        goto LABEL_31;
    }
    else
    {
      *v11 = 1;
      if (*(_BYTE *)(a2 + 72))
      {
LABEL_31:
        v42 = *(_QWORD *)(a1 + 8);
        sub_20B0D57D4((int *)&v42, a1, (__int128 *)(a2 + 56));
        if (a3 == 5)
          goto LABEL_32;
        goto LABEL_39;
      }
    }
    LOBYTE(v42) = 0;
    v43 = 0;
    v26 = (unsigned __int8 *)sub_20B505B08(a1);
    v27 = *v26;
    *v26 = v42;
    LOBYTE(v42) = v27;
    v28 = *((_QWORD *)v26 + 1);
    *((_QWORD *)v26 + 1) = v43;
    v43 = v28;
    sub_20B416E08(&v43, v27);
    if (a3 == 5)
    {
LABEL_32:
      if (**(unsigned __int8 **)(a1 + 40) <= 1u)
      {
        v25 = *v11;
        *(_QWORD *)v9 = "space";
        *v12 = 5;
        if (!v25)
          *v11 = 1;
      }
      if (*(_BYTE *)(a2 + 104))
      {
        sub_20B506E98(a1, a2 + 80);
        return;
      }
LABEL_58:
      LOBYTE(v42) = 0;
      v43 = 0;
      v39 = (unsigned __int8 *)sub_20B505B08(a1);
      v40 = *v39;
      *v39 = v42;
      LOBYTE(v42) = v40;
      v41 = *((_QWORD *)v39 + 1);
      *((_QWORD *)v39 + 1) = v43;
      v43 = v41;
      sub_20B416E08(&v43, v40);
      return;
    }
LABEL_39:
    if (a3 < 6)
      return;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v29 = *v11;
      *(_QWORD *)v9 = "space";
      *v12 = 5;
      if (!v29)
        *v11 = 1;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      sub_20B506E98(a1, a2 + 80);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v30 = (unsigned __int8 *)sub_20B505B08(a1);
      v31 = *v30;
      *v30 = v42;
      LOBYTE(v42) = v31;
      v32 = *((_QWORD *)v30 + 1);
      *((_QWORD *)v30 + 1) = v43;
      v43 = v32;
      sub_20B416E08(&v43, v31);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_50;
    }
    v33 = *v11;
    *(_QWORD *)v9 = "instance_id";
    *v12 = 11;
    if (!v33)
      *v11 = 1;
LABEL_50:
    if (*(_BYTE *)(a2 + 136))
    {
      sub_20B506E98(a1, a2 + 112);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    else
    {
      LOBYTE(v42) = 0;
      v43 = 0;
      v34 = (unsigned __int8 *)sub_20B505B08(a1);
      v35 = *v34;
      *v34 = v42;
      LOBYTE(v42) = v35;
      v36 = *((_QWORD *)v34 + 1);
      *((_QWORD *)v34 + 1) = v43;
      v43 = v36;
      sub_20B416E08(&v43, v35);
      if (**(unsigned __int8 **)(a1 + 40) > 1u)
        goto LABEL_56;
    }
    v37 = *v11;
    *(_QWORD *)v9 = "references";
    *v12 = 10;
    if (!v37)
      *v11 = 1;
LABEL_56:
    if (*(_BYTE *)(a2 + 168))
    {
      v38 = *(_QWORD *)(a2 + 144);
      v42 = 0xAAAAAAAAAAAAAAABLL * ((*(_QWORD *)(a2 + 152) - v38) >> 3);
      v43 = v38;
      sub_20B508464(a1, &v42);
      return;
    }
    goto LABEL_58;
  }
  sub_20B506E98(a1, a2 + 24);
  if (a3 >= 4)
    goto LABEL_28;
}

void sub_20B0D564C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0D5684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0D569C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0D56B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0D56CC(uint64_t a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  v3 = *a2;
  v7 = 0;
  sub_20B0D1CFC((uint64_t)&v9, (uint64_t)v6, v3);
  if (v7 == -1)
    sub_20AECFAB8();
  v9 = &v8;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
  if (v7 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
  sub_20B506E98(a1, (uint64_t)__p);
  if (v5 < 0)
    operator delete(__p[0]);
}

void sub_20B0D5790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0D57AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D57C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D57D4(int *a1, uint64_t a2, __int128 *a3)
{
  int v6;
  int v7;
  int v8;
  unsigned __int8 *v9;
  uint64_t v10;
  int v11;
  _BYTE *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  const char *v22;
  uint64_t v23;
  int v24;
  __int128 v25;

  sub_20B505FB0(a2);
  v22 = "version";
  v23 = 7;
  v24 = 2;
  if (**(unsigned __int8 **)(a2 + 40) > 1u
    || (v6 = *(unsigned __int8 *)(a2 + 88), *(_QWORD *)(a2 + 72) = "version", *(_QWORD *)(a2 + 80) = 7, v6))
  {
    sub_20B5069D0(a2, &v24);
    v7 = *a1;
    if (*a1 >= 1)
      goto LABEL_4;
LABEL_20:
    v25 = *a3;
    v9 = *(unsigned __int8 **)(a2 + 40);
    if (*v9 <= 1u)
    {
      *(_QWORD *)(a2 + 72) = "ns";
      v10 = a2 + 72;
      v12 = (_BYTE *)(a2 + 88);
      v15 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 80) = 2;
      v13 = (_QWORD *)(a2 + 80);
      if (!v15)
        *v12 = 1;
      goto LABEL_29;
    }
    v13 = (_QWORD *)(a2 + 80);
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    if (!*(_BYTE *)(a2 + 88) || *(_QWORD *)(a2 + 80) != 7)
      goto LABEL_29;
    if (**(_DWORD **)v10 != *(_DWORD *)"version" || *(_DWORD *)(*(_QWORD *)v10 + 3) != *(_DWORD *)"sion")
      goto LABEL_29;
    goto LABEL_30;
  }
  *(_BYTE *)(a2 + 88) = 1;
  sub_20B5069D0(a2, &v24);
  v7 = *a1;
  if (*a1 < 1)
    goto LABEL_20;
LABEL_4:
  if (v7 == 2)
  {
    v22 = "min_version";
    v23 = 11;
    v24 = 2;
    if (**(unsigned __int8 **)(a2 + 40) <= 1u)
    {
      v8 = *(unsigned __int8 *)(a2 + 88);
      *(_QWORD *)(a2 + 72) = "min_version";
      *(_QWORD *)(a2 + 80) = 11;
      if (!v8)
        *(_BYTE *)(a2 + 88) = 1;
    }
    sub_20B5069D0(a2, &v24);
  }
  v25 = *a3;
  v9 = *(unsigned __int8 **)(a2 + 40);
  if (*v9 <= 1u)
  {
    *(_QWORD *)(a2 + 72) = "ns";
    v10 = a2 + 72;
    v12 = (_BYTE *)(a2 + 88);
    v11 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 80) = 2;
    v13 = (_QWORD *)(a2 + 80);
    if (!v11)
      *v12 = 1;
    goto LABEL_29;
  }
  v13 = (_QWORD *)(a2 + 80);
  v10 = a2 + 72;
  v12 = (_BYTE *)(a2 + 88);
  if (!*(_BYTE *)(a2 + 88)
    || *(_QWORD *)(a2 + 80) != 7
    || (**(_DWORD **)v10 == *(_DWORD *)"version"
      ? (v14 = *(_DWORD *)(*(_QWORD *)v10 + 3) == *(_DWORD *)"sion")
      : (v14 = 0),
        !v14))
  {
LABEL_29:
    LOBYTE(v22) = 5;
    v23 = v25;
    v17 = (unsigned __int8 *)sub_20B505B08(a2);
    v18 = *v17;
    *v17 = 5;
    LOBYTE(v22) = v18;
    v19 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v23;
    v23 = v19;
    sub_20B416E08(&v23, v18);
    v9 = *(unsigned __int8 **)(a2 + 40);
  }
LABEL_30:
  if (*v9 <= 1u)
  {
    v20 = *v12;
    *(_QWORD *)v10 = "clock_type";
    *v13 = 10;
    if (!v20)
      *v12 = 1;
  }
  v22 = (char *)&v25 + 8;
  sub_20B0D5B0C(a2, (unsigned __int8 **)&v22);
  v21 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v21 - 8);
  *(_QWORD *)(a2 + 56) = v21 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
}

void sub_20B0D5ADC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0D5AF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, unsigned __int8 a10)
{
  uint64_t *v10;

  sub_20B416E08(v10, a10);
  _Unwind_Resume(a1);
}

void sub_20B0D5B0C(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v3;
  BOOL v4;
  int *v5;
  int v6;
  int v7;
  BOOL v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  unsigned __int8 *v12;
  void *__p[2];
  char v14;
  char v15[8];
  uint64_t v16;
  int v17;
  char v18;
  char *v19;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    v12 = *a2;
    v17 = 0;
    sub_20B0D1CFC((uint64_t)&v19, (uint64_t)v15, v12);
    if (v17 == -1)
      sub_20AECFAB8();
    v19 = &v18;
    ((void (*)(void **__return_ptr, char **, char *))off_24C40DC60[v17])(__p, &v19, v15);
    if (v17 != -1)
      ((void (*)(char **, char *))off_24C40DC48[v17])(&v19, v15);
    sub_20B506E98(a1, (uint64_t)__p);
    if (v14 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v3 = **a2;
    if (*(_BYTE *)(a1 + 88))
      v4 = *(_QWORD *)(a1 + 80) == 7;
    else
      v4 = 0;
    if (!v4
      || ((v5 = *(int **)(a1 + 72), v6 = *v5, v7 = *(int *)((char *)v5 + 3), v6 == *(_DWORD *)"version")
        ? (v8 = v7 == *(_DWORD *)"sion")
        : (v8 = 0),
          !v8))
    {
      v15[0] = 6;
      v16 = v3;
      v9 = (unsigned __int8 *)sub_20B505B08(a1);
      v10 = *v9;
      *v9 = 6;
      v15[0] = v10;
      v11 = *((_QWORD *)v9 + 1);
      *((_QWORD *)v9 + 1) = v16;
      v16 = v11;
      sub_20B416E08(&v16, v10);
    }
  }
}

void sub_20B0D5C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20B416E08(v13, a13);
  _Unwind_Resume(a1);
}

void sub_20B0D5C78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0D5C94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D5CA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D5CBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  uint64_t v16;
  int v17;
  __int16 v18;
  unint64_t v19;
  uint64_t v20;
  std::__shared_weak_count *v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  int v25;
  __int16 v26;
  unint64_t v27;
  unint64_t *v28;
  unint64_t v29;
  std::__shared_weak_count *v30;
  unint64_t *v31;
  unint64_t v32;
  unint64_t *v33;
  unint64_t v34;
  unint64_t *v35;
  uint64_t v36;
  _BYTE v37[28];
  char v38[8];
  uint64_t v39;
  std::__shared_weak_count *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  __int16 v45;
  unsigned int v46;
  char v47;
  char *v48;
  uint64_t v49;
  uint64_t v50;
  std::__shared_weak_count *v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  int v55;
  __int16 v56;
  __int128 v57;
  __int128 v58;
  int v59;
  uint64_t v60;
  std::ios_base v61;
  uint64_t v62;
  int v63;
  uint64_t (**v64)();
  uint64_t v65;
  std::__shared_weak_count *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  int v70;
  __int16 v71;

  *(_OWORD *)v37 = *(_OWORD *)a2;
  *(_OWORD *)&v37[12] = *(_OWORD *)(a2 + 12);
  v38[0] = 0;
  v46 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24C40DC78[v3])(&v64, v38, a2 + 32);
    v46 = v3;
  }
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v4 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "io_format";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v4)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_20B0D3044((uint64_t)&v48, (uint64_t)&v49, (unsigned __int16 *)v37);
  if ((_DWORD)v52 == -1)
    sub_20AECFAB8();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24C40DC60[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24C40DC48[v52])(&v48, &v49);
  sub_20B506E98(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_15;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_15;
  }
  v5 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "structure";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v5)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_15:
  sub_20B505FB0(a1);
  v49 = (uint64_t)"version";
  v50 = 7;
  LODWORD(v51) = 2;
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "version";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B5069D0(a1, &v51);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v7 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "image_format";
    *(_QWORD *)(a1 + 80) = 12;
    if (!v7)
      *(_BYTE *)(a1 + 88) = 1;
  }
  LODWORD(v52) = 0;
  sub_20B0D32F8((uint64_t)&v48, (uint64_t)&v49, (uint64_t *)&v37[8]);
  if ((_DWORD)v52 == -1)
    sub_20AECFAB8();
  v48 = &v47;
  ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t *))off_24C40DC60[v52])(&v64, &v48, &v49);
  if ((_DWORD)v52 != -1)
    ((void (*)(char **, uint64_t *))off_24C40DC48[v52])(&v48, &v49);
  sub_20B506E98(a1, (uint64_t)&v64);
  if (SHIBYTE(v66) < 0)
  {
    operator delete(v64);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_30;
  }
  else if (**(unsigned __int8 **)(a1 + 40) > 1u)
  {
    goto LABEL_30;
  }
  v8 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "size";
  *(_QWORD *)(a1 + 80) = 4;
  if (!v8)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_30:
  v49 = 2;
  v50 = (uint64_t)&v37[16];
  sub_20B507488(a1, (uint64_t)&v49);
  v9 = *(_QWORD *)(a1 + 56);
  v10 = *(unsigned __int8 **)(v9 - 8);
  *(_QWORD *)(a1 + 40) = v10;
  *(_QWORD *)(a1 + 56) = v9 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v10 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "image_data";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B505FB0(a1);
  if (*(unsigned __int16 *)v37 == 1)
  {
    if (!v46)
    {
      v49 = (uint64_t)&off_24C3FA3D0;
      v12 = v39;
      v13 = v40;
      if (v40)
      {
        p_shared_owners = (unint64_t *)&v40->__shared_owners_;
        do
          v15 = __ldxr(p_shared_owners);
        while (__stxr(v15 + 1, p_shared_owners));
        v16 = v43;
        v17 = v44;
        v18 = v45;
        do
          v19 = __ldxr(p_shared_owners);
        while (__stxr(v19 + 1, p_shared_owners));
      }
      else
      {
        v16 = v43;
        v17 = v44;
        v18 = v45;
      }
      v50 = v12;
      v51 = v13;
      v52 = v41;
      v53 = v42;
      v54 = v16;
      v55 = v17;
      v56 = v18;
      if (v13)
      {
        v28 = (unint64_t *)&v13->__shared_owners_;
        do
          v29 = __ldaxr(v28);
        while (__stlxr(v29 - 1, v28));
        if (!v29)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      goto LABEL_59;
    }
    if (v46 == 1)
    {
      v49 = (uint64_t)&off_24C3FA3D0;
      sub_20B2E41AC((uint64_t)v38, (uint64_t)&v50);
LABEL_59:
      sub_20B2DFE74((const void *)a1, (uint64_t)&v49);
      v30 = v51;
      if (!v51)
        goto LABEL_73;
      v31 = (unint64_t *)&v51->__shared_owners_;
      do
        v32 = __ldaxr(v31);
      while (__stlxr(v32 - 1, v31));
      goto LABEL_72;
    }
LABEL_80:
    sub_20AECFAB8();
  }
  v11 = sub_20B2DF950(*(unsigned __int16 *)v37);
  if (v46)
  {
    if (v46 != 1)
      goto LABEL_80;
    v64 = &off_24C3FA3D0;
    sub_20B2E41AC((uint64_t)v38, (uint64_t)&v65);
  }
  else
  {
    v64 = &off_24C3FA3D0;
    v20 = v39;
    v21 = v40;
    if (v40)
    {
      v22 = (unint64_t *)&v40->__shared_owners_;
      do
        v23 = __ldxr(v22);
      while (__stxr(v23 + 1, v22));
      v24 = v43;
      v25 = v44;
      v26 = v45;
      do
        v27 = __ldxr(v22);
      while (__stxr(v27 + 1, v22));
    }
    else
    {
      v24 = v43;
      v25 = v44;
      v26 = v45;
    }
    v65 = v20;
    v66 = v21;
    v67 = v41;
    v68 = v42;
    v69 = v24;
    v70 = v25;
    v71 = v26;
    if (v21)
    {
      v33 = (unint64_t *)&v21->__shared_owners_;
      do
        v34 = __ldaxr(v33);
      while (__stlxr(v34 - 1, v33));
      if (!v34)
      {
        ((void (*)(std::__shared_weak_count *))v21->__on_zero_shared)(v21);
        std::__shared_weak_count::__release_weak(v21);
      }
    }
  }
  v49 = a1;
  std::streambuf::basic_streambuf();
  v50 = MEMORY[0x24BEDB848] + 16;
  v57 = 0u;
  v58 = 0u;
  v59 = 24;
  v60 = MEMORY[0x24BEDB828] + 24;
  v61.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v61, &v50);
  v62 = 0;
  v63 = -1;
  sub_20B0D359C(&v64, (char *)&v60, v11);
  sub_20B0D645C((uint64_t)&v49);
  v30 = v66;
  if (!v66)
    goto LABEL_73;
  v35 = (unint64_t *)&v66->__shared_owners_;
  do
    v32 = __ldaxr(v35);
  while (__stlxr(v32 - 1, v35));
LABEL_72:
  if (v32)
  {
LABEL_73:
    v36 = v46;
    if (v46 == -1)
      return;
    goto LABEL_74;
  }
  ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
  std::__shared_weak_count::__release_weak(v30);
  v36 = v46;
  if (v46 != -1)
LABEL_74:
    ((void (*)(uint64_t *, char *))*(&off_24C40DBA8 + v36))(&v49, v38);
}

void sub_20B0D62E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  uint64_t v24;

  sub_20B0D645C((uint64_t)&a24);
  sub_20AF9E0BC(v24 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D630C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  MEMORY[0x20BD35758](v40);
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20AF9E0BC(v39 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D6350(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AF9E0BC(v9 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D636C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      sub_20B0C5FDC((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0D645C(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int *v13;
  int v14;
  int v15;
  BOOL v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  void **v20;
  uint64_t v21;
  void **__dst;
  size_t v24;
  int64_t v25;
  uint64_t v26;
  uint64_t v27;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_36;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v25) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_36:
      sub_20AEC0138();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v24 = v3;
    v25 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v25) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v25);
  if (v25 >= 0)
    v11 = HIBYTE(v25);
  else
    v11 = v24;
  v12 = *(_QWORD *)a1;
  if (!*(_BYTE *)(*(_QWORD *)a1 + 88)
    || *(_QWORD *)(v12 + 80) != 7
    || ((v13 = *(int **)(v12 + 72), v14 = *v13, v15 = *(int *)((char *)v13 + 3), v14 == *(_DWORD *)"version")
      ? (v16 = v15 == *(_DWORD *)"sion")
      : (v16 = 0),
        !v16))
  {
    LOBYTE(v26) = 6;
    v27 = v11;
    v17 = (unsigned __int8 *)sub_20B505B08(v12);
    v18 = *v17;
    *v17 = v26;
    LOBYTE(v26) = v18;
    v19 = *((_QWORD *)v17 + 1);
    *((_QWORD *)v17 + 1) = v27;
    v27 = v19;
    sub_20B416E08(&v27, v18);
    v10 = HIBYTE(v25);
  }
  if (v10 < 0)
  {
    v20 = __dst;
    if (v11 && !__dst)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v20 = 0;
    }
  }
  else
  {
    v20 = (void **)&__dst;
  }
  v21 = *(_QWORD *)a1;
  v26 = v11;
  v27 = (uint64_t)v20;
  sub_20B50612C(v21, (size_t *)&v26);
  if (SHIBYTE(v25) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_20B0D66A8(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, unsigned __int8 a13)
{
  uint64_t *v13;

  sub_20B416E08(v13, a13);
  sub_20AEC01C0(a1);
}

void sub_20B0D66C4(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0D1898((uint64_t)v8, a2);
  sub_20B0D67E0(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0D67C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D67E0(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  std::string::value_type v9;
  _QWORD *v10;
  _QWORD *v11;
  int64x2_t v12;
  int8x16_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  std::string v25;
  std::string __p;
  char v27;

  if (*(_QWORD *)(a1 + 40))
  {
    v6 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  v7 = *(_QWORD *)(a1 + 40);
  *(_QWORD *)(a1 + 40) = v7 + 1;
  if (v7 != -1)
  {
    v8 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v8, (uint64_t)&__p, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(a1 + 40);
  __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a2 + 16);
  sub_20B512EB0(a1, (unsigned __int8 *)&__p);
  v9 = *(_BYTE *)(a1 + 34);
  if (*(_QWORD *)(a1 + 40))
  {
    v10 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v10, (uint64_t)&__p, 1);
  }
  v11 = *(_QWORD **)(a1 + 24);
  __p.__r_.__value_.__s.__data_[0] = v9;
  sub_20AEC01D0(v11, (uint64_t)&__p, 1);
  ++*(_QWORD *)(a1 + 40);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_20B512EB0(a1, (unsigned __int8 *)&__p);
    sub_20B512F6C(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_20B512EB0(a1, (unsigned __int8 *)&__p);
    if (a3 < 4)
      return;
  }
  sub_20B0D6C68(a1, a2 + 56);
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      sub_20B512EB0(a1, (unsigned __int8 *)&__p);
      sub_20B512F6C(a1, a2 + 80);
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      sub_20B512EB0(a1, (unsigned __int8 *)&__p);
    }
    return;
  }
  if (a3 < 6)
    return;
  if (*(_BYTE *)(a2 + 104))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    sub_20B512EB0(a1, (unsigned __int8 *)&__p);
    sub_20B512F6C(a1, a2 + 80);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_17;
LABEL_43:
    __p.__r_.__value_.__s.__data_[0] = 0;
    sub_20B512EB0(a1, (unsigned __int8 *)&__p);
    if (*(_QWORD *)(a1 + 40))
    {
      v22 = *(_QWORD **)(a1 + 24);
      __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v22, (uint64_t)&__p, 1);
      ++*(_QWORD *)(a1 + 40);
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
    else
    {
      *(_QWORD *)(a1 + 40) = 1;
      __p.__r_.__value_.__s.__data_[0] = 0;
      v27 = 0;
      if (*(_BYTE *)(a2 + 168))
        goto LABEL_18;
    }
LABEL_45:
    v25.__r_.__value_.__s.__data_[0] = 0;
    sub_20B512EB0(a1, (unsigned __int8 *)&v25);
    if (*(_QWORD *)(a1 + 40))
    {
      v23 = *(_QWORD **)(a1 + 24);
      v25.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v23, (uint64_t)&v25, 1);
      v24 = *(_QWORD *)(a1 + 40) + 1;
    }
    else
    {
      v24 = 1;
    }
    *(_QWORD *)(a1 + 40) = v24;
    return;
  }
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_20B512EB0(a1, (unsigned __int8 *)&__p);
  if (*(_QWORD *)(a1 + 40))
  {
    v21 = *(_QWORD **)(a1 + 24);
    __p.__r_.__value_.__s.__data_[0] = *(_BYTE *)(a1 + 32);
    sub_20AEC01D0(v21, (uint64_t)&__p, 1);
    ++*(_QWORD *)(a1 + 40);
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
  else
  {
    *(_QWORD *)(a1 + 40) = 1;
    if (!*(_BYTE *)(a2 + 136))
      goto LABEL_43;
  }
LABEL_17:
  __p.__r_.__value_.__s.__data_[0] = 1;
  sub_20B512EB0(a1, (unsigned __int8 *)&__p);
  sub_20B512F6C(a1, a2 + 112);
  __p.__r_.__value_.__s.__data_[0] = 0;
  v27 = 0;
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_45;
LABEL_18:
  v14 = *(_QWORD *)(a2 + 144);
  v15 = *(_QWORD *)(a2 + 152);
  if (v14 == v15)
  {
LABEL_36:
    sub_20AECFBC8(v14, v15, ";", 1uLL, &v25, v12, v13);
  }
  else
  {
    v16 = *(uint64_t **)(a2 + 144);
    while (1)
    {
      v17 = *((unsigned __int8 *)v16 + 23);
      if ((v17 & 0x80u) == 0)
        v18 = v16;
      else
        v18 = (uint64_t *)*v16;
      if ((v17 & 0x80u) != 0)
        v17 = v16[1];
      if (v17)
      {
        v19 = 0;
        while (1)
        {
          v20 = *((unsigned __int8 *)v18 + v19);
          if (v20 == 59 || v20 == 92)
            break;
          if (v17 == ++v19)
            goto LABEL_20;
        }
        if (v17 != v19 && v19 != -1)
          break;
      }
LABEL_20:
      v16 += 3;
      if (v16 == (uint64_t *)v15)
        goto LABEL_36;
    }
    sub_20B0D2498(v14, v15, *(_QWORD *)(a2 + 152), ";", 1uLL, &v25);
  }
  __p = v25;
  v27 = 1;
  v25.__r_.__value_.__s.__data_[0] = 1;
  sub_20B512EB0(a1, (unsigned __int8 *)&v25);
  sub_20B512F6C(a1, (uint64_t)&__p);
  if (v27 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_20B0D6C44(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0D6C68(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  char v7;
  _QWORD *v8;
  _QWORD *v9;
  unsigned __int8 v10;
  unsigned __int8 v11;
  unsigned __int8 v12;
  char v13;
  char v14;
  char v15;
  char v16;

  if (*(_BYTE *)(a2 + 16))
  {
    v11 = 1;
    sub_20B512EB0(a1, &v11);
    if (*(_QWORD *)(a1 + 40))
    {
      v4 = *(_QWORD **)(a1 + 24);
      v13 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v4, (uint64_t)&v13, 1);
    }
    std::ostream::operator<<();
    v5 = *(_QWORD *)(a1 + 40);
    *(_QWORD *)(a1 + 40) = v5 + 1;
    if (v5 != -1)
    {
      v6 = *(_QWORD **)(a1 + 24);
      v14 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v6, (uint64_t)&v14, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(a1 + 40);
    v12 = *(_BYTE *)(a2 + 8);
    sub_20B512EB0(a1, &v12);
    v7 = *(_BYTE *)(a1 + 34);
    if (*(_QWORD *)(a1 + 40))
    {
      v8 = *(_QWORD **)(a1 + 24);
      v15 = *(_BYTE *)(a1 + 32);
      sub_20AEC01D0(v8, (uint64_t)&v15, 1);
    }
    v9 = *(_QWORD **)(a1 + 24);
    v16 = v7;
    sub_20AEC01D0(v9, (uint64_t)&v16, 1);
    ++*(_QWORD *)(a1 + 40);
  }
  else
  {
    v10 = 0;
    sub_20B512EB0(a1, &v10);
  }
}

void sub_20B0D6D90(uint64_t (**a1)(), __int128 *a2)
{
  uint64_t v3;
  uint64_t (*v4)();
  uint64_t (*v5)();
  uint64_t (*v6)();
  uint64_t (*v7)();
  uint64_t (*v8)();
  uint64_t (*v9)();
  uint64_t (*v10)();
  uint64_t (*v11)();
  uint64_t (*v12)();
  uint64_t (*v13)();
  char v14;
  uint64_t (*v15)();
  uint64_t (*v16)();
  int v17;
  uint64_t v18;
  std::__shared_weak_count *v19;
  unint64_t *p_shared_owners;
  unint64_t v21;
  uint64_t v22;
  int v23;
  __int16 v24;
  unint64_t v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  unint64_t *v28;
  unint64_t v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t *v39;
  unint64_t v40;
  unint64_t *v41;
  uint64_t v42;
  __int128 v43;
  char v44[8];
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  int v50;
  __int16 v51;
  unsigned int v52;
  uint64_t (**v53)();
  uint64_t v54;
  std::__shared_weak_count *v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  __int16 v60;
  __int128 v61;
  __int128 v62;
  int v63;
  uint64_t v64;
  std::ios_base v65;
  uint64_t v66;
  int v67;
  uint64_t (**v68)();
  uint64_t v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  __int16 v75;

  v43 = *a2;
  v44[0] = 0;
  v52 = -1;
  v3 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, __int128 *))off_24C40DC78[v3])(&v68, v44, a2 + 2);
    v52 = v3;
  }
  if (a1[5])
  {
    v4 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20AEC01D0(v4, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v5 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v5 + 1);
  if (v5 != (uint64_t (*)())-1)
  {
    v6 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20AEC01D0(v6, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v7 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v7 + 1);
  if (v7 != (uint64_t (*)())-1)
  {
    v8 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20AEC01D0(v8, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v9 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v9 + 1);
  if (v9 != (uint64_t (*)())-1)
  {
    v10 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20AEC01D0(v10, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v11 = a1[5];
  a1[5] = (uint64_t (*)())((char *)v11 + 1);
  if (v11 != (uint64_t (*)())-1)
  {
    v12 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20AEC01D0(v12, (uint64_t)&v53, 1);
  }
  std::ostream::operator<<();
  v13 = a1[5];
  v14 = *((_BYTE *)a1 + 34);
  a1[5] = (uint64_t (*)())((char *)v13 + 1);
  if (v13 != (uint64_t (*)())-1)
  {
    v15 = a1[3];
    LOBYTE(v53) = *((_BYTE *)a1 + 32);
    sub_20AEC01D0(v15, (uint64_t)&v53, 1);
  }
  v16 = a1[3];
  LOBYTE(v53) = v14;
  sub_20AEC01D0(v16, (uint64_t)&v53, 1);
  a1[5] = (uint64_t (*)())((char *)a1[5] + 1);
  if ((unsigned __int16)v43 == 1)
  {
    if (!v52)
    {
      v53 = &off_24C3FA3D0;
      v18 = v45;
      v19 = v46;
      if (v46)
      {
        p_shared_owners = (unint64_t *)&v46->__shared_owners_;
        do
          v21 = __ldxr(p_shared_owners);
        while (__stxr(v21 + 1, p_shared_owners));
        v22 = v49;
        v23 = v50;
        v24 = v51;
        do
          v25 = __ldxr(p_shared_owners);
        while (__stxr(v25 + 1, p_shared_owners));
      }
      else
      {
        v22 = v49;
        v23 = v50;
        v24 = v51;
      }
      v54 = v18;
      v55 = v19;
      v56 = v47;
      v57 = v48;
      v58 = v22;
      v59 = v23;
      v60 = v24;
      if (v19)
      {
        v34 = (unint64_t *)&v19->__shared_owners_;
        do
          v35 = __ldaxr(v34);
        while (__stlxr(v35 - 1, v34));
        if (!v35)
        {
          ((void (*)(std::__shared_weak_count *))v19->__on_zero_shared)(v19);
          std::__shared_weak_count::__release_weak(v19);
        }
      }
      goto LABEL_40;
    }
    if (v52 == 1)
    {
      v53 = &off_24C3FA3D0;
      sub_20B2E41AC((uint64_t)v44, (uint64_t)&v54);
LABEL_40:
      sub_20B2DFE74(a1, (uint64_t)&v53);
      v36 = v55;
      if (!v55)
        goto LABEL_54;
      v37 = (unint64_t *)&v55->__shared_owners_;
      do
        v38 = __ldaxr(v37);
      while (__stlxr(v38 - 1, v37));
      goto LABEL_53;
    }
LABEL_59:
    sub_20AECFAB8();
  }
  v17 = sub_20B2DF950((unsigned __int16)v43);
  if (v52)
  {
    if (v52 != 1)
      goto LABEL_59;
    v68 = &off_24C3FA3D0;
    sub_20B2E41AC((uint64_t)v44, (uint64_t)&v69);
  }
  else
  {
    v68 = &off_24C3FA3D0;
    v26 = v45;
    v27 = v46;
    if (v46)
    {
      v28 = (unint64_t *)&v46->__shared_owners_;
      do
        v29 = __ldxr(v28);
      while (__stxr(v29 + 1, v28));
      v30 = v49;
      v31 = v50;
      v32 = v51;
      do
        v33 = __ldxr(v28);
      while (__stxr(v33 + 1, v28));
    }
    else
    {
      v30 = v49;
      v31 = v50;
      v32 = v51;
    }
    v69 = v26;
    v70 = v27;
    v71 = v47;
    v72 = v48;
    v73 = v30;
    v74 = v31;
    v75 = v32;
    if (v27)
    {
      v39 = (unint64_t *)&v27->__shared_owners_;
      do
        v40 = __ldaxr(v39);
      while (__stlxr(v40 - 1, v39));
      if (!v40)
      {
        ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
        std::__shared_weak_count::__release_weak(v27);
      }
    }
  }
  v53 = a1;
  std::streambuf::basic_streambuf();
  v54 = MEMORY[0x24BEDB848] + 16;
  v61 = 0u;
  v62 = 0u;
  v63 = 24;
  v64 = MEMORY[0x24BEDB828] + 24;
  v65.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v65, &v54);
  v66 = 0;
  v67 = -1;
  sub_20B0D359C(&v68, (char *)&v64, v17);
  sub_20B0D7370((uint64_t *)&v53);
  v36 = v70;
  if (!v70)
    goto LABEL_54;
  v41 = (unint64_t *)&v70->__shared_owners_;
  do
    v38 = __ldaxr(v41);
  while (__stlxr(v38 - 1, v41));
LABEL_53:
  if (v38)
  {
LABEL_54:
    v42 = v52;
    if (v52 == -1)
      return;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
  std::__shared_weak_count::__release_weak(v36);
  v42 = v52;
  if (v52 != -1)
LABEL_55:
    ((void (*)(uint64_t (***)(), char *))*(&off_24C40DBA8 + v42))(&v53, v44);
}

void sub_20B0D7254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  uint64_t v22;

  sub_20B0D7370(&a22);
  sub_20AF9E0BC(v22 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D7278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = v36;
  MEMORY[0x20BD35758](v38);
  if (a36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20AF9E0BC(v37 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D72BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AF9E0BC(v9 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D72D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v25 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      sub_20B0C5FDC((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_20B0D7370(uint64_t *a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  uint64_t v11;
  _QWORD *v12;
  void **v13;
  uint64_t v14;
  std::string::size_type v16[2];
  void **__dst;
  size_t v18;
  int64_t v19;

  v2 = *((_DWORD *)a1 + 26);
  if ((v2 & 0x10) != 0)
  {
    v5 = a1[12];
    v6 = a1[7];
    if (v5 < v6)
    {
      a1[12] = v6;
      v5 = v6;
    }
    v7 = (const void *)a1[6];
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_31;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v19) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = (const void *)a1[3];
    v3 = a1[5] - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_31:
      sub_20AEC0138();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v18 = v3;
    v19 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v19) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  if (v19 >= 0)
    v10 = HIBYTE(v19);
  else
    v10 = v18;
  v11 = *a1;
  if (*(_QWORD *)(*a1 + 40))
  {
    v12 = *(_QWORD **)(v11 + 24);
    LOBYTE(v16[0]) = *(_BYTE *)(v11 + 32);
    sub_20AEC01D0(v12, (uint64_t)v16, 1);
  }
  std::ostream::operator<<();
  ++*(_QWORD *)(v11 + 40);
  if (SHIBYTE(v19) < 0)
  {
    v13 = __dst;
    if (v10 && !__dst)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v13 = 0;
    }
  }
  else
  {
    v13 = (void **)&__dst;
  }
  v14 = *a1;
  v16[0] = v10;
  v16[1] = (std::string::size_type)v13;
  sub_20B5134A8(v14, v16);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  a1[1] = MEMORY[0x24BEDB848] + 16;
  if (*((char *)a1 + 95) < 0)
    operator delete((void *)a1[9]);
  std::streambuf::~streambuf();
  return a1;
}

void sub_20B0D757C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0D1898((uint64_t)v8, a2);
  sub_20B0D7698(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0D7680(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

char *sub_20B0D7698(uint64_t a1, uint64_t a2, unsigned int a3)
{
  char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  int64_t v11;
  char *result;
  _BOOL4 v13;
  uint64_t v14;
  char *p_src;
  int64_t v16;
  uint64_t v17;
  char *v18;
  int64_t v19;
  _BOOL4 v20;
  char *v21;
  char *v22;
  uint64_t v23;
  int64_t v24;
  _BOOL4 v25;
  uint64_t v26;
  char *v27;
  int64_t v28;
  _BOOL4 v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t i;
  int64_t v33;
  char *v34;
  uint64_t v35;
  BOOL v36;
  _BOOL4 v37;
  unint64_t v38;
  uint64_t __src;
  uint64_t v40;

  v6 = (char *)(a2 + 8);
  LODWORD(__src) = 2;
  v7 = a1 + 24;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_20B42B554((_QWORD *)a1);
  sub_20B42DB24(v7, *(char **)(a1 + 32), v6, (char *)(a2 + 16), 8);
  LOBYTE(__src) = *(_BYTE *)(a2 + 16);
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(_BYTE *)(a2 + 48))
  {
    LOBYTE(__src) = 1;
    sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    v9 = *(unsigned __int8 *)(a2 + 47);
    if ((v9 & 0x80u) != 0)
      v9 = *(_QWORD *)(a2 + 32);
    __src = v9;
    sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
    if (*(char *)(a2 + 47) < 0)
    {
      v10 = *(char **)(a2 + 24);
      v11 = *(_QWORD *)(a2 + 32);
      if (!v10)
      {
        if (v11)
        {
          v13 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
          v10 = 0;
          if (v13)
            goto LABEL_57;
        }
      }
    }
    else
    {
      v10 = (char *)(a2 + 24);
      v11 = *(unsigned __int8 *)(a2 + 47);
    }
    result = sub_20B42DB24(v7, *(char **)(a1 + 32), v10, &v10[v11], v11);
    if (a3 < 4)
      return result;
  }
  else
  {
    LOBYTE(__src) = 0;
    result = sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (a3 < 4)
      return result;
  }
  result = sub_20B0D7CA8(a1, (char *)(a2 + 56));
  if (a3 == 5)
  {
    if (*(_BYTE *)(a2 + 104))
    {
      LOBYTE(__src) = 1;
      sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
      v14 = *(unsigned __int8 *)(a2 + 103);
      if ((v14 & 0x80u) != 0)
        v14 = *(_QWORD *)(a2 + 88);
      __src = v14;
      sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
      if ((*(char *)(a2 + 103) & 0x80000000) == 0)
      {
        p_src = (char *)(a2 + 80);
        v16 = *(unsigned __int8 *)(a2 + 103);
LABEL_27:
        v21 = *(char **)(a1 + 32);
        v22 = &p_src[v16];
        v23 = v7;
        v24 = v16;
        return sub_20B42DB24(v23, v21, p_src, v22, v24);
      }
      p_src = *(char **)(a2 + 80);
      v16 = *(_QWORD *)(a2 + 88);
      if (p_src)
        goto LABEL_27;
      if (!v16)
        goto LABEL_27;
      v20 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
      p_src = 0;
      if (!v20)
        goto LABEL_27;
LABEL_57:
      abort();
    }
LABEL_30:
    LOBYTE(__src) = 0;
    v21 = *(char **)(a1 + 32);
    v22 = (char *)&__src + 1;
    p_src = (char *)&__src;
    v23 = v7;
    v24 = 1;
    return sub_20B42DB24(v23, v21, p_src, v22, v24);
  }
  if (a3 < 6)
    return result;
  if (!*(_BYTE *)(a2 + 104))
  {
    LOBYTE(__src) = 0;
    sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (*(_BYTE *)(a2 + 136))
      goto LABEL_37;
LABEL_29:
    LOBYTE(__src) = 0;
    sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
    if (!*(_BYTE *)(a2 + 168))
      goto LABEL_30;
    goto LABEL_45;
  }
  LOBYTE(__src) = 1;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v17 = *(unsigned __int8 *)(a2 + 103);
  if ((v17 & 0x80u) != 0)
    v17 = *(_QWORD *)(a2 + 88);
  __src = v17;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
  if (*(char *)(a2 + 103) < 0)
  {
    v18 = *(char **)(a2 + 80);
    v19 = *(_QWORD *)(a2 + 88);
    if (!v18)
    {
      if (v19)
      {
        v25 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
        v18 = 0;
        if (v25)
          goto LABEL_57;
      }
    }
  }
  else
  {
    v18 = (char *)(a2 + 80);
    v19 = *(unsigned __int8 *)(a2 + 103);
  }
  sub_20B42DB24(v7, *(char **)(a1 + 32), v18, &v18[v19], v19);
  if (!*(_BYTE *)(a2 + 136))
    goto LABEL_29;
LABEL_37:
  LOBYTE(__src) = 1;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v26 = *(unsigned __int8 *)(a2 + 135);
  if ((v26 & 0x80u) != 0)
    v26 = *(_QWORD *)(a2 + 120);
  __src = v26;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
  if (*(char *)(a2 + 135) < 0)
  {
    v27 = *(char **)(a2 + 112);
    v28 = *(_QWORD *)(a2 + 120);
    if (!v27)
    {
      if (v28)
      {
        v29 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
        v27 = 0;
        if (v29)
          goto LABEL_57;
      }
    }
  }
  else
  {
    v27 = (char *)(a2 + 112);
    v28 = *(unsigned __int8 *)(a2 + 135);
  }
  sub_20B42DB24(v7, *(char **)(a1 + 32), v27, &v27[v28], v28);
  if (!*(_BYTE *)(a2 + 168))
    goto LABEL_30;
LABEL_45:
  LOBYTE(__src) = 1;
  sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 1, 1);
  v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
  result = sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&v38, (char *)&__src, 8);
  v30 = *(_QWORD *)(a2 + 144);
  v31 = *(_QWORD *)(a2 + 152) - v30;
  if (v31)
  {
    for (i = 24 * (v31 / 24); i; i -= 24)
    {
      v35 = *(unsigned __int8 *)(v30 + 23);
      if ((v35 & 0x80u) != 0)
        v35 = *(_QWORD *)(v30 + 8);
      __src = v35;
      sub_20B42DB24(v7, *(char **)(a1 + 32), (char *)&__src, (char *)&v40, 8);
      if (*(char *)(v30 + 23) < 0)
      {
        v34 = *(char **)v30;
        v33 = *(_QWORD *)(v30 + 8);
        if (*(_QWORD *)v30)
          v36 = 1;
        else
          v36 = v33 == 0;
        if (!v36)
        {
          v37 = sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)&unk_20B5ACEBA, 0, (void (*)(void **))sub_20B532360);
          v34 = 0;
          if (v37)
            goto LABEL_57;
        }
      }
      else
      {
        v33 = *(unsigned __int8 *)(v30 + 23);
        v34 = (char *)v30;
      }
      result = sub_20B42DB24(v7, *(char **)(a1 + 32), v34, &v34[v33], v33);
      v30 += 24;
    }
  }
  return result;
}

char *sub_20B0D7CA8(uint64_t a1, char *a2)
{
  uint64_t v3;
  char *result;
  uint64_t v6;
  char v7;
  char __src;
  int v9;
  char v10[3];
  char v11;
  uint64_t v12;

  v3 = a1 + 24;
  if (a2[16])
  {
    __src = 1;
    sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), &__src, (char *)&v9, 1);
    v9 = 2;
    sub_20B42DB24(v3, *(char **)(a1 + 32), (char *)&v9, v10, 4);
    sub_20B42B554((_QWORD *)a1);
    sub_20B42DB24(v3, *(char **)(a1 + 32), a2, a2 + 8, 8);
    v11 = a2[8];
    result = sub_20B42DB24(v3, *(char **)(a1 + 32), &v11, (char *)&v12, 1);
    v6 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v6 + 10) = *(_QWORD *)(a1 + 32) - v6 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  else
  {
    v7 = 0;
    return sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), &v7, &__src, 1);
  }
  return result;
}

void sub_20B0D7DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  _BYTE v31[28];
  char v32[8];
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  unsigned int v40;
  uint64_t (**__src)();
  uint64_t v42;
  std::__shared_weak_count *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  int v47;
  __int16 v48;
  __int128 v49;
  __int128 v50;
  int v51;
  uint64_t v52;
  std::ios_base v53;
  uint64_t v54;
  int v55;
  uint64_t (**v56)();
  uint64_t v57;
  std::__shared_weak_count *v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  __int16 v63;

  *(_OWORD *)v31 = *(_OWORD *)a2;
  *(_OWORD *)&v31[12] = *(_OWORD *)(a2 + 12);
  v32[0] = 0;
  v40 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24C40DC78[v3])(&v56, v32, a2 + 32);
    v40 = v3;
  }
  LOWORD(__src) = *(_WORD *)v31;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 2, 2);
  LODWORD(__src) = 2;
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&__src + 4, 4);
  sub_20B42B554((_QWORD *)a1);
  __src = *(uint64_t (***)())&v31[8];
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v42, 8);
  sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), &v31[16], &v31[24], 8);
  v4 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
  *(_QWORD *)(v4 + 10) = *(_QWORD *)(a1 + 32) - v4 - 18;
  *(_QWORD *)(a1 + 56) -= 8;
  if (*(unsigned __int16 *)v31 == 1)
  {
    if (!v40)
    {
      __src = &off_24C3FA3D0;
      v6 = v33;
      v7 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = v37;
        v11 = v38;
        v12 = v39;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      else
      {
        v10 = v37;
        v11 = v38;
        v12 = v39;
      }
      v42 = v6;
      v43 = v7;
      v44 = v35;
      v45 = v36;
      v46 = v10;
      v47 = v11;
      v48 = v12;
      if (v7)
      {
        v22 = (unint64_t *)&v7->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      goto LABEL_28;
    }
    if (v40 == 1)
    {
      __src = &off_24C3FA3D0;
      sub_20B2E41AC((uint64_t)v32, (uint64_t)&v42);
LABEL_28:
      sub_20B2DFE74((const void *)a1, (uint64_t)&__src);
      v24 = v43;
      if (!v43)
        goto LABEL_42;
      v25 = (unint64_t *)&v43->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      goto LABEL_41;
    }
LABEL_47:
    sub_20AECFAB8();
  }
  v5 = sub_20B2DF950(*(unsigned __int16 *)v31);
  if (v40)
  {
    if (v40 != 1)
      goto LABEL_47;
    v56 = &off_24C3FA3D0;
    sub_20B2E41AC((uint64_t)v32, (uint64_t)&v57);
  }
  else
  {
    v56 = &off_24C3FA3D0;
    v14 = v33;
    v15 = v34;
    if (v34)
    {
      v16 = (unint64_t *)&v34->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = v37;
      v19 = v38;
      v20 = v39;
      do
        v21 = __ldxr(v16);
      while (__stxr(v21 + 1, v16));
    }
    else
    {
      v18 = v37;
      v19 = v38;
      v20 = v39;
    }
    v57 = v14;
    v58 = v15;
    v59 = v35;
    v60 = v36;
    v61 = v18;
    v62 = v19;
    v63 = v20;
    if (v15)
    {
      v27 = (unint64_t *)&v15->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  __src = (uint64_t (**)())a1;
  std::streambuf::basic_streambuf();
  v42 = MEMORY[0x24BEDB848] + 16;
  v49 = 0u;
  v50 = 0u;
  v51 = 24;
  v52 = MEMORY[0x24BEDB828] + 24;
  v53.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v53, &v42);
  v54 = 0;
  v55 = -1;
  sub_20B0D359C(&v56, (char *)&v52, v5);
  sub_20B0D8314((uint64_t)&__src);
  v24 = v58;
  if (!v58)
    goto LABEL_42;
  v29 = (unint64_t *)&v58->__shared_owners_;
  do
    v26 = __ldaxr(v29);
  while (__stlxr(v26 - 1, v29));
LABEL_41:
  if (v26)
  {
LABEL_42:
    v30 = v40;
    if (v40 == -1)
      return;
    goto LABEL_43;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  v30 = v40;
  if (v40 != -1)
LABEL_43:
    ((void (*)(uint64_t (***)(), char *))*(&off_24C40DBA8 + v30))(&__src, v32);
}

void sub_20B0D81F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  uint64_t v22;

  sub_20B0D8314((uint64_t)&a22);
  sub_20AF9E0BC(v22 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D821C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *__p,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;

  v38 = v36;
  MEMORY[0x20BD35758](v38);
  if (a36 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20AF9E0BC(v37 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D8260(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AF9E0BC(v9 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D827C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  std::__shared_weak_count *v25;
  unint64_t *p_shared_owners;
  unint64_t v27;

  v25 = a24;
  if (a24)
  {
    p_shared_owners = (unint64_t *)&a24->__shared_owners_;
    do
      v27 = __ldaxr(p_shared_owners);
    while (__stlxr(v27 - 1, p_shared_owners));
    if (!v27)
    {
      ((void (*)(std::__shared_weak_count *))v25->__on_zero_shared)(v25);
      std::__shared_weak_count::__release_weak(v25);
      sub_20B0C5FDC((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0D8314(uint64_t a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  char *v11;
  int64_t v12;
  int64_t v14;
  char *__dst;
  size_t v16;
  int64_t v17;

  v2 = *(_DWORD *)(a1 + 104);
  if ((v2 & 0x10) != 0)
  {
    v5 = *(_QWORD *)(a1 + 96);
    v6 = *(_QWORD *)(a1 + 56);
    if (v5 < v6)
    {
      *(_QWORD *)(a1 + 96) = v6;
      v5 = v6;
    }
    v7 = *(const void **)(a1 + 48);
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v17) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = *(const void **)(a1 + 24);
    v3 = *(_QWORD *)(a1 + 40) - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_20AEC0138();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v16 = v3;
    v17 = v9 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_13;
  }
  HIBYTE(v17) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v17);
  if (v17 < 0)
    v10 = v16;
  v14 = v10;
  sub_20B42DB24(*(_QWORD *)a1 + 24, *(char **)(*(_QWORD *)a1 + 32), (char *)&v14, (char *)&__dst, 8);
  if (SHIBYTE(v17) < 0)
  {
    v12 = v14;
    v11 = __dst;
    if (!__dst && v14)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v11 = 0;
    }
  }
  else
  {
    v11 = (char *)&__dst;
    v12 = v14;
  }
  sub_20B42DB24(*(_QWORD *)a1 + 24, *(char **)(*(_QWORD *)a1 + 32), v11, &v11[v12], v12);
  if (SHIBYTE(v17) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  *(_QWORD *)(a1 + 8) = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 95) < 0)
    operator delete(*(void **)(a1 + 72));
  std::streambuf::~streambuf();
  return a1;
}

void sub_20B0D8514(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  void *v9;
  char v10;
  char v11;
  void *v12;
  char v13;
  char v14;
  void *v15;
  char v16;
  char v17;
  void *__p;
  void **v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x24BDAC8D0];
  sub_20B0D1898((uint64_t)v8, a2);
  sub_20B0D8630(a1, (uint64_t)v8, a3);
  if (v20)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v19;
      v7 = __p;
      if (v19 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v19 = v5;
      operator delete(v7);
    }
  }
  if (v17 && v16 < 0)
    operator delete(v15);
  if (v14 && v13 < 0)
    operator delete(v12);
  if (v11)
  {
    if (v10 < 0)
      operator delete(v9);
  }
}

void sub_20B0D8618(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_list va;

  va_start(va, a2);
  sub_20B0CD92C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D8630(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int64x2_t v9;
  int8x16_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  int v17;
  void (*v18)(uint64_t, std::string *);
  void (*v19)(uint64_t, std::string *);
  std::string v20;
  std::string __p;
  char v22;

  __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
  sub_20B0D8B9C((int *)&__p, (_BYTE *)a1, a2 + 8);
  if (*(_BYTE *)(a2 + 48))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
    if (a3 < 4)
      return;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 < 4)
      return;
  }
  if (*(_BYTE *)(a2 + 72))
  {
    __p.__r_.__value_.__s.__data_[0] = 1;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    __p.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 8);
    sub_20B0D8B9C((int *)&__p, (_BYTE *)a1, a2 + 56);
    if (a3 == 5)
      goto LABEL_7;
  }
  else
  {
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    if (a3 == 5)
    {
LABEL_7:
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        return;
      }
      goto LABEL_45;
    }
  }
  if (a3 >= 6)
  {
    if ((*(_BYTE *)(a1 + 12) & 4) == 0)
    {
      if (*(_BYTE *)(a2 + 104))
      {
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        if (*(_BYTE *)(a2 + 136))
          goto LABEL_14;
      }
      else
      {
        __p.__r_.__value_.__s.__data_[0] = 0;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        if (*(_BYTE *)(a2 + 136))
        {
LABEL_14:
          __p.__r_.__value_.__s.__data_[0] = 1;
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
          if (*(_BYTE *)(a2 + 168))
            goto LABEL_15;
          goto LABEL_45;
        }
      }
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      if (*(_BYTE *)(a2 + 168))
      {
LABEL_15:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        __p.__r_.__value_.__r.__words[0] = 0xAAAAAAAAAAAAAAABLL
                                         * ((uint64_t)(*(_QWORD *)(a2 + 152) - *(_QWORD *)(a2 + 144)) >> 3);
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 120))(a1, &__p);
        v6 = *(_QWORD *)(a2 + 144);
        v7 = *(_QWORD *)(a2 + 152) - v6;
        if (v7)
        {
          v8 = 24 * (v7 / 24);
          do
          {
            (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, v6);
            v6 += 24;
            v8 -= 24;
          }
          while (v8);
        }
        return;
      }
LABEL_45:
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      return;
    }
    if (*(_BYTE *)(a2 + 104))
    {
      __p.__r_.__value_.__s.__data_[0] = 1;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      if (*(_BYTE *)(a2 + 136))
        goto LABEL_21;
    }
    else
    {
      __p.__r_.__value_.__s.__data_[0] = 0;
      (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
      (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20B5E6729);
      if (*(_BYTE *)(a2 + 136))
      {
LABEL_21:
        __p.__r_.__value_.__s.__data_[0] = 1;
        (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        __p.__r_.__value_.__s.__data_[0] = 0;
        v22 = 0;
        if (*(_BYTE *)(a2 + 168))
        {
LABEL_22:
          v11 = *(_QWORD *)(a2 + 144);
          v12 = *(_QWORD *)(a2 + 152);
          if (v11 == v12)
          {
LABEL_39:
            sub_20AECFBC8(v11, v12, ";", 1uLL, &v20, v9, v10);
          }
          else
          {
            v13 = *(uint64_t **)(a2 + 144);
            while (1)
            {
              v14 = *((unsigned __int8 *)v13 + 23);
              if ((v14 & 0x80u) == 0)
                v15 = v13;
              else
                v15 = (uint64_t *)*v13;
              if ((v14 & 0x80u) != 0)
                v14 = v13[1];
              if (v14)
              {
                v16 = 0;
                while (1)
                {
                  v17 = *((unsigned __int8 *)v15 + v16);
                  if (v17 == 59 || v17 == 92)
                    break;
                  if (v14 == ++v16)
                    goto LABEL_24;
                }
                if (v14 != v16 && v16 != -1)
                  break;
              }
LABEL_24:
              v13 += 3;
              if (v13 == (uint64_t *)v12)
                goto LABEL_39;
            }
            sub_20B0D2498(v11, v12, *(_QWORD *)(a2 + 152), ";", 1uLL, &v20);
          }
          __p = v20;
          v22 = 1;
          v18 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
          v20.__r_.__value_.__s.__data_[0] = 1;
          v18(a1, &v20);
          (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 144))(a1, &__p);
          if (v22 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__p.__r_.__value_.__l.__data_);
          return;
        }
LABEL_48:
        v19 = *(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80);
        v20.__r_.__value_.__s.__data_[0] = 0;
        v19(a1, &v20);
        (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20B5E6729);
        return;
      }
    }
    __p.__r_.__value_.__s.__data_[0] = 0;
    (*(void (**)(uint64_t, std::string *))(*(_QWORD *)a1 + 80))(a1, &__p);
    (*(void (**)(uint64_t, void *))(*(_QWORD *)a1 + 288))(a1, &unk_20B5E6729);
    __p.__r_.__value_.__s.__data_[0] = 0;
    v22 = 0;
    if (*(_BYTE *)(a2 + 168))
      goto LABEL_22;
    goto LABEL_48;
  }
}

void sub_20B0D8B78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a19)
  {
    if (a18 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0D8B9C(int *a1, _BYTE *a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;

  LODWORD(v7) = 2;
  (*(void (**)(_BYTE *, unsigned __int8 **))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 < 1)
  {
    v6 = *(_QWORD *)a2;
LABEL_6:
    (*(void (**)(_BYTE *, uint64_t))(v6 + 72))(a2, a3);
    v7 = (unsigned __int8 *)(a3 + 8);
    sub_20B0D8CB0(a2, &v7);
    return;
  }
  if (*a1 == 2)
  {
    LODWORD(v7) = 2;
    (*(void (**)(_BYTE *, unsigned __int8 **))(*(_QWORD *)a2 + 104))(a2, &v7);
    v6 = *(_QWORD *)a2;
    if (*a1 < 1)
      goto LABEL_6;
  }
  else
  {
    v6 = *(_QWORD *)a2;
  }
  (*(void (**)(_BYTE *))(v6 + 16))(a2);
  (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
  v7 = (unsigned __int8 *)(a3 + 8);
  sub_20B0D8CB0(a2, &v7);
  (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
}

void sub_20B0D8CB0(_BYTE *a1, unsigned __int8 **a2)
{
  unsigned __int8 *v3;
  void *__p[2];
  char v5;
  _BYTE v6[24];
  int v7;
  char v8;
  char *v9;

  if ((a1[12] & 2) != 0)
  {
    v3 = *a2;
    v7 = 0;
    sub_20B0D1CFC((uint64_t)&v9, (uint64_t)v6, v3);
    if (v7 == -1)
      sub_20AECFAB8();
    v9 = &v8;
    ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v7])(__p, &v9, v6);
    if (v7 != -1)
      ((void (*)(char **, _BYTE *))off_24C40DC48[v7])(&v9, v6);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v5 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v6[0] = **a2;
    (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 80))(a1, v6);
  }
}

void sub_20B0D8DA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0D8DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D8DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D8DE8(int *a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  int v11;
  __int16 v12;
  unint64_t v13;
  uint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  uint64_t v18;
  int v19;
  __int16 v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  std::__shared_weak_count *v24;
  unint64_t *v25;
  unint64_t v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  _BYTE v31[28];
  char v32[8];
  uint64_t v33;
  std::__shared_weak_count *v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  __int16 v39;
  unsigned int v40;
  char v41;
  char *v42;
  uint64_t (**v43)();
  uint64_t v44;
  std::__shared_weak_count *v45;
  uint64_t v46;
  int v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  __int128 v51;
  __int128 v52;
  int v53;
  uint64_t v54;
  std::ios_base v55;
  uint64_t v56;
  int v57;
  uint64_t (**v58)();
  uint64_t v59;
  std::__shared_weak_count *v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  __int16 v65;

  *(_OWORD *)v31 = *(_OWORD *)a2;
  *(_OWORD *)&v31[12] = *(_OWORD *)(a2 + 12);
  v32[0] = 0;
  v40 = -1;
  v3 = *(unsigned int *)(a2 + 96);
  if ((_DWORD)v3 != -1)
  {
    ((void (*)(uint64_t (***)(), char *, uint64_t))off_24C40DC78[v3])(&v58, v32, a2 + 32);
    v40 = v3;
  }
  if ((a1[3] & 2) != 0)
  {
    LODWORD(v46) = 0;
    sub_20B0D3044((uint64_t)&v42, (uint64_t)&v43, (unsigned __int16 *)v31);
    if ((_DWORD)v46 == -1)
      sub_20AECFAB8();
    v42 = &v41;
    ((void (*)(uint64_t (***__return_ptr)(), char **, uint64_t (***)()))off_24C40DC60[v46])(&v58, &v42, &v43);
    if ((_DWORD)v46 != -1)
      ((void (*)(char **, uint64_t (***)()))off_24C40DC48[v46])(&v42, &v43);
    (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 144))(a1, &v58);
    if (SHIBYTE(v60) < 0)
      operator delete(v58);
  }
  else
  {
    LOWORD(v43) = *(_WORD *)v31;
    (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 96))(a1, &v43);
  }
  v4 = a1[2];
  LODWORD(v43) = 2;
  (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 104))(a1, &v43);
  if (v4 < 1)
  {
    sub_20B0D9464(a1, (uint64_t *)&v31[8]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[16]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[20]);
  }
  else
  {
    if (v4 == 2)
    {
      LODWORD(v43) = 2;
      (*(void (**)(int *, uint64_t (***)()))(*(_QWORD *)a1 + 104))(a1, &v43);
    }
    (*(void (**)(int *))(*(_QWORD *)a1 + 16))(a1);
    sub_20B0D9464(a1, (uint64_t *)&v31[8]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[16]);
    (*(void (**)(int *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, &v31[20]);
    (*(void (**)(int *))(*(_QWORD *)a1 + 24))(a1);
  }
  if (*(unsigned __int16 *)v31 == 1)
  {
    if (!v40)
    {
      v43 = &off_24C3FA3D0;
      v6 = v33;
      v7 = v34;
      if (v34)
      {
        p_shared_owners = (unint64_t *)&v34->__shared_owners_;
        do
          v9 = __ldxr(p_shared_owners);
        while (__stxr(v9 + 1, p_shared_owners));
        v10 = v37;
        v11 = v38;
        v12 = v39;
        do
          v13 = __ldxr(p_shared_owners);
        while (__stxr(v13 + 1, p_shared_owners));
      }
      else
      {
        v10 = v37;
        v11 = v38;
        v12 = v39;
      }
      v44 = v6;
      v45 = v7;
      v46 = v35;
      v47 = v36;
      v48 = v10;
      v49 = v11;
      v50 = v12;
      if (v7)
      {
        v22 = (unint64_t *)&v7->__shared_owners_;
        do
          v23 = __ldaxr(v22);
        while (__stlxr(v23 - 1, v22));
        if (!v23)
        {
          ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
          std::__shared_weak_count::__release_weak(v7);
        }
      }
      goto LABEL_40;
    }
    if (v40 == 1)
    {
      v43 = &off_24C3FA3D0;
      sub_20B2E41AC((uint64_t)v32, (uint64_t)&v44);
LABEL_40:
      sub_20B2DFE74(a1, (uint64_t)&v43);
      v24 = v45;
      if (!v45)
        goto LABEL_54;
      v25 = (unint64_t *)&v45->__shared_owners_;
      do
        v26 = __ldaxr(v25);
      while (__stlxr(v26 - 1, v25));
      goto LABEL_53;
    }
LABEL_60:
    sub_20AECFAB8();
  }
  v5 = sub_20B2DF950(*(unsigned __int16 *)v31);
  if (v40)
  {
    if (v40 != 1)
      goto LABEL_60;
    v58 = &off_24C3FA3D0;
    sub_20B2E41AC((uint64_t)v32, (uint64_t)&v59);
  }
  else
  {
    v58 = &off_24C3FA3D0;
    v14 = v33;
    v15 = v34;
    if (v34)
    {
      v16 = (unint64_t *)&v34->__shared_owners_;
      do
        v17 = __ldxr(v16);
      while (__stxr(v17 + 1, v16));
      v18 = v37;
      v19 = v38;
      v20 = v39;
      do
        v21 = __ldxr(v16);
      while (__stxr(v21 + 1, v16));
    }
    else
    {
      v18 = v37;
      v19 = v38;
      v20 = v39;
    }
    v59 = v14;
    v60 = v15;
    v61 = v35;
    v62 = v36;
    v63 = v18;
    v64 = v19;
    v65 = v20;
    if (v15)
    {
      v27 = (unint64_t *)&v15->__shared_owners_;
      do
        v28 = __ldaxr(v27);
      while (__stlxr(v28 - 1, v27));
      if (!v28)
      {
        ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
        std::__shared_weak_count::__release_weak(v15);
      }
    }
  }
  v43 = (uint64_t (**)())a1;
  std::streambuf::basic_streambuf();
  v44 = MEMORY[0x24BEDB848] + 16;
  v51 = 0u;
  v52 = 0u;
  v53 = 24;
  v54 = MEMORY[0x24BEDB828] + 24;
  v55.__vftable = (std::ios_base_vtbl *)(MEMORY[0x24BEDB828] + 64);
  std::ios_base::init(&v55, &v44);
  v56 = 0;
  v57 = -1;
  sub_20B0D359C(&v58, (char *)&v54, v5);
  sub_20B0D9598(&v43);
  v24 = v60;
  if (!v60)
    goto LABEL_54;
  v29 = (unint64_t *)&v60->__shared_owners_;
  do
    v26 = __ldaxr(v29);
  while (__stlxr(v26 - 1, v29));
LABEL_53:
  if (v26)
  {
LABEL_54:
    v30 = v40;
    if (v40 == -1)
      return;
    goto LABEL_55;
  }
  ((void (*)(std::__shared_weak_count *))v24->__on_zero_shared)(v24);
  std::__shared_weak_count::__release_weak(v24);
  v30 = v40;
  if (v40 != -1)
LABEL_55:
    ((void (*)(uint64_t (***)(), char *))*(&off_24C40DBA8 + v30))(&v43, v32);
}

void sub_20B0D9304(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24)
{
  uint64_t v24;

  sub_20B0D9598(&a24);
  sub_20AF9E0BC(v24 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D9328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;

  v40 = v38;
  MEMORY[0x20BD35758](v40);
  if (a38 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  sub_20AF9E0BC(v39 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D936C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v9;

  sub_20AF9E0BC(v9 - 120);
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D9388(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  std::__shared_weak_count *v27;
  unint64_t *p_shared_owners;
  unint64_t v29;

  v27 = a26;
  if (a26)
  {
    p_shared_owners = (unint64_t *)&a26->__shared_owners_;
    do
      v29 = __ldaxr(p_shared_owners);
    while (__stlxr(v29 - 1, p_shared_owners));
    if (!v29)
    {
      ((void (*)(std::__shared_weak_count *))v27->__on_zero_shared)(v27);
      std::__shared_weak_count::__release_weak(v27);
      sub_20B0C5FDC((uint64_t)&a9);
      _Unwind_Resume(a1);
    }
  }
  sub_20B0C5FDC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0D9464(_BYTE *a1, uint64_t *a2)
{
  void *__p[2];
  char v4;
  _QWORD v5[3];
  int v6;
  char v7;
  char *v8;

  if ((a1[12] & 2) != 0)
  {
    v6 = 0;
    sub_20B0D32F8((uint64_t)&v8, (uint64_t)v5, a2);
    if (v6 == -1)
      sub_20AECFAB8();
    v8 = &v7;
    ((void (*)(void **__return_ptr, char **, _QWORD *))off_24C40DC60[v6])(__p, &v8, v5);
    if (v6 != -1)
      ((void (*)(char **, _QWORD *))off_24C40DC48[v6])(&v8, v5);
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    if (v4 < 0)
      operator delete(__p[0]);
  }
  else
  {
    v5[0] = *a2;
    (*(void (**)(_BYTE *, _QWORD *))(*(_QWORD *)a1 + 120))(a1, v5);
  }
}

void sub_20B0D9554(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0D9570(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0D9584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0D9598(_QWORD *a1)
{
  int v2;
  size_t v3;
  void **p_dst;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  void **v11;
  size_t v12;
  uint64_t v13;
  _QWORD v15[2];
  size_t v16;
  void **__dst;
  size_t v18;
  int64_t v19;

  v2 = *((_DWORD *)a1 + 26);
  if ((v2 & 0x10) != 0)
  {
    v5 = a1[12];
    v6 = a1[7];
    if (v5 < v6)
    {
      a1[12] = v6;
      v5 = v6;
    }
    v7 = (const void *)a1[6];
    v3 = v5 - (_QWORD)v7;
    if (v5 - (unint64_t)v7 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_28;
  }
  else
  {
    if ((v2 & 8) == 0)
    {
      v3 = 0;
      HIBYTE(v19) = 0;
      p_dst = (void **)&__dst;
      goto LABEL_14;
    }
    v7 = (const void *)a1[3];
    v3 = a1[5] - (_QWORD)v7;
    if (v3 >= 0x7FFFFFFFFFFFFFF8)
LABEL_28:
      sub_20AEC0138();
  }
  if (v3 >= 0x17)
  {
    v8 = (v3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v3 | 7) != 0x17)
      v8 = v3 | 7;
    v9 = v8 + 1;
    p_dst = (void **)operator new(v8 + 1);
    v18 = v3;
    v19 = v9 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_13;
  }
  HIBYTE(v19) = v3;
  p_dst = (void **)&__dst;
  if (v3)
LABEL_13:
    memmove(p_dst, v7, v3);
LABEL_14:
  *((_BYTE *)p_dst + v3) = 0;
  v10 = HIBYTE(v19);
  if (v19 < 0)
    v10 = v18;
  v16 = v10;
  (*(void (**)(_QWORD, size_t *))(*(_QWORD *)*a1 + 120))(*a1, &v16);
  if (SHIBYTE(v19) < 0)
  {
    v12 = v16;
    v11 = __dst;
    if (!__dst && v16)
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      v11 = 0;
    }
  }
  else
  {
    v11 = (void **)&__dst;
    v12 = v16;
  }
  v13 = *a1;
  v15[0] = v12;
  v15[1] = v11;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v13 + 272))(v13, v15);
  if (SHIBYTE(v19) < 0)
    operator delete(__dst);
  std::ostream::~ostream();
  a1[1] = MEMORY[0x24BEDB848] + 16;
  if (*((char *)a1 + 95) < 0)
    operator delete((void *)a1[9]);
  std::streambuf::~streambuf();
  return a1;
}

uint64_t sub_20B0D978C(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_20B50AC94(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20B4552C4(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 6)
    v6 = 6;
  else
    v6 = v12;
  if (v6 < 3)
    sub_20B0D9888((uint64_t)&v11, a1, a2, v6);
  else
    sub_20B0D9A78(a1, a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20B0D9888(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_20B0DAF88(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_20AEC60F4(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_20B0DAD74(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_20B0D9A34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0D9A78(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *exception;
  __int128 v19;
  uint64_t v20;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50AC94(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v19 = 0;
  sub_20B4552C4(v8, &v19);
  if (DWORD1(v19))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v19 >= 2)
    v9 = 2;
  else
    v9 = v19;
  sub_20B0D9F58(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  v12 = a2 + 24;
  LODWORD(v10) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "name";
  *(_QWORD *)(a1 + 96) = 4;
  if ((_DWORD)v10)
  {
    sub_20B0DA2A0((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DA2A0((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  v13 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "custom_timestamp";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v13)
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_20B50AF4C((uint64_t *)a1))
      goto LABEL_15;
LABEL_17:
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 72))
      *(_BYTE *)(a2 + 72) = 0;
    goto LABEL_19;
  }
  if (!*(_BYTE *)sub_20B50AF4C((uint64_t *)a1))
    goto LABEL_17;
LABEL_15:
  *(_QWORD *)&v19 = 0;
  BYTE8(v19) = 0;
  v20 = *(_QWORD *)(a1 + 8);
  sub_20B0DA3C0((int *)&v20, a1, (uint64_t)&v19);
  *(_OWORD *)(a2 + 56) = v19;
  *(_BYTE *)(a2 + 72) = 1;
LABEL_19:
  if (a3 == 5)
  {
    v14 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v14)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DA2A0((uint64_t *)a1, a2 + 80);
  }
  else if (a3 >= 6)
  {
    v15 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v15)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DA2A0((uint64_t *)a1, a2 + 80);
    v16 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "instance_id";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v16)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DA2A0((uint64_t *)a1, a2 + 112);
    v17 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "references";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v17)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DAADC((uint64_t *)a1, a2 + 144);
  }
}

void sub_20B0D9D38(char *a1@<X0>, uint64_t a2@<X8>)
{
  BOOL v3;
  size_t v4;
  char *v5;
  _BYTE *v7;
  BOOL v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;
  __int128 v14;
  unint64_t v15;
  __int128 v16;
  char *v17;
  int v18;
  std::string v19;

  v3 = a1[23] < 0;
  if (a1[23] >= 0)
    v4 = a1[23];
  else
    v4 = *((_QWORD *)a1 + 1);
  if (a1[23] >= 0)
    v5 = a1;
  else
    v5 = *(char **)a1;
  if (!v4 || ((v7 = memchr(v5, 92, v4)) != 0 ? (v8 = v7 - v5 == -1) : (v8 = 1), v8))
  {
    sub_20AF4E53C(v5, v4, ";", 1, 1, a2);
    return;
  }
  v9 = 0;
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  memset(&v19, 0, sizeof(v19));
  do
  {
    v11 = *(char **)a1;
    if (!v3)
      v11 = a1;
    v12 = v11[v9];
    if (v12 == 59)
    {
      v13 = *(_QWORD *)(a2 + 8);
      if (v13 >= *(_QWORD *)(a2 + 16))
      {
        *(_QWORD *)(a2 + 8) = sub_20AEC63D0((char **)a2, (uint64_t)&v19);
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
          goto LABEL_27;
      }
      else
      {
        if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_20AEC60F4(*(_BYTE **)(a2 + 8), v19.__r_.__value_.__l.__data_, v19.__r_.__value_.__l.__size_);
        }
        else
        {
          v14 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
          *(_QWORD *)(v13 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
          *(_OWORD *)v13 = v14;
        }
        *(_QWORD *)(a2 + 8) = v13 + 24;
        *(_QWORD *)(a2 + 8) = v13 + 24;
        if ((SHIBYTE(v19.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
        {
LABEL_27:
          *((_BYTE *)&v19.__r_.__value_.__s + 23) = 0;
          v19.__r_.__value_.__s.__data_[0] = 0;
          goto LABEL_17;
        }
      }
      v19.__r_.__value_.__l.__size_ = 0;
      *v19.__r_.__value_.__l.__data_ = 0;
    }
    else
    {
      if (v12 == 92)
        ++v9;
      std::string::push_back(&v19, v11[v9]);
    }
LABEL_17:
    ++v9;
    v3 = a1[23] < 0;
    v10 = a1[23];
    if ((v10 & 0x80u) != 0)
      v10 = *((_QWORD *)a1 + 1);
  }
  while (v9 < v10);
  v15 = *(_QWORD *)(a2 + 8);
  if (v15 >= *(_QWORD *)(a2 + 16))
  {
    v17 = sub_20AEC81D4((void **)a2, (uint64_t)&v19);
    v18 = SHIBYTE(v19.__r_.__value_.__r.__words[2]);
    *(_QWORD *)(a2 + 8) = v17;
    if (v18 < 0)
      operator delete(v19.__r_.__value_.__l.__data_);
  }
  else
  {
    v16 = *(_OWORD *)&v19.__r_.__value_.__l.__data_;
    *(_QWORD *)(v15 + 16) = *((_QWORD *)&v19.__r_.__value_.__l + 2);
    *(_OWORD *)v15 = v16;
    *(_QWORD *)(a2 + 8) = v15 + 24;
  }
}

void sub_20B0D9F24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  void **v15;

  if (a15 < 0)
    operator delete(__p);
  sub_20AEC2E90(v15);
  _Unwind_Resume(a1);
}

void sub_20B0D9F58(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_20B45540C(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_20B0DA0B0((uint64_t *)a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_20B45540C(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_20B0DA0B0((uint64_t *)a1, &v13);
  }
}

void sub_20B0DA0B0(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B430024((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B0DA214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0DA2A0(uint64_t *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)sub_20B50AF4C(a1))
  {
    v4 = (void **)sub_20B50AF4C(a1);
    ++a1[14];
    v9 = 0uLL;
    v8 = 0;
    sub_20B4557C4(v4, (uint64_t)&v8);
    v5 = v8;
    v10[0] = v9;
    *(_QWORD *)((char *)v10 + 7) = *(_QWORD *)((char *)&v9 + 7);
    v6 = HIBYTE(v9);
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
    v7 = v10[0];
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v10 + 7);
    *(_BYTE *)(a2 + 23) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_20B0DA3A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0DA3C0(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  __int128 *v15;
  unint64_t v16;

  sub_20B50AC94(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_20B50AF4C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v16 = 0;
  sub_20B4552C4(v7, &v16);
  v8 = v16;
  if (HIDWORD(v16))
    goto LABEL_14;
  if (*a1 < 1)
    goto LABEL_13;
  if (v16 >= 2 && *a1 == 2)
  {
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "min_version";
    *(_QWORD *)(a2 + 96) = 11;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_20B50AF4C((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v16 = 0;
    sub_20B4552C4(v10, &v16);
    v11 = v16;
    if (!HIDWORD(v16))
    {
      if (v16 >= 3)
      {
        v15 = sub_20B0DA530();
        sub_20B520518((std::string *)v15, v11, 2u);
      }
      goto LABEL_11;
    }
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  if (v8 >= 2)
    v8 = 2;
LABEL_13:
  sub_20B0DA72C(a2, a3, v8);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 48) = v12 - 8;
  *(_QWORD *)(a2 + 72) = v13 - 8;
}

__int128 *sub_20B0DA530()
{
  unsigned __int8 v0;
  char *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635778);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635778))
    return &xmmword_254635760;
  v2 = (char *)sub_20B0DA60C();
  if (v2[23] < 0)
  {
    sub_20AEC60F4(&xmmword_254635760, *(void **)v2, *((_QWORD *)v2 + 1));
  }
  else
  {
    v3 = *(_OWORD *)v2;
    qword_254635770 = *((_QWORD *)v2 + 2);
    xmmword_254635760 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635760, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635778);
  return &xmmword_254635760;
}

void sub_20B0DA5F4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635778);
  _Unwind_Resume(a1);
}

void *sub_20B0DA60C()
{
  unsigned __int8 v0;
  unsigned __int8 v1;

  v0 = atomic_load((unsigned __int8 *)&qword_254635798);
  if ((v0 & 1) == 0 && __cxa_guard_acquire(&qword_254635798))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::timeio::TimestampSample]", qword_254635780);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635780, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635798);
  }
  v1 = atomic_load((unsigned __int8 *)&qword_2546357B8);
  if ((v1 & 1) != 0 || !__cxa_guard_acquire(&qword_2546357B8))
    return &unk_2546357A0;
  sub_20B531658((uint64_t)qword_254635780, (uint64_t)&unk_2546357A0);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &unk_2546357A0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546357B8);
  return &unk_2546357A0;
}

void sub_20B0DA6FC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546357B8);
  _Unwind_Resume(a1);
}

void sub_20B0DA714(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635798);
  _Unwind_Resume(a1);
}

void sub_20B0DA72C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_20B45540C(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_20B0DA884(a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_20B45540C(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_20B0DA884(a1, &v13);
  }
}

void sub_20B0DA884(uint64_t a1, _BYTE **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  void *__p[2];
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    v5 = (void **)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    v19 = 0uLL;
    sub_20B4557C4(v5, (uint64_t)&v19);
    v17 = v20;
    *(_OWORD *)__p = v19;
    v6 = SHIBYTE(v20);
    v7 = (char *)v19;
    v8 = operator new();
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_20B52CF30(v8, v10);
    *(_QWORD *)&v19 = v9;
    v18 = 0;
    sub_20B430024((uint64_t *)v9, &v18);
    v11 = v18;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v9 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v9 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v9 + 16) = v14;
    if (*(char *)(v9 + 111) < 0)
      operator delete(*(void **)(v9 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v9 + 128);
    MEMORY[0x20BD3583C](v9, 0x10B2C40EED050F3);
    **a2 = v11;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v19 = 0;
    sub_20B4552C4(v4, &v19);
    if ((unint64_t)v19 >= 0x100)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C41FEF0;
      __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
    }
    **a2 = v19;
  }
}

void sub_20B0DAA50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0DAADC(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  if (*(_BYTE *)sub_20B50AF4C(a1))
  {
    v11 = 0uLL;
    v12 = 0;
    v13 = 0;
    v4 = (unsigned __int8 *)sub_20B50AF4C(a1);
    ++a1[14];
    sub_20B50C8A0((uint64_t)&v13, v4, (void **)&v11);
    if (*(_BYTE *)(a2 + 24))
    {
      v5 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v6 = *(void ***)(a2 + 8);
        v7 = *(void ***)a2;
        if (v6 != v5)
        {
          do
          {
            if (*((char *)v6 - 1) < 0)
              operator delete(*(v6 - 3));
            v6 -= 3;
          }
          while (v6 != v5);
          v7 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v5;
        operator delete(v7);
      }
    }
    *(_OWORD *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      v8 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v9 = *(void ***)(a2 + 8);
        v10 = *(void ***)a2;
        if (v9 != v8)
        {
          do
          {
            if (*((char *)v9 - 1) < 0)
              operator delete(*(v9 - 3));
            v9 -= 3;
          }
          while (v9 != v8);
          v10 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v8;
        operator delete(v10);
      }
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_20B0DAC24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC2E90(&a9);
  _Unwind_Resume(a1);
}

void sub_20B0DAC38(uint64_t a1, uint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;

  if (*(unsigned __int8 *)(a1 + 24) == *(unsigned __int8 *)(a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      v4 = *(void ***)a1;
      if (*(_QWORD *)a1)
      {
        v5 = *(void ***)(a1 + 8);
        v6 = *(void ***)a1;
        if (v5 != v4)
        {
          do
          {
            if (*((char *)v5 - 1) < 0)
              operator delete(*(v5 - 3));
            v5 -= 3;
          }
          while (v5 != v4);
          v6 = *(void ***)a1;
        }
        *(_QWORD *)(a1 + 8) = v4;
        operator delete(v6);
        *(_QWORD *)a1 = 0;
        *(_QWORD *)(a1 + 8) = 0;
        *(_QWORD *)(a1 + 16) = 0;
      }
      *(_OWORD *)a1 = *(_OWORD *)a2;
      *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    v7 = *(void ***)a1;
    if (*(_QWORD *)a1)
    {
      v8 = *(void ***)(a1 + 8);
      v9 = *(void ***)a1;
      if (v8 != v7)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v7;
      operator delete(v9);
    }
    *(_BYTE *)(a1 + 24) = 0;
  }
  else
  {
    *(_QWORD *)a1 = 0;
    *(_QWORD *)(a1 + 8) = 0;
    *(_QWORD *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(_QWORD *)(a1 + 16) = *(_QWORD *)(a2 + 16);
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_BYTE *)(a1 + 24) = 1;
  }
}

uint64_t sub_20B0DAD74(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  __int128 *v6;
  __int128 v7;
  __int128 v8;
  __int128 v9;
  void **v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  __int128 *v14;
  int v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;

  v4 = *(_QWORD *)(a2 + 8);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  *(_QWORD *)(a1 + 8) = v4;
  v5 = a1 + 24;
  v6 = (__int128 *)(a2 + 24);
  if (*(unsigned __int8 *)(a1 + 48) == *(unsigned __int8 *)(a2 + 48))
  {
    if (*(_BYTE *)(a1 + 48))
    {
      if (*(char *)(a1 + 47) < 0)
        operator delete(*(void **)v5);
      v7 = *v6;
      *(_QWORD *)(v5 + 16) = *((_QWORD *)v6 + 2);
      *(_OWORD *)v5 = v7;
      *(_BYTE *)(a2 + 47) = 0;
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
  else if (*(_BYTE *)(a1 + 48))
  {
    if (*(char *)(a1 + 47) < 0)
      operator delete(*(void **)v5);
    *(_BYTE *)(a1 + 48) = 0;
  }
  else
  {
    v8 = *v6;
    *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40);
    *(_OWORD *)v5 = v8;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_QWORD *)v6 = 0;
    *(_BYTE *)(a1 + 48) = 1;
  }
  v9 = *(_OWORD *)(a2 + 56);
  *(_BYTE *)(a1 + 72) = *(_BYTE *)(a2 + 72);
  *(_OWORD *)(a1 + 56) = v9;
  v10 = (void **)(a1 + 80);
  v11 = (__int128 *)(a2 + 80);
  if (*(unsigned __int8 *)(a1 + 104) != *(unsigned __int8 *)(a2 + 104))
  {
    if (!*(_BYTE *)(a1 + 104))
    {
      v17 = *v11;
      *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
      *(_OWORD *)v10 = v17;
      *(_QWORD *)(a2 + 88) = 0;
      *(_QWORD *)(a2 + 96) = 0;
      *(_QWORD *)v11 = 0;
      *(_BYTE *)(a1 + 104) = 1;
      v13 = a1 + 112;
      v14 = (__int128 *)(a2 + 112);
      v15 = *(unsigned __int8 *)(a1 + 136);
      if (v15 == *(unsigned __int8 *)(a2 + 136))
        goto LABEL_22;
LABEL_27:
      if (v15)
      {
        if (*(char *)(a1 + 135) < 0)
          operator delete(*(void **)v13);
        *(_BYTE *)(a1 + 136) = 0;
      }
      else
      {
        v18 = *v14;
        *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
        *(_OWORD *)v13 = v18;
        *((_QWORD *)v14 + 1) = 0;
        *((_QWORD *)v14 + 2) = 0;
        *(_QWORD *)v14 = 0;
        *(_BYTE *)(a1 + 136) = 1;
      }
      goto LABEL_32;
    }
    if (*(char *)(a1 + 103) < 0)
      operator delete(*v10);
    *(_BYTE *)(a1 + 104) = 0;
LABEL_21:
    v13 = a1 + 112;
    v14 = (__int128 *)(a2 + 112);
    v15 = *(unsigned __int8 *)(a1 + 136);
    if (v15 == *(unsigned __int8 *)(a2 + 136))
      goto LABEL_22;
    goto LABEL_27;
  }
  if (!*(_BYTE *)(a1 + 104))
    goto LABEL_21;
  if (*(char *)(a1 + 103) < 0)
    operator delete(*v10);
  v12 = *v11;
  *(_QWORD *)(a1 + 96) = *(_QWORD *)(a2 + 96);
  *(_OWORD *)v10 = v12;
  *(_BYTE *)(a2 + 103) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  v13 = a1 + 112;
  v14 = (__int128 *)(a2 + 112);
  v15 = *(unsigned __int8 *)(a1 + 136);
  if (v15 != *(unsigned __int8 *)(a2 + 136))
    goto LABEL_27;
LABEL_22:
  if (v15)
  {
    if (*(char *)(a1 + 135) < 0)
      operator delete(*(void **)v13);
    v16 = *v14;
    *(_QWORD *)(v13 + 16) = *((_QWORD *)v14 + 2);
    *(_OWORD *)v13 = v16;
    *(_BYTE *)(a2 + 135) = 0;
    *(_BYTE *)(a2 + 112) = 0;
  }
LABEL_32:
  sub_20B0DAC38(a1 + 144, a2 + 144);
  return a1;
}

void sub_20B0DAF88(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *exception;
  unint64_t v14;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50AC94(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v14 = 0;
  sub_20B4552C4(v8, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v9 = 2;
  else
    v9 = v14;
  sub_20B0D9F58(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  if (a3 >= 2)
  {
    v12 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "name";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v12)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DA2A0((uint64_t *)a1, a2 + 24);
  }
}

uint64_t sub_20B0DB0C4(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  unsigned int v11;
  int v12;
  int v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *exception;
  _QWORD *v58;
  _BYTE v59[24];
  __int128 v60;
  _BYTE v61[32];
  _BYTE v62[22];
  unsigned int v63;
  char v64;
  _BYTE v65[40];
  _BYTE v66[22];
  void *__p;
  char v68;
  unsigned int v69;
  _QWORD v70[21];
  unsigned __int16 *v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[22];
  char v75;

  sub_20B50AC94(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_20B4552C4(v5, v65);
  if (HIDWORD(*(_QWORD *)v65))
    goto LABEL_100;
  if (*(_DWORD *)v65 >= 2u)
    v6 = 2;
  else
    v6 = *(_DWORD *)v65;
  if (v6 >= 2)
  {
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "io_format";
    *(_QWORD *)(a1 + 96) = 9;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)v65 = a2;
    sub_20B0DBC20((uint64_t *)a1, (_WORD **)v65);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "structure";
    *(_QWORD *)(a1 + 96) = 9;
    if (v8)
    {
      sub_20B50AC94(a1);
      v9 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v9)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)(a1 + 104) = 1;
      sub_20B50AC94(a1);
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v42)
        goto LABEL_12;
    }
    *(_BYTE *)(a1 + 104) = 1;
LABEL_12:
    v10 = (char *)sub_20B50AF4C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)v65 = 0;
    sub_20B4552C4(v10, v65);
    if (!HIDWORD(*(_QWORD *)v65))
    {
      if (*(_DWORD *)v65 >= 2u)
        v11 = 2;
      else
        v11 = *(_DWORD *)v65;
      if (v11 < 2)
      {
        *(_OWORD *)v59 = 1uLL;
        v27 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v27)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = v59;
        sub_20B0DBE10((uint64_t *)a1, (_QWORD **)v65);
        v28 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v28)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = &v59[8];
        v29 = (char *)sub_20B50AF4C((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_20B50C014(v29, (uint64_t)v65);
        *(_OWORD *)(a2 + 4) = *(_OWORD *)v59;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v12)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = a2 + 4;
        sub_20B0DBE10((uint64_t *)a1, (_QWORD **)v65);
        v13 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v13)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = a2 + 8;
        v14 = (char *)sub_20B50AF4C((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_20B50C014(v14, (uint64_t)v65);
      }
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v30 - 8);
      v31 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v31 - 8);
      *(_QWORD *)(a1 + 48) = v30 - 8;
      *(_QWORD *)(a1 + 72) = v31 - 8;
      LODWORD(v30) = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "image_data";
      *(_QWORD *)(a1 + 96) = 10;
      if ((_DWORD)v30)
      {
        sub_20B50AC94(a1);
        v32 = *a2;
        if (v32 == 1)
        {
LABEL_51:
          sub_20B2DD08C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
          v33 = *((unsigned int *)a2 + 24);
          if ((_DWORD)v33 != -1)
            ((void (*)(_BYTE *, unsigned __int16 *))off_24C418A58[v33])(v59, a2 + 16);
          *((_QWORD *)a2 + 4) = &off_24C3FF020;
          *(_OWORD *)(a2 + 20) = *(_OWORD *)&v65[8];
          *(_OWORD *)(a2 + 28) = *(_OWORD *)&v65[24];
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v66;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v66[14];
          *((_DWORD *)a2 + 24) = 1;
          sub_20B2DFB0C((const void *)a1, (uint64_t)(a2 + 16));
          goto LABEL_99;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 104) = 1;
        sub_20B50AC94(a1);
        v32 = *a2;
        if (v32 == 1)
          goto LABEL_51;
      }
      v43 = sub_20B2DF950(v32);
      sub_20B0DCCD0((uint64_t)v65, (uint64_t *)a1);
      sub_20B0DBFFC(v70, v43, (uint64_t)v59);
      v44 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v44 != -1)
      {
        if ((_DWORD)v44 == 1)
        {
          v45 = *(_OWORD *)&v59[8];
          *(_QWORD *)&v59[8] = 0;
          *(_QWORD *)&v59[16] = 0;
          v46 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = v45;
          if (v46)
          {
            p_shared_owners = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(p_shared_owners);
            while (__stlxr(v48 - 1, p_shared_owners));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          *(_OWORD *)(a2 + 28) = v60;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
          v49 = *(std::__shared_weak_count **)&v59[16];
          if (*(_QWORD *)&v59[16])
          {
            v50 = (unint64_t *)(*(_QWORD *)&v59[16] + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          goto LABEL_83;
        }
        ((void (*)(unsigned __int16 **, unsigned __int16 *))*(&off_24C40DBA8 + v44))(&v71, a2 + 16);
      }
      *((_QWORD *)a2 + 4) = &off_24C3FF020;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)&v59[8];
      *(_QWORD *)&v59[8] = 0;
      *(_QWORD *)&v59[16] = 0;
      *(_OWORD *)(a2 + 28) = v60;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
      *((_DWORD *)a2 + 24) = 1;
LABEL_83:
      std::istream::~istream();
      *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
      if (v68 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      goto LABEL_99;
    }
LABEL_100:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)v65 = &off_24C3FF020;
  sub_20B0DC760((uint64_t)&v65[8]);
  sub_20B2DD220((uint64_t)v59, (uint64_t)v65, 0);
  v15 = *(std::__shared_weak_count **)&v65[16];
  if (*(_QWORD *)&v65[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  LODWORD(v60) = 0;
  v18 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v18)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = v59;
  sub_20B0DBC20((uint64_t *)a1, (_WORD **)v65);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50AC94(a1);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_20B4552C4(v21, v65);
  if (*(_DWORD *)&v65[4])
  {
    v58 = __cxa_allocate_exception(8uLL);
    *v58 = &off_24C41FEF0;
    __cxa_throw(v58, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  v22 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_format";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v22)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = &v59[8];
  sub_20B0DBE10((uint64_t *)a1, (_QWORD **)v65);
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "size";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = 2;
  *(_QWORD *)&v65[8] = &v59[16];
  v24 = (char *)sub_20B50AF4C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B50C014(v24, (uint64_t)v65);
  v25 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v25 - 8);
  v26 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(a1 + 48) = v25 - 8;
  *(_QWORD *)(a1 + 72) = v26 - 8;
  LODWORD(v25) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if (!(_DWORD)v25)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50AC94(a1);
  if (*(unsigned __int16 *)v59 != 1)
  {
    v34 = sub_20B2DF950(*(unsigned __int16 *)v59);
    sub_20B0DCCD0((uint64_t)v65, (uint64_t *)a1);
    sub_20B0DBFFC(v70, v34, (uint64_t)&v71);
    if (v63 != -1)
    {
      if (v63 == 1)
      {
        v35 = v72;
        v72 = 0uLL;
        v36 = *(std::__shared_weak_count **)&v61[8];
        *(_OWORD *)v61 = v35;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        *(_OWORD *)&v61[16] = v73;
        *(_OWORD *)v62 = *(_OWORD *)v74;
        *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
        if (*((_QWORD *)&v72 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        goto LABEL_88;
      }
      ((void (*)(char *, char *))*(&off_24C40DBA8 + v63))(&v75, (char *)&v60 + 8);
    }
    *((_QWORD *)&v60 + 1) = &off_24C3FF020;
    *(_OWORD *)v61 = v72;
    v72 = 0uLL;
    *(_OWORD *)&v61[16] = v73;
    *(_OWORD *)v62 = *(_OWORD *)v74;
    *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
    v63 = 1;
LABEL_88:
    std::istream::~istream();
    *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
    if (v68 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_91;
  }
  sub_20B2DCEF8((uint64_t *)&v59[8], v60);
  if (v63 != -1)
    ((void (*)(unsigned __int16 **, char *))off_24C418A58[v63])(&v71, (char *)&v60 + 8);
  *((_QWORD *)&v60 + 1) = &off_24C3FF020;
  *(_OWORD *)v61 = *(_OWORD *)&v65[8];
  *(_OWORD *)&v61[16] = *(_OWORD *)&v65[24];
  *(_OWORD *)v62 = *(_OWORD *)v66;
  *(_QWORD *)&v62[14] = *(_QWORD *)&v66[14];
  v63 = 1;
  sub_20B2DFB0C((const void *)a1, (uint64_t)&v60 + 8);
LABEL_91:
  *(_WORD *)v65 = *(_WORD *)v59;
  *(_OWORD *)&v65[8] = *(_OWORD *)&v59[8];
  v52 = v63;
  *(_DWORD *)&v65[24] = v60;
  v65[32] = 0;
  v69 = -1;
  if (v63 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v53 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v53 != -1)
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 *))*(&off_24C40DBA8 + v53))(&v71, a2 + 16);
      *((_DWORD *)a2 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, char *))off_24C40DC88[v63])(&v64, &v65[32], (char *)&v60 + 8);
    v69 = v52;
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v71 = a2 + 16;
    ((void (*)(unsigned __int16 **))off_24C40DC98[v52])(&v71);
  }
  if (v69 != -1)
    ((void (*)(unsigned __int16 **, _BYTE *))*(&off_24C40DBA8 + v69))(&v71, &v65[32]);
  if (v63 != -1)
    ((void (*)(_BYTE *, char *))*(&off_24C40DBA8 + v63))(v65, (char *)&v60 + 8);
LABEL_99:
  v54 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v54 - 8);
  v55 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v55 - 8);
  *(_QWORD *)(a1 + 48) = v54 - 8;
  *(_QWORD *)(a1 + 72) = v55 - 8;
  return a1;
}

void sub_20B0DBAC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39)
{
  uint64_t v39;

  std::istream::~istream();
  a24 = MEMORY[0x24BEDB848] + 16;
  if (a37 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t *))*(&off_24C40DBA8 + a21))(v39 - 65, &a13);
  _Unwind_Resume(a1);
}

void sub_20B0DBC20(uint64_t *a1, _WORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B2DED5C((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B0DBD84(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0DBE10(uint64_t *a1, _QWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AF4C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B4557C4(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  v16 = 0;
  *(_QWORD *)&v17 = v8;
  sub_20B2DF3C8((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B0DBF70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0DBFFC(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char *v4;
  uint64_t v5;
  unint64_t *v6;
  unint64_t v7;
  int v8;
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v11;
  std::runtime_error *exception;
  uint64_t v13;
  std::string v14;
  _BYTE v15[8];
  uint64_t v16;
  void *v17;
  __int128 v18;
  _BYTE v19[22];
  char v20;
  void *__p;
  char v22;
  char v23;
  char v24;
  unsigned __int8 v25;

  sub_20B0DC1BC(a1, a2, (uint64_t)v15);
  if (!v25)
  {
    exception = (std::runtime_error *)__cxa_allocate_exception(0x10uLL);
    v13 = sub_20B0B52D8((uint64_t)v15);
    sub_20B5287D4(v13, &v14);
    std::runtime_error::runtime_error(exception, &v14);
    __cxa_throw(exception, MEMORY[0x24BEDB730], (void (*)(void *))MEMORY[0x24BEDAB60]);
  }
  v5 = v16;
  v4 = (char *)v17;
  *(_QWORD *)a3 = &off_24C3FF020;
  *(_QWORD *)(a3 + 8) = v5;
  *(_QWORD *)(a3 + 16) = v4;
  if (v4)
  {
    v6 = (unint64_t *)(v4 + 8);
    do
      v7 = __ldxr(v6);
    while (__stxr(v7 + 1, v6));
    v8 = v25;
    *(_OWORD *)(a3 + 24) = v18;
    *(_OWORD *)(a3 + 40) = *(_OWORD *)v19;
    *(_QWORD *)(a3 + 54) = *(_QWORD *)&v19[14];
    if (!v8)
    {
      if (v24)
      {
        if (v23)
        {
          if (v22 < 0)
            operator delete(__p);
          if (v20 < 0)
            operator delete(*(void **)&v19[8]);
        }
        if (v19[0])
        {
          if (SHIBYTE(v18) < 0)
            operator delete(v17);
        }
      }
      return;
    }
  }
  else
  {
    *(_OWORD *)(a3 + 24) = v18;
    *(_OWORD *)(a3 + 40) = *(_OWORD *)v19;
    *(_QWORD *)(a3 + 54) = *(_QWORD *)&v19[14];
  }
  v9 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    v10 = (unint64_t *)((char *)v17 + 8);
    do
      v11 = __ldaxr(v10);
    while (__stlxr(v11 - 1, v10));
    if (!v11)
    {
      ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
      std::__shared_weak_count::__release_weak(v9);
    }
  }
}

void sub_20B0DC17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
  void *v16;
  int v17;

  if (a15 < 0)
  {
    operator delete(__p);
    if ((v17 & 1) == 0)
    {
LABEL_6:
      sub_20AFAB33C((uint64_t)&a16);
      _Unwind_Resume(a1);
    }
  }
  else if (!v17)
  {
    goto LABEL_6;
  }
  __cxa_free_exception(v16);
  goto LABEL_6;
}

void sub_20B0DC1BC(_QWORD *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  std::__shared_weak_count *v6;
  unint64_t *v7;
  unint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  void *__p;
  char v14;
  unsigned __int8 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int128 v19;
  uint64_t v20;
  char v21;
  char v22;
  __int128 v23;
  __int128 v24;
  char v25;
  char v26;
  void *v27;
  char v28;
  void *v29;
  char v30;
  char v31;
  char v32;
  char v33;
  uint64_t (**v34)();
  _OWORD v35[2];
  _BYTE v36[22];

  v34 = &off_24C3FF020;
  sub_20B0DC760((uint64_t)v35);
  sub_20B0DC400((uint64_t)&v34, a1, a2, (uint64_t)&v23);
  if (v33)
  {
    *(_QWORD *)a3 = &off_24C3FF020;
    *(_OWORD *)(a3 + 8) = v35[0];
    v35[0] = 0uLL;
    *(_OWORD *)(a3 + 24) = v35[1];
    *(_OWORD *)(a3 + 40) = *(_OWORD *)v36;
    *(_QWORD *)(a3 + 54) = *(_QWORD *)&v36[14];
    *(_BYTE *)(a3 + 120) = 1;
  }
  else
  {
    v12 = v23;
    v9 = sub_20AECEBD0(&__p, &v24);
    *(_OWORD *)a3 = v12;
    *(_BYTE *)(a3 + 16) = 0;
    *(_BYTE *)(a3 + 112) = 0;
    if (v22)
    {
      *(_BYTE *)(a3 + 40) = 0;
      v10 = v15;
      if (v15)
      {
        *(_OWORD *)(a3 + 16) = *(_OWORD *)v9;
        *(_QWORD *)(a3 + 32) = *((_QWORD *)v9 + 2);
        *((_QWORD *)v9 + 1) = 0;
        *((_QWORD *)v9 + 2) = 0;
        *(_QWORD *)v9 = 0;
        *(_BYTE *)(a3 + 40) = 1;
      }
      *(_BYTE *)(a3 + 48) = 0;
      *(_BYTE *)(a3 + 104) = 0;
      if (v21)
      {
        v11 = v18;
        *(_QWORD *)(a3 + 64) = v17;
        *(_OWORD *)(a3 + 48) = v16;
        v16 = 0uLL;
        *(_QWORD *)(a3 + 72) = v11;
        *(_OWORD *)(a3 + 80) = v19;
        *(_QWORD *)(a3 + 96) = v20;
        v17 = 0;
        v19 = 0uLL;
        v20 = 0;
        *(_BYTE *)(a3 + 104) = 1;
      }
      *(_BYTE *)(a3 + 112) = 1;
      *(_BYTE *)(a3 + 120) = 0;
      if (v10 && v14 < 0)
        operator delete(__p);
    }
    else
    {
      *(_BYTE *)(a3 + 120) = 0;
    }
    if (!v33 && v32)
    {
      if (v31)
      {
        if (v30 < 0)
          operator delete(v29);
        if (v28 < 0)
          operator delete(v27);
      }
      if (v26 && v25 < 0)
        operator delete((void *)v24);
    }
  }
  v6 = (std::__shared_weak_count *)*((_QWORD *)&v35[0] + 1);
  if (*((_QWORD *)&v35[0] + 1))
  {
    v7 = (unint64_t *)(*((_QWORD *)&v35[0] + 1) + 8);
    do
      v8 = __ldaxr(v7);
    while (__stlxr(v8 - 1, v7));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

void sub_20B0DC3D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  uint64_t v17;
  va_list va;

  va_start(va, a17);
  sub_20AECD704((uint64_t)va);
  sub_20AFFA660(v17 - 128);
  _Unwind_Resume(a1);
}

void sub_20B0DC3EC(_Unwind_Exception *a1)
{
  uint64_t v1;

  sub_20AFFA660(v1 - 128);
  _Unwind_Resume(a1);
}

void sub_20B0DC400(uint64_t a1@<X0>, _QWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  _BYTE *v8;
  int v9;
  uint64_t v10;
  _QWORD *exception;
  void *v12;
  char v13;
  __int128 v14;
  __int128 v15;
  char v16;
  char v17;
  void *v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  char v23;
  __int128 v24;
  void *__p;
  char v26;
  unsigned __int8 v27;
  __int128 v28;
  uint64_t v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  char v33;
  char v34;
  __int128 v35;
  void *v36;
  char v37;
  char v38;
  void *v39;
  char v40;
  void *v41;
  char v42;
  char v43;
  char v44;
  char v45;
  int v46;
  _QWORD v47[2];
  _QWORD v48[3];
  _QWORD *v49;
  uint64_t v50;

  v50 = *MEMORY[0x24BDAC8D0];
  v48[0] = &off_24C40DE28;
  v48[1] = a1;
  v49 = v48;
  sub_20B2D0D30(v48, 0, a2, a3, (uint64_t)&v35);
  v6 = v49;
  if (v49 == v48)
  {
    v7 = 4;
    v6 = v48;
  }
  else
  {
    if (!v49)
      goto LABEL_6;
    v7 = 5;
  }
  (*(void (**)(void))(*v6 + 8 * v7))();
LABEL_6:
  if (v45)
  {
    *(_BYTE *)(a4 + 120) = 1;
    return;
  }
  v47[0] = "load";
  v47[1] = 4;
  v46 = a3;
  sub_20B2D15EC("Failure during ", (uint64_t)v47, (uint64_t)" from stream with file format ", &v46, (uint64_t)": ");
  if (v45)
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C3F6160;
    __cxa_throw(exception, (struct type_info *)&unk_24C3F22A8, (void (*)(void *))std::exception::~exception);
  }
  sub_20B52A138(&v12, &v35, (uint64_t)&v14);
  v24 = v14;
  v8 = sub_20AECEBD0(&__p, &v15);
  *(_OWORD *)a4 = v24;
  *(_BYTE *)(a4 + 16) = 0;
  *(_BYTE *)(a4 + 112) = 0;
  if (!v34)
  {
    *(_BYTE *)(a4 + 120) = 0;
    if (!v23)
      goto LABEL_28;
    goto LABEL_20;
  }
  *(_BYTE *)(a4 + 40) = 0;
  v9 = v27;
  if (v27)
  {
    *(_OWORD *)(a4 + 16) = *(_OWORD *)v8;
    *(_QWORD *)(a4 + 32) = *((_QWORD *)v8 + 2);
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *(_QWORD *)v8 = 0;
    *(_BYTE *)(a4 + 40) = 1;
  }
  *(_BYTE *)(a4 + 48) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  if (v33)
  {
    v10 = v30;
    *(_QWORD *)(a4 + 64) = v29;
    *(_OWORD *)(a4 + 48) = v28;
    v28 = 0uLL;
    *(_QWORD *)(a4 + 72) = v10;
    *(_OWORD *)(a4 + 80) = v31;
    *(_QWORD *)(a4 + 96) = v32;
    v29 = 0;
    v31 = 0uLL;
    v32 = 0;
    *(_BYTE *)(a4 + 104) = 1;
  }
  *(_BYTE *)(a4 + 112) = 1;
  *(_BYTE *)(a4 + 120) = 0;
  if (v9 && v26 < 0)
    operator delete(__p);
  if (v23)
  {
LABEL_20:
    if (v22)
    {
      if (v21 < 0)
        operator delete(v20);
      if (v19 < 0)
        operator delete(v18);
    }
    if (v17 && v16 < 0)
      operator delete((void *)v15);
  }
LABEL_28:
  if (v13 < 0)
  {
    operator delete(v12);
    if (v45)
      return;
  }
  else if (v45)
  {
    return;
  }
  if (v44)
  {
    if (v43)
    {
      if (v42 < 0)
        operator delete(v41);
      if (v40 < 0)
        operator delete(v39);
    }
    if (v38)
    {
      if (v37 < 0)
        operator delete(v36);
    }
  }
}

void sub_20B0DC6E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  uint64_t v15;

  sub_20AECCE40((uint64_t)&a15);
  if (a14 < 0)
    operator delete(__p);
  sub_20AECD704(v15 - 224);
  _Unwind_Resume(a1);
}

void sub_20B0DC728(_Unwind_Exception *exception_object)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v4;
  uint64_t v5;

  v4 = *(_QWORD **)(v2 - 48);
  if (v4 == v1)
  {
    v5 = 4;
    v4 = (_QWORD *)(v2 - 72);
  }
  else
  {
    if (!v4)
      goto LABEL_6;
    v5 = 5;
  }
  (*(void (**)(void))(*v4 + 8 * v5))();
LABEL_6:
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0DC760@<X0>(uint64_t a1@<X8>)
{
  size_t v2;
  size_t v3;
  size_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unsigned __int8 v8;
  __int16 v9;
  __int128 v10;
  __int128 v11;
  _BYTE v12[28];
  size_t v13[3];
  __int128 v14;
  char v15;
  uint64_t v16;
  void *v17;

  v15 = 0;
  v12[24] = 0;
  memset(v12, 0, 17);
  v16 = 0;
  v17 = 0;
  sub_20B4C20F0(v13, &v16, &v17, 1, (void **)&v15, 1, 0);
  v11 = 0uLL;
  HIDWORD(v11) = (unsigned __int128)0 >> 96;
  v3 = v13[0];
  v2 = v13[1];
  v4 = v13[2];
  v10 = v14;
  v5 = operator new();
  *(_QWORD *)v5 = &off_24C3FCC50;
  *(_OWORD *)(v5 + 8) = v11;
  *(_OWORD *)(v5 + 20) = *(_OWORD *)&v12[12];
  *(_QWORD *)(v5 + 40) = v3;
  *(_QWORD *)(v5 + 48) = v2;
  *(_QWORD *)(v5 + 56) = v4;
  *(_OWORD *)(v5 + 64) = v10;
  v6 = (_QWORD *)operator new();
  v6[1] = 0;
  *v6 = &off_24C403F88;
  v6[2] = 0;
  v6[3] = v5;
  *(_QWORD *)a1 = v5;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  *(_DWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 48) = 1;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 104))(v5);
  v8 = result;
  if ((result & 0xFFFFFF) <= 0x10000)
    v8 = 0;
  v9 = result & 0xFF00;
  if ((result & 0xFF0000) == 0)
    v9 = 0;
  *(_WORD *)(a1 + 52) = v9 & 0xFF00 | v8;
  return result;
}

void sub_20B0DC8B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  std::__shared_weak_count *v9;
  unint64_t *v10;
  unint64_t v12;

  do
    v12 = __ldaxr(v10);
  while (__stlxr(v12 - 1, v10));
  if (!v12)
  {
    ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
    std::__shared_weak_count::__release_weak(v9);
  }
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0DC8F8(_Unwind_Exception *a1)
{
  uint64_t v1;

  (*(void (**)(uint64_t))(*(_QWORD *)v1 + 8))(v1);
  _Unwind_Resume(a1);
}

void sub_20B0DC914(_Unwind_Exception *exception_object)
{
  void *v1;

  if (v1)
    free(v1);
  _Unwind_Resume(exception_object);
}

void sub_20B0DC930()
{
  JUMPOUT(0x20BD3583CLL);
}

_QWORD *sub_20B0DC944(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_24C40DE28;
  result[1] = v3;
  return result;
}

uint64_t sub_20B0DC978(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_24C40DE28;
  a2[1] = v2;
  return result;
}

double sub_20B0DC994@<D0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, int *a3@<X2>, uint64_t a4@<X8>)
{
  return sub_20B0DCA18((uint64_t *)(a1 + 8), a2, *a3, a4);
}

uint64_t sub_20B0DC9A0(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = *(_QWORD *)(a2 + 8);
  if ((char *)v3 == "N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE")
    return a1 + 8;
  if (((v3 & (unint64_t)"N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE" & 0x8000000000000000) != 0) == __OFSUB__(v3, "N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE"))return 0;
  if (!strcmp((const char *)(v3 & 0x7FFFFFFFFFFFFFFFLL), (const char *)((unint64_t)"N4cv3d3kit5imgio6detail12ProvideImageINS0_3img5ImageILNS4_6FormatE0ENS4_13DynamicBufferEEEEE" & 0x7FFFFFFFFFFFFFFFLL)))return a1 + 8;
  return 0;
}

void *sub_20B0DCA0C()
{
  return &unk_24C40DE98;
}

double sub_20B0DCA18@<D0>(uint64_t *a1@<X0>, _DWORD *a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *p_shared_owners;
  unint64_t v14;
  __int128 v15;
  __int128 v16;
  unint64_t *v17;
  unint64_t v18;
  double result;
  __int128 v20;
  _BYTE v21[38];

  if (!a3
    && sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/ImageIO/include/Kit/ImageIO/ImageIO.h", 387, (uint64_t)"format != img::Format::Dynamic", 30, (uint64_t)"loader must specify the format to load as", 41, (void (*)(void **))sub_20B532360))
  {
    abort();
  }
  v8 = *a1;
  if (*(_DWORD *)(*a1 + 32) != *a2
    || (*(_DWORD *)(v8 + 56) == a3 ? (v9 = *(_DWORD *)(v8 + 36) == a2[1]) : (v9 = 0), !v9))
  {
    sub_20B0DCBA0(v8, a3, (uint64_t)a2);
    v10 = *a1;
    v11 = v20;
    v20 = 0uLL;
    v12 = *(std::__shared_weak_count **)(v10 + 16);
    *(_OWORD *)(v10 + 8) = v11;
    if (v12)
    {
      p_shared_owners = (unint64_t *)&v12->__shared_owners_;
      do
        v14 = __ldaxr(p_shared_owners);
      while (__stlxr(v14 - 1, p_shared_owners));
      if (!v14)
      {
        ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
        std::__shared_weak_count::__release_weak(v12);
      }
    }
    v15 = *(_OWORD *)v21;
    v16 = *(_OWORD *)&v21[16];
    *(_QWORD *)(v10 + 54) = *(_QWORD *)&v21[30];
    *(_OWORD *)(v10 + 40) = v16;
    *(_OWORD *)(v10 + 24) = v15;
    if (*((_QWORD *)&v20 + 1))
    {
      v17 = (unint64_t *)(*((_QWORD *)&v20 + 1) + 8);
      do
        v18 = __ldaxr(v17);
      while (__stlxr(v18 - 1, v17));
      if (!v18)
      {
        (*(void (**)(_QWORD))(**((_QWORD **)&v20 + 1) + 16))(*((_QWORD *)&v20 + 1));
        std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v20 + 1));
      }
    }
    v8 = *a1;
  }
  sub_20B007640(v8, (uint64_t)&v20);
  *(_QWORD *)a4 = &off_24C400938;
  *(_OWORD *)(a4 + 8) = v20;
  *(_OWORD *)(a4 + 24) = *(_OWORD *)v21;
  result = *(double *)&v21[14];
  *(_OWORD *)(a4 + 38) = *(_OWORD *)&v21[14];
  *(_BYTE *)(a4 + 120) = 1;
  return result;
}

void sub_20B0DCBA0(uint64_t a1, int a2, uint64_t a3)
{
  std::__shared_weak_count *v3;
  uint64_t v4;
  unint64_t *p_shared_owners;
  unint64_t v6;
  std::__shared_weak_count *v7;
  unint64_t *v8;
  unint64_t v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  std::__shared_weak_count *v18;
  uint64_t v19;
  std::__shared_weak_count *v20;
  char v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;

  if (a2)
  {
    v4 = *(_QWORD *)(a1 + 8);
    v3 = *(std::__shared_weak_count **)(a1 + 16);
    if (v3)
    {
      p_shared_owners = (unint64_t *)&v3->__shared_owners_;
      do
        v6 = __ldxr(p_shared_owners);
      while (__stxr(v6 + 1, p_shared_owners));
    }
    v17 = v4;
    v18 = v3;
    v22 = &v17;
    v23 = a3;
    v24 = &v19;
    sub_20B48B254(a2);
    v7 = v18;
    if (!v18)
      return;
    v8 = (unint64_t *)&v18->__shared_owners_;
    do
      v9 = __ldaxr(v8);
    while (__stlxr(v9 - 1, v8));
    if (v9)
      return;
LABEL_17:
    ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
    std::__shared_weak_count::__release_weak(v7);
    return;
  }
  v11 = *(_QWORD *)(a1 + 8);
  v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10)
  {
    v12 = (unint64_t *)&v10->__shared_owners_;
    do
      v13 = __ldxr(v12);
    while (__stxr(v13 + 1, v12));
  }
  v19 = v11;
  v20 = v10;
  v14 = *(_DWORD *)(a1 + 56);
  v22 = &v19;
  v23 = a3;
  v24 = (uint64_t *)&v21;
  sub_20B48B254(v14);
  v7 = v20;
  if (v20)
  {
    v15 = (unint64_t *)&v20->__shared_owners_;
    do
      v16 = __ldaxr(v15);
    while (__stlxr(v16 - 1, v15));
    if (!v16)
      goto LABEL_17;
  }
}

void sub_20B0DCCA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_list va;

  va_start(va, a3);
  sub_20AEC147C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0DCCBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20AEC147C((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0DCCD0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  std::string *p_n;
  char *v10;
  _QWORD v12[2];
  std::string __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = (char *)sub_20B50AF4C(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_20B4552C4(v7, &__n);
  v8 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v8 && (std::string::append(&__n, v8, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v12[0] = v8;
  v12[1] = p_n;
  v10 = (char *)sub_20B50AF4C(a2);
  ++a2[14];
  sub_20B50B064(v10, (uint64_t)v12);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __n;
  *((_BYTE *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_20AEC8D2C(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20B0DCE6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20B0D3A2C(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0DCED8(uint64_t a1)
{
  uint64_t v2;
  char v4;

  v2 = *(unsigned int *)(a1 + 96);
  if ((_DWORD)v2 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DBA8 + v2))(&v4, a1 + 32);
  *(_DWORD *)(a1 + 96) = -1;
  return a1;
}

__n128 sub_20B0DCF30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;

  *(_QWORD *)a2 = &off_24C3FA3D0;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_20B0DCF5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a2 = &off_24C3FF020;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  result = *(__n128 *)(a3 + 24);
  v4 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v4;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_20B0DCF90(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 result;
  char v12;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DBA8 + v5))(&v12, v4);
LABEL_10:
    *(_DWORD *)(v4 + 64) = -1;
    *(_QWORD *)v4 = &off_24C3FA3D0;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = *(__n128 *)(a3 + 24);
    *(_OWORD *)(v4 + 38) = *(_OWORD *)(a3 + 38);
    *(__n128 *)(v4 + 24) = result;
    *(_DWORD *)(v4 + 64) = 0;
    return result;
  }
  v7 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = *(__n128 *)(a3 + 24);
  *(_OWORD *)(a2 + 38) = *(_OWORD *)(a3 + 38);
  *(__n128 *)(a2 + 24) = result;
  return result;
}

__n128 sub_20B0DD08C(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  __int128 v7;
  std::__shared_weak_count *v8;
  unint64_t *p_shared_owners;
  unint64_t v10;
  __n128 result;
  __int128 v12;
  __int128 v13;
  char v14;

  v4 = *a1;
  v5 = *(unsigned int *)(*a1 + 64);
  if ((_DWORD)v5 == -1)
    goto LABEL_10;
  if ((_DWORD)v5 != 1)
  {
    ((void (*)(char *, uint64_t))*(&off_24C40DBA8 + v5))(&v14, v4);
LABEL_10:
    *(_DWORD *)(v4 + 64) = -1;
    *(_QWORD *)v4 = &off_24C3FF020;
    *(_OWORD *)(v4 + 8) = *(_OWORD *)(a3 + 8);
    *(_QWORD *)(a3 + 8) = 0;
    *(_QWORD *)(a3 + 16) = 0;
    result = *(__n128 *)(a3 + 24);
    v13 = *(_OWORD *)(a3 + 40);
    *(_QWORD *)(v4 + 54) = *(_QWORD *)(a3 + 54);
    *(_OWORD *)(v4 + 40) = v13;
    *(__n128 *)(v4 + 24) = result;
    *(_DWORD *)(v4 + 64) = 1;
    return result;
  }
  v7 = *(_OWORD *)(a3 + 8);
  *(_QWORD *)(a3 + 8) = 0;
  *(_QWORD *)(a3 + 16) = 0;
  v8 = *(std::__shared_weak_count **)(a2 + 16);
  *(_OWORD *)(a2 + 8) = v7;
  if (v8)
  {
    p_shared_owners = (unint64_t *)&v8->__shared_owners_;
    do
      v10 = __ldaxr(p_shared_owners);
    while (__stlxr(v10 - 1, p_shared_owners));
    if (!v10)
    {
      ((void (*)(std::__shared_weak_count *))v8->__on_zero_shared)(v8);
      std::__shared_weak_count::__release_weak(v8);
    }
  }
  result = *(__n128 *)(a3 + 24);
  v12 = *(_OWORD *)(a3 + 40);
  *(_QWORD *)(a2 + 54) = *(_QWORD *)(a3 + 54);
  *(_OWORD *)(a2 + 40) = v12;
  *(__n128 *)(a2 + 24) = result;
  return result;
}

void sub_20B0DD1A0(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  char v10;

  v9 = 6;
  sub_20B518854(a2[6], &v9);
  v5 = v9;
  if (v9 >= 3)
    sub_20B0DD290(a2 + 2);
  if (v5 >= 6)
    v6 = 6;
  else
    v6 = v5;
  if (v6 < 3)
  {
    sub_20B0DD3D8((uint64_t)&v10, a2, a3, v6);
    if (v5 < 3)
      return;
  }
  else
  {
    sub_20B0DD634(a2, a3, v6);
    if (v5 < 3)
      return;
  }
  v7 = a2[4];
  v8 = *(_QWORD *)(v7 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v7 - 8);
  if (v8)
    (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v8);
  a2[4] -= 16;
}

void sub_20B0DD290(_QWORD *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  uint64_t *v14;
  char *v15;
  uint64_t v16;

  v16 = 0;
  sub_20B518BE4(a1[4], &v16);
  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 32))(a1);
  v3 = v2;
  v4 = v16;
  v6 = (uint64_t *)a1[2];
  v5 = a1[3];
  if ((unint64_t)v6 < v5)
  {
    *v6 = v2;
    v6[1] = v4;
    v7 = (uint64_t)(v6 + 2);
    goto LABEL_18;
  }
  v8 = (uint64_t *)a1[1];
  v9 = ((char *)v6 - (char *)v8) >> 4;
  v10 = v9 + 1;
  if ((unint64_t)(v9 + 1) >> 60)
    sub_20AEC60B8();
  v11 = v5 - (_QWORD)v8;
  if (v11 >> 3 > v10)
    v10 = v11 >> 3;
  if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0)
    v12 = 0xFFFFFFFFFFFFFFFLL;
  else
    v12 = v10;
  if (v12)
  {
    if (v12 >> 60)
      sub_20AEC60CC();
    v13 = (char *)operator new(16 * v12);
    v14 = (uint64_t *)&v13[16 * v9];
    v15 = &v13[16 * v12];
    *v14 = v3;
    v14[1] = v4;
    v7 = (uint64_t)(v14 + 2);
    if (v6 == v8)
      goto LABEL_16;
    goto LABEL_14;
  }
  v14 = (uint64_t *)(16 * v9);
  v15 = 0;
  *v14 = v2;
  v14[1] = v4;
  v7 = 16 * v9 + 16;
  if (v6 != v8)
  {
    do
    {
LABEL_14:
      *((_OWORD *)v14 - 1) = *((_OWORD *)v6 - 1);
      v14 -= 2;
      v6 -= 2;
    }
    while (v6 != v8);
    v6 = (uint64_t *)a1[1];
  }
LABEL_16:
  a1[1] = v14;
  a1[2] = v7;
  a1[3] = v15;
  if (v6)
    operator delete(v6);
LABEL_18:
  a1[2] = v7;
}

void sub_20B0DD3D8(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  char v10[8];
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *__p;
  void **v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 0;
  LOBYTE(v27) = 0;
  v29 = 0;
  sub_20B0DD914((uint64_t)v10, a2, (uint64_t)&v26);
  if (a4 >= 2)
  {
    v10[0] = 0;
    sub_20B51852C(a2[6], v10);
    if (v10[0])
    {
      if (!v29)
      {
        v27 = 0uLL;
        v28 = 0;
        v29 = 1;
      }
      sub_20B518FF8(a2[6], (void **)&v27);
    }
    else if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      v29 = 0;
    }
  }
  v11 = v26;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
    {
      sub_20AEC60F4(&v12, (void *)v27, *((unint64_t *)&v27 + 1));
    }
    else
    {
      v12 = v27;
      v13 = v28;
    }
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(v20) = 0;
  v22 = 0;
  LOBYTE(__p) = 0;
  v25 = 0;
  sub_20B0DAD74(a3, (uint64_t)v10);
  if (v25)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v24;
      v9 = __p;
      if (v24 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v24 = v7;
      operator delete(v9);
    }
  }
  if (v22 && v21 < 0)
    operator delete(v20);
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v14 && SHIBYTE(v13) < 0)
    operator delete((void *)v12);
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
  }
}

void sub_20B0DD5F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0DD634(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void *v13;
  char v14;
  char v15;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  sub_20B0DD914((uint64_t)&v14, a1, a2 + 8);
  v6 = (void **)(a2 + 24);
  v15 = 0;
  sub_20B51852C(a1[6], &v15);
  if (v15)
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      *v6 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    sub_20B518FF8(a1[6], (void **)(a2 + 24));
  }
  else if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v6);
    *(_BYTE *)(a2 + 48) = 0;
  }
  if (a3 >= 4)
  {
    v16 = 0;
    sub_20B51852C(a1[6], &v16);
    if (v16)
    {
      if (!*(_BYTE *)(a2 + 72))
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 64) = 0;
        *(_BYTE *)(a2 + 72) = 1;
      }
      sub_20B0DD914((uint64_t)&v17, a1, a2 + 56);
    }
    else if (*(_BYTE *)(a2 + 72))
    {
      *(_BYTE *)(a2 + 72) = 0;
    }
    if (a3 == 5)
    {
      v7 = (void **)(a2 + 80);
      v18 = 0;
      sub_20B51852C(a1[6], &v18);
      if (v18)
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v7 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        sub_20B518FF8(a1[6], (void **)(a2 + 80));
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v7);
        *(_BYTE *)(a2 + 104) = 0;
      }
    }
    else if (a3 >= 6)
    {
      v8 = (void **)(a2 + 80);
      v19 = 0;
      sub_20B51852C(a1[6], &v19);
      if (v19)
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v8 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        sub_20B518FF8(a1[6], (void **)(a2 + 80));
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v8);
        *(_BYTE *)(a2 + 104) = 0;
      }
      v9 = (void **)(a2 + 112);
      v20 = 0;
      sub_20B51852C(a1[6], &v20);
      if (v20)
      {
        if (!*(_BYTE *)(a2 + 136))
        {
          *v9 = 0;
          *(_QWORD *)(a2 + 120) = 0;
          *(_QWORD *)(a2 + 128) = 0;
          *(_BYTE *)(a2 + 136) = 1;
        }
        sub_20B518FF8(a1[6], (void **)(a2 + 112));
      }
      else if (*(_BYTE *)(a2 + 136))
      {
        if (*(char *)(a2 + 135) < 0)
          operator delete(*v9);
        *(_BYTE *)(a2 + 136) = 0;
      }
      v10 = (void **)(a2 + 144);
      v21 = 0;
      sub_20B51852C(a1[6], &v21);
      if (v21)
      {
        if (!*(_BYTE *)(a2 + 168))
        {
          *v10 = 0;
          *(_QWORD *)(a2 + 152) = 0;
          *(_QWORD *)(a2 + 160) = 0;
          *(_BYTE *)(a2 + 168) = 1;
        }
        sub_20B0DDA1C((uint64_t)a1, (char **)(a2 + 144));
      }
      else if (*(_BYTE *)(a2 + 168))
      {
        v11 = (void **)*v10;
        if (*v10)
        {
          v12 = *(void ***)(a2 + 152);
          v13 = *v10;
          if (v12 != v11)
          {
            do
            {
              if (*((char *)v12 - 1) < 0)
                operator delete(*(v12 - 3));
              v12 -= 3;
            }
            while (v12 != v11);
            v13 = *v10;
          }
          *(_QWORD *)(a2 + 152) = v11;
          operator delete(v13);
        }
        *(_BYTE *)(a2 + 168) = 0;
      }
    }
  }
}

void sub_20B0DD914(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  char v9;
  char v10;

  LODWORD(v8) = 2;
  sub_20B518854(a2[6], &v8);
  if (v8 <= 1)
  {
    v8 = 0;
    v9 = 0;
    sub_20B518AFC(a2[6], &v8);
    v10 = 0;
    sub_20B51852C(a2[6], &v10);
    v7 = v10;
    *(_QWORD *)a3 = v8;
    *(_BYTE *)(a3 + 8) = v7;
  }
  else
  {
    sub_20B0DD290(a2 + 2);
    sub_20B518AFC(a2[6], (_QWORD *)a3);
    LOBYTE(v8) = 0;
    sub_20B51852C(a2[6], &v8);
    *(_BYTE *)(a3 + 8) = v8;
    v5 = a2[4];
    v6 = *(_QWORD *)(v5 - 16) - (*(uint64_t (**)(_QWORD *))(a2[2] + 32))(a2 + 2) + *(_QWORD *)(v5 - 8);
    if (v6)
      (*(void (**)(_QWORD *, uint64_t))(a2[2] + 40))(a2 + 2, v6);
    a2[4] -= 16;
  }
}

void sub_20B0DDA1C(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;

  v13 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20B518BE4(*(_QWORD *)(a1 + 48), &v13);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v13 > v5)
  {
    sub_20B0DDB38(a2, v13 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v13 >= v5)
  {
    v6 = *a2;
    v9 = v4 - v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)&(*a2)[24 * v13];
  while (v4 != (char *)v10)
  {
    if (*(v4 - 1) < 0)
      operator delete(*((void **)v4 - 3));
    v4 -= 24;
  }
  a2[1] = (char *)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((char *)v10 != v6)
  {
LABEL_13:
    v11 = *(_QWORD *)(a1 + 48);
    v12 = 24 * (v9 / 24);
    do
    {
      sub_20B518FF8(v11, (void **)v6);
      v6 += 24;
      v12 -= 24;
    }
    while (v12);
  }
}

void sub_20B0DDB38(char **a1, unint64_t a2)
{
  void **v4;
  void **v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  __int128 v17;
  void **v18;

  v5 = (void **)a1[1];
  v4 = (void **)a1[2];
  if (0xAAAAAAAAAAAAAAABLL * (v4 - v5) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(a1[1], v12);
      v5 = (void **)((char *)v5 + v12);
    }
    a1[1] = (char *)v5;
  }
  else
  {
    v6 = (void **)*a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      sub_20AEC60B8();
    v9 = 0xAAAAAAAAAAAAAAABLL * (v4 - v6);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_20AEC60CC();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[24 * v7];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v13[v15];
    if (v5 == v6)
    {
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
    }
    else
    {
      do
      {
        v17 = *(_OWORD *)(v5 - 3);
        *((_QWORD *)v13 - 1) = *(v5 - 1);
        *(_OWORD *)(v13 - 24) = v17;
        v13 -= 24;
        *(v5 - 2) = 0;
        *(v5 - 1) = 0;
        *(v5 - 3) = 0;
        v5 -= 3;
      }
      while (v5 != v6);
      v5 = (void **)*a1;
      v18 = (void **)a1[1];
      *a1 = v13;
      a1[1] = v16;
      a1[2] = v14;
      while (v18 != v5)
      {
        if (*((char *)v18 - 1) < 0)
          operator delete(*(v18 - 3));
        v18 -= 3;
      }
    }
    if (v5)
      operator delete(v5);
  }
}

void sub_20B0DDD08(_QWORD *a1, unsigned __int16 *a2, unsigned int a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  __int128 v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  std::__shared_weak_count *v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  __int128 v25;
  std::__shared_weak_count *v26;
  unint64_t *p_shared_owners;
  unint64_t v28;
  std::__shared_weak_count *v29;
  unint64_t *v30;
  unint64_t v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  __int128 v37;
  _BYTE v38[32];
  _BYTE v39[22];
  unsigned int v40;
  _BYTE v41[40];
  _BYTE v42[22];
  void *__p;
  char v44;
  unsigned int v45;
  _QWORD v46[22];
  unsigned __int16 *v47;
  __int128 v48;
  __int128 v49;
  _BYTE v50[22];
  char v51;

  if (a3 < 2)
  {
    *(_QWORD *)v41 = &off_24C3FF020;
    sub_20B0DC760((uint64_t)&v41[8]);
    sub_20B2DD220((uint64_t)&v35, (uint64_t)v41, 0);
    v18 = *(std::__shared_weak_count **)&v41[16];
    if (*(_QWORD *)&v41[16])
    {
      v19 = (unint64_t *)(*(_QWORD *)&v41[16] + 8);
      do
        v20 = __ldaxr(v19);
      while (__stlxr(v20 - 1, v19));
      if (!v20)
      {
        ((void (*)(std::__shared_weak_count *))v18->__on_zero_shared)(v18);
        std::__shared_weak_count::__release_weak(v18);
      }
    }
    LODWORD(v37) = 0;
    *(_WORD *)v41 = 0;
    sub_20B5186C0(a1[6], v41);
    LOWORD(v35) = *(_WORD *)v41;
    *(_DWORD *)v41 = 1;
    sub_20B518854(a1[6], v41);
    *(_QWORD *)v41 = 0;
    sub_20B518BE4(a1[6], v41);
    *(_QWORD *)&v36 = *(_QWORD *)v41;
    v21 = a1[6];
    sub_20B518854(v21, (_DWORD *)&v36 + 2);
    sub_20B518854(v21, (_DWORD *)&v36 + 3);
    if ((unsigned __int16)v35 == 1)
    {
      sub_20B2DCEF8((uint64_t *)&v36, v37);
      if (v40 != -1)
        ((void (*)(unsigned __int16 **, char *))off_24C418A58[v40])(&v47, (char *)&v37 + 8);
      *((_QWORD *)&v37 + 1) = &off_24C3FF020;
      *(_OWORD *)v38 = *(_OWORD *)&v41[8];
      *(_OWORD *)&v38[16] = *(_OWORD *)&v41[24];
      *(_OWORD *)v39 = *(_OWORD *)v42;
      *(_QWORD *)&v39[14] = *(_QWORD *)&v42[14];
      v40 = 1;
      sub_20B2DFB0C(a1, (uint64_t)&v37 + 8);
LABEL_53:
      *(_WORD *)v41 = v35;
      *(_OWORD *)&v41[8] = v36;
      v33 = v40;
      *(_DWORD *)&v41[24] = v37;
      v41[32] = 0;
      v45 = -1;
      if (v40 == -1)
      {
        *(_OWORD *)a2 = *(_OWORD *)v41;
        *(_OWORD *)(a2 + 6) = *(_OWORD *)&v41[12];
        v34 = *((unsigned int *)a2 + 24);
        if ((_DWORD)v34 != -1)
        {
          ((void (*)(unsigned __int16 **, unsigned __int16 *))*(&off_24C40DBA8 + v34))(&v47, a2 + 16);
          *((_DWORD *)a2 + 24) = -1;
        }
      }
      else
      {
        ((void (*)(char *, _BYTE *, char *))off_24C40DC88[v40])(&v51, &v41[32], (char *)&v37 + 8);
        v45 = v33;
        *(_OWORD *)a2 = *(_OWORD *)v41;
        *(_OWORD *)(a2 + 6) = *(_OWORD *)&v41[12];
        v47 = a2 + 16;
        ((void (*)(unsigned __int16 **))off_24C40DC98[v33])(&v47);
      }
      if (v45 != -1)
        ((void (*)(unsigned __int16 **, _BYTE *))*(&off_24C40DBA8 + v45))(&v47, &v41[32]);
      if (v40 != -1)
        ((void (*)(_BYTE *, char *))*(&off_24C40DBA8 + v40))(v41, (char *)&v37 + 8);
      return;
    }
    v24 = sub_20B2DF950((unsigned __int16)v35);
    sub_20B0DE544((uint64_t)v41, (uint64_t)a1);
    sub_20B0DBFFC(v46, v24, (uint64_t)&v47);
    if (v40 != -1)
    {
      if (v40 == 1)
      {
        v25 = v48;
        v48 = 0uLL;
        v26 = *(std::__shared_weak_count **)&v38[8];
        *(_OWORD *)v38 = v25;
        if (v26)
        {
          p_shared_owners = (unint64_t *)&v26->__shared_owners_;
          do
            v28 = __ldaxr(p_shared_owners);
          while (__stlxr(v28 - 1, p_shared_owners));
          if (!v28)
          {
            ((void (*)(std::__shared_weak_count *))v26->__on_zero_shared)(v26);
            std::__shared_weak_count::__release_weak(v26);
          }
        }
        *(_OWORD *)&v38[16] = v49;
        *(_OWORD *)v39 = *(_OWORD *)v50;
        *(_QWORD *)&v39[14] = *(_QWORD *)&v50[14];
        v29 = (std::__shared_weak_count *)*((_QWORD *)&v48 + 1);
        if (*((_QWORD *)&v48 + 1))
        {
          v30 = (unint64_t *)(*((_QWORD *)&v48 + 1) + 8);
          do
            v31 = __ldaxr(v30);
          while (__stlxr(v31 - 1, v30));
          if (!v31)
          {
            ((void (*)(std::__shared_weak_count *))v29->__on_zero_shared)(v29);
            std::__shared_weak_count::__release_weak(v29);
          }
        }
        goto LABEL_50;
      }
      ((void (*)(char *, char *))*(&off_24C40DBA8 + v40))(&v51, (char *)&v37 + 8);
    }
    *((_QWORD *)&v37 + 1) = &off_24C3FF020;
    v32 = v48;
    v48 = 0uLL;
    *(_OWORD *)v38 = v32;
    *(_OWORD *)&v38[16] = v49;
    *(_OWORD *)v39 = *(_OWORD *)v50;
    *(_QWORD *)&v39[14] = *(_QWORD *)&v50[14];
    v40 = 1;
LABEL_50:
    std::istream::~istream();
    *(_QWORD *)v41 = MEMORY[0x24BEDB848] + 16;
    if (v44 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_53;
  }
  *(_WORD *)v41 = 0;
  sub_20B5186C0(a1[6], v41);
  *a2 = *(_WORD *)v41;
  *(_DWORD *)v41 = 2;
  sub_20B518854(a1[6], v41);
  if (*(_DWORD *)v41 <= 1u)
  {
    *(_QWORD *)&v41[8] = 0;
    v35 = 0;
    sub_20B518BE4(a1[6], &v35);
    *(_QWORD *)v41 = v35;
    v22 = a1[6];
    sub_20B518854(v22, &v41[8]);
    sub_20B518854(v22, (_DWORD *)((unint64_t)v41 | 0xC));
    *(_OWORD *)(a2 + 4) = *(_OWORD *)v41;
    v8 = *a2;
    if (v8 != 1)
      goto LABEL_6;
  }
  else
  {
    sub_20B0DD290(a1 + 2);
    *(_QWORD *)v41 = 0;
    sub_20B518BE4(a1[6], v41);
    *((_QWORD *)a2 + 1) = *(_QWORD *)v41;
    v5 = a1[6];
    sub_20B518854(v5, (_DWORD *)a2 + 4);
    sub_20B518854(v5, (_DWORD *)a2 + 5);
    v6 = a1[4];
    v7 = *(_QWORD *)(v6 - 16) - (*(uint64_t (**)(_QWORD *))(a1[2] + 32))(a1 + 2) + *(_QWORD *)(v6 - 8);
    if (v7)
      (*(void (**)(_QWORD *, uint64_t))(a1[2] + 40))(a1 + 2, v7);
    a1[4] -= 16;
    v8 = *a2;
    if (v8 != 1)
    {
LABEL_6:
      v9 = sub_20B2DF950(v8);
      sub_20B0DE544((uint64_t)v41, (uint64_t)a1);
      sub_20B0DBFFC(v46, v9, (uint64_t)&v35);
      v10 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v10 != -1)
      {
        if ((_DWORD)v10 == 1)
        {
          v11 = v36;
          v36 = 0uLL;
          v12 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = v11;
          if (v12)
          {
            v13 = (unint64_t *)&v12->__shared_owners_;
            do
              v14 = __ldaxr(v13);
            while (__stlxr(v14 - 1, v13));
            if (!v14)
            {
              ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
              std::__shared_weak_count::__release_weak(v12);
            }
          }
          *(_OWORD *)(a2 + 28) = v37;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v38;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v38[14];
          v15 = (std::__shared_weak_count *)*((_QWORD *)&v36 + 1);
          if (*((_QWORD *)&v36 + 1))
          {
            v16 = (unint64_t *)(*((_QWORD *)&v36 + 1) + 8);
            do
              v17 = __ldaxr(v16);
            while (__stlxr(v17 - 1, v16));
            if (!v17)
            {
              ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
              std::__shared_weak_count::__release_weak(v15);
            }
          }
          goto LABEL_45;
        }
        ((void (*)(unsigned __int16 **, unsigned __int16 *))*(&off_24C40DBA8 + v10))(&v47, a2 + 16);
      }
      *((_QWORD *)a2 + 4) = &off_24C3FF020;
      *(_OWORD *)(a2 + 20) = v36;
      v36 = 0uLL;
      *(_OWORD *)(a2 + 28) = v37;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v38;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v38[14];
      *((_DWORD *)a2 + 24) = 1;
LABEL_45:
      std::istream::~istream();
      *(_QWORD *)v41 = MEMORY[0x24BEDB848] + 16;
      if (v44 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      return;
    }
  }
  sub_20B2DD08C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
  v23 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v23 != -1)
    ((void (*)(uint64_t *, unsigned __int16 *))off_24C418A58[v23])(&v35, a2 + 16);
  *((_QWORD *)a2 + 4) = &off_24C3FF020;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)&v41[8];
  *(_OWORD *)(a2 + 28) = *(_OWORD *)&v41[24];
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v42;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v42[14];
  *((_DWORD *)a2 + 24) = 1;
  sub_20B2DFB0C(a1, (uint64_t)(a2 + 16));
}

void sub_20B0DE410(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20B0DE4EC((uint64_t)va1);
  sub_20B0DCED8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0DE42C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_list va;

  va_start(va, a15);
  sub_20B0DE4EC((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0DE448(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v3;
  va_list va;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  va_list va1;

  va_start(va1, a2);
  va_start(va, a2);
  v3 = va_arg(va1, _QWORD);
  v5 = va_arg(va1, _QWORD);
  v6 = va_arg(va1, _QWORD);
  v7 = va_arg(va1, _QWORD);
  v8 = va_arg(va1, _QWORD);
  v9 = va_arg(va1, _QWORD);
  v10 = va_arg(va1, _QWORD);
  v11 = va_arg(va1, _QWORD);
  v12 = va_arg(va1, _QWORD);
  v13 = va_arg(va1, _QWORD);
  v14 = va_arg(va1, _QWORD);
  v15 = va_arg(va1, _QWORD);
  v16 = va_arg(va1, _QWORD);
  sub_20B0C5FDC((uint64_t)va1);
  sub_20B0DCED8((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0DE464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,unsigned int a35)
{
  uint64_t v35;
  uint64_t v36;

  if (a35 != -1)
    ((void (*)(uint64_t, uint64_t))*(&off_24C40DBA8 + a35))(v36 - 136, v35);
  sub_20B0DCED8((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0DE4EC(uint64_t a1)
{
  std::istream::~istream();
  *(_QWORD *)a1 = MEMORY[0x24BEDB848] + 16;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  return std::streambuf::~streambuf();
}

uint64_t sub_20B0DE544(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  size_t v7;
  std::string *p_p;
  uint64_t v9;
  std::bad_cast *exception;
  std::bad_cast *v12;
  std::string __p;
  std::string::size_type __n;
  int v15;
  void *__src;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  sub_20B518BE4(*(_QWORD *)(a2 + 48), &__n);
  memset(&__p, 0, sizeof(__p));
  if (!__n)
  {
    v7 = 0;
    goto LABEL_8;
  }
  std::string::append(&__p, __n, 0);
  v7 = __n;
  if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    p_p = &__p;
    goto LABEL_9;
  }
  p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if (!__p.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    p_p = 0;
  }
LABEL_9:
  v9 = *(_QWORD *)(a2 + 48);
  v15 = 0;
  __src = 0;
  sub_20B5191B4(v9, (uint64_t)&v15);
  if (v7 != v15)
  {
    exception = (std::bad_cast *)__cxa_allocate_exception(8uLL);
    exception->__vftable = 0;
    v12 = std::bad_cast::bad_cast(exception);
    v12->__vftable = (std::bad_cast_vtbl *)&off_24C41F5F0;
    __cxa_throw(v12, (struct type_info *)&unk_24C41F208, (void (*)(void *))std::exception::~exception);
  }
  memcpy(p_p, __src, v7);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __p;
  *((_BYTE *)&__p.__r_.__value_.__s + 23) = 0;
  __p.__r_.__value_.__s.__data_[0] = 0;
  sub_20AEC8D2C(a1);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20B0DE71C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  uint64_t v14;

  if (a14 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20B0D3A2C(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0DE788(uint64_t a1, uint64_t a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *exception;
  char v11;
  unint64_t v12;

  sub_20B50A7A4(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v12 = 0;
  sub_20B454B2C(v5, &v12);
  if (HIDWORD(v12))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v12 >= 6)
    v6 = 6;
  else
    v6 = v12;
  if (v6 < 3)
    sub_20B0DE884((uint64_t)&v11, a1, a2, v6);
  else
    sub_20B0DEA74(a1, a2, v6);
  v7 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v7 - 8);
  v8 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a1 + 48) = v7 - 8;
  *(_QWORD *)(a1 + 72) = v8 - 8;
  return a1;
}

void sub_20B0DE884(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_20B0DF818(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_20AEC60F4(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_20B0DAD74(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_20B0DEA30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0DEA74(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  int v16;
  int v17;
  _QWORD *exception;
  __int128 v19;
  uint64_t v20;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50A7A4(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)&v19 = 0;
  sub_20B454B2C(v8, &v19);
  if (DWORD1(v19))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v19 >= 2)
    v9 = 2;
  else
    v9 = v19;
  sub_20B0DED34(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  v12 = a2 + 24;
  LODWORD(v10) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "name";
  *(_QWORD *)(a1 + 96) = 4;
  if ((_DWORD)v10)
  {
    sub_20B0DF07C((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  else
  {
    *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DF07C((uint64_t *)a1, v12);
    if (a3 < 4)
      return;
  }
  v13 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "custom_timestamp";
  *(_QWORD *)(a1 + 96) = 16;
  if (!v13)
  {
    *(_BYTE *)(a1 + 104) = 1;
    if (*(_BYTE *)sub_20B50AA5C((uint64_t *)a1))
      goto LABEL_15;
LABEL_17:
    ++*(_QWORD *)(a1 + 112);
    if (*(_BYTE *)(a2 + 72))
      *(_BYTE *)(a2 + 72) = 0;
    goto LABEL_19;
  }
  if (!*(_BYTE *)sub_20B50AA5C((uint64_t *)a1))
    goto LABEL_17;
LABEL_15:
  *(_QWORD *)&v19 = 0;
  BYTE8(v19) = 0;
  v20 = *(_QWORD *)(a1 + 8);
  sub_20B0DF19C((int *)&v20, a1, (uint64_t)&v19);
  *(_OWORD *)(a2 + 56) = v19;
  *(_BYTE *)(a2 + 72) = 1;
LABEL_19:
  if (a3 == 5)
  {
    v14 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v14)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DF07C((uint64_t *)a1, a2 + 80);
  }
  else if (a3 >= 6)
  {
    v15 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "space";
    *(_QWORD *)(a1 + 96) = 5;
    if (!v15)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DF07C((uint64_t *)a1, a2 + 80);
    v16 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "instance_id";
    *(_QWORD *)(a1 + 96) = 11;
    if (!v16)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DF07C((uint64_t *)a1, a2 + 112);
    v17 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "references";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v17)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DF6BC((uint64_t *)a1, a2 + 144);
  }
}

void sub_20B0DED34(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_20B454C74(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_20B0DEE8C((uint64_t *)a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_20B454C74(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_20B0DEE8C((uint64_t *)a1, &v13);
  }
}

void sub_20B0DEE8C(uint64_t *a1, _BYTE **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  char v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AA5C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B45502C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B430024((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B0DEFF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0DF07C(uint64_t *a1, uint64_t a2)
{
  void **v4;
  uint64_t v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v10[3];

  v10[2] = *MEMORY[0x24BDAC8D0];
  if (*(_BYTE *)sub_20B50AA5C(a1))
  {
    v4 = (void **)sub_20B50AA5C(a1);
    ++a1[14];
    v9 = 0uLL;
    v8 = 0;
    sub_20B45502C(v4, (uint64_t)&v8);
    v5 = v8;
    v10[0] = v9;
    *(_QWORD *)((char *)v10 + 7) = *(_QWORD *)((char *)&v9 + 7);
    v6 = HIBYTE(v9);
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
    v7 = v10[0];
    *(_QWORD *)a2 = v5;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v10 + 7);
    *(_BYTE *)(a2 + 23) = v6;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_20B0DF180(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0DF19C(int *a1, uint64_t a2, uint64_t a3)
{
  int v6;
  char *v7;
  unsigned int v8;
  int v9;
  char *v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *exception;
  __int128 *v15;
  unint64_t v16;

  sub_20B50A7A4(a2);
  v6 = *(unsigned __int8 *)(a2 + 104);
  *(_QWORD *)(a2 + 88) = "version";
  *(_QWORD *)(a2 + 96) = 7;
  if (!v6)
    *(_BYTE *)(a2 + 104) = 1;
  v7 = (char *)sub_20B50AA5C((uint64_t *)a2);
  ++*(_QWORD *)(a2 + 112);
  v16 = 0;
  sub_20B454B2C(v7, &v16);
  v8 = v16;
  if (HIDWORD(v16))
    goto LABEL_14;
  if (*a1 < 1)
    goto LABEL_13;
  if (v16 >= 2 && *a1 == 2)
  {
    v9 = *(unsigned __int8 *)(a2 + 104);
    *(_QWORD *)(a2 + 88) = "min_version";
    *(_QWORD *)(a2 + 96) = 11;
    if (!v9)
      *(_BYTE *)(a2 + 104) = 1;
    v10 = (char *)sub_20B50AA5C((uint64_t *)a2);
    ++*(_QWORD *)(a2 + 112);
    v16 = 0;
    sub_20B454B2C(v10, &v16);
    v11 = v16;
    if (!HIDWORD(v16))
    {
      if (v16 >= 3)
      {
        v15 = sub_20B0DA530();
        sub_20B520518((std::string *)v15, v11, 2u);
      }
      goto LABEL_11;
    }
LABEL_14:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
LABEL_11:
  if (v8 >= 2)
    v8 = 2;
LABEL_13:
  sub_20B0DF30C(a2, a3, v8);
  v12 = *(_QWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 32) = *(_QWORD *)(v12 - 8);
  v13 = *(_QWORD *)(a2 + 72);
  *(_QWORD *)(a2 + 112) = *(_QWORD *)(v13 - 8);
  *(_QWORD *)(a2 + 48) = v12 - 8;
  *(_QWORD *)(a2 + 72) = v13 - 8;
}

void sub_20B0DF30C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v5;
  char *v6;
  char *v7;
  int v8;
  int v9;
  char *v10;
  int v11;
  char v12;
  char *v13;
  char v14;
  char *v15;

  if (a3 < 2)
  {
    v14 = 0;
    v9 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v9)
      *(_BYTE *)(a1 + 104) = 1;
    v10 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v15 = 0;
    sub_20B454C74(v10, &v15);
    v13 = v15;
    v11 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v11)
      *(_BYTE *)(a1 + 104) = 1;
    v15 = &v14;
    sub_20B0DF464(a1, &v15);
    v12 = v14;
    *(_QWORD *)a2 = v13;
    *(_BYTE *)(a2 + 8) = v12;
  }
  else
  {
    v5 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "ns";
    *(_QWORD *)(a1 + 96) = 2;
    if (!v5)
      *(_BYTE *)(a1 + 104) = 1;
    v6 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v13 = 0;
    sub_20B454C74(v6, &v13);
    *(_QWORD *)a2 = v13;
    v7 = (char *)(a2 + 8);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "clock_type";
    *(_QWORD *)(a1 + 96) = 10;
    if (!v8)
      *(_BYTE *)(a1 + 104) = 1;
    v13 = v7;
    sub_20B0DF464(a1, &v13);
  }
}

void sub_20B0DF464(uint64_t a1, _BYTE **a2)
{
  char *v4;
  void **v5;
  int v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *exception;
  void *__p[2];
  uint64_t v17;
  char v18;
  __int128 v19;
  uint64_t v20;

  if ((*(_BYTE *)(a1 + 12) & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v17 = 0;
    v5 = (void **)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    v20 = 0;
    v19 = 0uLL;
    sub_20B45502C(v5, (uint64_t)&v19);
    v17 = v20;
    *(_OWORD *)__p = v19;
    v6 = SHIBYTE(v20);
    v7 = (char *)v19;
    v8 = operator new();
    v9 = v8;
    if (v6 >= 0)
      v10 = (char *)__p;
    else
      v10 = v7;
    sub_20B52CF30(v8, v10);
    *(_QWORD *)&v19 = v9;
    v18 = 0;
    sub_20B430024((uint64_t *)v9, &v18);
    v11 = v18;
    v12 = MEMORY[0x24BEDB7F0];
    v13 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v9 = *MEMORY[0x24BEDB7F0];
    v14 = *(_QWORD *)(v12 + 72);
    *(_QWORD *)(v9 + *(_QWORD *)(v13 - 24)) = *(_QWORD *)(v12 + 64);
    *(_QWORD *)(v9 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v9 + 16) = v14;
    if (*(char *)(v9 + 111) < 0)
      operator delete(*(void **)(v9 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v9 + 128);
    MEMORY[0x20BD3583C](v9, 0x10B2C40EED050F3);
    **a2 = v11;
    if (SHIBYTE(v17) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v4 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)&v19 = 0;
    sub_20B454B2C(v4, &v19);
    if ((unint64_t)v19 >= 0x100)
    {
      exception = __cxa_allocate_exception(8uLL);
      *exception = &off_24C41FEF0;
      __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
    }
    **a2 = v19;
  }
}

void sub_20B0DF630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0DF6BC(uint64_t *a1, uint64_t a2)
{
  unsigned __int8 *v4;
  void **v5;
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  __int128 v11;
  uint64_t v12;
  char v13;

  if (*(_BYTE *)sub_20B50AA5C(a1))
  {
    v11 = 0uLL;
    v12 = 0;
    v13 = 0;
    v4 = (unsigned __int8 *)sub_20B50AA5C(a1);
    ++a1[14];
    sub_20B50BB0C((uint64_t)&v13, v4, (void **)&v11);
    if (*(_BYTE *)(a2 + 24))
    {
      v5 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v6 = *(void ***)(a2 + 8);
        v7 = *(void ***)a2;
        if (v6 != v5)
        {
          do
          {
            if (*((char *)v6 - 1) < 0)
              operator delete(*(v6 - 3));
            v6 -= 3;
          }
          while (v6 != v5);
          v7 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v5;
        operator delete(v7);
      }
    }
    *(_OWORD *)a2 = v11;
    *(_QWORD *)(a2 + 16) = v12;
    *(_BYTE *)(a2 + 24) = 1;
  }
  else
  {
    ++a1[14];
    if (*(_BYTE *)(a2 + 24))
    {
      v8 = *(void ***)a2;
      if (*(_QWORD *)a2)
      {
        v9 = *(void ***)(a2 + 8);
        v10 = *(void ***)a2;
        if (v9 != v8)
        {
          do
          {
            if (*((char *)v9 - 1) < 0)
              operator delete(*(v9 - 3));
            v9 -= 3;
          }
          while (v9 != v8);
          v10 = *(void ***)a2;
        }
        *(_QWORD *)(a2 + 8) = v8;
        operator delete(v10);
      }
      *(_BYTE *)(a2 + 24) = 0;
    }
  }
}

void sub_20B0DF804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  sub_20AEC2E90(&a9);
  _Unwind_Resume(a1);
}

void sub_20B0DF818(uint64_t a1, uint64_t a2, unsigned int a3)
{
  int v6;
  int v7;
  char *v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *exception;
  unint64_t v14;

  v6 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "auto_timestamp";
  *(_QWORD *)(a1 + 96) = 14;
  if (!v6)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50A7A4(a1);
  v7 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v7)
    *(_BYTE *)(a1 + 104) = 1;
  v8 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  v14 = 0;
  sub_20B454B2C(v8, &v14);
  if (HIDWORD(v14))
  {
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  if (v14 >= 2)
    v9 = 2;
  else
    v9 = v14;
  sub_20B0DED34(a1, a2 + 8, v9);
  v10 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v10 - 8);
  v11 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v11 - 8);
  *(_QWORD *)(a1 + 48) = v10 - 8;
  *(_QWORD *)(a1 + 72) = v11 - 8;
  if (a3 >= 2)
  {
    v12 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "name";
    *(_QWORD *)(a1 + 96) = 4;
    if (!v12)
      *(_BYTE *)(a1 + 104) = 1;
    sub_20B0DF07C((uint64_t *)a1, a2 + 24);
  }
}

uint64_t sub_20B0DF954(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  char *v5;
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  char *v10;
  unsigned int v11;
  int v12;
  int v13;
  char *v14;
  std::__shared_weak_count *v15;
  unint64_t *v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  char *v21;
  int v22;
  int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  __int128 v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  std::__shared_weak_count *v39;
  unint64_t *v40;
  unint64_t v41;
  int v42;
  int v43;
  uint64_t v44;
  __int128 v45;
  std::__shared_weak_count *v46;
  unint64_t *p_shared_owners;
  unint64_t v48;
  std::__shared_weak_count *v49;
  unint64_t *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *exception;
  _QWORD *v58;
  _BYTE v59[24];
  __int128 v60;
  _BYTE v61[32];
  _BYTE v62[22];
  unsigned int v63;
  char v64;
  _BYTE v65[40];
  _BYTE v66[22];
  void *__p;
  char v68;
  unsigned int v69;
  _QWORD v70[21];
  unsigned __int16 *v71;
  __int128 v72;
  __int128 v73;
  _BYTE v74[22];
  char v75;

  sub_20B50A7A4(a1);
  v4 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v4)
    *(_BYTE *)(a1 + 104) = 1;
  v5 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_20B454B2C(v5, v65);
  if (HIDWORD(*(_QWORD *)v65))
    goto LABEL_100;
  if (*(_DWORD *)v65 >= 2u)
    v6 = 2;
  else
    v6 = *(_DWORD *)v65;
  if (v6 >= 2)
  {
    v7 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "io_format";
    *(_QWORD *)(a1 + 96) = 9;
    if (!v7)
      *(_BYTE *)(a1 + 104) = 1;
    *(_QWORD *)v65 = a2;
    sub_20B0E04B0((uint64_t *)a1, (_WORD **)v65);
    v8 = *(unsigned __int8 *)(a1 + 104);
    *(_QWORD *)(a1 + 88) = "structure";
    *(_QWORD *)(a1 + 96) = 9;
    if (v8)
    {
      sub_20B50A7A4(a1);
      v9 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v9)
        goto LABEL_12;
    }
    else
    {
      *(_BYTE *)(a1 + 104) = 1;
      sub_20B50A7A4(a1);
      v42 = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "version";
      *(_QWORD *)(a1 + 96) = 7;
      if (v42)
        goto LABEL_12;
    }
    *(_BYTE *)(a1 + 104) = 1;
LABEL_12:
    v10 = (char *)sub_20B50AA5C((uint64_t *)a1);
    ++*(_QWORD *)(a1 + 112);
    *(_QWORD *)v65 = 0;
    sub_20B454B2C(v10, v65);
    if (!HIDWORD(*(_QWORD *)v65))
    {
      if (*(_DWORD *)v65 >= 2u)
        v11 = 2;
      else
        v11 = *(_DWORD *)v65;
      if (v11 < 2)
      {
        *(_OWORD *)v59 = 1uLL;
        v27 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v27)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = v59;
        sub_20B0E06A0((uint64_t *)a1, (_QWORD **)v65);
        v28 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v28)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = &v59[8];
        v29 = (char *)sub_20B50AA5C((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_20B50B478(v29, (uint64_t)v65);
        *(_OWORD *)(a2 + 4) = *(_OWORD *)v59;
      }
      else
      {
        v12 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "image_format";
        *(_QWORD *)(a1 + 96) = 12;
        if (!v12)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = a2 + 4;
        sub_20B0E06A0((uint64_t *)a1, (_QWORD **)v65);
        v13 = *(unsigned __int8 *)(a1 + 104);
        *(_QWORD *)(a1 + 88) = "size";
        *(_QWORD *)(a1 + 96) = 4;
        if (!v13)
          *(_BYTE *)(a1 + 104) = 1;
        *(_QWORD *)v65 = 2;
        *(_QWORD *)&v65[8] = a2 + 8;
        v14 = (char *)sub_20B50AA5C((uint64_t *)a1);
        ++*(_QWORD *)(a1 + 112);
        sub_20B50B478(v14, (uint64_t)v65);
      }
      v30 = *(_QWORD *)(a1 + 48);
      *(_QWORD *)(a1 + 32) = *(_QWORD *)(v30 - 8);
      v31 = *(_QWORD *)(a1 + 72);
      *(_QWORD *)(a1 + 112) = *(_QWORD *)(v31 - 8);
      *(_QWORD *)(a1 + 48) = v30 - 8;
      *(_QWORD *)(a1 + 72) = v31 - 8;
      LODWORD(v30) = *(unsigned __int8 *)(a1 + 104);
      *(_QWORD *)(a1 + 88) = "image_data";
      *(_QWORD *)(a1 + 96) = 10;
      if ((_DWORD)v30)
      {
        sub_20B50A7A4(a1);
        v32 = *a2;
        if (v32 == 1)
        {
LABEL_51:
          sub_20B2DD08C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
          v33 = *((unsigned int *)a2 + 24);
          if ((_DWORD)v33 != -1)
            ((void (*)(_BYTE *, unsigned __int16 *))off_24C418A58[v33])(v59, a2 + 16);
          *((_QWORD *)a2 + 4) = &off_24C3FF020;
          *(_OWORD *)(a2 + 20) = *(_OWORD *)&v65[8];
          *(_OWORD *)(a2 + 28) = *(_OWORD *)&v65[24];
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v66;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v66[14];
          *((_DWORD *)a2 + 24) = 1;
          sub_20B2DFB0C((const void *)a1, (uint64_t)(a2 + 16));
          goto LABEL_99;
        }
      }
      else
      {
        *(_BYTE *)(a1 + 104) = 1;
        sub_20B50A7A4(a1);
        v32 = *a2;
        if (v32 == 1)
          goto LABEL_51;
      }
      v43 = sub_20B2DF950(v32);
      sub_20B0E088C((uint64_t)v65, (uint64_t *)a1);
      sub_20B0DBFFC(v70, v43, (uint64_t)v59);
      v44 = *((unsigned int *)a2 + 24);
      if ((_DWORD)v44 != -1)
      {
        if ((_DWORD)v44 == 1)
        {
          v45 = *(_OWORD *)&v59[8];
          *(_QWORD *)&v59[8] = 0;
          *(_QWORD *)&v59[16] = 0;
          v46 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
          *(_OWORD *)(a2 + 20) = v45;
          if (v46)
          {
            p_shared_owners = (unint64_t *)&v46->__shared_owners_;
            do
              v48 = __ldaxr(p_shared_owners);
            while (__stlxr(v48 - 1, p_shared_owners));
            if (!v48)
            {
              ((void (*)(std::__shared_weak_count *))v46->__on_zero_shared)(v46);
              std::__shared_weak_count::__release_weak(v46);
            }
          }
          *(_OWORD *)(a2 + 28) = v60;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
          v49 = *(std::__shared_weak_count **)&v59[16];
          if (*(_QWORD *)&v59[16])
          {
            v50 = (unint64_t *)(*(_QWORD *)&v59[16] + 8);
            do
              v51 = __ldaxr(v50);
            while (__stlxr(v51 - 1, v50));
            if (!v51)
            {
              ((void (*)(std::__shared_weak_count *))v49->__on_zero_shared)(v49);
              std::__shared_weak_count::__release_weak(v49);
            }
          }
          goto LABEL_83;
        }
        ((void (*)(unsigned __int16 **, unsigned __int16 *))*(&off_24C40DBA8 + v44))(&v71, a2 + 16);
      }
      *((_QWORD *)a2 + 4) = &off_24C3FF020;
      *(_OWORD *)(a2 + 20) = *(_OWORD *)&v59[8];
      *(_QWORD *)&v59[8] = 0;
      *(_QWORD *)&v59[16] = 0;
      *(_OWORD *)(a2 + 28) = v60;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v61;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v61[14];
      *((_DWORD *)a2 + 24) = 1;
LABEL_83:
      std::istream::~istream();
      *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
      if (v68 < 0)
        operator delete(__p);
      std::streambuf::~streambuf();
      goto LABEL_99;
    }
LABEL_100:
    exception = __cxa_allocate_exception(8uLL);
    *exception = &off_24C41FEF0;
    __cxa_throw(exception, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  *(_QWORD *)v65 = &off_24C3FF020;
  sub_20B0DC760((uint64_t)&v65[8]);
  sub_20B2DD220((uint64_t)v59, (uint64_t)v65, 0);
  v15 = *(std::__shared_weak_count **)&v65[16];
  if (*(_QWORD *)&v65[16])
  {
    v16 = (unint64_t *)(*(_QWORD *)&v65[16] + 8);
    do
      v17 = __ldaxr(v16);
    while (__stlxr(v17 - 1, v16));
    if (!v17)
    {
      ((void (*)(std::__shared_weak_count *))v15->__on_zero_shared)(v15);
      std::__shared_weak_count::__release_weak(v15);
    }
  }
  LODWORD(v60) = 0;
  v18 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "io_format";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v18)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = v59;
  sub_20B0E04B0((uint64_t *)a1, (_WORD **)v65);
  v19 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "structure";
  *(_QWORD *)(a1 + 96) = 9;
  if (!v19)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50A7A4(a1);
  v20 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "version";
  *(_QWORD *)(a1 + 96) = 7;
  if (!v20)
    *(_BYTE *)(a1 + 104) = 1;
  v21 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  *(_QWORD *)v65 = 0;
  sub_20B454B2C(v21, v65);
  if (*(_DWORD *)&v65[4])
  {
    v58 = __cxa_allocate_exception(8uLL);
    *v58 = &off_24C41FEF0;
    __cxa_throw(v58, (struct type_info *)&unk_24C41FF08, (void (*)(void *))std::exception::~exception);
  }
  v22 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_format";
  *(_QWORD *)(a1 + 96) = 12;
  if (!v22)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = &v59[8];
  sub_20B0E06A0((uint64_t *)a1, (_QWORD **)v65);
  v23 = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "size";
  *(_QWORD *)(a1 + 96) = 4;
  if (!v23)
    *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)v65 = 2;
  *(_QWORD *)&v65[8] = &v59[16];
  v24 = (char *)sub_20B50AA5C((uint64_t *)a1);
  ++*(_QWORD *)(a1 + 112);
  sub_20B50B478(v24, (uint64_t)v65);
  v25 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v25 - 8);
  v26 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v26 - 8);
  *(_QWORD *)(a1 + 48) = v25 - 8;
  *(_QWORD *)(a1 + 72) = v26 - 8;
  LODWORD(v25) = *(unsigned __int8 *)(a1 + 104);
  *(_QWORD *)(a1 + 88) = "image_data";
  *(_QWORD *)(a1 + 96) = 10;
  if (!(_DWORD)v25)
    *(_BYTE *)(a1 + 104) = 1;
  sub_20B50A7A4(a1);
  if (*(unsigned __int16 *)v59 != 1)
  {
    v34 = sub_20B2DF950(*(unsigned __int16 *)v59);
    sub_20B0E088C((uint64_t)v65, (uint64_t *)a1);
    sub_20B0DBFFC(v70, v34, (uint64_t)&v71);
    if (v63 != -1)
    {
      if (v63 == 1)
      {
        v35 = v72;
        v72 = 0uLL;
        v36 = *(std::__shared_weak_count **)&v61[8];
        *(_OWORD *)v61 = v35;
        if (v36)
        {
          v37 = (unint64_t *)&v36->__shared_owners_;
          do
            v38 = __ldaxr(v37);
          while (__stlxr(v38 - 1, v37));
          if (!v38)
          {
            ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
            std::__shared_weak_count::__release_weak(v36);
          }
        }
        *(_OWORD *)&v61[16] = v73;
        *(_OWORD *)v62 = *(_OWORD *)v74;
        *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
        v39 = (std::__shared_weak_count *)*((_QWORD *)&v72 + 1);
        if (*((_QWORD *)&v72 + 1))
        {
          v40 = (unint64_t *)(*((_QWORD *)&v72 + 1) + 8);
          do
            v41 = __ldaxr(v40);
          while (__stlxr(v41 - 1, v40));
          if (!v41)
          {
            ((void (*)(std::__shared_weak_count *))v39->__on_zero_shared)(v39);
            std::__shared_weak_count::__release_weak(v39);
          }
        }
        goto LABEL_88;
      }
      ((void (*)(char *, char *))*(&off_24C40DBA8 + v63))(&v75, (char *)&v60 + 8);
    }
    *((_QWORD *)&v60 + 1) = &off_24C3FF020;
    *(_OWORD *)v61 = v72;
    v72 = 0uLL;
    *(_OWORD *)&v61[16] = v73;
    *(_OWORD *)v62 = *(_OWORD *)v74;
    *(_QWORD *)&v62[14] = *(_QWORD *)&v74[14];
    v63 = 1;
LABEL_88:
    std::istream::~istream();
    *(_QWORD *)v65 = MEMORY[0x24BEDB848] + 16;
    if (v68 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_91;
  }
  sub_20B2DCEF8((uint64_t *)&v59[8], v60);
  if (v63 != -1)
    ((void (*)(unsigned __int16 **, char *))off_24C418A58[v63])(&v71, (char *)&v60 + 8);
  *((_QWORD *)&v60 + 1) = &off_24C3FF020;
  *(_OWORD *)v61 = *(_OWORD *)&v65[8];
  *(_OWORD *)&v61[16] = *(_OWORD *)&v65[24];
  *(_OWORD *)v62 = *(_OWORD *)v66;
  *(_QWORD *)&v62[14] = *(_QWORD *)&v66[14];
  v63 = 1;
  sub_20B2DFB0C((const void *)a1, (uint64_t)&v60 + 8);
LABEL_91:
  *(_WORD *)v65 = *(_WORD *)v59;
  *(_OWORD *)&v65[8] = *(_OWORD *)&v59[8];
  v52 = v63;
  *(_DWORD *)&v65[24] = v60;
  v65[32] = 0;
  v69 = -1;
  if (v63 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v53 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v53 != -1)
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 *))*(&off_24C40DBA8 + v53))(&v71, a2 + 16);
      *((_DWORD *)a2 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, char *))off_24C40DC88[v63])(&v64, &v65[32], (char *)&v60 + 8);
    v69 = v52;
    *(_OWORD *)a2 = *(_OWORD *)v65;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v65[12];
    v71 = a2 + 16;
    ((void (*)(unsigned __int16 **))off_24C40DC98[v52])(&v71);
  }
  if (v69 != -1)
    ((void (*)(unsigned __int16 **, _BYTE *))*(&off_24C40DBA8 + v69))(&v71, &v65[32]);
  if (v63 != -1)
    ((void (*)(_BYTE *, char *))*(&off_24C40DBA8 + v63))(v65, (char *)&v60 + 8);
LABEL_99:
  v54 = *(_QWORD *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = *(_QWORD *)(v54 - 8);
  v55 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 112) = *(_QWORD *)(v55 - 8);
  *(_QWORD *)(a1 + 48) = v54 - 8;
  *(_QWORD *)(a1 + 72) = v55 - 8;
  return a1;
}

void sub_20B0E0358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,unsigned int a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,int a39)
{
  uint64_t v39;

  std::istream::~istream();
  a24 = MEMORY[0x24BEDB848] + 16;
  if (a37 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
  if (a21 != -1)
    ((void (*)(uint64_t, uint64_t *))*(&off_24C40DBA8 + a21))(v39 - 65, &a13);
  _Unwind_Resume(a1);
}

void sub_20B0E04B0(uint64_t *a1, _WORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  __int16 v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  __int16 v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AA5C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B45502C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  *(_QWORD *)&v17 = v8;
  v16 = 0;
  sub_20B2DED5C((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B0E0614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0E06A0(uint64_t *a1, _QWORD **a2)
{
  void **v4;
  int v5;
  char *v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *__p[2];
  uint64_t v15;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;

  __p[0] = 0;
  __p[1] = 0;
  v15 = 0;
  v4 = (void **)sub_20B50AA5C(a1);
  ++a1[14];
  v18 = 0;
  v17 = 0uLL;
  sub_20B45502C(v4, (uint64_t)&v17);
  v15 = v18;
  *(_OWORD *)__p = v17;
  v5 = SHIBYTE(v18);
  v6 = (char *)v17;
  v7 = operator new();
  v8 = v7;
  if (v5 >= 0)
    v9 = (char *)__p;
  else
    v9 = v6;
  sub_20B52CF30(v7, v9);
  v16 = 0;
  *(_QWORD *)&v17 = v8;
  sub_20B2DF3C8((uint64_t *)v8, &v16);
  v10 = v16;
  v11 = MEMORY[0x24BEDB7F0];
  v12 = *MEMORY[0x24BEDB7F0];
  *(_QWORD *)v8 = *MEMORY[0x24BEDB7F0];
  v13 = *(_QWORD *)(v11 + 72);
  *(_QWORD *)(v8 + *(_QWORD *)(v12 - 24)) = *(_QWORD *)(v11 + 64);
  *(_QWORD *)(v8 + 24) = MEMORY[0x24BEDB848] + 16;
  *(_QWORD *)(v8 + 16) = v13;
  if (*(char *)(v8 + 111) < 0)
    operator delete(*(void **)(v8 + 88));
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x20BD35758](v8 + 128);
  MEMORY[0x20BD3583C](v8, 0x10B2C40EED050F3);
  **a2 = v10;
  if (SHIBYTE(v15) < 0)
    operator delete(__p[0]);
}

void sub_20B0E0800(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_20B52CE84((uint64_t *)&a17);
  if ((a14 & 0x80000000) == 0)
    _Unwind_Resume(a1);
  operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0E088C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  char *v7;
  std::string::size_type v8;
  std::string *p_n;
  char *v10;
  _QWORD v12[2];
  std::string __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = (char *)sub_20B50AA5C(a2);
  ++a2[14];
  __n.__r_.__value_.__r.__words[0] = 0;
  sub_20B454B2C(v7, &__n);
  v8 = __n.__r_.__value_.__r.__words[0];
  memset(&__n, 0, sizeof(__n));
  if (v8 && (std::string::append(&__n, v8, 0), SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0))
  {
    p_n = (std::string *)__n.__r_.__value_.__r.__words[0];
    if (!__n.__r_.__value_.__r.__words[0])
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      p_n = 0;
    }
  }
  else
  {
    p_n = &__n;
  }
  v12[0] = v8;
  v12[1] = p_n;
  v10 = (char *)sub_20B50AA5C(a2);
  ++a2[14];
  sub_20B50AB74(v10, (uint64_t)v12);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __n;
  *((_BYTE *)&__n.__r_.__value_.__s + 23) = 0;
  __n.__r_.__value_.__s.__data_[0] = 0;
  sub_20AEC8D2C(a1);
  if (SHIBYTE(__n.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__n.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20B0E0A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  uint64_t v17;

  if (a17 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20B0D3A2C(v17);
  _Unwind_Resume(a1);
}

void sub_20B0E0A94(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v5;
  void **v6;
  void *v7;
  _BYTE v8[24];
  __int128 v9;
  uint64_t v10;
  char v11;
  char v12;
  char v13;
  void *v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *__p;
  void **v21;
  char v22;
  char v23[8];
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v24 = 0;
  BYTE8(v24) = 0;
  LOBYTE(v25) = 0;
  v27 = 0;
  sub_20B0E1744(a2, (uint64_t)v23, a4);
  *(_OWORD *)&v8[8] = v24;
  LOBYTE(v9) = 0;
  v11 = 0;
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
    {
      sub_20AEC60F4(&v9, (void *)v25, *((unint64_t *)&v25 + 1));
    }
    else
    {
      v9 = v25;
      v10 = v26;
    }
    v11 = 1;
  }
  v12 = 0;
  v13 = 0;
  LOBYTE(v14) = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(__p) = 0;
  v22 = 0;
  sub_20B0DAD74(a3, (uint64_t)v8);
  if (v22)
  {
    v5 = (void **)__p;
    if (__p)
    {
      v6 = v21;
      v7 = __p;
      if (v21 != __p)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = __p;
      }
      v21 = v5;
      operator delete(v7);
    }
  }
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v16 && v15 < 0)
    operator delete(v14);
  if (v11 && SHIBYTE(v10) < 0)
    operator delete((void *)v9);
  if (v27)
  {
    if (SHIBYTE(v26) < 0)
      operator delete((void *)v25);
  }
}

void sub_20B0E0C40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 48))
  {
    if (*(char *)(v18 - 49) < 0)
      operator delete(*(void **)(v18 - 72));
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0E0C84(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  char v9;
  void **v10;
  char v11;
  char v12;
  void **v13;
  void **v14;
  void **v15;
  uint64_t v16;
  void **v17;
  void **v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  void **v23;
  void **v24;
  void *v25;
  void *v26[2];
  uint64_t v27;
  void *v28[2];
  uint64_t v29;
  char v30;
  void *__p[2];
  uint64_t v32;
  char v33;

  v6 = (_QWORD *)(a2 + 8);
  LODWORD(__p[0]) = 2;
  sub_20B514490(a1, __p);
  v7 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v8 = 2;
  else
    v8 = __p[0];
  if (v8 < 2)
  {
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    sub_20B514B8C(a1, __p);
    LOBYTE(v28[0]) = 0;
    sub_20B513B4C(a1, v28);
    v9 = (char)v28[0];
    *v6 = __p[0];
    *(_BYTE *)(a2 + 16) = v9;
    if (v7 < 2)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20B51680C(a1, (uint64_t)__p);
      if (SHIBYTE(v32) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_24:
          v12 = 0;
          if (SHIBYTE(v32) < 0)
            goto LABEL_27;
          goto LABEL_13;
        }
      }
      else if (SHIBYTE(v32) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_24;
      }
      v12 = 1;
      if (SHIBYTE(v32) < 0)
LABEL_27:
        operator delete(__p[0]);
LABEL_13:
      if (*(_BYTE *)(a1 + 131))
        v11 = 0;
      else
        v11 = v12;
      if ((v11 & 1) == 0)
        goto LABEL_9;
    }
  }
  sub_20B514B8C(a1, v6);
  LOBYTE(__p[0]) = 0;
  sub_20B513B4C(a1, __p);
  *(_BYTE *)(a2 + 16) = __p[0];
  if (v7 >= 2)
    goto LABEL_8;
LABEL_9:
  v10 = (void **)(a2 + 24);
  LOBYTE(v28[0]) = 0;
  sub_20B513B4C(a1, v28);
  if (!LOBYTE(v28[0]))
  {
    if (*(_BYTE *)(a2 + 48))
    {
      if (*(char *)(a2 + 47) < 0)
        operator delete(*v10);
      *(_BYTE *)(a2 + 48) = 0;
      if (a3 < 4)
        return;
LABEL_41:
      sub_20B0E1420(a1, a2 + 56);
      if (a3 == 5)
      {
        v13 = (void **)(a2 + 80);
        LOBYTE(v28[0]) = 0;
        sub_20B513B4C(a1, v28);
        if (LOBYTE(v28[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v13 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          ++*(_QWORD *)(a1 + 80);
          if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
          {
            *(_BYTE *)(a1 + 132) = 1;
          }
          else
          {
            sub_20B51680C(a1, (uint64_t)__p);
            if (*(char *)(a2 + 103) < 0)
              operator delete(*v13);
            *(_OWORD *)v13 = *(_OWORD *)__p;
            *(_QWORD *)(a2 + 96) = v32;
            ++*(_QWORD *)(a1 + 104);
          }
        }
        else if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v13);
          *(_BYTE *)(a2 + 104) = 0;
        }
        return;
      }
      if (a3 < 6)
        return;
      v14 = (void **)(a2 + 80);
      LOBYTE(v28[0]) = 0;
      sub_20B513B4C(a1, v28);
      if (LOBYTE(v28[0]))
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v14 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        ++*(_QWORD *)(a1 + 80);
        if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
        {
          sub_20B51680C(a1, (uint64_t)__p);
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v14);
          *(_OWORD *)v14 = *(_OWORD *)__p;
          *(_QWORD *)(a2 + 96) = v32;
LABEL_73:
          ++*(_QWORD *)(a1 + 104);
LABEL_74:
          v15 = (void **)(a2 + 112);
          LOBYTE(v28[0]) = 0;
          sub_20B513B4C(a1, v28);
          if (LOBYTE(v28[0]))
          {
            if (!*(_BYTE *)(a2 + 136))
            {
              *v15 = 0;
              *(_QWORD *)(a2 + 120) = 0;
              *(_QWORD *)(a2 + 128) = 0;
              *(_BYTE *)(a2 + 136) = 1;
            }
            ++*(_QWORD *)(a1 + 80);
            if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
            {
              sub_20B51680C(a1, (uint64_t)__p);
              if (*(char *)(a2 + 135) < 0)
                operator delete(*v15);
              *(_OWORD *)v15 = *(_OWORD *)__p;
              *(_QWORD *)(a2 + 128) = v32;
              goto LABEL_102;
            }
          }
          else
          {
            if (*(_BYTE *)(a2 + 136))
            {
              if (*(char *)(a2 + 135) < 0)
                operator delete(*v15);
              *(_BYTE *)(a2 + 136) = 0;
            }
            ++*(_QWORD *)(a1 + 80);
            if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
            {
              sub_20B51680C(a1, (uint64_t)__p);
              if (SHIBYTE(v32) < 0)
                operator delete(__p[0]);
LABEL_102:
              ++*(_QWORD *)(a1 + 104);
              LOBYTE(v26[0]) = 0;
              sub_20B513B4C(a1, v26);
              if (!LOBYTE(v26[0]))
              {
LABEL_103:
                ++*(_QWORD *)(a1 + 80);
                if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
                {
                  *(_BYTE *)(a1 + 132) = 1;
                }
                else
                {
                  sub_20B51680C(a1, (uint64_t)v28);
                  if (SHIBYTE(v29) < 0)
                    operator delete(v28[0]);
                  ++*(_QWORD *)(a1 + 104);
                }
                if (*(_BYTE *)(a2 + 168))
                {
                  v20 = *(_QWORD *)(a2 + 144);
                  if (v20)
                  {
                    v21 = *(_QWORD *)(a2 + 152);
                    v22 = *(void **)(a2 + 144);
                    if (v21 != v20)
                    {
                      do
                      {
                        if (*(char *)(v21 - 1) < 0)
                          operator delete(*(void **)(v21 - 24));
                        v21 -= 24;
                      }
                      while (v21 != v20);
                      v22 = *(void **)(a2 + 144);
                    }
                    *(_QWORD *)(a2 + 152) = v20;
                    operator delete(v22);
                  }
                  *(_BYTE *)(a2 + 168) = 0;
                }
                return;
              }
              goto LABEL_89;
            }
          }
          *(_BYTE *)(a1 + 132) = 1;
          LOBYTE(v26[0]) = 0;
          sub_20B513B4C(a1, v26);
          if (!LOBYTE(v26[0]))
            goto LABEL_103;
LABEL_89:
          __p[0] = 0;
          __p[1] = 0;
          v32 = 0;
          v33 = 1;
          ++*(_QWORD *)(a1 + 80);
          if (*(_BYTE *)(a1 + 128) && *(_BYTE *)(a1 + 131))
          {
            *(_BYTE *)(a1 + 132) = 1;
          }
          else
          {
            sub_20B51680C(a1, (uint64_t)v28);
            v16 = *(_QWORD *)(a1 + 104);
            *(_OWORD *)__p = *(_OWORD *)v28;
            v32 = v29;
            *(_QWORD *)(a1 + 104) = v16 + 1;
          }
          sub_20B0D9D38((char *)__p, (uint64_t)v26);
          *(_OWORD *)v28 = *(_OWORD *)v26;
          v29 = v27;
          v26[1] = 0;
          v27 = 0;
          v26[0] = 0;
          v30 = 1;
          sub_20B0DAC38(a2 + 144, (uint64_t)v28);
          if (v30)
          {
            v17 = (void **)v28[0];
            if (v28[0])
            {
              v18 = (void **)v28[1];
              v19 = v28[0];
              if (v28[1] != v28[0])
              {
                do
                {
                  if (*((char *)v18 - 1) < 0)
                    operator delete(*(v18 - 3));
                  v18 -= 3;
                }
                while (v18 != v17);
                v19 = v28[0];
              }
              v28[1] = v17;
              operator delete(v19);
            }
          }
          v23 = (void **)v26[0];
          if (v26[0])
          {
            v24 = (void **)v26[1];
            v25 = v26[0];
            if (v26[1] != v26[0])
            {
              do
              {
                if (*((char *)v24 - 1) < 0)
                  operator delete(*(v24 - 3));
                v24 -= 3;
              }
              while (v24 != v23);
              v25 = v26[0];
            }
            v26[1] = v23;
            operator delete(v25);
          }
          if (v33 && SHIBYTE(v32) < 0)
            operator delete(__p[0]);
          return;
        }
      }
      else
      {
        if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v14);
          *(_BYTE *)(a2 + 104) = 0;
        }
        ++*(_QWORD *)(a1 + 80);
        if (!*(_BYTE *)(a1 + 128) || !*(_BYTE *)(a1 + 131))
        {
          sub_20B51680C(a1, (uint64_t)__p);
          if (SHIBYTE(v32) < 0)
            operator delete(__p[0]);
          goto LABEL_73;
        }
      }
      *(_BYTE *)(a1 + 132) = 1;
      goto LABEL_74;
    }
LABEL_36:
    if (a3 < 4)
      return;
    goto LABEL_41;
  }
  if (!*(_BYTE *)(a2 + 48))
  {
    *v10 = 0;
    *(_QWORD *)(a2 + 32) = 0;
    *(_QWORD *)(a2 + 40) = 0;
    *(_BYTE *)(a2 + 48) = 1;
    ++*(_QWORD *)(a1 + 80);
    if (!*(_BYTE *)(a1 + 128))
      goto LABEL_38;
    goto LABEL_34;
  }
  ++*(_QWORD *)(a1 + 80);
  if (*(_BYTE *)(a1 + 128))
  {
LABEL_34:
    if (!*(_BYTE *)(a1 + 131))
      goto LABEL_38;
    *(_BYTE *)(a1 + 132) = 1;
    goto LABEL_36;
  }
LABEL_38:
  sub_20B51680C(a1, (uint64_t)__p);
  if (*(char *)(a2 + 47) < 0)
    operator delete(*v10);
  *(_OWORD *)v10 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 40) = v32;
  ++*(_QWORD *)(a1 + 104);
  if (a3 >= 4)
    goto LABEL_41;
}

void sub_20B0E13FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0E1420(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  unsigned int v5;
  char v6;
  char v7;
  char v8;
  char v9;
  char v10;
  void *__p;
  uint64_t v12;
  char v13;

  v9 = 0;
  sub_20B513B4C(a1, &v9);
  if (v9)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    LODWORD(__p) = 2;
    sub_20B514490(a1, &__p);
    v4 = __p;
    if (__p >= 2)
      v5 = 2;
    else
      v5 = __p;
    if (v5 < 2)
    {
      __p = 0;
      LOBYTE(v12) = 0;
      sub_20B514B8C(a1, &__p);
      v10 = 0;
      sub_20B513B4C(a1, &v10);
      v6 = v10;
      *(_QWORD *)a2 = __p;
      *(_BYTE *)(a2 + 8) = v6;
      if (v4 < 2)
        return;
    }
    else
    {
      sub_20B514B8C(a1, (_QWORD *)a2);
      LOBYTE(__p) = 0;
      sub_20B513B4C(a1, &__p);
      *(_BYTE *)(a2 + 8) = (_BYTE)__p;
      if (v4 < 2)
        return;
    }
    if (!*(_BYTE *)(a1 + 131))
    {
      do
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
          return;
        sub_20B51680C(a1, (uint64_t)&__p);
        if (v13 < 0)
        {
          if (v12 == 1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p)
          {
LABEL_26:
            v8 = 0;
            if (v13 < 0)
              goto LABEL_29;
            goto LABEL_15;
          }
        }
        else if (v13 == 1 && *(unsigned __int8 *)(a1 + 72) == __p)
        {
          goto LABEL_26;
        }
        v8 = 1;
        if (v13 < 0)
LABEL_29:
          operator delete(__p);
LABEL_15:
        if (*(_BYTE *)(a1 + 131))
          v7 = 0;
        else
          v7 = v8;
      }
      while ((v7 & 1) != 0);
    }
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
}

__n128 sub_20B0E15D0(uint64_t a1, char **a2)
{
  __n128 result;
  char *v5;
  unint64_t v6;
  char *v7;
  char *v8;
  char **v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v14;
  __n128 v15;
  uint64_t v16;

  v14 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  sub_20B514DE0(a1, &v14);
  v5 = a2[1];
  v6 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a2) >> 3);
  if (v14 <= v6)
  {
    if (v14 >= v6)
    {
      v7 = *a2;
      v10 = v5 - v7;
      if (v5 == v7)
        return result;
    }
    else
    {
      v11 = (uint64_t)&(*a2)[24 * v14];
      while (v5 != (char *)v11)
      {
        if (*(v5 - 1) < 0)
          operator delete(*((void **)v5 - 3));
        v5 -= 24;
      }
      a2[1] = (char *)v11;
      v7 = *a2;
      v10 = v11 - (_QWORD)v7;
      if ((char *)v11 == v7)
        return result;
    }
  }
  else
  {
    sub_20B0DDB38(a2, v14 - v6);
    v9 = a2;
    v7 = *a2;
    v8 = v9[1];
    v10 = v8 - v7;
    if (v8 == v7)
      return result;
  }
  v12 = 24 * (v10 / 24);
  do
  {
    while (1)
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128) || *(_BYTE *)(a1 + 131) == 0)
        break;
      *(_BYTE *)(a1 + 132) = 1;
      v7 += 24;
      v12 -= 24;
      if (!v12)
        return result;
    }
    sub_20B51680C(a1, (uint64_t)&v15);
    if (v7[23] < 0)
      operator delete(*(void **)v7);
    result = v15;
    *((_QWORD *)v7 + 2) = v16;
    *(__n128 *)v7 = result;
    v7 += 24;
    ++*(_QWORD *)(a1 + 104);
    v12 -= 24;
  }
  while (v12);
  return result;
}

double sub_20B0E1744(uint64_t a1, uint64_t a2, unsigned int a3)
{
  _QWORD *v6;
  unsigned int v7;
  unsigned int v8;
  double result;
  char v10;
  void **v11;
  char v12;
  char v13;
  char v14;
  void *__p[2];
  uint64_t v16;

  v6 = (_QWORD *)(a2 + 8);
  LODWORD(__p[0]) = 2;
  sub_20B514490(a1, __p);
  v7 = __p[0];
  if (LODWORD(__p[0]) >= 2)
    v8 = 2;
  else
    v8 = __p[0];
  if (v8 < 2)
  {
    __p[0] = 0;
    LOBYTE(__p[1]) = 0;
    sub_20B514B8C(a1, __p);
    v14 = 0;
    sub_20B513B4C(a1, &v14);
    v10 = v14;
    *v6 = __p[0];
    *(_BYTE *)(a2 + 16) = v10;
    if (v7 < 2)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20B51680C(a1, (uint64_t)__p);
      if (SHIBYTE(v16) < 0)
      {
        if (__p[1] == (void *)1 && *(unsigned __int8 *)(a1 + 72) == *(unsigned __int8 *)__p[0])
        {
LABEL_25:
          v13 = 0;
          if (SHIBYTE(v16) < 0)
            goto LABEL_28;
          goto LABEL_14;
        }
      }
      else if (SHIBYTE(v16) == 1 && *(unsigned __int8 *)(a1 + 72) == LOBYTE(__p[0]))
      {
        goto LABEL_25;
      }
      v13 = 1;
      if (SHIBYTE(v16) < 0)
LABEL_28:
        operator delete(__p[0]);
LABEL_14:
      if (*(_BYTE *)(a1 + 131))
        v12 = 0;
      else
        v12 = v13;
      if ((v12 & 1) == 0)
        goto LABEL_9;
    }
  }
  sub_20B514B8C(a1, v6);
  LOBYTE(__p[0]) = 0;
  sub_20B513B4C(a1, __p);
  *(_BYTE *)(a2 + 16) = __p[0];
  if (v7 >= 2)
    goto LABEL_8;
LABEL_9:
  if (a3 < 2)
    return result;
  v11 = (void **)(a2 + 24);
  v14 = 0;
  sub_20B513B4C(a1, &v14);
  if (v14)
  {
    if (*(_BYTE *)(a2 + 48))
    {
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
        goto LABEL_37;
    }
    else
    {
      *v11 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
      ++*(_QWORD *)(a1 + 80);
      if (!*(_BYTE *)(a1 + 128))
      {
LABEL_37:
        sub_20B51680C(a1, (uint64_t)__p);
        if (*(char *)(a2 + 47) < 0)
          operator delete(*v11);
        result = *(double *)__p;
        *(_OWORD *)v11 = *(_OWORD *)__p;
        *(_QWORD *)(a2 + 40) = v16;
        ++*(_QWORD *)(a1 + 104);
        return result;
      }
    }
    if (*(_BYTE *)(a1 + 131))
    {
      *(_BYTE *)(a1 + 132) = 1;
      return result;
    }
    goto LABEL_37;
  }
  if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v11);
    *(_BYTE *)(a2 + 48) = 0;
  }
  return result;
}

void sub_20B0E19B0(const void *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  __int128 v18;
  int v19;
  uint64_t (**v20)();
  __int128 v21;
  __int128 v22;
  _BYTE v23[22];
  unsigned int v24;
  _BYTE v25[40];
  _BYTE v26[22];
  void *__p;
  char v28;
  unsigned int v29;
  _QWORD v30[21];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[22];
  char v35;

  *(_QWORD *)v25 = &off_24C3FF020;
  sub_20B0DC760((uint64_t)&v25[8]);
  sub_20B2DD220((uint64_t)&v17, (uint64_t)v25, 0);
  v4 = *(std::__shared_weak_count **)&v25[16];
  if (*(_QWORD *)&v25[16])
  {
    v5 = (unint64_t *)(*(_QWORD *)&v25[16] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v19 = 0;
  *(_WORD *)v25 = 0;
  sub_20B513FE8((uint64_t)a1, v25);
  v17 = *(_WORD *)v25;
  *(_DWORD *)v25 = 1;
  sub_20B514490((uint64_t)a1, v25);
  *(_QWORD *)v25 = 0;
  sub_20B514DE0((uint64_t)a1, v25);
  *(_QWORD *)&v18 = *(_QWORD *)v25;
  sub_20B514490((uint64_t)a1, (_DWORD *)&v18 + 2);
  sub_20B514490((uint64_t)a1, (_DWORD *)&v18 + 3);
  if (v17 == 1)
  {
    sub_20B2DCEF8((uint64_t *)&v18, v19);
    if (v24 != -1)
      ((void (*)(uint64_t *, uint64_t (***)()))off_24C418A58[v24])(&v31, &v20);
    v20 = &off_24C3FF020;
    v21 = *(_OWORD *)&v25[8];
    v22 = *(_OWORD *)&v25[24];
    *(_OWORD *)v23 = *(_OWORD *)v26;
    *(_QWORD *)&v23[14] = *(_QWORD *)&v26[14];
    v24 = 1;
    sub_20B2DFB0C(a1, (uint64_t)&v20);
    goto LABEL_27;
  }
  v7 = sub_20B2DF950(v17);
  sub_20B0E2228((uint64_t)v25, (uint64_t)a1);
  sub_20B0DBFFC(v30, v7, (uint64_t)&v31);
  if (v24 != -1)
  {
    if (v24 == 1)
    {
      v8 = v32;
      v32 = 0uLL;
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      v21 = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v22 = v33;
      *(_OWORD *)v23 = *(_OWORD *)v34;
      *(_QWORD *)&v23[14] = *(_QWORD *)&v34[14];
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      goto LABEL_24;
    }
    ((void (*)(char *, uint64_t (***)()))*(&off_24C40DBA8 + v24))(&v35, &v20);
  }
  v20 = &off_24C3FF020;
  v21 = v32;
  v32 = 0uLL;
  v22 = v33;
  *(_OWORD *)v23 = *(_OWORD *)v34;
  *(_QWORD *)&v23[14] = *(_QWORD *)&v34[14];
  v24 = 1;
LABEL_24:
  std::istream::~istream();
  *(_QWORD *)v25 = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
LABEL_27:
  *(_WORD *)v25 = v17;
  *(_OWORD *)&v25[8] = v18;
  v15 = v24;
  *(_DWORD *)&v25[24] = v19;
  v25[32] = 0;
  v29 = -1;
  if (v24 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v25;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v25[12];
    v16 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(uint64_t *, uint64_t))*(&off_24C40DBA8 + v16))(&v31, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, uint64_t (***)()))off_24C40DC88[v24])(&v35, &v25[32], &v20);
    v29 = v15;
    *(_OWORD *)a2 = *(_OWORD *)v25;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v25[12];
    v31 = a2 + 32;
    ((void (*)(uint64_t *))off_24C40DC98[v15])(&v31);
  }
  if (v29 != -1)
    ((void (*)(uint64_t *, _BYTE *))*(&off_24C40DBA8 + v29))(&v31, &v25[32]);
  if (v24 != -1)
    ((void (*)(_BYTE *, uint64_t (***)()))*(&off_24C40DBA8 + v24))(v25, &v20);
}

void sub_20B0E1DB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_20B0DE4EC((uint64_t)&a22);
  sub_20B0DCED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E1DD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_20B0C5FDC((uint64_t)&a22);
  sub_20B0DCED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E1DF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned int a34)
{
  uint64_t v34;
  uint64_t v35;

  if (a34 != -1)
    ((void (*)(uint64_t, uint64_t))*(&off_24C40DBA8 + a34))(v35 - 120, v34);
  sub_20B0DCED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E1E78(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  unsigned int v5;
  int v6;
  uint64_t v7;
  char v8;
  char v9;
  int v10;
  uint64_t v11;
  __int128 v12;
  std::__shared_weak_count *v13;
  unint64_t *p_shared_owners;
  unint64_t v15;
  std::__shared_weak_count *v16;
  unint64_t *v17;
  unint64_t v18;
  _BYTE __p[24];
  __int128 v20;
  _BYTE v21[22];
  void *v22;
  char v23;
  _QWORD v24[22];
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  _BYTE v28[22];
  char v29;

  *(_WORD *)__p = 0;
  sub_20B513FE8(a1, __p);
  *a2 = *(_WORD *)__p;
  *(_DWORD *)__p = 2;
  sub_20B514490(a1, __p);
  v4 = *(_DWORD *)__p;
  if (*(_DWORD *)__p >= 2u)
    v5 = 2;
  else
    v5 = *(_DWORD *)__p;
  if (v5 < 2)
  {
    *(_QWORD *)&__p[8] = 0;
    v25 = 0;
    sub_20B514DE0(a1, &v25);
    *(_QWORD *)__p = v25;
    sub_20B514490(a1, &__p[8]);
    sub_20B514490(a1, (_DWORD *)((unint64_t)__p | 0xC));
    *(_OWORD *)(a2 + 4) = *(_OWORD *)__p;
    if (v4 < 2)
      goto LABEL_9;
LABEL_8:
    if (*(_BYTE *)(a1 + 131))
      goto LABEL_9;
    while (1)
    {
      if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + *(_QWORD *)(**(_QWORD **)(a1 + 16) - 24) + 32) & 2) != 0)
        goto LABEL_9;
      sub_20B51680C(a1, (uint64_t)__p);
      if ((__p[23] & 0x80000000) != 0)
      {
        if (*(_QWORD *)&__p[8] == 1 && *(unsigned __int8 *)(a1 + 72) == **(_BYTE **)__p)
        {
LABEL_24:
          v9 = 0;
          if ((__p[23] & 0x80000000) != 0)
            goto LABEL_27;
          goto LABEL_13;
        }
      }
      else if (__p[23] == 1 && *(unsigned __int8 *)(a1 + 72) == __p[0])
      {
        goto LABEL_24;
      }
      v9 = 1;
      if ((__p[23] & 0x80000000) != 0)
LABEL_27:
        operator delete(*(void **)__p);
LABEL_13:
      if (*(_BYTE *)(a1 + 131))
        v8 = 0;
      else
        v8 = v9;
      if ((v8 & 1) == 0)
        goto LABEL_9;
    }
  }
  *(_QWORD *)__p = 0;
  sub_20B514DE0(a1, __p);
  *((_QWORD *)a2 + 1) = *(_QWORD *)__p;
  sub_20B514490(a1, (_DWORD *)a2 + 4);
  sub_20B514490(a1, (_DWORD *)a2 + 5);
  if (v4 >= 2)
    goto LABEL_8;
LABEL_9:
  v6 = *a2;
  if (v6 == 1)
  {
    sub_20B2DD08C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
    v7 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v7 != -1)
      ((void (*)(uint64_t *, unsigned __int16 *))off_24C418A58[v7])(&v25, a2 + 16);
    *((_QWORD *)a2 + 4) = &off_24C3FF020;
    *(_OWORD *)(a2 + 20) = *(_OWORD *)&__p[8];
    *(_OWORD *)(a2 + 28) = v20;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v21;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v21[14];
    *((_DWORD *)a2 + 24) = 1;
    sub_20B2DFB0C((const void *)a1, (uint64_t)(a2 + 16));
    return;
  }
  v10 = sub_20B2DF950(v6);
  sub_20B0E2228((uint64_t)__p, a1);
  sub_20B0DBFFC(v24, v10, (uint64_t)&v25);
  v11 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v11 != -1)
  {
    if ((_DWORD)v11 == 1)
    {
      v12 = v26;
      v26 = 0uLL;
      v13 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
      *(_OWORD *)(a2 + 20) = v12;
      if (v13)
      {
        p_shared_owners = (unint64_t *)&v13->__shared_owners_;
        do
          v15 = __ldaxr(p_shared_owners);
        while (__stlxr(v15 - 1, p_shared_owners));
        if (!v15)
        {
          ((void (*)(std::__shared_weak_count *))v13->__on_zero_shared)(v13);
          std::__shared_weak_count::__release_weak(v13);
        }
      }
      *(_OWORD *)(a2 + 28) = v27;
      *(_OWORD *)(a2 + 36) = *(_OWORD *)v28;
      *(_QWORD *)(a2 + 43) = *(_QWORD *)&v28[14];
      v16 = (std::__shared_weak_count *)*((_QWORD *)&v26 + 1);
      if (*((_QWORD *)&v26 + 1))
      {
        v17 = (unint64_t *)(*((_QWORD *)&v26 + 1) + 8);
        do
          v18 = __ldaxr(v17);
        while (__stlxr(v18 - 1, v17));
        if (!v18)
        {
          ((void (*)(std::__shared_weak_count *))v16->__on_zero_shared)(v16);
          std::__shared_weak_count::__release_weak(v16);
        }
      }
      goto LABEL_42;
    }
    ((void (*)(char *, unsigned __int16 *))*(&off_24C40DBA8 + v11))(&v29, a2 + 16);
  }
  *((_QWORD *)a2 + 4) = &off_24C3FF020;
  *(_OWORD *)(a2 + 20) = v26;
  v26 = 0uLL;
  *(_OWORD *)(a2 + 28) = v27;
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v28;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v28[14];
  *((_DWORD *)a2 + 24) = 1;
LABEL_42:
  std::istream::~istream();
  *(_QWORD *)__p = MEMORY[0x24BEDB848] + 16;
  if (v23 < 0)
    operator delete(v22);
  std::streambuf::~streambuf();
}

void sub_20B0E2214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0DE4EC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0E2228(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string *v8;
  _QWORD v10[2];
  std::string v11;
  std::string::size_type __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  sub_20B514DE0(a2, &__n);
  memset(&v11, 0, sizeof(v11));
  if (!__n)
  {
    v7 = 0;
    goto LABEL_8;
  }
  std::string::append(&v11, __n, 0);
  v7 = __n;
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    v8 = &v11;
    goto LABEL_9;
  }
  v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (!v11.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v8 = 0;
  }
LABEL_9:
  v10[0] = v7;
  v10[1] = v8;
  sub_20B516A0C(a2, (uint64_t)v10);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v11;
  *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
  v11.__r_.__value_.__s.__data_[0] = 0;
  sub_20AEC8D2C(a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20B0E23AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20B0D3A2C(v16);
  _Unwind_Resume(a1);
}

void sub_20B0E2418(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  std::logic_error *exception;
  char v14;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 >= 3)
    sub_20B42BA30(a2);
  if (v9 >= 6)
    v10 = 6;
  else
    v10 = v9;
  if (v10 < 3)
  {
    sub_20B0E252C((uint64_t)&v14, a2, a3, v10);
    if (v9 < 3)
      return;
  }
  else
  {
    sub_20B0E273C(a2, a3, v10);
    if (v9 < 3)
      return;
  }
  v11 = a2[12];
  v12 = a2[9];
  a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
  a2[9] = v12 - 8;
  a2[12] = v11 - 8;
}

void sub_20B0E2518(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E252C(uint64_t a1, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  _BYTE v10[24];
  __int128 v11;
  uint64_t v12;
  char v13;
  char v14;
  char v15;
  void *v16;
  char v17;
  char v18;
  void *v19;
  char v20;
  char v21;
  void *__p;
  void **v23;
  char v24;
  __int128 v25;
  __int128 v26;
  uint64_t v27;
  char v28;
  uint64_t v29;

  v29 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v25 = 0;
  BYTE8(v25) = 0;
  LOBYTE(v26) = 0;
  v28 = 0;
  sub_20B0E27F4((uint64_t)v10, a2, (uint64_t)&v25);
  if (a4 >= 2)
    sub_20B0E2AA4(a2, (uint64_t)&v26);
  *(_OWORD *)&v10[8] = v25;
  LOBYTE(v11) = 0;
  v13 = 0;
  if (v28)
  {
    if (SHIBYTE(v27) < 0)
    {
      sub_20AEC60F4(&v11, (void *)v26, *((unint64_t *)&v26 + 1));
    }
    else
    {
      v11 = v26;
      v12 = v27;
    }
    v13 = 1;
  }
  v14 = 0;
  v15 = 0;
  LOBYTE(v16) = 0;
  v18 = 0;
  LOBYTE(v19) = 0;
  v21 = 0;
  LOBYTE(__p) = 0;
  v24 = 0;
  sub_20B0DAD74(a3, (uint64_t)v10);
  if (v24)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v23;
      v9 = __p;
      if (v23 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v23 = v7;
      operator delete(v9);
    }
  }
  if (v21 && v20 < 0)
    operator delete(v19);
  if (v18 && v17 < 0)
    operator delete(v16);
  if (v13 && SHIBYTE(v12) < 0)
    operator delete((void *)v11);
  if (v28)
  {
    if (SHIBYTE(v27) < 0)
      operator delete((void *)v26);
  }
}

void sub_20B0E26F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0E273C(_QWORD *a1, uint64_t a2, unsigned int a3)
{
  char v6;

  sub_20B0E27F4((uint64_t)&v6, a1, a2 + 8);
  sub_20B0E2AA4(a1, a2 + 24);
  if (a3 >= 4)
  {
    sub_20B0E2B74(a1, a2 + 56);
    if (a3 == 5)
    {
      sub_20B0E2AA4(a1, a2 + 80);
    }
    else if (a3 >= 6)
    {
      sub_20B0E2AA4(a1, a2 + 80);
      sub_20B0E2AA4(a1, a2 + 112);
      sub_20B0E2C38(a1, a2 + 144);
    }
  }
}

_QWORD *sub_20B0E27F4(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  unsigned int v9;
  _QWORD *result;
  uint64_t v11;
  uint64_t v12;
  char v13;
  std::logic_error *exception;
  uint64_t v15;
  char v16;

  v3 = a2[6];
  v4 = a2[7];
  v5 = v4 >= v3;
  v6 = v4 - v3;
  if (!v5)
    v6 = 0;
  if (v6 <= 3)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v9 = *(_DWORD *)(a2[3] + v3);
  a2[6] = v3 + 4;
  if (v9 <= 1)
  {
    v15 = 0;
    v16 = 0;
    result = sub_20B0E29D0(a2, (uint64_t)&v15);
    v13 = v16;
    *(_QWORD *)a3 = v15;
    *(_BYTE *)(a3 + 8) = v13;
  }
  else
  {
    sub_20B42BA30(a2);
    result = sub_20B0E28FC(a2, a3);
    v11 = a2[12];
    v12 = a2[9];
    a2[6] = *(_QWORD *)(v11 - 8) + *(_QWORD *)(v12 - 8) + 8;
    a2[9] = v12 - 8;
    a2[12] = v11 - 8;
  }
  return result;
}

void sub_20B0E28E8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0E28FC(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7
    || (*(_QWORD *)a2 = *(_QWORD *)(result[3] + v2), v6 = result[6], v7 = result[7], result[6] = v6 + 8, v7 <= v6 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_BYTE *)(result[3] + v6 + 8);
  result[6] = v6 + 9;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

void sub_20B0E29A8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E29BC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0E29D0(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  uint64_t v6;
  unint64_t v7;
  char v8;
  std::logic_error *exception;

  v2 = result[6];
  v3 = result[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 7
    || (*(_QWORD *)a2 = *(_QWORD *)(result[3] + v2), v6 = result[6], v7 = result[7], result[6] = v6 + 8, v7 <= v6 + 8))
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_BYTE *)(result[3] + v6 + 8);
  result[6] = v6 + 9;
  *(_BYTE *)(a2 + 8) = v8;
  return result;
}

void sub_20B0E2A7C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E2A90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E2AA4(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  std::logic_error *exception;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v4 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    sub_20B42BD80(a1, a2);
  }
  else if (*(_BYTE *)(a2 + 24))
  {
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_20B0E2B60(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0E2B74(_QWORD *result, uint64_t a2)
{
  unint64_t v2;
  int v3;
  std::logic_error *exception;
  char v5;

  v2 = result[6];
  if (result[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v3 = *(unsigned __int8 *)(result[3] + v2);
  result[6] = v2 + 1;
  if (v3)
  {
    if (!*(_BYTE *)(a2 + 16))
    {
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a2 + 8) = 0;
      *(_BYTE *)(a2 + 16) = 1;
    }
    return sub_20B0E27F4((uint64_t)&v5, result, a2);
  }
  else if (*(_BYTE *)(a2 + 16))
  {
    *(_BYTE *)(a2 + 16) = 0;
  }
  return result;
}

void sub_20B0E2C24(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E2C38(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  int v4;
  void **v5;
  void **v6;
  void **v7;
  std::logic_error *exception;

  v2 = a1[6];
  if (a1[7] <= v2)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v4 = *(unsigned __int8 *)(a1[3] + v2);
  a1[6] = v2 + 1;
  if (v4)
  {
    if (!*(_BYTE *)(a2 + 24))
    {
      *(_QWORD *)a2 = 0;
      *(_QWORD *)(a2 + 8) = 0;
      *(_QWORD *)(a2 + 16) = 0;
      *(_BYTE *)(a2 + 24) = 1;
    }
    sub_20B0E2D50(a1, a2);
  }
  else if (*(_BYTE *)(a2 + 24))
  {
    v5 = *(void ***)a2;
    if (*(_QWORD *)a2)
    {
      v6 = *(void ***)(a2 + 8);
      v7 = *(void ***)a2;
      if (v6 != v5)
      {
        do
        {
          if (*((char *)v6 - 1) < 0)
            operator delete(*(v6 - 3));
          v6 -= 3;
        }
        while (v6 != v5);
        v7 = *(void ***)a2;
      }
      *(_QWORD *)(a2 + 8) = v5;
      operator delete(v7);
    }
    *(_BYTE *)(a2 + 24) = 0;
  }
}

void sub_20B0E2D3C(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E2D50(_QWORD *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  std::logic_error *exception;

  v3 = a1[6];
  v2 = a1[7];
  v4 = v2 >= v3;
  v5 = v2 - v3;
  if (!v4)
    v5 = 0;
  if (v5 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v8 = *(_QWORD *)(a1[3] + v3);
  a1[6] = v3 + 8;
  v9 = *(_QWORD *)(a2 + 8);
  v10 = 0xAAAAAAAAAAAAAAABLL * ((v9 - *(_QWORD *)a2) >> 3);
  if (v8 > v10)
  {
    sub_20B0DDB38((char **)a2, v8 - v10);
    v13 = a2;
    v11 = *(char **)a2;
    v12 = *(char **)(v13 + 8);
    v14 = v12 - v11;
    if (v12 == v11)
      return;
    goto LABEL_16;
  }
  if (v8 >= v10)
  {
    v11 = *(char **)a2;
    v14 = v9 - *(_QWORD *)a2;
    if (v9 == *(_QWORD *)a2)
      return;
    goto LABEL_16;
  }
  v15 = *(_QWORD *)a2 + 24 * v8;
  while (v9 != v15)
  {
    if (*(char *)(v9 - 1) < 0)
      operator delete(*(void **)(v9 - 24));
    v9 -= 24;
  }
  *(_QWORD *)(a2 + 8) = v15;
  v11 = *(char **)a2;
  v14 = v15 - (_QWORD)v11;
  if ((char *)v15 != v11)
  {
LABEL_16:
    v16 = 24 * (v14 / 24);
    do
    {
      sub_20B42BD80(a1, (uint64_t)v11);
      v11 += 24;
      v16 -= 24;
    }
    while (v16);
  }
}

void sub_20B0E2E90(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E2EA4(_QWORD *a1, unsigned __int16 *a2)
{
  unint64_t v2;
  unint64_t v3;
  BOOL v4;
  unint64_t v5;
  unsigned int v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned __int16 v13;
  _OWORD *v14;
  unint64_t v15;
  unsigned int v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  __int128 v29;
  std::__shared_weak_count *v30;
  unint64_t *p_shared_owners;
  unint64_t v32;
  std::__shared_weak_count *v33;
  unint64_t *v34;
  unint64_t v35;
  std::__shared_weak_count *v36;
  unint64_t *v37;
  unint64_t v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unsigned __int16 v42;
  unint64_t v43;
  uint64_t v44;
  __int128 v45;
  int v46;
  __int128 v47;
  std::__shared_weak_count *v48;
  unint64_t *v49;
  unint64_t v50;
  std::__shared_weak_count *v51;
  unint64_t *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  std::logic_error *exception;
  std::logic_error *v59;
  unsigned __int16 v60;
  __int128 v61;
  __int128 v62;
  _BYTE v63[32];
  _BYTE v64[22];
  unsigned int v65;
  unsigned __int16 *v66;
  __int128 v67;
  __int128 v68;
  _BYTE v69[22];
  char v70;
  _BYTE v71[40];
  _BYTE v72[22];
  void *__p;
  char v74;
  unsigned int v75;
  _QWORD v76[21];

  v2 = a1[6];
  v3 = a1[7];
  v4 = v3 >= v2;
  v5 = v3 - v2;
  if (!v4)
    v5 = 0;
  if (v5 <= 3)
    goto LABEL_82;
  v8 = *(_DWORD *)(a1[3] + v2);
  a1[6] = v2 + 4;
  if (v8 > 1)
  {
    sub_20B42BA30(a1);
    v9 = a1[6];
    v10 = a1[7];
    v11 = v10 - v9;
    if (v10 < v9)
      v11 = 0;
    if (v11 > 1)
    {
      v12 = a1[3];
      v13 = *(_WORD *)(v12 + v9);
      a1[6] = v9 + 2;
      *a2 = v13;
      v14 = a2 + 4;
      v4 = v10 >= v9 + 2;
      v15 = v10 - (v9 + 2);
      if (!v4)
        v15 = 0;
      if (v15 > 3)
      {
        v16 = *(_DWORD *)(v12 + v9 + 2);
        a1[6] = v9 + 6;
        if (v16 <= 1)
        {
          *(_OWORD *)v71 = 1uLL;
          sub_20B0E3828(a1, v71);
          *v14 = *(_OWORD *)v71;
          v26 = *a2;
          if (v26 != 1)
          {
LABEL_19:
            v27 = sub_20B2DF950(v26);
            sub_20B0E3900((uint64_t)v71, a1);
            sub_20B0DBFFC(v76, v27, (uint64_t)&v60);
            v28 = *((unsigned int *)a2 + 24);
            if ((_DWORD)v28 != -1)
            {
              if ((_DWORD)v28 == 1)
              {
                v29 = v61;
                v61 = 0uLL;
                v30 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
                *(_OWORD *)(a2 + 20) = v29;
                if (v30)
                {
                  p_shared_owners = (unint64_t *)&v30->__shared_owners_;
                  do
                    v32 = __ldaxr(p_shared_owners);
                  while (__stlxr(v32 - 1, p_shared_owners));
                  if (!v32)
                  {
                    ((void (*)(std::__shared_weak_count *))v30->__on_zero_shared)(v30);
                    std::__shared_weak_count::__release_weak(v30);
                  }
                }
                *(_OWORD *)(a2 + 28) = v62;
                *(_OWORD *)(a2 + 36) = *(_OWORD *)v63;
                *(_QWORD *)(a2 + 43) = *(_QWORD *)&v63[14];
                v33 = (std::__shared_weak_count *)*((_QWORD *)&v61 + 1);
                if (*((_QWORD *)&v61 + 1))
                {
                  v34 = (unint64_t *)(*((_QWORD *)&v61 + 1) + 8);
                  do
                    v35 = __ldaxr(v34);
                  while (__stlxr(v35 - 1, v34));
                  if (!v35)
                  {
                    ((void (*)(std::__shared_weak_count *))v33->__on_zero_shared)(v33);
                    std::__shared_weak_count::__release_weak(v33);
                  }
                }
                goto LABEL_64;
              }
              ((void (*)(unsigned __int16 **, unsigned __int16 *))*(&off_24C40DBA8 + v28))(&v66, a2 + 16);
            }
            *((_QWORD *)a2 + 4) = &off_24C3FF020;
            *(_OWORD *)(a2 + 20) = v61;
            v61 = 0uLL;
            *(_OWORD *)(a2 + 28) = v62;
            *(_OWORD *)(a2 + 36) = *(_OWORD *)v63;
            *(_QWORD *)(a2 + 43) = *(_QWORD *)&v63[14];
            *((_DWORD *)a2 + 24) = 1;
LABEL_64:
            std::istream::~istream();
            *(_QWORD *)v71 = MEMORY[0x24BEDB848] + 16;
            if (v74 < 0)
              operator delete(__p);
            std::streambuf::~streambuf();
LABEL_67:
            v54 = a1[12];
            v55 = a1[9];
            a1[6] = *(_QWORD *)(v54 - 8) + *(_QWORD *)(v55 - 8) + 8;
            a1[9] = v55 - 8;
            a1[12] = v54 - 8;
            return;
          }
LABEL_47:
          sub_20B2DD08C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
          v44 = *((unsigned int *)a2 + 24);
          if ((_DWORD)v44 != -1)
            ((void (*)(unsigned __int16 *, unsigned __int16 *))off_24C418A58[v44])(&v60, a2 + 16);
          *((_QWORD *)a2 + 4) = &off_24C3FF020;
          v45 = *(_OWORD *)&v71[24];
          *(_OWORD *)(a2 + 20) = *(_OWORD *)&v71[8];
          *(_OWORD *)(a2 + 28) = v45;
          *(_OWORD *)(a2 + 36) = *(_OWORD *)v72;
          *(_QWORD *)(a2 + 43) = *(_QWORD *)&v72[14];
          *((_DWORD *)a2 + 24) = 1;
          sub_20B2DFB0C(a1, (uint64_t)(a2 + 16));
          goto LABEL_67;
        }
        sub_20B42BA30(a1);
        v18 = a1[6];
        v17 = a1[7];
        v19 = v17 - v18;
        if (v17 < v18)
          v19 = 0;
        if (v19 > 7)
        {
          v20 = a1[3];
          v21 = *(_QWORD *)(v20 + v18);
          v22 = v18 + 8;
          a1[6] = v22;
          *(_QWORD *)v14 = v21;
          v4 = v17 >= v22;
          v23 = v17 - v22;
          if (!v4)
            v23 = 0;
          if (v23 > 7)
          {
            *((_QWORD *)a2 + 2) = *(_QWORD *)(v20 + v22);
            a1[6] += 8;
            v24 = a1[12];
            v25 = a1[9];
            a1[6] = *(_QWORD *)(v24 - 8) + *(_QWORD *)(v25 - 8) + 8;
            a1[9] = v25 - 8;
            a1[12] = v24 - 8;
            v26 = *a2;
            if (v26 != 1)
              goto LABEL_19;
            goto LABEL_47;
          }
          exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
          sub_20AEC74EC(exception, "Not enough data to read span");
LABEL_86:
          __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
        }
      }
    }
LABEL_82:
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    goto LABEL_86;
  }
  *(_QWORD *)v71 = &off_24C3FF020;
  sub_20B0DC760((uint64_t)&v71[8]);
  sub_20B2DD220((uint64_t)&v60, (uint64_t)v71, 0);
  v36 = *(std::__shared_weak_count **)&v71[16];
  if (*(_QWORD *)&v71[16])
  {
    v37 = (unint64_t *)(*(_QWORD *)&v71[16] + 8);
    do
      v38 = __ldaxr(v37);
    while (__stlxr(v38 - 1, v37));
    if (!v38)
    {
      ((void (*)(std::__shared_weak_count *))v36->__on_zero_shared)(v36);
      std::__shared_weak_count::__release_weak(v36);
    }
  }
  LODWORD(v62) = 0;
  v39 = a1[6];
  v40 = a1[7];
  v41 = v40 - v39;
  if (v40 < v39)
    v41 = 0;
  if (v41 <= 1)
    goto LABEL_83;
  v42 = *(_WORD *)(a1[3] + v39);
  a1[6] = v39 + 2;
  v60 = v42;
  v4 = v40 >= v39 + 2;
  v43 = v40 - (v39 + 2);
  if (!v4)
    v43 = 0;
  if (v43 <= 3)
  {
LABEL_83:
    v59 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v59, "Not enough data to read");
    v59->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v59, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a1[6] = v39 + 6;
  sub_20B0E3828(a1, &v61);
  if (v60 != 1)
  {
    v46 = sub_20B2DF950(v60);
    sub_20B0E3900((uint64_t)v71, a1);
    sub_20B0DBFFC(v76, v46, (uint64_t)&v66);
    if (v65 != -1)
    {
      if (v65 == 1)
      {
        v47 = v67;
        v67 = 0uLL;
        v48 = *(std::__shared_weak_count **)&v63[8];
        *(_OWORD *)v63 = v47;
        if (v48)
        {
          v49 = (unint64_t *)&v48->__shared_owners_;
          do
            v50 = __ldaxr(v49);
          while (__stlxr(v50 - 1, v49));
          if (!v50)
          {
            ((void (*)(std::__shared_weak_count *))v48->__on_zero_shared)(v48);
            std::__shared_weak_count::__release_weak(v48);
          }
        }
        *(_OWORD *)&v63[16] = v68;
        *(_OWORD *)v64 = *(_OWORD *)v69;
        *(_QWORD *)&v64[14] = *(_QWORD *)&v69[14];
        v51 = (std::__shared_weak_count *)*((_QWORD *)&v67 + 1);
        if (*((_QWORD *)&v67 + 1))
        {
          v52 = (unint64_t *)(*((_QWORD *)&v67 + 1) + 8);
          do
            v53 = __ldaxr(v52);
          while (__stlxr(v53 - 1, v52));
          if (!v53)
          {
            ((void (*)(std::__shared_weak_count *))v51->__on_zero_shared)(v51);
            std::__shared_weak_count::__release_weak(v51);
          }
        }
        goto LABEL_70;
      }
      ((void (*)(char *, char *))*(&off_24C40DBA8 + v65))(&v70, (char *)&v62 + 8);
    }
    *((_QWORD *)&v62 + 1) = &off_24C3FF020;
    *(_OWORD *)v63 = v67;
    v67 = 0uLL;
    *(_OWORD *)&v63[16] = v68;
    *(_OWORD *)v64 = *(_OWORD *)v69;
    *(_QWORD *)&v64[14] = *(_QWORD *)&v69[14];
    v65 = 1;
LABEL_70:
    std::istream::~istream();
    *(_QWORD *)v71 = MEMORY[0x24BEDB848] + 16;
    if (v74 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    goto LABEL_73;
  }
  sub_20B2DCEF8((uint64_t *)&v61, v62);
  if (v65 != -1)
    ((void (*)(unsigned __int16 **, char *))off_24C418A58[v65])(&v66, (char *)&v62 + 8);
  *((_QWORD *)&v62 + 1) = &off_24C3FF020;
  *(_OWORD *)v63 = *(_OWORD *)&v71[8];
  *(_OWORD *)&v63[16] = *(_OWORD *)&v71[24];
  *(_OWORD *)v64 = *(_OWORD *)v72;
  *(_QWORD *)&v64[14] = *(_QWORD *)&v72[14];
  v65 = 1;
  sub_20B2DFB0C(a1, (uint64_t)&v62 + 8);
LABEL_73:
  *(_WORD *)v71 = v60;
  *(_OWORD *)&v71[8] = v61;
  v56 = v65;
  *(_DWORD *)&v71[24] = v62;
  v71[32] = 0;
  v75 = -1;
  if (v65 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v71;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v71[12];
    v57 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v57 != -1)
    {
      ((void (*)(unsigned __int16 **, unsigned __int16 *))*(&off_24C40DBA8 + v57))(&v66, a2 + 16);
      *((_DWORD *)a2 + 24) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, char *))off_24C40DC88[v65])(&v70, &v71[32], (char *)&v62 + 8);
    v75 = v56;
    *(_OWORD *)a2 = *(_OWORD *)v71;
    *(_OWORD *)(a2 + 6) = *(_OWORD *)&v71[12];
    v66 = a2 + 16;
    ((void (*)(unsigned __int16 **))off_24C40DC98[v56])(&v66);
  }
  if (v75 != -1)
    ((void (*)(unsigned __int16 **, _BYTE *))*(&off_24C40DBA8 + v75))(&v66, &v71[32]);
  if (v65 != -1)
    ((void (*)(_BYTE *, char *))*(&off_24C40DBA8 + v65))(v71, (char *)&v62 + 8);
}

void sub_20B0E36C0(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E36D4(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E36F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20B0DE4EC((uint64_t)&a31);
  sub_20B0DCED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E370C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20B0DE4EC((uint64_t)&a31);
  _Unwind_Resume(a1);
}

void sub_20B0E3720(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  void *v9;

  __cxa_free_exception(v9);
  sub_20B0DCED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E3740(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E3754(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E3770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_20B0C5FDC((uint64_t)&a31);
  sub_20B0DCED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E378C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,unsigned int a43)
{
  uint64_t v43;

  if (a43 != -1)
    ((void (*)(char *, uint64_t))*(&off_24C40DBA8 + a43))(&a22, v43);
  sub_20B0DCED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0E3828(_QWORD *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  BOOL v8;
  unint64_t v9;
  std::logic_error *exception;

  v3 = result[6];
  v2 = result[7];
  v4 = v2 - v3;
  if (v2 < v3)
    v4 = 0;
  if (v4 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read");
    goto LABEL_10;
  }
  v5 = result[3];
  v6 = *(_QWORD *)(v5 + v3);
  v7 = v3 + 8;
  result[6] = v7;
  *a2 = v6;
  v8 = v2 >= v7;
  v9 = v2 - v7;
  if (!v8)
    v9 = 0;
  if (v9 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    sub_20AEC74EC(exception, "Not enough data to read span");
LABEL_10:
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  a2[1] = *(_QWORD *)(v5 + v7);
  result[6] += 8;
  return result;
}

void sub_20B0E38D8(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E38EC(_Unwind_Exception *a1)
{
  void *v1;

  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0E3900(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  std::string::size_type v11;
  std::string *p_dst;
  unint64_t v13;
  unint64_t v14;
  std::string::size_type v15;
  std::logic_error *exception;
  std::logic_error *v18;
  std::string __dst;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  v7 = a2[6];
  v8 = a2[7];
  v9 = v8 >= v7;
  v10 = v8 - v7;
  if (!v9)
    v10 = 0;
  if (v10 <= 7)
  {
    exception = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(exception, "Not enough data to read");
    exception->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(exception, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  v11 = *(_QWORD *)(a2[3] + v7);
  a2[6] = v7 + 8;
  memset(&__dst, 0, sizeof(__dst));
  if (v11 && (std::string::append(&__dst, v11, 0), SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0))
  {
    p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
    if (!__dst.__r_.__value_.__r.__words[0])
    {
      if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
      {
        abort();
      }
      p_dst = 0;
    }
  }
  else
  {
    p_dst = &__dst;
  }
  v13 = a2[6];
  v14 = a2[7];
  v9 = v14 >= v13;
  v15 = v14 - v13;
  if (!v9)
    v15 = 0;
  if (v15 < v11)
  {
    v18 = (std::logic_error *)__cxa_allocate_exception(0x10uLL);
    std::logic_error::logic_error(v18, "Not enough data to read binary blob");
    v18->__vftable = (std::logic_error_vtbl *)(MEMORY[0x24BEDB8C0] + 16);
    __cxa_throw(v18, (struct type_info *)off_24C3F18D8, MEMORY[0x24BEDAB00]);
  }
  memcpy(p_dst, (const void *)(a2[3] + v13), v11);
  a2[6] += v11;
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = __dst;
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
  __dst.__r_.__value_.__s.__data_[0] = 0;
  sub_20AEC8D2C(a1);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20B0E3B34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  uint64_t v15;

  if (a15 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20B0D3A2C(v15);
  _Unwind_Resume(a1);
}

void sub_20B0E3BD4(int *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unsigned int v4;
  int v7;
  int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;
  char v13;

  v4 = a4;
  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 3)
    {
      v9 = 0;
      goto LABEL_15;
    }
    v12 = 3;
    (*(void (**)(uint64_t, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 7)
    {
      v10 = v12;
      v11 = sub_20B0E3CF4();
      sub_20B520518((std::string *)v11, v10, 6u);
    }
    v7 = *a1;
  }
  v9 = 0;
  if (v4 >= 3 && v7 >= 1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v9 = 1;
  }
  if (v4 >= 6)
    a4 = 6;
  else
    a4 = v4;
  if (a4 < 3)
  {
LABEL_15:
    sub_20B0E41CC((uint64_t)&v13, a2, a3, a4);
    if (!v9)
      return;
    goto LABEL_16;
  }
  sub_20B0E4440(a2, a3, a4);
  if (!v9)
    return;
LABEL_16:
  (*(void (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
}

__int128 *sub_20B0E3CF4()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546357D8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546357D8))
    return &xmmword_2546357C0;
  v2 = sub_20B0E3DD0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_2546357C0, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_2546357D0 = v2->__r_.__value_.__r.__words[2];
    xmmword_2546357C0 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546357C0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546357D8);
  return &xmmword_2546357C0;
}

void sub_20B0E3DB8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546357D8);
  _Unwind_Resume(a1);
}

std::string *sub_20B0E3DD0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_2546357F8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_2546357F8))
    return &stru_2546357E0;
  sub_20B0E3FE8((uint64_t)__p);
  sub_20B0E3EC0((char *)__p, &stru_2546357E0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_2546357E0, &dword_20AEBB000);
  __cxa_guard_release(&qword_2546357F8);
  return &stru_2546357E0;
}

void sub_20B0E3E80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_2546357F8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_2546357F8);
  _Unwind_Resume(a1);
}

void sub_20B0E3EC0(char *a1@<X0>, std::string *a2@<X8>)
{
  std::string *v4;
  __int128 v5;
  int64x2_t v6;
  int8x16_t v7;
  void **v8;
  void **v9;
  void *v10;
  void *__p;
  void **v12;
  void *__dst[2];
  std::string::size_type v14;
  uint64_t v15;

  v15 = *MEMORY[0x24BDAC8D0];
  v4 = sub_20B0C0A70();
  if (SHIBYTE(v4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(__dst, v4->__r_.__value_.__l.__data_, v4->__r_.__value_.__l.__size_);
  }
  else
  {
    v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
    v14 = v4->__r_.__value_.__r.__words[2];
    *(_OWORD *)__dst = v5;
  }
  sub_20AEC7620(&__p, (uint64_t)__dst, 1uLL);
  sub_20B53170C(a1, (uint64_t *)&__p, a2, v6, v7);
  v8 = (void **)__p;
  if (__p)
  {
    v9 = v12;
    v10 = __p;
    if (v12 != __p)
    {
      do
      {
        if (*((char *)v9 - 1) < 0)
          operator delete(*(v9 - 3));
        v9 -= 3;
      }
      while (v9 != v8);
      v10 = __p;
    }
    v12 = v8;
    operator delete(v10);
  }
  if (SHIBYTE(v14) < 0)
    operator delete(__dst[0]);
}

void sub_20B0E3FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_20AEC2E90(&a10);
  if (a18 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0E3FE8(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635818);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635818))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::viz::DataInfoSample<6>]", qword_254635800);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635800, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635818);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635838);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635838))
  {
    v5 = sub_20AED4780(qword_254635800, "<", 0);
    sub_20AED467C(qword_254635800, 0, v5, qword_254635820);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635820, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635838);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635858);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635858))
  {
    sub_20B531658((uint64_t)qword_254635820, (uint64_t)&xmmword_254635840);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635840, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635858);
  }
  if (byte_254635857 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635840, *((unint64_t *)&xmmword_254635840 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635840;
    *(_QWORD *)(a1 + 16) = unk_254635850;
  }
}

void sub_20B0E4184(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635858);
  _Unwind_Resume(a1);
}

void sub_20B0E419C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635838);
  _Unwind_Resume(a1);
}

void sub_20B0E41B4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635818);
  _Unwind_Resume(a1);
}

void sub_20B0E41CC(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  void **v7;
  void **v8;
  void *v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  void *v17;
  char v18;
  char v19;
  void *v20;
  char v21;
  char v22;
  void *__p;
  void **v24;
  char v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  char v29;
  uint64_t v30;

  v30 = *MEMORY[0x24BDAC8D0];
  *(_QWORD *)&v26 = 0;
  BYTE8(v26) = 0;
  LOBYTE(v27) = 0;
  v29 = 0;
  v10 = *(_QWORD *)(a2 + 8);
  sub_20B0E4A88((int *)&v10, (_BYTE *)a2, (uint64_t)&v26);
  if (a4 >= 2)
  {
    LOBYTE(v10) = 0;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a2 + 80))(a2, &v10);
    if ((_BYTE)v10)
    {
      if (!v29)
      {
        v27 = 0uLL;
        v28 = 0;
        v29 = 1;
      }
      (*(void (**)(uint64_t, __int128 *))(*(_QWORD *)a2 + 144))(a2, &v27);
    }
    else if (v29)
    {
      if (SHIBYTE(v28) < 0)
        operator delete((void *)v27);
      v29 = 0;
    }
  }
  v11 = v26;
  LOBYTE(v12) = 0;
  v14 = 0;
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
    {
      sub_20AEC60F4(&v12, (void *)v27, *((unint64_t *)&v27 + 1));
    }
    else
    {
      v12 = v27;
      v13 = v28;
    }
    v14 = 1;
  }
  v15 = 0;
  v16 = 0;
  LOBYTE(v17) = 0;
  v19 = 0;
  LOBYTE(v20) = 0;
  v22 = 0;
  LOBYTE(__p) = 0;
  v25 = 0;
  sub_20B0DAD74(a3, (uint64_t)&v10);
  if (v25)
  {
    v7 = (void **)__p;
    if (__p)
    {
      v8 = v24;
      v9 = __p;
      if (v24 != __p)
      {
        do
        {
          if (*((char *)v8 - 1) < 0)
            operator delete(*(v8 - 3));
          v8 -= 3;
        }
        while (v8 != v7);
        v9 = __p;
      }
      v24 = v7;
      operator delete(v9);
    }
  }
  if (v22 && v21 < 0)
    operator delete(v20);
  if (v19 && v18 < 0)
    operator delete(v17);
  if (v14 && SHIBYTE(v13) < 0)
    operator delete((void *)v12);
  if (v29)
  {
    if (SHIBYTE(v28) < 0)
      operator delete((void *)v27);
  }
}

void sub_20B0E43FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  uint64_t v18;

  if (a18 && a17 < 0)
    operator delete(__p);
  if (*(_BYTE *)(v18 - 64))
  {
    if (*(char *)(v18 - 65) < 0)
      operator delete(*(void **)(v18 - 88));
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0E4440(uint64_t a1, uint64_t a2, unsigned int a3)
{
  void **v6;
  void **v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  void *v14;
  void **v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  void *v20;
  void **v21;
  void **v22;
  void *v23;
  void *v24[2];
  uint64_t v25;
  void *v26[2];
  uint64_t v27;
  char v28;
  void *__p[2];
  uint64_t v30;
  char v31;

  __p[0] = *(void **)(a1 + 8);
  sub_20B0E4A88((int *)__p, (_BYTE *)a1, a2 + 8);
  v6 = (void **)(a2 + 24);
  LOBYTE(__p[0]) = 0;
  (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
  if (LOBYTE(__p[0]))
  {
    if (!*(_BYTE *)(a2 + 48))
    {
      *v6 = 0;
      *(_QWORD *)(a2 + 32) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_BYTE *)(a2 + 48) = 1;
    }
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 24);
  }
  else if (*(_BYTE *)(a2 + 48))
  {
    if (*(char *)(a2 + 47) < 0)
      operator delete(*v6);
    *(_BYTE *)(a2 + 48) = 0;
  }
  if (a3 >= 4)
  {
    LOBYTE(v26[0]) = 0;
    (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, v26);
    if (LOBYTE(v26[0]))
    {
      if (!*(_BYTE *)(a2 + 72))
      {
        *(_QWORD *)(a2 + 56) = 0;
        *(_BYTE *)(a2 + 64) = 0;
        *(_BYTE *)(a2 + 72) = 1;
      }
      __p[0] = *(void **)(a1 + 8);
      sub_20B0E4A88((int *)__p, (_BYTE *)a1, a2 + 56);
    }
    else if (*(_BYTE *)(a2 + 72))
    {
      *(_BYTE *)(a2 + 72) = 0;
    }
    if (a3 == 5)
    {
      v7 = (void **)(a2 + 80);
      LOBYTE(__p[0]) = 0;
      (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
      if (LOBYTE(__p[0]))
      {
        if (!*(_BYTE *)(a2 + 104))
        {
          *v7 = 0;
          *(_QWORD *)(a2 + 88) = 0;
          *(_QWORD *)(a2 + 96) = 0;
          *(_BYTE *)(a2 + 104) = 1;
        }
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
      }
      else if (*(_BYTE *)(a2 + 104))
      {
        if (*(char *)(a2 + 103) < 0)
          operator delete(*v7);
        *(_BYTE *)(a2 + 104) = 0;
      }
    }
    else if (a3 >= 6)
    {
      v8 = (void **)(a2 + 80);
      if ((*(_BYTE *)(a1 + 12) & 4) != 0)
      {
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v8 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        }
        else
        {
          if (*(_BYTE *)(a2 + 104))
          {
            if (*(char *)(a2 + 103) < 0)
              operator delete(*v8);
            *(_BYTE *)(a2 + 104) = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v26);
        }
        v10 = (void **)(a2 + 112);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 136))
          {
            *v10 = 0;
            *(_QWORD *)(a2 + 120) = 0;
            *(_QWORD *)(a2 + 128) = 0;
            *(_BYTE *)(a2 + 136) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        }
        else
        {
          if (*(_BYTE *)(a2 + 136))
          {
            if (*(char *)(a2 + 135) < 0)
              operator delete(*v10);
            *(_BYTE *)(a2 + 136) = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v26);
        }
        LOBYTE(__p[0]) = 0;
        v31 = 0;
        LOBYTE(v26[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, v26);
        if (LOBYTE(v26[0]))
        {
          if (!v31)
          {
            __p[0] = 0;
            __p[1] = 0;
            v30 = 0;
            v31 = 1;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 144))(a1, __p);
        }
        else
        {
          if (v31)
          {
            if (SHIBYTE(v30) < 0)
              operator delete(__p[0]);
            v31 = 0;
          }
          (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 280))(a1, v24);
        }
        if (v31)
        {
          sub_20B0D9D38((char *)__p, (uint64_t)v24);
          *(_OWORD *)v26 = *(_OWORD *)v24;
          v27 = v25;
          v24[1] = 0;
          v25 = 0;
          v24[0] = 0;
          v28 = 1;
          sub_20B0DAC38(a2 + 144, (uint64_t)v26);
          if (v28)
          {
            v15 = (void **)v26[0];
            if (v26[0])
            {
              v16 = (void **)v26[1];
              v17 = v26[0];
              if (v26[1] != v26[0])
              {
                do
                {
                  if (*((char *)v16 - 1) < 0)
                    operator delete(*(v16 - 3));
                  v16 -= 3;
                }
                while (v16 != v15);
                v17 = v26[0];
              }
              v26[1] = v15;
              operator delete(v17);
            }
          }
          v21 = (void **)v24[0];
          if (v24[0])
          {
            v22 = (void **)v24[1];
            v23 = v24[0];
            if (v24[1] != v24[0])
            {
              do
              {
                if (*((char *)v22 - 1) < 0)
                  operator delete(*(v22 - 3));
                v22 -= 3;
              }
              while (v22 != v21);
              v23 = v24[0];
            }
            v24[1] = v21;
            operator delete(v23);
          }
        }
        else if (*(_BYTE *)(a2 + 168))
        {
          v18 = *(_QWORD *)(a2 + 144);
          if (v18)
          {
            v19 = *(_QWORD *)(a2 + 152);
            v20 = *(void **)(a2 + 144);
            if (v19 != v18)
            {
              do
              {
                if (*(char *)(v19 - 1) < 0)
                  operator delete(*(void **)(v19 - 24));
                v19 -= 24;
              }
              while (v19 != v18);
              v20 = *(void **)(a2 + 144);
            }
            *(_QWORD *)(a2 + 152) = v18;
            operator delete(v20);
          }
          *(_BYTE *)(a2 + 168) = 0;
        }
        if (v31 && SHIBYTE(v30) < 0)
          operator delete(__p[0]);
      }
      else
      {
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 104))
          {
            *v8 = 0;
            *(_QWORD *)(a2 + 88) = 0;
            *(_QWORD *)(a2 + 96) = 0;
            *(_BYTE *)(a2 + 104) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 80);
        }
        else if (*(_BYTE *)(a2 + 104))
        {
          if (*(char *)(a2 + 103) < 0)
            operator delete(*v8);
          *(_BYTE *)(a2 + 104) = 0;
        }
        v9 = (void **)(a2 + 112);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 136))
          {
            *v9 = 0;
            *(_QWORD *)(a2 + 120) = 0;
            *(_QWORD *)(a2 + 128) = 0;
            *(_BYTE *)(a2 + 136) = 1;
          }
          (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 144))(a1, a2 + 112);
        }
        else if (*(_BYTE *)(a2 + 136))
        {
          if (*(char *)(a2 + 135) < 0)
            operator delete(*v9);
          *(_BYTE *)(a2 + 136) = 0;
        }
        v11 = (void **)(a2 + 144);
        LOBYTE(__p[0]) = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 80))(a1, __p);
        if (LOBYTE(__p[0]))
        {
          if (!*(_BYTE *)(a2 + 168))
          {
            *v11 = 0;
            *(_QWORD *)(a2 + 152) = 0;
            *(_QWORD *)(a2 + 160) = 0;
            *(_BYTE *)(a2 + 168) = 1;
          }
          sub_20B0E4ED8(a1, (char **)(a2 + 144));
        }
        else if (*(_BYTE *)(a2 + 168))
        {
          v12 = (void **)*v11;
          if (*v11)
          {
            v13 = *(void ***)(a2 + 152);
            v14 = *v11;
            if (v13 != v12)
            {
              do
              {
                if (*((char *)v13 - 1) < 0)
                  operator delete(*(v13 - 3));
                v13 -= 3;
              }
              while (v13 != v12);
              v14 = *v11;
            }
            *(_QWORD *)(a2 + 152) = v12;
            operator delete(v14);
          }
          *(_BYTE *)(a2 + 168) = 0;
        }
      }
    }
  }
}

void sub_20B0E4A60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  if (a23)
  {
    if (a22 < 0)
      operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_20B0E4A88(int *a1, _BYTE *a2, uint64_t a3)
{
  char v6;
  _BYTE *v7;
  char v8;
  char *v9;

  LODWORD(v7) = 2;
  (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, &v7);
  if (*a1 < 1)
  {
    if (v7 < 2)
    {
      v7 = 0;
      v8 = 0;
      (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 72))(a2, &v7);
      v9 = &v8;
      sub_20B0E4D24(a2, &v9);
      v6 = v8;
      *(_QWORD *)a3 = v7;
      *(_BYTE *)(a3 + 8) = v6;
    }
    else
    {
      (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
      v7 = (_BYTE *)(a3 + 8);
      sub_20B0E4D24(a2, &v7);
    }
  }
  else
  {
    sub_20B0E4B94(a1, a2, a3, v7);
  }
}

void sub_20B0E4B94(int *a1, _BYTE *a2, uint64_t a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  char v10;
  unsigned int v11;
  __int128 *v12;
  _BYTE *v13;
  char v14;
  char *v15;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    LODWORD(v13) = 2;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 104))(a2, &v13);
    if (v13 >= 3)
    {
      v11 = v13;
      v12 = sub_20B0DA530();
      sub_20B520518((std::string *)v12, v11, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 >= 1)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
    v13 = (_BYTE *)(a3 + 8);
    sub_20B0E4D24(a2, &v13);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
  {
    v13 = 0;
    v14 = 0;
    (*(void (**)(_BYTE *, _BYTE **))(*(_QWORD *)a2 + 72))(a2, &v13);
    v15 = &v14;
    sub_20B0E4D24(a2, &v15);
    v10 = v14;
    *(_QWORD *)a3 = v13;
    *(_BYTE *)(a3 + 8) = v10;
  }
  else
  {
    (*(void (**)(_BYTE *, uint64_t))(*(_QWORD *)a2 + 72))(a2, a3);
    v13 = (_BYTE *)(a3 + 8);
    sub_20B0E4D24(a2, &v13);
  }
}

void sub_20B0E4D24(_BYTE *a1, _BYTE **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  char v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_20B52CF30(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_20B430024((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v6 + 128);
    MEMORY[0x20BD3583C](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOBYTE(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 80))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20B0E4E8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20B52CE84(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

void sub_20B0E4ED8(uint64_t a1, char **a2)
{
  char *v4;
  unint64_t v5;
  char *v6;
  char *v7;
  char **v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v12 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  (*(void (**)(uint64_t, unint64_t *))(*(_QWORD *)a1 + 120))(a1, &v12);
  v4 = a2[1];
  v5 = 0xAAAAAAAAAAAAAAABLL * ((v4 - *a2) >> 3);
  if (v12 > v5)
  {
    sub_20B0DDB38(a2, v12 - v5);
    v8 = a2;
    v6 = *a2;
    v7 = v8[1];
    v9 = v7 - v6;
    if (v7 == v6)
      return;
    goto LABEL_13;
  }
  if (v12 >= v5)
  {
    v6 = *a2;
    v9 = v4 - v6;
    if (v4 == v6)
      return;
    goto LABEL_13;
  }
  v10 = (uint64_t)&(*a2)[24 * v12];
  while (v4 != (char *)v10)
  {
    if (*(v4 - 1) < 0)
      operator delete(*((void **)v4 - 3));
    v4 -= 24;
  }
  a2[1] = (char *)v10;
  v6 = *a2;
  v9 = v10 - (_QWORD)v6;
  if ((char *)v10 != v6)
  {
LABEL_13:
    v11 = 24 * (v9 / 24);
    do
    {
      (*(void (**)(uint64_t, char *))(*(_QWORD *)a1 + 144))(a1, v6);
      v6 += 24;
      v11 -= 24;
    }
    while (v11);
  }
}

void sub_20B0E4FFC(int *a1, _BYTE *a2, unsigned __int16 *a3, unsigned int a4)
{
  int v7;
  unsigned int v9;
  unsigned int v10;
  __int128 *v11;
  unsigned int v12;

  v7 = *a1;
  if (*a1 == 2)
  {
    if (a4 < 2)
      goto LABEL_8;
    v12 = 2;
    (*(void (**)(_BYTE *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v12);
    if (v12 >= 3)
    {
      v10 = v12;
      v11 = sub_20B0E5114();
      sub_20B520518((std::string *)v11, v10, 2u);
    }
    v7 = *a1;
  }
  if (a4 >= 2 && v7 > 0)
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0E59BC((uint64_t)a2, a3);
    (*(void (**)(_BYTE *))(*(_QWORD *)a2 + 24))(a2);
    return;
  }
LABEL_8:
  if (a4 >= 2)
    v9 = 2;
  else
    v9 = a4;
  if (v9 <= 1)
    sub_20B0E54C4(a2, (uint64_t)a3);
  else
    sub_20B0E59BC((uint64_t)a2, a3);
}

__int128 *sub_20B0E5114()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635038);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635038))
    return &xmmword_254635020;
  v2 = sub_20B0E51F0();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254635020, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254635030 = v2->__r_.__value_.__r.__words[2];
    xmmword_254635020 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635020, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635038);
  return &xmmword_254635020;
}

void sub_20B0E51D8(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635038);
  _Unwind_Resume(a1);
}

std::string *sub_20B0E51F0()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254635058);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254635058))
    return &stru_254635040;
  sub_20B0E52E0((uint64_t)__p);
  sub_20AF6D7B0((char *)__p, &stru_254635040);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254635040, &dword_20AEBB000);
  __cxa_guard_release(&qword_254635058);
  return &stru_254635040;
}

void sub_20B0E52A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254635058);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254635058);
  _Unwind_Resume(a1);
}

void sub_20B0E52E0(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254635078);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254635078))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::imgio::ImageSample<>]", qword_254635060);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635060, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635078);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254635098);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254635098))
  {
    v5 = sub_20AED4780(qword_254635060, "<", 0);
    sub_20AED467C(qword_254635060, 0, v5, qword_254635080);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254635080, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635098);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_2546350B8);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_2546350B8))
  {
    sub_20B531658((uint64_t)qword_254635080, (uint64_t)&xmmword_2546350A0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_2546350A0, &dword_20AEBB000);
    __cxa_guard_release(&qword_2546350B8);
  }
  if (byte_2546350B7 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_2546350A0, *((unint64_t *)&xmmword_2546350A0 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_2546350A0;
    *(_QWORD *)(a1 + 16) = unk_2546350B0;
  }
}

void sub_20B0E547C(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_2546350B8);
  _Unwind_Resume(a1);
}

void sub_20B0E5494(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635098);
  _Unwind_Resume(a1);
}

void sub_20B0E54AC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635078);
  _Unwind_Resume(a1);
}

void sub_20B0E54C4(_BYTE *a1, uint64_t a2)
{
  std::__shared_weak_count *v4;
  unint64_t *v5;
  unint64_t v6;
  int v7;
  __int128 v8;
  std::__shared_weak_count *v9;
  unint64_t *p_shared_owners;
  unint64_t v11;
  std::__shared_weak_count *v12;
  unint64_t *v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int16 v17;
  __int128 v18;
  int v19;
  uint64_t (**v20)();
  __int128 v21;
  __int128 v22;
  _BYTE v23[22];
  unsigned int v24;
  _BYTE v25[40];
  _BYTE v26[22];
  void *__p;
  char v28;
  unsigned int v29;
  _QWORD v30[21];
  uint64_t v31;
  __int128 v32;
  __int128 v33;
  _BYTE v34[22];
  char v35;

  *(_QWORD *)v25 = &off_24C3FF020;
  sub_20B0DC760((uint64_t)&v25[8]);
  sub_20B2DD220((uint64_t)&v17, (uint64_t)v25, 0);
  v4 = *(std::__shared_weak_count **)&v25[16];
  if (*(_QWORD *)&v25[16])
  {
    v5 = (unint64_t *)(*(_QWORD *)&v25[16] + 8);
    do
      v6 = __ldaxr(v5);
    while (__stlxr(v6 - 1, v5));
    if (!v6)
    {
      ((void (*)(std::__shared_weak_count *))v4->__on_zero_shared)(v4);
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  v19 = 0;
  *(_QWORD *)v25 = &v17;
  sub_20B0E5DA0(a1, (_WORD **)v25);
  *(_DWORD *)v25 = 1;
  (*(void (**)(_BYTE *, _BYTE *))(*(_QWORD *)a1 + 104))(a1, v25);
  *(_QWORD *)v25 = &v18;
  sub_20B0E6304(a1, (_QWORD **)v25);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 104))(a1, (char *)&v18 + 8);
  (*(void (**)(_BYTE *, char *))(*(_QWORD *)a1 + 104))(a1, (char *)&v18 + 12);
  if (v17 == 1)
  {
    sub_20B2DCEF8((uint64_t *)&v18, v19);
    if (v24 != -1)
      ((void (*)(uint64_t *, uint64_t (***)()))off_24C418A58[v24])(&v31, &v20);
    v20 = &off_24C3FF020;
    v21 = *(_OWORD *)&v25[8];
    v22 = *(_OWORD *)&v25[24];
    *(_OWORD *)v23 = *(_OWORD *)v26;
    *(_QWORD *)&v23[14] = *(_QWORD *)&v26[14];
    v24 = 1;
    sub_20B2DFB0C(a1, (uint64_t)&v20);
    goto LABEL_27;
  }
  v7 = sub_20B2DF950(v17);
  sub_20B0E64B4((uint64_t)v25, (uint64_t)a1);
  sub_20B0DBFFC(v30, v7, (uint64_t)&v31);
  if (v24 != -1)
  {
    if (v24 == 1)
    {
      v8 = v32;
      v32 = 0uLL;
      v9 = (std::__shared_weak_count *)*((_QWORD *)&v21 + 1);
      v21 = v8;
      if (v9)
      {
        p_shared_owners = (unint64_t *)&v9->__shared_owners_;
        do
          v11 = __ldaxr(p_shared_owners);
        while (__stlxr(v11 - 1, p_shared_owners));
        if (!v11)
        {
          ((void (*)(std::__shared_weak_count *))v9->__on_zero_shared)(v9);
          std::__shared_weak_count::__release_weak(v9);
        }
      }
      v22 = v33;
      *(_OWORD *)v23 = *(_OWORD *)v34;
      *(_QWORD *)&v23[14] = *(_QWORD *)&v34[14];
      v12 = (std::__shared_weak_count *)*((_QWORD *)&v32 + 1);
      if (*((_QWORD *)&v32 + 1))
      {
        v13 = (unint64_t *)(*((_QWORD *)&v32 + 1) + 8);
        do
          v14 = __ldaxr(v13);
        while (__stlxr(v14 - 1, v13));
        if (!v14)
        {
          ((void (*)(std::__shared_weak_count *))v12->__on_zero_shared)(v12);
          std::__shared_weak_count::__release_weak(v12);
        }
      }
      goto LABEL_24;
    }
    ((void (*)(char *, uint64_t (***)()))*(&off_24C40DBA8 + v24))(&v35, &v20);
  }
  v20 = &off_24C3FF020;
  v21 = v32;
  v32 = 0uLL;
  v22 = v33;
  *(_OWORD *)v23 = *(_OWORD *)v34;
  *(_QWORD *)&v23[14] = *(_QWORD *)&v34[14];
  v24 = 1;
LABEL_24:
  std::istream::~istream();
  *(_QWORD *)v25 = MEMORY[0x24BEDB848] + 16;
  if (v28 < 0)
    operator delete(__p);
  std::streambuf::~streambuf();
LABEL_27:
  *(_WORD *)v25 = v17;
  *(_OWORD *)&v25[8] = v18;
  v15 = v24;
  *(_DWORD *)&v25[24] = v19;
  v25[32] = 0;
  v29 = -1;
  if (v24 == -1)
  {
    *(_OWORD *)a2 = *(_OWORD *)v25;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v25[12];
    v16 = *(unsigned int *)(a2 + 96);
    if ((_DWORD)v16 != -1)
    {
      ((void (*)(uint64_t *, uint64_t))*(&off_24C40DBA8 + v16))(&v31, a2 + 32);
      *(_DWORD *)(a2 + 96) = -1;
    }
  }
  else
  {
    ((void (*)(char *, _BYTE *, uint64_t (***)()))off_24C40DC88[v24])(&v35, &v25[32], &v20);
    v29 = v15;
    *(_OWORD *)a2 = *(_OWORD *)v25;
    *(_OWORD *)(a2 + 12) = *(_OWORD *)&v25[12];
    v31 = a2 + 32;
    ((void (*)(uint64_t *))off_24C40DC98[v15])(&v31);
  }
  if (v29 != -1)
    ((void (*)(uint64_t *, _BYTE *))*(&off_24C40DBA8 + v29))(&v31, &v25[32]);
  if (v24 != -1)
    ((void (*)(_BYTE *, uint64_t (***)()))*(&off_24C40DBA8 + v24))(v25, &v20);
}

void sub_20B0E58F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_20B0DE4EC((uint64_t)&a22);
  sub_20B0DCED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E5918(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  sub_20B0C5FDC((uint64_t)&a22);
  sub_20B0DCED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E5934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,unsigned int a34)
{
  uint64_t v34;
  uint64_t v35;

  if (a34 != -1)
    ((void (*)(uint64_t, uint64_t))*(&off_24C40DBA8 + a34))(v35 - 136, v34);
  sub_20B0DCED8((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E59BC(uint64_t a1, unsigned __int16 *a2)
{
  int v4;
  unsigned int v5;
  __int128 *v6;
  int v7;
  int v8;
  uint64_t v9;
  __int128 v10;
  std::__shared_weak_count *v11;
  unint64_t *p_shared_owners;
  unint64_t v13;
  std::__shared_weak_count *v14;
  unint64_t *v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD v18[5];
  _BYTE v19[22];
  void *__p;
  char v21;
  _QWORD v22[22];
  _QWORD *v23;
  __int128 v24;
  __int128 v25;
  _BYTE v26[22];
  char v27;

  v18[0] = a2;
  sub_20B0E5DA0((_BYTE *)a1, (_WORD **)v18);
  v4 = *(_DWORD *)(a1 + 8);
  LODWORD(v18[0]) = 2;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, v18);
  if (v4 < 1)
  {
    if (LODWORD(v18[0]) >= 2)
    {
      v18[0] = a2 + 4;
      sub_20B0E6304((_BYTE *)a1, (_QWORD **)v18);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 8);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 10);
      v7 = *a2;
      if (v7 != 1)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  else if (v4 == 2)
  {
    if (LODWORD(v18[0]) >= 2)
    {
      LODWORD(v18[0]) = 2;
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, v18);
      v5 = v18[0];
      if (LODWORD(v18[0]) >= 3)
      {
        v6 = sub_20B0E5F54();
        sub_20B520518((std::string *)v6, v5, 2u);
      }
LABEL_10:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 16))(a1);
      v18[0] = a2 + 4;
      sub_20B0E6304((_BYTE *)a1, (_QWORD **)v18);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 8);
      (*(void (**)(uint64_t, unsigned __int16 *))(*(_QWORD *)a1 + 104))(a1, a2 + 10);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 24))(a1);
      v7 = *a2;
      if (v7 != 1)
        goto LABEL_11;
      goto LABEL_24;
    }
  }
  else if (LODWORD(v18[0]) > 1)
  {
    goto LABEL_10;
  }
  *(_OWORD *)v18 = 1uLL;
  v23 = v18;
  sub_20B0E6304((_BYTE *)a1, &v23);
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 104))(a1, &v18[1]);
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)a1 + 104))(a1, (unint64_t)v18 | 0xC);
  *(_OWORD *)(a2 + 4) = *(_OWORD *)v18;
  v7 = *a2;
  if (v7 != 1)
  {
LABEL_11:
    v8 = sub_20B2DF950(v7);
    sub_20B0E64B4((uint64_t)v18, a1);
    sub_20B0DBFFC(v22, v8, (uint64_t)&v23);
    v9 = *((unsigned int *)a2 + 24);
    if ((_DWORD)v9 != -1)
    {
      if ((_DWORD)v9 == 1)
      {
        v10 = v24;
        v24 = 0uLL;
        v11 = (std::__shared_weak_count *)*((_QWORD *)a2 + 6);
        *(_OWORD *)(a2 + 20) = v10;
        if (v11)
        {
          p_shared_owners = (unint64_t *)&v11->__shared_owners_;
          do
            v13 = __ldaxr(p_shared_owners);
          while (__stlxr(v13 - 1, p_shared_owners));
          if (!v13)
          {
            ((void (*)(std::__shared_weak_count *))v11->__on_zero_shared)(v11);
            std::__shared_weak_count::__release_weak(v11);
          }
        }
        *(_OWORD *)(a2 + 28) = v25;
        *(_OWORD *)(a2 + 36) = *(_OWORD *)v26;
        *(_QWORD *)(a2 + 43) = *(_QWORD *)&v26[14];
        v14 = (std::__shared_weak_count *)*((_QWORD *)&v24 + 1);
        if (*((_QWORD *)&v24 + 1))
        {
          v15 = (unint64_t *)(*((_QWORD *)&v24 + 1) + 8);
          do
            v16 = __ldaxr(v15);
          while (__stlxr(v16 - 1, v15));
          if (!v16)
          {
            ((void (*)(std::__shared_weak_count *))v14->__on_zero_shared)(v14);
            std::__shared_weak_count::__release_weak(v14);
          }
        }
        goto LABEL_29;
      }
      ((void (*)(char *, unsigned __int16 *))*(&off_24C40DBA8 + v9))(&v27, a2 + 16);
    }
    *((_QWORD *)a2 + 4) = &off_24C3FF020;
    *(_OWORD *)(a2 + 20) = v24;
    v24 = 0uLL;
    *(_OWORD *)(a2 + 28) = v25;
    *(_OWORD *)(a2 + 36) = *(_OWORD *)v26;
    *(_QWORD *)(a2 + 43) = *(_QWORD *)&v26[14];
    *((_DWORD *)a2 + 24) = 1;
LABEL_29:
    std::istream::~istream();
    v18[0] = MEMORY[0x24BEDB848] + 16;
    if (v21 < 0)
      operator delete(__p);
    std::streambuf::~streambuf();
    return;
  }
LABEL_24:
  sub_20B2DD08C((uint64_t *)a2 + 1, *((_DWORD *)a2 + 6));
  v17 = *((unsigned int *)a2 + 24);
  if ((_DWORD)v17 != -1)
    ((void (*)(_QWORD **, unsigned __int16 *))off_24C418A58[v17])(&v23, a2 + 16);
  *((_QWORD *)a2 + 4) = &off_24C3FF020;
  *(_OWORD *)(a2 + 20) = *(_OWORD *)&v18[1];
  *(_OWORD *)(a2 + 28) = *(_OWORD *)&v18[3];
  *(_OWORD *)(a2 + 36) = *(_OWORD *)v19;
  *(_QWORD *)(a2 + 43) = *(_QWORD *)&v19[14];
  *((_DWORD *)a2 + 24) = 1;
  sub_20B2DFB0C((const void *)a1, (uint64_t)(a2 + 16));
}

void sub_20B0E5D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0DE4EC((uint64_t)&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E5DA0(_BYTE *a1, _WORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  __int16 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  __int16 v14;
  uint64_t v15;

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_20B52CF30(v5, v7);
    v15 = v6;
    v14 = 0;
    sub_20B2DED5C((uint64_t *)v6, &v14);
    v8 = v14;
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v6 + 128);
    MEMORY[0x20BD3583C](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    LOWORD(__p[0]) = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 96))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20B0E5F08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20B52CE84(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

__int128 *sub_20B0E5F54()
{
  unsigned __int8 v0;
  std::string *v2;
  __int128 v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634F98);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634F98))
    return &xmmword_254634F80;
  v2 = sub_20B0E6030();
  if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_20AEC60F4(&xmmword_254634F80, v2->__r_.__value_.__l.__data_, v2->__r_.__value_.__l.__size_);
  }
  else
  {
    v3 = *(_OWORD *)&v2->__r_.__value_.__l.__data_;
    qword_254634F90 = v2->__r_.__value_.__r.__words[2];
    xmmword_254634F80 = v3;
  }
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254634F80, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634F98);
  return &xmmword_254634F80;
}

void sub_20B0E6018(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634F98);
  _Unwind_Resume(a1);
}

std::string *sub_20B0E6030()
{
  unsigned __int8 v0;
  void *__p[2];
  char v3;

  v0 = atomic_load((unsigned __int8 *)&qword_254634FB8);
  if ((v0 & 1) != 0 || !__cxa_guard_acquire(&qword_254634FB8))
    return &stru_254634FA0;
  sub_20B0E6120((uint64_t)__p);
  sub_20AF6D7B0((char *)__p, &stru_254634FA0);
  if (v3 < 0)
    operator delete(__p[0]);
  __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &stru_254634FA0, &dword_20AEBB000);
  __cxa_guard_release(&qword_254634FB8);
  return &stru_254634FA0;
}

void sub_20B0E60E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
  {
    operator delete(__p);
    __cxa_guard_abort(&qword_254634FB8);
    _Unwind_Resume(a1);
  }
  __cxa_guard_abort(&qword_254634FB8);
  _Unwind_Resume(a1);
}

void sub_20B0E6120(uint64_t a1@<X8>)
{
  unsigned __int8 v2;
  unsigned __int8 v3;
  unsigned __int8 v4;
  size_t v5;

  v2 = atomic_load((unsigned __int8 *)&qword_254634FD8);
  if ((v2 & 1) == 0 && __cxa_guard_acquire(&qword_254634FD8))
  {
    sub_20B5313E4("static std::string cv3d::esn::TypeNameHelpers::PrettyArgName() [T = cv3d::kit::imgio::ImageStructureSample<>]", qword_254634FC0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634FC0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634FD8);
  }
  v3 = atomic_load((unsigned __int8 *)&qword_254634FF8);
  if ((v3 & 1) == 0 && __cxa_guard_acquire(&qword_254634FF8))
  {
    v5 = sub_20AED4780(qword_254634FC0, "<", 0);
    sub_20AED467C(qword_254634FC0, 0, v5, qword_254634FE0);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], qword_254634FE0, &dword_20AEBB000);
    __cxa_guard_release(&qword_254634FF8);
  }
  v4 = atomic_load((unsigned __int8 *)&qword_254635018);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_254635018))
  {
    sub_20B531658((uint64_t)qword_254634FE0, (uint64_t)&xmmword_254635000);
    __cxa_atexit((void (*)(void *))MEMORY[0x24BEDACF0], &xmmword_254635000, &dword_20AEBB000);
    __cxa_guard_release(&qword_254635018);
  }
  if (byte_254635017 < 0)
  {
    sub_20AEC60F4((_BYTE *)a1, (void *)xmmword_254635000, *((unint64_t *)&xmmword_254635000 + 1));
  }
  else
  {
    *(_OWORD *)a1 = xmmword_254635000;
    *(_QWORD *)(a1 + 16) = unk_254635010;
  }
}

void sub_20B0E62BC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254635018);
  _Unwind_Resume(a1);
}

void sub_20B0E62D4(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634FF8);
  _Unwind_Resume(a1);
}

void sub_20B0E62EC(_Unwind_Exception *a1)
{
  __cxa_guard_abort(&qword_254634FD8);
  _Unwind_Resume(a1);
}

void sub_20B0E6304(_BYTE *a1, _QWORD **a2)
{
  int v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *__p[2];
  uint64_t v13;
  _QWORD v14[2];

  if ((a1[12] & 2) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    v13 = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 144))(a1, __p);
    v3 = SHIBYTE(v13);
    v4 = (char *)__p[0];
    v5 = operator new();
    v6 = v5;
    if (v3 >= 0)
      v7 = (char *)__p;
    else
      v7 = v4;
    sub_20B52CF30(v5, v7);
    v14[0] = 0;
    v14[1] = v6;
    sub_20B2DF3C8((uint64_t *)v6, v14);
    v8 = v14[0];
    v9 = MEMORY[0x24BEDB7F0];
    v10 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v6 = *MEMORY[0x24BEDB7F0];
    v11 = *(_QWORD *)(v9 + 72);
    *(_QWORD *)(v6 + *(_QWORD *)(v10 - 24)) = *(_QWORD *)(v9 + 64);
    *(_QWORD *)(v6 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v6 + 16) = v11;
    if (*(char *)(v6 + 111) < 0)
      operator delete(*(void **)(v6 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v6 + 128);
    MEMORY[0x20BD3583C](v6, 0x10B2C40EED050F3);
    **a2 = v8;
    if (SHIBYTE(v13) < 0)
      operator delete(__p[0]);
  }
  else
  {
    __p[0] = 0;
    (*(void (**)(_BYTE *, void **))(*(_QWORD *)a1 + 120))(a1, __p);
    **a2 = __p[0];
  }
}

void sub_20B0E6468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17)
{
  sub_20B52CE84(&a17);
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0E64B4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  uint64_t v6;
  std::string::size_type v7;
  std::string *v8;
  _QWORD v10[2];
  std::string v11;
  std::string::size_type __n;

  v4 = std::streambuf::basic_streambuf();
  *(_QWORD *)v4 = MEMORY[0x24BEDB848] + 16;
  *(_OWORD *)(v4 + 64) = 0u;
  v5 = (void **)(v4 + 64);
  v6 = MEMORY[0x24BEDB820];
  *(_OWORD *)(v4 + 80) = 0u;
  *(_QWORD *)(v4 + 104) = v6 + 24;
  *(_DWORD *)(v4 + 96) = 24;
  *(_QWORD *)(v4 + 120) = v6 + 64;
  *(_QWORD *)(v4 + 112) = 0;
  std::ios_base::init((std::ios_base *)(v4 + 120), (void *)a1);
  *(_QWORD *)(a1 + 256) = 0;
  *(_DWORD *)(a1 + 264) = -1;
  __n = 0;
  (*(void (**)(uint64_t, std::string::size_type *))(*(_QWORD *)a2 + 120))(a2, &__n);
  memset(&v11, 0, sizeof(v11));
  if (!__n)
  {
    v7 = 0;
    goto LABEL_8;
  }
  std::string::append(&v11, __n, 0);
  v7 = __n;
  if ((SHIBYTE(v11.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
  {
LABEL_8:
    v8 = &v11;
    goto LABEL_9;
  }
  v8 = (std::string *)v11.__r_.__value_.__r.__words[0];
  if (!v11.__r_.__value_.__r.__words[0] && __n)
  {
    if (sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Essentials/Common/include/Essentials/Common/Span.h", 248, (uint64_t)"ptr != nullptr || size == 0", 27, (uint64_t)"", 0, (void (*)(void **))sub_20B532360))
    {
      abort();
    }
    v8 = 0;
  }
LABEL_9:
  v10[0] = v7;
  v10[1] = v8;
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 272))(a2, v10);
  if (*(char *)(a1 + 87) < 0)
    operator delete(*v5);
  *(std::string *)v5 = v11;
  *((_BYTE *)&v11.__r_.__value_.__s + 23) = 0;
  v11.__r_.__value_.__s.__data_[0] = 0;
  sub_20AEC8D2C(a1);
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  return a1;
}

void sub_20B0E6648(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  uint64_t v16;

  if (a16 < 0)
    operator delete(__p);
  std::istream::~istream();
  sub_20B0D3A2C(v16);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0E66B4@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  _QWORD *result;

  v6 = operator new();
  sub_20B0033C0(v6, a1, a2);
  *a3 = &off_24C411E78;
  a3[1] = v6;
  result = (_QWORD *)operator new();
  *result = &off_24C411F70;
  result[1] = 0;
  result[2] = 0;
  result[3] = v6;
  a3[2] = result;
  return result;
}

void sub_20B0E674C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  uint64_t v2;
  va_list va;

  va_start(va, a2);
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  sub_20AF9D008((_QWORD **)va);
  _Unwind_Resume(a1);
}

void sub_20B0E6770(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10F3C4035895BD5);
  _Unwind_Resume(a1);
}

BOOL sub_20B0E6794(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v13;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EB80, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (*(unsigned __int8 *)v3[5] <= 1u)
    {
      v5 = *((unsigned __int8 *)v3 + 88);
      v3[9] = "info";
      v3[10] = 4;
      if (!v5)
        *((_BYTE *)v3 + 88) = 1;
    }
    sub_20B50671C((uint64_t)v3);
    v13 = 6;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v6 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v6)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_20B5086B4(v4, &v13);
    sub_20B0D1154(v4, a2 + 16, v13);
    v7 = *(_QWORD *)(v4 + 56);
    v8 = *(unsigned __int8 **)(v7 - 8);
    *(_QWORD *)(v4 + 40) = v8;
    *(_QWORD *)(v4 + 56) = v7 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
    v9 = a2 + 192;
    if (*v8 <= 1u)
    {
      *(_QWORD *)(v4 + 72) = "value";
      *(_QWORD *)(v4 + 80) = 5;
      *(_BYTE *)(v4 + 88) = 1;
    }
    sub_20B50671C(v4);
    v13 = 2;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v10)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_20B5086B4(v4, &v13);
    sub_20B0D2794(v4, v9);
    v11 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v11 - 8);
    *(_QWORD *)(v4 + 56) = v11 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
  }
  return v4 != 0;
}

BOOL sub_20B0E6940(const void *a1, uint64_t a2)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v19;

  v3 = (uint64_t *)__dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EBC8, 0);
  v4 = v3;
  if (v3)
  {
    v5 = v3[3];
    if (*(_BYTE *)(v5 + 40))
    {
      v19 = (uint64_t *)(v5 + 16);
      sub_20B51E95C(&v19, 6u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v19, v5 + 8);
    }
    sub_20B51956C(v4[3]);
    sub_20B0D3CE4((uint64_t)v4, a2 + 16, 6u);
    v6 = v4[3];
    v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
    sub_20B5190E0((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
    v8 = *(_QWORD *)(v6 + 48);
    if (v8)
      memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
    *(_QWORD *)(v6 + 48) = 0;
    v9 = *(_QWORD *)(v6 + 80);
    v10 = *(_QWORD *)(v6 + 88) - 8;
    *(_QWORD *)(v6 + 88) = v10;
    if (v9 == v10)
    {
      std::ostream::write();
      if (*(_BYTE *)(v6 + 40))
      {
        free(*(void **)(v6 + 24));
        *(_BYTE *)(v6 + 40) = 0;
      }
    }
    v11 = a2 + 192;
    v12 = v4[3];
    if (*(_BYTE *)(v12 + 40))
    {
      v19 = (uint64_t *)(v12 + 16);
      sub_20B51E95C(&v19, 2u);
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v19, v12 + 8);
    }
    sub_20B51956C(v4[3]);
    sub_20B0D4684(v4, v11);
    v13 = v4[3];
    v14 = *(_QWORD *)(*(_QWORD *)(v13 + 88) - 8);
    sub_20B5190E0((uint64_t *)(v13 + 48), *(_QWORD *)(v13 + 16) - v14 - 9);
    v15 = *(_QWORD *)(v13 + 48);
    if (v15)
      memmove((void *)(*(_QWORD *)(v13 + 24) + v14), *(const void **)(v13 + 56), v15);
    *(_QWORD *)(v13 + 48) = 0;
    v16 = *(_QWORD *)(v13 + 80);
    v17 = *(_QWORD *)(v13 + 88) - 8;
    *(_QWORD *)(v13 + 88) = v17;
    if (v16 == v17)
    {
      std::ostream::write();
      if (*(_BYTE *)(v13 + 40))
      {
        free(*(void **)(v13 + 24));
        *(_BYTE *)(v13 + 40) = 0;
      }
    }
  }
  return v4 != 0;
}

BOOL sub_20B0E6B10(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unsigned int v13;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC50, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (*(unsigned __int8 *)v3[5] <= 1u)
    {
      v5 = *((unsigned __int8 *)v3 + 88);
      v3[9] = "info";
      v3[10] = 4;
      if (!v5)
        *((_BYTE *)v3 + 88) = 1;
    }
    sub_20B505FB0((uint64_t)v3);
    v13 = 6;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v6 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v6)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_20B5069D0(v4, &v13);
    sub_20B0D4F88(v4, a2 + 16, v13);
    v7 = *(_QWORD *)(v4 + 56);
    v8 = *(unsigned __int8 **)(v7 - 8);
    *(_QWORD *)(v4 + 40) = v8;
    *(_QWORD *)(v4 + 56) = v7 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
    v9 = a2 + 192;
    if (*v8 <= 1u)
    {
      *(_QWORD *)(v4 + 72) = "value";
      *(_QWORD *)(v4 + 80) = 5;
      *(_BYTE *)(v4 + 88) = 1;
    }
    sub_20B505FB0(v4);
    v13 = 2;
    if (**(unsigned __int8 **)(v4 + 40) <= 1u)
    {
      v10 = *(unsigned __int8 *)(v4 + 88);
      *(_QWORD *)(v4 + 72) = "version";
      *(_QWORD *)(v4 + 80) = 7;
      if (!v10)
        *(_BYTE *)(v4 + 88) = 1;
    }
    sub_20B5069D0(v4, &v13);
    sub_20B0D5CBC(v4, v9);
    v11 = *(_QWORD *)(v4 + 56);
    *(_QWORD *)(v4 + 40) = *(_QWORD *)(v11 - 8);
    *(_QWORD *)(v4 + 56) = v11 - 8;
    if (*(_BYTE *)(v4 + 88))
      *(_BYTE *)(v4 + 88) = 0;
  }
  return v4 != 0;
}

BOOL sub_20B0E6CBC(const void *a1, uint64_t a2)
{
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  char v6;
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 *v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  char v16;
  char v17;
  char v18;
  char v19;
  char v20;
  char v21;

  v3 = __dynamic_cast(a1, (const struct __class_type_info *)&unk_24C41EA40, (const struct __class_type_info *)&unk_24C40EC98, 0);
  v4 = (uint64_t)v3;
  if (v3)
  {
    if (v3[5])
    {
      v5 = (_QWORD *)v3[3];
      v16 = *(_BYTE *)(v4 + 32);
      sub_20AEC01D0(v5, (uint64_t)&v16, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(v4 + 40);
    sub_20B0D66C4(v4, a2 + 16, 6u);
    v6 = *(_BYTE *)(v4 + 34);
    if (*(_QWORD *)(v4 + 40))
    {
      v7 = *(_QWORD **)(v4 + 24);
      v17 = *(_BYTE *)(v4 + 32);
      sub_20AEC01D0(v7, (uint64_t)&v17, 1);
    }
    v8 = *(_QWORD **)(v4 + 24);
    v18 = v6;
    sub_20AEC01D0(v8, (uint64_t)&v18, 1);
    v9 = *(_QWORD *)(v4 + 40);
    v10 = (__int128 *)(a2 + 192);
    *(_QWORD *)(v4 + 40) = v9 + 1;
    if (v9 != -1)
    {
      v11 = *(_QWORD **)(v4 + 24);
      v19 = *(_BYTE *)(v4 + 32);
      sub_20AEC01D0(v11, (uint64_t)&v19, 1);
    }
    std::ostream::operator<<();
    ++*(_QWORD *)(v4 + 40);
    sub_20B0D6D90((uint64_t (**)())v4, v10);
    v12 = *(_BYTE *)(v4 + 34);
    if (*(_QWORD *)(v4 + 40))
    {
      v13 = *(_QWORD **)(v4 + 24);
      v20 = *(_BYTE *)(v4 + 32);
      sub_20AEC01D0(v13, (uint64_t)&v20, 1);
    }
    v14 = *(_QWORD **)(v4 + 24);
    v21 = v12;
    sub_20AEC01D0(v14, (uint64_t)&v21, 1);
    ++*(_QWORD *)(v4 + 40);
  }
  return v4 != 0;
}

BOOL sub_20B0E6E28(uint64_t a1, uint64_t a2)
{
  uint64_t (**v2)();
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int __src;
  int v12;
  uint64_t v13;

  v2 = *(uint64_t (***)())a1;
  if (*(uint64_t (***)())a1 == &off_24C41C2C8)
  {
    v5 = a2 + 16;
    __src = 6;
    v6 = a1 + 24;
    sub_20B42DB24(a1 + 24, *(char **)(a1 + 32), (char *)&__src, (char *)&v12, 4);
    v7 = __src;
    sub_20B42B554((_QWORD *)a1);
    sub_20B0D757C(a1, v5, v7);
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v8 + 10) = *(_QWORD *)(a1 + 32) - v8 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
    v12 = 2;
    sub_20B42DB24(v6, *(char **)(a1 + 32), (char *)&v12, (char *)&v13, 4);
    sub_20B42B554((_QWORD *)a1);
    sub_20B0D7DCC(a1, a2 + 192);
    v9 = *(_QWORD *)(*(_QWORD *)(a1 + 56) - 8) + *(_QWORD *)(a1 + 24);
    *(_QWORD *)(v9 + 10) = *(_QWORD *)(a1 + 32) - v9 - 18;
    *(_QWORD *)(a1 + 56) -= 8;
  }
  return v2 == &off_24C41C2C8;
}

void sub_20B0E6F58(uint64_t a1, int *a2)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;

  v4 = a1 + 16;
  v5 = a2[2];
  v9 = 6;
  (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  v6 = v9;
  if (v5 < 1)
  {
    sub_20B0D8514((uint64_t)a2, v4, v9);
  }
  else
  {
    if (v5 == 2)
    {
      v9 = 3;
      (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
    }
    (*(void (**)(int *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0D8514((uint64_t)a2, v4, v6);
    (*(void (**)(int *))(*(_QWORD *)a2 + 24))(a2);
  }
  v7 = a1 + 192;
  v8 = a2[2];
  v9 = 2;
  (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
  if (v8 < 1)
  {
    sub_20B0D8DE8(a2, v7);
  }
  else
  {
    if (v8 == 2)
    {
      v9 = 2;
      (*(void (**)(int *, unsigned int *))(*(_QWORD *)a2 + 104))(a2, &v9);
    }
    (*(void (**)(int *))(*(_QWORD *)a2 + 16))(a2);
    sub_20B0D8DE8(a2, v7);
    (*(void (**)(int *))(*(_QWORD *)a2 + 24))(a2);
  }
}

void sub_20B0E70C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unsigned __int16 *v6;
  uint64_t v7;
  int v8;
  int v9[3];
  unsigned int v10;

  v4 = a1 + 16;
  v5 = *(_QWORD *)a2;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + 8);
  v10 = 6;
  (*(void (**)(uint64_t, unsigned int *))(v5 + 104))(a2, &v10);
  if (v9[0] < 1)
  {
    if (v10 < 3)
      sub_20B0E41CC((uint64_t)&v10, a2, v4, v10);
    else
      sub_20B0E4440(a2, v4, v10);
  }
  else
  {
    sub_20B0E3BD4(v9, a2, v4, v10);
  }
  v6 = (unsigned __int16 *)(a1 + 192);
  v7 = *(_QWORD *)a2;
  *(_QWORD *)v9 = *(_QWORD *)(a2 + 8);
  v8 = v9[0];
  v10 = 2;
  (*(void (**)(uint64_t, unsigned int *))(v7 + 104))(a2, &v10);
  if (v8 < 1)
  {
    if (v10 < 2)
      sub_20B0E54C4((_BYTE *)a2, (uint64_t)v6);
    else
      sub_20B0E59BC(a2, v6);
  }
  else
  {
    sub_20B0E4FFC(v9, (_BYTE *)a2, v6, v10);
  }
}

uint64_t *sub_20B0E71E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5;
  unsigned int v6;
  uint64_t *result;
  uint64_t v8;
  uint64_t v9[2];
  int v10[92];

  sub_20B50671C(a2);
  v9[0] = (uint64_t)"version";
  v9[1] = 7;
  v10[0] = 4;
  if (**(unsigned __int8 **)(a2 + 40) <= 1u)
  {
    v5 = *(unsigned __int8 *)(a2 + 88);
    *(_QWORD *)(a2 + 72) = "version";
    *(_QWORD *)(a2 + 80) = 7;
    if (!v5)
      *(_BYTE *)(a2 + 88) = 1;
  }
  sub_20B5086B4(a2, v10);
  v6 = v10[0];
  sub_20B0E7B94((uint64_t)v9, a3);
  sub_20B0E72C8(a2, v9, v6);
  result = sub_20B0CDABC(v9);
  v8 = *(_QWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(v8 - 8);
  *(_QWORD *)(a2 + 56) = v8 - 8;
  if (*(_BYTE *)(a2 + 88))
    *(_BYTE *)(a2 + 88) = 0;
  return result;
}

void sub_20B0E72B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CDABC(&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E72C8(uint64_t a1, uint64_t *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  float *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  int v12;
  uint64_t v13;
  uint64_t i;
  float *v15;
  uint64_t v16;
  unsigned __int8 *v17;
  int v18;
  uint64_t v19;
  uint64_t j;
  float *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  int v24;
  uint64_t v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t k;
  float *v33;
  uint64_t v34;
  unsigned __int8 *v35;
  float **v36;
  float **v37;
  float *v38;
  uint64_t v39;
  unsigned __int8 *v40;
  float **v41;
  float **v42;
  float *v43;
  uint64_t v44;
  unsigned __int8 *v45;
  uint64_t v46;
  uint64_t m;
  float *v48;
  uint64_t v49;
  unsigned __int8 *v50;
  int v51;
  int v52;
  __int128 *v53;
  int v54;
  int v55;
  int v56;
  unint64_t v57;
  unsigned __int8 *v58;
  int v59;
  uint64_t v60;
  int v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  __int128 v67;
  _QWORD v68[2];
  uint64_t v69;
  __int128 *v70;

  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v6 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "vertices";
    *(_QWORD *)(a1 + 80) = 8;
    if (!v6)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v7 = *a2;
  v8 = a2[1];
  if (*a2 != v8)
  {
    do
    {
      v9 = *(float **)v7;
      LODWORD(v70) = *(_DWORD *)(v7 + 8);
      v69 = (uint64_t)v9;
      *(_QWORD *)&v67 = 3;
      *((_QWORD *)&v67 + 1) = &v69;
      sub_20B509D64(a1, (float **)&v67);
      v7 += 12;
    }
    while (v7 != v8);
  }
  v10 = *(_QWORD *)(a1 + 56);
  v11 = *(unsigned __int8 **)(v10 - 8);
  *(_QWORD *)(a1 + 40) = v11;
  *(_QWORD *)(a1 + 56) = v10 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v11 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "colors_type";
    *(_QWORD *)(a1 + 80) = 11;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B0E8938(a1, (_DWORD *)a2 + 8);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v12 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "colors";
    *(_QWORD *)(a1 + 80) = 6;
    if (!v12)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v13 = a2[5];
  for (i = a2[6]; v13 != i; v13 += 12)
  {
    v15 = *(float **)v13;
    LODWORD(v70) = *(_DWORD *)(v13 + 8);
    v69 = (uint64_t)v15;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B509D64(a1, (float **)&v67);
  }
  v16 = *(_QWORD *)(a1 + 56);
  v17 = *(unsigned __int8 **)(v16 - 8);
  *(_QWORD *)(a1 + 40) = v17;
  *(_QWORD *)(a1 + 56) = v16 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v17 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "normals_type";
    *(_QWORD *)(a1 + 80) = 12;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B0E8938(a1, (_DWORD *)a2 + 18);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v18 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "normals";
    *(_QWORD *)(a1 + 80) = 7;
    if (!v18)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v19 = a2[10];
  for (j = a2[11]; v19 != j; v19 += 12)
  {
    v21 = *(float **)v19;
    LODWORD(v70) = *(_DWORD *)(v19 + 8);
    v69 = (uint64_t)v21;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B509D64(a1, (float **)&v67);
  }
  v22 = *(_QWORD *)(a1 + 56);
  v23 = *(unsigned __int8 **)(v22 - 8);
  *(_QWORD *)(a1 + 40) = v23;
  *(_QWORD *)(a1 + 56) = v22 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v23 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "semantics_type";
    *(_QWORD *)(a1 + 80) = 14;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B0E8938(a1, (_DWORD *)a2 + 28);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v24 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "semantics";
    *(_QWORD *)(a1 + 80) = 9;
    if (!v24)
      *(_BYTE *)(a1 + 88) = 1;
  }
  v25 = a2[15];
  *(_QWORD *)&v67 = a2[16] - v25;
  *((_QWORD *)&v67 + 1) = v25;
  sub_20B506898(a1, (size_t *)&v67);
  v26 = a2 + 19;
  if (**(unsigned __int8 **)(a1 + 40) > 1u
    || (v27 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "materials_type", *(_QWORD *)(a1 + 80) = 14, v27))
  {
    sub_20B0E8938(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  else
  {
    *(_BYTE *)(a1 + 88) = 1;
    sub_20B0E8938(a1, v26);
    if (**(unsigned __int8 **)(a1 + 40) > 1u)
      goto LABEL_37;
  }
  v28 = *(unsigned __int8 *)(a1 + 88);
  *(_QWORD *)(a1 + 72) = "materials";
  *(_QWORD *)(a1 + 80) = 9;
  if (!v28)
    *(_BYTE *)(a1 + 88) = 1;
LABEL_37:
  v29 = a2[20];
  *(_QWORD *)&v67 = a2[21] - v29;
  *((_QWORD *)&v67 + 1) = v29;
  sub_20B506898(a1, (size_t *)&v67);
  if (**(unsigned __int8 **)(a1 + 40) <= 1u)
  {
    v30 = *(unsigned __int8 *)(a1 + 88);
    *(_QWORD *)(a1 + 72) = "faces";
    *(_QWORD *)(a1 + 80) = 5;
    if (!v30)
      *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v31 = a2[24];
  for (k = a2[25]; v31 != k; v31 += 12)
  {
    v33 = *(float **)v31;
    LODWORD(v70) = *(_DWORD *)(v31 + 8);
    v69 = (uint64_t)v33;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B5092A4(a1, (uint64_t)&v67);
  }
  v34 = *(_QWORD *)(a1 + 56);
  v35 = *(unsigned __int8 **)(v34 - 8);
  *(_QWORD *)(a1 + 40) = v35;
  *(_QWORD *)(a1 + 56) = v34 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v35 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "edges";
    *(_QWORD *)(a1 + 80) = 5;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v36 = (float **)a2[28];
  v37 = (float **)a2[29];
  while (v36 != v37)
  {
    v38 = *v36++;
    v69 = (uint64_t)v38;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B5092A4(a1, (uint64_t)&v67);
  }
  v39 = *(_QWORD *)(a1 + 56);
  v40 = *(unsigned __int8 **)(v39 - 8);
  *(_QWORD *)(a1 + 40) = v40;
  *(_QWORD *)(a1 + 56) = v39 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v40 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_coords";
    *(_QWORD *)(a1 + 80) = 10;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v41 = (float **)a2[32];
  v42 = (float **)a2[33];
  while (v41 != v42)
  {
    v43 = *v41++;
    v69 = (uint64_t)v43;
    *(_QWORD *)&v67 = 2;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B509D64(a1, (float **)&v67);
  }
  v44 = *(_QWORD *)(a1 + 56);
  v45 = *(unsigned __int8 **)(v44 - 8);
  *(_QWORD *)(a1 + 40) = v45;
  *(_QWORD *)(a1 + 56) = v44 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (*v45 <= 1u)
  {
    *(_QWORD *)(a1 + 72) = "tex_faces";
    *(_QWORD *)(a1 + 80) = 9;
    *(_BYTE *)(a1 + 88) = 1;
  }
  sub_20B50671C(a1);
  v46 = a2[36];
  for (m = a2[37]; v46 != m; v46 += 12)
  {
    v48 = *(float **)v46;
    LODWORD(v70) = *(_DWORD *)(v46 + 8);
    v69 = (uint64_t)v48;
    *(_QWORD *)&v67 = 3;
    *((_QWORD *)&v67 + 1) = &v69;
    sub_20B5092A4(a1, (uint64_t)&v67);
  }
  v49 = *(_QWORD *)(a1 + 56);
  v50 = *(unsigned __int8 **)(v49 - 8);
  *(_QWORD *)(a1 + 40) = v50;
  *(_QWORD *)(a1 + 56) = v49 - 8;
  if (*(_BYTE *)(a1 + 88))
    *(_BYTE *)(a1 + 88) = 0;
  if (a3 >= 2)
  {
    if (*v50 <= 1u)
    {
      *(_QWORD *)(a1 + 72) = "box";
      *(_QWORD *)(a1 + 80) = 3;
      *(_BYTE *)(a1 + 88) = 1;
    }
    if (!*((_BYTE *)a2 + 344))
    {
      LOBYTE(v67) = 0;
      *((_QWORD *)&v67 + 1) = 0;
      v58 = (unsigned __int8 *)sub_20B506370(a1);
      v59 = *v58;
      *v58 = v67;
      LOBYTE(v67) = v59;
      v60 = *((_QWORD *)v58 + 1);
      *((_QWORD *)v58 + 1) = *((_QWORD *)&v67 + 1);
      *((_QWORD *)&v67 + 1) = v60;
      sub_20B4181DC((void ***)&v67 + 1, v59);
LABEL_91:
      if (a3 >= 4)
      {
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v64 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences_type";
          *(_QWORD *)(a1 + 80) = 16;
          if (!v64)
            *(_BYTE *)(a1 + 88) = 1;
        }
        sub_20B0E8938(a1, (_DWORD *)a2 + 87);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v65 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "confidences";
          *(_QWORD *)(a1 + 80) = 11;
          if (!v65)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v66 = a2[44];
        *(_QWORD *)&v67 = (a2[45] - v66) >> 2;
        *((_QWORD *)&v67 + 1) = v66;
        sub_20B509D64(a1, (float **)&v67);
      }
      return;
    }
    v51 = *(_DWORD *)(a1 + 8);
    sub_20B50671C(a1);
    *(_QWORD *)&v67 = "version";
    *((_QWORD *)&v67 + 1) = 7;
    LODWORD(v68[0]) = 2;
    if (**(unsigned __int8 **)(a1 + 40) > 1u
      || (v52 = *(unsigned __int8 *)(a1 + 88), *(_QWORD *)(a1 + 72) = "version", *(_QWORD *)(a1 + 80) = 7, v52))
    {
      v53 = (__int128 *)(a2 + 40);
      sub_20B5086B4(a1, v68);
      if (v51 >= 1)
      {
LABEL_69:
        if (v51 == 2)
        {
          *(_QWORD *)&v67 = "min_version";
          *((_QWORD *)&v67 + 1) = 11;
          LODWORD(v68[0]) = 2;
          if (**(unsigned __int8 **)(a1 + 40) <= 1u)
          {
            v54 = *(unsigned __int8 *)(a1 + 88);
            *(_QWORD *)(a1 + 72) = "min_version";
            *(_QWORD *)(a1 + 80) = 11;
            if (!v54)
              *(_BYTE *)(a1 + 88) = 1;
          }
          sub_20B5086B4(a1, v68);
        }
        v67 = *v53;
        v68[0] = *((_QWORD *)v53 + 2);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v55 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "min";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v55)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v69 = 3;
        v70 = &v67;
        sub_20B509D64(a1, (float **)&v69);
        if (**(unsigned __int8 **)(a1 + 40) <= 1u)
        {
          v56 = *(unsigned __int8 *)(a1 + 88);
          *(_QWORD *)(a1 + 72) = "max";
          *(_QWORD *)(a1 + 80) = 3;
          if (!v56)
            *(_BYTE *)(a1 + 88) = 1;
        }
        v57 = (unint64_t)&v67 | 0xC;
LABEL_89:
        v69 = 3;
        v70 = (__int128 *)v57;
        sub_20B509D64(a1, (float **)&v69);
        v63 = *(_QWORD *)(a1 + 56);
        *(_QWORD *)(a1 + 40) = *(_QWORD *)(v63 - 8);
        *(_QWORD *)(a1 + 56) = v63 - 8;
        if (*(_BYTE *)(a1 + 88))
          *(_BYTE *)(a1 + 88) = 0;
        goto LABEL_91;
      }
    }
    else
    {
      *(_BYTE *)(a1 + 88) = 1;
      v53 = (__int128 *)(a2 + 40);
      sub_20B5086B4(a1, v68);
      if (v51 >= 1)
        goto LABEL_69;
    }
    v67 = *v53;
    v68[0] = *((_QWORD *)v53 + 2);
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v61 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "min";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v61)
        *(_BYTE *)(a1 + 88) = 1;
    }
    v69 = 3;
    v70 = &v67;
    sub_20B509D64(a1, (float **)&v69);
    v57 = (unint64_t)&v67 | 0xC;
    if (**(unsigned __int8 **)(a1 + 40) <= 1u)
    {
      v62 = *(unsigned __int8 *)(a1 + 88);
      *(_QWORD *)(a1 + 72) = "max";
      *(_QWORD *)(a1 + 80) = 3;
      if (!v62)
        *(_BYTE *)(a1 + 88) = 1;
    }
    goto LABEL_89;
  }
}

void sub_20B0E7B7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, unsigned __int8 a9)
{
  void ***v9;

  sub_20B4181DC(v9, a9);
  _Unwind_Resume(a1);
}

uint64_t sub_20B0E7B94(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  __int128 v5;

  v4 = sub_20B0E7D44((_QWORD *)a1, a2);
  *((_DWORD *)v4 + 8) = *(_DWORD *)(a2 + 32);
  sub_20B0E7D44(v4 + 5, a2 + 40);
  *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
  sub_20B0E7D44((_QWORD *)(a1 + 80), a2 + 80);
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  sub_20B0E7FAC((_QWORD *)(a1 + 120), a2 + 120);
  *(_DWORD *)(a1 + 152) = *(_DWORD *)(a2 + 152);
  sub_20B0E7FAC((_QWORD *)(a1 + 160), a2 + 160);
  sub_20B0E8118((_QWORD *)(a1 + 192), a2 + 192);
  sub_20B0E8380((_QWORD *)(a1 + 224), a2 + 224);
  sub_20B0E85A0((_QWORD *)(a1 + 256), a2 + 256);
  sub_20B0E8118((_QWORD *)(a1 + 288), a2 + 288);
  v5 = *(_OWORD *)(a2 + 336);
  *(_OWORD *)(a1 + 320) = *(_OWORD *)(a2 + 320);
  *(_OWORD *)(a1 + 336) = v5;
  sub_20B0E87C0((_QWORD *)(a1 + 352), a2 + 352);
  return a1;
}

void sub_20B0E7C90(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  sub_20B0CDE68(v9);
  sub_20B0CDEF4(v8);
  sub_20B0CDF74(v7);
  sub_20B0CDE68(v6);
  sub_20B0CDFF4(v5);
  sub_20B0CDFF4(v4);
  sub_20B0CE070(v3);
  sub_20B0CE070(v2);
  sub_20B0CE070(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E7D04()
{
  JUMPOUT(0x20B0E7CDCLL);
}

void sub_20B0E7D0C()
{
  JUMPOUT(0x20B0E7CE4);
}

void sub_20B0E7D14(_Unwind_Exception *a1)
{
  uint64_t *v1;
  uint64_t *v2;

  sub_20B0CE070(v2);
  sub_20B0CE070(v1);
  _Unwind_Resume(a1);
}

void sub_20B0E7D30(_Unwind_Exception *a1)
{
  uint64_t *v1;

  sub_20B0CE070(v1);
  _Unwind_Resume(a1);
}

_QWORD *sub_20B0E7D44(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20AECFAB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C40DCF0[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      sub_20AEC60B8();
    v11 = -1431655765 * (v7 >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20AECFAB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C40DD00[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[12 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_20B0E7E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20AECFAB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C40DC08[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0E7ED4()
{
  return 0;
}

uint64_t sub_20B0E7EDC()
{
  return 0x100000000;
}

void *sub_20B0E7EE4(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_20B0E7F14(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_20B0E7FAC(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  size_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20AECFAB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C40DD10[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if ((v7 & 0x8000000000000000) != 0)
      sub_20AEC60B8();
    v11 = v7;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20AECFAB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C40DD20[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[v7];
  }
  return a1;
}

void sub_20B0E80A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = *(_DWORD *)(v14 + 16) - v17;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20AECFAB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C40DBF8[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0E8108()
{
  return 0;
}

uint64_t sub_20B0E8110()
{
  return 0x100000000;
}

_QWORD *sub_20B0E8118(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20AECFAB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C40DD30[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v7 >> 2) >= 0x1555555555555556)
      sub_20AEC60B8();
    v11 = -1431655765 * (v7 >> 2);
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20AECFAB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C40DD40[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[12 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_20B0E8234(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = -1431655765 * ((unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2);
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20AECFAB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C40DBC8[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0E82A8()
{
  return 0;
}

uint64_t sub_20B0E82B0()
{
  return 0x100000000;
}

void *sub_20B0E82B8(unsigned int **a1)
{
  return operator new(12 * **a1);
}

vm_address_t sub_20B0E82E8(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (((12 * **a1 + 4095) & 0x1FFFFFF000) * (unsigned __int128)0x1555555555555556uLL) >> 64;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 12 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_20B0E8380(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20AECFAB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C40DD50[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_20AEC60B8();
    v11 = (unint64_t)v7 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20AECFAB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C40DD60[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[8 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[8 * (v7 >> 3)];
  }
  return a1;
}

void sub_20B0E8480(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20AECFAB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C40DBE8[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0E84E8()
{
  return 0;
}

uint64_t sub_20B0E84F0()
{
  return 0x100000000;
}

void *sub_20B0E84F8(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_20B0E8524(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_20B0E85A0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20AECFAB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C40DD70[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_20AEC60B8();
    v11 = (unint64_t)v7 >> 3;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20AECFAB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C40DD80[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[8 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[8 * (v7 >> 3)];
  }
  return a1;
}

void sub_20B0E86A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 3;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20AECFAB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C40DBD8[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0E8708()
{
  return 0;
}

uint64_t sub_20B0E8710()
{
  return 0x100000000;
}

void *sub_20B0E8718(unsigned int **a1)
{
  return operator new(8 * **a1);
}

vm_address_t sub_20B0E8744(unsigned int **a1)
{
  uint64_t v1;
  std::bad_alloc *exception;
  std::bad_alloc *v4;
  vm_address_t address;

  v1 = (**a1 + 511) & 0x1FFFFFE00;
  address = 0;
  if (vm_allocate(*MEMORY[0x24BDAEC58], &address, 8 * v1, 1))
  {
    exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
    v4 = std::bad_alloc::bad_alloc(exception);
    __cxa_throw(v4, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
  }
  return address;
}

_QWORD *sub_20B0E87C0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v5;
  const void *v6;
  int64_t v7;
  char *v8;
  uint64_t v9;
  int v11;
  int *v12;
  char *v13;
  char v14;

  *a1 = 0;
  a1[1] = 0;
  v2 = *(unsigned int *)(a2 + 28);
  if ((_DWORD)v2 == -1)
    sub_20AECFAB8();
  v13 = &v14;
  v5 = ((uint64_t (*)(char **, uint64_t))off_24C40DD90[v2])(&v13, a2 + 24);
  a1[3] = v5;
  a1[2] = 0;
  v6 = *(const void **)a2;
  v7 = *(_QWORD *)(a2 + 8) - *(_QWORD *)a2;
  if (v7)
  {
    if (v7 < 0)
      sub_20AEC60B8();
    v11 = (unint64_t)v7 >> 2;
    if (HIDWORD(v5) == 0xFFFFFFFF)
      sub_20AECFAB8();
    v12 = &v11;
    v8 = (char *)((uint64_t (*)(int **, _QWORD *))off_24C40DDA0[HIDWORD(v5)])(&v12, a1 + 3);
    *a1 = v8;
    a1[1] = v8;
    a1[2] = &v8[4 * v9];
    memmove(v8, v6, v7);
    a1[1] = &v8[4 * (v7 >> 2)];
  }
  return a1;
}

void sub_20B0E88C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, uint64_t *a14)
{
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  v17 = *(_QWORD *)v14;
  if (*(_QWORD *)v14)
  {
    *(_QWORD *)(v14 + 8) = v17;
    v18 = (unint64_t)(*(_QWORD *)(v14 + 16) - v17) >> 2;
    a12 = v17;
    a13 = v18;
    v19 = *(unsigned int *)(v14 + 28);
    if ((_DWORD)v19 == -1)
      sub_20AECFAB8();
    a14 = &a12;
    ((void (*)(uint64_t **, uint64_t))off_24C40DBB8[v19])(&a14, v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_20B0E8928()
{
  return 0;
}

uint64_t sub_20B0E8930()
{
  return 0x100000000;
}

void sub_20B0E8938(uint64_t a1, _DWORD *a2)
{
  void *__p[2];
  char v4;
  _BYTE v5[24];
  int v6;
  char v7;
  char *v8;

  v6 = 0;
  sub_20B0E8A38((uint64_t)v5, a2);
  if (v6 == -1)
    sub_20AECFAB8();
  v8 = &v7;
  ((void (*)(void **__return_ptr, char **, _BYTE *))off_24C40DC60[v6])(__p, &v8, v5);
  if (v6 != -1)
    ((void (*)(char **, _BYTE *))off_24C40DC48[v6])(&v8, v5);
  sub_20B508B7C(a1, (uint64_t)__p);
  if (v4 < 0)
    operator delete(__p[0]);
}

void sub_20B0E89F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0E8A10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0E8A24(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20AECFA60((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_20B0E8A38(uint64_t a1, _DWORD *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  int v7;
  size_t v8;
  void **v9;
  unint64_t v10;
  unint64_t v11;
  const void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  void *__dst[2];
  unint64_t v21;
  _QWORD v22[5];
  _QWORD *v23;

  v4 = operator new();
  *(_OWORD *)v4 = 0u;
  *(_OWORD *)(v4 + 16) = 0u;
  *(_OWORD *)(v4 + 32) = 0u;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 112) = 0u;
  *(_OWORD *)(v4 + 128) = 0u;
  *(_OWORD *)(v4 + 144) = 0u;
  *(_OWORD *)(v4 + 160) = 0u;
  *(_OWORD *)(v4 + 176) = 0u;
  *(_OWORD *)(v4 + 192) = 0u;
  *(_OWORD *)(v4 + 208) = 0u;
  *(_OWORD *)(v4 + 224) = 0u;
  *(_OWORD *)(v4 + 240) = 0u;
  *(_OWORD *)(v4 + 256) = 0u;
  *(_QWORD *)(v4 + 272) = 0;
  sub_20AEC0BD8(v4);
  v22[0] = v4;
  v5 = "unknown";
  v6 = 7;
  switch(*a2)
  {
    case 0:
      goto LABEL_4;
    case 1:
      v5 = "per-vertex";
      v6 = 10;
      goto LABEL_4;
    case 2:
      v5 = "per-face";
      v6 = 8;
LABEL_4:
      sub_20AEC01D0((_QWORD *)(v4 + 16), (uint64_t)v5, v6);
      break;
    case 3:
      sub_20B531B64("/Library/Caches/com.apple.xbs/Sources/AppleCV3D_VisualLogger/library/Kit/Mesh/src/TriMesh.cpp", 46, (uint64_t)&unk_20B5AC6D6, 0, (uint64_t)"Unsupported type", 16, (void (*)(void **))sub_20B532360);
      abort();
    default:
      break;
  }
  v7 = *(_DWORD *)(v4 + 120);
  if ((v7 & 0x10) != 0)
  {
    v10 = *(_QWORD *)(v4 + 112);
    v11 = *(_QWORD *)(v4 + 72);
    if (v10 < v11)
    {
      *(_QWORD *)(v4 + 112) = v11;
      v10 = v11;
    }
    v12 = *(const void **)(v4 + 64);
    v8 = v10 - (_QWORD)v12;
    if (v10 - (unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      goto LABEL_26;
  }
  else
  {
    if ((v7 & 8) == 0)
    {
      v8 = 0;
      HIBYTE(v21) = 0;
      v9 = __dst;
      goto LABEL_18;
    }
    v12 = *(const void **)(v4 + 40);
    v8 = *(_QWORD *)(v4 + 56) - (_QWORD)v12;
    if (v8 >= 0x7FFFFFFFFFFFFFF8)
LABEL_26:
      sub_20AEC0138();
  }
  if (v8 >= 0x17)
  {
    v13 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v13 = v8 | 7;
    v14 = v13 + 1;
    v9 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v8;
    v21 = v14 | 0x8000000000000000;
    __dst[0] = v9;
    goto LABEL_17;
  }
  HIBYTE(v21) = v8;
  v9 = __dst;
  if (v8)
LABEL_17:
    memmove(v9, v12, v8);
LABEL_18:
  *((_BYTE *)v9 + v8) = 0;
  v15 = v22[0];
  if (v22[0])
  {
    v16 = MEMORY[0x24BEDB7F0];
    v17 = *MEMORY[0x24BEDB7F0];
    *(_QWORD *)v22[0] = *MEMORY[0x24BEDB7F0];
    v18 = *(_QWORD *)(v16 + 72);
    *(_QWORD *)(v15 + *(_QWORD *)(v17 - 24)) = *(_QWORD *)(v16 + 64);
    *(_QWORD *)(v15 + 24) = MEMORY[0x24BEDB848] + 16;
    *(_QWORD *)(v15 + 16) = v18;
    if (*(char *)(v15 + 111) < 0)
      operator delete(*(void **)(v15 + 88));
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x20BD35758](v15 + 128);
    MEMORY[0x20BD3583C](v15, 0x10B2C40EED050F3);
  }
  v22[0] = a1;
  v22[1] = __dst;
  v22[2] = a1;
  v22[3] = __dst;
  v22[4] = __dst;
  v19 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v19 == -1)
    sub_20AECFAB8();
  v23 = v22;
  ((void (*)(_QWORD **, uint64_t, uint64_t))off_24C40DC30[v19])(&v23, a1, v6);
  if (SHIBYTE(v21) < 0)
    operator delete(__dst[0]);
}

void sub_20B0E8D08(_Unwind_Exception *a1)
{
  uint64_t v1;

  MEMORY[0x20BD3583C](v1, 0x10B2C40EED050F3);
  _Unwind_Resume(a1);
}

void sub_20B0E8D2C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0)
    operator delete(__p);
  _Unwind_Resume(exception_object);
}

void sub_20B0E8D48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_list va;

  va_start(va, a5);
  sub_20B52CE84((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_20B0E8D5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  size_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11[48];

  v5 = *(_QWORD *)(a2 + 24);
  if (*(_BYTE *)(v5 + 40))
  {
    v11[0] = (uint64_t *)(v5 + 16);
    sub_20B51E95C(v11, 4u);
  }
  else
  {
    sub_20B51EBD0((uint64_t)v11, v5 + 8);
  }
  sub_20B51956C(*(_QWORD *)(a2 + 24));
  sub_20B0E7B94((uint64_t)v11, a3);
  sub_20B0E8E84(a2, (uint64_t)v11, 4u);
  sub_20B0CDABC((uint64_t *)v11);
  v6 = *(_QWORD *)(a2 + 24);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v6 + 48), *(_QWORD *)(v6 + 16) - v7 - 9);
  v8 = *(_QWORD *)(v6 + 48);
  if (v8)
    memmove((void *)(*(_QWORD *)(v6 + 24) + v7), *(const void **)(v6 + 56), v8);
  *(_QWORD *)(v6 + 48) = 0;
  v9 = *(_QWORD *)(v6 + 80);
  v10 = *(_QWORD *)(v6 + 88) - 8;
  *(_QWORD *)(v6 + 88) = v10;
  if (v9 == v10)
  {
    std::ostream::write();
    if (*(_BYTE *)(v6 + 40))
    {
      free(*(void **)(v6 + 24));
      *(_BYTE *)(v6 + 40) = 0;
    }
  }
}

void sub_20B0E8E70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_20B0CDABC(&a9);
  _Unwind_Resume(a1);
}

void sub_20B0E8E84(uint64_t a1, uint64_t a2, unsigned int a3)
{
  unint64_t v6;
  uint64_t v7;
  unsigned int *v8;
  unsigned int *v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  size_t v18;
  BOOL v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  size_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  size_t v33;
  char *v34;
  char *v35;
  unsigned int v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int *v40;
  unsigned int *i;
  unsigned int v42;
  unsigned int v43;
  unsigned int v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  uint64_t v48;
  size_t v49;
  size_t v50;
  char *v51;
  char *v52;
  uint64_t v53;
  uint64_t v54;
  unsigned int v55;
  uint64_t v56;
  size_t v57;
  char *v58;
  char *v59;
  uint64_t v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  size_t v64;
  char *v65;
  char *v66;
  unsigned int v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int *v71;
  unsigned int *j;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t v76;
  unsigned int v77;
  uint64_t v78;
  uint64_t v79;
  size_t v80;
  size_t v81;
  char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unsigned int v86;
  uint64_t v87;
  size_t v88;
  char *v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  size_t v95;
  char *v96;
  char *v97;
  unsigned int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  char *v102;
  char *v103;
  int64_t v104;
  uint64_t v105;
  char v106;
  int v107;
  unsigned int v108;
  uint64_t v109;
  unint64_t v110;
  uint64_t v111;
  char *v112;
  char *v113;
  int64_t v114;
  uint64_t v115;
  char v116;
  int v117;
  unint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int *v122;
  uint64_t v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unsigned int v127;
  unsigned int v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  unsigned int *v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  unsigned int v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int *v141;
  unsigned int *k;
  unsigned int v143;
  unsigned int v144;
  uint64_t v145;
  unsigned int v146;
  uint64_t v147;
  uint64_t v148;
  size_t v149;
  size_t v150;
  char *v151;
  char *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  size_t v157;
  char *v158;
  char *v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  unsigned int *v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  unsigned int v168;
  unsigned int v169;
  unsigned int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  unsigned int v178;
  unsigned int v179;
  unsigned int v180;
  uint64_t v181;
  uint64_t v182;
  size_t v183;
  uint64_t v184;
  uint64_t v185;
  unsigned int v186;
  uint64_t v187;
  unint64_t v188;
  uint64_t v189;
  unsigned int *v190;
  unsigned int *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  unsigned int v196;
  std::bad_alloc *exception;
  std::bad_alloc *v198;
  uint64_t *v199;
  char v200;

  v6 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 8) - *(_QWORD *)a2) >> 2);
  v7 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v7 + 40))
  {
    v199 = (uint64_t *)(v7 + 16);
    sub_20B51F33C(&v199, v6);
    v8 = *(unsigned int **)a2;
    v9 = *(unsigned int **)(a2 + 8);
    if (v9 != *(unsigned int **)a2)
      goto LABEL_7;
  }
  else
  {
    sub_20B51F644();
    v8 = *(unsigned int **)a2;
    v9 = *(unsigned int **)(a2 + 8);
    if (v9 != *(unsigned int **)a2)
    {
      do
      {
LABEL_7:
        while (1)
        {
          v13 = *(_QWORD *)(a1 + 24);
          if (*(_BYTE *)(v13 + 40))
            break;
          v10 = *v8;
          LOBYTE(v199) = -54;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v10);
          std::ostream::write();
          v11 = v8[1];
          LOBYTE(v199) = -54;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v11);
          std::ostream::write();
          v12 = v8[2];
          LOBYTE(v199) = -54;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v12);
          std::ostream::write();
          v8 += 3;
          if (v8 == v9)
            goto LABEL_43;
        }
        v14 = *v8;
        v15 = *(_QWORD *)(v13 + 32);
        v16 = *(_QWORD *)(v13 + 16);
        if ((unint64_t)(v15 - v16) >= 5)
        {
          v20 = *(char **)(v13 + 24);
        }
        else
        {
          if (v15)
            v17 = 2 * v15;
          else
            v17 = 0x2000;
          v18 = v16 + 5;
          while (v17 < v18)
          {
            v19 = (uint64_t)v17 <= 0;
            v17 *= 2;
            if (v19)
            {
              v17 = v18;
              break;
            }
          }
          v20 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v17, 0xAD6A59EEuLL);
          if (!v20)
          {
LABEL_316:
            exception = (std::bad_alloc *)__cxa_allocate_exception(8uLL);
            v198 = std::bad_alloc::bad_alloc(exception);
            __cxa_throw(v198, MEMORY[0x24BEDB758], MEMORY[0x24BEDB670]);
          }
          *(_QWORD *)(v13 + 24) = v20;
          *(_QWORD *)(v13 + 32) = v17;
          v16 = *(_QWORD *)(v13 + 16);
        }
        v21 = &v20[v16];
        *v21 = -54;
        *(_DWORD *)(v21 + 1) = bswap32(v14);
        v22 = *(_QWORD *)(v13 + 16);
        v23 = v22 + 5;
        *(_QWORD *)(v13 + 16) = v22 + 5;
        v24 = v8[1];
        v25 = *(_QWORD *)(v13 + 32);
        if ((unint64_t)(v25 - (v22 + 5)) >= 5)
        {
          v27 = *(char **)(v13 + 24);
        }
        else
        {
          if (v25)
            v26 = 2 * v25;
          else
            v26 = 0x2000;
          while (v26 < v22 + 10)
          {
            v19 = (uint64_t)v26 <= 0;
            v26 *= 2;
            if (v19)
            {
              v26 = v22 + 10;
              break;
            }
          }
          v27 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v26, 0xAD6A59EEuLL);
          if (!v27)
            goto LABEL_316;
          *(_QWORD *)(v13 + 24) = v27;
          *(_QWORD *)(v13 + 32) = v26;
          v23 = *(_QWORD *)(v13 + 16);
        }
        v28 = &v27[v23];
        *v28 = -54;
        *(_DWORD *)(v28 + 1) = bswap32(v24);
        v29 = *(_QWORD *)(v13 + 16);
        v30 = v29 + 5;
        *(_QWORD *)(v13 + 16) = v29 + 5;
        v31 = v8[2];
        v32 = *(_QWORD *)(v13 + 32);
        if ((unint64_t)(v32 - (v29 + 5)) >= 5)
        {
          v34 = *(char **)(v13 + 24);
        }
        else
        {
          if (v32)
            v33 = 2 * v32;
          else
            v33 = 0x2000;
          while (v33 < v29 + 10)
          {
            v19 = (uint64_t)v33 <= 0;
            v33 *= 2;
            if (v19)
            {
              v33 = v29 + 10;
              break;
            }
          }
          v34 = (char *)malloc_type_realloc(*(void **)(v13 + 24), v33, 0xAD6A59EEuLL);
          if (!v34)
            goto LABEL_316;
          *(_QWORD *)(v13 + 24) = v34;
          *(_QWORD *)(v13 + 32) = v33;
          v30 = *(_QWORD *)(v13 + 16);
        }
        v35 = &v34[v30];
        *v35 = -54;
        *(_DWORD *)(v35 + 1) = bswap32(v31);
        *(_QWORD *)(v13 + 16) += 5;
        v8 += 3;
      }
      while (v8 != v9);
    }
  }
LABEL_43:
  v36 = *(_DWORD *)(a2 + 32);
  v37 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v37 + 40))
  {
    v199 = (uint64_t *)(v37 + 16);
    sub_20B51E95C(&v199, v36);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v199, v37 + 8);
  }
  v38 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 48) - *(_QWORD *)(a2 + 40)) >> 2);
  v39 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v39 + 40))
  {
    v199 = (uint64_t *)(v39 + 16);
    sub_20B51F33C(&v199, v38);
    v40 = *(unsigned int **)(a2 + 40);
    i = *(unsigned int **)(a2 + 48);
    if (i != v40)
      goto LABEL_52;
  }
  else
  {
    sub_20B51F644();
    v40 = *(unsigned int **)(a2 + 40);
    for (i = *(unsigned int **)(a2 + 48); v40 != i; v40 += 3)
    {
LABEL_52:
      while (1)
      {
        v45 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v45 + 40))
          break;
        v42 = *v40;
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v42);
        std::ostream::write();
        v43 = v40[1];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v43);
        std::ostream::write();
        v44 = v40[2];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v44);
        std::ostream::write();
        v40 += 3;
        if (v40 == i)
          goto LABEL_88;
      }
      v46 = *v40;
      v47 = *(_QWORD *)(v45 + 32);
      v48 = *(_QWORD *)(v45 + 16);
      if ((unint64_t)(v47 - v48) >= 5)
      {
        v51 = *(char **)(v45 + 24);
      }
      else
      {
        if (v47)
          v49 = 2 * v47;
        else
          v49 = 0x2000;
        v50 = v48 + 5;
        while (v49 < v50)
        {
          v19 = (uint64_t)v49 <= 0;
          v49 *= 2;
          if (v19)
          {
            v49 = v50;
            break;
          }
        }
        v51 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v49, 0xAD6A59EEuLL);
        if (!v51)
          goto LABEL_316;
        *(_QWORD *)(v45 + 24) = v51;
        *(_QWORD *)(v45 + 32) = v49;
        v48 = *(_QWORD *)(v45 + 16);
      }
      v52 = &v51[v48];
      *v52 = -54;
      *(_DWORD *)(v52 + 1) = bswap32(v46);
      v53 = *(_QWORD *)(v45 + 16);
      v54 = v53 + 5;
      *(_QWORD *)(v45 + 16) = v53 + 5;
      v55 = v40[1];
      v56 = *(_QWORD *)(v45 + 32);
      if ((unint64_t)(v56 - (v53 + 5)) >= 5)
      {
        v58 = *(char **)(v45 + 24);
      }
      else
      {
        if (v56)
          v57 = 2 * v56;
        else
          v57 = 0x2000;
        while (v57 < v53 + 10)
        {
          v19 = (uint64_t)v57 <= 0;
          v57 *= 2;
          if (v19)
          {
            v57 = v53 + 10;
            break;
          }
        }
        v58 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v57, 0xAD6A59EEuLL);
        if (!v58)
          goto LABEL_316;
        *(_QWORD *)(v45 + 24) = v58;
        *(_QWORD *)(v45 + 32) = v57;
        v54 = *(_QWORD *)(v45 + 16);
      }
      v59 = &v58[v54];
      *v59 = -54;
      *(_DWORD *)(v59 + 1) = bswap32(v55);
      v60 = *(_QWORD *)(v45 + 16);
      v61 = v60 + 5;
      *(_QWORD *)(v45 + 16) = v60 + 5;
      v62 = v40[2];
      v63 = *(_QWORD *)(v45 + 32);
      if ((unint64_t)(v63 - (v60 + 5)) >= 5)
      {
        v65 = *(char **)(v45 + 24);
      }
      else
      {
        if (v63)
          v64 = 2 * v63;
        else
          v64 = 0x2000;
        while (v64 < v60 + 10)
        {
          v19 = (uint64_t)v64 <= 0;
          v64 *= 2;
          if (v19)
          {
            v64 = v60 + 10;
            break;
          }
        }
        v65 = (char *)malloc_type_realloc(*(void **)(v45 + 24), v64, 0xAD6A59EEuLL);
        if (!v65)
          goto LABEL_316;
        *(_QWORD *)(v45 + 24) = v65;
        *(_QWORD *)(v45 + 32) = v64;
        v61 = *(_QWORD *)(v45 + 16);
      }
      v66 = &v65[v61];
      *v66 = -54;
      *(_DWORD *)(v66 + 1) = bswap32(v62);
      *(_QWORD *)(v45 + 16) += 5;
    }
  }
LABEL_88:
  v67 = *(_DWORD *)(a2 + 72);
  v68 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v68 + 40))
  {
    v199 = (uint64_t *)(v68 + 16);
    sub_20B51E95C(&v199, v67);
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v199, v68 + 8);
  }
  v69 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 88) - *(_QWORD *)(a2 + 80)) >> 2);
  v70 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v70 + 40))
  {
    v199 = (uint64_t *)(v70 + 16);
    sub_20B51F33C(&v199, v69);
    v71 = *(unsigned int **)(a2 + 80);
    j = *(unsigned int **)(a2 + 88);
    if (j != v71)
      goto LABEL_97;
  }
  else
  {
    sub_20B51F644();
    v71 = *(unsigned int **)(a2 + 80);
    for (j = *(unsigned int **)(a2 + 88); v71 != j; v71 += 3)
    {
LABEL_97:
      while (1)
      {
        v76 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v76 + 40))
          break;
        v73 = *v71;
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v73);
        std::ostream::write();
        v74 = v71[1];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v74);
        std::ostream::write();
        v75 = v71[2];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v75);
        std::ostream::write();
        v71 += 3;
        if (v71 == j)
          goto LABEL_133;
      }
      v77 = *v71;
      v78 = *(_QWORD *)(v76 + 32);
      v79 = *(_QWORD *)(v76 + 16);
      if ((unint64_t)(v78 - v79) >= 5)
      {
        v82 = *(char **)(v76 + 24);
      }
      else
      {
        if (v78)
          v80 = 2 * v78;
        else
          v80 = 0x2000;
        v81 = v79 + 5;
        while (v80 < v81)
        {
          v19 = (uint64_t)v80 <= 0;
          v80 *= 2;
          if (v19)
          {
            v80 = v81;
            break;
          }
        }
        v82 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v80, 0xAD6A59EEuLL);
        if (!v82)
          goto LABEL_316;
        *(_QWORD *)(v76 + 24) = v82;
        *(_QWORD *)(v76 + 32) = v80;
        v79 = *(_QWORD *)(v76 + 16);
      }
      v83 = &v82[v79];
      *v83 = -54;
      *(_DWORD *)(v83 + 1) = bswap32(v77);
      v84 = *(_QWORD *)(v76 + 16);
      v85 = v84 + 5;
      *(_QWORD *)(v76 + 16) = v84 + 5;
      v86 = v71[1];
      v87 = *(_QWORD *)(v76 + 32);
      if ((unint64_t)(v87 - (v84 + 5)) >= 5)
      {
        v89 = *(char **)(v76 + 24);
      }
      else
      {
        if (v87)
          v88 = 2 * v87;
        else
          v88 = 0x2000;
        while (v88 < v84 + 10)
        {
          v19 = (uint64_t)v88 <= 0;
          v88 *= 2;
          if (v19)
          {
            v88 = v84 + 10;
            break;
          }
        }
        v89 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v88, 0xAD6A59EEuLL);
        if (!v89)
          goto LABEL_316;
        *(_QWORD *)(v76 + 24) = v89;
        *(_QWORD *)(v76 + 32) = v88;
        v85 = *(_QWORD *)(v76 + 16);
      }
      v90 = &v89[v85];
      *v90 = -54;
      *(_DWORD *)(v90 + 1) = bswap32(v86);
      v91 = *(_QWORD *)(v76 + 16);
      v92 = v91 + 5;
      *(_QWORD *)(v76 + 16) = v91 + 5;
      v93 = v71[2];
      v94 = *(_QWORD *)(v76 + 32);
      if ((unint64_t)(v94 - (v91 + 5)) >= 5)
      {
        v96 = *(char **)(v76 + 24);
      }
      else
      {
        if (v94)
          v95 = 2 * v94;
        else
          v95 = 0x2000;
        while (v95 < v91 + 10)
        {
          v19 = (uint64_t)v95 <= 0;
          v95 *= 2;
          if (v19)
          {
            v95 = v91 + 10;
            break;
          }
        }
        v96 = (char *)malloc_type_realloc(*(void **)(v76 + 24), v95, 0xAD6A59EEuLL);
        if (!v96)
          goto LABEL_316;
        *(_QWORD *)(v76 + 24) = v96;
        *(_QWORD *)(v76 + 32) = v95;
        v92 = *(_QWORD *)(v76 + 16);
      }
      v97 = &v96[v92];
      *v97 = -54;
      *(_DWORD *)(v97 + 1) = bswap32(v93);
      *(_QWORD *)(v76 + 16) += 5;
    }
  }
LABEL_133:
  v98 = *(_DWORD *)(a2 + 112);
  v99 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v99 + 40))
  {
    v199 = (uint64_t *)(v99 + 16);
    sub_20B51E95C(&v199, v98);
    v100 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
    v101 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v101 + 40))
      goto LABEL_135;
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v199, v99 + 8);
    v100 = *(_QWORD *)(a2 + 128) - *(_QWORD *)(a2 + 120);
    v101 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v101 + 40))
    {
LABEL_135:
      v199 = (uint64_t *)(v101 + 16);
      sub_20B51F33C(&v199, v100);
      v103 = *(char **)(a2 + 120);
      v102 = *(char **)(a2 + 128);
      v104 = v102 - v103;
      v105 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v105 + 40))
        goto LABEL_136;
      goto LABEL_141;
    }
  }
  sub_20B51F644();
  v103 = *(char **)(a2 + 120);
  v102 = *(char **)(a2 + 128);
  v104 = v102 - v103;
  v105 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v105 + 40))
  {
LABEL_136:
    v199 = (uint64_t *)(v105 + 16);
    if (v102 != v103)
    {
      do
      {
        v106 = *v103++;
        sub_20B51DD74(&v199, v106);
        --v104;
      }
      while (v104);
    }
    goto LABEL_146;
  }
LABEL_141:
  if (v102 != v103)
  {
    do
    {
      while (1)
      {
        v107 = *v103;
        if ((v107 & 0x80000000) == 0)
          break;
        LOBYTE(v199) = -52;
        BYTE1(v199) = v107;
        std::ostream::write();
        ++v103;
        if (!--v104)
          goto LABEL_146;
      }
      LOBYTE(v199) = *v103;
      std::ostream::write();
      ++v103;
      --v104;
    }
    while (v104);
  }
LABEL_146:
  v108 = *(_DWORD *)(a2 + 152);
  v109 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v109 + 40))
  {
    v199 = (uint64_t *)(v109 + 16);
    sub_20B51E95C(&v199, v108);
    v110 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
    v111 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v111 + 40))
      goto LABEL_148;
  }
  else
  {
    sub_20B51EBD0((uint64_t)&v199, v109 + 8);
    v110 = *(_QWORD *)(a2 + 168) - *(_QWORD *)(a2 + 160);
    v111 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v111 + 40))
    {
LABEL_148:
      v199 = (uint64_t *)(v111 + 16);
      sub_20B51F33C(&v199, v110);
      v113 = *(char **)(a2 + 160);
      v112 = *(char **)(a2 + 168);
      v114 = v112 - v113;
      v115 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v115 + 40))
        goto LABEL_149;
      goto LABEL_154;
    }
  }
  sub_20B51F644();
  v113 = *(char **)(a2 + 160);
  v112 = *(char **)(a2 + 168);
  v114 = v112 - v113;
  v115 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v115 + 40))
  {
LABEL_149:
    v199 = (uint64_t *)(v115 + 16);
    if (v112 != v113)
    {
      do
      {
        v116 = *v113++;
        sub_20B51DD74(&v199, v116);
        --v114;
      }
      while (v114);
    }
    goto LABEL_159;
  }
LABEL_154:
  if (v112 != v113)
  {
    do
    {
      while (1)
      {
        v117 = *v113;
        if ((v117 & 0x80000000) == 0)
          break;
        LOBYTE(v199) = -52;
        BYTE1(v199) = v117;
        std::ostream::write();
        ++v113;
        if (!--v114)
          goto LABEL_159;
      }
      LOBYTE(v199) = *v113;
      std::ostream::write();
      ++v113;
      --v114;
    }
    while (v114);
  }
LABEL_159:
  v118 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 200) - *(_QWORD *)(a2 + 192)) >> 2);
  v119 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v119 + 40))
  {
    sub_20B51F644();
    v120 = *(_QWORD *)(a2 + 192);
    v121 = *(_QWORD *)(a2 + 200) - v120;
    if (!v121)
      goto LABEL_192;
    goto LABEL_163;
  }
  v199 = (uint64_t *)(v119 + 16);
  sub_20B51F33C(&v199, v118);
  v120 = *(_QWORD *)(a2 + 192);
  v121 = *(_QWORD *)(a2 + 200) - v120;
  if (v121)
  {
LABEL_163:
    v122 = (unsigned int *)(v120 + 8);
    v123 = 12 * (v121 / 12);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v125 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v125 + 40))
            break;
          v199 = (uint64_t *)(v125 + 16);
          sub_20B51E95C(&v199, *(v122 - 2));
          sub_20B51E95C(&v199, *(v122 - 1));
          v124 = *v122;
          v122 += 3;
          sub_20B51E95C(&v199, v124);
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
        v126 = *(v122 - 2);
        if (v126 > 0xFF)
          break;
        if (v126 > 0x7F)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v126;
          std::ostream::write();
          v127 = *(v122 - 1);
          if (v127 < 0x100)
            goto LABEL_178;
        }
        else
        {
          LOBYTE(v199) = *(v122 - 2);
          std::ostream::write();
          v127 = *(v122 - 1);
          if (v127 < 0x100)
            goto LABEL_178;
        }
LABEL_174:
        if (v127 >= 0x10000)
        {
          LOBYTE(v199) = -50;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v127);
          std::ostream::write();
          v128 = *v122;
          if (*v122 >= 0x100)
            goto LABEL_182;
        }
        else
        {
          LOBYTE(v199) = -51;
          *(_WORD *)((char *)&v199 + 1) = bswap32(v127) >> 16;
          std::ostream::write();
          v128 = *v122;
          if (*v122 >= 0x100)
            goto LABEL_182;
        }
LABEL_186:
        if (v128 >= 0x80)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v128;
          std::ostream::write();
          v122 += 3;
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
        else
        {
          LOBYTE(v199) = v128;
          std::ostream::write();
          v122 += 3;
          v123 -= 12;
          if (!v123)
            goto LABEL_192;
        }
      }
      if (HIWORD(v126))
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v126);
        std::ostream::write();
        v127 = *(v122 - 1);
        if (v127 < 0x100)
          goto LABEL_178;
        goto LABEL_174;
      }
      LOBYTE(v199) = -51;
      *(_WORD *)((char *)&v199 + 1) = bswap32(v126) >> 16;
      std::ostream::write();
      v127 = *(v122 - 1);
      if (v127 >= 0x100)
        goto LABEL_174;
LABEL_178:
      if (v127 >= 0x80)
      {
        LOBYTE(v199) = -52;
        BYTE1(v199) = v127;
        std::ostream::write();
        v128 = *v122;
        if (*v122 >= 0x100)
          goto LABEL_182;
        goto LABEL_186;
      }
      LOBYTE(v199) = v127;
      std::ostream::write();
      v128 = *v122;
      if (*v122 < 0x100)
        goto LABEL_186;
LABEL_182:
      if (v128 >= 0x10000)
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v128);
        std::ostream::write();
        v122 += 3;
        v123 -= 12;
        if (!v123)
          break;
      }
      else
      {
        LOBYTE(v199) = -51;
        *(_WORD *)((char *)&v199 + 1) = bswap32(v128) >> 16;
        std::ostream::write();
        v122 += 3;
        v123 -= 12;
        if (!v123)
          break;
      }
    }
  }
LABEL_192:
  v129 = (uint64_t)(*(_QWORD *)(a2 + 232) - *(_QWORD *)(a2 + 224)) >> 3;
  v130 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v130 + 40))
  {
    sub_20B51F644();
    v131 = *(_QWORD *)(a2 + 224);
    v132 = *(_QWORD *)(a2 + 232) - v131;
    if (!v132)
      goto LABEL_217;
    goto LABEL_196;
  }
  v199 = (uint64_t *)(v130 + 16);
  sub_20B51F33C(&v199, v129);
  v131 = *(_QWORD *)(a2 + 224);
  v132 = *(_QWORD *)(a2 + 232) - v131;
  if (v132)
  {
LABEL_196:
    v133 = (unsigned int *)(v131 + 4);
    v134 = 8 * (v132 >> 3);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v136 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v136 + 40))
            break;
          v199 = (uint64_t *)(v136 + 16);
          sub_20B51E95C(&v199, *(v133 - 1));
          v135 = *v133;
          v133 += 2;
          sub_20B51E95C(&v199, v135);
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
        v137 = *(v133 - 1);
        if (v137 <= 0xFF)
          break;
        if (!HIWORD(v137))
        {
          LOBYTE(v199) = -51;
          *(_WORD *)((char *)&v199 + 1) = bswap32(v137) >> 16;
          std::ostream::write();
          v138 = *v133;
          if (*v133 < 0x100)
            goto LABEL_211;
          goto LABEL_207;
        }
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v137);
        std::ostream::write();
        v138 = *v133;
        if (*v133 >= 0x100)
          goto LABEL_207;
LABEL_211:
        if (v138 >= 0x80)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v138;
          std::ostream::write();
          v133 += 2;
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
        else
        {
          LOBYTE(v199) = v138;
          std::ostream::write();
          v133 += 2;
          v134 -= 8;
          if (!v134)
            goto LABEL_217;
        }
      }
      if (v137 > 0x7F)
      {
        LOBYTE(v199) = -52;
        BYTE1(v199) = v137;
        std::ostream::write();
        v138 = *v133;
        if (*v133 >= 0x100)
          goto LABEL_207;
        goto LABEL_211;
      }
      LOBYTE(v199) = *(v133 - 1);
      std::ostream::write();
      v138 = *v133;
      if (*v133 < 0x100)
        goto LABEL_211;
LABEL_207:
      if (v138 >= 0x10000)
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v138);
        std::ostream::write();
        v133 += 2;
        v134 -= 8;
        if (!v134)
          break;
      }
      else
      {
        LOBYTE(v199) = -51;
        *(_WORD *)((char *)&v199 + 1) = bswap32(v138) >> 16;
        std::ostream::write();
        v133 += 2;
        v134 -= 8;
        if (!v134)
          break;
      }
    }
  }
LABEL_217:
  v139 = (uint64_t)(*(_QWORD *)(a2 + 264) - *(_QWORD *)(a2 + 256)) >> 3;
  v140 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v140 + 40))
  {
    v199 = (uint64_t *)(v140 + 16);
    sub_20B51F33C(&v199, v139);
    v141 = *(unsigned int **)(a2 + 256);
    k = *(unsigned int **)(a2 + 264);
    if (k != v141)
      goto LABEL_223;
  }
  else
  {
    sub_20B51F644();
    v141 = *(unsigned int **)(a2 + 256);
    for (k = *(unsigned int **)(a2 + 264); v141 != k; v141 += 2)
    {
LABEL_223:
      while (1)
      {
        v145 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v145 + 40))
          break;
        v143 = *v141;
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v143);
        std::ostream::write();
        v144 = v141[1];
        LOBYTE(v199) = -54;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v144);
        std::ostream::write();
        v141 += 2;
        if (v141 == k)
          goto LABEL_248;
      }
      v146 = *v141;
      v147 = *(_QWORD *)(v145 + 32);
      v148 = *(_QWORD *)(v145 + 16);
      if ((unint64_t)(v147 - v148) >= 5)
      {
        v151 = *(char **)(v145 + 24);
      }
      else
      {
        if (v147)
          v149 = 2 * v147;
        else
          v149 = 0x2000;
        v150 = v148 + 5;
        while (v149 < v150)
        {
          v19 = (uint64_t)v149 <= 0;
          v149 *= 2;
          if (v19)
          {
            v149 = v150;
            break;
          }
        }
        v151 = (char *)malloc_type_realloc(*(void **)(v145 + 24), v149, 0xAD6A59EEuLL);
        if (!v151)
          goto LABEL_316;
        *(_QWORD *)(v145 + 24) = v151;
        *(_QWORD *)(v145 + 32) = v149;
        v148 = *(_QWORD *)(v145 + 16);
      }
      v152 = &v151[v148];
      *v152 = -54;
      *(_DWORD *)(v152 + 1) = bswap32(v146);
      v153 = *(_QWORD *)(v145 + 16);
      v154 = v153 + 5;
      *(_QWORD *)(v145 + 16) = v153 + 5;
      v155 = v141[1];
      v156 = *(_QWORD *)(v145 + 32);
      if ((unint64_t)(v156 - (v153 + 5)) >= 5)
      {
        v158 = *(char **)(v145 + 24);
      }
      else
      {
        if (v156)
          v157 = 2 * v156;
        else
          v157 = 0x2000;
        while (v157 < v153 + 10)
        {
          v19 = (uint64_t)v157 <= 0;
          v157 *= 2;
          if (v19)
          {
            v157 = v153 + 10;
            break;
          }
        }
        v158 = (char *)malloc_type_realloc(*(void **)(v145 + 24), v157, 0xAD6A59EEuLL);
        if (!v158)
          goto LABEL_316;
        *(_QWORD *)(v145 + 24) = v158;
        *(_QWORD *)(v145 + 32) = v157;
        v154 = *(_QWORD *)(v145 + 16);
      }
      v159 = &v158[v154];
      *v159 = -54;
      *(_DWORD *)(v159 + 1) = bswap32(v155);
      *(_QWORD *)(v145 + 16) += 5;
    }
  }
LABEL_248:
  v160 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 296) - *(_QWORD *)(a2 + 288)) >> 2);
  v161 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v161 + 40))
  {
    sub_20B51F644();
    v162 = *(_QWORD *)(a2 + 288);
    v163 = *(_QWORD *)(a2 + 296) - v162;
    if (!v163)
      goto LABEL_281;
    goto LABEL_252;
  }
  v199 = (uint64_t *)(v161 + 16);
  sub_20B51F33C(&v199, v160);
  v162 = *(_QWORD *)(a2 + 288);
  v163 = *(_QWORD *)(a2 + 296) - v162;
  if (v163)
  {
LABEL_252:
    v164 = (unsigned int *)(v162 + 8);
    v165 = 12 * (v163 / 12);
    while (1)
    {
      while (1)
      {
        while (1)
        {
          v167 = *(_QWORD *)(a1 + 24);
          if (!*(_BYTE *)(v167 + 40))
            break;
          v199 = (uint64_t *)(v167 + 16);
          sub_20B51E95C(&v199, *(v164 - 2));
          sub_20B51E95C(&v199, *(v164 - 1));
          v166 = *v164;
          v164 += 3;
          sub_20B51E95C(&v199, v166);
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
        v168 = *(v164 - 2);
        if (v168 > 0xFF)
          break;
        if (v168 > 0x7F)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v168;
          std::ostream::write();
          v169 = *(v164 - 1);
          if (v169 < 0x100)
            goto LABEL_267;
        }
        else
        {
          LOBYTE(v199) = *(v164 - 2);
          std::ostream::write();
          v169 = *(v164 - 1);
          if (v169 < 0x100)
            goto LABEL_267;
        }
LABEL_263:
        if (v169 >= 0x10000)
        {
          LOBYTE(v199) = -50;
          *(_DWORD *)((char *)&v199 + 1) = bswap32(v169);
          std::ostream::write();
          v170 = *v164;
          if (*v164 >= 0x100)
            goto LABEL_271;
        }
        else
        {
          LOBYTE(v199) = -51;
          *(_WORD *)((char *)&v199 + 1) = bswap32(v169) >> 16;
          std::ostream::write();
          v170 = *v164;
          if (*v164 >= 0x100)
            goto LABEL_271;
        }
LABEL_275:
        if (v170 >= 0x80)
        {
          LOBYTE(v199) = -52;
          BYTE1(v199) = v170;
          std::ostream::write();
          v164 += 3;
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
        else
        {
          LOBYTE(v199) = v170;
          std::ostream::write();
          v164 += 3;
          v165 -= 12;
          if (!v165)
            goto LABEL_281;
        }
      }
      if (HIWORD(v168))
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v168);
        std::ostream::write();
        v169 = *(v164 - 1);
        if (v169 < 0x100)
          goto LABEL_267;
        goto LABEL_263;
      }
      LOBYTE(v199) = -51;
      *(_WORD *)((char *)&v199 + 1) = bswap32(v168) >> 16;
      std::ostream::write();
      v169 = *(v164 - 1);
      if (v169 >= 0x100)
        goto LABEL_263;
LABEL_267:
      if (v169 >= 0x80)
      {
        LOBYTE(v199) = -52;
        BYTE1(v199) = v169;
        std::ostream::write();
        v170 = *v164;
        if (*v164 >= 0x100)
          goto LABEL_271;
        goto LABEL_275;
      }
      LOBYTE(v199) = v169;
      std::ostream::write();
      v170 = *v164;
      if (*v164 < 0x100)
        goto LABEL_275;
LABEL_271:
      if (v170 >= 0x10000)
      {
        LOBYTE(v199) = -50;
        *(_DWORD *)((char *)&v199 + 1) = bswap32(v170);
        std::ostream::write();
        v164 += 3;
        v165 -= 12;
        if (!v165)
          break;
      }
      else
      {
        LOBYTE(v199) = -51;
        *(_WORD *)((char *)&v199 + 1) = bswap32(v170) >> 16;
        std::ostream::write();
        v164 += 3;
        v165 -= 12;
        if (!v165)
          break;
      }
    }
  }
LABEL_281:
  if (a3 < 2)
    return;
  v171 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(a2 + 344))
  {
    if (*(_BYTE *)(v171 + 40))
    {
      v199 = (uint64_t *)(v171 + 16);
      sub_20B51DD74(&v199, 0);
      if (a3 < 4)
        return;
    }
    else
    {
      LOBYTE(v199) = 0;
      std::ostream::write();
      if (a3 < 4)
        return;
    }
LABEL_301:
    v186 = *(_DWORD *)(a2 + 348);
    v187 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v187 + 40))
    {
      v199 = (uint64_t *)(v187 + 16);
      sub_20B51E95C(&v199, v186);
      v188 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
      v189 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v189 + 40))
        goto LABEL_303;
    }
    else
    {
      sub_20B51EBD0((uint64_t)&v199, v187 + 8);
      v188 = (uint64_t)(*(_QWORD *)(a2 + 360) - *(_QWORD *)(a2 + 352)) >> 2;
      v189 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v189 + 40))
      {
LABEL_303:
        v199 = (uint64_t *)(v189 + 16);
        sub_20B51F33C(&v199, v188);
        v191 = *(unsigned int **)(a2 + 352);
        v190 = *(unsigned int **)(a2 + 360);
        v192 = v190 - v191;
        v193 = *(_QWORD *)(a1 + 24);
        if (*(_BYTE *)(v193 + 40))
          goto LABEL_304;
LABEL_310:
        if (v190 != v191)
        {
          v195 = 4 * v192;
          do
          {
            v196 = *v191++;
            LOBYTE(v199) = -54;
            *(_DWORD *)((char *)&v199 + 1) = bswap32(v196);
            std::ostream::write();
            v195 -= 4;
          }
          while (v195);
        }
        return;
      }
    }
    sub_20B51F644();
    v191 = *(unsigned int **)(a2 + 352);
    v190 = *(unsigned int **)(a2 + 360);
    v192 = v190 - v191;
    v193 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v193 + 40))
    {
LABEL_304:
      v199 = (uint64_t *)(v193 + 16);
      if (v190 != v191)
      {
        v194 = 4 * v192;
        do
        {
          sub_20B51F73C((uint64_t)&v200, &v199, v191++);
          v194 -= 4;
        }
        while (v194);
      }
      return;
    }
    goto LABEL_310;
  }
  if (*(_BYTE *)(v171 + 40))
  {
    v199 = (uint64_t *)(v171 + 16);
    sub_20B51DD74(&v199, 1);
    v172 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v172 + 40))
      goto LABEL_285;
  }
  else
  {
    LOBYTE(v199) = 1;
    std::ostream::write();
    v172 = *(_QWORD *)(a1 + 24);
    if (*(_BYTE *)(v172 + 40))
    {
LABEL_285:
      v199 = (uint64_t *)(v172 + 16);
      sub_20B51E95C(&v199, 2u);
      sub_20B51956C(*(_QWORD *)(a1 + 24));
      v173 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v173 + 40))
        goto LABEL_286;
LABEL_293:
      v175 = *(_DWORD *)(a2 + 320);
      LOBYTE(v199) = -54;
      *(_DWORD *)((char *)&v199 + 1) = bswap32(v175);
      std::ostream::write();
      v176 = *(_DWORD *)(a2 + 324);
      LOBYTE(v199) = -54;
      *(_DWORD *)((char *)&v199 + 1) = bswap32(v176);
      std::ostream::write();
      v177 = *(_DWORD *)(a2 + 328);
      LOBYTE(v199) = -54;
      *(_DWORD *)((char *)&v199 + 1) = bswap32(v177);
      std::ostream::write();
      v174 = *(_QWORD *)(a1 + 24);
      if (*(_BYTE *)(v174 + 40))
        goto LABEL_287;
      goto LABEL_294;
    }
  }
  LOBYTE(v199) = 2;
  std::ostream::write();
  sub_20B51956C(*(_QWORD *)(a1 + 24));
  v173 = *(_QWORD *)(a1 + 24);
  if (!*(_BYTE *)(v173 + 40))
    goto LABEL_293;
LABEL_286:
  v199 = (uint64_t *)(v173 + 16);
  sub_20B51F73C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 320));
  sub_20B51F73C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 324));
  sub_20B51F73C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 328));
  v174 = *(_QWORD *)(a1 + 24);
  if (*(_BYTE *)(v174 + 40))
  {
LABEL_287:
    v199 = (uint64_t *)(v174 + 16);
    sub_20B51F73C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 332));
    sub_20B51F73C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 336));
    sub_20B51F73C((uint64_t)&v200, &v199, (unsigned int *)(a2 + 340));
    goto LABEL_295;
  }
LABEL_294:
  v178 = *(_DWORD *)(a2 + 332);
  LOBYTE(v199) = -54;
  *(_DWORD *)((char *)&v199 + 1) = bswap32(v178);
  std::ostream::write();
  v179 = *(_DWORD *)(a2 + 336);
  LOBYTE(v199) = -54;
  *(_DWORD *)((char *)&v199 + 1) = bswap32(v179);
  std::ostream::write();
  v180 = *(_DWORD *)(a2 + 340);
  LOBYTE(v199) = -54;
  *(_DWORD *)((char *)&v199 + 1) = bswap32(v180);
  std::ostream::write();
LABEL_295:
  v181 = *(_QWORD *)(a1 + 24);
  v182 = *(_QWORD *)(*(_QWORD *)(v181 + 88) - 8);
  sub_20B5190E0((uint64_t *)(v181 + 48), *(_QWORD *)(v181 + 16) - v182 - 9);
  v183 = *(_QWORD *)(v181 + 48);
  if (v183)
    memmove((void *)(*(_QWORD *)(v181 + 24) + v182), *(const void **)(v181 + 56), v183);
  *(_QWORD *)(v181 + 48) = 0;
  v184 = *(_QWORD *)(v181 + 80);
  v185 = *(_QWORD *)(v181 + 88) - 8;
  *(_QWORD *)(v181 + 88) = v185;
  if (v184 == v185)
  {
    std::ostream::write();
    if (*(_BYTE *)(v181 + 40))
    {
      free(*(void **)(v181 + 24));
      *(_BYTE *)(v181 + 40) = 0;
    }
  }
  if (a3 >= 4)
    goto LABEL_301;
}

